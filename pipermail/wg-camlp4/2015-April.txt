From register at ebr-catalog.com  Wed Apr 22 13:02:03 2015
From: register at ebr-catalog.com (EU Business Register)
Date: Wed, 22 Apr 2015 14:02:03 +0200
Subject: [wg-camlp4] Business Register 2015/2016
Message-ID: <970e92044f4a91bc9e066facf995ebc0@localhost.localdomain>

Madam/Sir,

In order to have your company inserted in our Register for 2015/2016 print, complete and submit the attached form (PDF) to the following address:

EU BUSINESS REGISTER
PO BOX 3079
3502 GB UTRECHT
THE NETHERLANDS

Fax: 0031 205 248107

You can also attach the completed form in a reply to this email.

Updating is free of charge!
-------------- next part --------------
A non-text attachment was scrubbed...
Name: EBR-form.pdf
Type: application/octet-stream
Size: 7463 bytes
Desc: not available
URL: <http://lists.ocaml.org/pipermail/wg-camlp4/attachments/20150422/0567985f/attachment.obj>

From no263 at dpmms.cam.ac.uk  Wed Apr 22 17:36:11 2015
From: no263 at dpmms.cam.ac.uk (Nicolas Ojeda Bar)
Date: Wed, 22 Apr 2015 17:36:11 +0100
Subject: [wg-camlp4] expressions in pattern position ?
Message-ID: <CAPunWhB=NNVApqqknL-Uyo=sX9sGXpOZ4MnwOF-utgpfeRBUAw@mail.gmail.com>

Hi,

I am currently working on porting ocaml-bitstring to ppx.

<https://code.google.com/p/bitstring/>

The camlp4 version of this syntax extension extends the syntax to allow
expressions in "pattern" positions.  For example:

bitmatch bits with
| { <patt> : <expr> : bind <expr> } -> ...

I am considering the following concrete ppx syntax to emulate this:

match%bitstring bits with
| x, [%len <expr>], [%bind <expr>] ->

(the [%len] annotation can be skipped if the payload is a literal constant).

I find this syntax a little too heavy and am thinking about ways to improve it.

I seem to remember some time ago there was a discussion about having the parser
allow expression in pattern positions and reject those which are not
patterns during
typechecking.  I don't actually like this option, but was wondering if
there had been any
conclusions on the issue.

Another possibility would be to use the {| ... |} annotation, as in:

match%bitstring bits with
| {| x : <expr> : bind <expr> |} -> ...

The problem then is that one needs to write a parser for the thing
inside {| ... |}.  I thought
about splitting the payload on the delimiter ':' and then calling the
OCaml parser to parse
the individual subparts (here: "x", "<expr>", and "bind <expr>").

What do you think ?

Thanks!

Best wishes,
Nicolas

From gabriel.scherer at gmail.com  Wed Apr 22 17:51:50 2015
From: gabriel.scherer at gmail.com (Gabriel Scherer)
Date: Wed, 22 Apr 2015 18:51:50 +0200
Subject: [wg-camlp4] expressions in pattern position ?
In-Reply-To: <CAPunWhB=NNVApqqknL-Uyo=sX9sGXpOZ4MnwOF-utgpfeRBUAw@mail.gmail.com>
References: <CAPunWhB=NNVApqqknL-Uyo=sX9sGXpOZ4MnwOF-utgpfeRBUAw@mail.gmail.com>
Message-ID: <CAPFanBE1ijL_f+dcFfhwCZgE-1fG651c_dqSzAO_8hbh4qvq+A@mail.gmail.com>

Another option you have is to only replace the part that cannot be patterns
by extensions:

match%bitstring bits with
| { len = [%p <expr>]; bind = [%p <expr>] } -> ...

On Wed, Apr 22, 2015 at 6:36 PM, Nicolas Ojeda Bar <no263 at dpmms.cam.ac.uk>
wrote:

> Hi,
>
> I am currently working on porting ocaml-bitstring to ppx.
>
> <https://code.google.com/p/bitstring/>
>
> The camlp4 version of this syntax extension extends the syntax to allow
> expressions in "pattern" positions.  For example:
>
> bitmatch bits with
> | { <patt> : <expr> : bind <expr> } -> ...
>
> I am considering the following concrete ppx syntax to emulate this:
>
> match%bitstring bits with
> | x, [%len <expr>], [%bind <expr>] ->
>
> (the [%len] annotation can be skipped if the payload is a literal
> constant).
>
> I find this syntax a little too heavy and am thinking about ways to
> improve it.
>
> I seem to remember some time ago there was a discussion about having the
> parser
> allow expression in pattern positions and reject those which are not
> patterns during
> typechecking.  I don't actually like this option, but was wondering if
> there had been any
> conclusions on the issue.
>
> Another possibility would be to use the {| ... |} annotation, as in:
>
> match%bitstring bits with
> | {| x : <expr> : bind <expr> |} -> ...
>
> The problem then is that one needs to write a parser for the thing
> inside {| ... |}.  I thought
> about splitting the payload on the delimiter ':' and then calling the
> OCaml parser to parse
> the individual subparts (here: "x", "<expr>", and "bind <expr>").
>
> What do you think ?
>
> Thanks!
>
> Best wishes,
> Nicolas
> _______________________________________________
> wg-camlp4 mailing list
> wg-camlp4 at lists.ocaml.org
> http://lists.ocaml.org/listinfo/wg-camlp4
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/wg-camlp4/attachments/20150422/ba48484d/attachment.html>

From nbennett at unm.edu  Thu Apr 23 19:14:24 2015
From: nbennett at unm.edu (Felecia Hampton)
Date: Thu, 23 Apr 2015 18:14:24 -0000
Subject: [wg-camlp4] marketing secrets!
Message-ID: <mailman.0.1429812865.29792.wg-camlp4@lists.ocaml.org>

An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/wg-camlp4/attachments/20150423/57a49061/attachment.html>

From register at eu-catalog.org  Mon Apr 27 14:12:27 2015
From: register at eu-catalog.org (EU Business Register)
Date: Mon, 27 Apr 2015 15:12:27 +0200
Subject: [wg-camlp4] Business Register 2015/2016
Message-ID: <1571b22466c33bb9cc81c3a152e040f1@localhost.localdomain>

Madam/Sir,

In order to have your company inserted in our Register for 2015/2016 print, complete and submit the attached form (PDF) to the following address:

EU BUSINESS REGISTER
PO BOX 3079
3502 GB UTRECHT
THE NETHERLANDS

Fax: 0031 205 248107

You can also attach the completed form in a reply to this email.

Updating is free of charge!
-------------- next part --------------
A non-text attachment was scrubbed...
Name: EBR-form.pdf
Type: application/octet-stream
Size: 7462 bytes
Desc: not available
URL: <http://lists.ocaml.org/pipermail/wg-camlp4/attachments/20150427/9f54add4/attachment.obj>

