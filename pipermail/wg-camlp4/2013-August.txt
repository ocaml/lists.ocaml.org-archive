From tews at os.inf.tu-dresden.de  Thu Aug 22 13:21:29 2013
From: tews at os.inf.tu-dresden.de (Hendrik Tews)
Date: Thu, 22 Aug 2013 14:21:29 +0200
Subject: [wg-camlp4] parse_with_ppx [was: My no-use of camlp4 syntax
	extensions for Otags]
In-Reply-To: <512B2F2C.9090308@lexifi.com> (Alain Frisch's message of "Mon, 25
 Feb 2013 10:30:20 +0100")
References: <20775.25929.388649.943057@blau.inf.tu-dresden.de>
 <512B2F2C.9090308@lexifi.com>
Message-ID: <6x38q1ykza.fsf_-_@blau.inf.tu-dresden.de>

Hi,

a long time ago I asked about function parse_with_ppx, that takes
a file name, applies -pp preprocessors, parses the result,
applies -ppx preprocessors and returns the syntax tree.

Is such a function available in 4.01 beta? Or, could somebody
point me to the relevant code in ocamlc/ocamlopt that does that?

(I need this functionality to port otags from camlp4 to -ppx.)


Here is some background from the "my no-use ..." thread:

I wrote:

   > ... it would be nice, if the compilerlibs could
   > provide a function parse_with_ppx, or everything that is needed
   > for writing it. parse_with_ppx takes a filename and a list of
   > preprocessor names, parses the file, runs all preprocessors and
   > returns the ast.

Alain ansered:

   This is already the case, you can do something like:

     let inputfile = Pparse.preprocess sourcefile in
     let ast =
      Pparse.file ppf inputfile Parse.implementation ast_impl_magic_number
     in
     ...
     Pparse.remove_preprocessed inputfile

   Maybe we should encapsulate the code above as a single function (with
   proper support for errors, i.e. removing the temporary file produced
   by the -pp preprocessor in case of error).

I answered again:

   I would prefer something that automatically deals with temporary
   files but raises errors as exceptions together with a function
   that converts these exceptions into proper error messages. 


Bye,

Hendrik

From alain.frisch at lexifi.com  Thu Aug 29 13:01:06 2013
From: alain.frisch at lexifi.com (Alain Frisch)
Date: Thu, 29 Aug 2013 14:01:06 +0200
Subject: [wg-camlp4] extension_points merged in trunk
Message-ID: <521F3802.1030708@lexifi.com>

Dear all,

I've merged the extension_points back into the trunk.  This does not 
mean that the work on it is finished, nor that the syntax and other 
design choices are necessarily final.  Merging the branch now will give 
it more visibility and avoid merge conflicts.  The next official release 
created from the trunk (which will be called 4.02) will probably happen 
in about one year, which gives ample time to polish the work and 
document it.

One of the most important remaining task is to adapt Camlp4.  Nothing 
critical in itself, since it works fine, but it doesn't fully support 
the new syntactic features.  Currently, its AST and parsers support 
attributes only on some syntactic categories.  This needs to be cleaned 
up and finished.  I hope some people will be able to contribute!  (Hongbo?)


Alain

From alain.frisch at lexifi.com  Fri Aug 30 15:58:10 2013
From: alain.frisch at lexifi.com (Alain Frisch)
Date: Fri, 30 Aug 2013 16:58:10 +0200
Subject: [wg-camlp4] Negative field report: extension points unsuited
 for (matches p when e)
In-Reply-To: <CAPFanBG3iR850B=sKRzbcJ2j1mphQM2Xo5ipEbvbvrqco7q=yA@mail.gmail.com>
References: <CAPFanBG3iR850B=sKRzbcJ2j1mphQM2Xo5ipEbvbvrqco7q=yA@mail.gmail.com>
Message-ID: <5220B302.7060406@lexifi.com>

On 05/01/2013 04:44 PM, Gabriel Scherer wrote:
 > The recent caml-list message by rixed (archived below) motivated me to
 > get pa_matches in shape (it lacked support for "when ..."), and try to
 > see how a similar extension could be implemented with the new
 > extension_points branch.

Here is a version of ppx_matches using the new form of payload for 
extension nodes:

http://caml.inria.fr/cgi-bin/viewvc.cgi/ocaml/trunk/experimental/frisch/ppx_matches.ml?revision=HEAD&view=markup

and an example using it:

http://caml.inria.fr/cgi-bin/viewvc.cgi/ocaml/trunk/experimental/frisch/test_matches.ml?revision=HEAD&view=markup

Alain

