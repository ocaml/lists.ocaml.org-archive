From alain.frisch at lexifi.com  Mon Apr 14 15:57:31 2014
From: alain.frisch at lexifi.com (Alain Frisch)
Date: Mon, 14 Apr 2014 16:57:31 +0200
Subject: [wg-camlp4] Structure/signature attributes suggestion
In-Reply-To: <52614209.2000006@lexifi.com>
References: <51701746.9010008@lexifi.com> <86hacnrcd2.fsf@cam.ac.uk>
 <525864C1.80908@lexifi.com> <86vc13mrnp.fsf@cam.ac.uk>
 <5258E54C.5050701@lexifi.com>
 <CAPFanBFQaHS094YgSQJPwJuWDR7E5ZSgyJv-T0AXOzPBnrf0LA@mail.gmail.com>
 <52614209.2000006@lexifi.com>
Message-ID: <534BF75B.4030006@lexifi.com>

On 10/18/2013 04:13 PM, Alain Frisch wrote:
> I think it makes sense to keep floating attributes in general.  They are
> useful also to turn warnings on/off, for instance.

Leo sent me a gentle reminder about this discussion on "floating 
attributes", i.e. attributes in position of a structure or signature 
item (not attached *to* such an item).  Previously the syntax was the 
same as for item attributes [@@id arg], and floating attributes were 
recognized at the beginning of signatures and structures, and after ";;".

I've introduced a new dedicated syntax:

   [@@@id arg]

for such attributes.  This is much more robust: it was just too easy to 
forget ";;" and have such an attribute attached by mistake to the 
previous item.  And it was quite ugly having to systematically prefix 
such an attribute with ";;".


If anyone strongly objects with this change, speak now!


Damien: if you synchronize your branch with the trunk, you'll have to 
use [@@@warning ....] instead of [@@warning ...].

-- Alain

From alain.frisch at lexifi.com  Mon Apr 14 16:18:55 2014
From: alain.frisch at lexifi.com (Alain Frisch)
Date: Mon, 14 Apr 2014 17:18:55 +0200
Subject: [wg-camlp4] Built-in attributes
Message-ID: <534BFC5F.9030509@lexifi.com>

Dear all,

In order to mark cleanly which warnings are understood in a special way 
by the compiler, I've added an ocaml.* prefix to them.   Currently, the 
only such attributes are ocaml.deprecated and ocaml.warning.

I'm planning to add (with a low priority) a new warning to report uses 
of unknown ocaml.* warnings (or known warnings applied to a wrong 
object).  This will allow to catch typos such as writing ocaml.warnings 
instead of ocaml.warning.


Alain

From damien.doligez at inria.fr  Mon Apr 14 16:40:44 2014
From: damien.doligez at inria.fr (Damien Doligez)
Date: Mon, 14 Apr 2014 17:40:44 +0200
Subject: [wg-camlp4] [Caml-devel] Structure/signature attributes
	suggestion
In-Reply-To: <534BF75B.4030006@lexifi.com>
References: <51701746.9010008@lexifi.com> <86hacnrcd2.fsf@cam.ac.uk>
 <525864C1.80908@lexifi.com> <86vc13mrnp.fsf@cam.ac.uk>
 <5258E54C.5050701@lexifi.com>
 <CAPFanBFQaHS094YgSQJPwJuWDR7E5ZSgyJv-T0AXOzPBnrf0LA@mail.gmail.com>
 <52614209.2000006@lexifi.com> <534BF75B.4030006@lexifi.com>
Message-ID: <06269D19-0BB2-406F-94BB-4DB58F59B9F4@inria.fr>

IIUC, we now have three kinds of attributes:

[@foo]   attached to an expression
[@@foo]  attached to a structure item
[@@@foo] attached to the whole module (with location being significant?)

I like this change.

BTW I won't have to use [@@@warning] because I don't use [@@warning] yet...

-- Damien



On 2014-04-14, at 16:57, Alain Frisch wrote:

> On 10/18/2013 04:13 PM, Alain Frisch wrote:
>> I think it makes sense to keep floating attributes in general.  They are
>> useful also to turn warnings on/off, for instance.
> 
> Leo sent me a gentle reminder about this discussion on "floating attributes", i.e. attributes in position of a structure or signature item (not attached *to* such an item).  Previously the syntax was the same as for item attributes [@@id arg], and floating attributes were recognized at the beginning of signatures and structures, and after ";;".
> 
> I've introduced a new dedicated syntax:
> 
>  [@@@id arg]
> 
> for such attributes.  This is much more robust: it was just too easy to forget ";;" and have such an attribute attached by mistake to the previous item.  And it was quite ugly having to systematically prefix such an attribute with ";;".
> 
> 
> If anyone strongly objects with this change, speak now!
> 
> 
> Damien: if you synchronize your branch with the trunk, you'll have to use [@@@warning ....] instead of [@@warning ...].
> 
> -- Alain
> 
> _______________________________________________
> Caml-devel mailing list
> Caml-devel at yquem.inria.fr
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-devel


From alain.frisch at lexifi.com  Mon Apr 14 16:47:43 2014
From: alain.frisch at lexifi.com (Alain Frisch)
Date: Mon, 14 Apr 2014 17:47:43 +0200
Subject: [wg-camlp4] [Caml-devel] Structure/signature attributes
	suggestion
In-Reply-To: <06269D19-0BB2-406F-94BB-4DB58F59B9F4@inria.fr>
References: <51701746.9010008@lexifi.com> <86hacnrcd2.fsf@cam.ac.uk>
 <525864C1.80908@lexifi.com> <86vc13mrnp.fsf@cam.ac.uk>
 <5258E54C.5050701@lexifi.com>
 <CAPFanBFQaHS094YgSQJPwJuWDR7E5ZSgyJv-T0AXOzPBnrf0LA@mail.gmail.com>
 <52614209.2000006@lexifi.com> <534BF75B.4030006@lexifi.com>
 <06269D19-0BB2-406F-94BB-4DB58F59B9F4@inria.fr>
Message-ID: <534C031F.4010508@lexifi.com>

On 04/14/2014 05:40 PM, Damien Doligez wrote:
> IIUC, we now have three kinds of attributes:
>
> [@foo]   attached to an expression
> [@@foo]  attached to a structure item
> [@@@foo] attached to the whole module (with location being significant?)

[@@@foo] is part of the flow of structure items.  An application can 
certainly interpret it as attached to the whole unit (or just the 
current structure), but in general the location is significant.  This is 
the case in particular for [@@warning] which you can use several times 
in the same unit; and it applies only from the point it appears.


Alain

From gabriel.scherer at gmail.com  Mon Apr 14 22:58:06 2014
From: gabriel.scherer at gmail.com (Gabriel Scherer)
Date: Mon, 14 Apr 2014 23:58:06 +0200
Subject: [wg-camlp4] [Caml-devel] Built-in attributes
In-Reply-To: <534BFC5F.9030509@lexifi.com>
References: <534BFC5F.9030509@lexifi.com>
Message-ID: <CAPFanBG0nQMU+aFusmUPnvxiiLonOrn2f0aqy0LiTQk=-QzhZg@mail.gmail.com>

I'm not convinced this is the good change.
- I see the point of namespacing to avoid conflicts but I suspect
conciseness is also important here, if we want to use warning-tweaking
directives in a fine-grained enough way
- I suspect that the idea of warning over unknown ocaml.foo attributes is
papering over the real difficulty, which is the fact that it's very easy to
make a mistake if warnings are ignored by default. While giving more
structure to an "ocaml" namespace solves the particular problem Damien had
with deprecated, chances are users will still have their problems with the
warnings they define on their own (or what about [@@OCaml.warning]). We may
want to think harder about resilience to user mistakes to aim for a less
ad-hoc solution.


On Mon, Apr 14, 2014 at 5:18 PM, Alain Frisch <alain.frisch at lexifi.com>wrote:

> Dear all,
>
> In order to mark cleanly which warnings are understood in a special way by
> the compiler, I've added an ocaml.* prefix to them.   Currently, the only
> such attributes are ocaml.deprecated and ocaml.warning.
>
> I'm planning to add (with a low priority) a new warning to report uses of
> unknown ocaml.* warnings (or known warnings applied to a wrong object).
>  This will allow to catch typos such as writing ocaml.warnings instead of
> ocaml.warning.
>
>
> Alain
>
> _______________________________________________
> Caml-devel mailing list
> Caml-devel at yquem.inria.fr
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/wg-camlp4/attachments/20140414/f20a9d88/attachment.html>

From mshinwell at janestreet.com  Tue Apr 15 07:03:38 2014
From: mshinwell at janestreet.com (Mark Shinwell)
Date: Tue, 15 Apr 2014 07:03:38 +0100
Subject: [wg-camlp4] [Caml-devel] Structure/signature attributes
	suggestion
In-Reply-To: <06269D19-0BB2-406F-94BB-4DB58F59B9F4@inria.fr>
References: <51701746.9010008@lexifi.com> <86hacnrcd2.fsf@cam.ac.uk>
 <525864C1.80908@lexifi.com> <86vc13mrnp.fsf@cam.ac.uk>
 <5258E54C.5050701@lexifi.com>
 <CAPFanBFQaHS094YgSQJPwJuWDR7E5ZSgyJv-T0AXOzPBnrf0LA@mail.gmail.com>
 <52614209.2000006@lexifi.com> <534BF75B.4030006@lexifi.com>
 <06269D19-0BB2-406F-94BB-4DB58F59B9F4@inria.fr>
Message-ID: <CAM3Ki77cU3LHFUpsbe4caDq6t-dgABxXm-eiB4CB+6PPBktHUg@mail.gmail.com>

On 14 April 2014 16:40, Damien Doligez <damien.doligez at inria.fr> wrote:
> IIUC, we now have three kinds of attributes:
>
> [@foo]   attached to an expression
> [@@foo]  attached to a structure item
> [@@@foo] attached to the whole module (with location being significant?)

Seems like a nice hierarchy, but: doesn't anyone else find this syntax
increasingly ugly?  I do!

Mark

From drupyog+caml at zoho.com  Tue Apr 15 10:48:09 2014
From: drupyog+caml at zoho.com (Drup)
Date: Tue, 15 Apr 2014 11:48:09 +0200
Subject: [wg-camlp4] [Caml-devel] Structure/signature attributes
	suggestion
In-Reply-To: <CAM3Ki77cU3LHFUpsbe4caDq6t-dgABxXm-eiB4CB+6PPBktHUg@mail.gmail.com>
References: <51701746.9010008@lexifi.com> <86hacnrcd2.fsf@cam.ac.uk>
 <525864C1.80908@lexifi.com> <86vc13mrnp.fsf@cam.ac.uk>
 <5258E54C.5050701@lexifi.com>
 <CAPFanBFQaHS094YgSQJPwJuWDR7E5ZSgyJv-T0AXOzPBnrf0LA@mail.gmail.com>
 <52614209.2000006@lexifi.com> <534BF75B.4030006@lexifi.com>
 <06269D19-0BB2-406F-94BB-4DB58F59B9F4@inria.fr>
 <CAM3Ki77cU3LHFUpsbe4caDq6t-dgABxXm-eiB4CB+6PPBktHUg@mail.gmail.com>
Message-ID: <534D0059.2030305@zoho.com>

I agree, but the added verbosity with all those additional brackets 
bother me even more, especially for attributes. I wonder if we could 
drop some brackets when there is no added expression : "x at foo" instead 
of "x[@foo]" .

Also, to follow some shortcuts with extension nodes on keyword, would it 
be possible to add those syntax :

1) "let%foo x = 3" => "[%%foo let x = 3]"
Since "let ... " is not an expression (but a toplevel declaration), the 
%foo doesn't work on them.
We could use %% for consistency, but the added symbol doesn't bring any 
added value, since the % character is already specific enough.

2) "( ... )%foo"
It would be equivalent to "begin%foo ... end" or [%foo ... ] but (imho) 
easier on the eyes and closer to a natural ocaml syntax, even it  it's 
not much shorter, character wise.

My use cases for those are top level server and client declarations and 
client values in eliom.

Le 15/04/2014 08:03, Mark Shinwell a ?crit :
> On 14 April 2014 16:40, Damien Doligez <damien.doligez at inria.fr> wrote:
>> IIUC, we now have three kinds of attributes:
>>
>> [@foo]   attached to an expression
>> [@@foo]  attached to a structure item
>> [@@@foo] attached to the whole module (with location being significant?)
> Seems like a nice hierarchy, but: doesn't anyone else find this syntax
> increasingly ugly?  I do!
>
> Mark
> _______________________________________________
> wg-camlp4 mailing list
> wg-camlp4 at lists.ocaml.org
> http://lists.ocaml.org/listinfo/wg-camlp4



From alain at frisch.fr  Tue Apr 15 12:44:04 2014
From: alain at frisch.fr (Alain Frisch)
Date: Tue, 15 Apr 2014 13:44:04 +0200
Subject: [wg-camlp4] [Caml-devel] Structure/signature attributes
	suggestion
In-Reply-To: <534D0059.2030305@zoho.com>
References: <51701746.9010008@lexifi.com> <86hacnrcd2.fsf@cam.ac.uk>
 <525864C1.80908@lexifi.com> <86vc13mrnp.fsf@cam.ac.uk>
 <5258E54C.5050701@lexifi.com>
 <CAPFanBFQaHS094YgSQJPwJuWDR7E5ZSgyJv-T0AXOzPBnrf0LA@mail.gmail.com>
 <52614209.2000006@lexifi.com> <534BF75B.4030006@lexifi.com>
 <06269D19-0BB2-406F-94BB-4DB58F59B9F4@inria.fr>
 <CAM3Ki77cU3LHFUpsbe4caDq6t-dgABxXm-eiB4CB+6PPBktHUg@mail.gmail.com>
 <534D0059.2030305@zoho.com>
Message-ID: <534D1B84.5060802@frisch.fr>

On 04/15/2014 11:48 AM, Drup wrote:
> I agree, but the added verbosity with all those additional brackets
> bother me even more, especially for attributes. I wonder if we could
> drop some brackets when there is no added expression : "x at foo" instead
> of "x[@foo]" .

Since @ is a binary operator, x at foo would not be available for 
expressions. I don't think it is worth supporting it for other kinds of 
syntactic categories.

>
> Also, to follow some shortcuts with extension nodes on keyword, would it
> be possible to add those syntax :
>
> 1) "let%foo x = 3" => "[%%foo let x = 3]"
> Since "let ... " is not an expression (but a toplevel declaration), the
> %foo doesn't work on them.
> We could use %% for consistency, but the added symbol doesn't bring any
> added value, since the % character is already specific enough.

Good idea.  I've committed it to trunk, rev 14600.  Here we benefit from 
the fact that the payload of extension nodes can be arbitrary 
structures, not just expressions.

(Attributes are still not supported on let-binding structure items: 
let[@foo] x = 3.)

> 2) "( ... )%foo"
> It would be equivalent to "begin%foo ... end" or [%foo ... ] but (imho)
> easier on the eyes and closer to a natural ocaml syntax, even it  it's
> not much shorter, character wise.

Same as above: (%) is a valid infix operator.


-- Alain

From darioteixeira at yahoo.com  Tue Apr 15 17:54:34 2014
From: darioteixeira at yahoo.com (Dario Teixeira)
Date: Tue, 15 Apr 2014 09:54:34 -0700 (PDT)
Subject: [wg-camlp4] [Caml-devel] Built-in attributes
In-Reply-To: <CAPFanBG0nQMU+aFusmUPnvxiiLonOrn2f0aqy0LiTQk=-QzhZg@mail.gmail.com>
References: <534BFC5F.9030509@lexifi.com>
 <CAPFanBG0nQMU+aFusmUPnvxiiLonOrn2f0aqy0LiTQk=-QzhZg@mail.gmail.com>
Message-ID: <1397580874.77042.YahooMailNeo@web121701.mail.ne1.yahoo.com>

Hi,

> - I see the point of namespacing to avoid conflicts but I suspect conciseness is
> also important here, if we want to use warning-tweaking directives in a fine-grained
> enough way
>
> - I suspect that the idea of warning over unknown ocaml.foo attributes is papering
> over the real difficulty, which is the fact that it's very easy to make a mistake if
> warnings are ignored by default. While giving more structure to an "ocaml" namespace
> solves the particular problem Damien had with deprecated, chances are users will
> still have their problems with the warnings they define on their own (or what about
> [@@OCaml.warning]). We may want to think harder about resilience to user mistakes to
> aim for a less ad-hoc solution.

Gabriel has a point here.??As I see it, there are three broad approaches to namespacing:

? 1) Namespace nothing.? Use social norms to avoid name clashes between different projects.

? 2) Namespace everything, including compiler extensions.??Compiler can even enforce this
???? usage by requiring extension points to be of the form "ns.name".

? 3) No namespacing for generic and builtin attributes, such as "default", "warning",
???? or "author", but socially-enforced namespacing for extension-specific attributes.

Here's my problem with solution 2: how do we deal with generic attributes that could be
used by more than one extension???(For instance, attribute "default" used by Sexplib
or Bin-prot, or documentation attributes such as "author" used by tools such as Ocamldoc).
This is why I'm leaning more towards solution 3.??This approach would require a centrally
maintained list of non-namespaced attributes (a disadvantage, I admit), but this list
would be small and fairly static (we could require broad community approval before
adding another attribute).??All other attributes would be namespaced, though I imagine
that the namespacing could itself be a social convention (eg. "proj.attr") instead
of being enforced by the compiler.

As for the other problem Gabriel raised -- typos going unnoticed -- I reckon tooling
outside the compiler could be of help.??A tool that went through the code base and
checked each usage of an extension point against a project whitelist would catch typos,
for instance.

Best regards,
Dario Teixeira


From alain.frisch at lexifi.com  Wed Apr 16 09:33:55 2014
From: alain.frisch at lexifi.com (Alain Frisch)
Date: Wed, 16 Apr 2014 10:33:55 +0200
Subject: [wg-camlp4] [Caml-devel] Built-in attributes
In-Reply-To: <CAPFanBG0nQMU+aFusmUPnvxiiLonOrn2f0aqy0LiTQk=-QzhZg@mail.gmail.com>
References: <534BFC5F.9030509@lexifi.com>
 <CAPFanBG0nQMU+aFusmUPnvxiiLonOrn2f0aqy0LiTQk=-QzhZg@mail.gmail.com>
Message-ID: <534E4073.5020005@lexifi.com>

On 04/14/2014 11:58 PM, Gabriel Scherer wrote:
> - I see the point of namespacing to avoid conflicts but I suspect
> conciseness is also important here, if we want to use warning-tweaking
> directives in a fine-grained enough way

I don't particularly want to encourage that.  The standard use for 
[ocaml.warning] I have in mind is to control warnings for an entire 
compilation unit (thus simplifying the build system and making the unit 
more self-contained), maybe for a "section" of it (hence the warning on 
expressions, to allow begin[@ocaml.warning "..."] .... end), especially 
during development.  It would be a mess if people start to decorate 
their code with long-lasting warning-tweaking directives all over the 
place, in my opinion.  (Especially from a readability point of view: 
numbered warnings are quite unfriendly.)

> - I suspect that the idea of warning over unknown ocaml.foo attributes
> is papering over the real difficulty, which is the fact that it's very
> easy to make a mistake if warnings are ignored by default. While giving
> more structure to an "ocaml" namespace solves the particular problem
> Damien had with deprecated, chances are users will still have their
> problems with the warnings they define on their own (or what about
> [@@OCaml.warning]). We may want to think harder about resilience to user
> mistakes to aim for a less ad-hoc solution.

A tool which checks for correct use of warnings could be useful, and not 
too difficult if one restrict to a "white-list" of known attributes 
(maybe some information about where they can be used, and potentially 
with some "typing" information).  Each tool operating on attributes (ppx 
or others) could come with a description of what it understands, to be 
processed by this checking tool.

That said, I wouldn't be surprised if code made available publicly 
contains attributes to be interpreted by tools which are not necessarily 
available where that code is compiled.  For instance, a company could 
publish code containing some internal "code review markers" (implemented 
as attributes).


Alain

From lpw25 at cam.ac.uk  Wed Apr 16 10:49:20 2014
From: lpw25 at cam.ac.uk (Leo White)
Date: Wed, 16 Apr 2014 10:49:20 +0100
Subject: [wg-camlp4] [Caml-devel] Built-in attributes
In-Reply-To: <534E4073.5020005@lexifi.com> (Alain Frisch's message of "Wed, 16
 Apr 2014 10:33:55 +0200")
References: <534BFC5F.9030509@lexifi.com>
 <CAPFanBG0nQMU+aFusmUPnvxiiLonOrn2f0aqy0LiTQk=-QzhZg@mail.gmail.com>
 <534E4073.5020005@lexifi.com>
Message-ID: <86zjjl4na7.fsf@cam.ac.uk>

> I don't particularly want to encourage that.  The standard use for [ocaml.warning] I have in mind is to control warnings
> for an entire compilation unit (thus simplifying the build system and making the unit more self-contained), maybe for a
> "section" of it (hence the warning on expressions, to allow begin[@ocaml.warning "..."] .... end), especially during
> development.  It would be a mess if people start to decorate their code with long-lasting warning-tweaking directives
> all over the place, in my opinion.  (Especially from a readability point of view: numbered warnings are quite
> unfriendly.)
>

While this might be true for `[@warning]` it probably won't be true for
every attribute the compiler will understand. I think `[@ocaml.foo]`
could get pretty annoying pretty fast.

Regards,

Leo

