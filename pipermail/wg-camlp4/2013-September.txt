From anil at recoil.org  Mon Sep  9 11:15:29 2013
From: anil at recoil.org (Anil Madhavapeddy)
Date: Mon, 9 Sep 2013 11:15:29 +0100
Subject: [wg-camlp4] extension_points merged in trunk
In-Reply-To: <521F3802.1030708@lexifi.com>
References: <521F3802.1030708@lexifi.com>
Message-ID: <AF919896-C05A-4808-BEF2-F33A734AC4D9@recoil.org>

On 29 Aug 2013, at 13:01, Alain Frisch <alain.frisch at lexifi.com> wrote:

> Dear all,
> 
> I've merged the extension_points back into the trunk.  This does not mean that the work on it is finished, nor that the syntax and other design choices are necessarily final.  Merging the branch now will give it more visibility and avoid merge conflicts.  The next official release created from the trunk (which will be called 4.02) will probably happen in about one year, which gives ample time to polish the work and document it.
> 
> One of the most important remaining task is to adapt Camlp4.  Nothing critical in itself, since it works fine, but it doesn't fully support the new syntactic features.  Currently, its AST and parsers support attributes only on some syntactic categories.  This needs to be cleaned up and finished.  I hope some people will be able to contribute!  (Hongbo?)

Great news!  I'll do some garbage collection on the OPAM switches then -- we no longer need the 4.01.0dev+extension_points switch, so I'll remove that in favour of the vanilla 4.02.0dev trunk unless you have any objections.

-anil

From alain.frisch at lexifi.com  Mon Sep  9 12:17:42 2013
From: alain.frisch at lexifi.com (Alain Frisch)
Date: Mon, 09 Sep 2013 13:17:42 +0200
Subject: [wg-camlp4] extension_points merged in trunk
In-Reply-To: <AF919896-C05A-4808-BEF2-F33A734AC4D9@recoil.org>
References: <521F3802.1030708@lexifi.com>
 <AF919896-C05A-4808-BEF2-F33A734AC4D9@recoil.org>
Message-ID: <522DAE56.5010602@lexifi.com>

On 09/09/2013 12:15 PM, Anil Madhavapeddy wrote:
> Great news!  I'll do some garbage collection on the OPAM switches
> then -- we no longer need the 4.01.0dev+extension_points switch, so
> I'll remove that in favour of the vanilla 4.02.0dev trunk unless you
> have any objections.

It's definitely a good idea.  The branch is indeed closed and remaining 
work will be done on the trunk.


-- Alain

From wojciech.meyer at gmail.com  Mon Sep  9 14:24:25 2013
From: wojciech.meyer at gmail.com (Wojciech Meyer)
Date: Mon, 9 Sep 2013 14:24:25 +0100
Subject: [wg-camlp4] extension_points merged in trunk
In-Reply-To: <522DAE56.5010602@lexifi.com>
References: <521F3802.1030708@lexifi.com>
 <AF919896-C05A-4808-BEF2-F33A734AC4D9@recoil.org>
 <522DAE56.5010602@lexifi.com>
Message-ID: <CAOg1smBazGaF88MQNGWK8DXk0_Ewwe=OS7c0LihJ2enn6_J4YA@mail.gmail.com>

Hi Alain & Anil,

Is anybody is planing to host a wiki (on github?) how to use new
language extension engine? It would be good to as soon as possible so
people may start writing new extensions, or porting old Camlp4. I know
there is a document in experimental directory.

Alain Frisch <alain.frisch at lexifi.com> writes:

> On 09/09/2013 12:15 PM, Anil Madhavapeddy wrote:
>> Great news!  I'll do some garbage collection on the OPAM switches
>> then -- we no longer need the 4.01.0dev+extension_points switch, so
>> I'll remove that in favour of the vanilla 4.02.0dev trunk unless you
>> have any objections.
>
> It's definitely a good idea.  The branch is indeed closed and
> remaining work will be done on the trunk.
>
>
> -- Alain
> _______________________________________________
> wg-camlp4 mailing list
> wg-camlp4 at lists.ocaml.org
> http://lists.ocaml.org/listinfo/wg-camlp4

--
Wojciech



On Mon, Sep 9, 2013 at 12:17 PM, Alain Frisch <alain.frisch at lexifi.com>wrote:

> On 09/09/2013 12:15 PM, Anil Madhavapeddy wrote:
>
>> Great news!  I'll do some garbage collection on the OPAM switches
>> then -- we no longer need the 4.01.0dev+extension_points switch, so
>> I'll remove that in favour of the vanilla 4.02.0dev trunk unless you
>> have any objections.
>>
>
> It's definitely a good idea.  The branch is indeed closed and remaining
> work will be done on the trunk.
>
>
> -- Alain
>
> ______________________________**_________________
> wg-camlp4 mailing list
> wg-camlp4 at lists.ocaml.org
> http://lists.ocaml.org/**listinfo/wg-camlp4<http://lists.ocaml.org/listinfo/wg-camlp4>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/wg-camlp4/attachments/20130909/6155f65a/attachment.html>

From alain.frisch at lexifi.com  Tue Sep 10 15:22:42 2013
From: alain.frisch at lexifi.com (Alain Frisch)
Date: Tue, 10 Sep 2013 16:22:42 +0200
Subject: [wg-camlp4] parse_with_ppx [was: My no-use of camlp4 syntax
 extensions for Otags]
In-Reply-To: <6x38q1ykza.fsf_-_@blau.inf.tu-dresden.de>
References: <20775.25929.388649.943057@blau.inf.tu-dresden.de>
 <512B2F2C.9090308@lexifi.com> <6x38q1ykza.fsf_-_@blau.inf.tu-dresden.de>
Message-ID: <522F2B32.4060809@lexifi.com>

On 08/22/2013 02:21 PM, Hendrik Tews wrote:
> a long time ago I asked about function parse_with_ppx, that takes
> a file name, applies -pp preprocessors, parses the result,
> applies -ppx preprocessors and returns the syntax tree.
>
> Is such a function available in 4.01 beta? Or, could somebody
> point me to the relevant code in ocamlc/ocamlopt that does that?

The functionality is now in trunk and will be part of 4.02. The 
functions to use are in the module Pparse:

   val parse_implementation: formatter -> string -> Parsetree.structure

   val parse_interface: formatter -> string -> Parsetree.signature


You need to parse the command-line to detect -pp/-ppx flags and also 
deal with error reporting, though.

Example:

https://github.com/alainfrisch/ppx_tools/blob/master/dumpast.ml


Alain

From alain.frisch at lexifi.com  Wed Sep 18 10:34:01 2013
From: alain.frisch at lexifi.com (Alain Frisch)
Date: Wed, 18 Sep 2013 11:34:01 +0200
Subject: [wg-camlp4] Keeping attributes in .cmi files?
Message-ID: <52397389.9070402@lexifi.com>

Dear all,

Attributes are currently kept in .cmt and .cmti files, which are dumps 
of the Typedtree counterparts of .ml and .mli files.  This allows 
external tools to access those attributes together with the output of 
the type-checker.  But this does not easily allow the compiler itself 
(which doesn't parse the .cmti file) to see attributes from external units.

If we keep attributes also in the internal structure of the 
type-checker, which is dumped in the .cmi file, we can make the compiler 
aware, for instance, of attributes put on value declarations.

As an example, see the following discussion about having the compiler 
report a warning when a value marked as deprecated is being used:

http://caml.inria.fr/mantis/view.php?id=5854

Attributes give a natural way to mark values as deprecated, and as I 
suggest in the discussion, the simplest way to use this information is 
to keep it in the Types.value_description record (and thus in .cmi files).

If we start having the compiler understand some specific attributes, it 
makes sense, in my opinion, to keep them even in .cmi files (at least 
for attributes on "declarations", not necessarily on type expressions). 
  Do you agree?  Would anyone object to the patch I proposed on the 
ticket above?


Alain

From garrigue at math.nagoya-u.ac.jp  Thu Sep 19 01:25:46 2013
From: garrigue at math.nagoya-u.ac.jp (Jacques Garrigue)
Date: Thu, 19 Sep 2013 09:25:46 +0900
Subject: [wg-camlp4] [Caml-devel] Keeping attributes in .cmi files?
In-Reply-To: <52397389.9070402@lexifi.com>
References: <52397389.9070402@lexifi.com>
Message-ID: <993DE9A5-E774-4F3D-8DB3-BA4F2CE72F08@math.nagoya-u.ac.jp>

On 2013/09/18, at 18:34, Alain Frisch <alain.frisch at lexifi.com> wrote:

> Dear all,
> 
> Attributes are currently kept in .cmt and .cmti files, which are dumps of the Typedtree counterparts of .ml and .mli files.  This allows external tools to access those attributes together with the output of the type-checker.  But this does not easily allow the compiler itself (which doesn't parse the .cmti file) to see attributes from external units.
> 
> If we keep attributes also in the internal structure of the type-checker, which is dumped in the .cmi file, we can make the compiler aware, for instance, of attributes put on value declarations.
> 
> As an example, see the following discussion about having the compiler report a warning when a value marked as deprecated is being used:
> 
> http://caml.inria.fr/mantis/view.php?id=5854
> 
> Attributes give a natural way to mark values as deprecated, and as I suggest in the discussion, the simplest way to use this information is to keep it in the Types.value_description record (and thus in .cmi files).
> 
> If we start having the compiler understand some specific attributes, it makes sense, in my opinion, to keep them even in .cmi files (at least for attributes on "declarations", not necessarily on type expressions).  Do you agree?  Would anyone object to the patch I proposed on the ticket above?
> 

On the principle, I have nothing against keeping attribute in .cmi files, since they are not supposed to change.
But to be honest I have not followed the discussion on attributes, and the inclusion in trunk was kind of sudden.
It might have been better to wait for the upcoming meeting.

I am a bit concerned by the fact the syntax tree is now completely mutually recursive:
an attribute appearing in a type may contain a structure.
What is the rationale behind that ?
And for pattern attributes in types ?
Does it mean that you want to include whole structures in .cmi files ?
Wouldn't it be better to restrict attributes to type expressions, constants, and identifiers/paths ?
Should all nodes allow all attributes ?

	Jacques

From alain.frisch at lexifi.com  Thu Sep 19 08:55:31 2013
From: alain.frisch at lexifi.com (Alain Frisch)
Date: Thu, 19 Sep 2013 09:55:31 +0200
Subject: [wg-camlp4] [Caml-devel] Keeping attributes in .cmi files?
In-Reply-To: <993DE9A5-E774-4F3D-8DB3-BA4F2CE72F08@math.nagoya-u.ac.jp>
References: <52397389.9070402@lexifi.com>
 <993DE9A5-E774-4F3D-8DB3-BA4F2CE72F08@math.nagoya-u.ac.jp>
Message-ID: <523AADF3.9090501@lexifi.com>

On 09/19/2013 02:25 AM, Jacques Garrigue wrote:
> On the principle, I have nothing against keeping attribute in .cmi files, since they are not supposed to change.
> But to be honest I have not followed the discussion on attributes, and the inclusion in trunk was kind of sudden.

I announced my intention to integrate the branch to caml-devel in the 
trunk on Jul. 22 ("Landing extension_points?"), nobody complained, and I 
did the merge more than one month later (Aug. 29).  The branch itself 
has been created on Feb. 28, extensively discussed on the wg-camlp4 list 
during the first months.  Then for some months, the branch has been 
stable and the discussion more quiet.

As I explained, nothing is frozen yet and the goals of landing the 
branch early are to avoid tricky conflicts in the future (considering 
that there are a lot of changes to the Parsetree) and to gather more 
feedback (this goal, at least, is achieved :-)).

> I am a bit concerned by the fact the syntax tree is now completely mutually recursive:
> an attribute appearing in a type may contain a structure.
> What is the rationale behind that ?

The intention is to allow greater flexibility in the content of 
attributes (while still keeping a fixed syntax to enable editor support 
and allow interactions between tools).   It is not clear exactly what 
will be needed for specific use cases, and allowing structure + patterns 
(with an optional guard) + type expressions cover a lot of possibly 
useful syntax fragments (in particular, structures cover both the empty 
case and expressions).

Allowing expressions as arguments is useful to support scenario where 
type declaration need to be annotation by code, such as the 
"sexp_drop_if" attribute in sexplib.  Since expression can already 
contain structures, I just found more convenient to allow arbitrary 
structures.  Of course, a specific tool or extension can put arbitrary 
constraints of what is exactly supported as the attribute argument.

> And for pattern attributes in types ?
> Does it mean that you want to include whole structures in .cmi files ?
> Wouldn't it be better to restrict attributes to type expressions, constants, and identifiers/paths ?
> Should all nodes allow all attributes ?

It's just easier and more uniform if the argument of attribute can 
always be the same, independently on the attribute target (and we use 
the same definition for the content of extension nodes).  I don't see 
any technical problem with it, this is just uninterpreted syntax.  What 
are your concerns?

Just as an example, a pattern in a type could be useful to specify 
"invariants" (used to generate assertions or proof obligations).

  type t =
     | A of bool * bool
     | B of int list
     [@@invariant? A (true, _) | A (_, true) | B (_ :: _)]

type s = (char [@invariant? 'a'..'z']) list

An expression in a type can be useful for conditional compilation:

   type flags =
     | Foo
     | Bar [@if os = "Windows"]
     | Baz

It's hard to predict exactly how attributes and extension nodes will be 
used, so I think it's better to be quite general, considering that it 
doesn't bring any additional complexity.


Alain

From garrigue at math.nagoya-u.ac.jp  Thu Sep 19 10:07:28 2013
From: garrigue at math.nagoya-u.ac.jp (Jacques Garrigue)
Date: Thu, 19 Sep 2013 18:07:28 +0900
Subject: [wg-camlp4] [Caml-devel] Keeping attributes in .cmi files?
In-Reply-To: <523AADF3.9090501@lexifi.com>
References: <52397389.9070402@lexifi.com>
 <993DE9A5-E774-4F3D-8DB3-BA4F2CE72F08@math.nagoya-u.ac.jp>
 <523AADF3.9090501@lexifi.com>
Message-ID: <C4B8882F-84D4-4C0E-A852-F98FC19FB29B@math.nagoya-u.ac.jp>

On 2013/09/19, at 16:55, Alain Frisch <alain.frisch at lexifi.com> wrote:

> On 09/19/2013 02:25 AM, Jacques Garrigue wrote:
>> On the principle, I have nothing against keeping attribute in .cmi files, since they are not supposed to change.
>> But to be honest I have not followed the discussion on attributes, and the inclusion in trunk was kind of sudden.
> 
> I announced my intention to integrate the branch to caml-devel in the trunk on Jul. 22 ("Landing extension_points?"), nobody complained, and I did the merge more than one month later (Aug. 29).  The branch itself has been created on Feb. 28, extensively discussed on the wg-camlp4 list during the first months.  Then for some months, the branch has been stable and the discussion more quiet.

OK, I'm not of the wg-camlp4 list, which explains my surprise.

> As I explained, nothing is frozen yet and the goals of landing the branch early are to avoid tricky conflicts in the future (considering that there are a lot of changes to the Parsetree) and to gather more feedback (this goal, at least, is achieved :-)).

Sure, it's always difficult to discuss something that is not available in trunk.

>> I am a bit concerned by the fact the syntax tree is now completely mutually recursive:
>> an attribute appearing in a type may contain a structure.
>> What is the rationale behind that ?
> 
> The intention is to allow greater flexibility in the content of attributes (while still keeping a fixed syntax to enable editor support and allow interactions between tools).   It is not clear exactly what will be needed for specific use cases, and allowing structure + patterns (with an optional guard) + type expressions cover a lot of possibly useful syntax fragments (in particular, structures cover both the empty case and expressions).
> 
> Allowing expressions as arguments is useful to support scenario where type declaration need to be annotation by code, such as the "sexp_drop_if" attribute in sexplib.  Since expression can already contain structures, I just found more convenient to allow arbitrary structures.  Of course, a specific tool or extension can put arbitrary constraints of what is exactly supported as the attribute argument.

OK, I see why you can want arbitrary things.
Now, if I understand correctly, you are just reusing syntactic categories, but there is no semantics.
This creates a problem if you want to keep them in the .cmi.
Clearly, just dumping the syntax tree seems a bit verbose.
You should at least drop the locations.
Is it important to keep the format compatible with the syntax tree ?

>> And for pattern attributes in types ?
>> Does it mean that you want to include whole structures in .cmi files ?
>> Wouldn't it be better to restrict attributes to type expressions, constants, and identifiers/paths ?
>> Should all nodes allow all attributes ?
> 
> It's just easier and more uniform if the argument of attribute can always be the same, independently on the attribute target (and we use the same definition for the content of extension nodes).  I don't see any technical problem with it, this is just uninterpreted syntax.  What are your concerns?
> 
> Just as an example, a pattern in a type could be useful to specify "invariants" (used to generate assertions or proof obligations).
> 
> type t =
>    | A of bool * bool
>    | B of int list
>    [@@invariant? A (true, _) | A (_, true) | B (_ :: _)]
> 
> type s = (char [@invariant? 'a'..'z']) list

You could also write this
@@invariant (function A (true, _) | A (_, true) | B (_ :: _) -> true | _ -> false)
can we see this just a short-hand?

I say this because having 3 categories with no semantics can be confusing.

> It's hard to predict exactly how attributes and extension nodes will be used, so I think it's better to be quite general, considering that it doesn't bring any additional complexity.

OK, but it makes it a bit harder to see the interactions with the type system.
If we keep them in types, I'm afraid of the interaction with unification.
Or do you just want a way to keep another version of the type definitions?

	Jacques

From alain.frisch at lexifi.com  Thu Sep 19 13:16:19 2013
From: alain.frisch at lexifi.com (Alain Frisch)
Date: Thu, 19 Sep 2013 14:16:19 +0200
Subject: [wg-camlp4] [Caml-devel] Keeping attributes in .cmi files?
In-Reply-To: <C4B8882F-84D4-4C0E-A852-F98FC19FB29B@math.nagoya-u.ac.jp>
References: <52397389.9070402@lexifi.com>
 <993DE9A5-E774-4F3D-8DB3-BA4F2CE72F08@math.nagoya-u.ac.jp>
 <523AADF3.9090501@lexifi.com>
 <C4B8882F-84D4-4C0E-A852-F98FC19FB29B@math.nagoya-u.ac.jp>
Message-ID: <523AEB13.7010203@lexifi.com>

On 09/19/2013 11:07 AM, Jacques Garrigue wrote:
> Now, if I understand correctly, you are just reusing syntactic categories, but there is no semantics.

Indeed. In important point, though, is that the default mapper class 
(Ast_mapper) traverses attributes and extension nodes.  I.e., unless it 
decides otherwise, a ppx rewriter would typically applies its rewriting 
to the arguments of attributes and extension nodes he's not aware of. 
This allows, for instance, to benefits from the services of a 
conditional compilation (or macro expander) ppx filter in the arguments 
of attributes to be processed by other ppx filters.

> This creates a problem if you want to keep them in the .cmi.
> Clearly, just dumping the syntax tree seems a bit verbose.
> You should at least drop the locations.

I expect arguments of attributes to be rather small fragments of syntax, 
so I don't see any real problem here.  Are you concerned by the size of 
.cmi file on disk, the time to read them?

About locations: we could indeed turn all locations into Location.none 
before saving the attributes in the .cmi.

> Is it important to keep the format compatible with the syntax tree ?

Internally (for ppx filters), it's useful that attributes are indeed 
real fragments of the Parsetree, so that an attribute's parameter can be 
injected in the Parsetree easily if needed.  We could turn to a 
different representation for the .cmi, but this would require to 
duplicate a big data type, and I don't see the benefits.

> You could also write this
> @@invariant (function A (true, _) | A (_, true) | B (_ :: _) -> true | _ -> false)
> can we see this just a short-hand?

What would be the translation for [@foo: type_expr]?

Of course, one could simplify the internal representation of "payloads" 
(attribute and extension node arguments) to a single case in the 
internal representation, and keep alternative syntaxes only as sugar, 
but what is the benefit?

> OK, but it makes it a bit harder to see the interactions with the type system.
> If we keep them in types, I'm afraid of the interaction with unification.
> Or do you just want a way to keep another version of the type definitions?

I think it would only make sense to keep attributes in type expressions 
within declarations (type definitions, and maybe also value definitions, 
e.g. to be able to specify some properties of individual parameters of a 
function).  *If* we represent them in the internal type algebra, this 
could be a special kind of node which would be ignored by the 
unification (or dropped from the representation as soon as a type is 
instanciated).



Alain

From garrigue at math.nagoya-u.ac.jp  Thu Sep 19 15:04:42 2013
From: garrigue at math.nagoya-u.ac.jp (Jacques Garrigue)
Date: Thu, 19 Sep 2013 23:04:42 +0900
Subject: [wg-camlp4] [Caml-devel] Keeping attributes in .cmi files?
In-Reply-To: <523AEB13.7010203@lexifi.com>
References: <52397389.9070402@lexifi.com>
 <993DE9A5-E774-4F3D-8DB3-BA4F2CE72F08@math.nagoya-u.ac.jp>
 <523AADF3.9090501@lexifi.com>
 <C4B8882F-84D4-4C0E-A852-F98FC19FB29B@math.nagoya-u.ac.jp>
 <523AEB13.7010203@lexifi.com>
Message-ID: <13278AE5-2455-475A-BEA8-9742BE181C23@math.nagoya-u.ac.jp>

On 2013/09/19, at 21:16, Alain Frisch <alain.frisch at lexifi.com> wrote:

> On 09/19/2013 11:07 AM, Jacques Garrigue wrote:
>> Now, if I understand correctly, you are just reusing syntactic categories, but there is no semantics.
> 
> Indeed. In important point, though, is that the default mapper class (Ast_mapper) traverses attributes and extension nodes.  I.e., unless it decides otherwise, a ppx rewriter would typically applies its rewriting to the arguments of attributes and extension nodes he's not aware of. This allows, for instance, to benefits from the services of a conditional compilation (or macro expander) ppx filter in the arguments of attributes to be processed by other ppx filters.

But what are the scoping rules?
Do you mean that the annotations are actually open terms? Interesting.

>> This creates a problem if you want to keep them in the .cmi.
>> Clearly, just dumping the syntax tree seems a bit verbose.
>> You should at least drop the locations.
> 
> I expect arguments of attributes to be rather small fragments of syntax, so I don't see any real problem here.  Are you concerned by the size of .cmi file on disk, the time to read them?

Both, as they are connected. Also the fact that this might keep some unnecessary details.

> About locations: we could indeed turn all locations into Location.none before saving the attributes in the .cmi.

Yes, the reason is not only the size, but also that they make the md5 of the cmi fragile.

>> Is it important to keep the format compatible with the syntax tree ?
> 
> Internally (for ppx filters), it's useful that attributes are indeed real fragments of the Parsetree, so that an attribute's parameter can be injected in the Parsetree easily if needed.  We could turn to a different representation for the .cmi, but this would require to duplicate a big data type, and I don't see the benefits.
> 
>> You could also write this
>> @@invariant (function A (true, _) | A (_, true) | B (_ :: _) -> true | _ -> false)
>> can we see this just a short-hand?
> 
> What would be the translation for [@foo: type_expr]?

No, I was just trying to understand the semantics. It is clear that types need to be handled differently.

> Of course, one could simplify the internal representation of "payloads" (attribute and extension node arguments) to a single case in the internal representation, and keep alternative syntaxes only as sugar, but what is the benefit?

A more uniform semantics ?
Again, I do not say that this should be the representation used, but saying that the two are equivalent clarifies the semantics.

>> OK, but it makes it a bit harder to see the interactions with the type system.
>> If we keep them in types, I'm afraid of the interaction with unification.
>> Or do you just want a way to keep another version of the type definitions?
> 
> I think it would only make sense to keep attributes in type expressions within declarations (type definitions, and maybe also value definitions, e.g. to be able to specify some properties of individual parameters of a function).  *If* we represent them in the internal type algebra, this could be a special kind of node which would be ignored by the unification (or dropped from the representation as soon as a type is instanciated).

Dropping on instantiation might work.
Ignoring during the unification does not seem to be a good solution, because what remains becomes nondeterministic.
Keep in mind that all this is pretty fragile, as typedecl relies on unification too?

	Jacques

From alain.frisch at lexifi.com  Thu Sep 19 16:55:43 2013
From: alain.frisch at lexifi.com (Alain Frisch)
Date: Thu, 19 Sep 2013 17:55:43 +0200
Subject: [wg-camlp4] [Caml-devel] Keeping attributes in .cmi files?
In-Reply-To: <13278AE5-2455-475A-BEA8-9742BE181C23@math.nagoya-u.ac.jp>
References: <52397389.9070402@lexifi.com>	<993DE9A5-E774-4F3D-8DB3-BA4F2CE72F08@math.nagoya-u.ac.jp>	<523AADF3.9090501@lexifi.com>	<C4B8882F-84D4-4C0E-A852-F98FC19FB29B@math.nagoya-u.ac.jp>	<523AEB13.7010203@lexifi.com>
 <13278AE5-2455-475A-BEA8-9742BE181C23@math.nagoya-u.ac.jp>
Message-ID: <523B1E7F.9000300@lexifi.com>

On 09/19/2013 04:04 PM, Jacques Garrigue wrote:
> But what are the scoping rules?
> Do you mean that the annotations are actually open terms? Interesting.

There is no semantics, no binding structure, the payload of attributes 
and extension points are just fragments of surface syntax.  The meaning 
is given by the tools which manipulate them.

>> I expect arguments of attributes to be rather small fragments of syntax, so I don't see any real problem here.  Are you concerned by the size of .cmi file on disk, the time to read them?
>
> Both, as they are connected. Also the fact that this might keep some unnecessary details.

I really think performance is a non-issue here.  For usual cases, each 
attribute will add a few bytes to the .cmi file.

>> Of course, one could simplify the internal representation of "payloads" (attribute and extension node arguments) to a single case in the internal representation, and keep alternative syntaxes only as sugar, but what is the benefit?
>
> A more uniform semantics ?
> Again, I do not say that this should be the representation used, but saying that the two are equivalent clarifies the semantics.

They are not currently equivalent: a ppx filter could very well react 
properly on:

  [@invariant? A | B]

and fail on:

  [@invariant (function A | B -> true | _ -> false)]

If we decide to consider the first form as syntactic sugar second for 
the second form, then yes, they become equivalent!



Alain

