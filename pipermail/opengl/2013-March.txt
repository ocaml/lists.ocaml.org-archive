From anil at recoil.org  Mon Mar 11 20:47:44 2013
From: anil at recoil.org (Anil Madhavapeddy)
Date: Mon, 11 Mar 2013 20:47:44 +0000
Subject: [ocaml-opengl] [opam-devel] Problems with LablGL on the rpi
In-Reply-To: <CADKNfhKTZ82Jm-pGOg0tDwNLtanVks=hCqXcs1KP33yoiDLAOg@mail.gmail.com>
References: <CADKNfhKTZ82Jm-pGOg0tDwNLtanVks=hCqXcs1KP33yoiDLAOg@mail.gmail.com>
Message-ID: <4F3221FD-A9C3-4173-91F2-E31BE2285DCB@recoil.org>

[+opengl at lists.ocaml.org]

Does this commit help?  I noticed that Mike McClurg fixed the META file
recently:

https://github.com/OCamlPro/opam-repository/commit/811e6af6c4dbf5da4c4f29362ce927fd7f8b61c0

It should be part of OPAM now, so upgrading to the latest will give you
this change.

-anil

On 11 Mar 2013, at 18:38, Yaron Minsky <yminsky at gmail.com> wrote:

> I suspect this is a package-level issue, so I'm not sure this is the
> right list for it, but, nonetheless:
> 
> I've been playing around with getting lablgl working on the Raspberry
> Pi, using the Raspian distribution.  I got pretty far, but there's
> some weird case-sensitivity issue I suspect when trying to actually
> load the packages.  Look at this:
> 
> # #require "lablgl";;
> /home/pi/.opam/4.00.1+raspberrypi/lib/lablgl: added to search path
> /home/pi/.opam/4.00.1+raspberrypi/lib/lablgl/lablgl.cma: loaded
> # #require "lablgl.glut";;
> No such package: lablGL - required by `lablgl.glut'
> 
> The same thing happens when I try to build using ocamlbuild.  On the
> mac I'm working on, however, everything works cleanly:
> 
> # #require "lablgl.glut";;
> /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablGL: added to search path
> /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablGL/lablgl.cma: loaded
> /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablgl: added to search path
> /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablgl/lablglut.cma: loaded
> 
> Any idea what could be causing this?  (I'm also running a slightly
> different version of the compiler, but I don't think that's the
> issue.)
> 
> y
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
> 


From daniel.buenzli at erratique.ch  Mon Mar 11 20:57:58 2013
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Mon, 11 Mar 2013 21:57:58 +0100
Subject: [ocaml-opengl] [opam-devel] Problems with LablGL on the rpi
In-Reply-To: <CADKNfhKTZ82Jm-pGOg0tDwNLtanVks=hCqXcs1KP33yoiDLAOg@mail.gmail.com>
References: <CADKNfhKTZ82Jm-pGOg0tDwNLtanVks=hCqXcs1KP33yoiDLAOg@mail.gmail.com>
Message-ID: <1F20014ABCC04A89B6521412C7A9F62D@erratique.ch>

Le lundi, 11 mars 2013 ? 19:38, Yaron Minsky a ?crit :
> I've been playing around with getting lablgl working on the Raspberry
> Pi, using the Raspian distribution.  

Just being curious, are you playing with lablgles [1] or lablgl ? The latter won't give you to access the raspberry pi's gpu. But I don't know if the former compiles on raspbian without a hitch.

Best,

Daniel

[1] http://psellos.com/ocaml/lablgles-build.html



From yminsky at gmail.com  Mon Mar 11 23:01:59 2013
From: yminsky at gmail.com (Yaron Minsky)
Date: Mon, 11 Mar 2013 19:01:59 -0400
Subject: [ocaml-opengl] [opam-devel] Problems with LablGL on the rpi
In-Reply-To: <CALru5wWr6RRhhJmCwLgOxe9y18Bwdn25JOSfvWnY9aHfAwOqUg@mail.gmail.com>
References: <CADKNfhKTZ82Jm-pGOg0tDwNLtanVks=hCqXcs1KP33yoiDLAOg@mail.gmail.com>
 <4F3221FD-A9C3-4173-91F2-E31BE2285DCB@recoil.org>
 <CALru5wWr6RRhhJmCwLgOxe9y18Bwdn25JOSfvWnY9aHfAwOqUg@mail.gmail.com>
Message-ID: <CADKNfh+o42V+2xUFM4pipf1B8s70JK1QAxziOP87SsOkb7AUDA@mail.gmail.com>

I'll give it a shot.
On Mar 11, 2013 5:59 PM, "Mike McClurg" <mike.mcclurg at gmail.com> wrote:

> That's the issue that I was having, Yaron. I think the update that Anil
> mentioned should resolve it.
>
> Mike
>
>
> On Mon, Mar 11, 2013 at 8:47 PM, Anil Madhavapeddy <anil at recoil.org>wrote:
>
>> [+opengl at lists.ocaml.org]
>>
>> Does this commit help?  I noticed that Mike McClurg fixed the META file
>> recently:
>>
>>
>> https://github.com/OCamlPro/opam-repository/commit/811e6af6c4dbf5da4c4f29362ce927fd7f8b61c0
>>
>> It should be part of OPAM now, so upgrading to the latest will give you
>> this change.
>>
>> -anil
>>
>> On 11 Mar 2013, at 18:38, Yaron Minsky <yminsky at gmail.com> wrote:
>>
>> > I suspect this is a package-level issue, so I'm not sure this is the
>> > right list for it, but, nonetheless:
>> >
>> > I've been playing around with getting lablgl working on the Raspberry
>> > Pi, using the Raspian distribution.  I got pretty far, but there's
>> > some weird case-sensitivity issue I suspect when trying to actually
>> > load the packages.  Look at this:
>> >
>> > # #require "lablgl";;
>> > /home/pi/.opam/4.00.1+raspberrypi/lib/lablgl: added to search path
>> > /home/pi/.opam/4.00.1+raspberrypi/lib/lablgl/lablgl.cma: loaded
>> > # #require "lablgl.glut";;
>> > No such package: lablGL - required by `lablgl.glut'
>> >
>> > The same thing happens when I try to build using ocamlbuild.  On the
>> > mac I'm working on, however, everything works cleanly:
>> >
>> > # #require "lablgl.glut";;
>> > /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablGL: added to search path
>> > /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablGL/lablgl.cma: loaded
>> > /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablgl: added to search path
>> > /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablgl/lablglut.cma: loaded
>> >
>> > Any idea what could be causing this?  (I'm also running a slightly
>> > different version of the compiler, but I don't think that's the
>> > issue.)
>> >
>> > y
>> > _______________________________________________
>> > opam-devel mailing list
>> > opam-devel at lists.ocaml.org
>> > http://lists.ocaml.org/listinfo/opam-devel
>> >
>>
>> _______________________________________________
>> opam-devel mailing list
>> opam-devel at lists.ocaml.org
>> http://lists.ocaml.org/listinfo/opam-devel
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opengl/attachments/20130311/e99d5c7b/attachment.html>

From monnier.florent at gmail.com  Mon Mar 11 23:55:31 2013
From: monnier.florent at gmail.com (Florent Monnier)
Date: Tue, 12 Mar 2013 00:55:31 +0100
Subject: [ocaml-opengl]  Problems with LablGL on the rpi
Message-ID: <CAE1DttDnyN=1FZiJbVO7v3C3vNJhQTZPg6k6ya+wWCvonR3v1Q@mail.gmail.com>

2013/3/11, Daniel B?nzli <daniel.buenzli__erratique.ch> wrote:
> Le lundi, 11 mars 2013 ? 19:38, Yaron Minsky a ?crit :
> > I've been playing around with getting lablgl working on the Raspberry
> > Pi, using the Raspian distribution.
>
> Just being curious, are you playing with lablgles [1] or lablgl ? The latter won't give you to > access the raspberry pi's gpu.

Maybe I'll say something wrong, but I understood that Lablgles is
currently for OGL ES 1, and the Raspberry Pi has OGL ES 2.
I would suggest that we call LablGLES LablGLES1 for disambiguation.

If I understood correctly ES 1 is a subset of the deprecated features
(what LablGL currently provides), and ES 2 is a subset of foreward
compatible OGL.

I don't have any OGL ES 1 nor ES 2 hardware. If someone want to offer
me a RB Pi I would accept with pleasure. I recently bought a cheap OGL
3 card just for the purpose of testing OGL 3 in OCaml, and soon OGL 4
will arrive :)
Someone already gave me a Mac for porting purposes, but it was a while
ago and now this Mac is too old.

>                                But I don't know if the former compiles on raspbian
> without a hitch.

If you're using these
typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC) (GLenum type);
and then get the address of the OGL function it will compile.
It has been made to make software and hardware a little bit independent.
So you can compile something where the hardware provides OGL 2 and
then execute on OGL 3, or the opposite, and we're using the same
header.

Any OGL code should use some wrangler to access the functions. Only
GLCaml does this correctly currently in OCaml with init_lib() and
get_proc_address() in glcaml_stub.c.

Here someone talks about the ES2 subset from GLCaml:
https://sympa.inria.fr/sympa/arc/caml-list/2013-03/msg00040.html

Maybe we could ask him to release his GLCamlES2 patch.

-- 
Hope it helps

From daniel.buenzli at erratique.ch  Tue Mar 12 07:41:54 2013
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Tue, 12 Mar 2013 08:41:54 +0100
Subject: [ocaml-opengl] Problems with LablGL on the rpi
In-Reply-To: <CAE1DttDnyN=1FZiJbVO7v3C3vNJhQTZPg6k6ya+wWCvonR3v1Q@mail.gmail.com>
References: <CAE1DttDnyN=1FZiJbVO7v3C3vNJhQTZPg6k6ya+wWCvonR3v1Q@mail.gmail.com>
Message-ID: <652EC0BE20EB499FA331B554B80859B0@erratique.ch>

Le mardi, 12 mars 2013 ? 00:55, Florent Monnier a ?crit :
> Maybe I'll say something wrong, but I understood that Lablgles is
> currently for OGL ES 1, and the Raspberry Pi has OGL ES 2.

The raspberry should be capable of both ES1.1 and ES2 (the libs are in /opt/vc). I couldn't test it myself though because I don't have any graphical output terminal to connect to at the moment.  

Using regular OpenGL via glx over the network on another host works fine but in that case you are just using the host hardware not the raspberry pi gpu.  

Best,

Daniel

From quentin.stievenart at gmail.com  Tue Mar 12 08:18:47 2013
From: quentin.stievenart at gmail.com (Quentin Stievenart)
Date: Tue, 12 Mar 2013 09:18:47 +0100
Subject: [ocaml-opengl] Problems with LablGL on the rpi
In-Reply-To: <652EC0BE20EB499FA331B554B80859B0@erratique.ch>
References: <CAE1DttDnyN=1FZiJbVO7v3C3vNJhQTZPg6k6ya+wWCvonR3v1Q@mail.gmail.com>
 <652EC0BE20EB499FA331B554B80859B0@erratique.ch>
Message-ID: <CACVumjD+Aahj1y=3zO0dmfCFTrH_nuiYGizLoVQOMJHun0jHfw@mail.gmail.com>

I don't know much about OpenGL ES, but glMLite[1] seems to support
more recent OpenGL features than Lablgl (I found it when needing VBO
support, which doesn't seem to be present in Lablgl).

[1]: http://www.linux-nantes.org/~fmonnier/ocaml/GL/

On 12 March 2013 08:41, Daniel B?nzli <daniel.buenzli at erratique.ch> wrote:
> Le mardi, 12 mars 2013 ? 00:55, Florent Monnier a ?crit :
>> Maybe I'll say something wrong, but I understood that Lablgles is
>> currently for OGL ES 1, and the Raspberry Pi has OGL ES 2.
>
> The raspberry should be capable of both ES1.1 and ES2 (the libs are in /opt/vc). I couldn't test it myself though because I don't have any graphical output terminal to connect to at the moment.
>
> Using regular OpenGL via glx over the network on another host works fine but in that case you are just using the host hardware not the raspberry pi gpu.
>
> Best,
>
> Daniel
> _______________________________________________
> OpenGL mailing list
> OpenGL at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opengl

From mike.mcclurg at gmail.com  Mon Mar 11 21:59:16 2013
From: mike.mcclurg at gmail.com (Mike McClurg)
Date: Mon, 11 Mar 2013 21:59:16 +0000
Subject: [ocaml-opengl] [opam-devel] Problems with LablGL on the rpi
In-Reply-To: <4F3221FD-A9C3-4173-91F2-E31BE2285DCB@recoil.org>
References: <CADKNfhKTZ82Jm-pGOg0tDwNLtanVks=hCqXcs1KP33yoiDLAOg@mail.gmail.com>
 <4F3221FD-A9C3-4173-91F2-E31BE2285DCB@recoil.org>
Message-ID: <CALru5wWr6RRhhJmCwLgOxe9y18Bwdn25JOSfvWnY9aHfAwOqUg@mail.gmail.com>

That's the issue that I was having, Yaron. I think the update that Anil
mentioned should resolve it.

Mike


On Mon, Mar 11, 2013 at 8:47 PM, Anil Madhavapeddy <anil at recoil.org> wrote:

> [+opengl at lists.ocaml.org]
>
> Does this commit help?  I noticed that Mike McClurg fixed the META file
> recently:
>
>
> https://github.com/OCamlPro/opam-repository/commit/811e6af6c4dbf5da4c4f29362ce927fd7f8b61c0
>
> It should be part of OPAM now, so upgrading to the latest will give you
> this change.
>
> -anil
>
> On 11 Mar 2013, at 18:38, Yaron Minsky <yminsky at gmail.com> wrote:
>
> > I suspect this is a package-level issue, so I'm not sure this is the
> > right list for it, but, nonetheless:
> >
> > I've been playing around with getting lablgl working on the Raspberry
> > Pi, using the Raspian distribution.  I got pretty far, but there's
> > some weird case-sensitivity issue I suspect when trying to actually
> > load the packages.  Look at this:
> >
> > # #require "lablgl";;
> > /home/pi/.opam/4.00.1+raspberrypi/lib/lablgl: added to search path
> > /home/pi/.opam/4.00.1+raspberrypi/lib/lablgl/lablgl.cma: loaded
> > # #require "lablgl.glut";;
> > No such package: lablGL - required by `lablgl.glut'
> >
> > The same thing happens when I try to build using ocamlbuild.  On the
> > mac I'm working on, however, everything works cleanly:
> >
> > # #require "lablgl.glut";;
> > /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablGL: added to search path
> > /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablGL/lablgl.cma: loaded
> > /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablgl: added to search path
> > /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablgl/lablglut.cma: loaded
> >
> > Any idea what could be causing this?  (I'm also running a slightly
> > different version of the compiler, but I don't think that's the
> > issue.)
> >
> > y
> > _______________________________________________
> > opam-devel mailing list
> > opam-devel at lists.ocaml.org
> > http://lists.ocaml.org/listinfo/opam-devel
> >
>
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opengl/attachments/20130311/8c35e852/attachment-0001.html>

From monnier.florent at gmail.com  Wed Mar 13 19:15:19 2013
From: monnier.florent at gmail.com (Florent Monnier)
Date: Wed, 13 Mar 2013 20:15:19 +0100
Subject: [ocaml-opengl] LablGL's Raw module
Message-ID: <CAE1DttCk4JV37cxVz0h_Q59GmG389jsf_+tBDTz=TGY5a1VWgw@mail.gmail.com>

Hi,

Does someone knows why the module Raw has been written for LablGL
instead of using Bigarray's?

Is it just that bigarrays didn't exist yet when LablGL was first
written? Or is it for a better integration with the module API?

What do you think about this module?

IMHO it makes interoperability with other components, other libs more
difficult (but maybe the solution would only to externilise Raw from
LablGL) both related to the type system dependency, and/or we have to
copy to and from this data structure instead of just using ba's
everywhere while ba's are available from the base standard library.

For what I have experienced with ba's, their lack of sign/unsign
versions of each type is not really an issue, usually I just care to
know if the size of atoms are 8, 16 or 32 bits. The only problems I
got with ba's are that they are slow to allocate, and the interaction
with RAM is good, but the interaction with GPU memory is difficult:

When I try to wrap what is returned by glMapBuffer inside a BA I get segfaults
http://www.opengl.org/sdk/docs/man/xhtml/glMapBuffer.xml
so this is why there is currently a workarround for VBO's in glMLite with the
type mapped_buffer
and the functions:
- val glMapBufferAbs
- val mapped_buffer_blit

Also I've tried to use VBO with GLCaml, from a working vbo/hello-world
from glmlite i've tried to rewrite it for glcaml, but I was unable to
make it work. Does someone know if it's possible to use VBO's with
GLCaml?

-- 
Best Regards

From anthony.tavener at gmail.com  Wed Mar 13 19:41:16 2013
From: anthony.tavener at gmail.com (Anthony Tavener)
Date: Wed, 13 Mar 2013 13:41:16 -0600
Subject: [ocaml-opengl] LablGL's Raw module
In-Reply-To: <CAE1DttCk4JV37cxVz0h_Q59GmG389jsf_+tBDTz=TGY5a1VWgw@mail.gmail.com>
References: <CAE1DttCk4JV37cxVz0h_Q59GmG389jsf_+tBDTz=TGY5a1VWgw@mail.gmail.com>
Message-ID: <CAN=ouMSdv-4MndP1U7nos0T_zRoQ3LgskXcVLeAVseKvJnM=5g@mail.gmail.com>

On Wed, Mar 13, 2013 at 1:15 PM, Florent Monnier
<monnier.florent at gmail.com>wrote:

> Also I've tried to use VBO with GLCaml, from a working vbo/hello-world
> from glmlite i've tried to rewrite it for glcaml, but I was unable to
> make it work. Does someone know if it's possible to use VBO's with
> GLCaml?
>

Buffer objects don't work with the current (many years old) version of
glcaml. One small change is needed to several functions: supporting
an integer value as well as string/bigarray. For example, glVertexPointer
needs to be capable of accepting an integer "buffer object name".

In response to this mailing-list starting, and apparent interest in OpenGL
with OCaml, I looked into the current state of things yesterday. Not much
has changed... except you (Florent) have gotten a patch into LablGL for
shader support -- hooray! And I also found someone else has added
changes to glcaml/sdlcaml and posted them here:

 https://github.com/crackleware/glcaml

A quick check shows that version has similar changes to what I've done
locally, but it seems they changed the autogeneration program to make
those changes, which is better. They also use glew, which appears to
simplify the interface (removing the explicit function-memoization
throughout glcaml_stub.c, but I don't know if there is any speed/space
tradeoffs -- I'm not familiar with glew).

Anyway, it looks like that version of glcaml should let you use buffer
objects.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opengl/attachments/20130313/c0363c4d/attachment.html>

From anil at recoil.org  Wed Mar 13 19:51:41 2013
From: anil at recoil.org (Anil Madhavapeddy)
Date: Wed, 13 Mar 2013 19:51:41 +0000
Subject: [ocaml-opengl] WebGL (was: LablGL's Raw module)
In-Reply-To: <CAN=ouMSdv-4MndP1U7nos0T_zRoQ3LgskXcVLeAVseKvJnM=5g@mail.gmail.com>
References: <CAE1DttCk4JV37cxVz0h_Q59GmG389jsf_+tBDTz=TGY5a1VWgw@mail.gmail.com>
 <CAN=ouMSdv-4MndP1U7nos0T_zRoQ3LgskXcVLeAVseKvJnM=5g@mail.gmail.com>
Message-ID: <100B7F86-0442-469B-9E73-DE9B69492FC5@recoil.org>

On 13 Mar 2013, at 19:41, Anthony Tavener <anthony.tavener at gmail.com> wrote:
> 
> In response to this mailing-list starting, and apparent interest in OpenGL
> with OCaml, I looked into the current state of things yesterday. Not much
> has changed... except you (Florent) have gotten a patch into LablGL for
> shader support -- hooray! And I also found someone else has added
> changes to glcaml/sdlcaml and posted them here:

My interest in OpenGL has also been renewed by js_of_ocaml and WebGL...
David Sheets did a great presentation on his work on WebGL at the last
OCaml workshop: http://www.youtube.com/watch?v=ll9z1ULtgqo

...and there's lots of WebGL/OCaml code up at:
https://github.com/ashima/
(last I looked, it uses ocamljs and not js_of_ocaml yet, though).

I have in my head an awesome demo that involves the TryOCaml js toplevel,
and a WebGL window that responds in realtime :-)

I'm not really sure what the right buffer abstraction is that will work
with js_of_ocaml and OpenGL too. js_of_ocaml has some trickery to cast
strings as either immutable (i.e. native Javascript) and mutable (i.e.
native OCaml).  This doesn't work in native code, and Bigarrays are
much more explicit and flexible since they wrap system memory that is
outside the OCaml heap.

Anyway, lots to play with here...

-anil

From edwin+ml-ocaml at etorok.net  Wed Mar 13 20:06:41 2013
From: edwin+ml-ocaml at etorok.net (=?ISO-8859-1?Q?T=F6r=F6k_Edwin?=)
Date: Wed, 13 Mar 2013 22:06:41 +0200
Subject: [ocaml-opengl] LablGL's Raw module
In-Reply-To: <CAN=ouMSdv-4MndP1U7nos0T_zRoQ3LgskXcVLeAVseKvJnM=5g@mail.gmail.com>
References: <CAE1DttCk4JV37cxVz0h_Q59GmG389jsf_+tBDTz=TGY5a1VWgw@mail.gmail.com>
 <CAN=ouMSdv-4MndP1U7nos0T_zRoQ3LgskXcVLeAVseKvJnM=5g@mail.gmail.com>
Message-ID: <5140DC51.9040500@etorok.net>

On 03/13/2013 09:41 PM, Anthony Tavener wrote:
> 
> On Wed, Mar 13, 2013 at 1:15 PM, Florent Monnier <monnier.florent at gmail.com <mailto:monnier.florent at gmail.com>> wrote:
> 
>     Also I've tried to use VBO with GLCaml, from a working vbo/hello-world
>     from glmlite i've tried to rewrite it for glcaml, but I was unable to
>     make it work. Does someone know if it's possible to use VBO's with
>     GLCaml?
> 
> 
> Buffer objects don't work with the current (many years old) version of
> glcaml. One small change is needed to several functions: supporting
> an integer value as well as string/bigarray. For example, glVertexPointer
> needs to be capable of accepting an integer "buffer object name".
> 
> In response to this mailing-list starting, and apparent interest in OpenGL
> with OCaml, I looked into the current state of things yesterday. Not much
> has changed... except you (Florent) have gotten a patch into LablGL for
> shader support -- hooray! And I also found someone else has added
> changes to glcaml/sdlcaml and posted them here:
> 
>  https://github.com/crackleware/glcaml
> 
> A quick check shows that version has similar changes to what I've done
> locally, but it seems they changed the autogeneration program to make
> those changes, which is better. They also use glew, which appears to

I have briefly looked at OCaml last year, and had the crazy idea that the bindings should be auto-generated from these XML specs:
https://bitbucket.org/alfonse/gl-xml-specs/src

Those are quite up-to-date (OpenGL 4.3), and they are themselves generated by importing/parsing some files from opengl.org's registry
and fixing bugs in them.

The problem is that even if glcaml/glMLite was updated to use those XML specs as a source, it wouldn't be very useful without
a comprehensive unit test, or at the very least one test/function so that it was generated correctly (i.e. it doesn't crash).

And then there's the problem that it is quite easy to misuse these APIs, as they are after all C APIs. glMLite might be a bit safer here,
but I think you can still cause use-after-free bugs.

So my other crazy idea was that perhaps some higher-level bindings should be auto-generated that would call into the low-level bindings safely,
after all those XML specs do have *some* type information (and various objects could be wrapped in a record that tracks
whether they are freed or not and raises exception if they are).

This looked like quite a huge amount of work to do alone, so it all remained at the idea stage.
Maybe some day, when I have lots of time... :)

Best regards,
--Edwin

From anthony.tavener at gmail.com  Wed Mar 13 20:30:48 2013
From: anthony.tavener at gmail.com (Anthony Tavener)
Date: Wed, 13 Mar 2013 14:30:48 -0600
Subject: [ocaml-opengl] WebGL (was: LablGL's Raw module)
In-Reply-To: <100B7F86-0442-469B-9E73-DE9B69492FC5@recoil.org>
References: <CAE1DttCk4JV37cxVz0h_Q59GmG389jsf_+tBDTz=TGY5a1VWgw@mail.gmail.com>
 <CAN=ouMSdv-4MndP1U7nos0T_zRoQ3LgskXcVLeAVseKvJnM=5g@mail.gmail.com>
 <100B7F86-0442-469B-9E73-DE9B69492FC5@recoil.org>
Message-ID: <CAN=ouMQJXpVLfTJ7mtcEggnqVgDKJODS7rzid-DxrChNsBDt5w@mail.gmail.com>

Ah, yes, I did run into mention of David Sheets' work and got stuck at the
Ashima site with a cute looking game, but I was looking for implementation
details at the time. ;) Thanks for those links Anil!

I never did get into browser-based applications, but that's the new way now
and that does seem pretty cool to be able to program OCaml through your
browser with no installation steps and even leverage WebGL! It sounds
easy enough that I might try jumping in. Although... one thing about GLES2
is that it takes a bit of groundwork to be able to use it (being a thinner
layer between the hardware). Does WebGL add a bunch of convenience
functions, or does Sheets? Or is there a lot of copy/paste into TryOCaml
to get something visible?

Buffer abstraction... I use Bigarray a lot. Strings-as-data only if I don't
care
about what the data is -- treating it like a binary blob. Because strings
are
quite limited, and I think I tend to use them immutably.



On Wed, Mar 13, 2013 at 1:51 PM, Anil Madhavapeddy <anil at recoil.org> wrote:

> On 13 Mar 2013, at 19:41, Anthony Tavener <anthony.tavener at gmail.com>
> wrote:
> >
> > In response to this mailing-list starting, and apparent interest in
> OpenGL
> > with OCaml, I looked into the current state of things yesterday. Not much
> > has changed... except you (Florent) have gotten a patch into LablGL for
> > shader support -- hooray! And I also found someone else has added
> > changes to glcaml/sdlcaml and posted them here:
>
> My interest in OpenGL has also been renewed by js_of_ocaml and WebGL...
> David Sheets did a great presentation on his work on WebGL at the last
> OCaml workshop: http://www.youtube.com/watch?v=ll9z1ULtgqo
>
> ...and there's lots of WebGL/OCaml code up at:
> https://github.com/ashima/
> (last I looked, it uses ocamljs and not js_of_ocaml yet, though).
>
> I have in my head an awesome demo that involves the TryOCaml js toplevel,
> and a WebGL window that responds in realtime :-)
>
> I'm not really sure what the right buffer abstraction is that will work
> with js_of_ocaml and OpenGL too. js_of_ocaml has some trickery to cast
> strings as either immutable (i.e. native Javascript) and mutable (i.e.
> native OCaml).  This doesn't work in native code, and Bigarrays are
> much more explicit and flexible since they wrap system memory that is
> outside the OCaml heap.
>
> Anyway, lots to play with here...
>
> -anil
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opengl/attachments/20130313/c23e18e7/attachment-0001.html>

From pierre.chambart at crans.org  Wed Mar 13 21:44:45 2013
From: pierre.chambart at crans.org (Pierre Chambart)
Date: Wed, 13 Mar 2013 22:44:45 +0100
Subject: [ocaml-opengl] I started some EGL bindings is someone interested ?
Message-ID: <20130313224445.32ae41aa@crans.org>

Hello,

I have a rpi and you know how you feel forced to play with opengles on
it. So I started an EGL binding and it is quite complete now.

If someone is interested enouth in that I can clean/document that to be
able to publish it. (I also have some minimal stubs for opengles 2
brutally copied/pasted from glMLite, but this is too far from complete).

I also play with the idea of having an interface usable both inside a
browser and on a classical context.

-- 
Pierre
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: not available
URL: <http://lists.ocaml.org/pipermail/opengl/attachments/20130313/66a09665/attachment.sig>

From kosmo.zb at gmail.com  Wed Mar 13 21:56:30 2013
From: kosmo.zb at gmail.com (David Sheets)
Date: Wed, 13 Mar 2013 14:56:30 -0700
Subject: [ocaml-opengl] WebGL (was: LablGL's Raw module)
In-Reply-To: <100B7F86-0442-469B-9E73-DE9B69492FC5@recoil.org>
References: <CAE1DttCk4JV37cxVz0h_Q59GmG389jsf_+tBDTz=TGY5a1VWgw@mail.gmail.com>
 <CAN=ouMSdv-4MndP1U7nos0T_zRoQ3LgskXcVLeAVseKvJnM=5g@mail.gmail.com>
 <100B7F86-0442-469B-9E73-DE9B69492FC5@recoil.org>
Message-ID: <CAAWM5Ty_usUtBp6biC0cRWtLg7Mn3u87JJBXx7FAo+nmaASNhw@mail.gmail.com>

On Wed, Mar 13, 2013 at 12:51 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> On 13 Mar 2013, at 19:41, Anthony Tavener <anthony.tavener at gmail.com> wrote:
>>
>> In response to this mailing-list starting, and apparent interest in OpenGL
>> with OCaml, I looked into the current state of things yesterday. Not much
>> has changed... except you (Florent) have gotten a patch into LablGL for
>> shader support -- hooray! And I also found someone else has added
>> changes to glcaml/sdlcaml and posted them here:
>
> My interest in OpenGL has also been renewed by js_of_ocaml and WebGL...
> David Sheets did a great presentation on his work on WebGL at the last
> OCaml workshop: http://www.youtube.com/watch?v=ll9z1ULtgqo
>
> ...and there's lots of WebGL/OCaml code up at:
> https://github.com/ashima/
> (last I looked, it uses ocamljs and not js_of_ocaml yet, though).

<https://github.com/ashima/gloc> compiles to JavaScript with
js_of_ocaml. You can play with the (basic) result
<http://ashimagroup.net/gloc/glocode/>. I have plans to build this
into a full WebGLSL toolchain in the coming months/years. I will
pursue this at Cambridge.

The game at <http://www.ashimagroup.net/demo/game/ooman/tutorial/> is
still running with ocamljs + Google's Closure Compiler. I began a port
to js_of_ocaml and preliminary results indicated that it produces
better/faster JavaScript with a smaller JS GC footprint.
Unfortunately, WebGL at the time was still rather rough around the
edges and I was distracted by more pressing concerns. I look forward
to porting the game in the future.

David

> I have in my head an awesome demo that involves the TryOCaml js toplevel,
> and a WebGL window that responds in realtime :-)
>
> I'm not really sure what the right buffer abstraction is that will work
> with js_of_ocaml and OpenGL too. js_of_ocaml has some trickery to cast
> strings as either immutable (i.e. native Javascript) and mutable (i.e.
> native OCaml).  This doesn't work in native code, and Bigarrays are
> much more explicit and flexible since they wrap system memory that is
> outside the OCaml heap.
>
> Anyway, lots to play with here...
>
> -anil

From kosmo.zb at gmail.com  Wed Mar 13 22:15:45 2013
From: kosmo.zb at gmail.com (David Sheets)
Date: Wed, 13 Mar 2013 15:15:45 -0700
Subject: [ocaml-opengl] WebGL (was: LablGL's Raw module)
In-Reply-To: <CAN=ouMQJXpVLfTJ7mtcEggnqVgDKJODS7rzid-DxrChNsBDt5w@mail.gmail.com>
References: <CAE1DttCk4JV37cxVz0h_Q59GmG389jsf_+tBDTz=TGY5a1VWgw@mail.gmail.com>
 <CAN=ouMSdv-4MndP1U7nos0T_zRoQ3LgskXcVLeAVseKvJnM=5g@mail.gmail.com>
 <100B7F86-0442-469B-9E73-DE9B69492FC5@recoil.org>
 <CAN=ouMQJXpVLfTJ7mtcEggnqVgDKJODS7rzid-DxrChNsBDt5w@mail.gmail.com>
Message-ID: <CAAWM5TyoaGED57mk1Msv=MuLsRR3zp3eTeDyTedy=k+gOp3Cbg@mail.gmail.com>

On Wed, Mar 13, 2013 at 1:30 PM, Anthony Tavener
<anthony.tavener at gmail.com> wrote:
> Ah, yes, I did run into mention of David Sheets' work and got stuck at the
> Ashima site with a cute looking game, but I was looking for implementation
> details at the time. ;) Thanks for those links Anil!

Ooman <http://www.ashimagroup.net/demo/game/ooman/tutorial/> is
written in OCamljs 3.12 (Jake Donham's dlambda backend) and then run
through Google's Closure Compiler. There are no OCaml WebGL bindings
in use. Instead, a WebGL driver in JavaScript was written to provide
specifically and efficiently the graphics primitives the game
required.

I would really, really love to see a WebIDL
<http://www.w3.org/TR/WebIDL/> parser with an OCaml code generator.
Perhaps BER N100 MetaOCaml is suited to this task?

I began modeling the WebIDL type system last fall but put that work
aside for a number of technical and non-technical reasons. I think
that we should strive to construct libraries against WebIDL interfaces
in the future to allow for broadest portability. Specifically, as
WebGL is a C -> JS port of OpenGL ES 2.0, there is a subset of WebGL's
WebIDL <https://www.khronos.org/registry/webgl/specs/latest/webgl.idl>
that can be mapped back onto native OpenGL ES 2.0 implementations. In
this way, we may generate OCaml interfaces from the WebGL IDL which
can be instantiated by either browser or native API modules.

You may also be interested in WebGL and OpenGL ES 2.0 modules. In this
case, I invite you to examine
<https://www.khronos.org/registry/webgl/extensions/> at which the
WebIDL for each WebGL extension is available. I authored and now
maintain the specification processing toolchain that produces these
HTML specs from an ad hoc XML vocabulary. For the extensions that
expose GLSL modules (e.g.
<https://www.khronos.org/registry/webgl/extensions/OES_standard_derivatives/>),
the GLSL module signatures are declared in the XML specs.

> I never did get into browser-based applications, but that's the new way now
> and that does seem pretty cool to be able to program OCaml through your
> browser with no installation steps and even leverage WebGL! It sounds
> easy enough that I might try jumping in. Although... one thing about GLES2
> is that it takes a bit of groundwork to be able to use it (being a thinner
> layer between the hardware). Does WebGL add a bunch of convenience
> functions, or does Sheets?

WebGL strives to be an almost direct port of OpenGL ES 2.0. For some
JavaScript convenience functions, you might try
<https://github.com/ashima/webgl-engine/> which is the lowest layer of
the driver upon which Ooman is constructed. Of course, many JS
frameworks exist if you'd like to get loads of convenience functions
but they always some difficult issues, it seems.

> Or is there a lot of copy/paste into TryOCaml
> to get something visible?

Right now, yes, setting up a graphical top-level in TryOCaml is a
pain. It would be a very interesting and worthwhile project, though,
imho.

I have been focusing most closely on the shading language semantics
and tooling as it has the broadest audience. Of course, I will
continue to work on related OCaml+WebGL work.

"Semanticists should be the obstetricians of programming languages,
not the coroners." ? John Reynolds, 2 December 2004

I'm happy to chat about any of these topics or others that you're
interested in. I have a lot of project ideas and ideas for hyperlinked
graphics systems.

David

> Buffer abstraction... I use Bigarray a lot. Strings-as-data only if I don't
> care
> about what the data is -- treating it like a binary blob. Because strings
> are
> quite limited, and I think I tend to use them immutably.
>
>
>
> On Wed, Mar 13, 2013 at 1:51 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>
>> On 13 Mar 2013, at 19:41, Anthony Tavener <anthony.tavener at gmail.com>
>> wrote:
>> >
>> > In response to this mailing-list starting, and apparent interest in
>> > OpenGL
>> > with OCaml, I looked into the current state of things yesterday. Not
>> > much
>> > has changed... except you (Florent) have gotten a patch into LablGL for
>> > shader support -- hooray! And I also found someone else has added
>> > changes to glcaml/sdlcaml and posted them here:
>>
>> My interest in OpenGL has also been renewed by js_of_ocaml and WebGL...
>> David Sheets did a great presentation on his work on WebGL at the last
>> OCaml workshop: http://www.youtube.com/watch?v=ll9z1ULtgqo
>>
>> ...and there's lots of WebGL/OCaml code up at:
>> https://github.com/ashima/
>> (last I looked, it uses ocamljs and not js_of_ocaml yet, though).
>>
>> I have in my head an awesome demo that involves the TryOCaml js toplevel,
>> and a WebGL window that responds in realtime :-)
>>
>> I'm not really sure what the right buffer abstraction is that will work
>> with js_of_ocaml and OpenGL too. js_of_ocaml has some trickery to cast
>> strings as either immutable (i.e. native Javascript) and mutable (i.e.
>> native OCaml).  This doesn't work in native code, and Bigarrays are
>> much more explicit and flexible since they wrap system memory that is
>> outside the OCaml heap.
>>
>> Anyway, lots to play with here...
>>
>> -anil
>
>

From garrigue at math.nagoya-u.ac.jp  Wed Mar 13 22:55:05 2013
From: garrigue at math.nagoya-u.ac.jp (Jacques Garrigue)
Date: Thu, 14 Mar 2013 07:55:05 +0900
Subject: [ocaml-opengl] LablGL's Raw module
In-Reply-To: <CAE1DttCk4JV37cxVz0h_Q59GmG389jsf_+tBDTz=TGY5a1VWgw@mail.gmail.com>
References: <CAE1DttCk4JV37cxVz0h_Q59GmG389jsf_+tBDTz=TGY5a1VWgw@mail.gmail.com>
Message-ID: <655EB224-7E75-48AE-8E8D-93DBADD31F4B@math.nagoya-u.ac.jp>

On 2013/03/14, at 4:15, Florent Monnier <monnier.florent at gmail.com> wrote:

> Hi,
> 
> Does someone knows why the module Raw has been written for LablGL
> instead of using Bigarray's?
> 
> Is it just that bigarrays didn't exist yet when LablGL was first
> written? Or is it for a better integration with the module API?

Originally, this is just that bigarrays didn't exist yet.
Then I thought of moving to bigarrays, but there wasn't a 1-to-1
correspondence, so it finally never got done?
Maybe it's not too late to do the jump.

LablGL has been around for 15 years, and it really shows?

> IMHO it makes interoperability with other components, other libs more
> difficult (but maybe the solution would only to externilise Raw from
> LablGL) both related to the type system dependency, and/or we have to
> copy to and from this data structure instead of just using ba's
> everywhere while ba's are available from the base standard library.

Concerning interoperability, Lablgtk somehow overcomes this with
the Gpointer.region abstraction, which just describes a memory
area, and can be created from any such structure.


Back to LablGL, I'm really sorry I cannot give more time to it.
If you look at the git repository, you will see that there is a new
multitex branch by Didier Cassirame, with a lot of useful
additions.
If you have some comments about it, let me know.

Jacques Garrigue

From monnier.florent at gmail.com  Thu Mar 14 18:06:59 2013
From: monnier.florent at gmail.com (Florent Monnier)
Date: Thu, 14 Mar 2013 19:06:59 +0100
Subject: [ocaml-opengl] I started some EGL bindings is someone
	interested ?
In-Reply-To: <20130313224445.32ae41aa@crans.org>
References: <20130313224445.32ae41aa@crans.org>
Message-ID: <CAE1DttDwuf35JBUdc6vjrK9n3aTgVib-b9kpj4JyUDMX=Qky=Q@mail.gmail.com>

2013/3/13, Pierre Chambart <pierre.chambart at crans.org>:
> Hello,
>
> I have a rpi and you know how you feel forced to play with opengles on
> it. So I started an EGL binding and it is quite complete now.
>
> If someone is interested enouth in that I can clean/document that to be
> able to publish it. (I also have some minimal stubs for opengles 2
> brutally copied/pasted from glMLite, but this is too far from complete).
>
> I also play with the idea of having an interface usable both inside a
> browser and on a classical context.

Maybe you could just provide bare snapshots without any polishing ("as
is") in order to minimise the time you'll spend on it.

-- 
Cheers

From rich.neswold at gmail.com  Fri Mar 15 00:54:57 2013
From: rich.neswold at gmail.com (Rich Neswold)
Date: Thu, 14 Mar 2013 19:54:57 -0500
Subject: [ocaml-opengl] I started some EGL bindings is someone
	interested ?
In-Reply-To: <20130313224445.32ae41aa@crans.org>
References: <20130313224445.32ae41aa@crans.org>
Message-ID: <733BAD41-06DE-4A01-B1D7-DC47DD49F719@gmail.com>


On Mar 13, 2013, at 4:44 PM, Pierre Chambart wrote:

> I have a rpi and you know how you feel forced to play with opengles on
> it. So I started an EGL binding and it is quite complete now.
> 
> If someone is interested enouth in that I can clean/document that to be
> able to publish it. (I also have some minimal stubs for opengles 2
> brutally copied/pasted from glMLite, but this is too far from complete).
> 
> I also play with the idea of having an interface usable both inside a
> browser and on a classical context.

Sounds great! I'm not quite ready to explore OpenGLES on my RPI, but I hope to soon.

--
Rich


From monnier.florent at gmail.com  Sat Mar 30 15:47:09 2013
From: monnier.florent at gmail.com (Florent Monnier)
Date: Sat, 30 Mar 2013 16:47:09 +0100
Subject: [ocaml-opengl] [opam-devel] lablgl.1.04
Message-ID: <CAE1DttBpkZ16nEy8oCqTUi=XVfLxKtymEsNSLHrujyh1DrwJmg@mail.gmail.com>

Hi,

On my Windows test environment I can not use "lablgl-20120306" because
of the glShader module that I myself provided before I get a Windows
test environment.

But the vanilla "lablgl-1.04" works fine.

If I've understood correctly Opam is a source package manager, so
maybe opam could provide "lablgl.1.04" for Windows users that have a
similar environment than mine ?

My windows test environment is:
Windows 7 starter with protz's ocaml version 4.00.1

Well in this environment only lablgl itself compiles out of the box.
LablGlut does not.
Togl (Tk) does not either.
(I think that the devel libs for both glut and tkgl are there)

LablGlut and Togl are for windowing, so if we use OCamlSDL instead
this is just fine we don't need these. OCamlSDL1 compiles out of the
box in my win env.

In this environment I compile the Vanilla LablGL like this:

cp Makefile.config.mingw Makefile.config
# need to add -I/usr/include, the patch below does this:
patch < Makefile.config-cygwin-needs-I_usr_include.patch

# don't build anything else than lablgl itself or we get errors:
make lib
make libopt

LABLGL_INSTALLDIR="/tmp/mylblgl0"
make install INSTALLDIR="$LABLGL_INSTALLDIR"
# it seems that the file "dlllablgl.dll" is not installed, so:
cp src/dlllablgl.dll "$LABLGL_INSTALLDIR"/

Now a hello-world works fine.
(I'm providing this hello at the end after the config patch)

===============

$ cat Makefile.config-cygwin-needs-I_usr_include.patch
+++ Makefile.config~    2013-03-12 18:11:58.945140000 +0100
--- Makefile.config     2013-03-30 13:55:08.524315300 +0100
@@ -35,7 +35,7 @@
   -lws2_32 -luser32 -lgdi32

 # Where to find OpenGL/Mesa/Glut headers and libraries
-GLINCLUDES = -DHAS_GLEXT_H -DGL_GLEXT_PROTOTYPES -DGLU_VERSION_1_3
+GLINCLUDES = -I/usr/include -DHAS_GLEXT_H -DGL_GLEXT_PROTOTYPES
-DGLU_VERSION_1_3
 GLLIBS = -lglu32 -lopengl32
 GLLIBS0 = $(GLLIBS)
 GLUTLIBS = -lglut32


============

$ cat lblgl_hello.ml
let display () =
  GlClear.color (0.0, 0.0, 0.0);
  GlClear.clear [`color];
  GlDraw.color (1.0, 1.0, 0.0);
  GlMat.mode `projection;
  GlMat.load_identity ();
  GlMat.ortho ~x:(-1.0,1.0) ~y:(-1.0,1.0) ~z:(-1.0,1.0);
  GlDraw.begins `polygon;
  GlDraw.vertex ~x:(-0.5) ~y:(-0.5) ();
  GlDraw.vertex ~x:(-0.5) ~y:(0.5) ();
  GlDraw.vertex ~x:(0.5) ~y:(0.5) ();
  GlDraw.vertex ~x:(0.5) ~y:(-0.5) ();
  GlDraw.ends ();
  Gl.flush ()

let () =
  Sdl.init [`EVERYTHING];
  let _ =
    Sdlvideo.set_video_mode ~w:640 ~h:400
      [`HWSURFACE; `DOUBLEBUF; `OPENGL; `RESIZABLE]
  in
  for i = 1 to 6 do
    display ();
    Sdlgl.swap_buffers ();
    Sdltimer.delay 1000;
  done;
  Sdl.quit ()


# using full windows path, because protz's ocaml doesn't like cygwin ones:
$ ocaml bigarray.cma -I +site-lib/sdl sdl.cma -I
C:/cygwin/tmp/mylblgl0 lablgl.cma lblgl_hello.ml


===========

# completely untested, just copied and modified from "lablgl.20120306"

$ cat opam

opam-version: "1"
maintainer: "contact at ocamlpro.com"
homepage: "https://forge.ocamlcore.org/projects/lablgl/"
authors: [
  "Jacques Garrigue"
  "Isaac Trotts"
  "Erick Tryzelaar"
  "Christophe Raffali"
]
# "Jon Harrop" contributed the files "gluTess.ml" / "ml_glutess.c"
# should he be considered as one of the authors? or just a contributor?
build: [
  ["cp" "Makefile.config.ex" "Makefile.config"]
  ["cp" "Makefile.config.osx" "Makefile.config"] {"%{os}%" = "darwin"}
  ["cp" "Makefile.config.mingw" "Makefile.config"] {"%{os}%" =
"windows 7 starter with protz's ocaml 4"}

  ["mkdir" "-p" "%{bin}%"]

#  [make "glut"]  ### do not build this one, it doesn't compile out of
the box in my W env
#  [make "glutopt"]  ### do not build this one, it doesn't compile out
of the box in my W env

### in my W env, only build lablgl.{cma,cmxa}
  [make "lib"]
  [make "libopt"]

  [make "install" "-C" "src" "BINDIR=%{bin}%"
"INSTALLDIR=%{lib}%/lablgl" "DLLDIR=%{lib}%/stublibs"]
  # it seems that the makefile forgets to install this one:
  ["cp" "src/dlllablgl.dll" "DLLDIR=%{lib}%/stublibs"] {"%{os:env}%" =
"win7::protz"}

### do not install LablGlut, it doesn't compile out of the box in my W env
### [make "install" "-C" "LablGlut/src" "BINDIR=%{bin}%"
"INSTALLDIR=%{lib}%/lablgl" "DLLDIR=%{lib}%/stublibs"]
]

-- 
Cheers

From wojciech.meyer at gmail.com  Sat Mar 30 19:12:09 2013
From: wojciech.meyer at gmail.com (Wojciech Meyer)
Date: Sat, 30 Mar 2013 19:12:09 +0000
Subject: [ocaml-opengl] [opam-devel] lablgl.1.04
In-Reply-To: <CAE1DttBpkZ16nEy8oCqTUi=XVfLxKtymEsNSLHrujyh1DrwJmg@mail.gmail.com>
 (Florent Monnier's message of "Sat, 30 Mar 2013 16:47:09 +0100")
References: <CAE1DttBpkZ16nEy8oCqTUi=XVfLxKtymEsNSLHrujyh1DrwJmg@mail.gmail.com>
Message-ID: <wfsj3c1z3q.fsf@gmail.com>

Hi Florent,

For the Windows users: I'd talk to Adrien Nader and maybe provide a
binary package for LablGL for Windows through Yypkg. At the moment the
packages are crosscompiled on the linux box and there are about 50 of
them. I'm putting Adrien on the recipient list.

- Wojciech
Florent Monnier <monnier.florent at gmail.com> writes:

> Hi,
>
> On my Windows test environment I can not use "lablgl-20120306" because
> of the glShader module that I myself provided before I get a Windows
> test environment.
>
> But the vanilla "lablgl-1.04" works fine.
>
> If I've understood correctly Opam is a source package manager, so
> maybe opam could provide "lablgl.1.04" for Windows users that have a
> similar environment than mine ?
>
> My windows test environment is:
> Windows 7 starter with protz's ocaml version 4.00.1
>
> Well in this environment only lablgl itself compiles out of the box.
> LablGlut does not.
> Togl (Tk) does not either.
> (I think that the devel libs for both glut and tkgl are there)
>
> LablGlut and Togl are for windowing, so if we use OCamlSDL instead
> this is just fine we don't need these. OCamlSDL1 compiles out of the
> box in my win env.
>
> In this environment I compile the Vanilla LablGL like this:
>
> cp Makefile.config.mingw Makefile.config
> # need to add -I/usr/include, the patch below does this:
> patch < Makefile.config-cygwin-needs-I_usr_include.patch
>
> # don't build anything else than lablgl itself or we get errors:
> make lib
> make libopt
>
> LABLGL_INSTALLDIR="/tmp/mylblgl0"
> make install INSTALLDIR="$LABLGL_INSTALLDIR"
> # it seems that the file "dlllablgl.dll" is not installed, so:
> cp src/dlllablgl.dll "$LABLGL_INSTALLDIR"/
>
> Now a hello-world works fine.
> (I'm providing this hello at the end after the config patch)
>
> ===============
>
> $ cat Makefile.config-cygwin-needs-I_usr_include.patch
> +++ Makefile.config~    2013-03-12 18:11:58.945140000 +0100
> --- Makefile.config     2013-03-30 13:55:08.524315300 +0100
> @@ -35,7 +35,7 @@
>    -lws2_32 -luser32 -lgdi32
>
>  # Where to find OpenGL/Mesa/Glut headers and libraries
> -GLINCLUDES = -DHAS_GLEXT_H -DGL_GLEXT_PROTOTYPES -DGLU_VERSION_1_3
> +GLINCLUDES = -I/usr/include -DHAS_GLEXT_H -DGL_GLEXT_PROTOTYPES
> -DGLU_VERSION_1_3
>  GLLIBS = -lglu32 -lopengl32
>  GLLIBS0 = $(GLLIBS)
>  GLUTLIBS = -lglut32
>
>
> ============
>
> $ cat lblgl_hello.ml
> let display () =
>   GlClear.color (0.0, 0.0, 0.0);
>   GlClear.clear [`color];
>   GlDraw.color (1.0, 1.0, 0.0);
>   GlMat.mode `projection;
>   GlMat.load_identity ();
>   GlMat.ortho ~x:(-1.0,1.0) ~y:(-1.0,1.0) ~z:(-1.0,1.0);
>   GlDraw.begins `polygon;
>   GlDraw.vertex ~x:(-0.5) ~y:(-0.5) ();
>   GlDraw.vertex ~x:(-0.5) ~y:(0.5) ();
>   GlDraw.vertex ~x:(0.5) ~y:(0.5) ();
>   GlDraw.vertex ~x:(0.5) ~y:(-0.5) ();
>   GlDraw.ends ();
>   Gl.flush ()
>
> let () =
>   Sdl.init [`EVERYTHING];
>   let _ =
>     Sdlvideo.set_video_mode ~w:640 ~h:400
>       [`HWSURFACE; `DOUBLEBUF; `OPENGL; `RESIZABLE]
>   in
>   for i = 1 to 6 do
>     display ();
>     Sdlgl.swap_buffers ();
>     Sdltimer.delay 1000;
>   done;
>   Sdl.quit ()
>
>
> # using full windows path, because protz's ocaml doesn't like cygwin ones:
> $ ocaml bigarray.cma -I +site-lib/sdl sdl.cma -I
> C:/cygwin/tmp/mylblgl0 lablgl.cma lblgl_hello.ml
>
>
> ===========
>
> # completely untested, just copied and modified from "lablgl.20120306"
>
> $ cat opam
>
> opam-version: "1"
> maintainer: "contact at ocamlpro.com"
> homepage: "https://forge.ocamlcore.org/projects/lablgl/"
> authors: [
>   "Jacques Garrigue"
>   "Isaac Trotts"
>   "Erick Tryzelaar"
>   "Christophe Raffali"
> ]
> # "Jon Harrop" contributed the files "gluTess.ml" / "ml_glutess.c"
> # should he be considered as one of the authors? or just a contributor?
> build: [
>   ["cp" "Makefile.config.ex" "Makefile.config"]
>   ["cp" "Makefile.config.osx" "Makefile.config"] {"%{os}%" = "darwin"}
>   ["cp" "Makefile.config.mingw" "Makefile.config"] {"%{os}%" =
> "windows 7 starter with protz's ocaml 4"}
>
>   ["mkdir" "-p" "%{bin}%"]
>
> #  [make "glut"]  ### do not build this one, it doesn't compile out of
> the box in my W env
> #  [make "glutopt"]  ### do not build this one, it doesn't compile out
> of the box in my W env
>
> ### in my W env, only build lablgl.{cma,cmxa}
>   [make "lib"]
>   [make "libopt"]
>
>   [make "install" "-C" "src" "BINDIR=%{bin}%"
> "INSTALLDIR=%{lib}%/lablgl" "DLLDIR=%{lib}%/stublibs"]
>   # it seems that the makefile forgets to install this one:
>   ["cp" "src/dlllablgl.dll" "DLLDIR=%{lib}%/stublibs"] {"%{os:env}%" =
> "win7::protz"}
>
> ### do not install LablGlut, it doesn't compile out of the box in my W env
> ### [make "install" "-C" "LablGlut/src" "BINDIR=%{bin}%"
> "INSTALLDIR=%{lib}%/lablgl" "DLLDIR=%{lib}%/stublibs"]
> ]

--
Wojciech Meyer
http://danmey.org

