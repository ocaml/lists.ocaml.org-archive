From simon.cruanes.2007 at m4x.org  Wed Sep 16 10:05:06 2015
From: simon.cruanes.2007 at m4x.org (Simon Cruanes)
Date: Wed, 16 Sep 2015 11:05:06 +0200
Subject: [containers-users] changes for the next version
Message-ID: <20150916090506.GE22560@carty>

Hello,

Let's start this mailing list by looking towards the future :-)

I'm working on version 0.13 of containers, with many planned changes.
Many of those changes are retrocompatible additions (in particular,
new data structures ? bloom filter, weight balanced tree, hash trie,
hash set, bit field ?, new modules for threading, enrichment and
optimization of the existing ones, improvement of benchmarks) but there
are also breaking changes:

planned (quite large change, so I'd like some feedback/opinions):

- moving `containers.lwt` into its own repository and opam package
- moving `containers.misc` into its own repository and opam package
  (improving the average quality of containers!)

already in git (but can be reverted if really needed):

- change exceptions in `CCVector`
- change signature of `CCDeque.of_seq` (remove optional argument)
- heavily refactor `CCLinq` in `containers.advanced`. If you use this
  module, you will most likely have to change your code (into simpler
  code, hopefully).
- `RAL` in `containers.misc` moved to `containers.data` as `CCRAL`, and
  is getting improved on the way

no breaking but will be some day:

- deprecation of `CCList.split` (conflicts with `List.split`)

If you disagree with some of those changes, please tell! If you really
want some basic feature (say, a list or option function) for the next
release, same.

Cheers,

-- 
Simon Cruanes

http://weusepgp.info/
key 49AA62B6, fingerprint 949F EB87 8F06 59C6 D7D3  7D8D 4AC0 1D08 49AA 62B6
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 819 bytes
Desc: not available
URL: <http://lists.ocaml.org/pipermail/containers-users/attachments/20150916/2c0b4829/attachment.sig>

From mmatalka at gmail.com  Thu Sep 17 12:37:28 2015
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Thu, 17 Sep 2015 11:37:28 +0000
Subject: [containers-users] changes for the next version
In-Reply-To: <20150916090506.GE22560@carty> (Simon Cruanes's message of "Wed, 
 16 Sep 2015 11:05:06 +0200")
References: <20150916090506.GE22560@carty>
Message-ID: <86h9mts2dj.fsf@gmail.com>

I can't speak for the other parts of this, but I am for moving lwt out.

From simon.cruanes.2007 at m4x.org  Thu Sep 17 19:24:12 2015
From: simon.cruanes.2007 at m4x.org (Simon Cruanes)
Date: Thu, 17 Sep 2015 20:24:12 +0200
Subject: [containers-users] changes for the next version
In-Reply-To: <86h9mts2dj.fsf@gmail.com>
References: <20150916090506.GE22560@carty>
 <86h9mts2dj.fsf@gmail.com>
Message-ID: <20150917182412.GH22560@carty>

Le Thu, 17 Sep 2015, Malcolm Matalka a ?crit :

> I can't speak for the other parts of this, but I am for moving lwt out.

Fine! I've already split the library: currently the master branch does
not contain `misc` or `lwt` anymore (they are at containers-lwt and
containers-misc on github). The branch also depends on a development
version of qtest for now (hopefully released soon) and has many more
tests, but without this version of qtest, `make test` will fail.


-- 
Simon Cruanes

http://weusepgp.info/
key 49AA62B6, fingerprint 949F EB87 8F06 59C6 D7D3  7D8D 4AC0 1D08 49AA 62B6
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 819 bytes
Desc: not available
URL: <http://lists.ocaml.org/pipermail/containers-users/attachments/20150917/b96a71ce/attachment.sig>

From simon.cruanes.2007 at m4x.org  Sun Sep 20 21:46:16 2015
From: simon.cruanes.2007 at m4x.org (Simon Cruanes)
Date: Sun, 20 Sep 2015 22:46:16 +0200
Subject: [containers-users] [poll] use more labels?
Message-ID: <20150920204615.GL22560@carty>

Hello,

Some users want functions to have labels when it makes sense (? la
Core), and I kind of like the idea in many cases (especially to label
functions with ~f).

Apparently, a function declared with labels can be called without them
if arguments are in the right order (at the possible price of a
warning). That means that it should be possible to add labels in many
modules *without* breaking compatibility.

What do you think? Are there strong oppositions to this idea?

The next release of containers is approaching (in a few weeks max, I
think), but this can wait if there is no consensus.

Cheers!

-- 
Simon Cruanes

http://weusepgp.info/
key 49AA62B6, fingerprint 949F EB87 8F06 59C6 D7D3  7D8D 4AC0 1D08 49AA 62B6
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 819 bytes
Desc: not available
URL: <http://lists.ocaml.org/pipermail/containers-users/attachments/20150920/2021b8f2/attachment.sig>

From mmatalka at gmail.com  Sun Sep 20 22:05:05 2015
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Sun, 20 Sep 2015 21:05:05 +0000
Subject: [containers-users] [poll] use more labels?
In-Reply-To: <20150920204615.GL22560@carty> (Simon Cruanes's message of "Sun, 
 20 Sep 2015 22:46:16 +0200")
References: <20150920204615.GL22560@carty>
Message-ID: <86mvwgreda.fsf@gmail.com>

Simon Cruanes <simon.cruanes.2007 at m4x.org> writes:

> Hello,
>
> Some users want functions to have labels when it makes sense (? la
> Core), and I kind of like the idea in many cases (especially to label
> functions with ~f).
>
> Apparently, a function declared with labels can be called without them
> if arguments are in the right order (at the possible price of a
> warning). That means that it should be possible to add labels in many
> modules *without* breaking compatibility.
>
> What do you think? Are there strong oppositions to this idea?
>
> The next release of containers is approaching (in a few weeks max, I
> think), but this can wait if there is no consensus.
>
> Cheers!

As one of those users, I support this.  However, a few specifics to
consider.  After some more testing it looks like it would break
backwards compatibility in some ways.  Specifically:

 # let f ~x ~y = x + y;;
 val f : x:int -> y:int -> int = <fun>
 utop # f 2;;
 Error: The function applied to this argument has type x:int -> y:int ->
 int
 This argument cannot be applied without label

This is obviously problematic if anyone is partially applying.

The other issue is that there should be some convention for what should
get a label and what shouldn't.  Specifically to handle this case:

utop # f ~x:2 3;;
Error: The function applied to this argument has type y:int -> int
This argument cannot be applied without label

This matters because I often structure code like:

list |> List.filter ~f:filter |> List.map ~f:map ....

The convention I have been following in my code is that the 't' that the
modules operates on is never labeled.

From simon.cruanes.2007 at m4x.org  Sun Sep 20 22:22:18 2015
From: simon.cruanes.2007 at m4x.org (Simon Cruanes)
Date: Sun, 20 Sep 2015 23:22:18 +0200
Subject: [containers-users] [poll] use more labels?
In-Reply-To: <86mvwgreda.fsf@gmail.com>
References: <20150920204615.GL22560@carty>
 <86mvwgreda.fsf@gmail.com>
Message-ID: <20150920212217.GM22560@carty>

Le Sun, 20 Sep 2015, Malcolm Matalka a ?crit :
> > Some users want functions to have labels when it makes sense (? la
> > Core), and I kind of like the idea in many cases (especially to label
> > functions with ~f).
> >
> > Apparently, a function declared with labels can be called without them
> > if arguments are in the right order (at the possible price of a
> > warning). That means that it should be possible to add labels in many
> > modules *without* breaking compatibility.
> >
> > What do you think? Are there strong oppositions to this idea?
> >
> > The next release of containers is approaching (in a few weeks max, I
> > think), but this can wait if there is no consensus.
> >
> > Cheers!
> 
> As one of those users, I support this.  However, a few specifics to
> consider.  After some more testing it looks like it would break
> backwards compatibility in some ways.  Specifically:
> 
>  # let f ~x ~y = x + y;;
>  val f : x:int -> y:int -> int = <fun>
>  utop # f 2;;
>  Error: The function applied to this argument has type x:int -> y:int ->
>  int
>  This argument cannot be applied without label
> 
> This is obviously problematic if anyone is partially applying.
> 
> The other issue is that there should be some convention for what should
> get a label and what shouldn't.  Specifically to handle this case:
> 
> utop # f ~x:2 3;;
> Error: The function applied to this argument has type y:int -> int
> This argument cannot be applied without label
> 
> This matters because I often structure code like:
> 
> list |> List.filter ~f:filter |> List.map ~f:map ....
> 
> The convention I have been following in my code is that the 't' that the
> modules operates on is never labeled.

Aww, indeed, I overlooked partial application. So, the problem is not as
simple as I hoped.

I have some code that uses containers a lot, which makes me sensitive to
retro-compatibility problems. On the other hand, this issue is not
urgent, and can probably wait for a major release. Or, I can maintain a
"bleeding edge" version of containers, with some breaking changes, and a
"compat" version that merges those changes much later...

It's hard to write perfect APIs directly, but I dislike keeping bad
decisions forever. I think having containers and containers-lts would
make a lot of sense to both cater for existing code bases, and improve
the quality. There are already deprecated functions in the code, that
would stay in lts for a few versions, but not in bleeding-edge.



-- 
Simon Cruanes

http://weusepgp.info/
key 49AA62B6, fingerprint 949F EB87 8F06 59C6 D7D3  7D8D 4AC0 1D08 49AA 62B6
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 819 bytes
Desc: not available
URL: <http://lists.ocaml.org/pipermail/containers-users/attachments/20150920/96cccb95/attachment.sig>

From simon.cruanes.2007 at m4x.org  Wed Sep 23 17:32:30 2015
From: simon.cruanes.2007 at m4x.org (Simon Cruanes)
Date: Wed, 23 Sep 2015 18:32:30 +0200
Subject: [containers-users] release 0.13
Message-ID: <20150923163229.GH8766@carty>

Hi everyone,

Containers 0.13 will be released shortly (as soon as the PR to opam-repository
is merged). The complete changelog is at
https://github.com/c-cube/ocaml-containers/blob/master/CHANGELOG.adoc

This is a quite large release, with some breaking changes (that I
mentionned earlier) especially if you use `CCLinq`. It is also cleaner
because containers.misc and containers.lwt have finally been removed.

Cheers!

-- 
Simon Cruanes

http://weusepgp.info/
key 49AA62B6, fingerprint 949F EB87 8F06 59C6 D7D3  7D8D 4AC0 1D08 49AA 62B6
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 819 bytes
Desc: not available
URL: <http://lists.ocaml.org/pipermail/containers-users/attachments/20150923/aadd243e/attachment.sig>

