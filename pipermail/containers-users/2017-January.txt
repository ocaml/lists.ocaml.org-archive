From simon.cruanes.2007 at m4x.org  Sun Jan  1 18:21:06 2017
From: simon.cruanes.2007 at m4x.org (Simon Cruanes)
Date: Sun, 1 Jan 2017 19:21:06 +0100
Subject: [containers-users] plans for 1.0
In-Reply-To: <20161231215300.wvttzkmkl65uabsl@rgcaml.localdomain>
References: <20161103090001.GA10231@nunchakus.loria.fr>
 <20161103225723.GD821@fuck_yeah>
 <20161229111245.GE32109@carty.home>
 <20161231215300.wvttzkmkl65uabsl@rgcaml.localdomain>
Message-ID: <20170101180901.GC26664@carty.home>

Le Sat, 31 Dec 2016, Rudi Grinberg a ?crit :
> I wonder if this is too late to bring this up, but it would be really nice if
> containers would replace its use of depopts with proper container sub packages.
> Concretely, this would mean changing every depopt x to a container-x package
> that depends on containers. It *does not* mean making any new git repositories.

It's not too late. It's an interesting idea, now the devil is in
the details.

> 
> Since this is quite late in the cycle to ask for this, and the task is
> unfortunately non trivial given the build tools we have today. It's possible to
> sorta of implement this using a little hack I've learned in conduit:
> 
> https://github.com/mirage/ocaml-conduit/blob/master/mirage-conduit.opam
> 
> While this isn't ideal, it will future proof containers against any breakage
> that might be caused by a proper split into opam sub packages.

If I follow correctly, you create a dummy package foo-bar whose dependencies
correspond to foo + those of the sub-package foo.bar, so that people
can depend on foo-bar freely. It's cheap indeed. The only drawback I can
see is that versions of all those packages have to be kept synchronized
manually.

> The discussion of depopts vs. proper sub packages has been brought up many times
> before, so I'd rather not regurgitate the talking points unless there are
> objections. Let me just say that I think the current this prevalence of using
> depopts instead of proper sub libraries/packages is user hostile. And several
> popular packages are already starting to move away from this (lwt for example).

I'm not sure I have read that much arguments about this design choice,
can you just point to them (e.g. for lwt)?

In any case, thanks for the opinion, it might very well happen :-)

and happy new year!

-- 
Simon Cruanes

http://weusepgp.info/
key 49AA62B6, fingerprint 949F EB87 8F06 59C6 D7D3  7D8D 4AC0 1D08 49AA 62B6
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.ocaml.org/pipermail/containers-users/attachments/20170101/c890bb0e/attachment.sig>

From rudi.grinberg at gmail.com  Mon Jan  2 01:20:12 2017
From: rudi.grinberg at gmail.com (Rudi Grinberg)
Date: Sun, 1 Jan 2017 20:20:12 -0500
Subject: [containers-users] plans for 1.0
In-Reply-To: <20170101180901.GC26664@carty.home>
References: <20161103090001.GA10231@nunchakus.loria.fr>
 <20161103225723.GD821@fuck_yeah>
 <20161229111245.GE32109@carty.home>
 <20161231215300.wvttzkmkl65uabsl@rgcaml.localdomain>
 <20170101180901.GC26664@carty.home>
Message-ID: <20170102012012.vrk6ri3h2gcr5ai2@rgcaml.localdomain>

>If I follow correctly, you create a dummy package foo-bar whose dependencies
>correspond to foo + those of the sub-package foo.bar, so that people
>can depend on foo-bar freely. It's cheap indeed. The only drawback I can
>see is that versions of all those packages have to be kept synchronized
>manually.

Exactly. Although perhaps opam publish can help with this in the future.

>I'm not sure I have read that much arguments about this design choice,
>can you just point to them (e.g. for lwt)?

Here you go:

https://github.com/ocsigen/lwt/issues/41#issue-27598057

>and happy new year!

And you as well!

From simon.cruanes.2007 at m4x.org  Tue Jan 24 23:42:05 2017
From: simon.cruanes.2007 at m4x.org (Simon Cruanes)
Date: Wed, 25 Jan 2017 00:42:05 +0100
Subject: [containers-users] containers 1.0-rc1
Message-ID: <20170124234204.GF2325@fuck_yeah>

Hello everyone,

At last, 1.0 is close! Everything on the todo-list
(https://github.com/c-cube/ocaml-containers/issues/84) was checked or
cancelled.

In the end, my hope is that containers-1.0 is going to be simpler,
cleaner, and more focused around the core extensions to the stdlib.
Many modules are simpler and shorter; some parts have been removed;
deprecated functions and submodules are finally gone.

A few notes:
- labelled version of CCList and CCArray are in CCListLabels and CCArrayLabels,
  but the normal versions of these modules remain unlabelled
- formatters and CCFormat are much improved
- containers.thread will finally remain (but might be
  packaged independently, e.g. in containers-thread, I have to investigate
  the limitations of opam-publish for multi-package repositories).

The release candidate can be found at
https://github.com/c-cube/ocaml-containers/releases/tag/1.0-rc1
Use opam pin to test it:
$ opam pin add containers https://github.com/c-cube/ocaml-containers/archive.1.0-rc1.tar.gz
(you might need oasis, this is not a stable release).

Hope to hear some feedback on this. The actual 1.0 release should land
in a few weeks, depending on how broken this new release is ;-)

Cheers!

-- 
Simon Cruanes

http://weusepgp.info/
key 49AA62B6, fingerprint 949F EB87 8F06 59C6 D7D3  7D8D 4AC0 1D08 49AA 62B6
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.ocaml.org/pipermail/containers-users/attachments/20170125/874d59c3/attachment.sig>

