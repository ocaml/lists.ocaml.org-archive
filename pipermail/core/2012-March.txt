From yminsky at janestreet.com  Thu Mar  1 01:35:19 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Wed, 29 Feb 2012 20:35:19 -0500
Subject: pa_ounit outside of Core
In-Reply-To: <20120229114339.GB17748@dark.recoil.org>
References: <20120229114339.GB17748@dark.recoil.org>
Message-ID: <CACLX4jSAnwXbp-zaC1uHW3cu+UZJ+PbNfj2Lt5vo6Qp2AxVkAQ@mail.gmail.com>

We should definitely merge together Tills' version with ours.  I don't know
any reason for them to deviate.

We should also release a version of our OMakeroot.  It has lots of useful
goodies.  We've talked about that before and not done it.  The real barrier
is I suspect it will take some work to get it working with the bitbucket
tree, and it has lots of internal-only bits and bobs.

But I think we can get a cleaned up version to email out to the mailing
list, so people can look it over and scavenge from it, in any case.

On Wed, Feb 29, 2012 at 6:43 AM, Anil Madhavapeddy <anil at recoil.org> wrote:

> I ran across Till's very-useful pa_ounit, and would really like to use
> this in our libraries to make adding oUnit tests easier.  There seem to be
> two different versions; the Github one at:
> https://github.com/till-varoquaux/pa_ounit
> ...and the version in the Core distribution.
>
> I've integrated the Core one pretty easily into some of our local
> libraries, and tests are generated as expected. However, the OMake rules
> for extracting and collecting the tests into an executable don't seem to
> be present in the distribution.
>
> What I'd like to do is to only generate the tests during a testing build,
> and for production use have them disappear from the installed binary or
> library. However, there doesn't appear to be a switch in pa_ounit.ml to
> ignore the extra keywords. Do existing pa_ounit consumers just compile the
> tests in with the final library at the moment?
>

We actually put our tests into the production build, but they only execute
in the unit tests.  The code bloat is small enough for us not to worry
about it.  More work would be required from the syntax extension to make
that work, and you'd have to coordinate having multiple builds, which is
tricky.


> (More generally, the topic of multiple camlp4 options is quite tricky, as
> the same situation exists with pa_lwt generating debug code for mapping
> Lwt threads to backtraces, and it's hard to keep track of what modules
> were built with some set of p4 options).


Agreed.  it's tricky stuff.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120229/b04dbed6/attachment.html>

From ernstmartinj at gmail.com  Sat Mar  3 16:13:27 2012
From: ernstmartinj at gmail.com (Martin Jacobsson)
Date: Sat, 3 Mar 2012 08:13:27 -0800 (PST)
Subject: Error loading core (godi version) in toplevel.
Message-ID: <26770582.20.1330791207972.JavaMail.geo-discussion-forums@vbfl9>

Hello, I'm trying to load core using the toplevel using topfind. The 
version is the current one installed by godi (107.01).
core.cma fails with error message

Error: Reference to undefined global `Condition'

Running OS X lion and OCaml 3.12.1

/Martin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120303/c9904700/attachment.html>

From ernstmartinj at gmail.com  Sat Mar  3 16:19:41 2012
From: ernstmartinj at gmail.com (Martin Jacobsson)
Date: Sat, 3 Mar 2012 08:19:41 -0800 (PST)
Subject: Error loading core (godi version) in toplevel.
In-Reply-To: <26770582.20.1330791207972.JavaMail.geo-discussion-forums@vbfl9>
References: <26770582.20.1330791207972.JavaMail.geo-discussion-forums@vbfl9>
Message-ID: <21029258.857.1330791581560.JavaMail.geo-discussion-forums@vbkl3>

Nothing to see here... I had forgotten to enable threads.

/M

On Saturday, March 3, 2012 5:13:27 PM UTC+1, Martin Jacobsson wrote:
>
> Hello, I'm trying to load core using the toplevel using topfind. The 
> version is the current one installed by godi (107.01).
> core.cma fails with error message
>
> Error: Reference to undefined global `Condition'
>
> Running OS X lion and OCaml 3.12.1
>
> /Martin
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120303/7f97b298/attachment.html>

From anil at recoil.org  Mon Mar  5 00:00:11 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Mon, 5 Mar 2012 00:00:11 +0000
Subject: pa_ounit outside of Core
In-Reply-To: <CACLX4jSAnwXbp-zaC1uHW3cu+UZJ+PbNfj2Lt5vo6Qp2AxVkAQ@mail.gmail.com>
References: <20120229114339.GB17748@dark.recoil.org>
 <CACLX4jSAnwXbp-zaC1uHW3cu+UZJ+PbNfj2Lt5vo6Qp2AxVkAQ@mail.gmail.com>
Message-ID: <20120305000011.GB4178@dark.recoil.org>


On Wed, Feb 29, 2012 at 08:35:19PM -0500, Yaron Minsky wrote:
> We should definitely merge together Tills' version with ours.  I don't know
> any reason for them to deviate.
> 
> We should also release a version of our OMakeroot.  It has lots of useful
> goodies.  We've talked about that before and not done it.  The real barrier
> is I suspect it will take some work to get it working with the bitbucket
> tree, and it has lots of internal-only bits and bobs.

I'd certainly be interested in seeing snippets; the specific OMakefiles
would likely have to be ported to ocamlbuild to work with OASIS, so having
the whole thing released probably isn't worth the effort.

> We actually put our tests into the production build, but they only execute
> in the unit tests.  The code bloat is small enough for us not to worry
> about it.  More work would be required from the syntax extension to make
> that work, and you'd have to coordinate having multiple builds, which is
> tricky.

Thanks for confirming. I'll poke and prod ocamlbuild next week to see if I
can convince it to not include the code.

-- 
Anil Madhavapeddy                                 http://anil.recoil.org


From linshuai2012 at gmail.com  Wed Mar  7 04:04:27 2012
From: linshuai2012 at gmail.com (lins05)
Date: Tue, 6 Mar 2012 20:04:27 -0800 (PST)
Subject: Hints on building with Core
In-Reply-To: <CACLX4jTJ2HGphx-9y1U=O90rGG2PWR2DCOe6RkU_Whw7zmOuSA@mail.gmail.com>
References: <CACLX4jTJ2HGphx-9y1U=O90rGG2PWR2DCOe6RkU_Whw7zmOuSA@mail.gmail.com>
Message-ID: <17153699.2923.1331093067637.JavaMail.geo-discussion-forums@pbcvy9>

It has been long since I built core last time. I'll check it out later 
today.

? 2012?3?7????UTC+8??10?42?09??Yaron Minsky???
>
> I've been playing around with Core on my home machine, and have extended 
> the installation document just a bit.  Take a look here:
>
>    https://bitbucket.org/yminsky/ocaml-core/wiki/InstallationHints
>
> I just given an example of a working _tags file for ocamlbuild and a 
> .ocamlinit file for working in the toplevel.  Also, use oasis-0.3.0-rc2 
> if you want to get working native-code builds.
>
> We're also closing in on a proper release, with tarballs and everything. 
>  The tarballs should be considerably easier to install, and in particular 
> should not require a separate install of Oasis.
>
> y
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120306/363f7815/attachment.html>

From yminsky at janestreet.com  Wed Mar  7 02:42:09 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Tue, 6 Mar 2012 21:42:09 -0500
Subject: Hints on building with Core
Message-ID: <CACLX4jTJ2HGphx-9y1U=O90rGG2PWR2DCOe6RkU_Whw7zmOuSA@mail.gmail.com>

I've been playing around with Core on my home machine, and have extended
the installation document just a bit.  Take a look here:

   https://bitbucket.org/yminsky/ocaml-core/wiki/InstallationHints

I just given an example of a working _tags file for ocamlbuild and a
.ocamlinit file for working in the toplevel.  Also, use oasis-0.3.0-rc2 if
you want to get working native-code builds.

We're also closing in on a proper release, with tarballs and everything.
 The tarballs should be considerably easier to install, and in particular
should not require a separate install of Oasis.

y
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120306/0304dc89/attachment.html>

From yminsky at janestreet.com  Wed Mar  7 22:40:10 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Wed, 7 Mar 2012 17:40:10 -0500
Subject: Licensing
Message-ID: <CACLX4jS7TwoszkbM1__-izpfsB6JJaA6KAbSK2CGBiZdMUn4Jg@mail.gmail.com>

We've made some moves on the licensing front.

First, we've decided to relicense the Core suite under the Apache license.

Second, we now have CLA's set up (contributor license agreements), which
we'd like anyone who wants to contribute patches to sign and email that
document to us.  Then we can start accepting serious incoming patches!

Finally, we hope to create tarballs for a blessed release in the next few
days, now that our internal code review process is complete.

Cheers,
y
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120307/1868c94e/attachment.html>

From sweeks at sweeks.com  Wed Mar  7 23:02:52 2012
From: sweeks at sweeks.com (Stephen Weeks)
Date: Wed, 7 Mar 2012 18:02:52 -0500
Subject: Licensing
In-Reply-To: <CACLX4jS7TwoszkbM1__-izpfsB6JJaA6KAbSK2CGBiZdMUn4Jg@mail.gmail.com>
References: <CACLX4jS7TwoszkbM1__-izpfsB6JJaA6KAbSK2CGBiZdMUn4Jg@mail.gmail.com>
Message-ID: <CAJsFioV9zHAEy0i08GnsCCvcTn8yLowkEcrAFs=8xbFZfUbZLw@mail.gmail.com>

Where is the CLA?

On Wed, Mar 7, 2012 at 5:40 PM, Yaron Minsky <yminsky at janestreet.com> wrote:

> We've made some moves on the licensing front.
>
> First, we've decided to relicense the Core suite under the Apache license.
>
> Second, we now have CLA's set up (contributor license agreements), which
> we'd like anyone who wants to contribute patches to sign and email that
> document to us.  Then we can start accepting serious incoming patches!
>
> Finally, we hope to create tarballs for a blessed release in the next few
> days, now that our internal code review process is complete.
>
> Cheers,
> y
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120307/e515a26e/attachment.html>

From yminsky at janestreet.com  Wed Mar  7 23:25:42 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Wed, 7 Mar 2012 18:25:42 -0500
Subject: Licensing
In-Reply-To: <CAJsFioV9zHAEy0i08GnsCCvcTn8yLowkEcrAFs=8xbFZfUbZLw@mail.gmail.com>
References: <CACLX4jS7TwoszkbM1__-izpfsB6JJaA6KAbSK2CGBiZdMUn4Jg@mail.gmail.com>
	<CAJsFioV9zHAEy0i08GnsCCvcTn8yLowkEcrAFs=8xbFZfUbZLw@mail.gmail.com>
Message-ID: <CACLX4jQQKTYdpBhJGNo3igOTiwh6p72ujK_e9mSOpHMxJDNhgw@mail.gmail.com>

A fine point!

HTTP://ocaml.janestreet.com/ocaml-contributor-info.html

y
On Mar 7, 2012 6:03 PM, "Stephen Weeks" <sweeks at sweeks.com> wrote:

> Where is the CLA?
>
> On Wed, Mar 7, 2012 at 5:40 PM, Yaron Minsky <yminsky at janestreet.com>wrote:
>
>> We've made some moves on the licensing front.
>>
>> First, we've decided to relicense the Core suite under the Apache license.
>>
>> Second, we now have CLA's set up (contributor license agreements), which
>> we'd like anyone who wants to contribute patches to sign and email that
>> document to us.  Then we can start accepting serious incoming patches!
>>
>> Finally, we hope to create tarballs for a blessed release in the next few
>> days, now that our internal code review process is complete.
>>
>> Cheers,
>> y
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120307/93dd7c44/attachment.html>

From yminsky at janestreet.com  Thu Mar  8 00:25:17 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Wed, 7 Mar 2012 19:25:17 -0500
Subject: Licensing
In-Reply-To: <CACLX4jQQKTYdpBhJGNo3igOTiwh6p72ujK_e9mSOpHMxJDNhgw@mail.gmail.com>
References: <CACLX4jS7TwoszkbM1__-izpfsB6JJaA6KAbSK2CGBiZdMUn4Jg@mail.gmail.com>
	<CAJsFioV9zHAEy0i08GnsCCvcTn8yLowkEcrAFs=8xbFZfUbZLw@mail.gmail.com>
	<CACLX4jQQKTYdpBhJGNo3igOTiwh6p72ujK_e9mSOpHMxJDNhgw@mail.gmail.com>
Message-ID: <CACLX4jTiJyMdfQi0-wi3dwVOXOeycskm=iFWnjBQxHp+1o6Upw@mail.gmail.com>

Whoops.  I meant

HTTP://ocaml.janestreet.com/core-contributor-info.html
On Mar 7, 2012 6:25 PM, "Yaron Minsky" <yminsky at janestreet.com> wrote:

> A fine point!
>
> HTTP://ocaml.janestreet.com/ocaml-contributor-info.html
>
> y
> On Mar 7, 2012 6:03 PM, "Stephen Weeks" <sweeks at sweeks.com> wrote:
>
>> Where is the CLA?
>>
>> On Wed, Mar 7, 2012 at 5:40 PM, Yaron Minsky <yminsky at janestreet.com>wrote:
>>
>>> We've made some moves on the licensing front.
>>>
>>> First, we've decided to relicense the Core suite under the Apache
>>> license.
>>>
>>> Second, we now have CLA's set up (contributor license agreements), which
>>> we'd like anyone who wants to contribute patches to sign and email that
>>> document to us.  Then we can start accepting serious incoming patches!
>>>
>>> Finally, we hope to create tarballs for a blessed release in the next
>>> few days, now that our internal code review process is complete.
>>>
>>> Cheers,
>>> y
>>>
>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120307/468f7e7a/attachment.html>

From wmovrtbt09 at gmail.com  Mon Mar 12 11:12:49 2012
From: wmovrtbt09 at gmail.com (WmOvRtBT09 WmOvRtBT09)
Date: Mon, 12 Mar 2012 04:12:49 -0700 (PDT)
Subject: ocaml-core - Learn Chinese (Mandarin) faster by using flashcards with pictures
Message-ID: <9e62f8f2-2b85-4437-83c7-6654659d5fe3@pi6g2000pbc.googlegroups.com>


ocaml-core - http://www.ichineseflashcards.com will help you learn
Chinese (Mandarin) faster by using flashcards with pictures, thanks


From ocaml-core at googlegroups.com  Tue Mar 13 02:42:53 2012
From: ocaml-core at googlegroups.com (ocaml-core at googlegroups.com)
Date: Tue, 13 Mar 2012 02:42:53 +0000
Subject: Moderator's spam report for ocaml-core@googlegroups.com
Message-ID: <0016e6dd8914cd44cf04bb16d09d@google.com>


This message is being sent to you because you are a moderator of the group ocaml-core.

The following suspicious messages were sent to your group, but are being held in your moderation queue because they are classified as likely spam messages.

If you take no action, all the messages below will be discarded automatically as spam.

However, if you see any messages that are not spam below, you may approve them individually by going to:

http://groups.google.com/group/ocaml-core/pendmsg

Please do not mark this notification as spam; this is a service for group moderators. If you do not wish to receive these notifications in the future, you may change your preferences by going to:

http://groups.google.com/group/ocaml-core/manage_post


------- 1 of 1  -------
Subject: database programs
>From: "Moran toby" <Read_Melinda at hostnoc.net>
Date: Mar 12 01:58PM -0700

List available: US businesses - 4 million emails

Price until Friday: $99 CLICK HERE TO ORDER

File Available for download in excel format

Some of the business categories available:

Click here for the complete list of categories, SIC codes

Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=5912604329849537287


For more information about this message, please visit:
http://groups.google.com/support/bin/answer.py?hl=en&answer=165806



From markus.mottl at gmail.com  Thu Mar 15 16:33:04 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Thu, 15 Mar 2012 12:33:04 -0400
Subject: Naming conventions
Message-ID: <CAP_800qyAUHYH6FvbnR+PN7jSCwEShp6fGFq_5i6c+u69NA9zw@mail.gmail.com>


Hi,

I've observed that names for e.g. source directories, Oasis packages,
libraries, etc., are not always consistent in the Core distribution.
I think it shouldn't be the case as it is right now that an Oasis
package whose source is in directory "bin-prot" is named "bin_prot",
it's documentation "bin-prot", and the library "bin_prot" again.

If we wanted to make all names consistent, we would have to convert
dashes to underscores, because dashes are illegal in module names (and
hence names for packed libraries).  Underscores would work in any
context.

We should probably settle on naming conventions before creating a
public release.  Such changes would be fairly straightforward now, but
likely inconvenient later.

What do you think, should all these names be made consistent?  If so,
future projects should also make sure to use a consistent naming
convention, in particular to always use underscores instead of dashes
in all names.

Regards,
Markus

-- 
Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From yminsky at janestreet.com  Thu Mar 15 16:57:27 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 15 Mar 2012 12:57:27 -0400
Subject: Naming conventions
In-Reply-To: <CAP_800qyAUHYH6FvbnR+PN7jSCwEShp6fGFq_5i6c+u69NA9zw@mail.gmail.com>
References: <CAP_800qyAUHYH6FvbnR+PN7jSCwEShp6fGFq_5i6c+u69NA9zw@mail.gmail.com>
Message-ID: <CACLX4jTD84q0UzFbOiBCsN38Dosudo5NQCROoivb1goBUXCsSQ@mail.gmail.com>

I like using underscores everywhere.  Does anyone object?

y

On Thu, Mar 15, 2012 at 12:33 PM, Markus Mottl <markus.mottl at gmail.com>wrote:

> Hi,
>
> I've observed that names for e.g. source directories, Oasis packages,
> libraries, etc., are not always consistent in the Core distribution.
> I think it shouldn't be the case as it is right now that an Oasis
> package whose source is in directory "bin-prot" is named "bin_prot",
> it's documentation "bin-prot", and the library "bin_prot" again.
>
> If we wanted to make all names consistent, we would have to convert
> dashes to underscores, because dashes are illegal in module names (and
> hence names for packed libraries).  Underscores would work in any
> context.
>
> We should probably settle on naming conventions before creating a
> public release.  Such changes would be fairly straightforward now, but
> likely inconvenient later.
>
> What do you think, should all these names be made consistent?  If so,
> future projects should also make sure to use a consistent naming
> convention, in particular to always use underscores instead of dashes
> in all names.
>
> Regards,
> Markus
>
> --
> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120315/76ce4986/attachment.html>

From markus.mottl at gmail.com  Thu Mar 15 20:03:02 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Thu, 15 Mar 2012 16:03:02 -0400
Subject: Naming conventions
In-Reply-To: <CACLX4jTD84q0UzFbOiBCsN38Dosudo5NQCROoivb1goBUXCsSQ@mail.gmail.com>
References: <CAP_800qyAUHYH6FvbnR+PN7jSCwEShp6fGFq_5i6c+u69NA9zw@mail.gmail.com>
	<CACLX4jTD84q0UzFbOiBCsN38Dosudo5NQCROoivb1goBUXCsSQ@mail.gmail.com>
Message-ID: <CAP_800p8YKUJgLo348nSexUVUWcUBWz9oGBdarWHskmrAUv5bw@mail.gmail.com>


On Thu, Mar 15, 2012 at 12:57, Yaron Minsky <yminsky at janestreet.com> wrote:
> I like using underscores everywhere. ?Does anyone object?

If nobody objects by tomorrow, I'll assume they are fine with the
proposed changes.  I'll add them to my fork then.

Regards,
Markus

-- 
Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From yminsky at janestreet.com  Thu Mar 15 23:41:46 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 15 Mar 2012 19:41:46 -0400
Subject: Getting pretty printers installed in the toplevel
Message-ID: <CACLX4jR93Y_17uPp_djzLk9pkReN3an0MVzK5V-v4QG6MP+w4A@mail.gmail.com>

Does anyone know how to get pretty printers installed in the toplevel?  We
have a list of pretty printers to be installed:

# Pretty_printer.all ();;
- : string list =
["Core.Host_and_port.pp"; "Core.Time.pp"; "Core.Ofday.pp"; "Core.Date.pp";
 "Core.Span.pp"; "Core.Error.pp"; "Core.Exn.pp"; "Sexplib.Sexp.pp_hum"]]


But  they don't actually get installed.  I'm not sure how to do this
automatically in the toplevel.

y
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120315/23098f71/attachment.html>

From datkin at janestreet.com  Thu Mar 15 23:50:54 2012
From: datkin at janestreet.com (Drew Atkin)
Date: Thu, 15 Mar 2012 19:50:54 -0400
Subject: Getting pretty printers installed in the toplevel
In-Reply-To: <CACLX4jR93Y_17uPp_djzLk9pkReN3an0MVzK5V-v4QG6MP+w4A@mail.gmail.com>
References: <CACLX4jR93Y_17uPp_djzLk9pkReN3an0MVzK5V-v4QG6MP+w4A@mail.gmail.com>
Message-ID: <4F62805E.9020100@janestreet.com>


Yaron Minsky wrote:
> But  they don't actually get installed.  I'm not sure how to do this 
> automatically in the toplevel.

You mean without using "#install_printer"?

http://caml.inria.fr/pub/docs/manual-ocaml/manual023.html#toc90


From yminsky at janestreet.com  Thu Mar 15 23:57:35 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 15 Mar 2012 19:57:35 -0400
Subject: Getting pretty printers installed in the toplevel
In-Reply-To: <4F62805E.9020100@janestreet.com>
References: <CACLX4jR93Y_17uPp_djzLk9pkReN3an0MVzK5V-v4QG6MP+w4A@mail.gmail.com>
	<4F62805E.9020100@janestreet.com>
Message-ID: <CACLX4jR_RLqJKO5bH_sO-osTm6OKY-_VsHpt7FvamsA-6MVvAA@mail.gmail.com>

I mean in an automated way.  The best I can figure out to do right now is:

   - Generate a tmp file that contains the #install_printer directives,
   based on the list returned by Pretty_printer.all
   - call #use on that file
   - then delete the file

It works, but it's ugly.  Seems like there should be a better way.

y

On Thu, Mar 15, 2012 at 7:50 PM, Drew Atkin <datkin at janestreet.com> wrote:

> Yaron Minsky wrote:
>
>> But  they don't actually get installed.  I'm not sure how to do this
>> automatically in the toplevel.
>>
>
> You mean without using "#install_printer"?
>
> http://caml.inria.fr/pub/docs/**manual-ocaml/manual023.html#**toc90<http://caml.inria.fr/pub/docs/manual-ocaml/manual023.html#toc90>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120315/d80c5147/attachment.html>

From yminsky at janestreet.com  Fri Mar 16 00:13:15 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 15 Mar 2012 20:13:15 -0400
Subject: Getting pretty printers installed in the toplevel
In-Reply-To: <CACLX4jR_RLqJKO5bH_sO-osTm6OKY-_VsHpt7FvamsA-6MVvAA@mail.gmail.com>
References: <CACLX4jR93Y_17uPp_djzLk9pkReN3an0MVzK5V-v4QG6MP+w4A@mail.gmail.com>
	<4F62805E.9020100@janestreet.com>
	<CACLX4jR_RLqJKO5bH_sO-osTm6OKY-_VsHpt7FvamsA-6MVvAA@mail.gmail.com>
Message-ID: <CACLX4jSzVGxEEqGBZUsPg12uf_bHvrWjeOekCRVuG_JgT9MAsQ@mail.gmail.com>

To elaborate, the following horrible hack works, but I'm not proud of it:

#use "topfind"
#thread
#require "dynlink"
#camlp4o
#require "bin_prot.syntax"
#require "sexplib.syntax"
#require "variantslib.syntax"
#require "fieldslib.syntax"
#require "comparelib.syntax"
#require "core"
#require "async"
#require "core_extended"
open Core.Std

(* A script to install pretty-printers *)

let outc =
  Out_channel.create "/tmp/install_printers.ml"

let () =
  Pretty_printer.all ()
  |! List.map ~f:(fun x -> sprintf "#install_printer %s ;;\n" x)
  |! String.concat
  |! Out_channel.output_string outc;
  Out_channel.close outc
;;

#use "/tmp/install_printers.ml";;

let () =
  Sys.remove "/tmp/install_printers.ml"


On Thu, Mar 15, 2012 at 7:57 PM, Yaron Minsky <yminsky at janestreet.com>wrote:

> I mean in an automated way.  The best I can figure out to do right now is:
>
>    - Generate a tmp file that contains the #install_printer directives,
>    based on the list returned by Pretty_printer.all
>    - call #use on that file
>    - then delete the file
>
> It works, but it's ugly.  Seems like there should be a better way.
>
> y
>
>
> On Thu, Mar 15, 2012 at 7:50 PM, Drew Atkin <datkin at janestreet.com> wrote:
>
>> Yaron Minsky wrote:
>>
>>> But  they don't actually get installed.  I'm not sure how to do this
>>> automatically in the toplevel.
>>>
>>
>> You mean without using "#install_printer"?
>>
>> http://caml.inria.fr/pub/docs/**manual-ocaml/manual023.html#**toc90<http://caml.inria.fr/pub/docs/manual-ocaml/manual023.html#toc90>
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120315/08eff177/attachment.html>

From markus.mottl at gmail.com  Fri Mar 16 01:08:53 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Thu, 15 Mar 2012 21:08:53 -0400
Subject: Getting pretty printers installed in the toplevel
In-Reply-To: <CACLX4jSzVGxEEqGBZUsPg12uf_bHvrWjeOekCRVuG_JgT9MAsQ@mail.gmail.com>
References: <CACLX4jR93Y_17uPp_djzLk9pkReN3an0MVzK5V-v4QG6MP+w4A@mail.gmail.com>
	<4F62805E.9020100@janestreet.com>
	<CACLX4jR_RLqJKO5bH_sO-osTm6OKY-_VsHpt7FvamsA-6MVvAA@mail.gmail.com>
	<CACLX4jSzVGxEEqGBZUsPg12uf_bHvrWjeOekCRVuG_JgT9MAsQ@mail.gmail.com>
Message-ID: <CAP_800ru_n4rChuwrJyy3j8E4=4xSemWFhg8H33KGiH9C81mpQ@mail.gmail.com>


On Thu, Mar 15, 2012 at 20:13, Yaron Minsky <yminsky at janestreet.com> wrote:
> To elaborate, the following horrible hack works, but I'm not proud of it:

Quite close.  sexplib already has a module for doing this (as does
Lacaml for printing nicely formatted matrices).  If you run:

  #require "sexplib.top"

in the toplevel, the appropriate printer will be installed.  The
source of this module is in "base/sexplib/top/install_printers.ml".
It also has to evaluate strings, but makes calls directly into the
interpreter API for that purpose rather than having to go through a
generated file.

Regards,
Markus

-- 
Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From yminsky at janestreet.com  Fri Mar 16 01:26:31 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 15 Mar 2012 21:26:31 -0400
Subject: Getting pretty printers installed in the toplevel
In-Reply-To: <CAP_800ru_n4rChuwrJyy3j8E4=4xSemWFhg8H33KGiH9C81mpQ@mail.gmail.com>
References: <CACLX4jR93Y_17uPp_djzLk9pkReN3an0MVzK5V-v4QG6MP+w4A@mail.gmail.com>
	<4F62805E.9020100@janestreet.com>
	<CACLX4jR_RLqJKO5bH_sO-osTm6OKY-_VsHpt7FvamsA-6MVvAA@mail.gmail.com>
	<CACLX4jSzVGxEEqGBZUsPg12uf_bHvrWjeOekCRVuG_JgT9MAsQ@mail.gmail.com>
	<CAP_800ru_n4rChuwrJyy3j8E4=4xSemWFhg8H33KGiH9C81mpQ@mail.gmail.com>
Message-ID: <CACLX4jQ+9m_gc+jsK3jPhpiaNC8QHE+BjLd75OCX_rq117+1wg@mail.gmail.com>

Got it.  And what's good Core is that, once we have it set up properly,
then running

#require "core.top"


will load any pretty printers that were registered using Core's
Pretty_printer.register call.  Very nice.

I'll try to get that set up properly.

y

On Thu, Mar 15, 2012 at 9:08 PM, Markus Mottl <markus.mottl at gmail.com>wrote:

> On Thu, Mar 15, 2012 at 20:13, Yaron Minsky <yminsky at janestreet.com>
> wrote:
> > To elaborate, the following horrible hack works, but I'm not proud of it:
>
> Quite close.  sexplib already has a module for doing this (as does
> Lacaml for printing nicely formatted matrices).  If you run:
>
>  #require "sexplib.top"
>
> in the toplevel, the appropriate printer will be installed.  The
> source of this module is in "base/sexplib/top/install_printers.ml".
> It also has to evaluate strings, but makes calls directly into the
> interpreter API for that purpose rather than having to go through a
> generated file.
>
> Regards,
> Markus
>
> --
> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120315/17d571e1/attachment.html>

From yminsky at janestreet.com  Fri Mar 16 01:48:19 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 15 Mar 2012 21:48:19 -0400
Subject: Getting pretty printers installed in the toplevel
In-Reply-To: <CACLX4jQ+9m_gc+jsK3jPhpiaNC8QHE+BjLd75OCX_rq117+1wg@mail.gmail.com>
References: <CACLX4jR93Y_17uPp_djzLk9pkReN3an0MVzK5V-v4QG6MP+w4A@mail.gmail.com>
	<4F62805E.9020100@janestreet.com>
	<CACLX4jR_RLqJKO5bH_sO-osTm6OKY-_VsHpt7FvamsA-6MVvAA@mail.gmail.com>
	<CACLX4jSzVGxEEqGBZUsPg12uf_bHvrWjeOekCRVuG_JgT9MAsQ@mail.gmail.com>
	<CAP_800ru_n4rChuwrJyy3j8E4=4xSemWFhg8H33KGiH9C81mpQ@mail.gmail.com>
	<CACLX4jQ+9m_gc+jsK3jPhpiaNC8QHE+BjLd75OCX_rq117+1wg@mail.gmail.com>
Message-ID: <CACLX4jTVP1wCp65nVa1oUB-3u698_YeUWwCP7d+=WFaLk73ETg@mail.gmail.com>

And, now it's done and pushed to the repo.

y

On Thu, Mar 15, 2012 at 9:26 PM, Yaron Minsky <yminsky at janestreet.com>wrote:

> Got it.  And what's good Core is that, once we have it set up properly,
> then running
>
> #require "core.top"
>
>
> will load any pretty printers that were registered using Core's
> Pretty_printer.register call.  Very nice.
>
> I'll try to get that set up properly.
>
> y
>
> On Thu, Mar 15, 2012 at 9:08 PM, Markus Mottl <markus.mottl at gmail.com>wrote:
>
>> On Thu, Mar 15, 2012 at 20:13, Yaron Minsky <yminsky at janestreet.com>
>> wrote:
>> > To elaborate, the following horrible hack works, but I'm not proud of
>> it:
>>
>> Quite close.  sexplib already has a module for doing this (as does
>> Lacaml for printing nicely formatted matrices).  If you run:
>>
>>  #require "sexplib.top"
>>
>> in the toplevel, the appropriate printer will be installed.  The
>> source of this module is in "base/sexplib/top/install_printers.ml".
>> It also has to evaluate strings, but makes calls directly into the
>> interpreter API for that purpose rather than having to go through a
>> generated file.
>>
>> Regards,
>> Markus
>>
>> --
>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120315/3e2b8288/attachment.html>

From till at pps.jussieu.fr  Tue Mar 20 18:48:59 2012
From: till at pps.jussieu.fr (Till Varoquaux)
Date: Tue, 20 Mar 2012 14:48:59 -0400
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <4F68CC67.3020207@janestreet.com>
References: <20120320175113.GC935@viper.local>
	<20120320180759.GE935@viper.local>
	<4F68CC67.3020207@janestreet.com>
Message-ID: <CAHJESt3W8_B8pusqV1qFeNBTZuzD=Vxh41E57pCr1SNZbYTdwg@mail.gmail.com>


getpwuid(getuid()) is not a synonym for get_login (refer to the
discussion in the POSIX standard[^1]). You should not shadow posix
functions by functions with different semantics in the Unix modules;
providing your own abstraction over the OS is a commendable goal but
you should do so without silently bypassing core functions.

Till
[1]:http://pubs.opengroup.org/onlinepubs/007904975/functions/getlogin.html


On Tue, Mar 20, 2012 at 2:28 PM, David House <dhouse at janestreet.com> wrote:
> Note that Jane Street's core library [1] does not use getlogin(3) in its
> replacement Unix module, for exactly this reason:
>
> (* The standard getlogin function goes through utmp which is unreliable,
> ?see the BUGS section of getlogin(3) *)
> let getlogin_orig = Unix.getlogin
> let getlogin () = (Unix.getpwuid (getuid ())).Unix.pw_name
>
> [1]: https://bitbucket.org/yminsky/ocaml-core/wiki/Home
>
> I just tested your specific example, and it worked fine.
>
>
> On Tue 20 Mar 2012 06:07:59 PM GMT, Ricardo Catalinas Jim?nez wrote:
>>
>> On Tue, Mar 20, 2012 at 06:51:13PM +0100, Ricardo Catalinas Jim?nez wrote:
>>>
>>> I found out the next issue in this simple code:
>>>
>>> let () =
>>> ? ? print_endline "Hello";
>>> ? ? print_endline (Unix.getlogin ())
>>>
>>> Running in the normal case, with `./a.out' gives:
>>>
>>> Hello
>>> ricardo
>>>
>>> But running like `./a.out</dev/null' makes Unix.getlogin fail:
>>>
>>> Hello
>>> Fatal error: exception Unix.Unix_error(20, "getlogin", "")
>>>
>>> A simple strace reveals the problem:
>>>
>>> ? ?open("/etc/passwd", O_RDONLY|O_CLOEXEC) = 3
>>> ? ?fstat(3, {st_mode=S_IFREG|0644, st_size=509, ...}) = 0
>>> ? ?mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
>>> 0) = 0x7fb125554000
>>> ? ?read(3, "root:x:0:0:root:/root:/bin/bash\n"..., 4096) = 509
>>> ? ?read(3, "", 4096) ? ? ? ? ? ? ? ? ? ? ? = 0
>>> ? ?close(3) ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?= 0
>>> ? ?munmap(0x7fb125554000, 4096) ? ? ? ? ? ?= 0
>>> -> ?ioctl(0, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or
>>> TCGETS, 0x7fff12682c98) = -1 ENOTTY (Inappropriate ioctl for device)
>>> ? ?write(2, "Fatal error: exception Unix.Unix"..., 59) = 59
>>> ? ?exit_group(2) ? ? ? ? ? ? ? ? ? ? ? ? ? = ?
>>
>>
>>
>> Someone knew the answer, man 3 getlogin reads:
>>
>> ? ? ? ?Note that glibc does not follow the POSIX specification and uses
>> ? ? ? ?stdin instead of /dev/tty. ?A bug. ?(Other recent systems, like
>> ? ? ? ?SunOS 5.8 and HP-UX 11.11 and FreeBSD 4.8 all return the login
>> ? ? ? ?name also when stdin is redirected.)
>>
>>
>> Regards
>
>
>
>
> --
> Caml-list mailing list. ?Subscription management and archives:
> https://sympa-roc.inria.fr/wws/info/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>


-- 
Caml-list mailing list.  Subscription management and archives:
https://sympa-roc.inria.fr/wws/info/caml-list
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
Bug reports: http://caml.inria.fr/bin/caml-bugs



From yminsky at gmail.com  Tue Mar 20 19:41:51 2012
From: yminsky at gmail.com (Yaron Minsky)
Date: Tue, 20 Mar 2012 15:41:51 -0400
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <CAHJESt3W8_B8pusqV1qFeNBTZuzD=Vxh41E57pCr1SNZbYTdwg@mail.gmail.com>
References: <20120320175113.GC935@viper.local>
	<20120320180759.GE935@viper.local>
	<4F68CC67.3020207@janestreet.com>
	<CAHJESt3W8_B8pusqV1qFeNBTZuzD=Vxh41E57pCr1SNZbYTdwg@mail.gmail.com>
Message-ID: <CADKNfhJm3unJTRyFLAxZDRFKeOAccfEA+fhXNMk1+kCFAa+0Xw@mail.gmail.com>

Is there a concrete difference in behavior you're concerned about?

y

On Tue, Mar 20, 2012 at 2:48 PM, Till Varoquaux <till at pps.jussieu.fr> wrote:

> getpwuid(getuid()) is not a synonym for get_login (refer to the
> discussion in the POSIX standard[^1]). You should not shadow posix
> functions by functions with different semantics in the Unix modules;
> providing your own abstraction over the OS is a commendable goal but
> you should do so without silently bypassing core functions.
>
> Till
> [1]:http://pubs.opengroup.org/onlinepubs/007904975/functions/getlogin.html
>
>
> On Tue, Mar 20, 2012 at 2:28 PM, David House <dhouse at janestreet.com>
> wrote:
> > Note that Jane Street's core library [1] does not use getlogin(3) in its
> > replacement Unix module, for exactly this reason:
> >
> > (* The standard getlogin function goes through utmp which is unreliable,
> >  see the BUGS section of getlogin(3) *)
> > let getlogin_orig = Unix.getlogin
> > let getlogin () = (Unix.getpwuid (getuid ())).Unix.pw_name
> >
> > [1]: https://bitbucket.org/yminsky/ocaml-core/wiki/Home
> >
> > I just tested your specific example, and it worked fine.
> >
> >
> > On Tue 20 Mar 2012 06:07:59 PM GMT, Ricardo Catalinas Jim?nez wrote:
> >>
> >> On Tue, Mar 20, 2012 at 06:51:13PM +0100, Ricardo Catalinas Jim?nez
> wrote:
> >>>
> >>> I found out the next issue in this simple code:
> >>>
> >>> let () =
> >>>     print_endline "Hello";
> >>>     print_endline (Unix.getlogin ())
> >>>
> >>> Running in the normal case, with `./a.out' gives:
> >>>
> >>> Hello
> >>> ricardo
> >>>
> >>> But running like `./a.out</dev/null' makes Unix.getlogin fail:
> >>>
> >>> Hello
> >>> Fatal error: exception Unix.Unix_error(20, "getlogin", "")
> >>>
> >>> A simple strace reveals the problem:
> >>>
> >>>    open("/etc/passwd", O_RDONLY|O_CLOEXEC) = 3
> >>>    fstat(3, {st_mode=S_IFREG|0644, st_size=509, ...}) = 0
> >>>    mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS,
> -1,
> >>> 0) = 0x7fb125554000
> >>>    read(3, "root:x:0:0:root:/root:/bin/bash\n"..., 4096) = 509
> >>>    read(3, "", 4096)                       = 0
> >>>    close(3)                                = 0
> >>>    munmap(0x7fb125554000, 4096)            = 0
> >>> ->  ioctl(0, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or
> >>> TCGETS, 0x7fff12682c98) = -1 ENOTTY (Inappropriate ioctl for device)
> >>>    write(2, "Fatal error: exception Unix.Unix"..., 59) = 59
> >>>    exit_group(2)                           = ?
> >>
> >>
> >>
> >> Someone knew the answer, man 3 getlogin reads:
> >>
> >>        Note that glibc does not follow the POSIX specification and uses
> >>        stdin instead of /dev/tty.  A bug.  (Other recent systems, like
> >>        SunOS 5.8 and HP-UX 11.11 and FreeBSD 4.8 all return the login
> >>        name also when stdin is redirected.)
> >>
> >>
> >> Regards
> >
> >
> >
> >
> > --
> > Caml-list mailing list.  Subscription management and archives:
> > https://sympa-roc.inria.fr/wws/info/caml-list
> > Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> > Bug reports: http://caml.inria.fr/bin/caml-bugs
> >
>
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa-roc.inria.fr/wws/info/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120320/8c233d03/attachment.html>

From till at pps.jussieu.fr  Tue Mar 20 20:12:36 2012
From: till at pps.jussieu.fr (Till Varoquaux)
Date: Tue, 20 Mar 2012 16:12:36 -0400
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <CADKNfhJm3unJTRyFLAxZDRFKeOAccfEA+fhXNMk1+kCFAa+0Xw@mail.gmail.com>
References: <20120320175113.GC935@viper.local>
	<20120320180759.GE935@viper.local>
	<4F68CC67.3020207@janestreet.com>
	<CAHJESt3W8_B8pusqV1qFeNBTZuzD=Vxh41E57pCr1SNZbYTdwg@mail.gmail.com>
	<CADKNfhJm3unJTRyFLAxZDRFKeOAccfEA+fhXNMk1+kCFAa+0Xw@mail.gmail.com>
Message-ID: <CAHJESt0O3yLjNPkexha_37OZQoLFobX4S-R1CZhvfzOasXWXgA@mail.gmail.com>


As far as I can tell getpwuid(geteuid()) is what the (deprecated)
cuserid function does. The linux man page explains the difference
between the two functions like this:

  _ These functions let your program identify positively the user who
is running (cuserid()) or the user who logged in this session
(getlogin()). (These can differ when set-user-ID programs are
involved.)

I expect there to be more points were the behaviours of those two
functions diverge (e.g.: sudo, deamons etc...).

In general I am very skeptic any time I see a one liner that is sold
as a working alternative to a glibc function. The glibc has issues and
pitfalls but they tend to be very well documented. "Better the devil
you know"...

Till

On Tue, Mar 20, 2012 at 3:41 PM, Yaron Minsky <yminsky at gmail.com> wrote:
> Is there a concrete difference in behavior you're concerned about?
>
> y
>
>
> On Tue, Mar 20, 2012 at 2:48 PM, Till Varoquaux <till at pps.jussieu.fr> wrote:
>>
>> getpwuid(getuid()) is not a synonym for get_login (refer to the
>> discussion in the POSIX standard[^1]). You should not shadow posix
>> functions by functions with different semantics in the Unix modules;
>> providing your own abstraction over the OS is a commendable goal but
>> you should do so without silently bypassing core functions.
>>
>> Till
>> [1]:http://pubs.opengroup.org/onlinepubs/007904975/functions/getlogin.html
>>
>>
>> On Tue, Mar 20, 2012 at 2:28 PM, David House <dhouse at janestreet.com>
>> wrote:
>> > Note that Jane Street's core library [1] does not use getlogin(3) in its
>> > replacement Unix module, for exactly this reason:
>> >
>> > (* The standard getlogin function goes through utmp which is unreliable,
>> > ?see the BUGS section of getlogin(3) *)
>> > let getlogin_orig = Unix.getlogin
>> > let getlogin () = (Unix.getpwuid (getuid ())).Unix.pw_name
>> >
>> > [1]: https://bitbucket.org/yminsky/ocaml-core/wiki/Home
>> >
>> > I just tested your specific example, and it worked fine.
>> >
>> >
>> > On Tue 20 Mar 2012 06:07:59 PM GMT, Ricardo Catalinas Jim?nez wrote:
>> >>
>> >> On Tue, Mar 20, 2012 at 06:51:13PM +0100, Ricardo Catalinas Jim?nez
>> >> wrote:
>> >>>
>> >>> I found out the next issue in this simple code:
>> >>>
>> >>> let () =
>> >>> ? ? print_endline "Hello";
>> >>> ? ? print_endline (Unix.getlogin ())
>> >>>
>> >>> Running in the normal case, with `./a.out' gives:
>> >>>
>> >>> Hello
>> >>> ricardo
>> >>>
>> >>> But running like `./a.out</dev/null' makes Unix.getlogin fail:
>> >>>
>> >>> Hello
>> >>> Fatal error: exception Unix.Unix_error(20, "getlogin", "")
>> >>>
>> >>> A simple strace reveals the problem:
>> >>>
>> >>> ? ?open("/etc/passwd", O_RDONLY|O_CLOEXEC) = 3
>> >>> ? ?fstat(3, {st_mode=S_IFREG|0644, st_size=509, ...}) = 0
>> >>> ? ?mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS,
>> >>> -1,
>> >>> 0) = 0x7fb125554000
>> >>> ? ?read(3, "root:x:0:0:root:/root:/bin/bash\n"..., 4096) = 509
>> >>> ? ?read(3, "", 4096) ? ? ? ? ? ? ? ? ? ? ? = 0
>> >>> ? ?close(3) ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?= 0
>> >>> ? ?munmap(0x7fb125554000, 4096) ? ? ? ? ? ?= 0
>> >>> -> ?ioctl(0, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or
>> >>> TCGETS, 0x7fff12682c98) = -1 ENOTTY (Inappropriate ioctl for device)
>> >>> ? ?write(2, "Fatal error: exception Unix.Unix"..., 59) = 59
>> >>> ? ?exit_group(2) ? ? ? ? ? ? ? ? ? ? ? ? ? = ?
>> >>
>> >>
>> >>
>> >> Someone knew the answer, man 3 getlogin reads:
>> >>
>> >> ? ? ? ?Note that glibc does not follow the POSIX specification and uses
>> >> ? ? ? ?stdin instead of /dev/tty. ?A bug. ?(Other recent systems, like
>> >> ? ? ? ?SunOS 5.8 and HP-UX 11.11 and FreeBSD 4.8 all return the login
>> >> ? ? ? ?name also when stdin is redirected.)
>> >>
>> >>
>> >> Regards
>> >
>> >
>> >
>> >
>> > --
>> > Caml-list mailing list. ?Subscription management and archives:
>> > https://sympa-roc.inria.fr/wws/info/caml-list
>> > Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>> > Bug reports: http://caml.inria.fr/bin/caml-bugs
>> >
>>
>>
>> --
>> Caml-list mailing list. ?Subscription management and archives:
>> https://sympa-roc.inria.fr/wws/info/caml-list
>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>> Bug reports: http://caml.inria.fr/bin/caml-bugs
>>
>


From dhouse at janestreet.com  Tue Mar 20 18:28:55 2012
From: dhouse at janestreet.com (David House)
Date: Tue, 20 Mar 2012 18:28:55 +0000
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <20120320180759.GE935@viper.local>
References: <20120320175113.GC935@viper.local> <20120320180759.GE935@viper.local>
Message-ID: <4F68CC67.3020207@janestreet.com>


Note that Jane Street's core library [1] does not use getlogin(3) in 
its replacement Unix module, for exactly this reason:

(* The standard getlogin function goes through utmp which is unreliable,
   see the BUGS section of getlogin(3) *)
let getlogin_orig = Unix.getlogin
let getlogin () = (Unix.getpwuid (getuid ())).Unix.pw_name

[1]: https://bitbucket.org/yminsky/ocaml-core/wiki/Home

I just tested your specific example, and it worked fine.

On Tue 20 Mar 2012 06:07:59 PM GMT, Ricardo Catalinas Jim?nez wrote:
> On Tue, Mar 20, 2012 at 06:51:13PM +0100, Ricardo Catalinas Jim?nez wrote:
>> I found out the next issue in this simple code:
>>
>> let () =
>>      print_endline "Hello";
>>      print_endline (Unix.getlogin ())
>>
>> Running in the normal case, with `./a.out' gives:
>>
>> Hello
>> ricardo
>>
>> But running like `./a.out</dev/null' makes Unix.getlogin fail:
>>
>> Hello
>> Fatal error: exception Unix.Unix_error(20, "getlogin", "")
>>
>> A simple strace reveals the problem:
>>
>>     open("/etc/passwd", O_RDONLY|O_CLOEXEC) = 3
>>     fstat(3, {st_mode=S_IFREG|0644, st_size=509, ...}) = 0
>>     mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fb125554000
>>     read(3, "root:x:0:0:root:/root:/bin/bash\n"..., 4096) = 509
>>     read(3, "", 4096)                       = 0
>>     close(3)                                = 0
>>     munmap(0x7fb125554000, 4096)            = 0
>> ->  ioctl(0, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0x7fff12682c98) = -1 ENOTTY (Inappropriate ioctl for device)
>>     write(2, "Fatal error: exception Unix.Unix"..., 59) = 59
>>     exit_group(2)                           = ?
>
>
> Someone knew the answer, man 3 getlogin reads:
>
>         Note that glibc does not follow the POSIX specification and uses
>         stdin instead of /dev/tty.  A bug.  (Other recent systems, like
>         SunOS 5.8 and HP-UX 11.11 and FreeBSD 4.8 all return the login
>         name also when stdin is redirected.)
>
>
> Regards



-- 
Caml-list mailing list.  Subscription management and archives:
https://sympa-roc.inria.fr/wws/info/caml-list
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
Bug reports: http://caml.inria.fr/bin/caml-bugs



From jimenezrick at gmail.com  Tue Mar 20 17:51:13 2012
From: jimenezrick at gmail.com (Ricardo Catalinas =?iso-8859-1?Q?Jim=E9nez?=)
Date: Tue, 20 Mar 2012 18:51:13 +0100
Subject: [Caml-list] Unix.getlogin () fails when stdin is redirected
Message-ID: <20120320175113.GC935@viper.local>


I found out the next issue in this simple code:

let () =
    print_endline "Hello";
    print_endline (Unix.getlogin ())

Running in the normal case, with `./a.out' gives:

Hello
ricardo

But running like `./a.out </dev/null' makes Unix.getlogin fail:

Hello
Fatal error: exception Unix.Unix_error(20, "getlogin", "")

A simple strace reveals the problem:

   open("/etc/passwd", O_RDONLY|O_CLOEXEC) = 3
   fstat(3, {st_mode=S_IFREG|0644, st_size=509, ...}) = 0
   mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fb125554000
   read(3, "root:x:0:0:root:/root:/bin/bash\n"..., 4096) = 509
   read(3, "", 4096)                       = 0
   close(3)                                = 0
   munmap(0x7fb125554000, 4096)            = 0
-> ioctl(0, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0x7fff12682c98) = -1 ENOTTY (Inappropriate ioctl for device)
   write(2, "Fatal error: exception Unix.Unix"..., 59) = 59
   exit_group(2)                           = ?

Any idea how to fix this?


Best regards
-- 
Ricardo (http://r.untroubled.be/)

-- 
Caml-list mailing list.  Subscription management and archives:
https://sympa-roc.inria.fr/wws/info/caml-list
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
Bug reports: http://caml.inria.fr/bin/caml-bugs



From jimenezrick at gmail.com  Tue Mar 20 18:07:59 2012
From: jimenezrick at gmail.com (Ricardo Catalinas =?iso-8859-1?Q?Jim=E9nez?=)
Date: Tue, 20 Mar 2012 19:07:59 +0100
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <20120320175113.GC935@viper.local>
References: <20120320175113.GC935@viper.local>
Message-ID: <20120320180759.GE935@viper.local>


On Tue, Mar 20, 2012 at 06:51:13PM +0100, Ricardo Catalinas Jim?nez wrote:
> I found out the next issue in this simple code:
> 
> let () =
>     print_endline "Hello";
>     print_endline (Unix.getlogin ())
> 
> Running in the normal case, with `./a.out' gives:
> 
> Hello
> ricardo
> 
> But running like `./a.out </dev/null' makes Unix.getlogin fail:
> 
> Hello
> Fatal error: exception Unix.Unix_error(20, "getlogin", "")
> 
> A simple strace reveals the problem:
> 
>    open("/etc/passwd", O_RDONLY|O_CLOEXEC) = 3
>    fstat(3, {st_mode=S_IFREG|0644, st_size=509, ...}) = 0
>    mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fb125554000
>    read(3, "root:x:0:0:root:/root:/bin/bash\n"..., 4096) = 509
>    read(3, "", 4096)                       = 0
>    close(3)                                = 0
>    munmap(0x7fb125554000, 4096)            = 0
> -> ioctl(0, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0x7fff12682c98) = -1 ENOTTY (Inappropriate ioctl for device)
>    write(2, "Fatal error: exception Unix.Unix"..., 59) = 59
>    exit_group(2)                           = ?


Someone knew the answer, man 3 getlogin reads:

       Note that glibc does not follow the POSIX specification and uses
       stdin instead of /dev/tty.  A bug.  (Other recent systems, like
       SunOS 5.8 and HP-UX 11.11 and FreeBSD 4.8 all return the login
       name also when stdin is redirected.)


Regards
-- 
Ricardo (http://r.untroubled.be/)

-- 
Caml-list mailing list.  Subscription management and archives:
https://sympa-roc.inria.fr/wws/info/caml-list
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
Bug reports: http://caml.inria.fr/bin/caml-bugs



From yminsky at janestreet.com  Wed Mar 21 02:10:18 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Tue, 20 Mar 2012 22:10:18 -0400
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <c7dd99924eaad3383d8d529f66dc1752.squirrel@gps.dynxs.de>
References: <c7dd99924eaad3383d8d529f66dc1752.squirrel@gps.dynxs.de>
Message-ID: <CACLX4jR7rwEB5pKjt2oHPETsVesrqPJR6uk5oTU29cgWak6Cig@mail.gmail.com>

Looping in ocaml-core list.

On Tue, Mar 20, 2012 at 8:51 PM, Gerd Stolpmann <info at gerd-stolpmann.de>wrote:

>
> I second this. There is one OS where getlogin does not follow POSIX and is
> maybe insecure, and the fix cannot be to hide the function for all other
> OS. IMHO, these differences should be handled on a higher level, and not
> in the module providing the bindings.
>
> Semantically, there is a big difference between getlogin and getuid:
> getlogin shall also work when the user calls a setuid program which in
> turn invokes a script. These script commands can then use getlogin to
> identify the original user (which is defined as the user of the session =
> the user of the controlling terminal). In contrast, getuid would return
> the uid to which setuid switched (for the script).
>
> So, I'd say, you cannot repair getlogin with getuid. The best fix is
> probably to just run `/usr/bin/logname </dev/tty` and read the printed
> name.
>

I can think of a few solutions here:

   - We can use getuid only on platforms where getlogin is busted
   - We can name our function something other than "getlogin", to avoid
   confusion.
   - We can shell-out, in the way you suggest, to implement getlogin on
   Linux.  My only worry is that this is also going to be somewhat fragile in
   its own way.  Does calling out to logname with the suggested redirect
   always work?

I'm open to other suggestions.

y
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120320/e3a6a913/attachment.html>

From yminsky at janestreet.com  Wed Mar 21 02:22:01 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Tue, 20 Mar 2012 22:22:01 -0400
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <CACLX4jR7rwEB5pKjt2oHPETsVesrqPJR6uk5oTU29cgWak6Cig@mail.gmail.com>
References: <c7dd99924eaad3383d8d529f66dc1752.squirrel@gps.dynxs.de>
	<CACLX4jR7rwEB5pKjt2oHPETsVesrqPJR6uk5oTU29cgWak6Cig@mail.gmail.com>
Message-ID: <CACLX4jQgtCGQcKY_3Gyb3sO4qm2MFUOn+j6cUN0KiSHo9boiEg@mail.gmail.com>

I'm going to drop caml-list for further discussion of this issue.  People
who are interested should feel free to follow along on ocaml-core:

   https://groups.google.com/forum/?fromgroups#!forum/ocaml-core

y

On Tue, Mar 20, 2012 at 10:10 PM, Yaron Minsky <yminsky at janestreet.com>wrote:

> Looping in ocaml-core list.
>
> On Tue, Mar 20, 2012 at 8:51 PM, Gerd Stolpmann <info at gerd-stolpmann.de>wrote:
>
>>
>> I second this. There is one OS where getlogin does not follow POSIX and is
>> maybe insecure, and the fix cannot be to hide the function for all other
>> OS. IMHO, these differences should be handled on a higher level, and not
>> in the module providing the bindings.
>>
>> Semantically, there is a big difference between getlogin and getuid:
>> getlogin shall also work when the user calls a setuid program which in
>> turn invokes a script. These script commands can then use getlogin to
>> identify the original user (which is defined as the user of the session =
>> the user of the controlling terminal). In contrast, getuid would return
>> the uid to which setuid switched (for the script).
>>
>> So, I'd say, you cannot repair getlogin with getuid. The best fix is
>> probably to just run `/usr/bin/logname </dev/tty` and read the printed
>> name.
>>
>
> I can think of a few solutions here:
>
>    - We can use getuid only on platforms where getlogin is busted
>    - We can name our function something other than "getlogin", to avoid
>    confusion.
>    - We can shell-out, in the way you suggest, to implement getlogin on
>    Linux.  My only worry is that this is also going to be somewhat fragile in
>    its own way.  Does calling out to logname with the suggested redirect
>    always work?
>
> I'm open to other suggestions.
>
> y
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120320/e5b2211e/attachment.html>

From yminsky at janestreet.com  Wed Mar 21 02:29:35 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Tue, 20 Mar 2012 22:29:35 -0400
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <CACLX4jR7rwEB5pKjt2oHPETsVesrqPJR6uk5oTU29cgWak6Cig@mail.gmail.com>
References: <c7dd99924eaad3383d8d529f66dc1752.squirrel@gps.dynxs.de>
	<CACLX4jR7rwEB5pKjt2oHPETsVesrqPJR6uk5oTU29cgWak6Cig@mail.gmail.com>
Message-ID: <CACLX4jQRy93XnPp+YCQt3zdZ9CP79Jx7Vgq4HDEFuEqnpKHLGA@mail.gmail.com>

I have to say, the manpage on this is downright hilarious:

Unfortunately, it is often rather easy to fool getlogin(). Sometimes it does
not work at all, because some program messed up the utmp file. Often, it
gives only the first 8 characters of the login name. The user currently
logged in on the controlling tty of our program need not be the user who
started it. Avoid getlogin() for security-related purposes.

Note that glibc does not follow the POSIX specification and uses stdin
instead
of /dev/tty. A bug. (Other recent systems, like SunOS 5.8 and HP-UX 11.11
and FreeBSD 4.8 all return the login name also when stdin is redirected.)

Nobody knows precisely what cuserid() does; avoid it in portable programs.
Or
avoid it altogether: use getpwuid(geteuid()) instead, if that is what you
 meant. Do not use cuserid().

So, on Linux getlogin returns mangled usernames sometimes, and should not
be used for any "security" purposes.  getpwuid(getuid()) is sounding better
and better...

y

On Tue, Mar 20, 2012 at 10:10 PM, Yaron Minsky <yminsky at janestreet.com>wrote:

> Looping in ocaml-core list.
>
> On Tue, Mar 20, 2012 at 8:51 PM, Gerd Stolpmann <info at gerd-stolpmann.de>wrote:
>
>>
>> I second this. There is one OS where getlogin does not follow POSIX and is
>> maybe insecure, and the fix cannot be to hide the function for all other
>> OS. IMHO, these differences should be handled on a higher level, and not
>> in the module providing the bindings.
>>
>> Semantically, there is a big difference between getlogin and getuid:
>> getlogin shall also work when the user calls a setuid program which in
>> turn invokes a script. These script commands can then use getlogin to
>> identify the original user (which is defined as the user of the session =
>> the user of the controlling terminal). In contrast, getuid would return
>> the uid to which setuid switched (for the script).
>>
>> So, I'd say, you cannot repair getlogin with getuid. The best fix is
>> probably to just run `/usr/bin/logname </dev/tty` and read the printed
>> name.
>>
>
> I can think of a few solutions here:
>
>    - We can use getuid only on platforms where getlogin is busted
>    - We can name our function something other than "getlogin", to avoid
>    confusion.
>    - We can shell-out, in the way you suggest, to implement getlogin on
>    Linux.  My only worry is that this is also going to be somewhat fragile in
>    its own way.  Does calling out to logname with the suggested redirect
>    always work?
>
> I'm open to other suggestions.
>
> y
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120320/38953a45/attachment.html>

From oliver at first.in-berlin.de  Tue Mar 20 22:45:25 2012
From: oliver at first.in-berlin.de (oliver)
Date: Tue, 20 Mar 2012 23:45:25 +0100
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <CAHJESt0O3yLjNPkexha_37OZQoLFobX4S-R1CZhvfzOasXWXgA@mail.gmail.com>
References: <20120320175113.GC935@viper.local>
 <20120320180759.GE935@viper.local>
 <4F68CC67.3020207@janestreet.com>
 <CAHJESt3W8_B8pusqV1qFeNBTZuzD=Vxh41E57pCr1SNZbYTdwg@mail.gmail.com>
 <CADKNfhJm3unJTRyFLAxZDRFKeOAccfEA+fhXNMk1+kCFAa+0Xw@mail.gmail.com>
 <CAHJESt0O3yLjNPkexha_37OZQoLFobX4S-R1CZhvfzOasXWXgA@mail.gmail.com>
Message-ID: <20120320224525.GE3352@siouxsie>


Are there so many bugs in glibc that fixing this one means waiting
in a long, long queue... and bugfixes will need months or years?

Are there any reasons this bug is not already fixed?
And since when is it known?

Ciao,
  Oliver


On Tue, Mar 20, 2012 at 04:12:36PM -0400, Till Varoquaux wrote:
> As far as I can tell getpwuid(geteuid()) is what the (deprecated)
> cuserid function does. The linux man page explains the difference
> between the two functions like this:
> 
>   _ These functions let your program identify positively the user who
> is running (cuserid()) or the user who logged in this session
> (getlogin()). (These can differ when set-user-ID programs are
> involved.)
> 
> I expect there to be more points were the behaviours of those two
> functions diverge (e.g.: sudo, deamons etc...).
> 
> In general I am very skeptic any time I see a one liner that is sold
> as a working alternative to a glibc function. The glibc has issues and
> pitfalls but they tend to be very well documented. "Better the devil
> you know"...
> 
> Till
> 
> On Tue, Mar 20, 2012 at 3:41 PM, Yaron Minsky <yminsky at gmail.com> wrote:
> > Is there a concrete difference in behavior you're concerned about?
> >
> > y
> >
> >
> > On Tue, Mar 20, 2012 at 2:48 PM, Till Varoquaux <till at pps.jussieu.fr> wrote:
> >>
> >> getpwuid(getuid()) is not a synonym for get_login (refer to the
> >> discussion in the POSIX standard[^1]). You should not shadow posix
> >> functions by functions with different semantics in the Unix modules;
> >> providing your own abstraction over the OS is a commendable goal but
> >> you should do so without silently bypassing core functions.
> >>
> >> Till
> >> [1]:http://pubs.opengroup.org/onlinepubs/007904975/functions/getlogin.html
> >>
> >>
> >> On Tue, Mar 20, 2012 at 2:28 PM, David House <dhouse at janestreet.com>
> >> wrote:
> >> > Note that Jane Street's core library [1] does not use getlogin(3) in its
> >> > replacement Unix module, for exactly this reason:
> >> >
> >> > (* The standard getlogin function goes through utmp which is unreliable,
> >> > ?see the BUGS section of getlogin(3) *)
> >> > let getlogin_orig = Unix.getlogin
> >> > let getlogin () = (Unix.getpwuid (getuid ())).Unix.pw_name
> >> >
> >> > [1]: https://bitbucket.org/yminsky/ocaml-core/wiki/Home
> >> >
> >> > I just tested your specific example, and it worked fine.
> >> >
> >> >
> >> > On Tue 20 Mar 2012 06:07:59 PM GMT, Ricardo Catalinas Jim?nez wrote:
> >> >>
> >> >> On Tue, Mar 20, 2012 at 06:51:13PM +0100, Ricardo Catalinas Jim?nez
> >> >> wrote:
> >> >>>
> >> >>> I found out the next issue in this simple code:
> >> >>>
> >> >>> let () =
> >> >>> ? ? print_endline "Hello";
> >> >>> ? ? print_endline (Unix.getlogin ())
> >> >>>
> >> >>> Running in the normal case, with `./a.out' gives:
> >> >>>
> >> >>> Hello
> >> >>> ricardo
> >> >>>
> >> >>> But running like `./a.out</dev/null' makes Unix.getlogin fail:
> >> >>>
> >> >>> Hello
> >> >>> Fatal error: exception Unix.Unix_error(20, "getlogin", "")
> >> >>>
> >> >>> A simple strace reveals the problem:
> >> >>>
> >> >>> ? ?open("/etc/passwd", O_RDONLY|O_CLOEXEC) = 3
> >> >>> ? ?fstat(3, {st_mode=S_IFREG|0644, st_size=509, ...}) = 0
> >> >>> ? ?mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS,
> >> >>> -1,
> >> >>> 0) = 0x7fb125554000
> >> >>> ? ?read(3, "root:x:0:0:root:/root:/bin/bash\n"..., 4096) = 509
> >> >>> ? ?read(3, "", 4096) ? ? ? ? ? ? ? ? ? ? ? = 0
> >> >>> ? ?close(3) ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?= 0
> >> >>> ? ?munmap(0x7fb125554000, 4096) ? ? ? ? ? ?= 0
> >> >>> -> ?ioctl(0, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or
> >> >>> TCGETS, 0x7fff12682c98) = -1 ENOTTY (Inappropriate ioctl for device)
> >> >>> ? ?write(2, "Fatal error: exception Unix.Unix"..., 59) = 59
> >> >>> ? ?exit_group(2) ? ? ? ? ? ? ? ? ? ? ? ? ? = ?
> >> >>
> >> >>
> >> >>
> >> >> Someone knew the answer, man 3 getlogin reads:
> >> >>
> >> >> ? ? ? ?Note that glibc does not follow the POSIX specification and uses
> >> >> ? ? ? ?stdin instead of /dev/tty. ?A bug. ?(Other recent systems, like
> >> >> ? ? ? ?SunOS 5.8 and HP-UX 11.11 and FreeBSD 4.8 all return the login
> >> >> ? ? ? ?name also when stdin is redirected.)
> >> >>
> >> >>
> >> >> Regards
> >> >
> >> >
> >> >
> >> >
> >> > --
> >> > Caml-list mailing list. ?Subscription management and archives:
> >> > https://sympa-roc.inria.fr/wws/info/caml-list
> >> > Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> >> > Bug reports: http://caml.inria.fr/bin/caml-bugs
> >> >
> >>
> >>
> >> --
> >> Caml-list mailing list. ?Subscription management and archives:
> >> https://sympa-roc.inria.fr/wws/info/caml-list
> >> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> >> Bug reports: http://caml.inria.fr/bin/caml-bugs
> >>
> >
> 
> 
> -- 
> Caml-list mailing list.  Subscription management and archives:
> https://sympa-roc.inria.fr/wws/info/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
> 


From info at gerd-stolpmann.de  Wed Mar 21 00:51:54 2012
From: info at gerd-stolpmann.de (Gerd Stolpmann)
Date: Wed, 21 Mar 2012 01:51:54 +0100
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
Message-ID: <c7dd99924eaad3383d8d529f66dc1752.squirrel@gps.dynxs.de>



I second this. There is one OS where getlogin does not follow POSIX and is
maybe insecure, and the fix cannot be to hide the function for all other
OS. IMHO, these differences should be handled on a higher level, and not
in the module providing the bindings.

Semantically, there is a big difference between getlogin and getuid:
getlogin shall also work when the user calls a setuid program which in
turn invokes a script. These script commands can then use getlogin to
identify the original user (which is defined as the user of the session =
the user of the controlling terminal). In contrast, getuid would return
the uid to which setuid switched (for the script).

So, I'd say, you cannot repair getlogin with getuid. The best fix is
probably to just run `/usr/bin/logname </dev/tty` and read the printed
name.

Gerd

> getpwuid(getuid()) is not a synonym for get_login (refer to the
> discussion in the POSIX standard[^1]). You should not shadow posix
functions by functions with different semantics in the Unix modules;
providing your own abstraction over the OS is a commendable goal but you
should do so without silently bypassing core functions.
>
> Till
> [1]:http://pubs.opengroup.org/onlinepubs/007904975/functions/getlogin.html
>
>
> On Tue, Mar 20, 2012 at 2:28 PM, David House <dhouse at janestreet.com> wrote:
>> Note that Jane Street's core library [1] does not use getlogin(3) in
its replacement Unix module, for exactly this reason:
>>
>> (* The standard getlogin function goes through utmp which is
unreliable, ??see the BUGS section of getlogin(3) *)
>> let getlogin_orig = Unix.getlogin
>> let getlogin () = (Unix.getpwuid (getuid ())).Unix.pw_name
>>
>> [1]: https://bitbucket.org/yminsky/ocaml-core/wiki/Home
>>
>> I just tested your specific example, and it worked fine.
>>
>>
>> On Tue 20 Mar 2012 06:07:59 PM GMT, Ricardo Catalinas Jim??nez wrote:
>>>
>>> On Tue, Mar 20, 2012 at 06:51:13PM +0100, Ricardo Catalinas Jim??nez
wrote:
>>>>
>>>> I found out the next issue in this simple code:
>>>>
>>>> let () =
>>>> ?? ?? print_endline "Hello";
>>>> ?? ?? print_endline (Unix.getlogin ())
>>>>
>>>> Running in the normal case, with `./a.out' gives:
>>>>
>>>> Hello
>>>> ricardo
>>>>
>>>> But running like `./a.out</dev/null' makes Unix.getlogin fail:
>>>>
>>>> Hello
>>>> Fatal error: exception Unix.Unix_error(20, "getlogin", "")
>>>>
>>>> A simple strace reveals the problem:
>>>>
>>>> ?? ??open("/etc/passwd", O_RDONLY|O_CLOEXEC) = 3
>>>> ?? ??fstat(3, {st_mode=S_IFREG|0644, st_size=509, ...}) = 0
>>>> ?? ??mmap(NULL, 4096, PROT_READ|PROT_WRITE,
MAP_PRIVATE|MAP_ANONYMOUS, -1,
>>>> 0) = 0x7fb125554000
>>>> ?? ??read(3, "root:x:0:0:root:/root:/bin/bash\n"..., 4096) = 509 ??
??read(3, "", 4096) ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? = 0
>>>> ?? ??close(3) ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??= 0 ??
??munmap(0x7fb125554000, 4096) ?? ?? ?? ?? ?? ??= 0
>>>> -> ??ioctl(0, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or
TCGETS, 0x7fff12682c98) = -1 ENOTTY (Inappropriate ioctl for device)
?? ??write(2, "Fatal error: exception Unix.Unix"..., 59) = 59 ??
??exit_group(2) ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? = ?
>>>
>>>
>>>
>>> Someone knew the answer, man 3 getlogin reads:
>>>
>>> ?? ?? ?? ??Note that glibc does not follow the POSIX specification and
uses
>>> ?? ?? ?? ??stdin instead of /dev/tty. ??A bug. ??(Other recent
systems, like
>>> ?? ?? ?? ??SunOS 5.8 and HP-UX 11.11 and FreeBSD 4.8 all return the login
>>> ?? ?? ?? ??name also when stdin is redirected.)
>>>
>>>
>>> Regards
>>
>>
>>
>>
>> --
>> Caml-list mailing list. ??Subscription management and archives:
https://sympa-roc.inria.fr/wws/info/caml-list
>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>> Bug reports: http://caml.inria.fr/bin/caml-bugs
>>
>
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa-roc.inria.fr/wws/info/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>
>


-- 
Gerd Stolpmann, Darmstadt, Germany    gerd at gerd-stolpmann.de
Creator of GODI and camlcity.org.
Contact details:        http://www.camlcity.org/contact.html
Company homepage:       http://www.gerd-stolpmann.de
*** Searching for new projects! Need consulting for system
*** programming in Ocaml? Gerd Stolpmann can help you.



-- 
Gerd Stolpmann, Darmstadt, Germany    gerd at gerd-stolpmann.de
Creator of GODI and camlcity.org.
Contact details:        http://www.camlcity.org/contact.html
Company homepage:       http://www.gerd-stolpmann.de
*** Searching for new projects! Need consulting for system
*** programming in Ocaml? Gerd Stolpmann can help you.



-- 
Caml-list mailing list.  Subscription management and archives:
https://sympa-roc.inria.fr/wws/info/caml-list
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
Bug reports: http://caml.inria.fr/bin/caml-bugs



From av1474 at comtv.ru  Wed Mar 21 02:17:07 2012
From: av1474 at comtv.ru (malc)
Date: Wed, 21 Mar 2012 06:17:07 +0400 (MSK)
Subject: [Caml-list] Unix.getlogin () fails when stdin is redirected
In-Reply-To: <20120320175113.GC935@viper.local>
References: <20120320175113.GC935@viper.local>
Message-ID: <alpine.LNX.2.00.1203210615050.4731@linmac>


On Tue, 20 Mar 2012, Ricardo Catalinas Jim?nez wrote:

> I found out the next issue in this simple code:
> 
> let () =
>     print_endline "Hello";
>     print_endline (Unix.getlogin ())
> 
> Running in the normal case, with `./a.out' gives:

FWIW on my machine (linux) calling getlogin from any PTY always fails
(be it screen or some sort of X terminal)

[..snip..]

-- 
mailto:av1474 at comtv.ru

-- 
Caml-list mailing list.  Subscription management and archives:
https://sympa-roc.inria.fr/wws/info/caml-list
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
Bug reports: http://caml.inria.fr/bin/caml-bugs



From yminsky at janestreet.com  Wed Mar 21 11:47:30 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Wed, 21 Mar 2012 07:47:30 -0400
Subject: [Caml-list] Unix.getlogin () fails when stdin is redirected
In-Reply-To: <3FAFC120-3FAF-4818-8AF8-7B2742B74E80@recoil.org>
References: <c7dd99924eaad3383d8d529f66dc1752.squirrel@gps.dynxs.de>
	<CACLX4jR7rwEB5pKjt2oHPETsVesrqPJR6uk5oTU29cgWak6Cig@mail.gmail.com>
	<CACLX4jQRy93XnPp+YCQt3zdZ9CP79Jx7Vgq4HDEFuEqnpKHLGA@mail.gmail.com>
	<3FAFC120-3FAF-4818-8AF8-7B2742B74E80@recoil.org>
Message-ID: <CACLX4jSabYsyvHSKeSaY30WeVb7VG51DUkw7QjpDthwFcReiYA@mail.gmail.com>

I'm not sure how bad I feel about having surprising results in that
degenerate case!

Anil, do you have a view as to what Core should do for getlogin?  I'm still
not sure we should change anything, or if we should, what change to make...

I am sure that I hate Unix, though.  That Xen client thing is sounding
better every day...
On Mar 21, 2012 7:35 AM, "Anil Madhavapeddy" <anil at recoil.org> wrote:

> Bear in mind that getpwuid(getuid()) can return unexpected results if you
> have multiple usernames mapped to the same numeric id (bad idea, but it
> does happen, for example with the toor account often used for an
> alternative root shell).
>
> The only reliable, portable results are the numeric ids from
> getuid/geteuid.
>
> -anil
>
> On 21 Mar 2012, at 02:29, Yaron Minsky wrote:
>
> I have to say, the manpage on this is downright hilarious:
>
> Unfortunately, it is often rather easy to fool getlogin(). Sometimes it
> does
> not work at all, because some program messed up the utmp file. Often, it
> gives only the first 8 characters of the login name. The user currently
> logged in on the controlling tty of our program need not be the user who
> started it. Avoid getlogin() for security-related purposes.
>
> Note that glibc does not follow the POSIX specification and uses stdin
> instead
> of /dev/tty. A bug. (Other recent systems, like SunOS 5.8 and HP-UX 11.11
> and FreeBSD 4.8 all return the login name also when stdin is redirected.)
>
> Nobody knows precisely what cuserid() does; avoid it in portable programs.
> Or
> avoid it altogether: use getpwuid(geteuid()) instead, if that is what you
>  meant. Do not use cuserid().
>
> So, on Linux getlogin returns mangled usernames sometimes, and should not
> be used for any "security" purposes.  getpwuid(getuid()) is sounding better
> and better...
>
> y
>
> On Tue, Mar 20, 2012 at 10:10 PM, Yaron Minsky <yminsky at janestreet.com>wrote:
>
>> Looping in ocaml-core list.
>>
>> On Tue, Mar 20, 2012 at 8:51 PM, Gerd Stolpmann <info at gerd-stolpmann.de>wrote:
>>
>>>
>>> I second this. There is one OS where getlogin does not follow POSIX and
>>> is
>>> maybe insecure, and the fix cannot be to hide the function for all other
>>> OS. IMHO, these differences should be handled on a higher level, and not
>>> in the module providing the bindings.
>>>
>>> Semantically, there is a big difference between getlogin and getuid:
>>> getlogin shall also work when the user calls a setuid program which in
>>> turn invokes a script. These script commands can then use getlogin to
>>> identify the original user (which is defined as the user of the session =
>>> the user of the controlling terminal). In contrast, getuid would return
>>> the uid to which setuid switched (for the script).
>>>
>>> So, I'd say, you cannot repair getlogin with getuid. The best fix is
>>> probably to just run `/usr/bin/logname </dev/tty` and read the printed
>>> name.
>>>
>>
>> I can think of a few solutions here:
>>
>>    - We can use getuid only on platforms where getlogin is busted
>>    - We can name our function something other than "getlogin", to avoid
>>    confusion.
>>    - We can shell-out, in the way you suggest, to implement getlogin on
>>    Linux.  My only worry is that this is also going to be somewhat fragile in
>>    its own way.  Does calling out to logname with the suggested redirect
>>    always work?
>>
>> I'm open to other suggestions.
>>
>> y
>>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120321/c7e629a6/attachment.html>

From yminsky at janestreet.com  Wed Mar 21 14:10:37 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Wed, 21 Mar 2012 10:10:37 -0400
Subject: [Caml-list] Unix.getlogin () fails when stdin is redirected
In-Reply-To: <4F69CC8D.5090908@janestreet.com>
References: <c7dd99924eaad3383d8d529f66dc1752.squirrel@gps.dynxs.de>
	<CACLX4jR7rwEB5pKjt2oHPETsVesrqPJR6uk5oTU29cgWak6Cig@mail.gmail.com>
	<CACLX4jQRy93XnPp+YCQt3zdZ9CP79Jx7Vgq4HDEFuEqnpKHLGA@mail.gmail.com>
	<3FAFC120-3FAF-4818-8AF8-7B2742B74E80@recoil.org>
	<CACLX4jSabYsyvHSKeSaY30WeVb7VG51DUkw7QjpDthwFcReiYA@mail.gmail.com>
	<5389E853-E7F1-4AE3-AD97-E47300575B44@recoil.org>
	<4F69CC8D.5090908@janestreet.com>
Message-ID: <CACLX4jTVh_=uf2gh5-1pmU1w_4nUSHy3igOxgv8bw5RwuNOqiA@mail.gmail.com>

Maybe we could have more descriptive names for the other functions:

posix_getlogin
get_executing_login

The latter does better describe what the current getlogin does.

y

On Wed, Mar 21, 2012 at 8:41 AM, David House <dhouse at janestreet.com> wrote:

> Perhaps we should wrap Unix.getlogin with something with a mangled type,
> like:
>
>  let getlogin () = `You_probably_mean_get_my_**user_name
>  let getlogin_really () = Unix.getlogin ()
>  let get_my_user_name () = (Unix.getpwuid (getuid ())).Unix.pw_name
> (Plus, obviously, helpful comments in the mli.)
>
> This approach is pretty successful inside async. You are saved from
> introducing bugs due to deficiencies in libc, but if you really want
> getlogin(3), you have it. If you want it a lot, you can always rebind it
> locally.
>
>
> On Wed 21 Mar 2012 12:37:11 PM GMT, Anil Madhavapeddy wrote:
>
>> I agree with Till; the least surprising thing is to pass through the
>> underlying {g}libc library call. Any higher-level replacement can just have
>> a different name (for example, a version that goes through the password
>> database and returns *all* logins associated with the {e}uid might be the
>> safest thing).
>>
>> Xen thing making good progress. Soon! :-)
>>
>> -Anil
>>
>> On 21 Mar 2012, at 11:47, Yaron Minsky wrote:
>>
>>  I'm not sure how bad I feel about having surprising results in that
>>> degenerate case!
>>>
>>> Anil, do you have a view as to what Core should do for getlogin? I'm
>>> still not sure we should change anything, or if we should, what change to
>>> make...
>>>
>>> I am sure that I hate Unix, though. That Xen client thing is sounding
>>> better every day...
>>>
>>> On Mar 21, 2012 7:35 AM, "Anil Madhavapeddy" <anil at recoil.org <mailto:
>>> anil at recoil.org>> wrote:
>>>
>>>    Bear in mind that getpwuid(getuid()) can return unexpected
>>>    results if you have multiple usernames mapped to the same numeric
>>>    id (bad idea, but it does happen, for example with the toor
>>>    account often used for an alternative root shell).
>>>
>>>    The only reliable, portable results are the numeric ids from
>>>    getuid/geteuid.
>>>
>>>    -anil
>>>
>>>    On 21 Mar 2012, at 02:29, Yaron Minsky wrote:
>>>
>>>     I have to say, the manpage on this is downright hilarious:
>>>>
>>>>    Unfortunately, it is often rather easy to fool getlogin().
>>>>    Sometimes it does
>>>>    not work at all, because some program messed up the utmp file.
>>>>    Often, it
>>>>    gives only the first 8 characters of the login name. The user
>>>>    currently
>>>>    logged in on the controlling tty of our program need not be the
>>>>    user who
>>>>    started it. Avoid getlogin() for security-related purposes.
>>>>
>>>>    Note that glibc does not follow the POSIX specification and uses
>>>>    stdin instead
>>>>    of /dev/tty. A bug. (Other recent systems, like SunOS 5.8 and
>>>>    HP-UX 11.11
>>>>    and FreeBSD 4.8 all return the login name also when stdin is
>>>>    redirected.)
>>>>
>>>>    Nobody knows precisely what cuserid() does; avoid it in portable
>>>>    programs. Or
>>>>    avoid it altogether: use getpwuid(geteuid()) instead, if that is
>>>>    what you
>>>>    meant. Do not use cuserid().
>>>>
>>>>    So, on Linux getlogin returns mangled usernames sometimes, and
>>>>    should not be used for any "security" purposes.
>>>>    getpwuid(getuid()) is sounding better and better...
>>>>
>>>>    y
>>>>
>>>>    On Tue, Mar 20, 2012 at 10:10 PM, Yaron Minsky
>>>>    <yminsky at janestreet.com <mailto:yminsky at janestreet.com**>> wrote:
>>>>
>>>>        Looping in ocaml-core list.
>>>>
>>>>        On Tue, Mar 20, 2012 at 8:51 PM, Gerd Stolpmann
>>>>        <info at gerd-stolpmann.de <mailto:info at gerd-stolpmann.de**>>
>>>> wrote:
>>>>
>>>>
>>>>            I second this. There is one OS where getlogin does not
>>>>            follow POSIX and is
>>>>            maybe insecure, and the fix cannot be to hide the
>>>>            function for all other
>>>>            OS. IMHO, these differences should be handled on a
>>>>            higher level, and not
>>>>            in the module providing the bindings.
>>>>
>>>>            Semantically, there is a big difference between getlogin
>>>>            and getuid:
>>>>            getlogin shall also work when the user calls a setuid
>>>>            program which in
>>>>            turn invokes a script. These script commands can then
>>>>            use getlogin to
>>>>            identify the original user (which is defined as the user
>>>>            of the session =
>>>>            the user of the controlling terminal). In contrast,
>>>>            getuid would return
>>>>            the uid to which setuid switched (for the script).
>>>>
>>>>            So, I'd say, you cannot repair getlogin with getuid. The
>>>>            best fix is
>>>>            probably to just run `/usr/bin/logname </dev/tty` and
>>>>            read the printed
>>>>            name.
>>>>
>>>>
>>>>        I can think of a few solutions here:
>>>>
>>>>          * We can use getuid only on platforms where getlogin is busted
>>>>          * We can name our function something other than
>>>>
>>>>            "getlogin", to avoid confusion.
>>>>          * We can shell-out, in the way you suggest, to implement
>>>>
>>>>            getlogin on Linux. My only worry is that this is also
>>>>            going to be somewhat fragile in its own way. Does
>>>>            calling out to logname with the suggested redirect
>>>>            always work?
>>>>
>>>>        I'm open to other suggestions.
>>>>
>>>>        y
>>>>
>>>>
>>>>
>>>
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120321/20ab5766/attachment.html>

From anil at recoil.org  Wed Mar 21 11:35:25 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Wed, 21 Mar 2012 11:35:25 +0000
Subject: [Caml-list] Unix.getlogin () fails when stdin is redirected
In-Reply-To: <CACLX4jQRy93XnPp+YCQt3zdZ9CP79Jx7Vgq4HDEFuEqnpKHLGA@mail.gmail.com>
References: <c7dd99924eaad3383d8d529f66dc1752.squirrel@gps.dynxs.de> <CACLX4jR7rwEB5pKjt2oHPETsVesrqPJR6uk5oTU29cgWak6Cig@mail.gmail.com> <CACLX4jQRy93XnPp+YCQt3zdZ9CP79Jx7Vgq4HDEFuEqnpKHLGA@mail.gmail.com>
Message-ID: <3FAFC120-3FAF-4818-8AF8-7B2742B74E80@recoil.org>

Bear in mind that getpwuid(getuid()) can return unexpected results if you have multiple usernames mapped to the same numeric id (bad idea, but it does happen, for example with the toor account often used for an alternative root shell).

The only reliable, portable results are the numeric ids from getuid/geteuid.

-anil

On 21 Mar 2012, at 02:29, Yaron Minsky wrote:

> I have to say, the manpage on this is downright hilarious:
> 
> Unfortunately, it is often rather easy to fool getlogin(). Sometimes it does
> not work at all, because some program messed up the utmp file. Often, it
> gives only the first 8 characters of the login name. The user currently
> logged in on the controlling tty of our program need not be the user who
> started it. Avoid getlogin() for security-related purposes.
> 
> Note that glibc does not follow the POSIX specification and uses stdin instead
> of /dev/tty. A bug. (Other recent systems, like SunOS 5.8 and HP-UX 11.11
> and FreeBSD 4.8 all return the login name also when stdin is redirected.)
> 
> Nobody knows precisely what cuserid() does; avoid it in portable programs. Or
> avoid it altogether: use getpwuid(geteuid()) instead, if that is what you
> meant. Do not use cuserid().
> 
> So, on Linux getlogin returns mangled usernames sometimes, and should not be used for any "security" purposes.  getpwuid(getuid()) is sounding better and better...
> 
> y
> 
> On Tue, Mar 20, 2012 at 10:10 PM, Yaron Minsky <yminsky at janestreet.com> wrote:
> Looping in ocaml-core list.
> 
> On Tue, Mar 20, 2012 at 8:51 PM, Gerd Stolpmann <info at gerd-stolpmann.de> wrote:
> 
> I second this. There is one OS where getlogin does not follow POSIX and is
> maybe insecure, and the fix cannot be to hide the function for all other
> OS. IMHO, these differences should be handled on a higher level, and not
> in the module providing the bindings.
> 
> Semantically, there is a big difference between getlogin and getuid:
> getlogin shall also work when the user calls a setuid program which in
> turn invokes a script. These script commands can then use getlogin to
> identify the original user (which is defined as the user of the session =
> the user of the controlling terminal). In contrast, getuid would return
> the uid to which setuid switched (for the script).
> 
> So, I'd say, you cannot repair getlogin with getuid. The best fix is
> probably to just run `/usr/bin/logname </dev/tty` and read the printed
> name.
> 
> I can think of a few solutions here:
> We can use getuid only on platforms where getlogin is busted
> We can name our function something other than "getlogin", to avoid confusion.
> We can shell-out, in the way you suggest, to implement getlogin on Linux.  My only worry is that this is also going to be somewhat fragile in its own way.  Does calling out to logname with the suggested redirect always work?  
> I'm open to other suggestions.
> 
> y
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120321/f1be878b/attachment.html>

From info at gerd-stolpmann.de  Wed Mar 21 11:29:19 2012
From: info at gerd-stolpmann.de (Gerd Stolpmann)
Date: Wed, 21 Mar 2012 12:29:19 +0100
Subject: [Caml-list] Unix.getlogin () fails when stdin is redirected
In-Reply-To: <alpine.LNX.2.00.1203210615050.4731@linmac>
References: <20120320175113.GC935@viper.local>
    <alpine.LNX.2.00.1203210615050.4731@linmac>
Message-ID: <21e18417ea60387375a493c44907735e.squirrel@gps.dynxs.de>



> On Tue, 20 Mar 2012, Ricardo Catalinas Jim?nez wrote:
>
>> I found out the next issue in this simple code:
>>
>> let () =
>>     print_endline "Hello";
>>     print_endline (Unix.getlogin ())
>>
>> Running in the normal case, with `./a.out' gives:
>
> FWIW on my machine (linux) calling getlogin from any PTY always fails
> (be it screen or some sort of X terminal)

I guess /var/run/utmp is not world-readable - which is a perfectly
reasonable configuration, and means that you disabled getlogin
administratively.

Does "last -f /var/run/utmp" give an output?

Gerd

> [..snip..]
>
> --
> mailto:av1474 at comtv.ru
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa-roc.inria.fr/wws/info/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>
>


-- 
Gerd Stolpmann, Darmstadt, Germany    gerd at gerd-stolpmann.de
Creator of GODI and camlcity.org.
Contact details:        http://www.camlcity.org/contact.html
Company homepage:       http://www.gerd-stolpmann.de
*** Searching for new projects! Need consulting for system
*** programming in Ocaml? Gerd Stolpmann can help you.



-- 
Caml-list mailing list.  Subscription management and archives:
https://sympa-roc.inria.fr/wws/info/caml-list
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
Bug reports: http://caml.inria.fr/bin/caml-bugs



From anil at recoil.org  Wed Mar 21 12:37:11 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Wed, 21 Mar 2012 12:37:11 +0000
Subject: [Caml-list] Unix.getlogin () fails when stdin is redirected
In-Reply-To: <CACLX4jSabYsyvHSKeSaY30WeVb7VG51DUkw7QjpDthwFcReiYA@mail.gmail.com>
References: <c7dd99924eaad3383d8d529f66dc1752.squirrel@gps.dynxs.de> <CACLX4jR7rwEB5pKjt2oHPETsVesrqPJR6uk5oTU29cgWak6Cig@mail.gmail.com> <CACLX4jQRy93XnPp+YCQt3zdZ9CP79Jx7Vgq4HDEFuEqnpKHLGA@mail.gmail.com> <3FAFC120-3FAF-4818-8AF8-7B2742B74E80@recoil.org> <CACLX4jSabYsyvHSKeSaY30WeVb7VG51DUkw7QjpDthwFcReiYA@mail.gmail.com>
Message-ID: <5389E853-E7F1-4AE3-AD97-E47300575B44@recoil.org>

I agree with Till; the least surprising thing is to pass through the underlying {g}libc library call.  Any higher-level replacement can just have a different name (for example, a version that goes through the password database and returns *all* logins associated with the {e}uid might be the safest thing).

Xen thing making good progress. Soon! :-)

-Anil

On 21 Mar 2012, at 11:47, Yaron Minsky wrote:

> I'm not sure how bad I feel about having surprising results in that degenerate case!
> 
> Anil, do you have a view as to what Core should do for getlogin?  I'm still not sure we should change anything, or if we should, what change to make...
> 
> I am sure that I hate Unix, though.  That Xen client thing is sounding better every day...
> 
> On Mar 21, 2012 7:35 AM, "Anil Madhavapeddy" <anil at recoil.org> wrote:
> Bear in mind that getpwuid(getuid()) can return unexpected results if you have multiple usernames mapped to the same numeric id (bad idea, but it does happen, for example with the toor account often used for an alternative root shell).
> 
> The only reliable, portable results are the numeric ids from getuid/geteuid.
> 
> -anil
> 
> On 21 Mar 2012, at 02:29, Yaron Minsky wrote:
> 
>> I have to say, the manpage on this is downright hilarious:
>> 
>> Unfortunately, it is often rather easy to fool getlogin(). Sometimes it does
>> not work at all, because some program messed up the utmp file. Often, it
>> gives only the first 8 characters of the login name. The user currently
>> logged in on the controlling tty of our program need not be the user who
>> started it. Avoid getlogin() for security-related purposes.
>> 
>> Note that glibc does not follow the POSIX specification and uses stdin instead
>> of /dev/tty. A bug. (Other recent systems, like SunOS 5.8 and HP-UX 11.11
>> and FreeBSD 4.8 all return the login name also when stdin is redirected.)
>> 
>> Nobody knows precisely what cuserid() does; avoid it in portable programs. Or
>> avoid it altogether: use getpwuid(geteuid()) instead, if that is what you
>> meant. Do not use cuserid().
>> 
>> So, on Linux getlogin returns mangled usernames sometimes, and should not be used for any "security" purposes.  getpwuid(getuid()) is sounding better and better...
>> 
>> y
>> 
>> On Tue, Mar 20, 2012 at 10:10 PM, Yaron Minsky <yminsky at janestreet.com> wrote:
>> Looping in ocaml-core list.
>> 
>> On Tue, Mar 20, 2012 at 8:51 PM, Gerd Stolpmann <info at gerd-stolpmann.de> wrote:
>> 
>> I second this. There is one OS where getlogin does not follow POSIX and is
>> maybe insecure, and the fix cannot be to hide the function for all other
>> OS. IMHO, these differences should be handled on a higher level, and not
>> in the module providing the bindings.
>> 
>> Semantically, there is a big difference between getlogin and getuid:
>> getlogin shall also work when the user calls a setuid program which in
>> turn invokes a script. These script commands can then use getlogin to
>> identify the original user (which is defined as the user of the session =
>> the user of the controlling terminal). In contrast, getuid would return
>> the uid to which setuid switched (for the script).
>> 
>> So, I'd say, you cannot repair getlogin with getuid. The best fix is
>> probably to just run `/usr/bin/logname </dev/tty` and read the printed
>> name.
>> 
>> I can think of a few solutions here:
>> We can use getuid only on platforms where getlogin is busted
>> We can name our function something other than "getlogin", to avoid confusion.
>> We can shell-out, in the way you suggest, to implement getlogin on Linux.  My only worry is that this is also going to be somewhat fragile in its own way.  Does calling out to logname with the suggested redirect always work?  
>> I'm open to other suggestions.
>> 
>> y
>> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120321/b98d8ba5/attachment.html>

From dhouse at janestreet.com  Wed Mar 21 12:41:49 2012
From: dhouse at janestreet.com (David House)
Date: Wed, 21 Mar 2012 12:41:49 +0000
Subject: [Caml-list] Unix.getlogin () fails when stdin is redirected
In-Reply-To: <5389E853-E7F1-4AE3-AD97-E47300575B44@recoil.org>
References: <c7dd99924eaad3383d8d529f66dc1752.squirrel@gps.dynxs.de> <CACLX4jR7rwEB5pKjt2oHPETsVesrqPJR6uk5oTU29cgWak6Cig@mail.gmail.com> <CACLX4jQRy93XnPp+YCQt3zdZ9CP79Jx7Vgq4HDEFuEqnpKHLGA@mail.gmail.com> <3FAFC120-3FAF-4818-8AF8-7B2742B74E80@recoil.org> <CACLX4jSabYsyvHSKeSaY30WeVb7VG51DUkw7QjpDthwFcReiYA@mail.gmail.com> <5389E853-E7F1-4AE3-AD97-E47300575B44@recoil.org>
Message-ID: <4F69CC8D.5090908@janestreet.com>


Perhaps we should wrap Unix.getlogin with something with a mangled 
type, like:

  let getlogin () = `You_probably_mean_get_my_user_name
  let getlogin_really () = Unix.getlogin ()
  let get_my_user_name () = (Unix.getpwuid (getuid ())).Unix.pw_name 

(Plus, obviously, helpful comments in the mli.)

This approach is pretty successful inside async. You are saved from 
introducing bugs due to deficiencies in libc, but if you really want 
getlogin(3), you have it. If you want it a lot, you can always rebind 
it locally.

On Wed 21 Mar 2012 12:37:11 PM GMT, Anil Madhavapeddy wrote:
> I agree with Till; the least surprising thing is to pass through the 
> underlying {g}libc library call. Any higher-level replacement can just 
> have a different name (for example, a version that goes through the 
> password database and returns *all* logins associated with the {e}uid 
> might be the safest thing).
>
> Xen thing making good progress. Soon! :-)
>
> -Anil
>
> On 21 Mar 2012, at 11:47, Yaron Minsky wrote:
>
>> I'm not sure how bad I feel about having surprising results in that 
>> degenerate case!
>>
>> Anil, do you have a view as to what Core should do for getlogin? I'm 
>> still not sure we should change anything, or if we should, what 
>> change to make...
>>
>> I am sure that I hate Unix, though. That Xen client thing is sounding 
>> better every day...
>>
>> On Mar 21, 2012 7:35 AM, "Anil Madhavapeddy" <anil at recoil.org 
>> <mailto:anil at recoil.org>> wrote:
>>
>>     Bear in mind that getpwuid(getuid()) can return unexpected
>>     results if you have multiple usernames mapped to the same numeric
>>     id (bad idea, but it does happen, for example with the toor
>>     account often used for an alternative root shell).
>>
>>     The only reliable, portable results are the numeric ids from
>>     getuid/geteuid.
>>
>>     -anil
>>
>>     On 21 Mar 2012, at 02:29, Yaron Minsky wrote:
>>
>>>     I have to say, the manpage on this is downright hilarious:
>>>
>>>     Unfortunately, it is often rather easy to fool getlogin().
>>>     Sometimes it does
>>>     not work at all, because some program messed up the utmp file.
>>>     Often, it
>>>     gives only the first 8 characters of the login name. The user
>>>     currently
>>>     logged in on the controlling tty of our program need not be the
>>>     user who
>>>     started it. Avoid getlogin() for security-related purposes.
>>>
>>>     Note that glibc does not follow the POSIX specification and uses
>>>     stdin instead
>>>     of /dev/tty. A bug. (Other recent systems, like SunOS 5.8 and
>>>     HP-UX 11.11
>>>     and FreeBSD 4.8 all return the login name also when stdin is
>>>     redirected.)
>>>
>>>     Nobody knows precisely what cuserid() does; avoid it in portable
>>>     programs. Or
>>>     avoid it altogether: use getpwuid(geteuid()) instead, if that is
>>>     what you
>>>     meant. Do not use cuserid().
>>>
>>>     So, on Linux getlogin returns mangled usernames sometimes, and
>>>     should not be used for any "security" purposes.
>>>     getpwuid(getuid()) is sounding better and better...
>>>
>>>     y
>>>
>>>     On Tue, Mar 20, 2012 at 10:10 PM, Yaron Minsky
>>>     <yminsky at janestreet.com <mailto:yminsky at janestreet.com>> wrote:
>>>
>>>         Looping in ocaml-core list.
>>>
>>>         On Tue, Mar 20, 2012 at 8:51 PM, Gerd Stolpmann
>>>         <info at gerd-stolpmann.de <mailto:info at gerd-stolpmann.de>> wrote:
>>>
>>>
>>>             I second this. There is one OS where getlogin does not
>>>             follow POSIX and is
>>>             maybe insecure, and the fix cannot be to hide the
>>>             function for all other
>>>             OS. IMHO, these differences should be handled on a
>>>             higher level, and not
>>>             in the module providing the bindings.
>>>
>>>             Semantically, there is a big difference between getlogin
>>>             and getuid:
>>>             getlogin shall also work when the user calls a setuid
>>>             program which in
>>>             turn invokes a script. These script commands can then
>>>             use getlogin to
>>>             identify the original user (which is defined as the user
>>>             of the session =
>>>             the user of the controlling terminal). In contrast,
>>>             getuid would return
>>>             the uid to which setuid switched (for the script).
>>>
>>>             So, I'd say, you cannot repair getlogin with getuid. The
>>>             best fix is
>>>             probably to just run `/usr/bin/logname </dev/tty` and
>>>             read the printed
>>>             name.
>>>
>>>
>>>         I can think of a few solutions here:
>>>
>>>           * We can use getuid only on platforms where getlogin is busted
>>>           * We can name our function something other than
>>>             "getlogin", to avoid confusion.
>>>           * We can shell-out, in the way you suggest, to implement
>>>             getlogin on Linux. My only worry is that this is also
>>>             going to be somewhat fragile in its own way. Does
>>>             calling out to logname with the suggested redirect
>>>             always work?
>>>
>>>         I'm open to other suggestions.
>>>
>>>         y
>>>
>>>
>>
>




From edwin+ml-ocaml at etorok.net  Wed Mar 21 12:26:30 2012
From: edwin+ml-ocaml at etorok.net (=?UTF-8?B?VMO2csO2ayBFZHdpbg==?=)
Date: Wed, 21 Mar 2012 14:26:30 +0200
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <20120320224525.GE3352@siouxsie>
References: <20120320175113.GC935@viper.local> <20120320180759.GE935@viper.local> <4F68CC67.3020207@janestreet.com> <CAHJESt3W8_B8pusqV1qFeNBTZuzD=Vxh41E57pCr1SNZbYTdwg@mail.gmail.com> <CADKNfhJm3unJTRyFLAxZDRFKeOAccfEA+fhXNMk1+kCFAa+0Xw@mail.gmail.com> <CAHJESt0O3yLjNPkexha_37OZQoLFobX4S-R1CZhvfzOasXWXgA@mail.gmail.com> <20120320224525.GE3352@siouxsie>
Message-ID: <4F69C8F6.2050408@etorok.net>


On 03/21/2012 12:45 AM, oliver wrote:
> Are there so many bugs in glibc that fixing this one means waiting
> in a long, long queue... and bugfixes will need months or years?
> 
> Are there any reasons this bug is not already fixed?
> And since when is it known?

Using stdin might be on purpose, this is what a glibc comment says:
  /* Get name of tty connected to fd 0.  Return NULL if not a tty or
     if fd 0 isn't open.  Note that a lot of documentation says that
     getlogin() is based on the controlling terminal---what they
     really mean is "the terminal connected to standard input".  The
     getlogin() implementation of DEC Unix, SunOS, Solaris, HP-UX all
     return NULL if fd 0 has been closed, so this is the compatible
     thing to do.  Note that ttyname(open("/dev/tty")) on those
     systems returns /dev/tty, so that is not a possible solution for
     getlogin().  */

--Edwin

-- 
Caml-list mailing list.  Subscription management and archives:
https://sympa-roc.inria.fr/wws/info/caml-list
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
Bug reports: http://caml.inria.fr/bin/caml-bugs



From av1474 at comtv.ru  Wed Mar 21 17:59:54 2012
From: av1474 at comtv.ru (malc)
Date: Wed, 21 Mar 2012 21:59:54 +0400 (MSK)
Subject: [Caml-list] Unix.getlogin () fails when stdin is redirected
In-Reply-To: <21e18417ea60387375a493c44907735e.squirrel@gps.dynxs.de>
References: <20120320175113.GC935@viper.local>    <alpine.LNX.2.00.1203210615050.4731@linmac> <21e18417ea60387375a493c44907735e.squirrel@gps.dynxs.de>
Message-ID: <alpine.LNX.2.00.1203212159050.1520@linmac>


On Wed, 21 Mar 2012, Gerd Stolpmann wrote:

> 
> > On Tue, 20 Mar 2012, Ricardo Catalinas Jim?nez wrote:
> >
> >> I found out the next issue in this simple code:
> >>
> >> let () =
> >>     print_endline "Hello";
> >>     print_endline (Unix.getlogin ())
> >>
> >> Running in the normal case, with `./a.out' gives:
> >
> > FWIW on my machine (linux) calling getlogin from any PTY always fails
> > (be it screen or some sort of X terminal)
> 
> I guess /var/run/utmp is not world-readable - which is a perfectly
> reasonable configuration, and means that you disabled getlogin
> administratively.
> 
> Does "last -f /var/run/utmp" give an output?

Yep

~$ last -f /var/run/utmp 
malc     tty1                          Wed Mar 21 21:57   still logged in   
reboot   system boot                   Wed Mar 21 21:57          (00:01)    

utmp begins Wed Mar 21 21:57:23 2012
~$ ls -l /var/run/utmp 
-rw-r--r-- 1 root root 3840 2012-03-21 21:57 /var/run/utmp

[..snip..]

-- 
mailto:av1474 at comtv.ru

-- 
Caml-list mailing list.  Subscription management and archives:
https://sympa-roc.inria.fr/wws/info/caml-list
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
Bug reports: http://caml.inria.fr/bin/caml-bugs



From mbac at panix.com  Thu Mar 22 16:07:03 2012
From: mbac at panix.com (mbac at panix.com)
Date: Thu, 22 Mar 2012 12:07:03 -0400
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
Message-ID: <20120322160703.GA17435@panix.com>


House is on the right track. 

I find the name getlogin unfortunate, as it sounds a lot more promising
than it really is.  The best solution is probably more explicit names
and education.

(** A wrapper for the libc getlogin call.  You should probably
    use Sys.get_terminal_user instead.

    Raises a Unix_error if something goes wrong.
 *)
Unix.posix_getlogin : unit -> string

(** [get_terminal_user ()] attempts to determine the name of the user sitting
    at the terminal.  This relies on environment clues (such as Unix.posix_getlogin).
   
    This function may fail for daemons and detached processes.

    The name returned is not necessarily the user this process is executing as.
    See get_effective_user for that.
 *)
Sys.get_terminal_user  : unit -> string option

(** [get_effective_user ()] looks up the name of the user this process can
    access files as, send signals as, etc.  The name corresponds to the UNIX
    effective uid.  It's not necessarily the name of the user sitting at
    the terminal.
 *)
Sys.get_effective_user : unit -> string

(*
  Implementation:
    let get_effective_user () = (Unix.getpwuid (Unix.geteuid ())).Unix.pw_name
*)


From mbac at panix.com  Thu Mar 22 18:54:22 2012
From: mbac at panix.com (mbac at panix.com)
Date: Thu, 22 Mar 2012 14:54:22 -0400
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <CADy1MaufnSvZNv1sBxn737Rc5=1tw3azs2a5gxXAg4Soif3vXw@mail.gmail.com>
References: <20120322160703.GA17435@panix.com>
 <CADy1MaufnSvZNv1sBxn737Rc5=1tw3azs2a5gxXAg4Soif3vXw@mail.gmail.com>
Message-ID: <20120322185422.GA23706@panix.com>


Maybe it should ask them to look at both, so they think harder about
what they need.

On Thu, Mar 22, 2012 at 04:15:26PM +0000, David House wrote:
> This looks nice, but I'd say that the comment for
> [Unix.posix_getlogin] should actually refer the user to
> [Sys.get_effective_user] -- right?
> 
> On 22 March 2012 16:07,  <mbac at panix.com> wrote:
> > House is on the right track.
> >
> > I find the name getlogin unfortunate, as it sounds a lot more promising
> > than it really is. ?The best solution is probably more explicit names
> > and education.
> >
> > (** A wrapper for the libc getlogin call. ?You should probably
> > ? ?use Sys.get_terminal_user instead.
> >
> > ? ?Raises a Unix_error if something goes wrong.
> > ?*)
> > Unix.posix_getlogin : unit -> string
> >
> > (** [get_terminal_user ()] attempts to determine the name of the user sitting
> > ? ?at the terminal. ?This relies on environment clues (such as Unix.posix_getlogin).
> >
> > ? ?This function may fail for daemons and detached processes.
> >
> > ? ?The name returned is not necessarily the user this process is executing as.
> > ? ?See get_effective_user for that.
> > ?*)
> > Sys.get_terminal_user ?: unit -> string option
> >
> > (** [get_effective_user ()] looks up the name of the user this process can
> > ? ?access files as, send signals as, etc. ?The name corresponds to the UNIX
> > ? ?effective uid. ?It's not necessarily the name of the user sitting at
> > ? ?the terminal.
> > ?*)
> > Sys.get_effective_user : unit -> string
> >
> > (*
> > ?Implementation:
> > ? ?let get_effective_user () = (Unix.getpwuid (Unix.geteuid ())).Unix.pw_name
> > *)


From yminsky at janestreet.com  Thu Mar 22 19:14:52 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 22 Mar 2012 15:14:52 -0400
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <CADy1MaufnSvZNv1sBxn737Rc5=1tw3azs2a5gxXAg4Soif3vXw@mail.gmail.com>
References: <20120322160703.GA17435@panix.com>
	<CADy1MaufnSvZNv1sBxn737Rc5=1tw3azs2a5gxXAg4Soif3vXw@mail.gmail.com>
Message-ID: <CACLX4jSrA8h89DpKOBV04F6Sz=decP2F3dAQZ4UzzsbWV9e1fQ@mail.gmail.com>

That seems backwards.  In a setuid application, get_effective_user gives
you the user that is being su'd to.  getlogin gives you the user who owns
the tty.  Using getuid (rather than geteuid) seems like a closer
approximation.

y

On Thu, Mar 22, 2012 at 12:15 PM, David House <dmhouse at gmail.com> wrote:

> This looks nice, but I'd say that the comment for
> [Unix.posix_getlogin] should actually refer the user to
> [Sys.get_effective_user] -- right?
>
> On 22 March 2012 16:07,  <mbac at panix.com> wrote:
> > House is on the right track.
> >
> > I find the name getlogin unfortunate, as it sounds a lot more promising
> > than it really is.  The best solution is probably more explicit names
> > and education.
> >
> > (** A wrapper for the libc getlogin call.  You should probably
> >    use Sys.get_terminal_user instead.
> >
> >    Raises a Unix_error if something goes wrong.
> >  *)
> > Unix.posix_getlogin : unit -> string
> >
> > (** [get_terminal_user ()] attempts to determine the name of the user
> sitting
> >    at the terminal.  This relies on environment clues (such as
> Unix.posix_getlogin).
> >
> >    This function may fail for daemons and detached processes.
> >
> >    The name returned is not necessarily the user this process is
> executing as.
> >    See get_effective_user for that.
> >  *)
> > Sys.get_terminal_user  : unit -> string option
> >
> > (** [get_effective_user ()] looks up the name of the user this process
> can
> >    access files as, send signals as, etc.  The name corresponds to the
> UNIX
> >    effective uid.  It's not necessarily the name of the user sitting at
> >    the terminal.
> >  *)
> > Sys.get_effective_user : unit -> string
> >
> > (*
> >  Implementation:
> >    let get_effective_user () = (Unix.getpwuid (Unix.geteuid
> ())).Unix.pw_name
> > *)
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120322/385ea534/attachment.html>

From dmhouse at gmail.com  Thu Mar 22 16:15:26 2012
From: dmhouse at gmail.com (David House)
Date: Thu, 22 Mar 2012 16:15:26 +0000
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <20120322160703.GA17435@panix.com>
References: <20120322160703.GA17435@panix.com>
Message-ID: <CADy1MaufnSvZNv1sBxn737Rc5=1tw3azs2a5gxXAg4Soif3vXw@mail.gmail.com>


This looks nice, but I'd say that the comment for
[Unix.posix_getlogin] should actually refer the user to
[Sys.get_effective_user] -- right?

On 22 March 2012 16:07,  <mbac at panix.com> wrote:
> House is on the right track.
>
> I find the name getlogin unfortunate, as it sounds a lot more promising
> than it really is. ?The best solution is probably more explicit names
> and education.
>
> (** A wrapper for the libc getlogin call. ?You should probably
> ? ?use Sys.get_terminal_user instead.
>
> ? ?Raises a Unix_error if something goes wrong.
> ?*)
> Unix.posix_getlogin : unit -> string
>
> (** [get_terminal_user ()] attempts to determine the name of the user sitting
> ? ?at the terminal. ?This relies on environment clues (such as Unix.posix_getlogin).
>
> ? ?This function may fail for daemons and detached processes.
>
> ? ?The name returned is not necessarily the user this process is executing as.
> ? ?See get_effective_user for that.
> ?*)
> Sys.get_terminal_user ?: unit -> string option
>
> (** [get_effective_user ()] looks up the name of the user this process can
> ? ?access files as, send signals as, etc. ?The name corresponds to the UNIX
> ? ?effective uid. ?It's not necessarily the name of the user sitting at
> ? ?the terminal.
> ?*)
> Sys.get_effective_user : unit -> string
>
> (*
> ?Implementation:
> ? ?let get_effective_user () = (Unix.getpwuid (Unix.geteuid ())).Unix.pw_name
> *)


From ocaml-core at googlegroups.com  Fri Mar 30 04:20:00 2012
From: ocaml-core at googlegroups.com (ocaml-core at googlegroups.com)
Date: Fri, 30 Mar 2012 03:20:00 +0000
Subject: Moderator's spam report for ocaml-core@googlegroups.com
Message-ID: <0016e6d5665fd2b18704bc6d501b@google.com>


This message is being sent to you because you are a moderator of the group ocaml-core.

The following suspicious messages were sent to your group, but are being held in your moderation queue because they are classified as likely spam messages.

If you take no action, all the messages below will be discarded automatically as spam.

However, if you see any messages that are not spam below, you may approve them individually by going to:

http://groups.google.com/group/ocaml-core/pendmsg

Please do not mark this notification as spam; this is a service for group moderators. If you do not wish to receive these notifications in the future, you may change your preferences by going to:

http://groups.google.com/group/ocaml-core/manage_post


------- 1 of 1  -------
Subject: database for marketing to medical professions
>From: "Whittaker haggle" <beyjzhineMary at hostnoc.net>
Date: Mar 27 11:04AM -0700

Healthcare Data for the USA - Can be used for marketing
Many different medical specialties.
230,000 Emails in total. 
Full data records including title, physical address, phone, email, etc.. 
Reply back for details and a sample or put the word

Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=5982481789727255144


For more information about this message, please visit:
http://groups.google.com/support/bin/answer.py?hl=en&answer=165806



From markus.mottl at gmail.com  Fri Mar 30 17:19:38 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Fri, 30 Mar 2012 12:19:38 -0400
Subject: sexp_default
Message-ID: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>


Hi,

I have a patch for sexplib, which adds a new record field qualifier
"sexp_default".  It allows users to explicitly add the default
expression to be used when a record field is missing in an
S-expression.  E.g.:

  type t = { foo : int sexp_default(42) } with sexp

In this definition "foo" will default to "42" if the S-expression does
not specify "foo".  Any valid OCaml-expression is allowed within the
parentheses, including variables and even function calls.  When such a
record is converted to an S-expression, the normal behavior is to
always emit the field, no matter whether it is equivalent to the
default or not.  The reason is that unlike "sexp_list", "sexp_array",
etc., it may not be obvious to the reader of an S-expression what the
default may be.

If, however, default fields should be excluded from the conversion,
e.g. to generate a minimal default configuration file for later
refinement, the following is supported (note the exclamation mark at
the end):

  type t = { foo : int sexp_default(42)! } with sexp

Using manifest types, developers can easily generate equivalent
instantiations of a record type with different conversion behavior.
E.g.:

    type drop_foo_default = t = { foo : int sexp_default(foo)! } with sexp

This way different "default views" could be emitted for a given record.

Using manifest types together with module functors and maybe
first-class modules to do this dynamically for large numbers of
instantiations, one can also easily generate numerous default
converters for different contexts.  E.g.:

  module Make (Defaults : sig val default : t end) = struct
    type s = t = { foo : int sexp_default(Defaults.default.foo) } with sexp
  end

Some wizardry with modules and manifest types provides for almost
unlimited power for providing defaults and configuring how they are
emitted.

Let me know if this patch would likely be accepted or if there are any
suggestions for improvement, and I'll push it to my fork of OCaml
Core.

Regards,
Markus

-- 
Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From yminsky at janestreet.com  Fri Mar 30 20:45:20 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Fri, 30 Mar 2012 15:45:20 -0400
Subject: sexp_default
In-Reply-To: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
References: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
Message-ID: <CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>


This seems like a cool hack.  I'd like to wait for some of the other
folk who think about the syntax extensions to weigh in, but at first
glance, the proposal seems good.

I am a little worried about the semantics of !, though.  If I create a type:

    type t = { foo : int sexp_default(7)! } with sexp

then the round-tripping could be pretty weird.  In particular,
consider this sequence:

   { foo = 3 }
   |! sexp_of_t  (* this is () *)
   |! t_of_sexp  (* this is { foo = 7 } *)

This behavior seems pretty unfortunate.  Is that really what it does?

As a side note, Markus, if you're working on more patches: please
don't do merges in the stuff your proposing.  Yury's conversion code
doesn't work well on merges.  (merges purely within your code are
actually OK, as long as you're not merging in from different points in
the history that was exported from Jane Street.)

y

On Fri, Mar 30, 2012 at 12:19 PM, Markus Mottl <markus.mottl at gmail.com> wrote:
> Hi,
>
> I have a patch for sexplib, which adds a new record field qualifier
> "sexp_default". ?It allows users to explicitly add the default
> expression to be used when a record field is missing in an
> S-expression. ?E.g.:
>
> ?type t = { foo : int sexp_default(42) } with sexp
>
> In this definition "foo" will default to "42" if the S-expression does
> not specify "foo". ?Any valid OCaml-expression is allowed within the
> parentheses, including variables and even function calls. ?When such a
> record is converted to an S-expression, the normal behavior is to
> always emit the field, no matter whether it is equivalent to the
> default or not. ?The reason is that unlike "sexp_list", "sexp_array",
> etc., it may not be obvious to the reader of an S-expression what the
> default may be.
>
> If, however, default fields should be excluded from the conversion,
> e.g. to generate a minimal default configuration file for later
> refinement, the following is supported (note the exclamation mark at
> the end):
>
> ?type t = { foo : int sexp_default(42)! } with sexp
>
> Using manifest types, developers can easily generate equivalent
> instantiations of a record type with different conversion behavior.
> E.g.:
>
> ? ?type drop_foo_default = t = { foo : int sexp_default(foo)! } with sexp
>
> This way different "default views" could be emitted for a given record.
>
> Using manifest types together with module functors and maybe
> first-class modules to do this dynamically for large numbers of
> instantiations, one can also easily generate numerous default
> converters for different contexts. ?E.g.:
>
> ?module Make (Defaults : sig val default : t end) = struct
> ? ?type s = t = { foo : int sexp_default(Defaults.default.foo) } with sexp
> ?end
>
> Some wizardry with modules and manifest types provides for almost
> unlimited power for providing defaults and configuring how they are
> emitted.
>
> Let me know if this patch would likely be accepted or if there are any
> suggestions for improvement, and I'll push it to my fork of OCaml
> Core.
>
> Regards,
> Markus
>
> --
> Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From markus.mottl at gmail.com  Fri Mar 30 21:25:01 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Fri, 30 Mar 2012 16:25:01 -0400
Subject: sexp_default
In-Reply-To: <CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>
References: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
	<CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>
Message-ID: <CAP_800r3W-rKR2RjUnaaVPDJyU3G+whvoCyGnssiWd8CJ1YWsA@mail.gmail.com>


On Fri, Mar 30, 2012 at 15:45, Yaron Minsky <yminsky at janestreet.com> wrote:
> I am a little worried about the semantics of !, though. ?If I create a type:
>
> ? ?type t = { foo : int sexp_default(7)! } with sexp
>
> then the round-tripping could be pretty weird. ?In particular,
> consider this sequence:
>
> ? { foo = 3 }
> ? |! sexp_of_t ?(* this is () *)
> ? |! t_of_sexp ?(* this is { foo = 7 } *)
>
> This behavior seems pretty unfortunate. ?Is that really what it does?

No, it would consider equivalence to the default expression first to
determine whether to drop the field in the S-expression.  In your case
it would convert the record to ((foo 3)).  If, however, you had used {
foo = 7 }, then it would convert it to () as expected.  Without the !,
it would always emit the field no matter the content.

Due to that equivalence check it is probably not a good idea to use
expensive function calls or gargantuan values as default expressions.
But that doesn't seem necessary in practice anyway.

> As a side note, Markus, if you're working on more patches: please
> don't do merges in the stuff your proposing. ?Yury's conversion code
> doesn't work well on merges. ?(merges purely within your code are
> actually OK, as long as you're not merging in from different points in
> the history that was exported from Jane Street.)

Hm, well, that surely makes it hard to work on the same files, which
would require merges.  As long as we don't tread on each other's feet
that should be possible though.

-- 
Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From yminsky at janestreet.com  Fri Mar 30 21:44:29 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Fri, 30 Mar 2012 16:44:29 -0400
Subject: sexp_default
In-Reply-To: <CAP_800r3W-rKR2RjUnaaVPDJyU3G+whvoCyGnssiWd8CJ1YWsA@mail.gmail.com>
References: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
	<CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>
	<CAP_800r3W-rKR2RjUnaaVPDJyU3G+whvoCyGnssiWd8CJ1YWsA@mail.gmail.com>
Message-ID: <CACLX4jQZW9TX94ohh3XxUa7jGpPCsaV_ObKdWkH2RPTWGOP46g@mail.gmail.com>


On Fri, Mar 30, 2012 at 4:25 PM, Markus Mottl <markus.mottl at gmail.com> wrote:
> On Fri, Mar 30, 2012 at 15:45, Yaron Minsky <yminsky at janestreet.com> wrote:
>> I am a little worried about the semantics of !, though. ?If I create a type:
>>
>> ? ?type t = { foo : int sexp_default(7)! } with sexp
>>
>> then the round-tripping could be pretty weird. ?In particular,
>> consider this sequence:
>>
>> ? { foo = 3 }
>> ? |! sexp_of_t ?(* this is () *)
>> ? |! t_of_sexp ?(* this is { foo = 7 } *)
>>
>> This behavior seems pretty unfortunate. ?Is that really what it does?
>
> No, it would consider equivalence to the default expression first to
> determine whether to drop the field in the S-expression. ?In your case
> it would convert the record to ((foo 3)). ?If, however, you had used {
> foo = 7 }, then it would convert it to () as expected. ?Without the !,
> it would always emit the field no matter the content.
>
> Due to that equivalence check it is probably not a good idea to use
> expensive function calls or gargantuan values as default expressions.
> But that doesn't seem necessary in practice anyway.

Got it.  Is the equality check based on polymorphic compare, or
equality of the s-expression representation?

>> As a side note, Markus, if you're working on more patches: please
>> don't do merges in the stuff your proposing. ?Yury's conversion code
>> doesn't work well on merges. ?(merges purely within your code are
>> actually OK, as long as you're not merging in from different points in
>> the history that was exported from Jane Street.)
>
> Hm, well, that surely makes it hard to work on the same files, which
> would require merges. ?As long as we don't tread on each other's feet
> that should be possible though.

Yeah, we'll have to figure it out over time.  I think right now one
can do all the merging one wants, subject to the constraint that all
the work is anchored to the same spot in our HG repo.  But the
simplest use-case is just linear histories.  Right now Yury is
manually dealing with the conversion of the revisions we've pulled in
so far, which is kind of painful.

> --
> Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From markus.mottl at gmail.com  Fri Mar 30 21:57:26 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Fri, 30 Mar 2012 16:57:26 -0400
Subject: sexp_default
In-Reply-To: <CACLX4jQZW9TX94ohh3XxUa7jGpPCsaV_ObKdWkH2RPTWGOP46g@mail.gmail.com>
References: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
	<CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>
	<CAP_800r3W-rKR2RjUnaaVPDJyU3G+whvoCyGnssiWd8CJ1YWsA@mail.gmail.com>
	<CACLX4jQZW9TX94ohh3XxUa7jGpPCsaV_ObKdWkH2RPTWGOP46g@mail.gmail.com>
Message-ID: <CAP_800os1P_OnUCCBAhQXFRf0c6vp+MoaYzhaDA0Q_DCfVGEbQ@mail.gmail.com>


On Fri, Mar 30, 2012 at 16:44, Yaron Minsky <yminsky at janestreet.com> wrote:
> On Fri, Mar 30, 2012 at 4:25 PM, Markus Mottl <markus.mottl at gmail.com> wrote:
>> Due to that equivalence check it is probably not a good idea to use
>> expensive function calls or gargantuan values as default expressions.
>> But that doesn't seem necessary in practice anyway.
>
> Got it. ?Is the equality check based on polymorphic compare, or
> equality of the s-expression representation?

Polymorphic equality, which seems preferable for efficiency.  Neither
it nor equality of S-expressions is guaranteed to work on abstract
datatypes anyway.

> Yeah, we'll have to figure it out over time. ?I think right now one
> can do all the merging one wants, subject to the constraint that all
> the work is anchored to the same spot in our HG repo. ?But the
> simplest use-case is just linear histories. ?Right now Yury is
> manually dealing with the conversion of the revisions we've pulled in
> so far, which is kind of painful.

Ok, I'll not merge your tree into the one from which I push in the future.

-- 
Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From yminsky at janestreet.com  Fri Mar 30 22:28:03 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Fri, 30 Mar 2012 17:28:03 -0400
Subject: sexp_default
In-Reply-To: <CAP_800os1P_OnUCCBAhQXFRf0c6vp+MoaYzhaDA0Q_DCfVGEbQ@mail.gmail.com>
References: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
	<CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>
	<CAP_800r3W-rKR2RjUnaaVPDJyU3G+whvoCyGnssiWd8CJ1YWsA@mail.gmail.com>
	<CACLX4jQZW9TX94ohh3XxUa7jGpPCsaV_ObKdWkH2RPTWGOP46g@mail.gmail.com>
	<CAP_800os1P_OnUCCBAhQXFRf0c6vp+MoaYzhaDA0Q_DCfVGEbQ@mail.gmail.com>
Message-ID: <CACLX4jQbkDNS+sbU8BndJ8rL+5JBX94Umm+9uODox7VVfunZhw@mail.gmail.com>


On Fri, Mar 30, 2012 at 4:57 PM, Markus Mottl <markus.mottl at gmail.com> wrote:
> On Fri, Mar 30, 2012 at 16:44, Yaron Minsky <yminsky at janestreet.com> wrote:
>> On Fri, Mar 30, 2012 at 4:25 PM, Markus Mottl <markus.mottl at gmail.com> wrote:
>>> Due to that equivalence check it is probably not a good idea to use
>>> expensive function calls or gargantuan values as default expressions.
>>> But that doesn't seem necessary in practice anyway.
>>
>> Got it. ?Is the equality check based on polymorphic compare, or
>> equality of the s-expression representation?
>
> Polymorphic equality, which seems preferable for efficiency. ?Neither
> it nor equality of S-expressions is guaranteed to work on abstract
> datatypes anyway.

Hrm.  The polymorphic equality thing makes me a little sick  --- we're
actually trying to avoid polymorphic compare wherever we can these
days, for both performance and semantic reasons.  Is there a reason it
can't use comparison of s-expressions?  I don't think efficiency is a
primary concern here, since this is already fairly slow
pretty-printing code.

>> Yeah, we'll have to figure it out over time. ?I think right now one
>> can do all the merging one wants, subject to the constraint that all
>> the work is anchored to the same spot in our HG repo. ?But the
>> simplest use-case is just linear histories. ?Right now Yury is
>> manually dealing with the conversion of the revisions we've pulled in
>> so far, which is kind of painful.
>
> Ok, I'll not merge your tree into the one from which I push in the future.
>
> --
> Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From markus.mottl at gmail.com  Fri Mar 30 23:09:37 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Fri, 30 Mar 2012 18:09:37 -0400
Subject: sexp_default
In-Reply-To: <CACLX4jQbkDNS+sbU8BndJ8rL+5JBX94Umm+9uODox7VVfunZhw@mail.gmail.com>
References: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
	<CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>
	<CAP_800r3W-rKR2RjUnaaVPDJyU3G+whvoCyGnssiWd8CJ1YWsA@mail.gmail.com>
	<CACLX4jQZW9TX94ohh3XxUa7jGpPCsaV_ObKdWkH2RPTWGOP46g@mail.gmail.com>
	<CAP_800os1P_OnUCCBAhQXFRf0c6vp+MoaYzhaDA0Q_DCfVGEbQ@mail.gmail.com>
	<CACLX4jQbkDNS+sbU8BndJ8rL+5JBX94Umm+9uODox7VVfunZhw@mail.gmail.com>
Message-ID: <CAP_800r81mhsuYsDKsWFqw7gUmHfYQdfhZVDExhjj4vEiwc3MA@mail.gmail.com>


On Fri, Mar 30, 2012 at 17:28, Yaron Minsky <yminsky at janestreet.com> wrote:
> Hrm. ?The polymorphic equality thing makes me a little sick ?--- we're
> actually trying to avoid polymorphic compare wherever we can these
> days, for both performance and semantic reasons. ?Is there a reason it
> can't use comparison of s-expressions? ?I don't think efficiency is a
> primary concern here, since this is already fairly slow
> pretty-printing code.

I guess nobody is fully satisfied with polymorphic equality in
general.  I'm not sure there is any true gain in comparing
S-expressions.  One could imagine that some S-expression converters
normalize the representation so that e.g. sets, maps, etc., would
compare consistently, but this is not a given (e.g. hashtables).
Furthermore, in the vast majority of cases we would needlessly convert
a value to an S-expression just for equality checking even though it
need not be emitted in the first place - a rather expensive default
behavior.

The only consistent solution I can see is if the user can optionally
specify an equivalence relation, e.g. by having another optional
expression that contains such a function.  But this could turn out to
be extremely expensive: think of comparing hashtables.

Default field values are probably hardly ever changed back and forth
at runtime, especially in ways that would destroy pointer equality or
worse to a structurally distinct but semantically equivalent
representation.  Polymorphic equality checks would therefore almost
always just compare two identical pointers anyway, which is both
consistent and maximally efficient.  Even if a field were emitted that
need not be, this should never cause any issues other than diminished
output readability.

I'd therefore suggest to use polymorphic equality for the while being.
 If it really turns out to cause issues in practice, you can always
add the mentioned optional equality function later.

-- 
Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From jim.clune at gmail.com  Sat Mar 31 10:31:54 2012
From: jim.clune at gmail.com (Jim Clune)
Date: Sat, 31 Mar 2012 05:31:54 -0400
Subject: sexp_default
In-Reply-To: <CAP_800r81mhsuYsDKsWFqw7gUmHfYQdfhZVDExhjj4vEiwc3MA@mail.gmail.com>
References: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
	<CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>
	<CAP_800r3W-rKR2RjUnaaVPDJyU3G+whvoCyGnssiWd8CJ1YWsA@mail.gmail.com>
	<CACLX4jQZW9TX94ohh3XxUa7jGpPCsaV_ObKdWkH2RPTWGOP46g@mail.gmail.com>
	<CAP_800os1P_OnUCCBAhQXFRf0c6vp+MoaYzhaDA0Q_DCfVGEbQ@mail.gmail.com>
	<CACLX4jQbkDNS+sbU8BndJ8rL+5JBX94Umm+9uODox7VVfunZhw@mail.gmail.com>
	<CAP_800r81mhsuYsDKsWFqw7gUmHfYQdfhZVDExhjj4vEiwc3MA@mail.gmail.com>
Message-ID: <CAOZm+Pny2wN084hzXczt7J=RDiQCoz4uFSsJ2P0MhyARbuNseg@mail.gmail.com>


Hi, Markus. Your proposal is interesting, but I'm a little concerned
about this part:

> Using manifest types, developers can easily generate equivalent
> instantiations of a record type with different conversion behavior.
> E.g.:
>
>    type drop_foo_default = t = { foo : int sexp_default(foo)! } with sexp
>
> This way different "default views" could be emitted for a given record.

It is not clear to me whether this is best construed as a feature or a
bug. It seems to encourage people to make type-equivalences that have
sexp representations that can be generated by one type and parsed by
an "equivalent" type that has silently incompatible semantics. This,
combined with the fact that sexp representations do not embed the name
of the types or modules that generated them, looks to me to like a
recipe for bugs.

Do you consider this facilitation of different "default views" to be
an important aspect of the proposal? Or is there a milder version of
the proposal that does not have this feature?

- Jim


From yminsky at janestreet.com  Sat Mar 31 12:50:21 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Sat, 31 Mar 2012 07:50:21 -0400
Subject: sexp_default
In-Reply-To: <CAP_800r81mhsuYsDKsWFqw7gUmHfYQdfhZVDExhjj4vEiwc3MA@mail.gmail.com>
References: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
	<CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>
	<CAP_800r3W-rKR2RjUnaaVPDJyU3G+whvoCyGnssiWd8CJ1YWsA@mail.gmail.com>
	<CACLX4jQZW9TX94ohh3XxUa7jGpPCsaV_ObKdWkH2RPTWGOP46g@mail.gmail.com>
	<CAP_800os1P_OnUCCBAhQXFRf0c6vp+MoaYzhaDA0Q_DCfVGEbQ@mail.gmail.com>
	<CACLX4jQbkDNS+sbU8BndJ8rL+5JBX94Umm+9uODox7VVfunZhw@mail.gmail.com>
	<CAP_800r81mhsuYsDKsWFqw7gUmHfYQdfhZVDExhjj4vEiwc3MA@mail.gmail.com>
Message-ID: <CACLX4jQDYugo6mLJY8+oegG9YMHDa9CZ51+JUtR-NxY7N=5GpA@mail.gmail.com>


On Fri, Mar 30, 2012 at 6:09 PM, Markus Mottl <markus.mottl at gmail.com> wrote:
> On Fri, Mar 30, 2012 at 17:28, Yaron Minsky <yminsky at janestreet.com> wrote:
>> Hrm. ?The polymorphic equality thing makes me a little sick ?--- we're
>> actually trying to avoid polymorphic compare wherever we can these
>> days, for both performance and semantic reasons. ?Is there a reason it
>> can't use comparison of s-expressions? ?I don't think efficiency is a
>> primary concern here, since this is already fairly slow
>> pretty-printing code.
>
> I guess nobody is fully satisfied with polymorphic equality in
> general. ?I'm not sure there is any true gain in comparing
> S-expressions. ?One could imagine that some S-expression converters
> normalize the representation so that e.g. sets, maps, etc., would
> compare consistently, but this is not a given (e.g. hashtables).
> Furthermore, in the vast majority of cases we would needlessly convert
> a value to an S-expression just for equality checking even though it
> need not be emitted in the first place - a rather expensive default
> behavior.

Fair.

> The only consistent solution I can see is if the user can optionally
> specify an equivalence relation, e.g. by having another optional
> expression that contains such a function. ?But this could turn out to
> be extremely expensive: think of comparing hashtables.
>
> Default field values are probably hardly ever changed back and forth
> at runtime, especially in ways that would destroy pointer equality or
> worse to a structurally distinct but semantically equivalent
> representation. ?Polymorphic equality checks would therefore almost
> always just compare two identical pointers anyway, which is both
> consistent and maximally efficient. ?Even if a field were emitted that
> need not be, this should never cause any issues other than diminished
> output readability.
>
> I'd therefore suggest to use polymorphic equality for the while being.
> ?If it really turns out to cause issues in practice, you can always
> add the mentioned optional equality function later.

That sounds pretty reasonable.  Another option would be to use
physical equality, which would have the property that if you left the
default unmodified, it would work, but otherwise would re-output the
value.  That's got its own set of surprising issues as well, though.

y


From yminsky at janestreet.com  Sat Mar 31 12:53:32 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Sat, 31 Mar 2012 07:53:32 -0400
Subject: sexp_default
In-Reply-To: <CAOZm+Pny2wN084hzXczt7J=RDiQCoz4uFSsJ2P0MhyARbuNseg@mail.gmail.com>
References: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
	<CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>
	<CAP_800r3W-rKR2RjUnaaVPDJyU3G+whvoCyGnssiWd8CJ1YWsA@mail.gmail.com>
	<CACLX4jQZW9TX94ohh3XxUa7jGpPCsaV_ObKdWkH2RPTWGOP46g@mail.gmail.com>
	<CAP_800os1P_OnUCCBAhQXFRf0c6vp+MoaYzhaDA0Q_DCfVGEbQ@mail.gmail.com>
	<CACLX4jQbkDNS+sbU8BndJ8rL+5JBX94Umm+9uODox7VVfunZhw@mail.gmail.com>
	<CAP_800r81mhsuYsDKsWFqw7gUmHfYQdfhZVDExhjj4vEiwc3MA@mail.gmail.com>
	<CAOZm+Pny2wN084hzXczt7J=RDiQCoz4uFSsJ2P0MhyARbuNseg@mail.gmail.com>
Message-ID: <CACLX4jRGqMtLsNKt_gqFsbmd+L6TKMY+bWemg__ov0g0BLJGZg@mail.gmail.com>


I think of this kind of multiple-view trick as pretty standard.  We
use this internally quite a bit when we want to generate an alternate
view without creating a new type.  We just create a new type-alias,
and attach the specialized converters to that type.

I guess I'm just saying I'm in the "feature, not bug" camp.  That
said, I'm not sure what you mean when you talk about "silently
incompatible semantics".  Can you create a toy example of the kind of
bug you're concerned about?

y

On Sat, Mar 31, 2012 at 5:31 AM, Jim Clune <jim.clune at gmail.com> wrote:
> Hi, Markus. Your proposal is interesting, but I'm a little concerned
> about this part:
>
>> Using manifest types, developers can easily generate equivalent
>> instantiations of a record type with different conversion behavior.
>> E.g.:
>>
>> ? ?type drop_foo_default = t = { foo : int sexp_default(foo)! } with sexp
>>
>> This way different "default views" could be emitted for a given record.
>
> It is not clear to me whether this is best construed as a feature or a
> bug. It seems to encourage people to make type-equivalences that have
> sexp representations that can be generated by one type and parsed by
> an "equivalent" type that has silently incompatible semantics. This,
> combined with the fact that sexp representations do not embed the name
> of the types or modules that generated them, looks to me to like a
> recipe for bugs.
>
> Do you consider this facilitation of different "default views" to be
> an important aspect of the proposal? Or is there a milder version of
> the proposal that does not have this feature?
>
> - Jim


From jim.clune at gmail.com  Sat Mar 31 20:16:52 2012
From: jim.clune at gmail.com (Jim Clune)
Date: Sat, 31 Mar 2012 15:16:52 -0400
Subject: sexp_default
In-Reply-To: <CACLX4jRGqMtLsNKt_gqFsbmd+L6TKMY+bWemg__ov0g0BLJGZg@mail.gmail.com>
References: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
	<CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>
	<CAP_800r3W-rKR2RjUnaaVPDJyU3G+whvoCyGnssiWd8CJ1YWsA@mail.gmail.com>
	<CACLX4jQZW9TX94ohh3XxUa7jGpPCsaV_ObKdWkH2RPTWGOP46g@mail.gmail.com>
	<CAP_800os1P_OnUCCBAhQXFRf0c6vp+MoaYzhaDA0Q_DCfVGEbQ@mail.gmail.com>
	<CACLX4jQbkDNS+sbU8BndJ8rL+5JBX94Umm+9uODox7VVfunZhw@mail.gmail.com>
	<CAP_800r81mhsuYsDKsWFqw7gUmHfYQdfhZVDExhjj4vEiwc3MA@mail.gmail.com>
	<CAOZm+Pny2wN084hzXczt7J=RDiQCoz4uFSsJ2P0MhyARbuNseg@mail.gmail.com>
	<CACLX4jRGqMtLsNKt_gqFsbmd+L6TKMY+bWemg__ov0g0BLJGZg@mail.gmail.com>
Message-ID: <CAOZm+P=dr6HDGP1NER+DA-TRReiAZ-_a+tacC3c9XyxB_wmOTQ@mail.gmail.com>


Perhaps I shouldn't have used the word "semantics". Here is an example
of what I mean:

module A = struct
  type t = {
    guest : string;
    food : string sexp_default("steak")!;
  } with sexp
end

module B = struct
  type t = A.t = {
    guest : string;
    food : string sexp_default("fish");
  } with sexp
end

  let () =
    let original = { A.
      guest = "Bob";
      food = "steak";
    } in
    let x = B.t_of_sexp (A.sexp_of_t original) in
    printf "%s ordered %s\n" x.A.guest x.A.food

If I understand the proposal correctly, this will say that Bob ordered
fish even though he originally ordered steak. Obviously, one can write
custom sexp converters to get this behavior already. I'm just
questioning the desirability of having this be easy.

- Jim

On Sat, Mar 31, 2012 at 7:53 AM, Yaron Minsky <yminsky at janestreet.com> wrote:
> I think of this kind of multiple-view trick as pretty standard. ?We
> use this internally quite a bit when we want to generate an alternate
> view without creating a new type. ?We just create a new type-alias,
> and attach the specialized converters to that type.
>
> I guess I'm just saying I'm in the "feature, not bug" camp. ?That
> said, I'm not sure what you mean when you talk about "silently
> incompatible semantics". ?Can you create a toy example of the kind of
> bug you're concerned about?
>
> y
>
> On Sat, Mar 31, 2012 at 5:31 AM, Jim Clune <jim.clune at gmail.com> wrote:
>> Hi, Markus. Your proposal is interesting, but I'm a little concerned
>> about this part:
>>
>>> Using manifest types, developers can easily generate equivalent
>>> instantiations of a record type with different conversion behavior.
>>> E.g.:
>>>
>>> ? ?type drop_foo_default = t = { foo : int sexp_default(foo)! } with sexp
>>>
>>> This way different "default views" could be emitted for a given record.
>>
>> It is not clear to me whether this is best construed as a feature or a
>> bug. It seems to encourage people to make type-equivalences that have
>> sexp representations that can be generated by one type and parsed by
>> an "equivalent" type that has silently incompatible semantics. This,
>> combined with the fact that sexp representations do not embed the name
>> of the types or modules that generated them, looks to me to like a
>> recipe for bugs.
>>
>> Do you consider this facilitation of different "default views" to be
>> an important aspect of the proposal? Or is there a milder version of
>> the proposal that does not have this feature?
>>
>> - Jim


From markus.mottl at gmail.com  Sat Mar 31 20:25:38 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Sat, 31 Mar 2012 15:25:38 -0400
Subject: sexp_default
In-Reply-To: <CAOZm+Pny2wN084hzXczt7J=RDiQCoz4uFSsJ2P0MhyARbuNseg@mail.gmail.com>
References: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
	<CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>
	<CAP_800r3W-rKR2RjUnaaVPDJyU3G+whvoCyGnssiWd8CJ1YWsA@mail.gmail.com>
	<CACLX4jQZW9TX94ohh3XxUa7jGpPCsaV_ObKdWkH2RPTWGOP46g@mail.gmail.com>
	<CAP_800os1P_OnUCCBAhQXFRf0c6vp+MoaYzhaDA0Q_DCfVGEbQ@mail.gmail.com>
	<CACLX4jQbkDNS+sbU8BndJ8rL+5JBX94Umm+9uODox7VVfunZhw@mail.gmail.com>
	<CAP_800r81mhsuYsDKsWFqw7gUmHfYQdfhZVDExhjj4vEiwc3MA@mail.gmail.com>
	<CAOZm+Pny2wN084hzXczt7J=RDiQCoz4uFSsJ2P0MhyARbuNseg@mail.gmail.com>
Message-ID: <CAP_800qRswhg2R7RqX-uMS2EDcXiCxKAUamZzQNaAk-szaQ_uw@mail.gmail.com>


On Sat, Mar 31, 2012 at 05:31, Jim Clune <jim.clune at gmail.com> wrote:
> Hi, Markus. Your proposal is interesting, but I'm a little concerned
> about this part:
>
>> Using manifest types, developers can easily generate equivalent
>> instantiations of a record type with different conversion behavior.
>> E.g.:
>>
>> ? ?type drop_foo_default = t = { foo : int sexp_default(foo)! } with sexp
>>
>> This way different "default views" could be emitted for a given record.
>
> It is not clear to me whether this is best construed as a feature or a
> bug. It seems to encourage people to make type-equivalences that have
> sexp representations that can be generated by one type and parsed by
> an "equivalent" type that has silently incompatible semantics. This,
> combined with the fact that sexp representations do not embed the name
> of the types or modules that generated them, looks to me to like a
> recipe for bugs.

S-expressions are generally just structural.  There is no type
associated with any of them.  Nothing will prevent you from converting
an S-expression to a different type than the one it originated from as
long as the value is compatible in structure.  The same is true of the
binary protocol and the OCaml marshaling module btw.  If you need
guarantees about the originating type of such a value, you as a
developer need to take care of that.  E.g. by "nominal typing", i.e.
you annotate the value with an unambiguous identifier of its
originating type.  Or by more advanced structural matching that
requires that the originating type can be unified with the destination
type.  This would require storing the type-specification along with
the value.

The above discussion of "views" is somewhat unrelated to this.  All
views should really be equivalent.  It's more about what kind of
information should be revealed.  E.g. if a program raises an exception
and needs to show its user-supplied configuration for debugging
purposes, you may want to emit all record fields, because sometimes
the bug may be that the user had incorrect assumptions of what the
default is.  In other cases you might want to ask a process to
generate a minimal configuration file that reflects its current state.
 Leaving out default values would then make these configurations much
shorter and readable.  That's what I mean by "views".

> Do you consider this facilitation of different "default views" to be
> an important aspect of the proposal? Or is there a milder version of
> the proposal that does not have this feature?

There is no facilitation of "default views" in my proposal.  The macro
merely allows you to define defaults for record fields.  There is
nothing I can do to prevent users from using (or abusing) it by
combining it with features of the type and module system.  The
examples (e.g. views) I mentioned merely show potential use cases
where this feature can be creatively employed.

-- 
Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From markus.mottl at gmail.com  Sat Mar 31 20:35:21 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Sat, 31 Mar 2012 15:35:21 -0400
Subject: sexp_default
In-Reply-To: <CAOZm+P=dr6HDGP1NER+DA-TRReiAZ-_a+tacC3c9XyxB_wmOTQ@mail.gmail.com>
References: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
	<CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>
	<CAP_800r3W-rKR2RjUnaaVPDJyU3G+whvoCyGnssiWd8CJ1YWsA@mail.gmail.com>
	<CACLX4jQZW9TX94ohh3XxUa7jGpPCsaV_ObKdWkH2RPTWGOP46g@mail.gmail.com>
	<CAP_800os1P_OnUCCBAhQXFRf0c6vp+MoaYzhaDA0Q_DCfVGEbQ@mail.gmail.com>
	<CACLX4jQbkDNS+sbU8BndJ8rL+5JBX94Umm+9uODox7VVfunZhw@mail.gmail.com>
	<CAP_800r81mhsuYsDKsWFqw7gUmHfYQdfhZVDExhjj4vEiwc3MA@mail.gmail.com>
	<CAOZm+Pny2wN084hzXczt7J=RDiQCoz4uFSsJ2P0MhyARbuNseg@mail.gmail.com>
	<CACLX4jRGqMtLsNKt_gqFsbmd+L6TKMY+bWemg__ov0g0BLJGZg@mail.gmail.com>
	<CAOZm+P=dr6HDGP1NER+DA-TRReiAZ-_a+tacC3c9XyxB_wmOTQ@mail.gmail.com>
Message-ID: <CAP_800pGD29uE=kASrekTCXSq+uhm5USZwEgO-aVVEo0DPA9UA@mail.gmail.com>


On Sat, Mar 31, 2012 at 15:16, Jim Clune <jim.clune at gmail.com> wrote:
> Perhaps I shouldn't have used the word "semantics". Here is an example
> of what I mean:
>
> module A = struct
> ?type t = {
> ? ?guest : string;
> ? ?food : string sexp_default("steak")!;
> ?} with sexp
> end
>
> module B = struct
> ?type t = A.t = {
> ? ?guest : string;
> ? ?food : string sexp_default("fish");
> ?} with sexp
> end
>
> ?let () =
> ? ?let original = { A.
> ? ? ?guest = "Bob";
> ? ? ?food = "steak";
> ? ?} in
> ? ?let x = B.t_of_sexp (A.sexp_of_t original) in
> ? ?printf "%s ordered %s\n" x.A.guest x.A.food
>
> If I understand the proposal correctly, this will say that Bob ordered
> fish even though he originally ordered steak. Obviously, one can write
> custom sexp converters to get this behavior already. I'm just
> questioning the desirability of having this be easy.

There is no reasonable way for me to prevent users from shooting
themselves in the foot.  Manifest types need to be supported,
otherwise you wouldn't be able to e.g. automatically generate
S-expression converters for concrete types in external libraries that
don't use sexplib.  I cannot easily test whether anybody uses this
feature to generate incompatible defaults in equivalent types.  In
fact, one can imagine scenarios where different defaults are even
intentional.

-- 
Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From yminsky at janestreet.com  Thu Mar  1 01:35:19 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Wed, 29 Feb 2012 20:35:19 -0500
Subject: pa_ounit outside of Core
In-Reply-To: <20120229114339.GB17748@dark.recoil.org>
References: <20120229114339.GB17748@dark.recoil.org>
Message-ID: <CACLX4jSAnwXbp-zaC1uHW3cu+UZJ+PbNfj2Lt5vo6Qp2AxVkAQ@mail.gmail.com>

We should definitely merge together Tills' version with ours.  I don't know
any reason for them to deviate.

We should also release a version of our OMakeroot.  It has lots of useful
goodies.  We've talked about that before and not done it.  The real barrier
is I suspect it will take some work to get it working with the bitbucket
tree, and it has lots of internal-only bits and bobs.

But I think we can get a cleaned up version to email out to the mailing
list, so people can look it over and scavenge from it, in any case.

On Wed, Feb 29, 2012 at 6:43 AM, Anil Madhavapeddy <anil at recoil.org> wrote:

> I ran across Till's very-useful pa_ounit, and would really like to use
> this in our libraries to make adding oUnit tests easier.  There seem to be
> two different versions; the Github one at:
> https://github.com/till-varoquaux/pa_ounit
> ...and the version in the Core distribution.
>
> I've integrated the Core one pretty easily into some of our local
> libraries, and tests are generated as expected. However, the OMake rules
> for extracting and collecting the tests into an executable don't seem to
> be present in the distribution.
>
> What I'd like to do is to only generate the tests during a testing build,
> and for production use have them disappear from the installed binary or
> library. However, there doesn't appear to be a switch in pa_ounit.ml to
> ignore the extra keywords. Do existing pa_ounit consumers just compile the
> tests in with the final library at the moment?
>

We actually put our tests into the production build, but they only execute
in the unit tests.  The code bloat is small enough for us not to worry
about it.  More work would be required from the syntax extension to make
that work, and you'd have to coordinate having multiple builds, which is
tricky.


> (More generally, the topic of multiple camlp4 options is quite tricky, as
> the same situation exists with pa_lwt generating debug code for mapping
> Lwt threads to backtraces, and it's hard to keep track of what modules
> were built with some set of p4 options).


Agreed.  it's tricky stuff.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120229/b04dbed6/attachment-0001.html>

From ernstmartinj at gmail.com  Sat Mar  3 16:13:27 2012
From: ernstmartinj at gmail.com (Martin Jacobsson)
Date: Sat, 3 Mar 2012 08:13:27 -0800 (PST)
Subject: Error loading core (godi version) in toplevel.
Message-ID: <26770582.20.1330791207972.JavaMail.geo-discussion-forums@vbfl9>

Hello, I'm trying to load core using the toplevel using topfind. The 
version is the current one installed by godi (107.01).
core.cma fails with error message

Error: Reference to undefined global `Condition'

Running OS X lion and OCaml 3.12.1

/Martin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120303/c9904700/attachment-0001.html>

From ernstmartinj at gmail.com  Sat Mar  3 16:19:41 2012
From: ernstmartinj at gmail.com (Martin Jacobsson)
Date: Sat, 3 Mar 2012 08:19:41 -0800 (PST)
Subject: Error loading core (godi version) in toplevel.
In-Reply-To: <26770582.20.1330791207972.JavaMail.geo-discussion-forums@vbfl9>
References: <26770582.20.1330791207972.JavaMail.geo-discussion-forums@vbfl9>
Message-ID: <21029258.857.1330791581560.JavaMail.geo-discussion-forums@vbkl3>

Nothing to see here... I had forgotten to enable threads.

/M

On Saturday, March 3, 2012 5:13:27 PM UTC+1, Martin Jacobsson wrote:
>
> Hello, I'm trying to load core using the toplevel using topfind. The 
> version is the current one installed by godi (107.01).
> core.cma fails with error message
>
> Error: Reference to undefined global `Condition'
>
> Running OS X lion and OCaml 3.12.1
>
> /Martin
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120303/7f97b298/attachment-0001.html>

From anil at recoil.org  Mon Mar  5 00:00:11 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Mon, 5 Mar 2012 00:00:11 +0000
Subject: pa_ounit outside of Core
In-Reply-To: <CACLX4jSAnwXbp-zaC1uHW3cu+UZJ+PbNfj2Lt5vo6Qp2AxVkAQ@mail.gmail.com>
References: <20120229114339.GB17748@dark.recoil.org>
 <CACLX4jSAnwXbp-zaC1uHW3cu+UZJ+PbNfj2Lt5vo6Qp2AxVkAQ@mail.gmail.com>
Message-ID: <20120305000011.GB4178@dark.recoil.org>


On Wed, Feb 29, 2012 at 08:35:19PM -0500, Yaron Minsky wrote:
> We should definitely merge together Tills' version with ours.  I don't know
> any reason for them to deviate.
> 
> We should also release a version of our OMakeroot.  It has lots of useful
> goodies.  We've talked about that before and not done it.  The real barrier
> is I suspect it will take some work to get it working with the bitbucket
> tree, and it has lots of internal-only bits and bobs.

I'd certainly be interested in seeing snippets; the specific OMakefiles
would likely have to be ported to ocamlbuild to work with OASIS, so having
the whole thing released probably isn't worth the effort.

> We actually put our tests into the production build, but they only execute
> in the unit tests.  The code bloat is small enough for us not to worry
> about it.  More work would be required from the syntax extension to make
> that work, and you'd have to coordinate having multiple builds, which is
> tricky.

Thanks for confirming. I'll poke and prod ocamlbuild next week to see if I
can convince it to not include the code.

-- 
Anil Madhavapeddy                                 http://anil.recoil.org


From linshuai2012 at gmail.com  Wed Mar  7 04:04:27 2012
From: linshuai2012 at gmail.com (lins05)
Date: Tue, 6 Mar 2012 20:04:27 -0800 (PST)
Subject: Hints on building with Core
In-Reply-To: <CACLX4jTJ2HGphx-9y1U=O90rGG2PWR2DCOe6RkU_Whw7zmOuSA@mail.gmail.com>
References: <CACLX4jTJ2HGphx-9y1U=O90rGG2PWR2DCOe6RkU_Whw7zmOuSA@mail.gmail.com>
Message-ID: <17153699.2923.1331093067637.JavaMail.geo-discussion-forums@pbcvy9>

It has been long since I built core last time. I'll check it out later 
today.

? 2012?3?7????UTC+8??10?42?09??Yaron Minsky???
>
> I've been playing around with Core on my home machine, and have extended 
> the installation document just a bit.  Take a look here:
>
>    https://bitbucket.org/yminsky/ocaml-core/wiki/InstallationHints
>
> I just given an example of a working _tags file for ocamlbuild and a 
> .ocamlinit file for working in the toplevel.  Also, use oasis-0.3.0-rc2 
> if you want to get working native-code builds.
>
> We're also closing in on a proper release, with tarballs and everything. 
>  The tarballs should be considerably easier to install, and in particular 
> should not require a separate install of Oasis.
>
> y
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120306/363f7815/attachment-0001.html>

From yminsky at janestreet.com  Wed Mar  7 02:42:09 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Tue, 6 Mar 2012 21:42:09 -0500
Subject: Hints on building with Core
Message-ID: <CACLX4jTJ2HGphx-9y1U=O90rGG2PWR2DCOe6RkU_Whw7zmOuSA@mail.gmail.com>

I've been playing around with Core on my home machine, and have extended
the installation document just a bit.  Take a look here:

   https://bitbucket.org/yminsky/ocaml-core/wiki/InstallationHints

I just given an example of a working _tags file for ocamlbuild and a
.ocamlinit file for working in the toplevel.  Also, use oasis-0.3.0-rc2 if
you want to get working native-code builds.

We're also closing in on a proper release, with tarballs and everything.
 The tarballs should be considerably easier to install, and in particular
should not require a separate install of Oasis.

y
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120306/0304dc89/attachment-0001.html>

From yminsky at janestreet.com  Wed Mar  7 22:40:10 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Wed, 7 Mar 2012 17:40:10 -0500
Subject: Licensing
Message-ID: <CACLX4jS7TwoszkbM1__-izpfsB6JJaA6KAbSK2CGBiZdMUn4Jg@mail.gmail.com>

We've made some moves on the licensing front.

First, we've decided to relicense the Core suite under the Apache license.

Second, we now have CLA's set up (contributor license agreements), which
we'd like anyone who wants to contribute patches to sign and email that
document to us.  Then we can start accepting serious incoming patches!

Finally, we hope to create tarballs for a blessed release in the next few
days, now that our internal code review process is complete.

Cheers,
y
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120307/1868c94e/attachment-0001.html>

From sweeks at sweeks.com  Wed Mar  7 23:02:52 2012
From: sweeks at sweeks.com (Stephen Weeks)
Date: Wed, 7 Mar 2012 18:02:52 -0500
Subject: Licensing
In-Reply-To: <CACLX4jS7TwoszkbM1__-izpfsB6JJaA6KAbSK2CGBiZdMUn4Jg@mail.gmail.com>
References: <CACLX4jS7TwoszkbM1__-izpfsB6JJaA6KAbSK2CGBiZdMUn4Jg@mail.gmail.com>
Message-ID: <CAJsFioV9zHAEy0i08GnsCCvcTn8yLowkEcrAFs=8xbFZfUbZLw@mail.gmail.com>

Where is the CLA?

On Wed, Mar 7, 2012 at 5:40 PM, Yaron Minsky <yminsky at janestreet.com> wrote:

> We've made some moves on the licensing front.
>
> First, we've decided to relicense the Core suite under the Apache license.
>
> Second, we now have CLA's set up (contributor license agreements), which
> we'd like anyone who wants to contribute patches to sign and email that
> document to us.  Then we can start accepting serious incoming patches!
>
> Finally, we hope to create tarballs for a blessed release in the next few
> days, now that our internal code review process is complete.
>
> Cheers,
> y
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120307/e515a26e/attachment-0001.html>

From yminsky at janestreet.com  Wed Mar  7 23:25:42 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Wed, 7 Mar 2012 18:25:42 -0500
Subject: Licensing
In-Reply-To: <CAJsFioV9zHAEy0i08GnsCCvcTn8yLowkEcrAFs=8xbFZfUbZLw@mail.gmail.com>
References: <CACLX4jS7TwoszkbM1__-izpfsB6JJaA6KAbSK2CGBiZdMUn4Jg@mail.gmail.com>
	<CAJsFioV9zHAEy0i08GnsCCvcTn8yLowkEcrAFs=8xbFZfUbZLw@mail.gmail.com>
Message-ID: <CACLX4jQQKTYdpBhJGNo3igOTiwh6p72ujK_e9mSOpHMxJDNhgw@mail.gmail.com>

A fine point!

HTTP://ocaml.janestreet.com/ocaml-contributor-info.html

y
On Mar 7, 2012 6:03 PM, "Stephen Weeks" <sweeks at sweeks.com> wrote:

> Where is the CLA?
>
> On Wed, Mar 7, 2012 at 5:40 PM, Yaron Minsky <yminsky at janestreet.com>wrote:
>
>> We've made some moves on the licensing front.
>>
>> First, we've decided to relicense the Core suite under the Apache license.
>>
>> Second, we now have CLA's set up (contributor license agreements), which
>> we'd like anyone who wants to contribute patches to sign and email that
>> document to us.  Then we can start accepting serious incoming patches!
>>
>> Finally, we hope to create tarballs for a blessed release in the next few
>> days, now that our internal code review process is complete.
>>
>> Cheers,
>> y
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120307/93dd7c44/attachment-0001.html>

From yminsky at janestreet.com  Thu Mar  8 00:25:17 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Wed, 7 Mar 2012 19:25:17 -0500
Subject: Licensing
In-Reply-To: <CACLX4jQQKTYdpBhJGNo3igOTiwh6p72ujK_e9mSOpHMxJDNhgw@mail.gmail.com>
References: <CACLX4jS7TwoszkbM1__-izpfsB6JJaA6KAbSK2CGBiZdMUn4Jg@mail.gmail.com>
	<CAJsFioV9zHAEy0i08GnsCCvcTn8yLowkEcrAFs=8xbFZfUbZLw@mail.gmail.com>
	<CACLX4jQQKTYdpBhJGNo3igOTiwh6p72ujK_e9mSOpHMxJDNhgw@mail.gmail.com>
Message-ID: <CACLX4jTiJyMdfQi0-wi3dwVOXOeycskm=iFWnjBQxHp+1o6Upw@mail.gmail.com>

Whoops.  I meant

HTTP://ocaml.janestreet.com/core-contributor-info.html
On Mar 7, 2012 6:25 PM, "Yaron Minsky" <yminsky at janestreet.com> wrote:

> A fine point!
>
> HTTP://ocaml.janestreet.com/ocaml-contributor-info.html
>
> y
> On Mar 7, 2012 6:03 PM, "Stephen Weeks" <sweeks at sweeks.com> wrote:
>
>> Where is the CLA?
>>
>> On Wed, Mar 7, 2012 at 5:40 PM, Yaron Minsky <yminsky at janestreet.com>wrote:
>>
>>> We've made some moves on the licensing front.
>>>
>>> First, we've decided to relicense the Core suite under the Apache
>>> license.
>>>
>>> Second, we now have CLA's set up (contributor license agreements), which
>>> we'd like anyone who wants to contribute patches to sign and email that
>>> document to us.  Then we can start accepting serious incoming patches!
>>>
>>> Finally, we hope to create tarballs for a blessed release in the next
>>> few days, now that our internal code review process is complete.
>>>
>>> Cheers,
>>> y
>>>
>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120307/468f7e7a/attachment-0001.html>

From wmovrtbt09 at gmail.com  Mon Mar 12 11:12:49 2012
From: wmovrtbt09 at gmail.com (WmOvRtBT09 WmOvRtBT09)
Date: Mon, 12 Mar 2012 04:12:49 -0700 (PDT)
Subject: ocaml-core - Learn Chinese (Mandarin) faster by using flashcards with pictures
Message-ID: <9e62f8f2-2b85-4437-83c7-6654659d5fe3@pi6g2000pbc.googlegroups.com>


ocaml-core - http://www.ichineseflashcards.com will help you learn
Chinese (Mandarin) faster by using flashcards with pictures, thanks


From ocaml-core at googlegroups.com  Tue Mar 13 02:42:53 2012
From: ocaml-core at googlegroups.com (ocaml-core at googlegroups.com)
Date: Tue, 13 Mar 2012 02:42:53 +0000
Subject: Moderator's spam report for ocaml-core@googlegroups.com
Message-ID: <0016e6dd8914cd44cf04bb16d09d@google.com>


This message is being sent to you because you are a moderator of the group ocaml-core.

The following suspicious messages were sent to your group, but are being held in your moderation queue because they are classified as likely spam messages.

If you take no action, all the messages below will be discarded automatically as spam.

However, if you see any messages that are not spam below, you may approve them individually by going to:

http://groups.google.com/group/ocaml-core/pendmsg

Please do not mark this notification as spam; this is a service for group moderators. If you do not wish to receive these notifications in the future, you may change your preferences by going to:

http://groups.google.com/group/ocaml-core/manage_post


------- 1 of 1  -------
Subject: database programs
>From: "Moran toby" <Read_Melinda at hostnoc.net>
Date: Mar 12 01:58PM -0700

List available: US businesses - 4 million emails

Price until Friday: $99 CLICK HERE TO ORDER

File Available for download in excel format

Some of the business categories available:

Click here for the complete list of categories, SIC codes

Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=5912604329849537287


For more information about this message, please visit:
http://groups.google.com/support/bin/answer.py?hl=en&answer=165806



From markus.mottl at gmail.com  Thu Mar 15 16:33:04 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Thu, 15 Mar 2012 12:33:04 -0400
Subject: Naming conventions
Message-ID: <CAP_800qyAUHYH6FvbnR+PN7jSCwEShp6fGFq_5i6c+u69NA9zw@mail.gmail.com>


Hi,

I've observed that names for e.g. source directories, Oasis packages,
libraries, etc., are not always consistent in the Core distribution.
I think it shouldn't be the case as it is right now that an Oasis
package whose source is in directory "bin-prot" is named "bin_prot",
it's documentation "bin-prot", and the library "bin_prot" again.

If we wanted to make all names consistent, we would have to convert
dashes to underscores, because dashes are illegal in module names (and
hence names for packed libraries).  Underscores would work in any
context.

We should probably settle on naming conventions before creating a
public release.  Such changes would be fairly straightforward now, but
likely inconvenient later.

What do you think, should all these names be made consistent?  If so,
future projects should also make sure to use a consistent naming
convention, in particular to always use underscores instead of dashes
in all names.

Regards,
Markus

-- 
Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From yminsky at janestreet.com  Thu Mar 15 16:57:27 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 15 Mar 2012 12:57:27 -0400
Subject: Naming conventions
In-Reply-To: <CAP_800qyAUHYH6FvbnR+PN7jSCwEShp6fGFq_5i6c+u69NA9zw@mail.gmail.com>
References: <CAP_800qyAUHYH6FvbnR+PN7jSCwEShp6fGFq_5i6c+u69NA9zw@mail.gmail.com>
Message-ID: <CACLX4jTD84q0UzFbOiBCsN38Dosudo5NQCROoivb1goBUXCsSQ@mail.gmail.com>

I like using underscores everywhere.  Does anyone object?

y

On Thu, Mar 15, 2012 at 12:33 PM, Markus Mottl <markus.mottl at gmail.com>wrote:

> Hi,
>
> I've observed that names for e.g. source directories, Oasis packages,
> libraries, etc., are not always consistent in the Core distribution.
> I think it shouldn't be the case as it is right now that an Oasis
> package whose source is in directory "bin-prot" is named "bin_prot",
> it's documentation "bin-prot", and the library "bin_prot" again.
>
> If we wanted to make all names consistent, we would have to convert
> dashes to underscores, because dashes are illegal in module names (and
> hence names for packed libraries).  Underscores would work in any
> context.
>
> We should probably settle on naming conventions before creating a
> public release.  Such changes would be fairly straightforward now, but
> likely inconvenient later.
>
> What do you think, should all these names be made consistent?  If so,
> future projects should also make sure to use a consistent naming
> convention, in particular to always use underscores instead of dashes
> in all names.
>
> Regards,
> Markus
>
> --
> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120315/76ce4986/attachment-0001.html>

From markus.mottl at gmail.com  Thu Mar 15 20:03:02 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Thu, 15 Mar 2012 16:03:02 -0400
Subject: Naming conventions
In-Reply-To: <CACLX4jTD84q0UzFbOiBCsN38Dosudo5NQCROoivb1goBUXCsSQ@mail.gmail.com>
References: <CAP_800qyAUHYH6FvbnR+PN7jSCwEShp6fGFq_5i6c+u69NA9zw@mail.gmail.com>
	<CACLX4jTD84q0UzFbOiBCsN38Dosudo5NQCROoivb1goBUXCsSQ@mail.gmail.com>
Message-ID: <CAP_800p8YKUJgLo348nSexUVUWcUBWz9oGBdarWHskmrAUv5bw@mail.gmail.com>


On Thu, Mar 15, 2012 at 12:57, Yaron Minsky <yminsky at janestreet.com> wrote:
> I like using underscores everywhere. ?Does anyone object?

If nobody objects by tomorrow, I'll assume they are fine with the
proposed changes.  I'll add them to my fork then.

Regards,
Markus

-- 
Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From yminsky at janestreet.com  Thu Mar 15 23:41:46 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 15 Mar 2012 19:41:46 -0400
Subject: Getting pretty printers installed in the toplevel
Message-ID: <CACLX4jR93Y_17uPp_djzLk9pkReN3an0MVzK5V-v4QG6MP+w4A@mail.gmail.com>

Does anyone know how to get pretty printers installed in the toplevel?  We
have a list of pretty printers to be installed:

# Pretty_printer.all ();;
- : string list =
["Core.Host_and_port.pp"; "Core.Time.pp"; "Core.Ofday.pp"; "Core.Date.pp";
 "Core.Span.pp"; "Core.Error.pp"; "Core.Exn.pp"; "Sexplib.Sexp.pp_hum"]]


But  they don't actually get installed.  I'm not sure how to do this
automatically in the toplevel.

y
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120315/23098f71/attachment-0001.html>

From datkin at janestreet.com  Thu Mar 15 23:50:54 2012
From: datkin at janestreet.com (Drew Atkin)
Date: Thu, 15 Mar 2012 19:50:54 -0400
Subject: Getting pretty printers installed in the toplevel
In-Reply-To: <CACLX4jR93Y_17uPp_djzLk9pkReN3an0MVzK5V-v4QG6MP+w4A@mail.gmail.com>
References: <CACLX4jR93Y_17uPp_djzLk9pkReN3an0MVzK5V-v4QG6MP+w4A@mail.gmail.com>
Message-ID: <4F62805E.9020100@janestreet.com>


Yaron Minsky wrote:
> But  they don't actually get installed.  I'm not sure how to do this 
> automatically in the toplevel.

You mean without using "#install_printer"?

http://caml.inria.fr/pub/docs/manual-ocaml/manual023.html#toc90


From yminsky at janestreet.com  Thu Mar 15 23:57:35 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 15 Mar 2012 19:57:35 -0400
Subject: Getting pretty printers installed in the toplevel
In-Reply-To: <4F62805E.9020100@janestreet.com>
References: <CACLX4jR93Y_17uPp_djzLk9pkReN3an0MVzK5V-v4QG6MP+w4A@mail.gmail.com>
	<4F62805E.9020100@janestreet.com>
Message-ID: <CACLX4jR_RLqJKO5bH_sO-osTm6OKY-_VsHpt7FvamsA-6MVvAA@mail.gmail.com>

I mean in an automated way.  The best I can figure out to do right now is:

   - Generate a tmp file that contains the #install_printer directives,
   based on the list returned by Pretty_printer.all
   - call #use on that file
   - then delete the file

It works, but it's ugly.  Seems like there should be a better way.

y

On Thu, Mar 15, 2012 at 7:50 PM, Drew Atkin <datkin at janestreet.com> wrote:

> Yaron Minsky wrote:
>
>> But  they don't actually get installed.  I'm not sure how to do this
>> automatically in the toplevel.
>>
>
> You mean without using "#install_printer"?
>
> http://caml.inria.fr/pub/docs/**manual-ocaml/manual023.html#**toc90<http://caml.inria.fr/pub/docs/manual-ocaml/manual023.html#toc90>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120315/d80c5147/attachment-0001.html>

From yminsky at janestreet.com  Fri Mar 16 00:13:15 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 15 Mar 2012 20:13:15 -0400
Subject: Getting pretty printers installed in the toplevel
In-Reply-To: <CACLX4jR_RLqJKO5bH_sO-osTm6OKY-_VsHpt7FvamsA-6MVvAA@mail.gmail.com>
References: <CACLX4jR93Y_17uPp_djzLk9pkReN3an0MVzK5V-v4QG6MP+w4A@mail.gmail.com>
	<4F62805E.9020100@janestreet.com>
	<CACLX4jR_RLqJKO5bH_sO-osTm6OKY-_VsHpt7FvamsA-6MVvAA@mail.gmail.com>
Message-ID: <CACLX4jSzVGxEEqGBZUsPg12uf_bHvrWjeOekCRVuG_JgT9MAsQ@mail.gmail.com>

To elaborate, the following horrible hack works, but I'm not proud of it:

#use "topfind"
#thread
#require "dynlink"
#camlp4o
#require "bin_prot.syntax"
#require "sexplib.syntax"
#require "variantslib.syntax"
#require "fieldslib.syntax"
#require "comparelib.syntax"
#require "core"
#require "async"
#require "core_extended"
open Core.Std

(* A script to install pretty-printers *)

let outc =
  Out_channel.create "/tmp/install_printers.ml"

let () =
  Pretty_printer.all ()
  |! List.map ~f:(fun x -> sprintf "#install_printer %s ;;\n" x)
  |! String.concat
  |! Out_channel.output_string outc;
  Out_channel.close outc
;;

#use "/tmp/install_printers.ml";;

let () =
  Sys.remove "/tmp/install_printers.ml"


On Thu, Mar 15, 2012 at 7:57 PM, Yaron Minsky <yminsky at janestreet.com>wrote:

> I mean in an automated way.  The best I can figure out to do right now is:
>
>    - Generate a tmp file that contains the #install_printer directives,
>    based on the list returned by Pretty_printer.all
>    - call #use on that file
>    - then delete the file
>
> It works, but it's ugly.  Seems like there should be a better way.
>
> y
>
>
> On Thu, Mar 15, 2012 at 7:50 PM, Drew Atkin <datkin at janestreet.com> wrote:
>
>> Yaron Minsky wrote:
>>
>>> But  they don't actually get installed.  I'm not sure how to do this
>>> automatically in the toplevel.
>>>
>>
>> You mean without using "#install_printer"?
>>
>> http://caml.inria.fr/pub/docs/**manual-ocaml/manual023.html#**toc90<http://caml.inria.fr/pub/docs/manual-ocaml/manual023.html#toc90>
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120315/08eff177/attachment-0001.html>

From markus.mottl at gmail.com  Fri Mar 16 01:08:53 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Thu, 15 Mar 2012 21:08:53 -0400
Subject: Getting pretty printers installed in the toplevel
In-Reply-To: <CACLX4jSzVGxEEqGBZUsPg12uf_bHvrWjeOekCRVuG_JgT9MAsQ@mail.gmail.com>
References: <CACLX4jR93Y_17uPp_djzLk9pkReN3an0MVzK5V-v4QG6MP+w4A@mail.gmail.com>
	<4F62805E.9020100@janestreet.com>
	<CACLX4jR_RLqJKO5bH_sO-osTm6OKY-_VsHpt7FvamsA-6MVvAA@mail.gmail.com>
	<CACLX4jSzVGxEEqGBZUsPg12uf_bHvrWjeOekCRVuG_JgT9MAsQ@mail.gmail.com>
Message-ID: <CAP_800ru_n4rChuwrJyy3j8E4=4xSemWFhg8H33KGiH9C81mpQ@mail.gmail.com>


On Thu, Mar 15, 2012 at 20:13, Yaron Minsky <yminsky at janestreet.com> wrote:
> To elaborate, the following horrible hack works, but I'm not proud of it:

Quite close.  sexplib already has a module for doing this (as does
Lacaml for printing nicely formatted matrices).  If you run:

  #require "sexplib.top"

in the toplevel, the appropriate printer will be installed.  The
source of this module is in "base/sexplib/top/install_printers.ml".
It also has to evaluate strings, but makes calls directly into the
interpreter API for that purpose rather than having to go through a
generated file.

Regards,
Markus

-- 
Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From yminsky at janestreet.com  Fri Mar 16 01:26:31 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 15 Mar 2012 21:26:31 -0400
Subject: Getting pretty printers installed in the toplevel
In-Reply-To: <CAP_800ru_n4rChuwrJyy3j8E4=4xSemWFhg8H33KGiH9C81mpQ@mail.gmail.com>
References: <CACLX4jR93Y_17uPp_djzLk9pkReN3an0MVzK5V-v4QG6MP+w4A@mail.gmail.com>
	<4F62805E.9020100@janestreet.com>
	<CACLX4jR_RLqJKO5bH_sO-osTm6OKY-_VsHpt7FvamsA-6MVvAA@mail.gmail.com>
	<CACLX4jSzVGxEEqGBZUsPg12uf_bHvrWjeOekCRVuG_JgT9MAsQ@mail.gmail.com>
	<CAP_800ru_n4rChuwrJyy3j8E4=4xSemWFhg8H33KGiH9C81mpQ@mail.gmail.com>
Message-ID: <CACLX4jQ+9m_gc+jsK3jPhpiaNC8QHE+BjLd75OCX_rq117+1wg@mail.gmail.com>

Got it.  And what's good Core is that, once we have it set up properly,
then running

#require "core.top"


will load any pretty printers that were registered using Core's
Pretty_printer.register call.  Very nice.

I'll try to get that set up properly.

y

On Thu, Mar 15, 2012 at 9:08 PM, Markus Mottl <markus.mottl at gmail.com>wrote:

> On Thu, Mar 15, 2012 at 20:13, Yaron Minsky <yminsky at janestreet.com>
> wrote:
> > To elaborate, the following horrible hack works, but I'm not proud of it:
>
> Quite close.  sexplib already has a module for doing this (as does
> Lacaml for printing nicely formatted matrices).  If you run:
>
>  #require "sexplib.top"
>
> in the toplevel, the appropriate printer will be installed.  The
> source of this module is in "base/sexplib/top/install_printers.ml".
> It also has to evaluate strings, but makes calls directly into the
> interpreter API for that purpose rather than having to go through a
> generated file.
>
> Regards,
> Markus
>
> --
> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120315/17d571e1/attachment-0001.html>

From yminsky at janestreet.com  Fri Mar 16 01:48:19 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 15 Mar 2012 21:48:19 -0400
Subject: Getting pretty printers installed in the toplevel
In-Reply-To: <CACLX4jQ+9m_gc+jsK3jPhpiaNC8QHE+BjLd75OCX_rq117+1wg@mail.gmail.com>
References: <CACLX4jR93Y_17uPp_djzLk9pkReN3an0MVzK5V-v4QG6MP+w4A@mail.gmail.com>
	<4F62805E.9020100@janestreet.com>
	<CACLX4jR_RLqJKO5bH_sO-osTm6OKY-_VsHpt7FvamsA-6MVvAA@mail.gmail.com>
	<CACLX4jSzVGxEEqGBZUsPg12uf_bHvrWjeOekCRVuG_JgT9MAsQ@mail.gmail.com>
	<CAP_800ru_n4rChuwrJyy3j8E4=4xSemWFhg8H33KGiH9C81mpQ@mail.gmail.com>
	<CACLX4jQ+9m_gc+jsK3jPhpiaNC8QHE+BjLd75OCX_rq117+1wg@mail.gmail.com>
Message-ID: <CACLX4jTVP1wCp65nVa1oUB-3u698_YeUWwCP7d+=WFaLk73ETg@mail.gmail.com>

And, now it's done and pushed to the repo.

y

On Thu, Mar 15, 2012 at 9:26 PM, Yaron Minsky <yminsky at janestreet.com>wrote:

> Got it.  And what's good Core is that, once we have it set up properly,
> then running
>
> #require "core.top"
>
>
> will load any pretty printers that were registered using Core's
> Pretty_printer.register call.  Very nice.
>
> I'll try to get that set up properly.
>
> y
>
> On Thu, Mar 15, 2012 at 9:08 PM, Markus Mottl <markus.mottl at gmail.com>wrote:
>
>> On Thu, Mar 15, 2012 at 20:13, Yaron Minsky <yminsky at janestreet.com>
>> wrote:
>> > To elaborate, the following horrible hack works, but I'm not proud of
>> it:
>>
>> Quite close.  sexplib already has a module for doing this (as does
>> Lacaml for printing nicely formatted matrices).  If you run:
>>
>>  #require "sexplib.top"
>>
>> in the toplevel, the appropriate printer will be installed.  The
>> source of this module is in "base/sexplib/top/install_printers.ml".
>> It also has to evaluate strings, but makes calls directly into the
>> interpreter API for that purpose rather than having to go through a
>> generated file.
>>
>> Regards,
>> Markus
>>
>> --
>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120315/3e2b8288/attachment-0001.html>

From till at pps.jussieu.fr  Tue Mar 20 18:48:59 2012
From: till at pps.jussieu.fr (Till Varoquaux)
Date: Tue, 20 Mar 2012 14:48:59 -0400
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <4F68CC67.3020207@janestreet.com>
References: <20120320175113.GC935@viper.local>
	<20120320180759.GE935@viper.local>
	<4F68CC67.3020207@janestreet.com>
Message-ID: <CAHJESt3W8_B8pusqV1qFeNBTZuzD=Vxh41E57pCr1SNZbYTdwg@mail.gmail.com>


getpwuid(getuid()) is not a synonym for get_login (refer to the
discussion in the POSIX standard[^1]). You should not shadow posix
functions by functions with different semantics in the Unix modules;
providing your own abstraction over the OS is a commendable goal but
you should do so without silently bypassing core functions.

Till
[1]:http://pubs.opengroup.org/onlinepubs/007904975/functions/getlogin.html


On Tue, Mar 20, 2012 at 2:28 PM, David House <dhouse at janestreet.com> wrote:
> Note that Jane Street's core library [1] does not use getlogin(3) in its
> replacement Unix module, for exactly this reason:
>
> (* The standard getlogin function goes through utmp which is unreliable,
> ?see the BUGS section of getlogin(3) *)
> let getlogin_orig = Unix.getlogin
> let getlogin () = (Unix.getpwuid (getuid ())).Unix.pw_name
>
> [1]: https://bitbucket.org/yminsky/ocaml-core/wiki/Home
>
> I just tested your specific example, and it worked fine.
>
>
> On Tue 20 Mar 2012 06:07:59 PM GMT, Ricardo Catalinas Jim?nez wrote:
>>
>> On Tue, Mar 20, 2012 at 06:51:13PM +0100, Ricardo Catalinas Jim?nez wrote:
>>>
>>> I found out the next issue in this simple code:
>>>
>>> let () =
>>> ? ? print_endline "Hello";
>>> ? ? print_endline (Unix.getlogin ())
>>>
>>> Running in the normal case, with `./a.out' gives:
>>>
>>> Hello
>>> ricardo
>>>
>>> But running like `./a.out</dev/null' makes Unix.getlogin fail:
>>>
>>> Hello
>>> Fatal error: exception Unix.Unix_error(20, "getlogin", "")
>>>
>>> A simple strace reveals the problem:
>>>
>>> ? ?open("/etc/passwd", O_RDONLY|O_CLOEXEC) = 3
>>> ? ?fstat(3, {st_mode=S_IFREG|0644, st_size=509, ...}) = 0
>>> ? ?mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
>>> 0) = 0x7fb125554000
>>> ? ?read(3, "root:x:0:0:root:/root:/bin/bash\n"..., 4096) = 509
>>> ? ?read(3, "", 4096) ? ? ? ? ? ? ? ? ? ? ? = 0
>>> ? ?close(3) ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?= 0
>>> ? ?munmap(0x7fb125554000, 4096) ? ? ? ? ? ?= 0
>>> -> ?ioctl(0, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or
>>> TCGETS, 0x7fff12682c98) = -1 ENOTTY (Inappropriate ioctl for device)
>>> ? ?write(2, "Fatal error: exception Unix.Unix"..., 59) = 59
>>> ? ?exit_group(2) ? ? ? ? ? ? ? ? ? ? ? ? ? = ?
>>
>>
>>
>> Someone knew the answer, man 3 getlogin reads:
>>
>> ? ? ? ?Note that glibc does not follow the POSIX specification and uses
>> ? ? ? ?stdin instead of /dev/tty. ?A bug. ?(Other recent systems, like
>> ? ? ? ?SunOS 5.8 and HP-UX 11.11 and FreeBSD 4.8 all return the login
>> ? ? ? ?name also when stdin is redirected.)
>>
>>
>> Regards
>
>
>
>
> --
> Caml-list mailing list. ?Subscription management and archives:
> https://sympa-roc.inria.fr/wws/info/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>


-- 
Caml-list mailing list.  Subscription management and archives:
https://sympa-roc.inria.fr/wws/info/caml-list
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
Bug reports: http://caml.inria.fr/bin/caml-bugs



From yminsky at gmail.com  Tue Mar 20 19:41:51 2012
From: yminsky at gmail.com (Yaron Minsky)
Date: Tue, 20 Mar 2012 15:41:51 -0400
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <CAHJESt3W8_B8pusqV1qFeNBTZuzD=Vxh41E57pCr1SNZbYTdwg@mail.gmail.com>
References: <20120320175113.GC935@viper.local>
	<20120320180759.GE935@viper.local>
	<4F68CC67.3020207@janestreet.com>
	<CAHJESt3W8_B8pusqV1qFeNBTZuzD=Vxh41E57pCr1SNZbYTdwg@mail.gmail.com>
Message-ID: <CADKNfhJm3unJTRyFLAxZDRFKeOAccfEA+fhXNMk1+kCFAa+0Xw@mail.gmail.com>

Is there a concrete difference in behavior you're concerned about?

y

On Tue, Mar 20, 2012 at 2:48 PM, Till Varoquaux <till at pps.jussieu.fr> wrote:

> getpwuid(getuid()) is not a synonym for get_login (refer to the
> discussion in the POSIX standard[^1]). You should not shadow posix
> functions by functions with different semantics in the Unix modules;
> providing your own abstraction over the OS is a commendable goal but
> you should do so without silently bypassing core functions.
>
> Till
> [1]:http://pubs.opengroup.org/onlinepubs/007904975/functions/getlogin.html
>
>
> On Tue, Mar 20, 2012 at 2:28 PM, David House <dhouse at janestreet.com>
> wrote:
> > Note that Jane Street's core library [1] does not use getlogin(3) in its
> > replacement Unix module, for exactly this reason:
> >
> > (* The standard getlogin function goes through utmp which is unreliable,
> >  see the BUGS section of getlogin(3) *)
> > let getlogin_orig = Unix.getlogin
> > let getlogin () = (Unix.getpwuid (getuid ())).Unix.pw_name
> >
> > [1]: https://bitbucket.org/yminsky/ocaml-core/wiki/Home
> >
> > I just tested your specific example, and it worked fine.
> >
> >
> > On Tue 20 Mar 2012 06:07:59 PM GMT, Ricardo Catalinas Jim?nez wrote:
> >>
> >> On Tue, Mar 20, 2012 at 06:51:13PM +0100, Ricardo Catalinas Jim?nez
> wrote:
> >>>
> >>> I found out the next issue in this simple code:
> >>>
> >>> let () =
> >>>     print_endline "Hello";
> >>>     print_endline (Unix.getlogin ())
> >>>
> >>> Running in the normal case, with `./a.out' gives:
> >>>
> >>> Hello
> >>> ricardo
> >>>
> >>> But running like `./a.out</dev/null' makes Unix.getlogin fail:
> >>>
> >>> Hello
> >>> Fatal error: exception Unix.Unix_error(20, "getlogin", "")
> >>>
> >>> A simple strace reveals the problem:
> >>>
> >>>    open("/etc/passwd", O_RDONLY|O_CLOEXEC) = 3
> >>>    fstat(3, {st_mode=S_IFREG|0644, st_size=509, ...}) = 0
> >>>    mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS,
> -1,
> >>> 0) = 0x7fb125554000
> >>>    read(3, "root:x:0:0:root:/root:/bin/bash\n"..., 4096) = 509
> >>>    read(3, "", 4096)                       = 0
> >>>    close(3)                                = 0
> >>>    munmap(0x7fb125554000, 4096)            = 0
> >>> ->  ioctl(0, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or
> >>> TCGETS, 0x7fff12682c98) = -1 ENOTTY (Inappropriate ioctl for device)
> >>>    write(2, "Fatal error: exception Unix.Unix"..., 59) = 59
> >>>    exit_group(2)                           = ?
> >>
> >>
> >>
> >> Someone knew the answer, man 3 getlogin reads:
> >>
> >>        Note that glibc does not follow the POSIX specification and uses
> >>        stdin instead of /dev/tty.  A bug.  (Other recent systems, like
> >>        SunOS 5.8 and HP-UX 11.11 and FreeBSD 4.8 all return the login
> >>        name also when stdin is redirected.)
> >>
> >>
> >> Regards
> >
> >
> >
> >
> > --
> > Caml-list mailing list.  Subscription management and archives:
> > https://sympa-roc.inria.fr/wws/info/caml-list
> > Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> > Bug reports: http://caml.inria.fr/bin/caml-bugs
> >
>
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa-roc.inria.fr/wws/info/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120320/8c233d03/attachment-0001.html>

From till at pps.jussieu.fr  Tue Mar 20 20:12:36 2012
From: till at pps.jussieu.fr (Till Varoquaux)
Date: Tue, 20 Mar 2012 16:12:36 -0400
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <CADKNfhJm3unJTRyFLAxZDRFKeOAccfEA+fhXNMk1+kCFAa+0Xw@mail.gmail.com>
References: <20120320175113.GC935@viper.local>
	<20120320180759.GE935@viper.local>
	<4F68CC67.3020207@janestreet.com>
	<CAHJESt3W8_B8pusqV1qFeNBTZuzD=Vxh41E57pCr1SNZbYTdwg@mail.gmail.com>
	<CADKNfhJm3unJTRyFLAxZDRFKeOAccfEA+fhXNMk1+kCFAa+0Xw@mail.gmail.com>
Message-ID: <CAHJESt0O3yLjNPkexha_37OZQoLFobX4S-R1CZhvfzOasXWXgA@mail.gmail.com>


As far as I can tell getpwuid(geteuid()) is what the (deprecated)
cuserid function does. The linux man page explains the difference
between the two functions like this:

  _ These functions let your program identify positively the user who
is running (cuserid()) or the user who logged in this session
(getlogin()). (These can differ when set-user-ID programs are
involved.)

I expect there to be more points were the behaviours of those two
functions diverge (e.g.: sudo, deamons etc...).

In general I am very skeptic any time I see a one liner that is sold
as a working alternative to a glibc function. The glibc has issues and
pitfalls but they tend to be very well documented. "Better the devil
you know"...

Till

On Tue, Mar 20, 2012 at 3:41 PM, Yaron Minsky <yminsky at gmail.com> wrote:
> Is there a concrete difference in behavior you're concerned about?
>
> y
>
>
> On Tue, Mar 20, 2012 at 2:48 PM, Till Varoquaux <till at pps.jussieu.fr> wrote:
>>
>> getpwuid(getuid()) is not a synonym for get_login (refer to the
>> discussion in the POSIX standard[^1]). You should not shadow posix
>> functions by functions with different semantics in the Unix modules;
>> providing your own abstraction over the OS is a commendable goal but
>> you should do so without silently bypassing core functions.
>>
>> Till
>> [1]:http://pubs.opengroup.org/onlinepubs/007904975/functions/getlogin.html
>>
>>
>> On Tue, Mar 20, 2012 at 2:28 PM, David House <dhouse at janestreet.com>
>> wrote:
>> > Note that Jane Street's core library [1] does not use getlogin(3) in its
>> > replacement Unix module, for exactly this reason:
>> >
>> > (* The standard getlogin function goes through utmp which is unreliable,
>> > ?see the BUGS section of getlogin(3) *)
>> > let getlogin_orig = Unix.getlogin
>> > let getlogin () = (Unix.getpwuid (getuid ())).Unix.pw_name
>> >
>> > [1]: https://bitbucket.org/yminsky/ocaml-core/wiki/Home
>> >
>> > I just tested your specific example, and it worked fine.
>> >
>> >
>> > On Tue 20 Mar 2012 06:07:59 PM GMT, Ricardo Catalinas Jim?nez wrote:
>> >>
>> >> On Tue, Mar 20, 2012 at 06:51:13PM +0100, Ricardo Catalinas Jim?nez
>> >> wrote:
>> >>>
>> >>> I found out the next issue in this simple code:
>> >>>
>> >>> let () =
>> >>> ? ? print_endline "Hello";
>> >>> ? ? print_endline (Unix.getlogin ())
>> >>>
>> >>> Running in the normal case, with `./a.out' gives:
>> >>>
>> >>> Hello
>> >>> ricardo
>> >>>
>> >>> But running like `./a.out</dev/null' makes Unix.getlogin fail:
>> >>>
>> >>> Hello
>> >>> Fatal error: exception Unix.Unix_error(20, "getlogin", "")
>> >>>
>> >>> A simple strace reveals the problem:
>> >>>
>> >>> ? ?open("/etc/passwd", O_RDONLY|O_CLOEXEC) = 3
>> >>> ? ?fstat(3, {st_mode=S_IFREG|0644, st_size=509, ...}) = 0
>> >>> ? ?mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS,
>> >>> -1,
>> >>> 0) = 0x7fb125554000
>> >>> ? ?read(3, "root:x:0:0:root:/root:/bin/bash\n"..., 4096) = 509
>> >>> ? ?read(3, "", 4096) ? ? ? ? ? ? ? ? ? ? ? = 0
>> >>> ? ?close(3) ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?= 0
>> >>> ? ?munmap(0x7fb125554000, 4096) ? ? ? ? ? ?= 0
>> >>> -> ?ioctl(0, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or
>> >>> TCGETS, 0x7fff12682c98) = -1 ENOTTY (Inappropriate ioctl for device)
>> >>> ? ?write(2, "Fatal error: exception Unix.Unix"..., 59) = 59
>> >>> ? ?exit_group(2) ? ? ? ? ? ? ? ? ? ? ? ? ? = ?
>> >>
>> >>
>> >>
>> >> Someone knew the answer, man 3 getlogin reads:
>> >>
>> >> ? ? ? ?Note that glibc does not follow the POSIX specification and uses
>> >> ? ? ? ?stdin instead of /dev/tty. ?A bug. ?(Other recent systems, like
>> >> ? ? ? ?SunOS 5.8 and HP-UX 11.11 and FreeBSD 4.8 all return the login
>> >> ? ? ? ?name also when stdin is redirected.)
>> >>
>> >>
>> >> Regards
>> >
>> >
>> >
>> >
>> > --
>> > Caml-list mailing list. ?Subscription management and archives:
>> > https://sympa-roc.inria.fr/wws/info/caml-list
>> > Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>> > Bug reports: http://caml.inria.fr/bin/caml-bugs
>> >
>>
>>
>> --
>> Caml-list mailing list. ?Subscription management and archives:
>> https://sympa-roc.inria.fr/wws/info/caml-list
>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>> Bug reports: http://caml.inria.fr/bin/caml-bugs
>>
>


From dhouse at janestreet.com  Tue Mar 20 18:28:55 2012
From: dhouse at janestreet.com (David House)
Date: Tue, 20 Mar 2012 18:28:55 +0000
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <20120320180759.GE935@viper.local>
References: <20120320175113.GC935@viper.local> <20120320180759.GE935@viper.local>
Message-ID: <4F68CC67.3020207@janestreet.com>


Note that Jane Street's core library [1] does not use getlogin(3) in 
its replacement Unix module, for exactly this reason:

(* The standard getlogin function goes through utmp which is unreliable,
   see the BUGS section of getlogin(3) *)
let getlogin_orig = Unix.getlogin
let getlogin () = (Unix.getpwuid (getuid ())).Unix.pw_name

[1]: https://bitbucket.org/yminsky/ocaml-core/wiki/Home

I just tested your specific example, and it worked fine.

On Tue 20 Mar 2012 06:07:59 PM GMT, Ricardo Catalinas Jim?nez wrote:
> On Tue, Mar 20, 2012 at 06:51:13PM +0100, Ricardo Catalinas Jim?nez wrote:
>> I found out the next issue in this simple code:
>>
>> let () =
>>      print_endline "Hello";
>>      print_endline (Unix.getlogin ())
>>
>> Running in the normal case, with `./a.out' gives:
>>
>> Hello
>> ricardo
>>
>> But running like `./a.out</dev/null' makes Unix.getlogin fail:
>>
>> Hello
>> Fatal error: exception Unix.Unix_error(20, "getlogin", "")
>>
>> A simple strace reveals the problem:
>>
>>     open("/etc/passwd", O_RDONLY|O_CLOEXEC) = 3
>>     fstat(3, {st_mode=S_IFREG|0644, st_size=509, ...}) = 0
>>     mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fb125554000
>>     read(3, "root:x:0:0:root:/root:/bin/bash\n"..., 4096) = 509
>>     read(3, "", 4096)                       = 0
>>     close(3)                                = 0
>>     munmap(0x7fb125554000, 4096)            = 0
>> ->  ioctl(0, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0x7fff12682c98) = -1 ENOTTY (Inappropriate ioctl for device)
>>     write(2, "Fatal error: exception Unix.Unix"..., 59) = 59
>>     exit_group(2)                           = ?
>
>
> Someone knew the answer, man 3 getlogin reads:
>
>         Note that glibc does not follow the POSIX specification and uses
>         stdin instead of /dev/tty.  A bug.  (Other recent systems, like
>         SunOS 5.8 and HP-UX 11.11 and FreeBSD 4.8 all return the login
>         name also when stdin is redirected.)
>
>
> Regards



-- 
Caml-list mailing list.  Subscription management and archives:
https://sympa-roc.inria.fr/wws/info/caml-list
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
Bug reports: http://caml.inria.fr/bin/caml-bugs



From jimenezrick at gmail.com  Tue Mar 20 17:51:13 2012
From: jimenezrick at gmail.com (Ricardo Catalinas =?iso-8859-1?Q?Jim=E9nez?=)
Date: Tue, 20 Mar 2012 18:51:13 +0100
Subject: [Caml-list] Unix.getlogin () fails when stdin is redirected
Message-ID: <20120320175113.GC935@viper.local>


I found out the next issue in this simple code:

let () =
    print_endline "Hello";
    print_endline (Unix.getlogin ())

Running in the normal case, with `./a.out' gives:

Hello
ricardo

But running like `./a.out </dev/null' makes Unix.getlogin fail:

Hello
Fatal error: exception Unix.Unix_error(20, "getlogin", "")

A simple strace reveals the problem:

   open("/etc/passwd", O_RDONLY|O_CLOEXEC) = 3
   fstat(3, {st_mode=S_IFREG|0644, st_size=509, ...}) = 0
   mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fb125554000
   read(3, "root:x:0:0:root:/root:/bin/bash\n"..., 4096) = 509
   read(3, "", 4096)                       = 0
   close(3)                                = 0
   munmap(0x7fb125554000, 4096)            = 0
-> ioctl(0, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0x7fff12682c98) = -1 ENOTTY (Inappropriate ioctl for device)
   write(2, "Fatal error: exception Unix.Unix"..., 59) = 59
   exit_group(2)                           = ?

Any idea how to fix this?


Best regards
-- 
Ricardo (http://r.untroubled.be/)

-- 
Caml-list mailing list.  Subscription management and archives:
https://sympa-roc.inria.fr/wws/info/caml-list
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
Bug reports: http://caml.inria.fr/bin/caml-bugs



From jimenezrick at gmail.com  Tue Mar 20 18:07:59 2012
From: jimenezrick at gmail.com (Ricardo Catalinas =?iso-8859-1?Q?Jim=E9nez?=)
Date: Tue, 20 Mar 2012 19:07:59 +0100
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <20120320175113.GC935@viper.local>
References: <20120320175113.GC935@viper.local>
Message-ID: <20120320180759.GE935@viper.local>


On Tue, Mar 20, 2012 at 06:51:13PM +0100, Ricardo Catalinas Jim?nez wrote:
> I found out the next issue in this simple code:
> 
> let () =
>     print_endline "Hello";
>     print_endline (Unix.getlogin ())
> 
> Running in the normal case, with `./a.out' gives:
> 
> Hello
> ricardo
> 
> But running like `./a.out </dev/null' makes Unix.getlogin fail:
> 
> Hello
> Fatal error: exception Unix.Unix_error(20, "getlogin", "")
> 
> A simple strace reveals the problem:
> 
>    open("/etc/passwd", O_RDONLY|O_CLOEXEC) = 3
>    fstat(3, {st_mode=S_IFREG|0644, st_size=509, ...}) = 0
>    mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fb125554000
>    read(3, "root:x:0:0:root:/root:/bin/bash\n"..., 4096) = 509
>    read(3, "", 4096)                       = 0
>    close(3)                                = 0
>    munmap(0x7fb125554000, 4096)            = 0
> -> ioctl(0, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0x7fff12682c98) = -1 ENOTTY (Inappropriate ioctl for device)
>    write(2, "Fatal error: exception Unix.Unix"..., 59) = 59
>    exit_group(2)                           = ?


Someone knew the answer, man 3 getlogin reads:

       Note that glibc does not follow the POSIX specification and uses
       stdin instead of /dev/tty.  A bug.  (Other recent systems, like
       SunOS 5.8 and HP-UX 11.11 and FreeBSD 4.8 all return the login
       name also when stdin is redirected.)


Regards
-- 
Ricardo (http://r.untroubled.be/)

-- 
Caml-list mailing list.  Subscription management and archives:
https://sympa-roc.inria.fr/wws/info/caml-list
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
Bug reports: http://caml.inria.fr/bin/caml-bugs



From yminsky at janestreet.com  Wed Mar 21 02:10:18 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Tue, 20 Mar 2012 22:10:18 -0400
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <c7dd99924eaad3383d8d529f66dc1752.squirrel@gps.dynxs.de>
References: <c7dd99924eaad3383d8d529f66dc1752.squirrel@gps.dynxs.de>
Message-ID: <CACLX4jR7rwEB5pKjt2oHPETsVesrqPJR6uk5oTU29cgWak6Cig@mail.gmail.com>

Looping in ocaml-core list.

On Tue, Mar 20, 2012 at 8:51 PM, Gerd Stolpmann <info at gerd-stolpmann.de>wrote:

>
> I second this. There is one OS where getlogin does not follow POSIX and is
> maybe insecure, and the fix cannot be to hide the function for all other
> OS. IMHO, these differences should be handled on a higher level, and not
> in the module providing the bindings.
>
> Semantically, there is a big difference between getlogin and getuid:
> getlogin shall also work when the user calls a setuid program which in
> turn invokes a script. These script commands can then use getlogin to
> identify the original user (which is defined as the user of the session =
> the user of the controlling terminal). In contrast, getuid would return
> the uid to which setuid switched (for the script).
>
> So, I'd say, you cannot repair getlogin with getuid. The best fix is
> probably to just run `/usr/bin/logname </dev/tty` and read the printed
> name.
>

I can think of a few solutions here:

   - We can use getuid only on platforms where getlogin is busted
   - We can name our function something other than "getlogin", to avoid
   confusion.
   - We can shell-out, in the way you suggest, to implement getlogin on
   Linux.  My only worry is that this is also going to be somewhat fragile in
   its own way.  Does calling out to logname with the suggested redirect
   always work?

I'm open to other suggestions.

y
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120320/e3a6a913/attachment-0001.html>

From yminsky at janestreet.com  Wed Mar 21 02:22:01 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Tue, 20 Mar 2012 22:22:01 -0400
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <CACLX4jR7rwEB5pKjt2oHPETsVesrqPJR6uk5oTU29cgWak6Cig@mail.gmail.com>
References: <c7dd99924eaad3383d8d529f66dc1752.squirrel@gps.dynxs.de>
	<CACLX4jR7rwEB5pKjt2oHPETsVesrqPJR6uk5oTU29cgWak6Cig@mail.gmail.com>
Message-ID: <CACLX4jQgtCGQcKY_3Gyb3sO4qm2MFUOn+j6cUN0KiSHo9boiEg@mail.gmail.com>

I'm going to drop caml-list for further discussion of this issue.  People
who are interested should feel free to follow along on ocaml-core:

   https://groups.google.com/forum/?fromgroups#!forum/ocaml-core

y

On Tue, Mar 20, 2012 at 10:10 PM, Yaron Minsky <yminsky at janestreet.com>wrote:

> Looping in ocaml-core list.
>
> On Tue, Mar 20, 2012 at 8:51 PM, Gerd Stolpmann <info at gerd-stolpmann.de>wrote:
>
>>
>> I second this. There is one OS where getlogin does not follow POSIX and is
>> maybe insecure, and the fix cannot be to hide the function for all other
>> OS. IMHO, these differences should be handled on a higher level, and not
>> in the module providing the bindings.
>>
>> Semantically, there is a big difference between getlogin and getuid:
>> getlogin shall also work when the user calls a setuid program which in
>> turn invokes a script. These script commands can then use getlogin to
>> identify the original user (which is defined as the user of the session =
>> the user of the controlling terminal). In contrast, getuid would return
>> the uid to which setuid switched (for the script).
>>
>> So, I'd say, you cannot repair getlogin with getuid. The best fix is
>> probably to just run `/usr/bin/logname </dev/tty` and read the printed
>> name.
>>
>
> I can think of a few solutions here:
>
>    - We can use getuid only on platforms where getlogin is busted
>    - We can name our function something other than "getlogin", to avoid
>    confusion.
>    - We can shell-out, in the way you suggest, to implement getlogin on
>    Linux.  My only worry is that this is also going to be somewhat fragile in
>    its own way.  Does calling out to logname with the suggested redirect
>    always work?
>
> I'm open to other suggestions.
>
> y
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120320/e5b2211e/attachment-0001.html>

From yminsky at janestreet.com  Wed Mar 21 02:29:35 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Tue, 20 Mar 2012 22:29:35 -0400
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <CACLX4jR7rwEB5pKjt2oHPETsVesrqPJR6uk5oTU29cgWak6Cig@mail.gmail.com>
References: <c7dd99924eaad3383d8d529f66dc1752.squirrel@gps.dynxs.de>
	<CACLX4jR7rwEB5pKjt2oHPETsVesrqPJR6uk5oTU29cgWak6Cig@mail.gmail.com>
Message-ID: <CACLX4jQRy93XnPp+YCQt3zdZ9CP79Jx7Vgq4HDEFuEqnpKHLGA@mail.gmail.com>

I have to say, the manpage on this is downright hilarious:

Unfortunately, it is often rather easy to fool getlogin(). Sometimes it does
not work at all, because some program messed up the utmp file. Often, it
gives only the first 8 characters of the login name. The user currently
logged in on the controlling tty of our program need not be the user who
started it. Avoid getlogin() for security-related purposes.

Note that glibc does not follow the POSIX specification and uses stdin
instead
of /dev/tty. A bug. (Other recent systems, like SunOS 5.8 and HP-UX 11.11
and FreeBSD 4.8 all return the login name also when stdin is redirected.)

Nobody knows precisely what cuserid() does; avoid it in portable programs.
Or
avoid it altogether: use getpwuid(geteuid()) instead, if that is what you
 meant. Do not use cuserid().

So, on Linux getlogin returns mangled usernames sometimes, and should not
be used for any "security" purposes.  getpwuid(getuid()) is sounding better
and better...

y

On Tue, Mar 20, 2012 at 10:10 PM, Yaron Minsky <yminsky at janestreet.com>wrote:

> Looping in ocaml-core list.
>
> On Tue, Mar 20, 2012 at 8:51 PM, Gerd Stolpmann <info at gerd-stolpmann.de>wrote:
>
>>
>> I second this. There is one OS where getlogin does not follow POSIX and is
>> maybe insecure, and the fix cannot be to hide the function for all other
>> OS. IMHO, these differences should be handled on a higher level, and not
>> in the module providing the bindings.
>>
>> Semantically, there is a big difference between getlogin and getuid:
>> getlogin shall also work when the user calls a setuid program which in
>> turn invokes a script. These script commands can then use getlogin to
>> identify the original user (which is defined as the user of the session =
>> the user of the controlling terminal). In contrast, getuid would return
>> the uid to which setuid switched (for the script).
>>
>> So, I'd say, you cannot repair getlogin with getuid. The best fix is
>> probably to just run `/usr/bin/logname </dev/tty` and read the printed
>> name.
>>
>
> I can think of a few solutions here:
>
>    - We can use getuid only on platforms where getlogin is busted
>    - We can name our function something other than "getlogin", to avoid
>    confusion.
>    - We can shell-out, in the way you suggest, to implement getlogin on
>    Linux.  My only worry is that this is also going to be somewhat fragile in
>    its own way.  Does calling out to logname with the suggested redirect
>    always work?
>
> I'm open to other suggestions.
>
> y
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120320/38953a45/attachment-0001.html>

From oliver at first.in-berlin.de  Tue Mar 20 22:45:25 2012
From: oliver at first.in-berlin.de (oliver)
Date: Tue, 20 Mar 2012 23:45:25 +0100
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <CAHJESt0O3yLjNPkexha_37OZQoLFobX4S-R1CZhvfzOasXWXgA@mail.gmail.com>
References: <20120320175113.GC935@viper.local>
 <20120320180759.GE935@viper.local>
 <4F68CC67.3020207@janestreet.com>
 <CAHJESt3W8_B8pusqV1qFeNBTZuzD=Vxh41E57pCr1SNZbYTdwg@mail.gmail.com>
 <CADKNfhJm3unJTRyFLAxZDRFKeOAccfEA+fhXNMk1+kCFAa+0Xw@mail.gmail.com>
 <CAHJESt0O3yLjNPkexha_37OZQoLFobX4S-R1CZhvfzOasXWXgA@mail.gmail.com>
Message-ID: <20120320224525.GE3352@siouxsie>


Are there so many bugs in glibc that fixing this one means waiting
in a long, long queue... and bugfixes will need months or years?

Are there any reasons this bug is not already fixed?
And since when is it known?

Ciao,
  Oliver


On Tue, Mar 20, 2012 at 04:12:36PM -0400, Till Varoquaux wrote:
> As far as I can tell getpwuid(geteuid()) is what the (deprecated)
> cuserid function does. The linux man page explains the difference
> between the two functions like this:
> 
>   _ These functions let your program identify positively the user who
> is running (cuserid()) or the user who logged in this session
> (getlogin()). (These can differ when set-user-ID programs are
> involved.)
> 
> I expect there to be more points were the behaviours of those two
> functions diverge (e.g.: sudo, deamons etc...).
> 
> In general I am very skeptic any time I see a one liner that is sold
> as a working alternative to a glibc function. The glibc has issues and
> pitfalls but they tend to be very well documented. "Better the devil
> you know"...
> 
> Till
> 
> On Tue, Mar 20, 2012 at 3:41 PM, Yaron Minsky <yminsky at gmail.com> wrote:
> > Is there a concrete difference in behavior you're concerned about?
> >
> > y
> >
> >
> > On Tue, Mar 20, 2012 at 2:48 PM, Till Varoquaux <till at pps.jussieu.fr> wrote:
> >>
> >> getpwuid(getuid()) is not a synonym for get_login (refer to the
> >> discussion in the POSIX standard[^1]). You should not shadow posix
> >> functions by functions with different semantics in the Unix modules;
> >> providing your own abstraction over the OS is a commendable goal but
> >> you should do so without silently bypassing core functions.
> >>
> >> Till
> >> [1]:http://pubs.opengroup.org/onlinepubs/007904975/functions/getlogin.html
> >>
> >>
> >> On Tue, Mar 20, 2012 at 2:28 PM, David House <dhouse at janestreet.com>
> >> wrote:
> >> > Note that Jane Street's core library [1] does not use getlogin(3) in its
> >> > replacement Unix module, for exactly this reason:
> >> >
> >> > (* The standard getlogin function goes through utmp which is unreliable,
> >> > ?see the BUGS section of getlogin(3) *)
> >> > let getlogin_orig = Unix.getlogin
> >> > let getlogin () = (Unix.getpwuid (getuid ())).Unix.pw_name
> >> >
> >> > [1]: https://bitbucket.org/yminsky/ocaml-core/wiki/Home
> >> >
> >> > I just tested your specific example, and it worked fine.
> >> >
> >> >
> >> > On Tue 20 Mar 2012 06:07:59 PM GMT, Ricardo Catalinas Jim?nez wrote:
> >> >>
> >> >> On Tue, Mar 20, 2012 at 06:51:13PM +0100, Ricardo Catalinas Jim?nez
> >> >> wrote:
> >> >>>
> >> >>> I found out the next issue in this simple code:
> >> >>>
> >> >>> let () =
> >> >>> ? ? print_endline "Hello";
> >> >>> ? ? print_endline (Unix.getlogin ())
> >> >>>
> >> >>> Running in the normal case, with `./a.out' gives:
> >> >>>
> >> >>> Hello
> >> >>> ricardo
> >> >>>
> >> >>> But running like `./a.out</dev/null' makes Unix.getlogin fail:
> >> >>>
> >> >>> Hello
> >> >>> Fatal error: exception Unix.Unix_error(20, "getlogin", "")
> >> >>>
> >> >>> A simple strace reveals the problem:
> >> >>>
> >> >>> ? ?open("/etc/passwd", O_RDONLY|O_CLOEXEC) = 3
> >> >>> ? ?fstat(3, {st_mode=S_IFREG|0644, st_size=509, ...}) = 0
> >> >>> ? ?mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS,
> >> >>> -1,
> >> >>> 0) = 0x7fb125554000
> >> >>> ? ?read(3, "root:x:0:0:root:/root:/bin/bash\n"..., 4096) = 509
> >> >>> ? ?read(3, "", 4096) ? ? ? ? ? ? ? ? ? ? ? = 0
> >> >>> ? ?close(3) ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?= 0
> >> >>> ? ?munmap(0x7fb125554000, 4096) ? ? ? ? ? ?= 0
> >> >>> -> ?ioctl(0, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or
> >> >>> TCGETS, 0x7fff12682c98) = -1 ENOTTY (Inappropriate ioctl for device)
> >> >>> ? ?write(2, "Fatal error: exception Unix.Unix"..., 59) = 59
> >> >>> ? ?exit_group(2) ? ? ? ? ? ? ? ? ? ? ? ? ? = ?
> >> >>
> >> >>
> >> >>
> >> >> Someone knew the answer, man 3 getlogin reads:
> >> >>
> >> >> ? ? ? ?Note that glibc does not follow the POSIX specification and uses
> >> >> ? ? ? ?stdin instead of /dev/tty. ?A bug. ?(Other recent systems, like
> >> >> ? ? ? ?SunOS 5.8 and HP-UX 11.11 and FreeBSD 4.8 all return the login
> >> >> ? ? ? ?name also when stdin is redirected.)
> >> >>
> >> >>
> >> >> Regards
> >> >
> >> >
> >> >
> >> >
> >> > --
> >> > Caml-list mailing list. ?Subscription management and archives:
> >> > https://sympa-roc.inria.fr/wws/info/caml-list
> >> > Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> >> > Bug reports: http://caml.inria.fr/bin/caml-bugs
> >> >
> >>
> >>
> >> --
> >> Caml-list mailing list. ?Subscription management and archives:
> >> https://sympa-roc.inria.fr/wws/info/caml-list
> >> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> >> Bug reports: http://caml.inria.fr/bin/caml-bugs
> >>
> >
> 
> 
> -- 
> Caml-list mailing list.  Subscription management and archives:
> https://sympa-roc.inria.fr/wws/info/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
> 


From info at gerd-stolpmann.de  Wed Mar 21 00:51:54 2012
From: info at gerd-stolpmann.de (Gerd Stolpmann)
Date: Wed, 21 Mar 2012 01:51:54 +0100
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
Message-ID: <c7dd99924eaad3383d8d529f66dc1752.squirrel@gps.dynxs.de>



I second this. There is one OS where getlogin does not follow POSIX and is
maybe insecure, and the fix cannot be to hide the function for all other
OS. IMHO, these differences should be handled on a higher level, and not
in the module providing the bindings.

Semantically, there is a big difference between getlogin and getuid:
getlogin shall also work when the user calls a setuid program which in
turn invokes a script. These script commands can then use getlogin to
identify the original user (which is defined as the user of the session =
the user of the controlling terminal). In contrast, getuid would return
the uid to which setuid switched (for the script).

So, I'd say, you cannot repair getlogin with getuid. The best fix is
probably to just run `/usr/bin/logname </dev/tty` and read the printed
name.

Gerd

> getpwuid(getuid()) is not a synonym for get_login (refer to the
> discussion in the POSIX standard[^1]). You should not shadow posix
functions by functions with different semantics in the Unix modules;
providing your own abstraction over the OS is a commendable goal but you
should do so without silently bypassing core functions.
>
> Till
> [1]:http://pubs.opengroup.org/onlinepubs/007904975/functions/getlogin.html
>
>
> On Tue, Mar 20, 2012 at 2:28 PM, David House <dhouse at janestreet.com> wrote:
>> Note that Jane Street's core library [1] does not use getlogin(3) in
its replacement Unix module, for exactly this reason:
>>
>> (* The standard getlogin function goes through utmp which is
unreliable, ??see the BUGS section of getlogin(3) *)
>> let getlogin_orig = Unix.getlogin
>> let getlogin () = (Unix.getpwuid (getuid ())).Unix.pw_name
>>
>> [1]: https://bitbucket.org/yminsky/ocaml-core/wiki/Home
>>
>> I just tested your specific example, and it worked fine.
>>
>>
>> On Tue 20 Mar 2012 06:07:59 PM GMT, Ricardo Catalinas Jim??nez wrote:
>>>
>>> On Tue, Mar 20, 2012 at 06:51:13PM +0100, Ricardo Catalinas Jim??nez
wrote:
>>>>
>>>> I found out the next issue in this simple code:
>>>>
>>>> let () =
>>>> ?? ?? print_endline "Hello";
>>>> ?? ?? print_endline (Unix.getlogin ())
>>>>
>>>> Running in the normal case, with `./a.out' gives:
>>>>
>>>> Hello
>>>> ricardo
>>>>
>>>> But running like `./a.out</dev/null' makes Unix.getlogin fail:
>>>>
>>>> Hello
>>>> Fatal error: exception Unix.Unix_error(20, "getlogin", "")
>>>>
>>>> A simple strace reveals the problem:
>>>>
>>>> ?? ??open("/etc/passwd", O_RDONLY|O_CLOEXEC) = 3
>>>> ?? ??fstat(3, {st_mode=S_IFREG|0644, st_size=509, ...}) = 0
>>>> ?? ??mmap(NULL, 4096, PROT_READ|PROT_WRITE,
MAP_PRIVATE|MAP_ANONYMOUS, -1,
>>>> 0) = 0x7fb125554000
>>>> ?? ??read(3, "root:x:0:0:root:/root:/bin/bash\n"..., 4096) = 509 ??
??read(3, "", 4096) ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? = 0
>>>> ?? ??close(3) ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??= 0 ??
??munmap(0x7fb125554000, 4096) ?? ?? ?? ?? ?? ??= 0
>>>> -> ??ioctl(0, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or
TCGETS, 0x7fff12682c98) = -1 ENOTTY (Inappropriate ioctl for device)
?? ??write(2, "Fatal error: exception Unix.Unix"..., 59) = 59 ??
??exit_group(2) ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? = ?
>>>
>>>
>>>
>>> Someone knew the answer, man 3 getlogin reads:
>>>
>>> ?? ?? ?? ??Note that glibc does not follow the POSIX specification and
uses
>>> ?? ?? ?? ??stdin instead of /dev/tty. ??A bug. ??(Other recent
systems, like
>>> ?? ?? ?? ??SunOS 5.8 and HP-UX 11.11 and FreeBSD 4.8 all return the login
>>> ?? ?? ?? ??name also when stdin is redirected.)
>>>
>>>
>>> Regards
>>
>>
>>
>>
>> --
>> Caml-list mailing list. ??Subscription management and archives:
https://sympa-roc.inria.fr/wws/info/caml-list
>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>> Bug reports: http://caml.inria.fr/bin/caml-bugs
>>
>
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa-roc.inria.fr/wws/info/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>
>


-- 
Gerd Stolpmann, Darmstadt, Germany    gerd at gerd-stolpmann.de
Creator of GODI and camlcity.org.
Contact details:        http://www.camlcity.org/contact.html
Company homepage:       http://www.gerd-stolpmann.de
*** Searching for new projects! Need consulting for system
*** programming in Ocaml? Gerd Stolpmann can help you.



-- 
Gerd Stolpmann, Darmstadt, Germany    gerd at gerd-stolpmann.de
Creator of GODI and camlcity.org.
Contact details:        http://www.camlcity.org/contact.html
Company homepage:       http://www.gerd-stolpmann.de
*** Searching for new projects! Need consulting for system
*** programming in Ocaml? Gerd Stolpmann can help you.



-- 
Caml-list mailing list.  Subscription management and archives:
https://sympa-roc.inria.fr/wws/info/caml-list
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
Bug reports: http://caml.inria.fr/bin/caml-bugs



From av1474 at comtv.ru  Wed Mar 21 02:17:07 2012
From: av1474 at comtv.ru (malc)
Date: Wed, 21 Mar 2012 06:17:07 +0400 (MSK)
Subject: [Caml-list] Unix.getlogin () fails when stdin is redirected
In-Reply-To: <20120320175113.GC935@viper.local>
References: <20120320175113.GC935@viper.local>
Message-ID: <alpine.LNX.2.00.1203210615050.4731@linmac>


On Tue, 20 Mar 2012, Ricardo Catalinas Jim?nez wrote:

> I found out the next issue in this simple code:
> 
> let () =
>     print_endline "Hello";
>     print_endline (Unix.getlogin ())
> 
> Running in the normal case, with `./a.out' gives:

FWIW on my machine (linux) calling getlogin from any PTY always fails
(be it screen or some sort of X terminal)

[..snip..]

-- 
mailto:av1474 at comtv.ru

-- 
Caml-list mailing list.  Subscription management and archives:
https://sympa-roc.inria.fr/wws/info/caml-list
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
Bug reports: http://caml.inria.fr/bin/caml-bugs



From yminsky at janestreet.com  Wed Mar 21 11:47:30 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Wed, 21 Mar 2012 07:47:30 -0400
Subject: [Caml-list] Unix.getlogin () fails when stdin is redirected
In-Reply-To: <3FAFC120-3FAF-4818-8AF8-7B2742B74E80@recoil.org>
References: <c7dd99924eaad3383d8d529f66dc1752.squirrel@gps.dynxs.de>
	<CACLX4jR7rwEB5pKjt2oHPETsVesrqPJR6uk5oTU29cgWak6Cig@mail.gmail.com>
	<CACLX4jQRy93XnPp+YCQt3zdZ9CP79Jx7Vgq4HDEFuEqnpKHLGA@mail.gmail.com>
	<3FAFC120-3FAF-4818-8AF8-7B2742B74E80@recoil.org>
Message-ID: <CACLX4jSabYsyvHSKeSaY30WeVb7VG51DUkw7QjpDthwFcReiYA@mail.gmail.com>

I'm not sure how bad I feel about having surprising results in that
degenerate case!

Anil, do you have a view as to what Core should do for getlogin?  I'm still
not sure we should change anything, or if we should, what change to make...

I am sure that I hate Unix, though.  That Xen client thing is sounding
better every day...
On Mar 21, 2012 7:35 AM, "Anil Madhavapeddy" <anil at recoil.org> wrote:

> Bear in mind that getpwuid(getuid()) can return unexpected results if you
> have multiple usernames mapped to the same numeric id (bad idea, but it
> does happen, for example with the toor account often used for an
> alternative root shell).
>
> The only reliable, portable results are the numeric ids from
> getuid/geteuid.
>
> -anil
>
> On 21 Mar 2012, at 02:29, Yaron Minsky wrote:
>
> I have to say, the manpage on this is downright hilarious:
>
> Unfortunately, it is often rather easy to fool getlogin(). Sometimes it
> does
> not work at all, because some program messed up the utmp file. Often, it
> gives only the first 8 characters of the login name. The user currently
> logged in on the controlling tty of our program need not be the user who
> started it. Avoid getlogin() for security-related purposes.
>
> Note that glibc does not follow the POSIX specification and uses stdin
> instead
> of /dev/tty. A bug. (Other recent systems, like SunOS 5.8 and HP-UX 11.11
> and FreeBSD 4.8 all return the login name also when stdin is redirected.)
>
> Nobody knows precisely what cuserid() does; avoid it in portable programs.
> Or
> avoid it altogether: use getpwuid(geteuid()) instead, if that is what you
>  meant. Do not use cuserid().
>
> So, on Linux getlogin returns mangled usernames sometimes, and should not
> be used for any "security" purposes.  getpwuid(getuid()) is sounding better
> and better...
>
> y
>
> On Tue, Mar 20, 2012 at 10:10 PM, Yaron Minsky <yminsky at janestreet.com>wrote:
>
>> Looping in ocaml-core list.
>>
>> On Tue, Mar 20, 2012 at 8:51 PM, Gerd Stolpmann <info at gerd-stolpmann.de>wrote:
>>
>>>
>>> I second this. There is one OS where getlogin does not follow POSIX and
>>> is
>>> maybe insecure, and the fix cannot be to hide the function for all other
>>> OS. IMHO, these differences should be handled on a higher level, and not
>>> in the module providing the bindings.
>>>
>>> Semantically, there is a big difference between getlogin and getuid:
>>> getlogin shall also work when the user calls a setuid program which in
>>> turn invokes a script. These script commands can then use getlogin to
>>> identify the original user (which is defined as the user of the session =
>>> the user of the controlling terminal). In contrast, getuid would return
>>> the uid to which setuid switched (for the script).
>>>
>>> So, I'd say, you cannot repair getlogin with getuid. The best fix is
>>> probably to just run `/usr/bin/logname </dev/tty` and read the printed
>>> name.
>>>
>>
>> I can think of a few solutions here:
>>
>>    - We can use getuid only on platforms where getlogin is busted
>>    - We can name our function something other than "getlogin", to avoid
>>    confusion.
>>    - We can shell-out, in the way you suggest, to implement getlogin on
>>    Linux.  My only worry is that this is also going to be somewhat fragile in
>>    its own way.  Does calling out to logname with the suggested redirect
>>    always work?
>>
>> I'm open to other suggestions.
>>
>> y
>>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120321/c7e629a6/attachment-0001.html>

From yminsky at janestreet.com  Wed Mar 21 14:10:37 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Wed, 21 Mar 2012 10:10:37 -0400
Subject: [Caml-list] Unix.getlogin () fails when stdin is redirected
In-Reply-To: <4F69CC8D.5090908@janestreet.com>
References: <c7dd99924eaad3383d8d529f66dc1752.squirrel@gps.dynxs.de>
	<CACLX4jR7rwEB5pKjt2oHPETsVesrqPJR6uk5oTU29cgWak6Cig@mail.gmail.com>
	<CACLX4jQRy93XnPp+YCQt3zdZ9CP79Jx7Vgq4HDEFuEqnpKHLGA@mail.gmail.com>
	<3FAFC120-3FAF-4818-8AF8-7B2742B74E80@recoil.org>
	<CACLX4jSabYsyvHSKeSaY30WeVb7VG51DUkw7QjpDthwFcReiYA@mail.gmail.com>
	<5389E853-E7F1-4AE3-AD97-E47300575B44@recoil.org>
	<4F69CC8D.5090908@janestreet.com>
Message-ID: <CACLX4jTVh_=uf2gh5-1pmU1w_4nUSHy3igOxgv8bw5RwuNOqiA@mail.gmail.com>

Maybe we could have more descriptive names for the other functions:

posix_getlogin
get_executing_login

The latter does better describe what the current getlogin does.

y

On Wed, Mar 21, 2012 at 8:41 AM, David House <dhouse at janestreet.com> wrote:

> Perhaps we should wrap Unix.getlogin with something with a mangled type,
> like:
>
>  let getlogin () = `You_probably_mean_get_my_**user_name
>  let getlogin_really () = Unix.getlogin ()
>  let get_my_user_name () = (Unix.getpwuid (getuid ())).Unix.pw_name
> (Plus, obviously, helpful comments in the mli.)
>
> This approach is pretty successful inside async. You are saved from
> introducing bugs due to deficiencies in libc, but if you really want
> getlogin(3), you have it. If you want it a lot, you can always rebind it
> locally.
>
>
> On Wed 21 Mar 2012 12:37:11 PM GMT, Anil Madhavapeddy wrote:
>
>> I agree with Till; the least surprising thing is to pass through the
>> underlying {g}libc library call. Any higher-level replacement can just have
>> a different name (for example, a version that goes through the password
>> database and returns *all* logins associated with the {e}uid might be the
>> safest thing).
>>
>> Xen thing making good progress. Soon! :-)
>>
>> -Anil
>>
>> On 21 Mar 2012, at 11:47, Yaron Minsky wrote:
>>
>>  I'm not sure how bad I feel about having surprising results in that
>>> degenerate case!
>>>
>>> Anil, do you have a view as to what Core should do for getlogin? I'm
>>> still not sure we should change anything, or if we should, what change to
>>> make...
>>>
>>> I am sure that I hate Unix, though. That Xen client thing is sounding
>>> better every day...
>>>
>>> On Mar 21, 2012 7:35 AM, "Anil Madhavapeddy" <anil at recoil.org <mailto:
>>> anil at recoil.org>> wrote:
>>>
>>>    Bear in mind that getpwuid(getuid()) can return unexpected
>>>    results if you have multiple usernames mapped to the same numeric
>>>    id (bad idea, but it does happen, for example with the toor
>>>    account often used for an alternative root shell).
>>>
>>>    The only reliable, portable results are the numeric ids from
>>>    getuid/geteuid.
>>>
>>>    -anil
>>>
>>>    On 21 Mar 2012, at 02:29, Yaron Minsky wrote:
>>>
>>>     I have to say, the manpage on this is downright hilarious:
>>>>
>>>>    Unfortunately, it is often rather easy to fool getlogin().
>>>>    Sometimes it does
>>>>    not work at all, because some program messed up the utmp file.
>>>>    Often, it
>>>>    gives only the first 8 characters of the login name. The user
>>>>    currently
>>>>    logged in on the controlling tty of our program need not be the
>>>>    user who
>>>>    started it. Avoid getlogin() for security-related purposes.
>>>>
>>>>    Note that glibc does not follow the POSIX specification and uses
>>>>    stdin instead
>>>>    of /dev/tty. A bug. (Other recent systems, like SunOS 5.8 and
>>>>    HP-UX 11.11
>>>>    and FreeBSD 4.8 all return the login name also when stdin is
>>>>    redirected.)
>>>>
>>>>    Nobody knows precisely what cuserid() does; avoid it in portable
>>>>    programs. Or
>>>>    avoid it altogether: use getpwuid(geteuid()) instead, if that is
>>>>    what you
>>>>    meant. Do not use cuserid().
>>>>
>>>>    So, on Linux getlogin returns mangled usernames sometimes, and
>>>>    should not be used for any "security" purposes.
>>>>    getpwuid(getuid()) is sounding better and better...
>>>>
>>>>    y
>>>>
>>>>    On Tue, Mar 20, 2012 at 10:10 PM, Yaron Minsky
>>>>    <yminsky at janestreet.com <mailto:yminsky at janestreet.com**>> wrote:
>>>>
>>>>        Looping in ocaml-core list.
>>>>
>>>>        On Tue, Mar 20, 2012 at 8:51 PM, Gerd Stolpmann
>>>>        <info at gerd-stolpmann.de <mailto:info at gerd-stolpmann.de**>>
>>>> wrote:
>>>>
>>>>
>>>>            I second this. There is one OS where getlogin does not
>>>>            follow POSIX and is
>>>>            maybe insecure, and the fix cannot be to hide the
>>>>            function for all other
>>>>            OS. IMHO, these differences should be handled on a
>>>>            higher level, and not
>>>>            in the module providing the bindings.
>>>>
>>>>            Semantically, there is a big difference between getlogin
>>>>            and getuid:
>>>>            getlogin shall also work when the user calls a setuid
>>>>            program which in
>>>>            turn invokes a script. These script commands can then
>>>>            use getlogin to
>>>>            identify the original user (which is defined as the user
>>>>            of the session =
>>>>            the user of the controlling terminal). In contrast,
>>>>            getuid would return
>>>>            the uid to which setuid switched (for the script).
>>>>
>>>>            So, I'd say, you cannot repair getlogin with getuid. The
>>>>            best fix is
>>>>            probably to just run `/usr/bin/logname </dev/tty` and
>>>>            read the printed
>>>>            name.
>>>>
>>>>
>>>>        I can think of a few solutions here:
>>>>
>>>>          * We can use getuid only on platforms where getlogin is busted
>>>>          * We can name our function something other than
>>>>
>>>>            "getlogin", to avoid confusion.
>>>>          * We can shell-out, in the way you suggest, to implement
>>>>
>>>>            getlogin on Linux. My only worry is that this is also
>>>>            going to be somewhat fragile in its own way. Does
>>>>            calling out to logname with the suggested redirect
>>>>            always work?
>>>>
>>>>        I'm open to other suggestions.
>>>>
>>>>        y
>>>>
>>>>
>>>>
>>>
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120321/20ab5766/attachment-0001.html>

From anil at recoil.org  Wed Mar 21 11:35:25 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Wed, 21 Mar 2012 11:35:25 +0000
Subject: [Caml-list] Unix.getlogin () fails when stdin is redirected
In-Reply-To: <CACLX4jQRy93XnPp+YCQt3zdZ9CP79Jx7Vgq4HDEFuEqnpKHLGA@mail.gmail.com>
References: <c7dd99924eaad3383d8d529f66dc1752.squirrel@gps.dynxs.de> <CACLX4jR7rwEB5pKjt2oHPETsVesrqPJR6uk5oTU29cgWak6Cig@mail.gmail.com> <CACLX4jQRy93XnPp+YCQt3zdZ9CP79Jx7Vgq4HDEFuEqnpKHLGA@mail.gmail.com>
Message-ID: <3FAFC120-3FAF-4818-8AF8-7B2742B74E80@recoil.org>

Bear in mind that getpwuid(getuid()) can return unexpected results if you have multiple usernames mapped to the same numeric id (bad idea, but it does happen, for example with the toor account often used for an alternative root shell).

The only reliable, portable results are the numeric ids from getuid/geteuid.

-anil

On 21 Mar 2012, at 02:29, Yaron Minsky wrote:

> I have to say, the manpage on this is downright hilarious:
> 
> Unfortunately, it is often rather easy to fool getlogin(). Sometimes it does
> not work at all, because some program messed up the utmp file. Often, it
> gives only the first 8 characters of the login name. The user currently
> logged in on the controlling tty of our program need not be the user who
> started it. Avoid getlogin() for security-related purposes.
> 
> Note that glibc does not follow the POSIX specification and uses stdin instead
> of /dev/tty. A bug. (Other recent systems, like SunOS 5.8 and HP-UX 11.11
> and FreeBSD 4.8 all return the login name also when stdin is redirected.)
> 
> Nobody knows precisely what cuserid() does; avoid it in portable programs. Or
> avoid it altogether: use getpwuid(geteuid()) instead, if that is what you
> meant. Do not use cuserid().
> 
> So, on Linux getlogin returns mangled usernames sometimes, and should not be used for any "security" purposes.  getpwuid(getuid()) is sounding better and better...
> 
> y
> 
> On Tue, Mar 20, 2012 at 10:10 PM, Yaron Minsky <yminsky at janestreet.com> wrote:
> Looping in ocaml-core list.
> 
> On Tue, Mar 20, 2012 at 8:51 PM, Gerd Stolpmann <info at gerd-stolpmann.de> wrote:
> 
> I second this. There is one OS where getlogin does not follow POSIX and is
> maybe insecure, and the fix cannot be to hide the function for all other
> OS. IMHO, these differences should be handled on a higher level, and not
> in the module providing the bindings.
> 
> Semantically, there is a big difference between getlogin and getuid:
> getlogin shall also work when the user calls a setuid program which in
> turn invokes a script. These script commands can then use getlogin to
> identify the original user (which is defined as the user of the session =
> the user of the controlling terminal). In contrast, getuid would return
> the uid to which setuid switched (for the script).
> 
> So, I'd say, you cannot repair getlogin with getuid. The best fix is
> probably to just run `/usr/bin/logname </dev/tty` and read the printed
> name.
> 
> I can think of a few solutions here:
> We can use getuid only on platforms where getlogin is busted
> We can name our function something other than "getlogin", to avoid confusion.
> We can shell-out, in the way you suggest, to implement getlogin on Linux.  My only worry is that this is also going to be somewhat fragile in its own way.  Does calling out to logname with the suggested redirect always work?  
> I'm open to other suggestions.
> 
> y
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120321/f1be878b/attachment-0001.html>

From info at gerd-stolpmann.de  Wed Mar 21 11:29:19 2012
From: info at gerd-stolpmann.de (Gerd Stolpmann)
Date: Wed, 21 Mar 2012 12:29:19 +0100
Subject: [Caml-list] Unix.getlogin () fails when stdin is redirected
In-Reply-To: <alpine.LNX.2.00.1203210615050.4731@linmac>
References: <20120320175113.GC935@viper.local>
    <alpine.LNX.2.00.1203210615050.4731@linmac>
Message-ID: <21e18417ea60387375a493c44907735e.squirrel@gps.dynxs.de>



> On Tue, 20 Mar 2012, Ricardo Catalinas Jim?nez wrote:
>
>> I found out the next issue in this simple code:
>>
>> let () =
>>     print_endline "Hello";
>>     print_endline (Unix.getlogin ())
>>
>> Running in the normal case, with `./a.out' gives:
>
> FWIW on my machine (linux) calling getlogin from any PTY always fails
> (be it screen or some sort of X terminal)

I guess /var/run/utmp is not world-readable - which is a perfectly
reasonable configuration, and means that you disabled getlogin
administratively.

Does "last -f /var/run/utmp" give an output?

Gerd

> [..snip..]
>
> --
> mailto:av1474 at comtv.ru
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa-roc.inria.fr/wws/info/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>
>


-- 
Gerd Stolpmann, Darmstadt, Germany    gerd at gerd-stolpmann.de
Creator of GODI and camlcity.org.
Contact details:        http://www.camlcity.org/contact.html
Company homepage:       http://www.gerd-stolpmann.de
*** Searching for new projects! Need consulting for system
*** programming in Ocaml? Gerd Stolpmann can help you.



-- 
Caml-list mailing list.  Subscription management and archives:
https://sympa-roc.inria.fr/wws/info/caml-list
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
Bug reports: http://caml.inria.fr/bin/caml-bugs



From anil at recoil.org  Wed Mar 21 12:37:11 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Wed, 21 Mar 2012 12:37:11 +0000
Subject: [Caml-list] Unix.getlogin () fails when stdin is redirected
In-Reply-To: <CACLX4jSabYsyvHSKeSaY30WeVb7VG51DUkw7QjpDthwFcReiYA@mail.gmail.com>
References: <c7dd99924eaad3383d8d529f66dc1752.squirrel@gps.dynxs.de> <CACLX4jR7rwEB5pKjt2oHPETsVesrqPJR6uk5oTU29cgWak6Cig@mail.gmail.com> <CACLX4jQRy93XnPp+YCQt3zdZ9CP79Jx7Vgq4HDEFuEqnpKHLGA@mail.gmail.com> <3FAFC120-3FAF-4818-8AF8-7B2742B74E80@recoil.org> <CACLX4jSabYsyvHSKeSaY30WeVb7VG51DUkw7QjpDthwFcReiYA@mail.gmail.com>
Message-ID: <5389E853-E7F1-4AE3-AD97-E47300575B44@recoil.org>

I agree with Till; the least surprising thing is to pass through the underlying {g}libc library call.  Any higher-level replacement can just have a different name (for example, a version that goes through the password database and returns *all* logins associated with the {e}uid might be the safest thing).

Xen thing making good progress. Soon! :-)

-Anil

On 21 Mar 2012, at 11:47, Yaron Minsky wrote:

> I'm not sure how bad I feel about having surprising results in that degenerate case!
> 
> Anil, do you have a view as to what Core should do for getlogin?  I'm still not sure we should change anything, or if we should, what change to make...
> 
> I am sure that I hate Unix, though.  That Xen client thing is sounding better every day...
> 
> On Mar 21, 2012 7:35 AM, "Anil Madhavapeddy" <anil at recoil.org> wrote:
> Bear in mind that getpwuid(getuid()) can return unexpected results if you have multiple usernames mapped to the same numeric id (bad idea, but it does happen, for example with the toor account often used for an alternative root shell).
> 
> The only reliable, portable results are the numeric ids from getuid/geteuid.
> 
> -anil
> 
> On 21 Mar 2012, at 02:29, Yaron Minsky wrote:
> 
>> I have to say, the manpage on this is downright hilarious:
>> 
>> Unfortunately, it is often rather easy to fool getlogin(). Sometimes it does
>> not work at all, because some program messed up the utmp file. Often, it
>> gives only the first 8 characters of the login name. The user currently
>> logged in on the controlling tty of our program need not be the user who
>> started it. Avoid getlogin() for security-related purposes.
>> 
>> Note that glibc does not follow the POSIX specification and uses stdin instead
>> of /dev/tty. A bug. (Other recent systems, like SunOS 5.8 and HP-UX 11.11
>> and FreeBSD 4.8 all return the login name also when stdin is redirected.)
>> 
>> Nobody knows precisely what cuserid() does; avoid it in portable programs. Or
>> avoid it altogether: use getpwuid(geteuid()) instead, if that is what you
>> meant. Do not use cuserid().
>> 
>> So, on Linux getlogin returns mangled usernames sometimes, and should not be used for any "security" purposes.  getpwuid(getuid()) is sounding better and better...
>> 
>> y
>> 
>> On Tue, Mar 20, 2012 at 10:10 PM, Yaron Minsky <yminsky at janestreet.com> wrote:
>> Looping in ocaml-core list.
>> 
>> On Tue, Mar 20, 2012 at 8:51 PM, Gerd Stolpmann <info at gerd-stolpmann.de> wrote:
>> 
>> I second this. There is one OS where getlogin does not follow POSIX and is
>> maybe insecure, and the fix cannot be to hide the function for all other
>> OS. IMHO, these differences should be handled on a higher level, and not
>> in the module providing the bindings.
>> 
>> Semantically, there is a big difference between getlogin and getuid:
>> getlogin shall also work when the user calls a setuid program which in
>> turn invokes a script. These script commands can then use getlogin to
>> identify the original user (which is defined as the user of the session =
>> the user of the controlling terminal). In contrast, getuid would return
>> the uid to which setuid switched (for the script).
>> 
>> So, I'd say, you cannot repair getlogin with getuid. The best fix is
>> probably to just run `/usr/bin/logname </dev/tty` and read the printed
>> name.
>> 
>> I can think of a few solutions here:
>> We can use getuid only on platforms where getlogin is busted
>> We can name our function something other than "getlogin", to avoid confusion.
>> We can shell-out, in the way you suggest, to implement getlogin on Linux.  My only worry is that this is also going to be somewhat fragile in its own way.  Does calling out to logname with the suggested redirect always work?  
>> I'm open to other suggestions.
>> 
>> y
>> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120321/b98d8ba5/attachment-0001.html>

From dhouse at janestreet.com  Wed Mar 21 12:41:49 2012
From: dhouse at janestreet.com (David House)
Date: Wed, 21 Mar 2012 12:41:49 +0000
Subject: [Caml-list] Unix.getlogin () fails when stdin is redirected
In-Reply-To: <5389E853-E7F1-4AE3-AD97-E47300575B44@recoil.org>
References: <c7dd99924eaad3383d8d529f66dc1752.squirrel@gps.dynxs.de> <CACLX4jR7rwEB5pKjt2oHPETsVesrqPJR6uk5oTU29cgWak6Cig@mail.gmail.com> <CACLX4jQRy93XnPp+YCQt3zdZ9CP79Jx7Vgq4HDEFuEqnpKHLGA@mail.gmail.com> <3FAFC120-3FAF-4818-8AF8-7B2742B74E80@recoil.org> <CACLX4jSabYsyvHSKeSaY30WeVb7VG51DUkw7QjpDthwFcReiYA@mail.gmail.com> <5389E853-E7F1-4AE3-AD97-E47300575B44@recoil.org>
Message-ID: <4F69CC8D.5090908@janestreet.com>


Perhaps we should wrap Unix.getlogin with something with a mangled 
type, like:

  let getlogin () = `You_probably_mean_get_my_user_name
  let getlogin_really () = Unix.getlogin ()
  let get_my_user_name () = (Unix.getpwuid (getuid ())).Unix.pw_name 

(Plus, obviously, helpful comments in the mli.)

This approach is pretty successful inside async. You are saved from 
introducing bugs due to deficiencies in libc, but if you really want 
getlogin(3), you have it. If you want it a lot, you can always rebind 
it locally.

On Wed 21 Mar 2012 12:37:11 PM GMT, Anil Madhavapeddy wrote:
> I agree with Till; the least surprising thing is to pass through the 
> underlying {g}libc library call. Any higher-level replacement can just 
> have a different name (for example, a version that goes through the 
> password database and returns *all* logins associated with the {e}uid 
> might be the safest thing).
>
> Xen thing making good progress. Soon! :-)
>
> -Anil
>
> On 21 Mar 2012, at 11:47, Yaron Minsky wrote:
>
>> I'm not sure how bad I feel about having surprising results in that 
>> degenerate case!
>>
>> Anil, do you have a view as to what Core should do for getlogin? I'm 
>> still not sure we should change anything, or if we should, what 
>> change to make...
>>
>> I am sure that I hate Unix, though. That Xen client thing is sounding 
>> better every day...
>>
>> On Mar 21, 2012 7:35 AM, "Anil Madhavapeddy" <anil at recoil.org 
>> <mailto:anil at recoil.org>> wrote:
>>
>>     Bear in mind that getpwuid(getuid()) can return unexpected
>>     results if you have multiple usernames mapped to the same numeric
>>     id (bad idea, but it does happen, for example with the toor
>>     account often used for an alternative root shell).
>>
>>     The only reliable, portable results are the numeric ids from
>>     getuid/geteuid.
>>
>>     -anil
>>
>>     On 21 Mar 2012, at 02:29, Yaron Minsky wrote:
>>
>>>     I have to say, the manpage on this is downright hilarious:
>>>
>>>     Unfortunately, it is often rather easy to fool getlogin().
>>>     Sometimes it does
>>>     not work at all, because some program messed up the utmp file.
>>>     Often, it
>>>     gives only the first 8 characters of the login name. The user
>>>     currently
>>>     logged in on the controlling tty of our program need not be the
>>>     user who
>>>     started it. Avoid getlogin() for security-related purposes.
>>>
>>>     Note that glibc does not follow the POSIX specification and uses
>>>     stdin instead
>>>     of /dev/tty. A bug. (Other recent systems, like SunOS 5.8 and
>>>     HP-UX 11.11
>>>     and FreeBSD 4.8 all return the login name also when stdin is
>>>     redirected.)
>>>
>>>     Nobody knows precisely what cuserid() does; avoid it in portable
>>>     programs. Or
>>>     avoid it altogether: use getpwuid(geteuid()) instead, if that is
>>>     what you
>>>     meant. Do not use cuserid().
>>>
>>>     So, on Linux getlogin returns mangled usernames sometimes, and
>>>     should not be used for any "security" purposes.
>>>     getpwuid(getuid()) is sounding better and better...
>>>
>>>     y
>>>
>>>     On Tue, Mar 20, 2012 at 10:10 PM, Yaron Minsky
>>>     <yminsky at janestreet.com <mailto:yminsky at janestreet.com>> wrote:
>>>
>>>         Looping in ocaml-core list.
>>>
>>>         On Tue, Mar 20, 2012 at 8:51 PM, Gerd Stolpmann
>>>         <info at gerd-stolpmann.de <mailto:info at gerd-stolpmann.de>> wrote:
>>>
>>>
>>>             I second this. There is one OS where getlogin does not
>>>             follow POSIX and is
>>>             maybe insecure, and the fix cannot be to hide the
>>>             function for all other
>>>             OS. IMHO, these differences should be handled on a
>>>             higher level, and not
>>>             in the module providing the bindings.
>>>
>>>             Semantically, there is a big difference between getlogin
>>>             and getuid:
>>>             getlogin shall also work when the user calls a setuid
>>>             program which in
>>>             turn invokes a script. These script commands can then
>>>             use getlogin to
>>>             identify the original user (which is defined as the user
>>>             of the session =
>>>             the user of the controlling terminal). In contrast,
>>>             getuid would return
>>>             the uid to which setuid switched (for the script).
>>>
>>>             So, I'd say, you cannot repair getlogin with getuid. The
>>>             best fix is
>>>             probably to just run `/usr/bin/logname </dev/tty` and
>>>             read the printed
>>>             name.
>>>
>>>
>>>         I can think of a few solutions here:
>>>
>>>           * We can use getuid only on platforms where getlogin is busted
>>>           * We can name our function something other than
>>>             "getlogin", to avoid confusion.
>>>           * We can shell-out, in the way you suggest, to implement
>>>             getlogin on Linux. My only worry is that this is also
>>>             going to be somewhat fragile in its own way. Does
>>>             calling out to logname with the suggested redirect
>>>             always work?
>>>
>>>         I'm open to other suggestions.
>>>
>>>         y
>>>
>>>
>>
>




From edwin+ml-ocaml at etorok.net  Wed Mar 21 12:26:30 2012
From: edwin+ml-ocaml at etorok.net (=?UTF-8?B?VMO2csO2ayBFZHdpbg==?=)
Date: Wed, 21 Mar 2012 14:26:30 +0200
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <20120320224525.GE3352@siouxsie>
References: <20120320175113.GC935@viper.local> <20120320180759.GE935@viper.local> <4F68CC67.3020207@janestreet.com> <CAHJESt3W8_B8pusqV1qFeNBTZuzD=Vxh41E57pCr1SNZbYTdwg@mail.gmail.com> <CADKNfhJm3unJTRyFLAxZDRFKeOAccfEA+fhXNMk1+kCFAa+0Xw@mail.gmail.com> <CAHJESt0O3yLjNPkexha_37OZQoLFobX4S-R1CZhvfzOasXWXgA@mail.gmail.com> <20120320224525.GE3352@siouxsie>
Message-ID: <4F69C8F6.2050408@etorok.net>


On 03/21/2012 12:45 AM, oliver wrote:
> Are there so many bugs in glibc that fixing this one means waiting
> in a long, long queue... and bugfixes will need months or years?
> 
> Are there any reasons this bug is not already fixed?
> And since when is it known?

Using stdin might be on purpose, this is what a glibc comment says:
  /* Get name of tty connected to fd 0.  Return NULL if not a tty or
     if fd 0 isn't open.  Note that a lot of documentation says that
     getlogin() is based on the controlling terminal---what they
     really mean is "the terminal connected to standard input".  The
     getlogin() implementation of DEC Unix, SunOS, Solaris, HP-UX all
     return NULL if fd 0 has been closed, so this is the compatible
     thing to do.  Note that ttyname(open("/dev/tty")) on those
     systems returns /dev/tty, so that is not a possible solution for
     getlogin().  */

--Edwin

-- 
Caml-list mailing list.  Subscription management and archives:
https://sympa-roc.inria.fr/wws/info/caml-list
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
Bug reports: http://caml.inria.fr/bin/caml-bugs



From av1474 at comtv.ru  Wed Mar 21 17:59:54 2012
From: av1474 at comtv.ru (malc)
Date: Wed, 21 Mar 2012 21:59:54 +0400 (MSK)
Subject: [Caml-list] Unix.getlogin () fails when stdin is redirected
In-Reply-To: <21e18417ea60387375a493c44907735e.squirrel@gps.dynxs.de>
References: <20120320175113.GC935@viper.local>    <alpine.LNX.2.00.1203210615050.4731@linmac> <21e18417ea60387375a493c44907735e.squirrel@gps.dynxs.de>
Message-ID: <alpine.LNX.2.00.1203212159050.1520@linmac>


On Wed, 21 Mar 2012, Gerd Stolpmann wrote:

> 
> > On Tue, 20 Mar 2012, Ricardo Catalinas Jim?nez wrote:
> >
> >> I found out the next issue in this simple code:
> >>
> >> let () =
> >>     print_endline "Hello";
> >>     print_endline (Unix.getlogin ())
> >>
> >> Running in the normal case, with `./a.out' gives:
> >
> > FWIW on my machine (linux) calling getlogin from any PTY always fails
> > (be it screen or some sort of X terminal)
> 
> I guess /var/run/utmp is not world-readable - which is a perfectly
> reasonable configuration, and means that you disabled getlogin
> administratively.
> 
> Does "last -f /var/run/utmp" give an output?

Yep

~$ last -f /var/run/utmp 
malc     tty1                          Wed Mar 21 21:57   still logged in   
reboot   system boot                   Wed Mar 21 21:57          (00:01)    

utmp begins Wed Mar 21 21:57:23 2012
~$ ls -l /var/run/utmp 
-rw-r--r-- 1 root root 3840 2012-03-21 21:57 /var/run/utmp

[..snip..]

-- 
mailto:av1474 at comtv.ru

-- 
Caml-list mailing list.  Subscription management and archives:
https://sympa-roc.inria.fr/wws/info/caml-list
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
Bug reports: http://caml.inria.fr/bin/caml-bugs



From mbac at panix.com  Thu Mar 22 16:07:03 2012
From: mbac at panix.com (mbac at panix.com)
Date: Thu, 22 Mar 2012 12:07:03 -0400
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
Message-ID: <20120322160703.GA17435@panix.com>


House is on the right track. 

I find the name getlogin unfortunate, as it sounds a lot more promising
than it really is.  The best solution is probably more explicit names
and education.

(** A wrapper for the libc getlogin call.  You should probably
    use Sys.get_terminal_user instead.

    Raises a Unix_error if something goes wrong.
 *)
Unix.posix_getlogin : unit -> string

(** [get_terminal_user ()] attempts to determine the name of the user sitting
    at the terminal.  This relies on environment clues (such as Unix.posix_getlogin).
   
    This function may fail for daemons and detached processes.

    The name returned is not necessarily the user this process is executing as.
    See get_effective_user for that.
 *)
Sys.get_terminal_user  : unit -> string option

(** [get_effective_user ()] looks up the name of the user this process can
    access files as, send signals as, etc.  The name corresponds to the UNIX
    effective uid.  It's not necessarily the name of the user sitting at
    the terminal.
 *)
Sys.get_effective_user : unit -> string

(*
  Implementation:
    let get_effective_user () = (Unix.getpwuid (Unix.geteuid ())).Unix.pw_name
*)


From mbac at panix.com  Thu Mar 22 18:54:22 2012
From: mbac at panix.com (mbac at panix.com)
Date: Thu, 22 Mar 2012 14:54:22 -0400
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <CADy1MaufnSvZNv1sBxn737Rc5=1tw3azs2a5gxXAg4Soif3vXw@mail.gmail.com>
References: <20120322160703.GA17435@panix.com>
 <CADy1MaufnSvZNv1sBxn737Rc5=1tw3azs2a5gxXAg4Soif3vXw@mail.gmail.com>
Message-ID: <20120322185422.GA23706@panix.com>


Maybe it should ask them to look at both, so they think harder about
what they need.

On Thu, Mar 22, 2012 at 04:15:26PM +0000, David House wrote:
> This looks nice, but I'd say that the comment for
> [Unix.posix_getlogin] should actually refer the user to
> [Sys.get_effective_user] -- right?
> 
> On 22 March 2012 16:07,  <mbac at panix.com> wrote:
> > House is on the right track.
> >
> > I find the name getlogin unfortunate, as it sounds a lot more promising
> > than it really is. ?The best solution is probably more explicit names
> > and education.
> >
> > (** A wrapper for the libc getlogin call. ?You should probably
> > ? ?use Sys.get_terminal_user instead.
> >
> > ? ?Raises a Unix_error if something goes wrong.
> > ?*)
> > Unix.posix_getlogin : unit -> string
> >
> > (** [get_terminal_user ()] attempts to determine the name of the user sitting
> > ? ?at the terminal. ?This relies on environment clues (such as Unix.posix_getlogin).
> >
> > ? ?This function may fail for daemons and detached processes.
> >
> > ? ?The name returned is not necessarily the user this process is executing as.
> > ? ?See get_effective_user for that.
> > ?*)
> > Sys.get_terminal_user ?: unit -> string option
> >
> > (** [get_effective_user ()] looks up the name of the user this process can
> > ? ?access files as, send signals as, etc. ?The name corresponds to the UNIX
> > ? ?effective uid. ?It's not necessarily the name of the user sitting at
> > ? ?the terminal.
> > ?*)
> > Sys.get_effective_user : unit -> string
> >
> > (*
> > ?Implementation:
> > ? ?let get_effective_user () = (Unix.getpwuid (Unix.geteuid ())).Unix.pw_name
> > *)


From yminsky at janestreet.com  Thu Mar 22 19:14:52 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 22 Mar 2012 15:14:52 -0400
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <CADy1MaufnSvZNv1sBxn737Rc5=1tw3azs2a5gxXAg4Soif3vXw@mail.gmail.com>
References: <20120322160703.GA17435@panix.com>
	<CADy1MaufnSvZNv1sBxn737Rc5=1tw3azs2a5gxXAg4Soif3vXw@mail.gmail.com>
Message-ID: <CACLX4jSrA8h89DpKOBV04F6Sz=decP2F3dAQZ4UzzsbWV9e1fQ@mail.gmail.com>

That seems backwards.  In a setuid application, get_effective_user gives
you the user that is being su'd to.  getlogin gives you the user who owns
the tty.  Using getuid (rather than geteuid) seems like a closer
approximation.

y

On Thu, Mar 22, 2012 at 12:15 PM, David House <dmhouse at gmail.com> wrote:

> This looks nice, but I'd say that the comment for
> [Unix.posix_getlogin] should actually refer the user to
> [Sys.get_effective_user] -- right?
>
> On 22 March 2012 16:07,  <mbac at panix.com> wrote:
> > House is on the right track.
> >
> > I find the name getlogin unfortunate, as it sounds a lot more promising
> > than it really is.  The best solution is probably more explicit names
> > and education.
> >
> > (** A wrapper for the libc getlogin call.  You should probably
> >    use Sys.get_terminal_user instead.
> >
> >    Raises a Unix_error if something goes wrong.
> >  *)
> > Unix.posix_getlogin : unit -> string
> >
> > (** [get_terminal_user ()] attempts to determine the name of the user
> sitting
> >    at the terminal.  This relies on environment clues (such as
> Unix.posix_getlogin).
> >
> >    This function may fail for daemons and detached processes.
> >
> >    The name returned is not necessarily the user this process is
> executing as.
> >    See get_effective_user for that.
> >  *)
> > Sys.get_terminal_user  : unit -> string option
> >
> > (** [get_effective_user ()] looks up the name of the user this process
> can
> >    access files as, send signals as, etc.  The name corresponds to the
> UNIX
> >    effective uid.  It's not necessarily the name of the user sitting at
> >    the terminal.
> >  *)
> > Sys.get_effective_user : unit -> string
> >
> > (*
> >  Implementation:
> >    let get_effective_user () = (Unix.getpwuid (Unix.geteuid
> ())).Unix.pw_name
> > *)
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120322/385ea534/attachment-0001.html>

From dmhouse at gmail.com  Thu Mar 22 16:15:26 2012
From: dmhouse at gmail.com (David House)
Date: Thu, 22 Mar 2012 16:15:26 +0000
Subject: [Caml-list] Re: Unix.getlogin () fails when stdin is redirected
In-Reply-To: <20120322160703.GA17435@panix.com>
References: <20120322160703.GA17435@panix.com>
Message-ID: <CADy1MaufnSvZNv1sBxn737Rc5=1tw3azs2a5gxXAg4Soif3vXw@mail.gmail.com>


This looks nice, but I'd say that the comment for
[Unix.posix_getlogin] should actually refer the user to
[Sys.get_effective_user] -- right?

On 22 March 2012 16:07,  <mbac at panix.com> wrote:
> House is on the right track.
>
> I find the name getlogin unfortunate, as it sounds a lot more promising
> than it really is. ?The best solution is probably more explicit names
> and education.
>
> (** A wrapper for the libc getlogin call. ?You should probably
> ? ?use Sys.get_terminal_user instead.
>
> ? ?Raises a Unix_error if something goes wrong.
> ?*)
> Unix.posix_getlogin : unit -> string
>
> (** [get_terminal_user ()] attempts to determine the name of the user sitting
> ? ?at the terminal. ?This relies on environment clues (such as Unix.posix_getlogin).
>
> ? ?This function may fail for daemons and detached processes.
>
> ? ?The name returned is not necessarily the user this process is executing as.
> ? ?See get_effective_user for that.
> ?*)
> Sys.get_terminal_user ?: unit -> string option
>
> (** [get_effective_user ()] looks up the name of the user this process can
> ? ?access files as, send signals as, etc. ?The name corresponds to the UNIX
> ? ?effective uid. ?It's not necessarily the name of the user sitting at
> ? ?the terminal.
> ?*)
> Sys.get_effective_user : unit -> string
>
> (*
> ?Implementation:
> ? ?let get_effective_user () = (Unix.getpwuid (Unix.geteuid ())).Unix.pw_name
> *)


From ocaml-core at googlegroups.com  Fri Mar 30 04:20:00 2012
From: ocaml-core at googlegroups.com (ocaml-core at googlegroups.com)
Date: Fri, 30 Mar 2012 03:20:00 +0000
Subject: Moderator's spam report for ocaml-core@googlegroups.com
Message-ID: <0016e6d5665fd2b18704bc6d501b@google.com>


This message is being sent to you because you are a moderator of the group ocaml-core.

The following suspicious messages were sent to your group, but are being held in your moderation queue because they are classified as likely spam messages.

If you take no action, all the messages below will be discarded automatically as spam.

However, if you see any messages that are not spam below, you may approve them individually by going to:

http://groups.google.com/group/ocaml-core/pendmsg

Please do not mark this notification as spam; this is a service for group moderators. If you do not wish to receive these notifications in the future, you may change your preferences by going to:

http://groups.google.com/group/ocaml-core/manage_post


------- 1 of 1  -------
Subject: database for marketing to medical professions
>From: "Whittaker haggle" <beyjzhineMary at hostnoc.net>
Date: Mar 27 11:04AM -0700

Healthcare Data for the USA - Can be used for marketing
Many different medical specialties.
230,000 Emails in total. 
Full data records including title, physical address, phone, email, etc.. 
Reply back for details and a sample or put the word

Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=5982481789727255144


For more information about this message, please visit:
http://groups.google.com/support/bin/answer.py?hl=en&answer=165806



From markus.mottl at gmail.com  Fri Mar 30 17:19:38 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Fri, 30 Mar 2012 12:19:38 -0400
Subject: sexp_default
Message-ID: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>


Hi,

I have a patch for sexplib, which adds a new record field qualifier
"sexp_default".  It allows users to explicitly add the default
expression to be used when a record field is missing in an
S-expression.  E.g.:

  type t = { foo : int sexp_default(42) } with sexp

In this definition "foo" will default to "42" if the S-expression does
not specify "foo".  Any valid OCaml-expression is allowed within the
parentheses, including variables and even function calls.  When such a
record is converted to an S-expression, the normal behavior is to
always emit the field, no matter whether it is equivalent to the
default or not.  The reason is that unlike "sexp_list", "sexp_array",
etc., it may not be obvious to the reader of an S-expression what the
default may be.

If, however, default fields should be excluded from the conversion,
e.g. to generate a minimal default configuration file for later
refinement, the following is supported (note the exclamation mark at
the end):

  type t = { foo : int sexp_default(42)! } with sexp

Using manifest types, developers can easily generate equivalent
instantiations of a record type with different conversion behavior.
E.g.:

    type drop_foo_default = t = { foo : int sexp_default(foo)! } with sexp

This way different "default views" could be emitted for a given record.

Using manifest types together with module functors and maybe
first-class modules to do this dynamically for large numbers of
instantiations, one can also easily generate numerous default
converters for different contexts.  E.g.:

  module Make (Defaults : sig val default : t end) = struct
    type s = t = { foo : int sexp_default(Defaults.default.foo) } with sexp
  end

Some wizardry with modules and manifest types provides for almost
unlimited power for providing defaults and configuring how they are
emitted.

Let me know if this patch would likely be accepted or if there are any
suggestions for improvement, and I'll push it to my fork of OCaml
Core.

Regards,
Markus

-- 
Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From yminsky at janestreet.com  Fri Mar 30 20:45:20 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Fri, 30 Mar 2012 15:45:20 -0400
Subject: sexp_default
In-Reply-To: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
References: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
Message-ID: <CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>


This seems like a cool hack.  I'd like to wait for some of the other
folk who think about the syntax extensions to weigh in, but at first
glance, the proposal seems good.

I am a little worried about the semantics of !, though.  If I create a type:

    type t = { foo : int sexp_default(7)! } with sexp

then the round-tripping could be pretty weird.  In particular,
consider this sequence:

   { foo = 3 }
   |! sexp_of_t  (* this is () *)
   |! t_of_sexp  (* this is { foo = 7 } *)

This behavior seems pretty unfortunate.  Is that really what it does?

As a side note, Markus, if you're working on more patches: please
don't do merges in the stuff your proposing.  Yury's conversion code
doesn't work well on merges.  (merges purely within your code are
actually OK, as long as you're not merging in from different points in
the history that was exported from Jane Street.)

y

On Fri, Mar 30, 2012 at 12:19 PM, Markus Mottl <markus.mottl at gmail.com> wrote:
> Hi,
>
> I have a patch for sexplib, which adds a new record field qualifier
> "sexp_default". ?It allows users to explicitly add the default
> expression to be used when a record field is missing in an
> S-expression. ?E.g.:
>
> ?type t = { foo : int sexp_default(42) } with sexp
>
> In this definition "foo" will default to "42" if the S-expression does
> not specify "foo". ?Any valid OCaml-expression is allowed within the
> parentheses, including variables and even function calls. ?When such a
> record is converted to an S-expression, the normal behavior is to
> always emit the field, no matter whether it is equivalent to the
> default or not. ?The reason is that unlike "sexp_list", "sexp_array",
> etc., it may not be obvious to the reader of an S-expression what the
> default may be.
>
> If, however, default fields should be excluded from the conversion,
> e.g. to generate a minimal default configuration file for later
> refinement, the following is supported (note the exclamation mark at
> the end):
>
> ?type t = { foo : int sexp_default(42)! } with sexp
>
> Using manifest types, developers can easily generate equivalent
> instantiations of a record type with different conversion behavior.
> E.g.:
>
> ? ?type drop_foo_default = t = { foo : int sexp_default(foo)! } with sexp
>
> This way different "default views" could be emitted for a given record.
>
> Using manifest types together with module functors and maybe
> first-class modules to do this dynamically for large numbers of
> instantiations, one can also easily generate numerous default
> converters for different contexts. ?E.g.:
>
> ?module Make (Defaults : sig val default : t end) = struct
> ? ?type s = t = { foo : int sexp_default(Defaults.default.foo) } with sexp
> ?end
>
> Some wizardry with modules and manifest types provides for almost
> unlimited power for providing defaults and configuring how they are
> emitted.
>
> Let me know if this patch would likely be accepted or if there are any
> suggestions for improvement, and I'll push it to my fork of OCaml
> Core.
>
> Regards,
> Markus
>
> --
> Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From markus.mottl at gmail.com  Fri Mar 30 21:25:01 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Fri, 30 Mar 2012 16:25:01 -0400
Subject: sexp_default
In-Reply-To: <CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>
References: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
	<CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>
Message-ID: <CAP_800r3W-rKR2RjUnaaVPDJyU3G+whvoCyGnssiWd8CJ1YWsA@mail.gmail.com>


On Fri, Mar 30, 2012 at 15:45, Yaron Minsky <yminsky at janestreet.com> wrote:
> I am a little worried about the semantics of !, though. ?If I create a type:
>
> ? ?type t = { foo : int sexp_default(7)! } with sexp
>
> then the round-tripping could be pretty weird. ?In particular,
> consider this sequence:
>
> ? { foo = 3 }
> ? |! sexp_of_t ?(* this is () *)
> ? |! t_of_sexp ?(* this is { foo = 7 } *)
>
> This behavior seems pretty unfortunate. ?Is that really what it does?

No, it would consider equivalence to the default expression first to
determine whether to drop the field in the S-expression.  In your case
it would convert the record to ((foo 3)).  If, however, you had used {
foo = 7 }, then it would convert it to () as expected.  Without the !,
it would always emit the field no matter the content.

Due to that equivalence check it is probably not a good idea to use
expensive function calls or gargantuan values as default expressions.
But that doesn't seem necessary in practice anyway.

> As a side note, Markus, if you're working on more patches: please
> don't do merges in the stuff your proposing. ?Yury's conversion code
> doesn't work well on merges. ?(merges purely within your code are
> actually OK, as long as you're not merging in from different points in
> the history that was exported from Jane Street.)

Hm, well, that surely makes it hard to work on the same files, which
would require merges.  As long as we don't tread on each other's feet
that should be possible though.

-- 
Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From yminsky at janestreet.com  Fri Mar 30 21:44:29 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Fri, 30 Mar 2012 16:44:29 -0400
Subject: sexp_default
In-Reply-To: <CAP_800r3W-rKR2RjUnaaVPDJyU3G+whvoCyGnssiWd8CJ1YWsA@mail.gmail.com>
References: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
	<CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>
	<CAP_800r3W-rKR2RjUnaaVPDJyU3G+whvoCyGnssiWd8CJ1YWsA@mail.gmail.com>
Message-ID: <CACLX4jQZW9TX94ohh3XxUa7jGpPCsaV_ObKdWkH2RPTWGOP46g@mail.gmail.com>


On Fri, Mar 30, 2012 at 4:25 PM, Markus Mottl <markus.mottl at gmail.com> wrote:
> On Fri, Mar 30, 2012 at 15:45, Yaron Minsky <yminsky at janestreet.com> wrote:
>> I am a little worried about the semantics of !, though. ?If I create a type:
>>
>> ? ?type t = { foo : int sexp_default(7)! } with sexp
>>
>> then the round-tripping could be pretty weird. ?In particular,
>> consider this sequence:
>>
>> ? { foo = 3 }
>> ? |! sexp_of_t ?(* this is () *)
>> ? |! t_of_sexp ?(* this is { foo = 7 } *)
>>
>> This behavior seems pretty unfortunate. ?Is that really what it does?
>
> No, it would consider equivalence to the default expression first to
> determine whether to drop the field in the S-expression. ?In your case
> it would convert the record to ((foo 3)). ?If, however, you had used {
> foo = 7 }, then it would convert it to () as expected. ?Without the !,
> it would always emit the field no matter the content.
>
> Due to that equivalence check it is probably not a good idea to use
> expensive function calls or gargantuan values as default expressions.
> But that doesn't seem necessary in practice anyway.

Got it.  Is the equality check based on polymorphic compare, or
equality of the s-expression representation?

>> As a side note, Markus, if you're working on more patches: please
>> don't do merges in the stuff your proposing. ?Yury's conversion code
>> doesn't work well on merges. ?(merges purely within your code are
>> actually OK, as long as you're not merging in from different points in
>> the history that was exported from Jane Street.)
>
> Hm, well, that surely makes it hard to work on the same files, which
> would require merges. ?As long as we don't tread on each other's feet
> that should be possible though.

Yeah, we'll have to figure it out over time.  I think right now one
can do all the merging one wants, subject to the constraint that all
the work is anchored to the same spot in our HG repo.  But the
simplest use-case is just linear histories.  Right now Yury is
manually dealing with the conversion of the revisions we've pulled in
so far, which is kind of painful.

> --
> Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From markus.mottl at gmail.com  Fri Mar 30 21:57:26 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Fri, 30 Mar 2012 16:57:26 -0400
Subject: sexp_default
In-Reply-To: <CACLX4jQZW9TX94ohh3XxUa7jGpPCsaV_ObKdWkH2RPTWGOP46g@mail.gmail.com>
References: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
	<CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>
	<CAP_800r3W-rKR2RjUnaaVPDJyU3G+whvoCyGnssiWd8CJ1YWsA@mail.gmail.com>
	<CACLX4jQZW9TX94ohh3XxUa7jGpPCsaV_ObKdWkH2RPTWGOP46g@mail.gmail.com>
Message-ID: <CAP_800os1P_OnUCCBAhQXFRf0c6vp+MoaYzhaDA0Q_DCfVGEbQ@mail.gmail.com>


On Fri, Mar 30, 2012 at 16:44, Yaron Minsky <yminsky at janestreet.com> wrote:
> On Fri, Mar 30, 2012 at 4:25 PM, Markus Mottl <markus.mottl at gmail.com> wrote:
>> Due to that equivalence check it is probably not a good idea to use
>> expensive function calls or gargantuan values as default expressions.
>> But that doesn't seem necessary in practice anyway.
>
> Got it. ?Is the equality check based on polymorphic compare, or
> equality of the s-expression representation?

Polymorphic equality, which seems preferable for efficiency.  Neither
it nor equality of S-expressions is guaranteed to work on abstract
datatypes anyway.

> Yeah, we'll have to figure it out over time. ?I think right now one
> can do all the merging one wants, subject to the constraint that all
> the work is anchored to the same spot in our HG repo. ?But the
> simplest use-case is just linear histories. ?Right now Yury is
> manually dealing with the conversion of the revisions we've pulled in
> so far, which is kind of painful.

Ok, I'll not merge your tree into the one from which I push in the future.

-- 
Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From yminsky at janestreet.com  Fri Mar 30 22:28:03 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Fri, 30 Mar 2012 17:28:03 -0400
Subject: sexp_default
In-Reply-To: <CAP_800os1P_OnUCCBAhQXFRf0c6vp+MoaYzhaDA0Q_DCfVGEbQ@mail.gmail.com>
References: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
	<CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>
	<CAP_800r3W-rKR2RjUnaaVPDJyU3G+whvoCyGnssiWd8CJ1YWsA@mail.gmail.com>
	<CACLX4jQZW9TX94ohh3XxUa7jGpPCsaV_ObKdWkH2RPTWGOP46g@mail.gmail.com>
	<CAP_800os1P_OnUCCBAhQXFRf0c6vp+MoaYzhaDA0Q_DCfVGEbQ@mail.gmail.com>
Message-ID: <CACLX4jQbkDNS+sbU8BndJ8rL+5JBX94Umm+9uODox7VVfunZhw@mail.gmail.com>


On Fri, Mar 30, 2012 at 4:57 PM, Markus Mottl <markus.mottl at gmail.com> wrote:
> On Fri, Mar 30, 2012 at 16:44, Yaron Minsky <yminsky at janestreet.com> wrote:
>> On Fri, Mar 30, 2012 at 4:25 PM, Markus Mottl <markus.mottl at gmail.com> wrote:
>>> Due to that equivalence check it is probably not a good idea to use
>>> expensive function calls or gargantuan values as default expressions.
>>> But that doesn't seem necessary in practice anyway.
>>
>> Got it. ?Is the equality check based on polymorphic compare, or
>> equality of the s-expression representation?
>
> Polymorphic equality, which seems preferable for efficiency. ?Neither
> it nor equality of S-expressions is guaranteed to work on abstract
> datatypes anyway.

Hrm.  The polymorphic equality thing makes me a little sick  --- we're
actually trying to avoid polymorphic compare wherever we can these
days, for both performance and semantic reasons.  Is there a reason it
can't use comparison of s-expressions?  I don't think efficiency is a
primary concern here, since this is already fairly slow
pretty-printing code.

>> Yeah, we'll have to figure it out over time. ?I think right now one
>> can do all the merging one wants, subject to the constraint that all
>> the work is anchored to the same spot in our HG repo. ?But the
>> simplest use-case is just linear histories. ?Right now Yury is
>> manually dealing with the conversion of the revisions we've pulled in
>> so far, which is kind of painful.
>
> Ok, I'll not merge your tree into the one from which I push in the future.
>
> --
> Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From markus.mottl at gmail.com  Fri Mar 30 23:09:37 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Fri, 30 Mar 2012 18:09:37 -0400
Subject: sexp_default
In-Reply-To: <CACLX4jQbkDNS+sbU8BndJ8rL+5JBX94Umm+9uODox7VVfunZhw@mail.gmail.com>
References: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
	<CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>
	<CAP_800r3W-rKR2RjUnaaVPDJyU3G+whvoCyGnssiWd8CJ1YWsA@mail.gmail.com>
	<CACLX4jQZW9TX94ohh3XxUa7jGpPCsaV_ObKdWkH2RPTWGOP46g@mail.gmail.com>
	<CAP_800os1P_OnUCCBAhQXFRf0c6vp+MoaYzhaDA0Q_DCfVGEbQ@mail.gmail.com>
	<CACLX4jQbkDNS+sbU8BndJ8rL+5JBX94Umm+9uODox7VVfunZhw@mail.gmail.com>
Message-ID: <CAP_800r81mhsuYsDKsWFqw7gUmHfYQdfhZVDExhjj4vEiwc3MA@mail.gmail.com>


On Fri, Mar 30, 2012 at 17:28, Yaron Minsky <yminsky at janestreet.com> wrote:
> Hrm. ?The polymorphic equality thing makes me a little sick ?--- we're
> actually trying to avoid polymorphic compare wherever we can these
> days, for both performance and semantic reasons. ?Is there a reason it
> can't use comparison of s-expressions? ?I don't think efficiency is a
> primary concern here, since this is already fairly slow
> pretty-printing code.

I guess nobody is fully satisfied with polymorphic equality in
general.  I'm not sure there is any true gain in comparing
S-expressions.  One could imagine that some S-expression converters
normalize the representation so that e.g. sets, maps, etc., would
compare consistently, but this is not a given (e.g. hashtables).
Furthermore, in the vast majority of cases we would needlessly convert
a value to an S-expression just for equality checking even though it
need not be emitted in the first place - a rather expensive default
behavior.

The only consistent solution I can see is if the user can optionally
specify an equivalence relation, e.g. by having another optional
expression that contains such a function.  But this could turn out to
be extremely expensive: think of comparing hashtables.

Default field values are probably hardly ever changed back and forth
at runtime, especially in ways that would destroy pointer equality or
worse to a structurally distinct but semantically equivalent
representation.  Polymorphic equality checks would therefore almost
always just compare two identical pointers anyway, which is both
consistent and maximally efficient.  Even if a field were emitted that
need not be, this should never cause any issues other than diminished
output readability.

I'd therefore suggest to use polymorphic equality for the while being.
 If it really turns out to cause issues in practice, you can always
add the mentioned optional equality function later.

-- 
Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From jim.clune at gmail.com  Sat Mar 31 10:31:54 2012
From: jim.clune at gmail.com (Jim Clune)
Date: Sat, 31 Mar 2012 05:31:54 -0400
Subject: sexp_default
In-Reply-To: <CAP_800r81mhsuYsDKsWFqw7gUmHfYQdfhZVDExhjj4vEiwc3MA@mail.gmail.com>
References: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
	<CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>
	<CAP_800r3W-rKR2RjUnaaVPDJyU3G+whvoCyGnssiWd8CJ1YWsA@mail.gmail.com>
	<CACLX4jQZW9TX94ohh3XxUa7jGpPCsaV_ObKdWkH2RPTWGOP46g@mail.gmail.com>
	<CAP_800os1P_OnUCCBAhQXFRf0c6vp+MoaYzhaDA0Q_DCfVGEbQ@mail.gmail.com>
	<CACLX4jQbkDNS+sbU8BndJ8rL+5JBX94Umm+9uODox7VVfunZhw@mail.gmail.com>
	<CAP_800r81mhsuYsDKsWFqw7gUmHfYQdfhZVDExhjj4vEiwc3MA@mail.gmail.com>
Message-ID: <CAOZm+Pny2wN084hzXczt7J=RDiQCoz4uFSsJ2P0MhyARbuNseg@mail.gmail.com>


Hi, Markus. Your proposal is interesting, but I'm a little concerned
about this part:

> Using manifest types, developers can easily generate equivalent
> instantiations of a record type with different conversion behavior.
> E.g.:
>
>    type drop_foo_default = t = { foo : int sexp_default(foo)! } with sexp
>
> This way different "default views" could be emitted for a given record.

It is not clear to me whether this is best construed as a feature or a
bug. It seems to encourage people to make type-equivalences that have
sexp representations that can be generated by one type and parsed by
an "equivalent" type that has silently incompatible semantics. This,
combined with the fact that sexp representations do not embed the name
of the types or modules that generated them, looks to me to like a
recipe for bugs.

Do you consider this facilitation of different "default views" to be
an important aspect of the proposal? Or is there a milder version of
the proposal that does not have this feature?

- Jim


From yminsky at janestreet.com  Sat Mar 31 12:50:21 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Sat, 31 Mar 2012 07:50:21 -0400
Subject: sexp_default
In-Reply-To: <CAP_800r81mhsuYsDKsWFqw7gUmHfYQdfhZVDExhjj4vEiwc3MA@mail.gmail.com>
References: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
	<CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>
	<CAP_800r3W-rKR2RjUnaaVPDJyU3G+whvoCyGnssiWd8CJ1YWsA@mail.gmail.com>
	<CACLX4jQZW9TX94ohh3XxUa7jGpPCsaV_ObKdWkH2RPTWGOP46g@mail.gmail.com>
	<CAP_800os1P_OnUCCBAhQXFRf0c6vp+MoaYzhaDA0Q_DCfVGEbQ@mail.gmail.com>
	<CACLX4jQbkDNS+sbU8BndJ8rL+5JBX94Umm+9uODox7VVfunZhw@mail.gmail.com>
	<CAP_800r81mhsuYsDKsWFqw7gUmHfYQdfhZVDExhjj4vEiwc3MA@mail.gmail.com>
Message-ID: <CACLX4jQDYugo6mLJY8+oegG9YMHDa9CZ51+JUtR-NxY7N=5GpA@mail.gmail.com>


On Fri, Mar 30, 2012 at 6:09 PM, Markus Mottl <markus.mottl at gmail.com> wrote:
> On Fri, Mar 30, 2012 at 17:28, Yaron Minsky <yminsky at janestreet.com> wrote:
>> Hrm. ?The polymorphic equality thing makes me a little sick ?--- we're
>> actually trying to avoid polymorphic compare wherever we can these
>> days, for both performance and semantic reasons. ?Is there a reason it
>> can't use comparison of s-expressions? ?I don't think efficiency is a
>> primary concern here, since this is already fairly slow
>> pretty-printing code.
>
> I guess nobody is fully satisfied with polymorphic equality in
> general. ?I'm not sure there is any true gain in comparing
> S-expressions. ?One could imagine that some S-expression converters
> normalize the representation so that e.g. sets, maps, etc., would
> compare consistently, but this is not a given (e.g. hashtables).
> Furthermore, in the vast majority of cases we would needlessly convert
> a value to an S-expression just for equality checking even though it
> need not be emitted in the first place - a rather expensive default
> behavior.

Fair.

> The only consistent solution I can see is if the user can optionally
> specify an equivalence relation, e.g. by having another optional
> expression that contains such a function. ?But this could turn out to
> be extremely expensive: think of comparing hashtables.
>
> Default field values are probably hardly ever changed back and forth
> at runtime, especially in ways that would destroy pointer equality or
> worse to a structurally distinct but semantically equivalent
> representation. ?Polymorphic equality checks would therefore almost
> always just compare two identical pointers anyway, which is both
> consistent and maximally efficient. ?Even if a field were emitted that
> need not be, this should never cause any issues other than diminished
> output readability.
>
> I'd therefore suggest to use polymorphic equality for the while being.
> ?If it really turns out to cause issues in practice, you can always
> add the mentioned optional equality function later.

That sounds pretty reasonable.  Another option would be to use
physical equality, which would have the property that if you left the
default unmodified, it would work, but otherwise would re-output the
value.  That's got its own set of surprising issues as well, though.

y


From yminsky at janestreet.com  Sat Mar 31 12:53:32 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Sat, 31 Mar 2012 07:53:32 -0400
Subject: sexp_default
In-Reply-To: <CAOZm+Pny2wN084hzXczt7J=RDiQCoz4uFSsJ2P0MhyARbuNseg@mail.gmail.com>
References: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
	<CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>
	<CAP_800r3W-rKR2RjUnaaVPDJyU3G+whvoCyGnssiWd8CJ1YWsA@mail.gmail.com>
	<CACLX4jQZW9TX94ohh3XxUa7jGpPCsaV_ObKdWkH2RPTWGOP46g@mail.gmail.com>
	<CAP_800os1P_OnUCCBAhQXFRf0c6vp+MoaYzhaDA0Q_DCfVGEbQ@mail.gmail.com>
	<CACLX4jQbkDNS+sbU8BndJ8rL+5JBX94Umm+9uODox7VVfunZhw@mail.gmail.com>
	<CAP_800r81mhsuYsDKsWFqw7gUmHfYQdfhZVDExhjj4vEiwc3MA@mail.gmail.com>
	<CAOZm+Pny2wN084hzXczt7J=RDiQCoz4uFSsJ2P0MhyARbuNseg@mail.gmail.com>
Message-ID: <CACLX4jRGqMtLsNKt_gqFsbmd+L6TKMY+bWemg__ov0g0BLJGZg@mail.gmail.com>


I think of this kind of multiple-view trick as pretty standard.  We
use this internally quite a bit when we want to generate an alternate
view without creating a new type.  We just create a new type-alias,
and attach the specialized converters to that type.

I guess I'm just saying I'm in the "feature, not bug" camp.  That
said, I'm not sure what you mean when you talk about "silently
incompatible semantics".  Can you create a toy example of the kind of
bug you're concerned about?

y

On Sat, Mar 31, 2012 at 5:31 AM, Jim Clune <jim.clune at gmail.com> wrote:
> Hi, Markus. Your proposal is interesting, but I'm a little concerned
> about this part:
>
>> Using manifest types, developers can easily generate equivalent
>> instantiations of a record type with different conversion behavior.
>> E.g.:
>>
>> ? ?type drop_foo_default = t = { foo : int sexp_default(foo)! } with sexp
>>
>> This way different "default views" could be emitted for a given record.
>
> It is not clear to me whether this is best construed as a feature or a
> bug. It seems to encourage people to make type-equivalences that have
> sexp representations that can be generated by one type and parsed by
> an "equivalent" type that has silently incompatible semantics. This,
> combined with the fact that sexp representations do not embed the name
> of the types or modules that generated them, looks to me to like a
> recipe for bugs.
>
> Do you consider this facilitation of different "default views" to be
> an important aspect of the proposal? Or is there a milder version of
> the proposal that does not have this feature?
>
> - Jim


From jim.clune at gmail.com  Sat Mar 31 20:16:52 2012
From: jim.clune at gmail.com (Jim Clune)
Date: Sat, 31 Mar 2012 15:16:52 -0400
Subject: sexp_default
In-Reply-To: <CACLX4jRGqMtLsNKt_gqFsbmd+L6TKMY+bWemg__ov0g0BLJGZg@mail.gmail.com>
References: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
	<CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>
	<CAP_800r3W-rKR2RjUnaaVPDJyU3G+whvoCyGnssiWd8CJ1YWsA@mail.gmail.com>
	<CACLX4jQZW9TX94ohh3XxUa7jGpPCsaV_ObKdWkH2RPTWGOP46g@mail.gmail.com>
	<CAP_800os1P_OnUCCBAhQXFRf0c6vp+MoaYzhaDA0Q_DCfVGEbQ@mail.gmail.com>
	<CACLX4jQbkDNS+sbU8BndJ8rL+5JBX94Umm+9uODox7VVfunZhw@mail.gmail.com>
	<CAP_800r81mhsuYsDKsWFqw7gUmHfYQdfhZVDExhjj4vEiwc3MA@mail.gmail.com>
	<CAOZm+Pny2wN084hzXczt7J=RDiQCoz4uFSsJ2P0MhyARbuNseg@mail.gmail.com>
	<CACLX4jRGqMtLsNKt_gqFsbmd+L6TKMY+bWemg__ov0g0BLJGZg@mail.gmail.com>
Message-ID: <CAOZm+P=dr6HDGP1NER+DA-TRReiAZ-_a+tacC3c9XyxB_wmOTQ@mail.gmail.com>


Perhaps I shouldn't have used the word "semantics". Here is an example
of what I mean:

module A = struct
  type t = {
    guest : string;
    food : string sexp_default("steak")!;
  } with sexp
end

module B = struct
  type t = A.t = {
    guest : string;
    food : string sexp_default("fish");
  } with sexp
end

  let () =
    let original = { A.
      guest = "Bob";
      food = "steak";
    } in
    let x = B.t_of_sexp (A.sexp_of_t original) in
    printf "%s ordered %s\n" x.A.guest x.A.food

If I understand the proposal correctly, this will say that Bob ordered
fish even though he originally ordered steak. Obviously, one can write
custom sexp converters to get this behavior already. I'm just
questioning the desirability of having this be easy.

- Jim

On Sat, Mar 31, 2012 at 7:53 AM, Yaron Minsky <yminsky at janestreet.com> wrote:
> I think of this kind of multiple-view trick as pretty standard. ?We
> use this internally quite a bit when we want to generate an alternate
> view without creating a new type. ?We just create a new type-alias,
> and attach the specialized converters to that type.
>
> I guess I'm just saying I'm in the "feature, not bug" camp. ?That
> said, I'm not sure what you mean when you talk about "silently
> incompatible semantics". ?Can you create a toy example of the kind of
> bug you're concerned about?
>
> y
>
> On Sat, Mar 31, 2012 at 5:31 AM, Jim Clune <jim.clune at gmail.com> wrote:
>> Hi, Markus. Your proposal is interesting, but I'm a little concerned
>> about this part:
>>
>>> Using manifest types, developers can easily generate equivalent
>>> instantiations of a record type with different conversion behavior.
>>> E.g.:
>>>
>>> ? ?type drop_foo_default = t = { foo : int sexp_default(foo)! } with sexp
>>>
>>> This way different "default views" could be emitted for a given record.
>>
>> It is not clear to me whether this is best construed as a feature or a
>> bug. It seems to encourage people to make type-equivalences that have
>> sexp representations that can be generated by one type and parsed by
>> an "equivalent" type that has silently incompatible semantics. This,
>> combined with the fact that sexp representations do not embed the name
>> of the types or modules that generated them, looks to me to like a
>> recipe for bugs.
>>
>> Do you consider this facilitation of different "default views" to be
>> an important aspect of the proposal? Or is there a milder version of
>> the proposal that does not have this feature?
>>
>> - Jim


From markus.mottl at gmail.com  Sat Mar 31 20:25:38 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Sat, 31 Mar 2012 15:25:38 -0400
Subject: sexp_default
In-Reply-To: <CAOZm+Pny2wN084hzXczt7J=RDiQCoz4uFSsJ2P0MhyARbuNseg@mail.gmail.com>
References: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
	<CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>
	<CAP_800r3W-rKR2RjUnaaVPDJyU3G+whvoCyGnssiWd8CJ1YWsA@mail.gmail.com>
	<CACLX4jQZW9TX94ohh3XxUa7jGpPCsaV_ObKdWkH2RPTWGOP46g@mail.gmail.com>
	<CAP_800os1P_OnUCCBAhQXFRf0c6vp+MoaYzhaDA0Q_DCfVGEbQ@mail.gmail.com>
	<CACLX4jQbkDNS+sbU8BndJ8rL+5JBX94Umm+9uODox7VVfunZhw@mail.gmail.com>
	<CAP_800r81mhsuYsDKsWFqw7gUmHfYQdfhZVDExhjj4vEiwc3MA@mail.gmail.com>
	<CAOZm+Pny2wN084hzXczt7J=RDiQCoz4uFSsJ2P0MhyARbuNseg@mail.gmail.com>
Message-ID: <CAP_800qRswhg2R7RqX-uMS2EDcXiCxKAUamZzQNaAk-szaQ_uw@mail.gmail.com>


On Sat, Mar 31, 2012 at 05:31, Jim Clune <jim.clune at gmail.com> wrote:
> Hi, Markus. Your proposal is interesting, but I'm a little concerned
> about this part:
>
>> Using manifest types, developers can easily generate equivalent
>> instantiations of a record type with different conversion behavior.
>> E.g.:
>>
>> ? ?type drop_foo_default = t = { foo : int sexp_default(foo)! } with sexp
>>
>> This way different "default views" could be emitted for a given record.
>
> It is not clear to me whether this is best construed as a feature or a
> bug. It seems to encourage people to make type-equivalences that have
> sexp representations that can be generated by one type and parsed by
> an "equivalent" type that has silently incompatible semantics. This,
> combined with the fact that sexp representations do not embed the name
> of the types or modules that generated them, looks to me to like a
> recipe for bugs.

S-expressions are generally just structural.  There is no type
associated with any of them.  Nothing will prevent you from converting
an S-expression to a different type than the one it originated from as
long as the value is compatible in structure.  The same is true of the
binary protocol and the OCaml marshaling module btw.  If you need
guarantees about the originating type of such a value, you as a
developer need to take care of that.  E.g. by "nominal typing", i.e.
you annotate the value with an unambiguous identifier of its
originating type.  Or by more advanced structural matching that
requires that the originating type can be unified with the destination
type.  This would require storing the type-specification along with
the value.

The above discussion of "views" is somewhat unrelated to this.  All
views should really be equivalent.  It's more about what kind of
information should be revealed.  E.g. if a program raises an exception
and needs to show its user-supplied configuration for debugging
purposes, you may want to emit all record fields, because sometimes
the bug may be that the user had incorrect assumptions of what the
default is.  In other cases you might want to ask a process to
generate a minimal configuration file that reflects its current state.
 Leaving out default values would then make these configurations much
shorter and readable.  That's what I mean by "views".

> Do you consider this facilitation of different "default views" to be
> an important aspect of the proposal? Or is there a milder version of
> the proposal that does not have this feature?

There is no facilitation of "default views" in my proposal.  The macro
merely allows you to define defaults for record fields.  There is
nothing I can do to prevent users from using (or abusing) it by
combining it with features of the type and module system.  The
examples (e.g. views) I mentioned merely show potential use cases
where this feature can be creatively employed.

-- 
Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From markus.mottl at gmail.com  Sat Mar 31 20:35:21 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Sat, 31 Mar 2012 15:35:21 -0400
Subject: sexp_default
In-Reply-To: <CAOZm+P=dr6HDGP1NER+DA-TRReiAZ-_a+tacC3c9XyxB_wmOTQ@mail.gmail.com>
References: <CAP_800q7doNGS1htxfyJAXjmfLVW47XJtqBM5Yfu-0bgSYfB0g@mail.gmail.com>
	<CACLX4jRJbVF7Qk7+ZJ1JQq0bKzXeE_aF+m75qoFN+FHK2W9DEw@mail.gmail.com>
	<CAP_800r3W-rKR2RjUnaaVPDJyU3G+whvoCyGnssiWd8CJ1YWsA@mail.gmail.com>
	<CACLX4jQZW9TX94ohh3XxUa7jGpPCsaV_ObKdWkH2RPTWGOP46g@mail.gmail.com>
	<CAP_800os1P_OnUCCBAhQXFRf0c6vp+MoaYzhaDA0Q_DCfVGEbQ@mail.gmail.com>
	<CACLX4jQbkDNS+sbU8BndJ8rL+5JBX94Umm+9uODox7VVfunZhw@mail.gmail.com>
	<CAP_800r81mhsuYsDKsWFqw7gUmHfYQdfhZVDExhjj4vEiwc3MA@mail.gmail.com>
	<CAOZm+Pny2wN084hzXczt7J=RDiQCoz4uFSsJ2P0MhyARbuNseg@mail.gmail.com>
	<CACLX4jRGqMtLsNKt_gqFsbmd+L6TKMY+bWemg__ov0g0BLJGZg@mail.gmail.com>
	<CAOZm+P=dr6HDGP1NER+DA-TRReiAZ-_a+tacC3c9XyxB_wmOTQ@mail.gmail.com>
Message-ID: <CAP_800pGD29uE=kASrekTCXSq+uhm5USZwEgO-aVVEo0DPA9UA@mail.gmail.com>


On Sat, Mar 31, 2012 at 15:16, Jim Clune <jim.clune at gmail.com> wrote:
> Perhaps I shouldn't have used the word "semantics". Here is an example
> of what I mean:
>
> module A = struct
> ?type t = {
> ? ?guest : string;
> ? ?food : string sexp_default("steak")!;
> ?} with sexp
> end
>
> module B = struct
> ?type t = A.t = {
> ? ?guest : string;
> ? ?food : string sexp_default("fish");
> ?} with sexp
> end
>
> ?let () =
> ? ?let original = { A.
> ? ? ?guest = "Bob";
> ? ? ?food = "steak";
> ? ?} in
> ? ?let x = B.t_of_sexp (A.sexp_of_t original) in
> ? ?printf "%s ordered %s\n" x.A.guest x.A.food
>
> If I understand the proposal correctly, this will say that Bob ordered
> fish even though he originally ordered steak. Obviously, one can write
> custom sexp converters to get this behavior already. I'm just
> questioning the desirability of having this be easy.

There is no reasonable way for me to prevent users from shooting
themselves in the foot.  Manifest types need to be supported,
otherwise you wouldn't be able to e.g. automatically generate
S-expression converters for concrete types in external libraries that
don't use sexplib.  I cannot easily test whether anybody uses this
feature to generate incompatible defaults in equivalent types.  In
fact, one can imagine scenarios where different defaults are even
intentional.

-- 
Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


