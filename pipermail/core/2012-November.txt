From francois.berenger.working at gmail.com  Fri Nov  2 01:19:39 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 1 Nov 2012 18:19:39 -0700 (PDT)
Subject: any logger in core?
In-Reply-To: <20120714161518.GJ14582@dark.recoil.org>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
 <CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
 <117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
 <CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
 <20120714161518.GJ14582@dark.recoil.org>
Message-ID: <9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>

Hello,

Is there a logger in the current release of core?

Thanks,
F.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/15bd7e82/attachment.html>

From francois.berenger.working at gmail.com  Fri Nov  2 01:39:42 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 1 Nov 2012 18:39:42 -0700 (PDT)
Subject: core's documentation
Message-ID: <51212964-c9f4-4cd1-9347-da3ff7940258@googlegroups.com>

Hello,

Is there a way to build the ocamldoc for core
while being able to jump/unwrap the implementation
code of some function by clicking on its name?

I think ocamldoc can do some code inlining.

I asked this several times for OCaml batteries
and never got a satisfying answer.

Thanks a lot,
F.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/1f3f7d28/attachment.html>

From francois.berenger.working at gmail.com  Fri Nov  2 01:40:40 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 1 Nov 2012 18:40:40 -0700 (PDT)
Subject: any logger in core?
In-Reply-To: <CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
 <CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
 <117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
 <CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
 <20120714161518.GJ14582@dark.recoil.org>
 <9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
 <CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
Message-ID: <004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>

OK, I'm hooked now.

I plus core in my new project.

Thanks!
F.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/68f00e79/attachment.html>

From francois.berenger.working at gmail.com  Fri Nov  2 01:47:21 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 1 Nov 2012 18:47:21 -0700 (PDT)
Subject: core's documentation
In-Reply-To: <51212964-c9f4-4cd1-9347-da3ff7940258@googlegroups.com>
References: <51212964-c9f4-4cd1-9347-da3ff7940258@googlegroups.com>
Message-ID: <f2581bd1-ec4b-48e7-a5f7-b192a3108f5e@googlegroups.com>

By the way, where did OPAM put the doc when installing async?

On Friday, November 2, 2012 10:39:42 AM UTC+9, Francois Berenger wrote:
>
> Hello,
>
> Is there a way to build the ocamldoc for core
> while being able to jump/unwrap the implementation
> code of some function by clicking on its name?
>
> I think ocamldoc can do some code inlining.
>
> I asked this several times for OCaml batteries
> and never got a satisfying answer.
>
> Thanks a lot,
> F.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/35b89d1d/attachment.html>

From francois.berenger.working at gmail.com  Fri Nov  2 01:59:45 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 1 Nov 2012 18:59:45 -0700 (PDT)
Subject: any logger in core?
In-Reply-To: <004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
 <CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
 <117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
 <CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
 <20120714161518.GJ14582@dark.recoil.org>
 <9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
 <CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
 <004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
Message-ID: <5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>

Is there some example program using this logger?

On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger wrote:
>
> OK, I'm hooked now.
>
> I plus core in my new project.
>
> Thanks!
> F.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/858fa92a/attachment.html>

From francois.berenger.working at gmail.com  Fri Nov  2 02:00:49 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 1 Nov 2012 19:00:49 -0700 (PDT)
Subject: core's documentation
In-Reply-To: <f2581bd1-ec4b-48e7-a5f7-b192a3108f5e@googlegroups.com>
References: <51212964-c9f4-4cd1-9347-da3ff7940258@googlegroups.com>
 <f2581bd1-ec4b-48e7-a5f7-b192a3108f5e@googlegroups.com>
Message-ID: <d76a702d-8712-4eb8-a365-7e97c2ffd8df@googlegroups.com>

Can I cd somewhere in OPAM's directory structure and do a make doc / make 
ocamldoc?

On Friday, November 2, 2012 10:47:21 AM UTC+9, Francois Berenger wrote:
>
> By the way, where did OPAM put the doc when installing async?
>
> On Friday, November 2, 2012 10:39:42 AM UTC+9, Francois Berenger wrote:
>>
>> Hello,
>>
>> Is there a way to build the ocamldoc for core
>> while being able to jump/unwrap the implementation
>> code of some function by clicking on its name?
>>
>> I think ocamldoc can do some code inlining.
>>
>> I asked this several times for OCaml batteries
>> and never got a satisfying answer.
>>
>> Thanks a lot,
>> F.
>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/cdc0fd18/attachment.html>

From francois.berenger.working at gmail.com  Fri Nov  2 02:07:46 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 1 Nov 2012 19:07:46 -0700 (PDT)
Subject: core's documentation
In-Reply-To: <d76a702d-8712-4eb8-a365-7e97c2ffd8df@googlegroups.com>
References: <51212964-c9f4-4cd1-9347-da3ff7940258@googlegroups.com>
 <f2581bd1-ec4b-48e7-a5f7-b192a3108f5e@googlegroups.com>
 <d76a702d-8712-4eb8-a365-7e97c2ffd8df@googlegroups.com>
Message-ID: <fe12c264-550b-4bdc-a576-a74bb319ba44@googlegroups.com>

Reply to self, yes apparently:

make doc # in ~/.opam/system/lib/core

On Friday, November 2, 2012 11:00:49 AM UTC+9, Francois Berenger wrote:
>
> Can I cd somewhere in OPAM's directory structure and do a make doc / make 
> ocamldoc?
>
> On Friday, November 2, 2012 10:47:21 AM UTC+9, Francois Berenger wrote:
>>
>> By the way, where did OPAM put the doc when installing async?
>>
>> On Friday, November 2, 2012 10:39:42 AM UTC+9, Francois Berenger wrote:
>>>
>>> Hello,
>>>
>>> Is there a way to build the ocamldoc for core
>>> while being able to jump/unwrap the implementation
>>> code of some function by clicking on its name?
>>>
>>> I think ocamldoc can do some code inlining.
>>>
>>> I asked this several times for OCaml batteries
>>> and never got a satisfying answer.
>>>
>>> Thanks a lot,
>>> F.
>>>
>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/f3db5c87/attachment.html>

From francois.berenger.working at gmail.com  Fri Nov  2 02:09:41 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 1 Nov 2012 19:09:41 -0700 (PDT)
Subject: core does not use ocp-build to compile?
Message-ID: <bdbae551-6c55-4d17-a076-e7b8e29ea889@googlegroups.com>

I'm eager to see my 8 CPUs getting busy. :)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/1b50b819/attachment.html>

From francois.berenger.working at gmail.com  Fri Nov  2 02:13:35 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 1 Nov 2012 19:13:35 -0700 (PDT)
Subject: core does not use ocp-build to compile?
In-Reply-To: <bdbae551-6c55-4d17-a076-e7b8e29ea889@googlegroups.com>
References: <bdbae551-6c55-4d17-a076-e7b8e29ea889@googlegroups.com>
Message-ID: <f3381039-0e6e-460f-b4d0-6e9668c10e28@googlegroups.com>

Almost 7mn to build the doc...

On Friday, November 2, 2012 11:09:41 AM UTC+9, Francois Berenger wrote:
>
> I'm eager to see my 8 CPUs getting busy. :)
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/2c5eb32b/attachment.html>

From francois.berenger.working at gmail.com  Fri Nov  2 02:14:49 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 1 Nov 2012 19:14:49 -0700 (PDT)
Subject: core's documentation
In-Reply-To: <fe12c264-550b-4bdc-a576-a74bb319ba44@googlegroups.com>
References: <51212964-c9f4-4cd1-9347-da3ff7940258@googlegroups.com>
 <f2581bd1-ec4b-48e7-a5f7-b192a3108f5e@googlegroups.com>
 <d76a702d-8712-4eb8-a365-7e97c2ffd8df@googlegroups.com>
 <fe12c264-550b-4bdc-a576-a74bb319ba44@googlegroups.com>
Message-ID: <4a2964b0-6e6d-4603-a485-992863212a58@googlegroups.com>

And the doc went into:

.opam/system/build/core.108.07.01/_build/lib/core.docdir

On Friday, November 2, 2012 11:07:46 AM UTC+9, Francois Berenger wrote:
>
> Reply to self, yes apparently:
>
> make doc # in ~/.opam/system/lib/core
>
> On Friday, November 2, 2012 11:00:49 AM UTC+9, Francois Berenger wrote:
>>
>> Can I cd somewhere in OPAM's directory structure and do a make doc / make 
>> ocamldoc?
>>
>> On Friday, November 2, 2012 10:47:21 AM UTC+9, Francois Berenger wrote:
>>>
>>> By the way, where did OPAM put the doc when installing async?
>>>
>>> On Friday, November 2, 2012 10:39:42 AM UTC+9, Francois Berenger wrote:
>>>>
>>>> Hello,
>>>>
>>>> Is there a way to build the ocamldoc for core
>>>> while being able to jump/unwrap the implementation
>>>> code of some function by clicking on its name?
>>>>
>>>> I think ocamldoc can do some code inlining.
>>>>
>>>> I asked this several times for OCaml batteries
>>>> and never got a satisfying answer.
>>>>
>>>> Thanks a lot,
>>>> F.
>>>>
>>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/b7501d01/attachment.html>

From francois.berenger.working at gmail.com  Fri Nov  2 02:23:50 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 1 Nov 2012 19:23:50 -0700 (PDT)
Subject: core does not use ocp-build to compile?
In-Reply-To: <CACLX4jSyHfXhryYx_kGq1UAKqXFDbuTDcji7jZi2D4Mk3qbVXg@mail.gmail.com>
References: <bdbae551-6c55-4d17-a076-e7b8e29ea889@googlegroups.com>
 <f3381039-0e6e-460f-b4d0-6e9668c10e28@googlegroups.com>
 <CACLX4jSyHfXhryYx_kGq1UAKqXFDbuTDcji7jZi2D4Mk3qbVXg@mail.gmail.com>
Message-ID: <d9458810-8dfd-42ef-974f-b628f873f3c8@googlegroups.com>

You would laugh if you time parallel builds of ocamlbuild.

No acceleration is what I usually observe with it.

On Friday, November 2, 2012 11:15:47 AM UTC+9, Yaron Minsky wrote:
>
> Can't one enable parallel builds on ocamlbuild as well?  Seems like 
> it's a feature that they both support. 
>
> On Thu, Nov 1, 2012 at 10:13 PM, Francois Berenger 
> <francois.ber... at gmail.com <javascript:>> wrote: 
> > Almost 7mn to build the doc... 
> > 
> > 
> > On Friday, November 2, 2012 11:09:41 AM UTC+9, Francois Berenger wrote: 
> >> 
> >> I'm eager to see my 8 CPUs getting busy. :) 
> >> 
> > 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/7a52e174/attachment.html>

From francois.berenger.working at gmail.com  Fri Nov  2 02:31:38 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 1 Nov 2012 19:31:38 -0700 (PDT)
Subject: core does not use ocp-build to compile?
In-Reply-To: <CACLX4jTZ1-bwv4zQiQ1FVw-XrGX9518ehLkxgNfh3jgCVU4nEA@mail.gmail.com>
References: <bdbae551-6c55-4d17-a076-e7b8e29ea889@googlegroups.com>
 <f3381039-0e6e-460f-b4d0-6e9668c10e28@googlegroups.com>
 <CACLX4jSyHfXhryYx_kGq1UAKqXFDbuTDcji7jZi2D4Mk3qbVXg@mail.gmail.com>
 <d9458810-8dfd-42ef-974f-b628f873f3c8@googlegroups.com>
 <CACLX4jTZ1-bwv4zQiQ1FVw-XrGX9518ehLkxgNfh3jgCVU4nEA@mail.gmail.com>
Message-ID: <e7a67335-2a0f-4eb6-8309-2651defc9130@googlegroups.com>

I will first try to use it in my project (and get rid of ocamlbuild, at 
last!).

Then, I will probably talk about it on caml-list.

ocamlbuild is such a shame at parallelizing the build that
I can already bet my farm that ocp-build does a better job at it.

On Friday, November 2, 2012 11:28:29 AM UTC+9, Yaron Minsky wrote:
>
> If it's really better in terms of build times, I'd happily accept an 
> ocp-build based build script... 
>
> y 
>
> On Thu, Nov 1, 2012 at 10:23 PM, Francois Berenger 
> <francois.ber... at gmail.com <javascript:>> wrote: 
> > You would laugh if you time parallel builds of ocamlbuild. 
> > 
> > No acceleration is what I usually observe with it. 
> > 
> > 
> > On Friday, November 2, 2012 11:15:47 AM UTC+9, Yaron Minsky wrote: 
> >> 
> >> Can't one enable parallel builds on ocamlbuild as well?  Seems like 
> >> it's a feature that they both support. 
> >> 
> >> On Thu, Nov 1, 2012 at 10:13 PM, Francois Berenger 
> >> <francois.ber... at gmail.com> wrote: 
> >> > Almost 7mn to build the doc... 
> >> > 
> >> > 
> >> > On Friday, November 2, 2012 11:09:41 AM UTC+9, Francois Berenger 
> wrote: 
> >> >> 
> >> >> I'm eager to see my 8 CPUs getting busy. :) 
> >> >> 
> >> > 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/2ee29829/attachment.html>

From yminsky at janestreet.com  Fri Nov  2 01:33:40 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 1 Nov 2012 21:33:40 -0400
Subject: any logger in core?
In-Reply-To: <9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
Message-ID: <CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>

Yes: if you open Async.Std, it's called "Log".

y

On Thu, Nov 1, 2012 at 9:19 PM, Francois Berenger <
francois.berenger.working at gmail.com> wrote:

> Hello,
>
> Is there a logger in the current release of core?
>
> Thanks,
> F.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/d381129a/attachment.html>

From yminsky at janestreet.com  Fri Nov  2 02:14:35 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 1 Nov 2012 22:14:35 -0400
Subject: any logger in core?
In-Reply-To: <5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
Message-ID: <CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>


Sean, does your omake-server use Async.Log?  That might be a good example.

y

On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> Is there some example program using this logger?
>
>
> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger wrote:
>>
>> OK, I'm hooked now.
>>
>> I plus core in my new project.
>>
>> Thanks!
>> F.
>>
>


From yminsky at janestreet.com  Fri Nov  2 02:15:46 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 1 Nov 2012 22:15:46 -0400
Subject: core does not use ocp-build to compile?
In-Reply-To: <f3381039-0e6e-460f-b4d0-6e9668c10e28@googlegroups.com>
References: <bdbae551-6c55-4d17-a076-e7b8e29ea889@googlegroups.com>
	<f3381039-0e6e-460f-b4d0-6e9668c10e28@googlegroups.com>
Message-ID: <CACLX4jSyHfXhryYx_kGq1UAKqXFDbuTDcji7jZi2D4Mk3qbVXg@mail.gmail.com>


Can't one enable parallel builds on ocamlbuild as well?  Seems like
it's a feature that they both support.

On Thu, Nov 1, 2012 at 10:13 PM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> Almost 7mn to build the doc...
>
>
> On Friday, November 2, 2012 11:09:41 AM UTC+9, Francois Berenger wrote:
>>
>> I'm eager to see my 8 CPUs getting busy. :)
>>
>


From yminsky at janestreet.com  Fri Nov  2 02:28:28 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 1 Nov 2012 22:28:28 -0400
Subject: core does not use ocp-build to compile?
In-Reply-To: <d9458810-8dfd-42ef-974f-b628f873f3c8@googlegroups.com>
References: <bdbae551-6c55-4d17-a076-e7b8e29ea889@googlegroups.com>
	<f3381039-0e6e-460f-b4d0-6e9668c10e28@googlegroups.com>
	<CACLX4jSyHfXhryYx_kGq1UAKqXFDbuTDcji7jZi2D4Mk3qbVXg@mail.gmail.com>
	<d9458810-8dfd-42ef-974f-b628f873f3c8@googlegroups.com>
Message-ID: <CACLX4jTZ1-bwv4zQiQ1FVw-XrGX9518ehLkxgNfh3jgCVU4nEA@mail.gmail.com>


If it's really better in terms of build times, I'd happily accept an
ocp-build based build script...

y

On Thu, Nov 1, 2012 at 10:23 PM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> You would laugh if you time parallel builds of ocamlbuild.
>
> No acceleration is what I usually observe with it.
>
>
> On Friday, November 2, 2012 11:15:47 AM UTC+9, Yaron Minsky wrote:
>>
>> Can't one enable parallel builds on ocamlbuild as well?  Seems like
>> it's a feature that they both support.
>>
>> On Thu, Nov 1, 2012 at 10:13 PM, Francois Berenger
>> <francois.ber... at gmail.com> wrote:
>> > Almost 7mn to build the doc...
>> >
>> >
>> > On Friday, November 2, 2012 11:09:41 AM UTC+9, Francois Berenger wrote:
>> >>
>> >> I'm eager to see my 8 CPUs getting busy. :)
>> >>
>> >


From seanmcl at gmail.com  Sat Nov  3 22:43:03 2012
From: seanmcl at gmail.com (Sean McLaughlin)
Date: Sat, 3 Nov 2012 18:43:03 -0400
Subject: any logger in core?
In-Reply-To: <CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
 <CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
 <117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org> <CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
 <20120714161518.GJ14582@dark.recoil.org> <9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
 <CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
 <004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com> <5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
 <CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
Message-ID: <CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>


No, sorry.  I didn't know about Async.Log, and I wrote my own logger.
Switching to this one is probably a good idea in the long run for
omake-server.

On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky <yminsky at janestreet.com> wrote:
> Sean, does your omake-server use Async.Log?  That might be a good example.
>
> y
>
> On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger
> <francois.berenger.working at gmail.com> wrote:
>> Is there some example program using this logger?
>>
>>
>> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger wrote:
>>>
>>> OK, I'm hooked now.
>>>
>>> I plus core in my new project.
>>>
>>> Thanks!
>>> F.
>>>
>>


From yminsky at janestreet.com  Sun Nov  4 12:14:34 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Sun, 4 Nov 2012 07:14:34 -0500
Subject: any logger in core?
In-Reply-To: <CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
Message-ID: <CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>

Don't feel too bad about knowing about it.  It's quite new.

But yeah, moving to it eventually sounds right.

On Sat, Nov 3, 2012 at 6:43 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:

> No, sorry.  I didn't know about Async.Log, and I wrote my own logger.
> Switching to this one is probably a good idea in the long run for
> omake-server.
>
> On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky <yminsky at janestreet.com>
> wrote:
> > Sean, does your omake-server use Async.Log?  That might be a good
> example.
> >
> > y
> >
> > On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger
> > <francois.berenger.working at gmail.com> wrote:
> >> Is there some example program using this logger?
> >>
> >>
> >> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger wrote:
> >>>
> >>> OK, I'm hooked now.
> >>>
> >>> I plus core in my new project.
> >>>
> >>> Thanks!
> >>> F.
> >>>
> >>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121104/64c1bce0/attachment.html>

From francois.berenger.working at gmail.com  Mon Nov  5 06:08:31 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Sun, 4 Nov 2012 22:08:31 -0800 (PST)
Subject: any logger in core?
In-Reply-To: <CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
 <CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
 <117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
 <CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
 <20120714161518.GJ14582@dark.recoil.org>
 <9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
 <CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
 <004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
 <5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
 <CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
 <CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
 <CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
Message-ID: <7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>


Is there some ocamldoc for it?

I think I managed to compile the ocamldoc for core and async, but did
not find anything about a Log module into it.

On Sunday, November 4, 2012 9:15:45 PM UTC+9, Yaron Minsky wrote:
>
> Don't feel too bad about knowing about it.  It's quite new.
>
> But yeah, moving to it eventually sounds right.
>
> On Sat, Nov 3, 2012 at 6:43 PM, Sean McLaughlin <sea... at gmail.com<javascript:>
> > wrote:
>
>> No, sorry.  I didn't know about Async.Log, and I wrote my own logger.
>> Switching to this one is probably a good idea in the long run for
>> omake-server.
>>
>> On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky <ymi... at janestreet.com<javascript:>> 
>> wrote:
>> > Sean, does your omake-server use Async.Log?  That might be a good 
>> example.
>> >
>> > y
>> >
>> > On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger
>> > <francois.ber... at gmail.com <javascript:>> wrote:
>> >> Is there some example program using this logger?
>> >>
>> >>
>> >> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger wrote:
>> >>>
>> >>> OK, I'm hooked now.
>> >>>
>> >>> I plus core in my new project.
>> >>>
>> >>> Thanks!
>> >>> F.
>> >>>
>> >>
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121104/b2ffd05a/attachment.html>

From yminsky at janestreet.com  Mon Nov  5 15:27:18 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Mon, 5 Nov 2012 10:27:18 -0500
Subject: any logger in core?
In-Reply-To: <CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
	<CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
	<7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
	<CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
Message-ID: <CACLX4jSkv0RK-nYM88L09tgyVBUj9b8SZ4-ePMEDJdBEbO7CQA@mail.gmail.com>


https://ocaml.janestreet.com/ocaml-core/108.07.01/doc/async_extra/Log.html

On Mon, Nov 5, 2012 at 6:15 AM, David House <dhouse at janestreet.com> wrote:
> Judging from the mli, there should be some ocamldocs, yes.
>
> However, I recommend just looking at the mli.
>
> On Mon, Nov 5, 2012 at 6:08 AM, Francois Berenger
> <francois.berenger.working at gmail.com> wrote:
>>
>> Is there some ocamldoc for it?
>>
>> I think I managed to compile the ocamldoc for core and async, but did
>> not find anything about a Log module into it.
>>
>>
>> On Sunday, November 4, 2012 9:15:45 PM UTC+9, Yaron Minsky wrote:
>>>
>>> Don't feel too bad about knowing about it.  It's quite new.
>>>
>>> But yeah, moving to it eventually sounds right.
>>>
>>> On Sat, Nov 3, 2012 at 6:43 PM, Sean McLaughlin <sea... at gmail.com> wrote:
>>>>
>>>> No, sorry.  I didn't know about Async.Log, and I wrote my own logger.
>>>> Switching to this one is probably a good idea in the long run for
>>>> omake-server.
>>>>
>>>> On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky <ymi... at janestreet.com>
>>>> wrote:
>>>> > Sean, does your omake-server use Async.Log?  That might be a good
>>>> > example.
>>>> >
>>>> > y
>>>> >
>>>> > On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger
>>>> > <francois.ber... at gmail.com> wrote:
>>>> >> Is there some example program using this logger?
>>>> >>
>>>> >>
>>>> >> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger
>>>> >> wrote:
>>>> >>>
>>>> >>> OK, I'm hooked now.
>>>> >>>
>>>> >>> I plus core in my new project.
>>>> >>>
>>>> >>> Thanks!
>>>> >>> F.
>>>> >>>
>>>> >>
>>>
>>>
>>


From dhouse at janestreet.com  Mon Nov  5 11:15:22 2012
From: dhouse at janestreet.com (David House)
Date: Mon, 5 Nov 2012 11:15:22 +0000
Subject: any logger in core?
In-Reply-To: <7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
	<CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
	<7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
Message-ID: <CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>


Judging from the mli, there should be some ocamldocs, yes.

However, I recommend just looking at the mli.

On Mon, Nov 5, 2012 at 6:08 AM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
>
> Is there some ocamldoc for it?
>
> I think I managed to compile the ocamldoc for core and async, but did
> not find anything about a Log module into it.
>
>
> On Sunday, November 4, 2012 9:15:45 PM UTC+9, Yaron Minsky wrote:
>>
>> Don't feel too bad about knowing about it.  It's quite new.
>>
>> But yeah, moving to it eventually sounds right.
>>
>> On Sat, Nov 3, 2012 at 6:43 PM, Sean McLaughlin <sea... at gmail.com> wrote:
>>>
>>> No, sorry.  I didn't know about Async.Log, and I wrote my own logger.
>>> Switching to this one is probably a good idea in the long run for
>>> omake-server.
>>>
>>> On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky <ymi... at janestreet.com>
>>> wrote:
>>> > Sean, does your omake-server use Async.Log?  That might be a good
>>> > example.
>>> >
>>> > y
>>> >
>>> > On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger
>>> > <francois.ber... at gmail.com> wrote:
>>> >> Is there some example program using this logger?
>>> >>
>>> >>
>>> >> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger
>>> >> wrote:
>>> >>>
>>> >>> OK, I'm hooked now.
>>> >>>
>>> >>> I plus core in my new project.
>>> >>>
>>> >>> Thanks!
>>> >>> F.
>>> >>>
>>> >>
>>
>>
>


From yminsky at janestreet.com  Tue Nov  6 03:12:00 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Mon, 5 Nov 2012 22:12:00 -0500
Subject: any logger in core?
In-Reply-To: <CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
	<CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
	<7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
	<CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
	<CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
Message-ID: <CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>


No, did you see my link?  You can read the ocamldocs:

https://ocaml.janestreet.com/ocaml-core/108.07.01/doc/async_extra/Log.html

On Mon, Nov 5, 2012 at 9:51 PM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> Argh! I'm forced to read an mli file. ;)
>
> On Mon, Nov 5, 2012 at 8:15 PM, David House <dhouse at janestreet.com> wrote:
>> Judging from the mli, there should be some ocamldocs, yes.
>>
>> However, I recommend just looking at the mli.
>>
>> On Mon, Nov 5, 2012 at 6:08 AM, Francois Berenger
>> <francois.berenger.working at gmail.com> wrote:
>>>
>>> Is there some ocamldoc for it?
>>>
>>> I think I managed to compile the ocamldoc for core and async, but did
>>> not find anything about a Log module into it.
>>>
>>>
>>> On Sunday, November 4, 2012 9:15:45 PM UTC+9, Yaron Minsky wrote:
>>>>
>>>> Don't feel too bad about knowing about it.  It's quite new.
>>>>
>>>> But yeah, moving to it eventually sounds right.
>>>>
>>>> On Sat, Nov 3, 2012 at 6:43 PM, Sean McLaughlin <sea... at gmail.com> wrote:
>>>>>
>>>>> No, sorry.  I didn't know about Async.Log, and I wrote my own logger.
>>>>> Switching to this one is probably a good idea in the long run for
>>>>> omake-server.
>>>>>
>>>>> On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky <ymi... at janestreet.com>
>>>>> wrote:
>>>>> > Sean, does your omake-server use Async.Log?  That might be a good
>>>>> > example.
>>>>> >
>>>>> > y
>>>>> >
>>>>> > On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger
>>>>> > <francois.ber... at gmail.com> wrote:
>>>>> >> Is there some example program using this logger?
>>>>> >>
>>>>> >>
>>>>> >> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger
>>>>> >> wrote:
>>>>> >>>
>>>>> >>> OK, I'm hooked now.
>>>>> >>>
>>>>> >>> I plus core in my new project.
>>>>> >>>
>>>>> >>> Thanks!
>>>>> >>> F.
>>>>> >>>
>>>>> >>
>>>>
>>>>
>>>


From francois.berenger.working at gmail.com  Tue Nov  6 02:51:25 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Tue, 6 Nov 2012 11:51:25 +0900
Subject: any logger in core?
In-Reply-To: <CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
	<CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
	<7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
	<CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
Message-ID: <CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>


Argh! I'm forced to read an mli file. ;)

On Mon, Nov 5, 2012 at 8:15 PM, David House <dhouse at janestreet.com> wrote:
> Judging from the mli, there should be some ocamldocs, yes.
>
> However, I recommend just looking at the mli.
>
> On Mon, Nov 5, 2012 at 6:08 AM, Francois Berenger
> <francois.berenger.working at gmail.com> wrote:
>>
>> Is there some ocamldoc for it?
>>
>> I think I managed to compile the ocamldoc for core and async, but did
>> not find anything about a Log module into it.
>>
>>
>> On Sunday, November 4, 2012 9:15:45 PM UTC+9, Yaron Minsky wrote:
>>>
>>> Don't feel too bad about knowing about it.  It's quite new.
>>>
>>> But yeah, moving to it eventually sounds right.
>>>
>>> On Sat, Nov 3, 2012 at 6:43 PM, Sean McLaughlin <sea... at gmail.com> wrote:
>>>>
>>>> No, sorry.  I didn't know about Async.Log, and I wrote my own logger.
>>>> Switching to this one is probably a good idea in the long run for
>>>> omake-server.
>>>>
>>>> On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky <ymi... at janestreet.com>
>>>> wrote:
>>>> > Sean, does your omake-server use Async.Log?  That might be a good
>>>> > example.
>>>> >
>>>> > y
>>>> >
>>>> > On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger
>>>> > <francois.ber... at gmail.com> wrote:
>>>> >> Is there some example program using this logger?
>>>> >>
>>>> >>
>>>> >> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger
>>>> >> wrote:
>>>> >>>
>>>> >>> OK, I'm hooked now.
>>>> >>>
>>>> >>> I plus core in my new project.
>>>> >>>
>>>> >>> Thanks!
>>>> >>> F.
>>>> >>>
>>>> >>
>>>
>>>
>>


From francois.berenger.working at gmail.com  Wed Nov  7 02:32:43 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Tue, 6 Nov 2012 18:32:43 -0800 (PST)
Subject: How to load core in the toplevel?
Message-ID: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>

Hello,

I'd like to play with core in my toplevel.

Is there a recipe?

I have installed everything with OPAM:
$ opam list | egrep "core|async"
async                 108.07.01  Monadic concurrency library
async_core            108.07.01  Monadic concurrency library
async_extra           108.07.01  Monadic concurrency library
async_unix            108.07.01  Monadic concurrency library
core                  108.07.01  Industrial strength alternative to OCaml's 
standard library
core_extended                --  Extra components that are not as closely 
vetted or as stable as Core

In my toplevel, I type
#use "topfind";;
#list;;

Nothing about core or async shows up.
While parmap is there, for example.

Is this normal?

I guess there is some configuration file of findlib to tweak somewhere.

Regards,
F.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121106/a431b0e3/attachment.html>

From francois.berenger.working at gmail.com  Wed Nov  7 02:37:18 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Tue, 6 Nov 2012 18:37:18 -0800 (PST)
Subject: How to load core in the toplevel?
In-Reply-To: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>
Message-ID: <69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com>

Apparently, ocamlfind knows where these libraries are:

$ ocamlfind -query core
/home/berenger/.opam/system/lib/core
$ ocamlfind -query async
/home/berenger/.opam/system/lib/async
$ ocamlfind -query async_extra
/home/berenger/.opam/system/lib/async_extra

On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger wrote:
>
> Hello,
>
> I'd like to play with core in my toplevel.
>
> Is there a recipe?
>
> I have installed everything with OPAM:
> $ opam list | egrep "core|async"
> async                 108.07.01  Monadic concurrency library
> async_core            108.07.01  Monadic concurrency library
> async_extra           108.07.01  Monadic concurrency library
> async_unix            108.07.01  Monadic concurrency library
> core                  108.07.01  Industrial strength alternative to 
> OCaml's standard library
> core_extended                --  Extra components that are not as closely 
> vetted or as stable as Core
>
> In my toplevel, I type
> #use "topfind";;
> #list;;
>
> Nothing about core or async shows up.
> While parmap is there, for example.
>
> Is this normal?
>
> I guess there is some configuration file of findlib to tweak somewhere.
>
> Regards,
> F.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121106/508b4d80/attachment.html>

From francois.berenger.working at gmail.com  Wed Nov  7 03:06:11 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Tue, 6 Nov 2012 19:06:11 -0800 (PST)
Subject: How to load core in the toplevel?
In-Reply-To: <CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com> <69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com>
 <CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>
Message-ID: <8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com>

Thanks! That fixes the problem partially.

Now, I get:

# #require "core.top";;
# #require "core.top";;stem/lib/core/core.cma: loaded
Error: Reference to undefined global `Condition'
# #require "core";;
# #require "core";;m/system/lib/core/core.cma: loaded
Error: Reference to undefined global `Condition'
# #require "async";;
# #require "async";;/system/lib/core/core.cma: loaded
Error: Reference to undefined global `Condition'

Any hint?

On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet wrote:
>
>
> I'm not sure if this is your problem, but there was something with the 
> toplevel (comming with the system compiler) not knowing about opam 
> packages. 
> I have to launch:
>
>    ocaml -I $OCAML_TOPLEVEL_PATH
>
> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`)
>
>
> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger <
> francois.ber... at gmail.com <javascript:>> wrote:
>
>> Apparently, ocamlfind knows where these libraries are:
>>
>> $ ocamlfind -query core
>> /home/berenger/.opam/system/lib/core
>> $ ocamlfind -query async
>> /home/berenger/.opam/system/lib/async
>> $ ocamlfind -query async_extra
>> /home/berenger/.opam/system/lib/async_extra
>>
>>
>> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger wrote:
>>>
>>> Hello,
>>>
>>> I'd like to play with core in my toplevel.
>>>
>>> Is there a recipe?
>>>
>>> I have installed everything with OPAM:
>>> $ opam list | egrep "core|async"
>>> async                 108.07.01  Monadic concurrency library
>>> async_core            108.07.01  Monadic concurrency library
>>> async_extra           108.07.01  Monadic concurrency library
>>> async_unix            108.07.01  Monadic concurrency library
>>> core                  108.07.01  Industrial strength alternative to 
>>> OCaml's standard library
>>> core_extended                --  Extra components that are not as 
>>> closely vetted or as stable as Core
>>>
>>> In my toplevel, I type
>>> #use "topfind";;
>>> #list;;
>>>
>>> Nothing about core or async shows up.
>>> While parmap is there, for example.
>>>
>>> Is this normal?
>>>
>>> I guess there is some configuration file of findlib to tweak somewhere.
>>>
>>> Regards,
>>> F.
>>>
>>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121106/0f61f90e/attachment.html>

From francois.berenger.working at gmail.com  Wed Nov  7 05:33:37 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Tue, 6 Nov 2012 21:33:37 -0800 (PST)
Subject: How to load core in the toplevel?
In-Reply-To: <CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>
 <69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com> <CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>
 <8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com>
 <CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com>
Message-ID: <9c71cd13-99c1-40e5-bc68-08217ebb1438@googlegroups.com>

Thanks a lot.

So, the whole recipe in my case was:

ocaml -I $OCAML_TOPLEVEL_PATH
#thread;;
#require "core.top";;
#require "async";;

Regards,
F.

On Wednesday, November 7, 2012 12:09:15 PM UTC+9, Sebastien Mondet wrote:
>
>
>
> I think that one is the  
>    #thread;;
> thing
>
>
>
>
> On Tue, Nov 6, 2012 at 10:06 PM, Francois Berenger <
> francois.ber... at gmail.com <javascript:>> wrote:
>
>> Thanks! That fixes the problem partially.
>>
>> Now, I get:
>>
>> # #require "core.top";;
>> # #require "core.top";;stem/lib/core/core.cma: loaded
>> Error: Reference to undefined global `Condition'
>> # #require "core";;
>> # #require "core";;m/system/lib/core/core.cma: loaded
>> Error: Reference to undefined global `Condition'
>> # #require "async";;
>> # #require "async";;/system/lib/core/core.cma: loaded
>> Error: Reference to undefined global `Condition'
>>
>> Any hint?
>>
>>
>> On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet wrote:
>>
>>>
>>> I'm not sure if this is your problem, but there was something with the 
>>> toplevel (comming with the system compiler) not knowing about opam 
>>> packages. 
>>> I have to launch:
>>>
>>>    ocaml -I $OCAML_TOPLEVEL_PATH
>>>
>>> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`)
>>>
>>>
>>> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger <francois.ber...@**
>>> gmail.com> wrote:
>>>
>>>> Apparently, ocamlfind knows where these libraries are:
>>>>
>>>> $ ocamlfind -query core
>>>> /home/berenger/.opam/system/**lib/core
>>>> $ ocamlfind -query async
>>>> /home/berenger/.opam/system/**lib/async
>>>> $ ocamlfind -query async_extra
>>>> /home/berenger/.opam/system/**lib/async_extra
>>>>
>>>>
>>>> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger 
>>>> wrote:
>>>>>
>>>>> Hello,
>>>>>
>>>>> I'd like to play with core in my toplevel.
>>>>>
>>>>> Is there a recipe?
>>>>>
>>>>> I have installed everything with OPAM:
>>>>> $ opam list | egrep "core|async"
>>>>> async                 108.07.01  Monadic concurrency library
>>>>> async_core            108.07.01  Monadic concurrency library
>>>>> async_extra           108.07.01  Monadic concurrency library
>>>>> async_unix            108.07.01  Monadic concurrency library
>>>>> core                  108.07.01  Industrial strength alternative to 
>>>>> OCaml's standard library
>>>>> core_extended                --  Extra components that are not as 
>>>>> closely vetted or as stable as Core
>>>>>
>>>>> In my toplevel, I type
>>>>> #use "topfind";;
>>>>> #list;;
>>>>>
>>>>> Nothing about core or async shows up.
>>>>> While parmap is there, for example.
>>>>>
>>>>> Is this normal?
>>>>>
>>>>> I guess there is some configuration file of findlib to tweak somewhere.
>>>>>
>>>>> Regards,
>>>>> F.
>>>>>
>>>>>
>>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121106/c83d3b88/attachment.html>

From sebastien.mondet at gmail.com  Wed Nov  7 02:54:26 2012
From: sebastien.mondet at gmail.com (Sebastien Mondet)
Date: Tue, 6 Nov 2012 21:54:26 -0500
Subject: How to load core in the toplevel?
In-Reply-To: <69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com> <69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com>
Message-ID: <CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>

I'm not sure if this is your problem, but there was something with the
toplevel (comming with the system compiler) not knowing about opam
packages.
I have to launch:

   ocaml -I $OCAML_TOPLEVEL_PATH

(the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`)


On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger <
francois.berenger.working at gmail.com> wrote:

> Apparently, ocamlfind knows where these libraries are:
>
> $ ocamlfind -query core
> /home/berenger/.opam/system/lib/core
> $ ocamlfind -query async
> /home/berenger/.opam/system/lib/async
> $ ocamlfind -query async_extra
> /home/berenger/.opam/system/lib/async_extra
>
>
> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger wrote:
>>
>> Hello,
>>
>> I'd like to play with core in my toplevel.
>>
>> Is there a recipe?
>>
>> I have installed everything with OPAM:
>> $ opam list | egrep "core|async"
>> async                 108.07.01  Monadic concurrency library
>> async_core            108.07.01  Monadic concurrency library
>> async_extra           108.07.01  Monadic concurrency library
>> async_unix            108.07.01  Monadic concurrency library
>> core                  108.07.01  Industrial strength alternative to
>> OCaml's standard library
>> core_extended                --  Extra components that are not as closely
>> vetted or as stable as Core
>>
>> In my toplevel, I type
>> #use "topfind";;
>> #list;;
>>
>> Nothing about core or async shows up.
>> While parmap is there, for example.
>>
>> Is this normal?
>>
>> I guess there is some configuration file of findlib to tweak somewhere.
>>
>> Regards,
>> F.
>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121106/e38ceec8/attachment.html>

From sebastien.mondet at gmail.com  Wed Nov  7 03:08:53 2012
From: sebastien.mondet at gmail.com (Sebastien Mondet)
Date: Tue, 6 Nov 2012 22:08:53 -0500
Subject: How to load core in the toplevel?
In-Reply-To: <8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>
 <69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com> <CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>
 <8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com>
Message-ID: <CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com>

I think that one is the
   #thread;;
thing




On Tue, Nov 6, 2012 at 10:06 PM, Francois Berenger <
francois.berenger.working at gmail.com> wrote:

> Thanks! That fixes the problem partially.
>
> Now, I get:
>
> # #require "core.top";;
> # #require "core.top";;stem/lib/core/core.cma: loaded
> Error: Reference to undefined global `Condition'
> # #require "core";;
> # #require "core";;m/system/lib/core/core.cma: loaded
> Error: Reference to undefined global `Condition'
> # #require "async";;
> # #require "async";;/system/lib/core/core.cma: loaded
> Error: Reference to undefined global `Condition'
>
> Any hint?
>
>
> On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet wrote:
>
>>
>> I'm not sure if this is your problem, but there was something with the
>> toplevel (comming with the system compiler) not knowing about opam
>> packages.
>> I have to launch:
>>
>>    ocaml -I $OCAML_TOPLEVEL_PATH
>>
>> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`)
>>
>>
>> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger <francois.ber...@**
>> gmail.com> wrote:
>>
>>> Apparently, ocamlfind knows where these libraries are:
>>>
>>> $ ocamlfind -query core
>>> /home/berenger/.opam/system/**lib/core
>>> $ ocamlfind -query async
>>> /home/berenger/.opam/system/**lib/async
>>> $ ocamlfind -query async_extra
>>> /home/berenger/.opam/system/**lib/async_extra
>>>
>>>
>>> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger
>>> wrote:
>>>>
>>>> Hello,
>>>>
>>>> I'd like to play with core in my toplevel.
>>>>
>>>> Is there a recipe?
>>>>
>>>> I have installed everything with OPAM:
>>>> $ opam list | egrep "core|async"
>>>> async                 108.07.01  Monadic concurrency library
>>>> async_core            108.07.01  Monadic concurrency library
>>>> async_extra           108.07.01  Monadic concurrency library
>>>> async_unix            108.07.01  Monadic concurrency library
>>>> core                  108.07.01  Industrial strength alternative to
>>>> OCaml's standard library
>>>> core_extended                --  Extra components that are not as
>>>> closely vetted or as stable as Core
>>>>
>>>> In my toplevel, I type
>>>> #use "topfind";;
>>>> #list;;
>>>>
>>>> Nothing about core or async shows up.
>>>> While parmap is there, for example.
>>>>
>>>> Is this normal?
>>>>
>>>> I guess there is some configuration file of findlib to tweak somewhere.
>>>>
>>>> Regards,
>>>> F.
>>>>
>>>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121106/77b309e0/attachment.html>

From francois.berenger.working at gmail.com  Wed Nov  7 07:18:21 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Tue, 6 Nov 2012 23:18:21 -0800 (PST)
Subject: any logger in core?
In-Reply-To: <CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
 <CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
 <117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
 <CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
 <20120714161518.GJ14582@dark.recoil.org>
 <9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
 <CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
 <004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
 <5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
 <CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
 <CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
 <CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
 <7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
 <CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
 <CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
 <CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
 <CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
Message-ID: <d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>

Hello,

How can I construct a value of type Async_extra.Log.Level
and an Async_extra.Log.Output?

Sorry for the stupid question but I have never used
polymorphic variants.

If you can point me to some simple explanation
on them, I will go and read it too
(I looked at http://caml.inria.fr/pub/docs/manual-ocaml/manual006.html
but it does not tell me why I should use them, just how).

Thanks a lot,
F.

On Wednesday, November 7, 2012 10:59:54 AM UTC+9, Francois Berenger wrote:
>
> Yes I saw it, thanks. 
>
> I'll also take a look at the .mli file, as I was advised to do so by 
> David House. 
> I'll try to make an example program to check I can use it correctly. 
>
> On Tue, Nov 6, 2012 at 12:12 PM, Yaron Minsky <yminsky at janestreet.com> 
> wrote: 
> > No, did you see my link?  You can read the ocamldocs: 
> > 
> > 
> https://ocaml.janestreet.com/ocaml-core/108.07.01/doc/async_extra/Log.html 
> > 
> > On Mon, Nov 5, 2012 at 9:51 PM, Francois Berenger 
> > <francois.berenger.working at gmail.com> wrote: 
> >> Argh! I'm forced to read an mli file. ;) 
> >> 
> >> On Mon, Nov 5, 2012 at 8:15 PM, David House <dhouse at janestreet.com> 
> wrote: 
> >>> Judging from the mli, there should be some ocamldocs, yes. 
> >>> 
> >>> However, I recommend just looking at the mli. 
> >>> 
> >>> On Mon, Nov 5, 2012 at 6:08 AM, Francois Berenger 
> >>> <francois.berenger.working at gmail.com> wrote: 
> >>>> 
> >>>> Is there some ocamldoc for it? 
> >>>> 
> >>>> I think I managed to compile the ocamldoc for core and async, but did 
> >>>> not find anything about a Log module into it. 
> >>>> 
> >>>> 
> >>>> On Sunday, November 4, 2012 9:15:45 PM UTC+9, Yaron Minsky wrote: 
> >>>>> 
> >>>>> Don't feel too bad about knowing about it.  It's quite new. 
> >>>>> 
> >>>>> But yeah, moving to it eventually sounds right. 
> >>>>> 
> >>>>> On Sat, Nov 3, 2012 at 6:43 PM, Sean McLaughlin <sea... at gmail.com> 
> wrote: 
> >>>>>> 
> >>>>>> No, sorry.  I didn't know about Async.Log, and I wrote my own 
> logger. 
> >>>>>> Switching to this one is probably a good idea in the long run for 
> >>>>>> omake-server. 
> >>>>>> 
> >>>>>> On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky <
> ymi... at janestreet.com> 
> >>>>>> wrote: 
> >>>>>> > Sean, does your omake-server use Async.Log?  That might be a good 
> >>>>>> > example. 
> >>>>>> > 
> >>>>>> > y 
> >>>>>> > 
> >>>>>> > On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger 
> >>>>>> > <francois.ber... at gmail.com> wrote: 
> >>>>>> >> Is there some example program using this logger? 
> >>>>>> >> 
> >>>>>> >> 
> >>>>>> >> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger 
> >>>>>> >> wrote: 
> >>>>>> >>> 
> >>>>>> >>> OK, I'm hooked now. 
> >>>>>> >>> 
> >>>>>> >>> I plus core in my new project. 
> >>>>>> >>> 
> >>>>>> >>> Thanks! 
> >>>>>> >>> F. 
> >>>>>> >>> 
> >>>>>> >> 
> >>>>> 
> >>>>> 
> >>>> 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121106/9bd61581/attachment.html>

From yminsky at janestreet.com  Wed Nov  7 13:37:56 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Wed, 7 Nov 2012 08:37:56 -0500
Subject: any logger in core?
In-Reply-To: <CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
	<CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
	<7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
	<CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
	<CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
	<CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
	<CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
	<d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>
	<CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>
Message-ID: <CACLX4jRy4opueNd=8hJ7==Dtrh7JPa8KgY9_TyUsAdr-Wezi7w@mail.gmail.com>


You need to call Scheduler.go () to get the async scheduler running.

On Wed, Nov 7, 2012 at 3:34 AM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> I could create a test program.
>
> It compiles, at least, but has the funny property of not logging anything out.
>
> ---
> module Log  = Async_extra.Log
>
> let main () =
>
>   let logger = Log.create (Log.Level.of_string "Debug") [Log.Output.screen] in
>
>   Log.raw   logger "%s\n" "raw log";
>   Log.info  logger "%s\n" "info log";
>   Log.error logger "%s\n" "error log";
>   Log.debug logger "%s\n" "debug log";
>
>   Log.close logger
> ;;
>
> main()
> ---
>
> Here is the oasis file for it:
> ---
> OASISFormat: 0.3
> Name:        Toto
> Version:     0.1
> Synopsis:    Titi
> Authors:     Me
> License:     LGPL-3
> Plugins:     META (0.3), DevFiles (0.3)
>
> Executable logger_test
>   Path:           .
>   BuildDepends:   async_extra
>   BuildTools:     ocamlbuild
>   CompiledObject: native
>   MainIs:         logger_test.ml
> ---
>
> I was thinking all logs would print right away.
>
> Regards,
> F.
>
> On Wed, Nov 7, 2012 at 4:18 PM, Francois Berenger
> <francois.berenger.working at gmail.com> wrote:
>> Hello,
>>
>> How can I construct a value of type Async_extra.Log.Level
>> and an Async_extra.Log.Output?
>>
>> Sorry for the stupid question but I have never used
>> polymorphic variants.
>>
>> If you can point me to some simple explanation
>> on them, I will go and read it too
>> (I looked at http://caml.inria.fr/pub/docs/manual-ocaml/manual006.html
>> but it does not tell me why I should use them, just how).
>>
>> Thanks a lot,
>> F.
>>
>>
>> On Wednesday, November 7, 2012 10:59:54 AM UTC+9, Francois Berenger wrote:
>>>
>>> Yes I saw it, thanks.
>>>
>>> I'll also take a look at the .mli file, as I was advised to do so by
>>> David House.
>>> I'll try to make an example program to check I can use it correctly.
>>>
>>> On Tue, Nov 6, 2012 at 12:12 PM, Yaron Minsky <yminsky at janestreet.com>
>>> wrote:
>>> > No, did you see my link?  You can read the ocamldocs:
>>> >
>>> >
>>> > https://ocaml.janestreet.com/ocaml-core/108.07.01/doc/async_extra/Log.html
>>> >
>>> > On Mon, Nov 5, 2012 at 9:51 PM, Francois Berenger
>>> > <francois.berenger.working at gmail.com> wrote:
>>> >> Argh! I'm forced to read an mli file. ;)
>>> >>
>>> >> On Mon, Nov 5, 2012 at 8:15 PM, David House <dhouse at janestreet.com>
>>> >> wrote:
>>> >>> Judging from the mli, there should be some ocamldocs, yes.
>>> >>>
>>> >>> However, I recommend just looking at the mli.
>>> >>>
>>> >>> On Mon, Nov 5, 2012 at 6:08 AM, Francois Berenger
>>> >>> <francois.berenger.working at gmail.com> wrote:
>>> >>>>
>>> >>>> Is there some ocamldoc for it?
>>> >>>>
>>> >>>> I think I managed to compile the ocamldoc for core and async, but did
>>> >>>> not find anything about a Log module into it.
>>> >>>>
>>> >>>>
>>> >>>> On Sunday, November 4, 2012 9:15:45 PM UTC+9, Yaron Minsky wrote:
>>> >>>>>
>>> >>>>> Don't feel too bad about knowing about it.  It's quite new.
>>> >>>>>
>>> >>>>> But yeah, moving to it eventually sounds right.
>>> >>>>>
>>> >>>>> On Sat, Nov 3, 2012 at 6:43 PM, Sean McLaughlin <sea... at gmail.com>
>>> >>>>> wrote:
>>> >>>>>>
>>> >>>>>> No, sorry.  I didn't know about Async.Log, and I wrote my own
>>> >>>>>> logger.
>>> >>>>>> Switching to this one is probably a good idea in the long run for
>>> >>>>>> omake-server.
>>> >>>>>>
>>> >>>>>> On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky
>>> >>>>>> <ymi... at janestreet.com>
>>> >>>>>> wrote:
>>> >>>>>> > Sean, does your omake-server use Async.Log?  That might be a good
>>> >>>>>> > example.
>>> >>>>>> >
>>> >>>>>> > y
>>> >>>>>> >
>>> >>>>>> > On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger
>>> >>>>>> > <francois.ber... at gmail.com> wrote:
>>> >>>>>> >> Is there some example program using this logger?
>>> >>>>>> >>
>>> >>>>>> >>
>>> >>>>>> >> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger
>>> >>>>>> >> wrote:
>>> >>>>>> >>>
>>> >>>>>> >>> OK, I'm hooked now.
>>> >>>>>> >>>
>>> >>>>>> >>> I plus core in my new project.
>>> >>>>>> >>>
>>> >>>>>> >>> Thanks!
>>> >>>>>> >>> F.
>>> >>>>>> >>>
>>> >>>>>> >>
>>> >>>>>
>>> >>>>>
>>> >>>>


From dhouse at janestreet.com  Wed Nov  7 09:55:59 2012
From: dhouse at janestreet.com (David House)
Date: Wed, 7 Nov 2012 09:55:59 +0000
Subject: any logger in core?
In-Reply-To: <CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
	<CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
	<7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
	<CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
	<CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
	<CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
	<CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
	<d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>
	<CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>
Message-ID: <CAK=fH+gh3MGxObP-KUPVWfDCZJk8GZhTF+S6c_ktXCuK4_wbHg@mail.gmail.com>


You need to start the scheduler. You should do this in all async
programs, or else nothing will get run. Creating a log creates an
async Pipe.t, and doing Log.foo puts things onto that Pipe.t. There is
an async job to read things off of the pipe and to write them out. But
if you don't start the scheduler, this job won't get run. So add the
following at bottom of your code:

let () =
  main ();
  never_returns (Scheduler.go ())

The reason this is done, rather than just writing immediately, is in
case the write blocks, which would halt the whole process. If you
decide you don't care about this risk (e.g. if you're writing to a
terminal then it's not very likely), you can use Log.Blocking.

Also, a smaller point, it's more idiomatic to write "open Async.Std"
rather than referring directly to one of the three async
sub-libraries.

On Wed, Nov 7, 2012 at 8:34 AM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> I could create a test program.
>
> It compiles, at least, but has the funny property of not logging anything out.
>
> ---
> module Log  = Async_extra.Log
>
> let main () =
>
>   let logger = Log.create (Log.Level.of_string "Debug") [Log.Output.screen] in
>
>   Log.raw   logger "%s\n" "raw log";
>   Log.info  logger "%s\n" "info log";
>   Log.error logger "%s\n" "error log";
>   Log.debug logger "%s\n" "debug log";
>
>   Log.close logger
> ;;
>
> main()
> ---
>
> Here is the oasis file for it:
> ---
> OASISFormat: 0.3
> Name:        Toto
> Version:     0.1
> Synopsis:    Titi
> Authors:     Me
> License:     LGPL-3
> Plugins:     META (0.3), DevFiles (0.3)
>
> Executable logger_test
>   Path:           .
>   BuildDepends:   async_extra
>   BuildTools:     ocamlbuild
>   CompiledObject: native
>   MainIs:         logger_test.ml
> ---
>
> I was thinking all logs would print right away.
>
> Regards,
> F.
>
> On Wed, Nov 7, 2012 at 4:18 PM, Francois Berenger
> <francois.berenger.working at gmail.com> wrote:
>> Hello,
>>
>> How can I construct a value of type Async_extra.Log.Level
>> and an Async_extra.Log.Output?
>>
>> Sorry for the stupid question but I have never used
>> polymorphic variants.
>>
>> If you can point me to some simple explanation
>> on them, I will go and read it too
>> (I looked at http://caml.inria.fr/pub/docs/manual-ocaml/manual006.html
>> but it does not tell me why I should use them, just how).
>>
>> Thanks a lot,
>> F.
>>
>>
>> On Wednesday, November 7, 2012 10:59:54 AM UTC+9, Francois Berenger wrote:
>>>
>>> Yes I saw it, thanks.
>>>
>>> I'll also take a look at the .mli file, as I was advised to do so by
>>> David House.
>>> I'll try to make an example program to check I can use it correctly.
>>>
>>> On Tue, Nov 6, 2012 at 12:12 PM, Yaron Minsky <yminsky at janestreet.com>
>>> wrote:
>>> > No, did you see my link?  You can read the ocamldocs:
>>> >
>>> >
>>> > https://ocaml.janestreet.com/ocaml-core/108.07.01/doc/async_extra/Log.html
>>> >
>>> > On Mon, Nov 5, 2012 at 9:51 PM, Francois Berenger
>>> > <francois.berenger.working at gmail.com> wrote:
>>> >> Argh! I'm forced to read an mli file. ;)
>>> >>
>>> >> On Mon, Nov 5, 2012 at 8:15 PM, David House <dhouse at janestreet.com>
>>> >> wrote:
>>> >>> Judging from the mli, there should be some ocamldocs, yes.
>>> >>>
>>> >>> However, I recommend just looking at the mli.
>>> >>>
>>> >>> On Mon, Nov 5, 2012 at 6:08 AM, Francois Berenger
>>> >>> <francois.berenger.working at gmail.com> wrote:
>>> >>>>
>>> >>>> Is there some ocamldoc for it?
>>> >>>>
>>> >>>> I think I managed to compile the ocamldoc for core and async, but did
>>> >>>> not find anything about a Log module into it.
>>> >>>>
>>> >>>>
>>> >>>> On Sunday, November 4, 2012 9:15:45 PM UTC+9, Yaron Minsky wrote:
>>> >>>>>
>>> >>>>> Don't feel too bad about knowing about it.  It's quite new.
>>> >>>>>
>>> >>>>> But yeah, moving to it eventually sounds right.
>>> >>>>>
>>> >>>>> On Sat, Nov 3, 2012 at 6:43 PM, Sean McLaughlin <sea... at gmail.com>
>>> >>>>> wrote:
>>> >>>>>>
>>> >>>>>> No, sorry.  I didn't know about Async.Log, and I wrote my own
>>> >>>>>> logger.
>>> >>>>>> Switching to this one is probably a good idea in the long run for
>>> >>>>>> omake-server.
>>> >>>>>>
>>> >>>>>> On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky
>>> >>>>>> <ymi... at janestreet.com>
>>> >>>>>> wrote:
>>> >>>>>> > Sean, does your omake-server use Async.Log?  That might be a good
>>> >>>>>> > example.
>>> >>>>>> >
>>> >>>>>> > y
>>> >>>>>> >
>>> >>>>>> > On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger
>>> >>>>>> > <francois.ber... at gmail.com> wrote:
>>> >>>>>> >> Is there some example program using this logger?
>>> >>>>>> >>
>>> >>>>>> >>
>>> >>>>>> >> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger
>>> >>>>>> >> wrote:
>>> >>>>>> >>>
>>> >>>>>> >>> OK, I'm hooked now.
>>> >>>>>> >>>
>>> >>>>>> >>> I plus core in my new project.
>>> >>>>>> >>>
>>> >>>>>> >>> Thanks!
>>> >>>>>> >>> F.
>>> >>>>>> >>>
>>> >>>>>> >>
>>> >>>>>
>>> >>>>>
>>> >>>>


From francois.berenger.working at gmail.com  Wed Nov  7 01:59:53 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Wed, 7 Nov 2012 10:59:53 +0900
Subject: any logger in core?
In-Reply-To: <CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
	<CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
	<7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
	<CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
	<CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
	<CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
Message-ID: <CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>


Yes I saw it, thanks.

I'll also take a look at the .mli file, as I was advised to do so by
David House.
I'll try to make an example program to check I can use it correctly.

On Tue, Nov 6, 2012 at 12:12 PM, Yaron Minsky <yminsky at janestreet.com> wrote:
> No, did you see my link?  You can read the ocamldocs:
>
> https://ocaml.janestreet.com/ocaml-core/108.07.01/doc/async_extra/Log.html
>
> On Mon, Nov 5, 2012 at 9:51 PM, Francois Berenger
> <francois.berenger.working at gmail.com> wrote:
>> Argh! I'm forced to read an mli file. ;)
>>
>> On Mon, Nov 5, 2012 at 8:15 PM, David House <dhouse at janestreet.com> wrote:
>>> Judging from the mli, there should be some ocamldocs, yes.
>>>
>>> However, I recommend just looking at the mli.
>>>
>>> On Mon, Nov 5, 2012 at 6:08 AM, Francois Berenger
>>> <francois.berenger.working at gmail.com> wrote:
>>>>
>>>> Is there some ocamldoc for it?
>>>>
>>>> I think I managed to compile the ocamldoc for core and async, but did
>>>> not find anything about a Log module into it.
>>>>
>>>>
>>>> On Sunday, November 4, 2012 9:15:45 PM UTC+9, Yaron Minsky wrote:
>>>>>
>>>>> Don't feel too bad about knowing about it.  It's quite new.
>>>>>
>>>>> But yeah, moving to it eventually sounds right.
>>>>>
>>>>> On Sat, Nov 3, 2012 at 6:43 PM, Sean McLaughlin <sea... at gmail.com> wrote:
>>>>>>
>>>>>> No, sorry.  I didn't know about Async.Log, and I wrote my own logger.
>>>>>> Switching to this one is probably a good idea in the long run for
>>>>>> omake-server.
>>>>>>
>>>>>> On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky <ymi... at janestreet.com>
>>>>>> wrote:
>>>>>> > Sean, does your omake-server use Async.Log?  That might be a good
>>>>>> > example.
>>>>>> >
>>>>>> > y
>>>>>> >
>>>>>> > On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger
>>>>>> > <francois.ber... at gmail.com> wrote:
>>>>>> >> Is there some example program using this logger?
>>>>>> >>
>>>>>> >>
>>>>>> >> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger
>>>>>> >> wrote:
>>>>>> >>>
>>>>>> >>> OK, I'm hooked now.
>>>>>> >>>
>>>>>> >>> I plus core in my new project.
>>>>>> >>>
>>>>>> >>> Thanks!
>>>>>> >>> F.
>>>>>> >>>
>>>>>> >>
>>>>>
>>>>>
>>>>


From anil at recoil.org  Wed Nov  7 16:42:36 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Wed, 7 Nov 2012 16:42:36 +0000
Subject: How to load core in the toplevel?
In-Reply-To: <9c71cd13-99c1-40e5-bc68-08217ebb1438@googlegroups.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com> <69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com> <CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com> <8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com> <CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com> <9c71cd13-99c1-40e5-bc68-08217ebb1438@googlegroups.com>
Message-ID: <0347676C-3D96-40FF-96E9-02C4242825E5@recoil.org>

You should also add "#camlp4o" so that toplevel syntax extensions work too.

I'd really recommend using 'utop' (installable via OPAM) instead of the default toplevel. It doesn't require the extra -I that the default toplevel needs, and has a really nice interactive interpreter.

My full .ocamlinit with utop is:

#use "topfind"
#camlp4o
#thread
#require "core.top";;
#require "async";;
open Core.Std
open Async.Std


-anil

On 7 Nov 2012, at 05:33, Francois Berenger <francois.berenger.working at gmail.com> wrote:

> Thanks a lot.
> 
> So, the whole recipe in my case was:
> 
> ocaml -I $OCAML_TOPLEVEL_PATH
> #thread;;
> #require "core.top";;
> #require "async";;
> 
> Regards,
> F.
> 
> On Wednesday, November 7, 2012 12:09:15 PM UTC+9, Sebastien Mondet wrote:
> 
> 
> I think that one is the  
>    #thread;;
> thing
> 
> 
> 
> 
> On Tue, Nov 6, 2012 at 10:06 PM, Francois Berenger <francois.ber... at gmail.com> wrote:
> Thanks! That fixes the problem partially.
> 
> Now, I get:
> 
> # #require "core.top";;
> # #require "core.top";;stem/lib/core/core.cma: loaded
> Error: Reference to undefined global `Condition'
> # #require "core";;
> # #require "core";;m/system/lib/core/core.cma: loaded
> Error: Reference to undefined global `Condition'
> # #require "async";;
> # #require "async";;/system/lib/core/core.cma: loaded
> Error: Reference to undefined global `Condition'
> 
> Any hint?
> 
> 
> On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet wrote:
> 
> I'm not sure if this is your problem, but there was something with the toplevel (comming with the system compiler) not knowing about opam packages. 
> I have to launch:
> 
>    ocaml -I $OCAML_TOPLEVEL_PATH
> 
> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`)
> 
> 
> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger <francois.ber... at gmail.com> wrote:
> Apparently, ocamlfind knows where these libraries are:
> 
> $ ocamlfind -query core
> /home/berenger/.opam/system/lib/core
> $ ocamlfind -query async
> /home/berenger/.opam/system/lib/async
> $ ocamlfind -query async_extra
> /home/berenger/.opam/system/lib/async_extra
> 
> 
> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger wrote:
> Hello,
> 
> I'd like to play with core in my toplevel.
> 
> Is there a recipe?
> 
> I have installed everything with OPAM:
> $ opam list | egrep "core|async"
> async                 108.07.01  Monadic concurrency library
> async_core            108.07.01  Monadic concurrency library
> async_extra           108.07.01  Monadic concurrency library
> async_unix            108.07.01  Monadic concurrency library
> core                  108.07.01  Industrial strength alternative to OCaml's standard library
> core_extended                --  Extra components that are not as closely vetted or as stable as Core
> 
> In my toplevel, I type
> #use "topfind";;
> #list;;
> 
> Nothing about core or async shows up.
> While parmap is there, for example.
> 
> Is this normal?
> 
> I guess there is some configuration file of findlib to tweak somewhere.
> 
> Regards,
> F.
> 
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121107/693b19b4/attachment.html>

From francois.berenger.working at gmail.com  Wed Nov  7 08:34:07 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Wed, 7 Nov 2012 17:34:07 +0900
Subject: any logger in core?
In-Reply-To: <d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
	<CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
	<7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
	<CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
	<CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
	<CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
	<CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
	<d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>
Message-ID: <CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>


I could create a test program.

It compiles, at least, but has the funny property of not logging anything out.

---
module Log  = Async_extra.Log

let main () =

  let logger = Log.create (Log.Level.of_string "Debug") [Log.Output.screen] in

  Log.raw   logger "%s\n" "raw log";
  Log.info  logger "%s\n" "info log";
  Log.error logger "%s\n" "error log";
  Log.debug logger "%s\n" "debug log";

  Log.close logger
;;

main()
---

Here is the oasis file for it:
---
OASISFormat: 0.3
Name:        Toto
Version:     0.1
Synopsis:    Titi
Authors:     Me
License:     LGPL-3
Plugins:     META (0.3), DevFiles (0.3)

Executable logger_test
  Path:           .
  BuildDepends:   async_extra
  BuildTools:     ocamlbuild
  CompiledObject: native
  MainIs:         logger_test.ml
---

I was thinking all logs would print right away.

Regards,
F.

On Wed, Nov 7, 2012 at 4:18 PM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> Hello,
>
> How can I construct a value of type Async_extra.Log.Level
> and an Async_extra.Log.Output?
>
> Sorry for the stupid question but I have never used
> polymorphic variants.
>
> If you can point me to some simple explanation
> on them, I will go and read it too
> (I looked at http://caml.inria.fr/pub/docs/manual-ocaml/manual006.html
> but it does not tell me why I should use them, just how).
>
> Thanks a lot,
> F.
>
>
> On Wednesday, November 7, 2012 10:59:54 AM UTC+9, Francois Berenger wrote:
>>
>> Yes I saw it, thanks.
>>
>> I'll also take a look at the .mli file, as I was advised to do so by
>> David House.
>> I'll try to make an example program to check I can use it correctly.
>>
>> On Tue, Nov 6, 2012 at 12:12 PM, Yaron Minsky <yminsky at janestreet.com>
>> wrote:
>> > No, did you see my link?  You can read the ocamldocs:
>> >
>> >
>> > https://ocaml.janestreet.com/ocaml-core/108.07.01/doc/async_extra/Log.html
>> >
>> > On Mon, Nov 5, 2012 at 9:51 PM, Francois Berenger
>> > <francois.berenger.working at gmail.com> wrote:
>> >> Argh! I'm forced to read an mli file. ;)
>> >>
>> >> On Mon, Nov 5, 2012 at 8:15 PM, David House <dhouse at janestreet.com>
>> >> wrote:
>> >>> Judging from the mli, there should be some ocamldocs, yes.
>> >>>
>> >>> However, I recommend just looking at the mli.
>> >>>
>> >>> On Mon, Nov 5, 2012 at 6:08 AM, Francois Berenger
>> >>> <francois.berenger.working at gmail.com> wrote:
>> >>>>
>> >>>> Is there some ocamldoc for it?
>> >>>>
>> >>>> I think I managed to compile the ocamldoc for core and async, but did
>> >>>> not find anything about a Log module into it.
>> >>>>
>> >>>>
>> >>>> On Sunday, November 4, 2012 9:15:45 PM UTC+9, Yaron Minsky wrote:
>> >>>>>
>> >>>>> Don't feel too bad about knowing about it.  It's quite new.
>> >>>>>
>> >>>>> But yeah, moving to it eventually sounds right.
>> >>>>>
>> >>>>> On Sat, Nov 3, 2012 at 6:43 PM, Sean McLaughlin <sea... at gmail.com>
>> >>>>> wrote:
>> >>>>>>
>> >>>>>> No, sorry.  I didn't know about Async.Log, and I wrote my own
>> >>>>>> logger.
>> >>>>>> Switching to this one is probably a good idea in the long run for
>> >>>>>> omake-server.
>> >>>>>>
>> >>>>>> On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky
>> >>>>>> <ymi... at janestreet.com>
>> >>>>>> wrote:
>> >>>>>> > Sean, does your omake-server use Async.Log?  That might be a good
>> >>>>>> > example.
>> >>>>>> >
>> >>>>>> > y
>> >>>>>> >
>> >>>>>> > On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger
>> >>>>>> > <francois.ber... at gmail.com> wrote:
>> >>>>>> >> Is there some example program using this logger?
>> >>>>>> >>
>> >>>>>> >>
>> >>>>>> >> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger
>> >>>>>> >> wrote:
>> >>>>>> >>>
>> >>>>>> >>> OK, I'm hooked now.
>> >>>>>> >>>
>> >>>>>> >>> I plus core in my new project.
>> >>>>>> >>>
>> >>>>>> >>> Thanks!
>> >>>>>> >>> F.
>> >>>>>> >>>
>> >>>>>> >>
>> >>>>>
>> >>>>>
>> >>>>


From francois.berenger.fun at gmail.com  Thu Nov  8 02:12:51 2012
From: francois.berenger.fun at gmail.com (Francois)
Date: Wed, 7 Nov 2012 18:12:51 -0800 (PST)
Subject: How to load core in the toplevel?
In-Reply-To: <0347676C-3D96-40FF-96E9-02C4242825E5@recoil.org>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com> <69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com> <CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com> <8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com> <CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com> <9c71cd13-99c1-40e5-bc68-08217ebb1438@googlegroups.com>
 <0347676C-3D96-40FF-96E9-02C4242825E5@recoil.org>
Message-ID: <d8383ac4-4b16-4d76-8545-d0ca5629af7e@googlegroups.com>



On Thursday, November 8, 2012 1:42:41 AM UTC+9, Anil Madhavapeddy wrote:
>
> You should also add "#camlp4o" so that toplevel syntax extensions work too.
>

In the future, I think only the one from janestreet to do automatic
translations to/from s-expressions interests me.
I prefer to read standard OCaml code usually.
 

>
> I'd really recommend using 'utop' (installable via OPAM) instead of the 
> default toplevel. It doesn't require the extra -I that the default toplevel 
> needs, and has a really nice interactive interpreter.
>

I have to read about it.
I'm conservative about using new things (I'm an isolated OCaml developper, 
no one nearby to help me in case
I mess with something, that's why I'm so active on mailing lists).
 

>
> My full .ocamlinit with utop is:
>
> #use "topfind"
> #camlp4o
> #thread
> #require "core.top";;
> #require "async";;
> open Core.Std
> open Async.Std
>

Thanks for sharing this.
I'm very worried about the open directives
and try to never use them so I don't think
it would fit me for the moment.

Best regards,
Francois.



>
> -anil
>
> On 7 Nov 2012, at 05:33, Francois Berenger <francois.ber... at gmail.com<javascript:>> 
> wrote:
>
> Thanks a lot.
>
> So, the whole recipe in my case was:
>
> ocaml -I $OCAML_TOPLEVEL_PATH
> #thread;;
> #require "core.top";;
> #require "async";;
>
> Regards,
> F.
>
> On Wednesday, November 7, 2012 12:09:15 PM UTC+9, Sebastien Mondet wrote:
>>
>>
>>
>> I think that one is the  
>>    #thread;;
>> thing
>>
>>
>>
>>
>> On Tue, Nov 6, 2012 at 10:06 PM, Francois Berenger <
>> francois.ber... at gmail.com> wrote:
>>
>>> Thanks! That fixes the problem partially.
>>>
>>> Now, I get:
>>>
>>> # #require "core.top";;
>>> # #require "core.top";;stem/lib/core/core.cma: loaded
>>> Error: Reference to undefined global `Condition'
>>> # #require "core";;
>>> # #require "core";;m/system/lib/core/core.cma: loaded
>>> Error: Reference to undefined global `Condition'
>>> # #require "async";;
>>> # #require "async";;/system/lib/core/core.cma: loaded
>>> Error: Reference to undefined global `Condition'
>>>
>>> Any hint?
>>>
>>>
>>> On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet wrote:
>>>
>>>>
>>>> I'm not sure if this is your problem, but there was something with the 
>>>> toplevel (comming with the system compiler) not knowing about opam 
>>>> packages. 
>>>> I have to launch:
>>>>
>>>>    ocaml -I $OCAML_TOPLEVEL_PATH
>>>>
>>>> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`)
>>>>
>>>>
>>>> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger <francois.ber...@**
>>>> gmail.com> wrote:
>>>>
>>>>> Apparently, ocamlfind knows where these libraries are:
>>>>>
>>>>> $ ocamlfind -query core
>>>>> /home/berenger/.opam/system/**lib/core
>>>>> $ ocamlfind -query async
>>>>> /home/berenger/.opam/system/**lib/async
>>>>> $ ocamlfind -query async_extra
>>>>> /home/berenger/.opam/system/**lib/async_extra
>>>>>
>>>>>
>>>>> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger 
>>>>> wrote:
>>>>>>
>>>>>> Hello,
>>>>>>
>>>>>> I'd like to play with core in my toplevel.
>>>>>>
>>>>>> Is there a recipe?
>>>>>>
>>>>>> I have installed everything with OPAM:
>>>>>> $ opam list | egrep "core|async"
>>>>>> async                 108.07.01  Monadic concurrency library
>>>>>> async_core            108.07.01  Monadic concurrency library
>>>>>> async_extra           108.07.01  Monadic concurrency library
>>>>>> async_unix            108.07.01  Monadic concurrency library
>>>>>> core                  108.07.01  Industrial strength alternative to 
>>>>>> OCaml's standard library
>>>>>> core_extended                --  Extra components that are not as 
>>>>>> closely vetted or as stable as Core
>>>>>>
>>>>>> In my toplevel, I type
>>>>>> #use "topfind";;
>>>>>> #list;;
>>>>>>
>>>>>> Nothing about core or async shows up.
>>>>>> While parmap is there, for example.
>>>>>>
>>>>>> Is this normal?
>>>>>>
>>>>>> I guess there is some configuration file of findlib to tweak 
>>>>>> somewhere.
>>>>>>
>>>>>> Regards,
>>>>>> F.
>>>>>>
>>>>>>
>>>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121107/9f4d9545/attachment.html>

From francois.berenger.fun at gmail.com  Thu Nov  8 02:39:42 2012
From: francois.berenger.fun at gmail.com (Francois)
Date: Wed, 7 Nov 2012 18:39:42 -0800 (PST)
Subject: How to compile the examples in ocaml-core/base/async/examples ?
Message-ID: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>

Hello,

I'd like to compile then run some of them,
then have a look at their build scripts.

I don't know where never_returns is defined.

I also don't know with what lib I should link in
order to access the module Jane.Std.

Thanks,
F.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121107/7e32aab5/attachment.html>

From francois.berenger.fun at gmail.com  Thu Nov  8 03:48:14 2012
From: francois.berenger.fun at gmail.com (Francois)
Date: Wed, 7 Nov 2012 19:48:14 -0800 (PST)
Subject: any logger in core?
In-Reply-To: <CAK=fH+gh3MGxObP-KUPVWfDCZJk8GZhTF+S6c_ktXCuK4_wbHg@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
 <CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
 <117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
 <CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
 <20120714161518.GJ14582@dark.recoil.org>
 <9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
 <CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
 <004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
 <5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
 <CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
 <CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
 <CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
 <7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
 <CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
 <CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
 <CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
 <CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
 <d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>
 <CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>
 <CAK=fH+gh3MGxObP-KUPVWfDCZJk8GZhTF+S6c_ktXCuK4_wbHg@mail.gmail.com>
Message-ID: <04cc5df5-105f-4f90-8769-f499596d58ed@googlegroups.com>



On Wednesday, November 7, 2012 6:57:04 PM UTC+9, David House wrote:
>
> You need to start the scheduler. You should do this in all async 
> programs, or else nothing will get run. Creating a log creates an 
> async Pipe.t, and doing Log.foo puts things onto that Pipe.t. There is 
> an async job to read things off of the pipe and to write them out. But 
> if you don't start the scheduler, this job won't get run. So add the 
> following at bottom of your code: 
>
> let () = 
>   main (); 
>   never_returns (Scheduler.go ()) 
>

I don't know where to find never_returns.

But the following did work (and never stop):
---
module Log   = Async_extra.Log
module Sched = Async.Std.Scheduler

let main () =

  let logger = Log.create (Log.Level.of_string "Debug") [Log.Output.screen] 
in

  Log.raw   logger "%s\n" "raw log";
  Log.info  logger "%s\n" "info log";
  Log.error logger "%s\n" "error log";
  Log.debug logger "%s\n" "debug log";

  Log.close logger
;;

main();
Sched.go ()
---
 

>
> The reason this is done, rather than just writing immediately, is in 
> case the write blocks,


I see.

 

> which would halt the whole process. If you 
> decide you don't care about this risk (e.g. if you're writing to a 
> terminal then it's not very likely), you can use Log.Blocking. 
>

I'll try to use that. 


> Also, a smaller point, it's more idiomatic to write "open Async.Std" 
> rather than referring directly to one of the three async 
> sub-libraries. 
>

I'm affraid of open directives, I try to keep my code _very_ explicit
about what it is doing and which function from which module is used
(maybe because of past overexposure to some C++ code).

For the moment, I use the stdlib + batteries
+ (async and async_extra for just the logger).

In some other future thread, I might ask for some help on the
best way to remove batteries, then remove the stdlib,
hopefully to just depend on core and async in the future.

Thanks for all the help,
Francois.
 

>
> On Wed, Nov 7, 2012 at 8:34 AM, Francois Berenger 
> <francois.ber... at gmail.com <javascript:>> wrote: 
> > I could create a test program. 
> > 
> > It compiles, at least, but has the funny property of not logging 
> anything out. 
> > 
> > --- 
> > module Log  = Async_extra.Log 
> > 
> > let main () = 
> > 
> >   let logger = Log.create (Log.Level.of_string "Debug") 
> [Log.Output.screen] in 
> > 
> >   Log.raw   logger "%s\n" "raw log"; 
> >   Log.info  logger "%s\n" "info log"; 
> >   Log.error logger "%s\n" "error log"; 
> >   Log.debug logger "%s\n" "debug log"; 
> > 
> >   Log.close logger 
> > ;; 
> > 
> > main() 
> > --- 
> > 
> > Here is the oasis file for it: 
> > --- 
> > OASISFormat: 0.3 
> > Name:        Toto 
> > Version:     0.1 
> > Synopsis:    Titi 
> > Authors:     Me 
> > License:     LGPL-3 
> > Plugins:     META (0.3), DevFiles (0.3) 
> > 
> > Executable logger_test 
> >   Path:           . 
> >   BuildDepends:   async_extra 
> >   BuildTools:     ocamlbuild 
> >   CompiledObject: native 
> >   MainIs:         logger_test.ml 
> > --- 
> > 
> > I was thinking all logs would print right away. 
> > 
> > Regards, 
> > F. 
> > 
> > On Wed, Nov 7, 2012 at 4:18 PM, Francois Berenger 
> > <francois.ber... at gmail.com <javascript:>> wrote: 
> >> Hello, 
> >> 
> >> How can I construct a value of type Async_extra.Log.Level 
> >> and an Async_extra.Log.Output? 
> >> 
> >> Sorry for the stupid question but I have never used 
> >> polymorphic variants. 
> >> 
> >> If you can point me to some simple explanation 
> >> on them, I will go and read it too 
> >> (I looked at http://caml.inria.fr/pub/docs/manual-ocaml/manual006.html 
> >> but it does not tell me why I should use them, just how). 
> >> 
> >> Thanks a lot, 
> >> F. 
> >> 
> >> 
> >> On Wednesday, November 7, 2012 10:59:54 AM UTC+9, Francois Berenger 
> wrote: 
> >>> 
> >>> Yes I saw it, thanks. 
> >>> 
> >>> I'll also take a look at the .mli file, as I was advised to do so by 
> >>> David House. 
> >>> I'll try to make an example program to check I can use it correctly. 
> >>> 
> >>> On Tue, Nov 6, 2012 at 12:12 PM, Yaron Minsky <ymi... at janestreet.com<javascript:>> 
>
> >>> wrote: 
> >>> > No, did you see my link?  You can read the ocamldocs: 
> >>> > 
> >>> > 
> >>> > 
> https://ocaml.janestreet.com/ocaml-core/108.07.01/doc/async_extra/Log.html 
> >>> > 
> >>> > On Mon, Nov 5, 2012 at 9:51 PM, Francois Berenger 
> >>> > <francois.ber... at gmail.com <javascript:>> wrote: 
> >>> >> Argh! I'm forced to read an mli file. ;) 
> >>> >> 
> >>> >> On Mon, Nov 5, 2012 at 8:15 PM, David House <dho... at janestreet.com<javascript:>> 
>
> >>> >> wrote: 
> >>> >>> Judging from the mli, there should be some ocamldocs, yes. 
> >>> >>> 
> >>> >>> However, I recommend just looking at the mli. 
> >>> >>> 
> >>> >>> On Mon, Nov 5, 2012 at 6:08 AM, Francois Berenger 
> >>> >>> <francois.ber... at gmail.com <javascript:>> wrote: 
> >>> >>>> 
> >>> >>>> Is there some ocamldoc for it? 
> >>> >>>> 
> >>> >>>> I think I managed to compile the ocamldoc for core and async, but 
> did 
> >>> >>>> not find anything about a Log module into it. 
> >>> >>>> 
> >>> >>>> 
> >>> >>>> On Sunday, November 4, 2012 9:15:45 PM UTC+9, Yaron Minsky wrote: 
> >>> >>>>> 
> >>> >>>>> Don't feel too bad about knowing about it.  It's quite new. 
> >>> >>>>> 
> >>> >>>>> But yeah, moving to it eventually sounds right. 
> >>> >>>>> 
> >>> >>>>> On Sat, Nov 3, 2012 at 6:43 PM, Sean McLaughlin <
> sea... at gmail.com> 
> >>> >>>>> wrote: 
> >>> >>>>>> 
> >>> >>>>>> No, sorry.  I didn't know about Async.Log, and I wrote my own 
> >>> >>>>>> logger. 
> >>> >>>>>> Switching to this one is probably a good idea in the long run 
> for 
> >>> >>>>>> omake-server. 
> >>> >>>>>> 
> >>> >>>>>> On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky 
> >>> >>>>>> <ymi... at janestreet.com> 
> >>> >>>>>> wrote: 
> >>> >>>>>> > Sean, does your omake-server use Async.Log?  That might be a 
> good 
> >>> >>>>>> > example. 
> >>> >>>>>> > 
> >>> >>>>>> > y 
> >>> >>>>>> > 
> >>> >>>>>> > On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger 
> >>> >>>>>> > <francois.ber... at gmail.com> wrote: 
> >>> >>>>>> >> Is there some example program using this logger? 
> >>> >>>>>> >> 
> >>> >>>>>> >> 
> >>> >>>>>> >> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois 
> Berenger 
> >>> >>>>>> >> wrote: 
> >>> >>>>>> >>> 
> >>> >>>>>> >>> OK, I'm hooked now. 
> >>> >>>>>> >>> 
> >>> >>>>>> >>> I plus core in my new project. 
> >>> >>>>>> >>> 
> >>> >>>>>> >>> Thanks! 
> >>> >>>>>> >>> F. 
> >>> >>>>>> >>> 
> >>> >>>>>> >> 
> >>> >>>>> 
> >>> >>>>> 
> >>> >>>> 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121107/1ca31e29/attachment.html>

From francois.berenger.fun at gmail.com  Thu Nov  8 05:09:31 2012
From: francois.berenger.fun at gmail.com (Francois)
Date: Wed, 7 Nov 2012 21:09:31 -0800 (PST)
Subject: some example program using the logger
Message-ID: <6b4517a5-5e24-4b84-8539-8f8bf0609d9a@googlegroups.com>

Hi,

Thanks to all the feedback I got,
I could do what I want.
It compiles and runs properly.

Regards,
F.
---
module Log       = Async_extra.Log.Blocking
module LogLevel  = Async_extra.Log.Level
module LogOutput = Async_extra.Log.Blocking.Output

let main () =

  Log.set_level (LogLevel.of_string "Debug");
  Log.set_output LogOutput.screen;

  Log.raw   "%s" "raw log";
  Log.debug "%s" "debug log";
  Log.info  "%s" "info log";
  Log.error "%s" "error log";

  Printf.printf "a printf\n"
;;

main()
---

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121107/f3787ff7/attachment.html>

From francois.berenger.fun at gmail.com  Thu Nov  8 08:09:17 2012
From: francois.berenger.fun at gmail.com (Francois)
Date: Thu, 8 Nov 2012 00:09:17 -0800 (PST)
Subject: How to load core in the toplevel?
In-Reply-To: <87ehk4k4i5.fsf@li195-236.members.linode.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>
 <69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com>
 <CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>
 <8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com>
 <CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com>
 <9c71cd13-99c1-40e5-bc68-08217ebb1438@googlegroups.com>
 <0347676C-3D96-40FF-96E9-02C4242825E5@recoil.org>
 <d8383ac4-4b16-4d76-8545-d0ca5629af7e@googlegroups.com>
 <87ehk4k4i5.fsf@li195-236.members.linode.com>
Message-ID: <05549d39-5440-4798-ab80-745f69c2fc37@googlegroups.com>

What is the effect of doing an open of Core.Std (I don't need async for the 
moment)?

Does it override the standard prelude and the standard library?

On Thursday, November 8, 2012 3:12:06 PM UTC+9, Malcolm wrote:
>
> Core.Std and Async.Std are designed to be opened. 
>
> Francois <francois.b... at gmail.com <javascript:>> writes: 
>
> > On Thursday, November 8, 2012 1:42:41 AM UTC+9, Anil Madhavapeddy wrote: 
> >> 
> >> You should also add "#camlp4o" so that toplevel syntax extensions work 
> too. 
> >> 
> > 
> > In the future, I think only the one from janestreet to do automatic 
> > translations to/from s-expressions interests me. 
> > I prefer to read standard OCaml code usually. 
> >   
> > 
> >> 
> >> I'd really recommend using 'utop' (installable via OPAM) instead of the 
> >> default toplevel. It doesn't require the extra -I that the default 
> toplevel 
> >> needs, and has a really nice interactive interpreter. 
> >> 
> > 
> > I have to read about it. 
> > I'm conservative about using new things (I'm an isolated OCaml 
> developper, 
> > no one nearby to help me in case 
> > I mess with something, that's why I'm so active on mailing lists). 
> >   
> > 
> >> 
> >> My full .ocamlinit with utop is: 
> >> 
> >> #use "topfind" 
> >> #camlp4o 
> >> #thread 
> >> #require "core.top";; 
> >> #require "async";; 
> >> open Core.Std 
> >> open Async.Std 
> >> 
> > 
> > Thanks for sharing this. 
> > I'm very worried about the open directives 
> > and try to never use them so I don't think 
> > it would fit me for the moment. 
> > 
> > Best regards, 
> > Francois. 
> > 
> > 
> > 
> >> 
> >> -anil 
> >> 
> >> On 7 Nov 2012, at 05:33, Francois Berenger <francois.ber... at gmail.com<javascript:>> 
>
> >> wrote: 
> >> 
> >> Thanks a lot. 
> >> 
> >> So, the whole recipe in my case was: 
> >> 
> >> ocaml -I $OCAML_TOPLEVEL_PATH 
> >> #thread;; 
> >> #require "core.top";; 
> >> #require "async";; 
> >> 
> >> Regards, 
> >> F. 
> >> 
> >> On Wednesday, November 7, 2012 12:09:15 PM UTC+9, Sebastien Mondet 
> wrote: 
> >>> 
> >>> 
> >>> 
> >>> I think that one is the   
> >>>    #thread;; 
> >>> thing 
> >>> 
> >>> 
> >>> 
> >>> 
> >>> On Tue, Nov 6, 2012 at 10:06 PM, Francois Berenger < 
> >>> francois.ber... at gmail.com> wrote: 
> >>> 
> >>>> Thanks! That fixes the problem partially. 
> >>>> 
> >>>> Now, I get: 
> >>>> 
> >>>> # #require "core.top";; 
> >>>> # #require "core.top";;stem/lib/core/core.cma: loaded 
> >>>> Error: Reference to undefined global `Condition' 
> >>>> # #require "core";; 
> >>>> # #require "core";;m/system/lib/core/core.cma: loaded 
> >>>> Error: Reference to undefined global `Condition' 
> >>>> # #require "async";; 
> >>>> # #require "async";;/system/lib/core/core.cma: loaded 
> >>>> Error: Reference to undefined global `Condition' 
> >>>> 
> >>>> Any hint? 
> >>>> 
> >>>> 
> >>>> On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet 
> wrote: 
> >>>> 
> >>>>> 
> >>>>> I'm not sure if this is your problem, but there was something with 
> the 
> >>>>> toplevel (comming with the system compiler) not knowing about opam 
> >>>>> packages. 
> >>>>> I have to launch: 
> >>>>> 
> >>>>>    ocaml -I $OCAML_TOPLEVEL_PATH 
> >>>>> 
> >>>>> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`) 
> >>>>> 
> >>>>> 
> >>>>> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger 
> <francois.ber...@** 
> >>>>> gmail.com> wrote: 
> >>>>> 
> >>>>>> Apparently, ocamlfind knows where these libraries are: 
> >>>>>> 
> >>>>>> $ ocamlfind -query core 
> >>>>>> /home/berenger/.opam/system/**lib/core 
> >>>>>> $ ocamlfind -query async 
> >>>>>> /home/berenger/.opam/system/**lib/async 
> >>>>>> $ ocamlfind -query async_extra 
> >>>>>> /home/berenger/.opam/system/**lib/async_extra 
> >>>>>> 
> >>>>>> 
> >>>>>> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger 
> >>>>>> wrote: 
> >>>>>>> 
> >>>>>>> Hello, 
> >>>>>>> 
> >>>>>>> I'd like to play with core in my toplevel. 
> >>>>>>> 
> >>>>>>> Is there a recipe? 
> >>>>>>> 
> >>>>>>> I have installed everything with OPAM: 
> >>>>>>> $ opam list | egrep "core|async" 
> >>>>>>> async                 108.07.01  Monadic concurrency library 
> >>>>>>> async_core            108.07.01  Monadic concurrency library 
> >>>>>>> async_extra           108.07.01  Monadic concurrency library 
> >>>>>>> async_unix            108.07.01  Monadic concurrency library 
> >>>>>>> core                  108.07.01  Industrial strength alternative 
> to 
> >>>>>>> OCaml's standard library 
> >>>>>>> core_extended                --  Extra components that are not as 
> >>>>>>> closely vetted or as stable as Core 
> >>>>>>> 
> >>>>>>> In my toplevel, I type 
> >>>>>>> #use "topfind";; 
> >>>>>>> #list;; 
> >>>>>>> 
> >>>>>>> Nothing about core or async shows up. 
> >>>>>>> While parmap is there, for example. 
> >>>>>>> 
> >>>>>>> Is this normal? 
> >>>>>>> 
> >>>>>>> I guess there is some configuration file of findlib to tweak 
> >>>>>>> somewhere. 
> >>>>>>> 
> >>>>>>> Regards, 
> >>>>>>> F. 
> >>>>>>> 
> >>>>>>> 
> >>>>> 
> >>> 
> >> 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121108/5a253e75/attachment.html>

From mmatalka at gmail.com  Thu Nov  8 06:12:02 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Thu, 08 Nov 2012 01:12:02 -0500
Subject: How to load core in the toplevel?
In-Reply-To: <d8383ac4-4b16-4d76-8545-d0ca5629af7e@googlegroups.com>
	(Francois's message of "Wed, 7 Nov 2012 18:12:51 -0800 (PST)")
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>
	<69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com>
	<CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>
	<8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com>
	<CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com>
	<9c71cd13-99c1-40e5-bc68-08217ebb1438@googlegroups.com>
	<0347676C-3D96-40FF-96E9-02C4242825E5@recoil.org>
	<d8383ac4-4b16-4d76-8545-d0ca5629af7e@googlegroups.com>
Message-ID: <87ehk4k4i5.fsf@li195-236.members.linode.com>


Core.Std and Async.Std are designed to be opened.

Francois <francois.berenger.fun at gmail.com> writes:

> On Thursday, November 8, 2012 1:42:41 AM UTC+9, Anil Madhavapeddy wrote:
>>
>> You should also add "#camlp4o" so that toplevel syntax extensions work too.
>>
>
> In the future, I think only the one from janestreet to do automatic
> translations to/from s-expressions interests me.
> I prefer to read standard OCaml code usually.
>  
>
>>
>> I'd really recommend using 'utop' (installable via OPAM) instead of the 
>> default toplevel. It doesn't require the extra -I that the default toplevel 
>> needs, and has a really nice interactive interpreter.
>>
>
> I have to read about it.
> I'm conservative about using new things (I'm an isolated OCaml developper, 
> no one nearby to help me in case
> I mess with something, that's why I'm so active on mailing lists).
>  
>
>>
>> My full .ocamlinit with utop is:
>>
>> #use "topfind"
>> #camlp4o
>> #thread
>> #require "core.top";;
>> #require "async";;
>> open Core.Std
>> open Async.Std
>>
>
> Thanks for sharing this.
> I'm very worried about the open directives
> and try to never use them so I don't think
> it would fit me for the moment.
>
> Best regards,
> Francois.
>
>
>
>>
>> -anil
>>
>> On 7 Nov 2012, at 05:33, Francois Berenger <francois.ber... at gmail.com<javascript:>> 
>> wrote:
>>
>> Thanks a lot.
>>
>> So, the whole recipe in my case was:
>>
>> ocaml -I $OCAML_TOPLEVEL_PATH
>> #thread;;
>> #require "core.top";;
>> #require "async";;
>>
>> Regards,
>> F.
>>
>> On Wednesday, November 7, 2012 12:09:15 PM UTC+9, Sebastien Mondet wrote:
>>>
>>>
>>>
>>> I think that one is the  
>>>    #thread;;
>>> thing
>>>
>>>
>>>
>>>
>>> On Tue, Nov 6, 2012 at 10:06 PM, Francois Berenger <
>>> francois.ber... at gmail.com> wrote:
>>>
>>>> Thanks! That fixes the problem partially.
>>>>
>>>> Now, I get:
>>>>
>>>> # #require "core.top";;
>>>> # #require "core.top";;stem/lib/core/core.cma: loaded
>>>> Error: Reference to undefined global `Condition'
>>>> # #require "core";;
>>>> # #require "core";;m/system/lib/core/core.cma: loaded
>>>> Error: Reference to undefined global `Condition'
>>>> # #require "async";;
>>>> # #require "async";;/system/lib/core/core.cma: loaded
>>>> Error: Reference to undefined global `Condition'
>>>>
>>>> Any hint?
>>>>
>>>>
>>>> On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet wrote:
>>>>
>>>>>
>>>>> I'm not sure if this is your problem, but there was something with the 
>>>>> toplevel (comming with the system compiler) not knowing about opam 
>>>>> packages. 
>>>>> I have to launch:
>>>>>
>>>>>    ocaml -I $OCAML_TOPLEVEL_PATH
>>>>>
>>>>> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`)
>>>>>
>>>>>
>>>>> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger <francois.ber...@**
>>>>> gmail.com> wrote:
>>>>>
>>>>>> Apparently, ocamlfind knows where these libraries are:
>>>>>>
>>>>>> $ ocamlfind -query core
>>>>>> /home/berenger/.opam/system/**lib/core
>>>>>> $ ocamlfind -query async
>>>>>> /home/berenger/.opam/system/**lib/async
>>>>>> $ ocamlfind -query async_extra
>>>>>> /home/berenger/.opam/system/**lib/async_extra
>>>>>>
>>>>>>
>>>>>> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger 
>>>>>> wrote:
>>>>>>>
>>>>>>> Hello,
>>>>>>>
>>>>>>> I'd like to play with core in my toplevel.
>>>>>>>
>>>>>>> Is there a recipe?
>>>>>>>
>>>>>>> I have installed everything with OPAM:
>>>>>>> $ opam list | egrep "core|async"
>>>>>>> async                 108.07.01  Monadic concurrency library
>>>>>>> async_core            108.07.01  Monadic concurrency library
>>>>>>> async_extra           108.07.01  Monadic concurrency library
>>>>>>> async_unix            108.07.01  Monadic concurrency library
>>>>>>> core                  108.07.01  Industrial strength alternative to 
>>>>>>> OCaml's standard library
>>>>>>> core_extended                --  Extra components that are not as 
>>>>>>> closely vetted or as stable as Core
>>>>>>>
>>>>>>> In my toplevel, I type
>>>>>>> #use "topfind";;
>>>>>>> #list;;
>>>>>>>
>>>>>>> Nothing about core or async shows up.
>>>>>>> While parmap is there, for example.
>>>>>>>
>>>>>>> Is this normal?
>>>>>>>
>>>>>>> I guess there is some configuration file of findlib to tweak 
>>>>>>> somewhere.
>>>>>>>
>>>>>>> Regards,
>>>>>>> F.
>>>>>>>
>>>>>>>
>>>>>
>>>
>>


From mmatalka at gmail.com  Thu Nov  8 06:13:36 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Thu, 08 Nov 2012 01:13:36 -0500
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
	(Francois's message of "Wed, 7 Nov 2012 18:39:42 -0800 (PST)")
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
Message-ID: <87a9usk4fj.fsf@li195-236.members.linode.com>


never_returns is in Core.Std.  I'm might be wrong by I don't think
Jane.Std actually exists anymore, instead you want Core.Std and
Async.Std opened to have the equivalent effect.

Francois <francois.berenger.fun at gmail.com> writes:

> Hello,
>
> I'd like to compile then run some of them,
> then have a look at their build scripts.
>
> I don't know where never_returns is defined.
>
> I also don't know with what lib I should link in
> order to access the module Jane.Std.
>
> Thanks,
> F.


From yminsky at janestreet.com  Thu Nov  8 11:41:04 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 8 Nov 2012 06:41:04 -0500
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <87a9usk4fj.fsf@li195-236.members.linode.com>
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
	<87a9usk4fj.fsf@li195-236.members.linode.com>
Message-ID: <CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>


Jane.Std is some internal stuff that is not exported.  We should fix
that example not to use it.  Which specific example is it?

y

On Thu, Nov 8, 2012 at 1:13 AM, Malcolm Matalka <mmatalka at gmail.com> wrote:
> never_returns is in Core.Std.  I'm might be wrong by I don't think
> Jane.Std actually exists anymore, instead you want Core.Std and
> Async.Std opened to have the equivalent effect.
>
> Francois <francois.berenger.fun at gmail.com> writes:
>
>> Hello,
>>
>> I'd like to compile then run some of them,
>> then have a look at their build scripts.
>>
>> I don't know where never_returns is defined.
>>
>> I also don't know with what lib I should link in
>> order to access the module Jane.Std.
>>
>> Thanks,
>> F.


From yminsky at janestreet.com  Thu Nov  8 11:41:20 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 8 Nov 2012 06:41:20 -0500
Subject: How to load core in the toplevel?
In-Reply-To: <05549d39-5440-4798-ab80-745f69c2fc37@googlegroups.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>
	<69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com>
	<CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>
	<8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com>
	<CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com>
	<9c71cd13-99c1-40e5-bc68-08217ebb1438@googlegroups.com>
	<0347676C-3D96-40FF-96E9-02C4242825E5@recoil.org>
	<d8383ac4-4b16-4d76-8545-d0ca5629af7e@googlegroups.com>
	<87ehk4k4i5.fsf@li195-236.members.linode.com>
	<05549d39-5440-4798-ab80-745f69c2fc37@googlegroups.com>
Message-ID: <CACLX4jSadoU6b55rd2a55vZXwSZbDeJ=-4uKFt+a2ScoiN9-AA@mail.gmail.com>


On Thu, Nov 8, 2012 at 3:09 AM, Francois
<francois.berenger.fun at gmail.com> wrote:
> What is the effect of doing an open of Core.Std (I don't need async for the
> moment)?
>
> Does it override the standard prelude and the standard library?

Yes.

>
> On Thursday, November 8, 2012 3:12:06 PM UTC+9, Malcolm wrote:
>>
>> Core.Std and Async.Std are designed to be opened.
>>
>> Francois <francois.b... at gmail.com> writes:
>>
>> > On Thursday, November 8, 2012 1:42:41 AM UTC+9, Anil Madhavapeddy wrote:
>> >>
>> >> You should also add "#camlp4o" so that toplevel syntax extensions work
>> >> too.
>> >>
>> >
>> > In the future, I think only the one from janestreet to do automatic
>> > translations to/from s-expressions interests me.
>> > I prefer to read standard OCaml code usually.
>> >
>> >
>> >>
>> >> I'd really recommend using 'utop' (installable via OPAM) instead of the
>> >> default toplevel. It doesn't require the extra -I that the default
>> >> toplevel
>> >> needs, and has a really nice interactive interpreter.
>> >>
>> >
>> > I have to read about it.
>> > I'm conservative about using new things (I'm an isolated OCaml
>> > developper,
>> > no one nearby to help me in case
>> > I mess with something, that's why I'm so active on mailing lists).
>> >
>> >
>> >>
>> >> My full .ocamlinit with utop is:
>> >>
>> >> #use "topfind"
>> >> #camlp4o
>> >> #thread
>> >> #require "core.top";;
>> >> #require "async";;
>> >> open Core.Std
>> >> open Async.Std
>> >>
>> >
>> > Thanks for sharing this.
>> > I'm very worried about the open directives
>> > and try to never use them so I don't think
>> > it would fit me for the moment.
>> >
>> > Best regards,
>> > Francois.
>> >
>> >
>> >
>> >>
>> >> -anil
>> >>
>> >> On 7 Nov 2012, at 05:33, Francois Berenger
>> >> <francois.ber... at gmail.com<javascript:>>
>> >> wrote:
>> >>
>> >> Thanks a lot.
>> >>
>> >> So, the whole recipe in my case was:
>> >>
>> >> ocaml -I $OCAML_TOPLEVEL_PATH
>> >> #thread;;
>> >> #require "core.top";;
>> >> #require "async";;
>> >>
>> >> Regards,
>> >> F.
>> >>
>> >> On Wednesday, November 7, 2012 12:09:15 PM UTC+9, Sebastien Mondet
>> >> wrote:
>> >>>
>> >>>
>> >>>
>> >>> I think that one is the
>> >>>    #thread;;
>> >>> thing
>> >>>
>> >>>
>> >>>
>> >>>
>> >>> On Tue, Nov 6, 2012 at 10:06 PM, Francois Berenger <
>> >>> francois.ber... at gmail.com> wrote:
>> >>>
>> >>>> Thanks! That fixes the problem partially.
>> >>>>
>> >>>> Now, I get:
>> >>>>
>> >>>> # #require "core.top";;
>> >>>> # #require "core.top";;stem/lib/core/core.cma: loaded
>> >>>> Error: Reference to undefined global `Condition'
>> >>>> # #require "core";;
>> >>>> # #require "core";;m/system/lib/core/core.cma: loaded
>> >>>> Error: Reference to undefined global `Condition'
>> >>>> # #require "async";;
>> >>>> # #require "async";;/system/lib/core/core.cma: loaded
>> >>>> Error: Reference to undefined global `Condition'
>> >>>>
>> >>>> Any hint?
>> >>>>
>> >>>>
>> >>>> On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet
>> >>>> wrote:
>> >>>>
>> >>>>>
>> >>>>> I'm not sure if this is your problem, but there was something with
>> >>>>> the
>> >>>>> toplevel (comming with the system compiler) not knowing about opam
>> >>>>> packages.
>> >>>>> I have to launch:
>> >>>>>
>> >>>>>    ocaml -I $OCAML_TOPLEVEL_PATH
>> >>>>>
>> >>>>> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`)
>> >>>>>
>> >>>>>
>> >>>>> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger
>> >>>>> <francois.ber...@**
>> >>>>> gmail.com> wrote:
>> >>>>>
>> >>>>>> Apparently, ocamlfind knows where these libraries are:
>> >>>>>>
>> >>>>>> $ ocamlfind -query core
>> >>>>>> /home/berenger/.opam/system/**lib/core
>> >>>>>> $ ocamlfind -query async
>> >>>>>> /home/berenger/.opam/system/**lib/async
>> >>>>>> $ ocamlfind -query async_extra
>> >>>>>> /home/berenger/.opam/system/**lib/async_extra
>> >>>>>>
>> >>>>>>
>> >>>>>> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger
>> >>>>>> wrote:
>> >>>>>>>
>> >>>>>>> Hello,
>> >>>>>>>
>> >>>>>>> I'd like to play with core in my toplevel.
>> >>>>>>>
>> >>>>>>> Is there a recipe?
>> >>>>>>>
>> >>>>>>> I have installed everything with OPAM:
>> >>>>>>> $ opam list | egrep "core|async"
>> >>>>>>> async                 108.07.01  Monadic concurrency library
>> >>>>>>> async_core            108.07.01  Monadic concurrency library
>> >>>>>>> async_extra           108.07.01  Monadic concurrency library
>> >>>>>>> async_unix            108.07.01  Monadic concurrency library
>> >>>>>>> core                  108.07.01  Industrial strength alternative
>> >>>>>>> to
>> >>>>>>> OCaml's standard library
>> >>>>>>> core_extended                --  Extra components that are not as
>> >>>>>>> closely vetted or as stable as Core
>> >>>>>>>
>> >>>>>>> In my toplevel, I type
>> >>>>>>> #use "topfind";;
>> >>>>>>> #list;;
>> >>>>>>>
>> >>>>>>> Nothing about core or async shows up.
>> >>>>>>> While parmap is there, for example.
>> >>>>>>>
>> >>>>>>> Is this normal?
>> >>>>>>>
>> >>>>>>> I guess there is some configuration file of findlib to tweak
>> >>>>>>> somewhere.
>> >>>>>>>
>> >>>>>>> Regards,
>> >>>>>>> F.
>> >>>>>>>
>> >>>>>>>
>> >>>>>
>> >>>
>> >>


From dhouse at janestreet.com  Thu Nov  8 10:12:21 2012
From: dhouse at janestreet.com (David House)
Date: Thu, 8 Nov 2012 10:12:21 +0000
Subject: any logger in core?
In-Reply-To: <04cc5df5-105f-4f90-8769-f499596d58ed@googlegroups.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
	<CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
	<7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
	<CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
	<CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
	<CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
	<CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
	<d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>
	<CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>
	<CAK=fH+gh3MGxObP-KUPVWfDCZJk8GZhTF+S6c_ktXCuK4_wbHg@mail.gmail.com>
	<04cc5df5-105f-4f90-8769-f499596d58ed@googlegroups.com>
Message-ID: <CAK=fH+gakKwvurMB5RHZpMdHA8vVh3c+gGR_-kiHrAtLhmugtQ@mail.gmail.com>


On Thu, Nov 8, 2012 at 3:48 AM, Francois
<francois.berenger.fun at gmail.com> wrote:
> I don't know where to find never_returns.

It's there if you open Core.Std.

> But the following did work (and never stop):

You need to explicitly shut down async using the shutdown function in Async.Std.

> I'm affraid of open directives, I try to keep my code _very_ explicit
> about what it is doing and which function from which module is used
> (maybe because of past overexposure to some C++ code).

I think that's exactly the right approach -- I often find myself
making similar comments when doing code review at work. Things are
much easier to follow if opens are reduced, or made more local, and
more explicit.

That being said, I do allow myself the luxury of opening Core.Std and
Async.Std in most of my modules that use core / async. I find this to
strike a good balance between concision and explicitness.

One of the reasons is that there are very few *values* brought into
scope by opening Core.Std and Async.Std. This conversation has contain
disproportionally many: never_returns, shutdown, etc. -- an unlucky
coincidence! But nearly everything is squirreled away inside a module,
which helps a lot. (In other words, our "Pervasives" is much smaller
than the ocaml standard library's.)


From dhouse at janestreet.com  Thu Nov  8 10:21:15 2012
From: dhouse at janestreet.com (David House)
Date: Thu, 8 Nov 2012 10:21:15 +0000
Subject: some example program using the logger
In-Reply-To: <6b4517a5-5e24-4b84-8539-8f8bf0609d9a@googlegroups.com>
References: <6b4517a5-5e24-4b84-8539-8f8bf0609d9a@googlegroups.com>
Message-ID: <CAK=fH+hHHHXeDvqJiU2j8BnFXB4nL8LZCOmB2gkpdsj36wTmxg@mail.gmail.com>


For the sake of comparison, I would write this as follows. (N.b.:
untested! There are probably typos.)

open Core.Std
open Async.Std

let main () =
  Log.Global.set_level (Log.Level.of_string "Debug");
  Log.global.set_output Log.Output.screen;

  Log.Global.raw   "%s" "raw log";
  Log.Global.debug "%s" "debug log";
  Log.Global.info  "%s" "info log";
  Log.Global.error "%s" "error log";

  Printf.printf "a printf\n";
  shutdown 0

let () =
  main ();
  never_returns (Scheduler.go ())

On Thu, Nov 8, 2012 at 5:09 AM, Francois
<francois.berenger.fun at gmail.com> wrote:
> Hi,
>
> Thanks to all the feedback I got,
> I could do what I want.
> It compiles and runs properly.
>
> Regards,
> F.
> ---
> module Log       = Async_extra.Log.Blocking
> module LogLevel  = Async_extra.Log.Level
> module LogOutput = Async_extra.Log.Blocking.Output
>
> let main () =
>
>   Log.set_level (LogLevel.of_string "Debug");
>   Log.set_output LogOutput.screen;
>
>   Log.raw   "%s" "raw log";
>   Log.debug "%s" "debug log";
>   Log.info  "%s" "info log";
>   Log.error "%s" "error log";
>
>   Printf.printf "a printf\n"
> ;;
>
> main()
> ---
>


From agarwal1975 at gmail.com  Thu Nov  8 16:06:02 2012
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Thu, 8 Nov 2012 11:06:02 -0500
Subject: How to load core in the toplevel?
In-Reply-To: <d8383ac4-4b16-4d76-8545-d0ca5629af7e@googlegroups.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>
 <69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com> <CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>
 <8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com> <CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com>
 <9c71cd13-99c1-40e5-bc68-08217ebb1438@googlegroups.com> <0347676C-3D96-40FF-96E9-02C4242825E5@recoil.org>
 <d8383ac4-4b16-4d76-8545-d0ca5629af7e@googlegroups.com>
Message-ID: <CAMu2m2KC2VFp4a1Wa2jrJgoQ3pxzeOf4AEiWhB8e3d2bjZxzkg@mail.gmail.com>

> I'm very worried about the open directives

Your concern is generally correct, but not always. If you are using Jane
Street Core, the implication is that you've chosen this as your standard
library, and doing open Core.Std is the way to use it.


On 7 Nov 2012, at 05:33, Francois Berenger <francois.ber...@**gmail.com>
wrote:

>
>> Thanks a lot.
>>
>> So, the whole recipe in my case was:
>>
>> ocaml -I $OCAML_TOPLEVEL_PATH
>> #thread;;
>> #require "core.top";;
>> #require "async";;
>>
>> Regards,
>> F.
>>
>> On Wednesday, November 7, 2012 12:09:15 PM UTC+9, Sebastien Mondet wrote:
>>>
>>>
>>>
>>> I think that one is the
>>>    #thread;;
>>> thing
>>>
>>>
>>>
>>>
>>> On Tue, Nov 6, 2012 at 10:06 PM, Francois Berenger <
>>> francois.ber... at gmail.com> wrote:
>>>
>>>> Thanks! That fixes the problem partially.
>>>>
>>>> Now, I get:
>>>>
>>>> # #require "core.top";;
>>>> # #require "core.top";;stem/lib/core/**core.cma: loaded
>>>> Error: Reference to undefined global `Condition'
>>>> # #require "core";;
>>>> # #require "core";;m/system/lib/core/**core.cma: loaded
>>>> Error: Reference to undefined global `Condition'
>>>> # #require "async";;
>>>> # #require "async";;/system/lib/core/**core.cma: loaded
>>>> Error: Reference to undefined global `Condition'
>>>>
>>>> Any hint?
>>>>
>>>>
>>>> On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet
>>>> wrote:
>>>>
>>>>>
>>>>> I'm not sure if this is your problem, but there was something with the
>>>>> toplevel (comming with the system compiler) not knowing about opam
>>>>> packages.
>>>>> I have to launch:
>>>>>
>>>>>    ocaml -I $OCAML_TOPLEVEL_PATH
>>>>>
>>>>> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`)
>>>>>
>>>>>
>>>>> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger <francois.ber...@**
>>>>> gmail.com> wrote:
>>>>>
>>>>>> Apparently, ocamlfind knows where these libraries are:
>>>>>>
>>>>>> $ ocamlfind -query core
>>>>>> /home/berenger/.opam/system/**li**b/core
>>>>>> $ ocamlfind -query async
>>>>>> /home/berenger/.opam/system/**li**b/async
>>>>>> $ ocamlfind -query async_extra
>>>>>> /home/berenger/.opam/system/**li**b/async_extra
>>>>>>
>>>>>>
>>>>>> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger
>>>>>> wrote:
>>>>>>>
>>>>>>> Hello,
>>>>>>>
>>>>>>> I'd like to play with core in my toplevel.
>>>>>>>
>>>>>>> Is there a recipe?
>>>>>>>
>>>>>>> I have installed everything with OPAM:
>>>>>>> $ opam list | egrep "core|async"
>>>>>>> async                 108.07.01  Monadic concurrency library
>>>>>>> async_core            108.07.01  Monadic concurrency library
>>>>>>> async_extra           108.07.01  Monadic concurrency library
>>>>>>> async_unix            108.07.01  Monadic concurrency library
>>>>>>> core                  108.07.01  Industrial strength alternative to
>>>>>>> OCaml's standard library
>>>>>>> core_extended                --  Extra components that are not as
>>>>>>> closely vetted or as stable as Core
>>>>>>>
>>>>>>> In my toplevel, I type
>>>>>>> #use "topfind";;
>>>>>>> #list;;
>>>>>>>
>>>>>>> Nothing about core or async shows up.
>>>>>>> While parmap is there, for example.
>>>>>>>
>>>>>>> Is this normal?
>>>>>>>
>>>>>>> I guess there is some configuration file of findlib to tweak
>>>>>>> somewhere.
>>>>>>>
>>>>>>> Regards,
>>>>>>> F.
>>>>>>>
>>>>>>>
>>>>>
>>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121108/b06babb9/attachment.html>

From yminsky at janestreet.com  Thu Nov  8 16:25:18 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 8 Nov 2012 11:25:18 -0500
Subject: How to load core in the toplevel?
In-Reply-To: <CAMu2m2KC2VFp4a1Wa2jrJgoQ3pxzeOf4AEiWhB8e3d2bjZxzkg@mail.gmail.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>
	<69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com>
	<CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>
	<8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com>
	<CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com>
	<9c71cd13-99c1-40e5-bc68-08217ebb1438@googlegroups.com>
	<0347676C-3D96-40FF-96E9-02C4242825E5@recoil.org>
	<d8383ac4-4b16-4d76-8545-d0ca5629af7e@googlegroups.com>
	<CAMu2m2KC2VFp4a1Wa2jrJgoQ3pxzeOf4AEiWhB8e3d2bjZxzkg@mail.gmail.com>
Message-ID: <CACLX4jTPxtt2KfMBs-7nNbdB9_DUKDu9GUo+XwarJ8vmFaSzfQ@mail.gmail.com>


And even if you want to pick and choose what you want to use, you
should get things from the Std namespace.  i.e., you should grab
things from Async.Std rather than from Async_extra.  It would be
reasonable to do:

module Core = Core.Std
module Async = Async.Std

and just qualify things by "Core" and "Async" when you wanted them.

That said, I do think the Core.Std overlay is quite pleasant.

y

On Thu, Nov 8, 2012 at 11:06 AM, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
>> I'm very worried about the open directives
>
> Your concern is generally correct, but not always. If you are using Jane
> Street Core, the implication is that you've chosen this as your standard
> library, and doing open Core.Std is the way to use it.
>
>
> On 7 Nov 2012, at 05:33, Francois Berenger <francois.ber... at gmail.com>
> wrote:
>>>
>>>
>>> Thanks a lot.
>>>
>>> So, the whole recipe in my case was:
>>>
>>> ocaml -I $OCAML_TOPLEVEL_PATH
>>> #thread;;
>>> #require "core.top";;
>>> #require "async";;
>>>
>>> Regards,
>>> F.
>>>
>>> On Wednesday, November 7, 2012 12:09:15 PM UTC+9, Sebastien Mondet wrote:
>>>>
>>>>
>>>>
>>>> I think that one is the
>>>>    #thread;;
>>>> thing
>>>>
>>>>
>>>>
>>>>
>>>> On Tue, Nov 6, 2012 at 10:06 PM, Francois Berenger
>>>> <francois.ber... at gmail.com> wrote:
>>>>>
>>>>> Thanks! That fixes the problem partially.
>>>>>
>>>>> Now, I get:
>>>>>
>>>>> # #require "core.top";;
>>>>> # #require "core.top";;stem/lib/core/core.cma: loaded
>>>>> Error: Reference to undefined global `Condition'
>>>>> # #require "core";;
>>>>> # #require "core";;m/system/lib/core/core.cma: loaded
>>>>> Error: Reference to undefined global `Condition'
>>>>> # #require "async";;
>>>>> # #require "async";;/system/lib/core/core.cma: loaded
>>>>> Error: Reference to undefined global `Condition'
>>>>>
>>>>> Any hint?
>>>>>
>>>>>
>>>>> On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet
>>>>> wrote:
>>>>>>
>>>>>>
>>>>>> I'm not sure if this is your problem, but there was something with the
>>>>>> toplevel (comming with the system compiler) not knowing about opam packages.
>>>>>> I have to launch:
>>>>>>
>>>>>>    ocaml -I $OCAML_TOPLEVEL_PATH
>>>>>>
>>>>>> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`)
>>>>>>
>>>>>>
>>>>>> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger
>>>>>> <francois.ber... at gmail.com> wrote:
>>>>>>>
>>>>>>> Apparently, ocamlfind knows where these libraries are:
>>>>>>>
>>>>>>> $ ocamlfind -query core
>>>>>>> /home/berenger/.opam/system/lib/core
>>>>>>> $ ocamlfind -query async
>>>>>>> /home/berenger/.opam/system/lib/async
>>>>>>> $ ocamlfind -query async_extra
>>>>>>> /home/berenger/.opam/system/lib/async_extra
>>>>>>>
>>>>>>>
>>>>>>> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger
>>>>>>> wrote:
>>>>>>>>
>>>>>>>> Hello,
>>>>>>>>
>>>>>>>> I'd like to play with core in my toplevel.
>>>>>>>>
>>>>>>>> Is there a recipe?
>>>>>>>>
>>>>>>>> I have installed everything with OPAM:
>>>>>>>> $ opam list | egrep "core|async"
>>>>>>>> async                 108.07.01  Monadic concurrency library
>>>>>>>> async_core            108.07.01  Monadic concurrency library
>>>>>>>> async_extra           108.07.01  Monadic concurrency library
>>>>>>>> async_unix            108.07.01  Monadic concurrency library
>>>>>>>> core                  108.07.01  Industrial strength alternative to
>>>>>>>> OCaml's standard library
>>>>>>>> core_extended                --  Extra components that are not as
>>>>>>>> closely vetted or as stable as Core
>>>>>>>>
>>>>>>>> In my toplevel, I type
>>>>>>>> #use "topfind";;
>>>>>>>> #list;;
>>>>>>>>
>>>>>>>> Nothing about core or async shows up.
>>>>>>>> While parmap is there, for example.
>>>>>>>>
>>>>>>>> Is this normal?
>>>>>>>>
>>>>>>>> I guess there is some configuration file of findlib to tweak
>>>>>>>> somewhere.
>>>>>>>>
>>>>>>>> Regards,
>>>>>>>> F.
>>>>>>>>
>>>>>>
>>>>
>>>
>


From sweeks at janestreet.com  Thu Nov  8 17:02:45 2012
From: sweeks at janestreet.com (Stephen Weeks)
Date: Thu, 8 Nov 2012 12:02:45 -0500
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
	<87a9usk4fj.fsf@li195-236.members.linode.com>
	<CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>
Message-ID: <CAPYVAiLMJAYKOgBtLDOj+NTihSjAXEX0=a4QUDTuS25B=z6z4g@mail.gmail.com>


> Jane.Std is some internal stuff that is not exported.  We should fix
> that example not to use it.  Which specific example is it?

Many of the examples in base/async/examples unnecessarily refer to
Jane.Std.  I pushed a fix internally to change them all to Core.Std.


From markus.mottl at gmail.com  Thu Nov  8 17:04:40 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Thu, 8 Nov 2012 12:04:40 -0500
Subject: Weird bug on Mac OS X
Message-ID: <CAP_800rEOO6pGfUUb9-NtDtYg-1eBhe92POwFz3AHsS_vGVggQ@mail.gmail.com>


Hi,

I've run into a segfault on Mac OS X with a very trivial program that
basically just links with Jane Street Core.  Here is the file test.ml:

----------
module X = Core

let () = [||].(0) <- 42
----------

You can build it as follows:

  ocamlbuild -use-ocamlfind -cflag -thread -lflag -thread -pkgs core test.native

Running test.native will give you a segfault.  Here is the stack backtrace:

----------
#0  0x00007fff90fa78a5 in misaligned_stack_error_entering_dyld_stub_binder ()
#1  0x0000000000000103 in ?? ()
#2  0x0000000101c0a088 in pvars ()
#3  0x0000000101bddedd in caml_raise ()
#4  0x0000000101bddf99 in caml_array_bound_error ()
#5  0x00000001019b6aca in .L101 ()
----------

The program should just raise an exception due to the illegal array
access.  Merely raising an exception directly doesn't trigger the
problem.  The program won't segfault either if the "module X = Core"
line is commented out, i.e. Core has to be linked in.  Other libraries
apparently also don't cause this issue.

Could another Mac OS X user here please verify the problem?  I'm using
OCaml 4.00.1 with Opam and the latest release of Core in there.

Maybe somebody more knowledgeable about stack alignment and linking
issues on Mac OS X has an idea what's going wrong here.  I suspect
it's a code generation, linking or even runtime issue that may need to
be fixed in the compiler.  Or there could be a bug in some module
initialization in Core that is using C-bindings (less likely, I'm not
aware of anything that could cause this).

Regards,
Markus

--
Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com


From agarwal1975 at gmail.com  Thu Nov  8 17:11:12 2012
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Thu, 8 Nov 2012 12:11:12 -0500
Subject: Weird bug on Mac OS X
In-Reply-To: <CAP_800rEOO6pGfUUb9-NtDtYg-1eBhe92POwFz3AHsS_vGVggQ@mail.gmail.com>
References: <CAP_800rEOO6pGfUUb9-NtDtYg-1eBhe92POwFz3AHsS_vGVggQ@mail.gmail.com>
Message-ID: <CAMu2m2J7xz1YVLLbMQMom8Pu7UN5f4OH_RGp9eJb7AsTq+bmTg@mail.gmail.com>

I correctly get an exception with OCaml 3.12.1, Core 108.00.02, on Mac OS X
10.7.5.

On Thu, Nov 8, 2012 at 12:04 PM, Markus Mottl <markus.mottl at gmail.com>wrote:

> Hi,
>
> I've run into a segfault on Mac OS X with a very trivial program that
> basically just links with Jane Street Core.  Here is the file test.ml:
>
> ----------
> module X = Core
>
> let () = [||].(0) <- 42
> ----------
>
> You can build it as follows:
>
>   ocamlbuild -use-ocamlfind -cflag -thread -lflag -thread -pkgs core
> test.native
>
> Running test.native will give you a segfault.  Here is the stack backtrace:
>
> ----------
> #0  0x00007fff90fa78a5 in misaligned_stack_error_entering_dyld_stub_binder
> ()
> #1  0x0000000000000103 in ?? ()
> #2  0x0000000101c0a088 in pvars ()
> #3  0x0000000101bddedd in caml_raise ()
> #4  0x0000000101bddf99 in caml_array_bound_error ()
> #5  0x00000001019b6aca in .L101 ()
> ----------
>
> The program should just raise an exception due to the illegal array
> access.  Merely raising an exception directly doesn't trigger the
> problem.  The program won't segfault either if the "module X = Core"
> line is commented out, i.e. Core has to be linked in.  Other libraries
> apparently also don't cause this issue.
>
> Could another Mac OS X user here please verify the problem?  I'm using
> OCaml 4.00.1 with Opam and the latest release of Core in there.
>
> Maybe somebody more knowledgeable about stack alignment and linking
> issues on Mac OS X has an idea what's going wrong here.  I suspect
> it's a code generation, linking or even runtime issue that may need to
> be fixed in the compiler.  Or there could be a bug in some module
> initialization in Core that is using C-bindings (less likely, I'm not
> aware of anything that could cause this).
>
> Regards,
> Markus
>
> --
> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121108/f611c28b/attachment.html>

From markus.mottl at gmail.com  Thu Nov  8 17:16:01 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Thu, 8 Nov 2012 12:16:01 -0500
Subject: Weird bug on Mac OS X
In-Reply-To: <CAMu2m2J7xz1YVLLbMQMom8Pu7UN5f4OH_RGp9eJb7AsTq+bmTg@mail.gmail.com>
References: <CAP_800rEOO6pGfUUb9-NtDtYg-1eBhe92POwFz3AHsS_vGVggQ@mail.gmail.com>
	<CAMu2m2J7xz1YVLLbMQMom8Pu7UN5f4OH_RGp9eJb7AsTq+bmTg@mail.gmail.com>
Message-ID: <CAP_800oSoHppULSPBoR_KjxxieQoO6pdjGfCXyi-pS9BgK_qog@mail.gmail.com>


Should have mentioned that, too: I'm running Mac OS X 10.8.2 with the
latest XCode version (4.5.2).

On Thu, Nov 8, 2012 at 12:11 PM, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
> I correctly get an exception with OCaml 3.12.1, Core 108.00.02, on Mac OS X
> 10.7.5.
>
> On Thu, Nov 8, 2012 at 12:04 PM, Markus Mottl <markus.mottl at gmail.com>
> wrote:
>>
>> Hi,
>>
>> I've run into a segfault on Mac OS X with a very trivial program that
>> basically just links with Jane Street Core.  Here is the file test.ml:
>>
>> ----------
>> module X = Core
>>
>> let () = [||].(0) <- 42
>> ----------
>>
>> You can build it as follows:
>>
>>   ocamlbuild -use-ocamlfind -cflag -thread -lflag -thread -pkgs core
>> test.native
>>
>> Running test.native will give you a segfault.  Here is the stack
>> backtrace:
>>
>> ----------
>> #0  0x00007fff90fa78a5 in misaligned_stack_error_entering_dyld_stub_binder
>> ()
>> #1  0x0000000000000103 in ?? ()
>> #2  0x0000000101c0a088 in pvars ()
>> #3  0x0000000101bddedd in caml_raise ()
>> #4  0x0000000101bddf99 in caml_array_bound_error ()
>> #5  0x00000001019b6aca in .L101 ()
>> ----------
>>
>> The program should just raise an exception due to the illegal array
>> access.  Merely raising an exception directly doesn't trigger the
>> problem.  The program won't segfault either if the "module X = Core"
>> line is commented out, i.e. Core has to be linked in.  Other libraries
>> apparently also don't cause this issue.
>>
>> Could another Mac OS X user here please verify the problem?  I'm using
>> OCaml 4.00.1 with Opam and the latest release of Core in there.
>>
>> Maybe somebody more knowledgeable about stack alignment and linking
>> issues on Mac OS X has an idea what's going wrong here.  I suspect
>> it's a code generation, linking or even runtime issue that may need to
>> be fixed in the compiler.  Or there could be a bug in some module
>> initialization in Core that is using C-bindings (less likely, I'm not
>> aware of anything that could cause this).
>>
>> Regards,
>> Markus
>>
>> --
>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>
>



-- 
Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com


From benedikt.grundmann at gmail.com  Thu Nov  8 12:17:24 2012
From: benedikt.grundmann at gmail.com (Benedikt Grundmann)
Date: Thu, 8 Nov 2012 12:17:24 +0000
Subject: How to load core in the toplevel?
In-Reply-To: <CACLX4jSadoU6b55rd2a55vZXwSZbDeJ=-4uKFt+a2ScoiN9-AA@mail.gmail.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>
	<69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com>
	<CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>
	<8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com>
	<CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com>
	<9c71cd13-99c1-40e5-bc68-08217ebb1438@googlegroups.com>
	<0347676C-3D96-40FF-96E9-02C4242825E5@recoil.org>
	<d8383ac4-4b16-4d76-8545-d0ca5629af7e@googlegroups.com>
	<87ehk4k4i5.fsf@li195-236.members.linode.com>
	<05549d39-5440-4798-ab80-745f69c2fc37@googlegroups.com>
	<CACLX4jSadoU6b55rd2a55vZXwSZbDeJ=-4uKFt+a2ScoiN9-AA@mail.gmail.com>
Message-ID: <CAMr3DCPy3tGn1caXmMihNJNaHBLaBpNvER7_Act01vrwCMnMsg@mail.gmail.com>

I like to think about open Core.Std as the equivalent to Racket's #lang
directive.

That is open Core.Std => #lang js_ocaml

Cheers,

Bene


On 8 November 2012 11:41, Yaron Minsky <yminsky at janestreet.com> wrote:

> On Thu, Nov 8, 2012 at 3:09 AM, Francois
> <francois.berenger.fun at gmail.com> wrote:
> > What is the effect of doing an open of Core.Std (I don't need async for
> the
> > moment)?
> >
> > Does it override the standard prelude and the standard library?
>
> Yes.
>
> >
> > On Thursday, November 8, 2012 3:12:06 PM UTC+9, Malcolm wrote:
> >>
> >> Core.Std and Async.Std are designed to be opened.
> >>
> >> Francois <francois.b... at gmail.com> writes:
> >>
> >> > On Thursday, November 8, 2012 1:42:41 AM UTC+9, Anil Madhavapeddy
> wrote:
> >> >>
> >> >> You should also add "#camlp4o" so that toplevel syntax extensions
> work
> >> >> too.
> >> >>
> >> >
> >> > In the future, I think only the one from janestreet to do automatic
> >> > translations to/from s-expressions interests me.
> >> > I prefer to read standard OCaml code usually.
> >> >
> >> >
> >> >>
> >> >> I'd really recommend using 'utop' (installable via OPAM) instead of
> the
> >> >> default toplevel. It doesn't require the extra -I that the default
> >> >> toplevel
> >> >> needs, and has a really nice interactive interpreter.
> >> >>
> >> >
> >> > I have to read about it.
> >> > I'm conservative about using new things (I'm an isolated OCaml
> >> > developper,
> >> > no one nearby to help me in case
> >> > I mess with something, that's why I'm so active on mailing lists).
> >> >
> >> >
> >> >>
> >> >> My full .ocamlinit with utop is:
> >> >>
> >> >> #use "topfind"
> >> >> #camlp4o
> >> >> #thread
> >> >> #require "core.top";;
> >> >> #require "async";;
> >> >> open Core.Std
> >> >> open Async.Std
> >> >>
> >> >
> >> > Thanks for sharing this.
> >> > I'm very worried about the open directives
> >> > and try to never use them so I don't think
> >> > it would fit me for the moment.
> >> >
> >> > Best regards,
> >> > Francois.
> >> >
> >> >
> >> >
> >> >>
> >> >> -anil
> >> >>
> >> >> On 7 Nov 2012, at 05:33, Francois Berenger
> >> >> <francois.ber... at gmail.com<javascript:>>
> >> >> wrote:
> >> >>
> >> >> Thanks a lot.
> >> >>
> >> >> So, the whole recipe in my case was:
> >> >>
> >> >> ocaml -I $OCAML_TOPLEVEL_PATH
> >> >> #thread;;
> >> >> #require "core.top";;
> >> >> #require "async";;
> >> >>
> >> >> Regards,
> >> >> F.
> >> >>
> >> >> On Wednesday, November 7, 2012 12:09:15 PM UTC+9, Sebastien Mondet
> >> >> wrote:
> >> >>>
> >> >>>
> >> >>>
> >> >>> I think that one is the
> >> >>>    #thread;;
> >> >>> thing
> >> >>>
> >> >>>
> >> >>>
> >> >>>
> >> >>> On Tue, Nov 6, 2012 at 10:06 PM, Francois Berenger <
> >> >>> francois.ber... at gmail.com> wrote:
> >> >>>
> >> >>>> Thanks! That fixes the problem partially.
> >> >>>>
> >> >>>> Now, I get:
> >> >>>>
> >> >>>> # #require "core.top";;
> >> >>>> # #require "core.top";;stem/lib/core/core.cma: loaded
> >> >>>> Error: Reference to undefined global `Condition'
> >> >>>> # #require "core";;
> >> >>>> # #require "core";;m/system/lib/core/core.cma: loaded
> >> >>>> Error: Reference to undefined global `Condition'
> >> >>>> # #require "async";;
> >> >>>> # #require "async";;/system/lib/core/core.cma: loaded
> >> >>>> Error: Reference to undefined global `Condition'
> >> >>>>
> >> >>>> Any hint?
> >> >>>>
> >> >>>>
> >> >>>> On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet
> >> >>>> wrote:
> >> >>>>
> >> >>>>>
> >> >>>>> I'm not sure if this is your problem, but there was something with
> >> >>>>> the
> >> >>>>> toplevel (comming with the system compiler) not knowing about opam
> >> >>>>> packages.
> >> >>>>> I have to launch:
> >> >>>>>
> >> >>>>>    ocaml -I $OCAML_TOPLEVEL_PATH
> >> >>>>>
> >> >>>>> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config
> -env`)
> >> >>>>>
> >> >>>>>
> >> >>>>> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger
> >> >>>>> <francois.ber...@**
> >> >>>>> gmail.com> wrote:
> >> >>>>>
> >> >>>>>> Apparently, ocamlfind knows where these libraries are:
> >> >>>>>>
> >> >>>>>> $ ocamlfind -query core
> >> >>>>>> /home/berenger/.opam/system/**lib/core
> >> >>>>>> $ ocamlfind -query async
> >> >>>>>> /home/berenger/.opam/system/**lib/async
> >> >>>>>> $ ocamlfind -query async_extra
> >> >>>>>> /home/berenger/.opam/system/**lib/async_extra
> >> >>>>>>
> >> >>>>>>
> >> >>>>>> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois
> Berenger
> >> >>>>>> wrote:
> >> >>>>>>>
> >> >>>>>>> Hello,
> >> >>>>>>>
> >> >>>>>>> I'd like to play with core in my toplevel.
> >> >>>>>>>
> >> >>>>>>> Is there a recipe?
> >> >>>>>>>
> >> >>>>>>> I have installed everything with OPAM:
> >> >>>>>>> $ opam list | egrep "core|async"
> >> >>>>>>> async                 108.07.01  Monadic concurrency library
> >> >>>>>>> async_core            108.07.01  Monadic concurrency library
> >> >>>>>>> async_extra           108.07.01  Monadic concurrency library
> >> >>>>>>> async_unix            108.07.01  Monadic concurrency library
> >> >>>>>>> core                  108.07.01  Industrial strength alternative
> >> >>>>>>> to
> >> >>>>>>> OCaml's standard library
> >> >>>>>>> core_extended                --  Extra components that are not
> as
> >> >>>>>>> closely vetted or as stable as Core
> >> >>>>>>>
> >> >>>>>>> In my toplevel, I type
> >> >>>>>>> #use "topfind";;
> >> >>>>>>> #list;;
> >> >>>>>>>
> >> >>>>>>> Nothing about core or async shows up.
> >> >>>>>>> While parmap is there, for example.
> >> >>>>>>>
> >> >>>>>>> Is this normal?
> >> >>>>>>>
> >> >>>>>>> I guess there is some configuration file of findlib to tweak
> >> >>>>>>> somewhere.
> >> >>>>>>>
> >> >>>>>>> Regards,
> >> >>>>>>> F.
> >> >>>>>>>
> >> >>>>>>>
> >> >>>>>
> >> >>>
> >> >>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121108/da57e7ba/attachment.html>

From nlinger at janestreet.com  Thu Nov  8 17:31:06 2012
From: nlinger at janestreet.com (Nathan Linger)
Date: Thu, 8 Nov 2012 12:31:06 -0500
Subject: How to load core in the toplevel?
In-Reply-To: <CACLX4jTPxtt2KfMBs-7nNbdB9_DUKDu9GUo+XwarJ8vmFaSzfQ@mail.gmail.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>
	<69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com>
	<CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>
	<8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com>
	<CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com>
	<9c71cd13-99c1-40e5-bc68-08217ebb1438@googlegroups.com>
	<0347676C-3D96-40FF-96E9-02C4242825E5@recoil.org>
	<d8383ac4-4b16-4d76-8545-d0ca5629af7e@googlegroups.com>
	<CAMu2m2KC2VFp4a1Wa2jrJgoQ3pxzeOf4AEiWhB8e3d2bjZxzkg@mail.gmail.com>
	<CACLX4jTPxtt2KfMBs-7nNbdB9_DUKDu9GUo+XwarJ8vmFaSzfQ@mail.gmail.com>
Message-ID: <CAB1twEaTdUfYDjLPmxY7uaKExGBVeHD+Qr0oCTaLNOGXYOoB5w@mail.gmail.com>


A nice way to selectively include submodules from a library packaged
up in the "Std"-style is

include struct
  open Mylib.Std
  module Foo = Foo
  module Bar = Bar
end

This is not nearly as good as if ocaml had support for syntax like
"open Mylib.Std (Foo, Bar)", but it's not so bad either.

Along with Ron, I never feel the need to do this with Core or Async.
But it is nice for other libraries that aren't so ambitious.

On Thu, Nov 8, 2012 at 11:25 AM, Yaron Minsky <yminsky at janestreet.com> wrote:
> And even if you want to pick and choose what you want to use, you
> should get things from the Std namespace.  i.e., you should grab
> things from Async.Std rather than from Async_extra.  It would be
> reasonable to do:
>
> module Core = Core.Std
> module Async = Async.Std
>
> and just qualify things by "Core" and "Async" when you wanted them.
>
> That said, I do think the Core.Std overlay is quite pleasant.
>
> y
>
> On Thu, Nov 8, 2012 at 11:06 AM, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
>>> I'm very worried about the open directives
>>
>> Your concern is generally correct, but not always. If you are using Jane
>> Street Core, the implication is that you've chosen this as your standard
>> library, and doing open Core.Std is the way to use it.
>>
>>
>> On 7 Nov 2012, at 05:33, Francois Berenger <francois.ber... at gmail.com>
>> wrote:
>>>>
>>>>
>>>> Thanks a lot.
>>>>
>>>> So, the whole recipe in my case was:
>>>>
>>>> ocaml -I $OCAML_TOPLEVEL_PATH
>>>> #thread;;
>>>> #require "core.top";;
>>>> #require "async";;
>>>>
>>>> Regards,
>>>> F.
>>>>
>>>> On Wednesday, November 7, 2012 12:09:15 PM UTC+9, Sebastien Mondet wrote:
>>>>>
>>>>>
>>>>>
>>>>> I think that one is the
>>>>>    #thread;;
>>>>> thing
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> On Tue, Nov 6, 2012 at 10:06 PM, Francois Berenger
>>>>> <francois.ber... at gmail.com> wrote:
>>>>>>
>>>>>> Thanks! That fixes the problem partially.
>>>>>>
>>>>>> Now, I get:
>>>>>>
>>>>>> # #require "core.top";;
>>>>>> # #require "core.top";;stem/lib/core/core.cma: loaded
>>>>>> Error: Reference to undefined global `Condition'
>>>>>> # #require "core";;
>>>>>> # #require "core";;m/system/lib/core/core.cma: loaded
>>>>>> Error: Reference to undefined global `Condition'
>>>>>> # #require "async";;
>>>>>> # #require "async";;/system/lib/core/core.cma: loaded
>>>>>> Error: Reference to undefined global `Condition'
>>>>>>
>>>>>> Any hint?
>>>>>>
>>>>>>
>>>>>> On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet
>>>>>> wrote:
>>>>>>>
>>>>>>>
>>>>>>> I'm not sure if this is your problem, but there was something with the
>>>>>>> toplevel (comming with the system compiler) not knowing about opam packages.
>>>>>>> I have to launch:
>>>>>>>
>>>>>>>    ocaml -I $OCAML_TOPLEVEL_PATH
>>>>>>>
>>>>>>> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`)
>>>>>>>
>>>>>>>
>>>>>>> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger
>>>>>>> <francois.ber... at gmail.com> wrote:
>>>>>>>>
>>>>>>>> Apparently, ocamlfind knows where these libraries are:
>>>>>>>>
>>>>>>>> $ ocamlfind -query core
>>>>>>>> /home/berenger/.opam/system/lib/core
>>>>>>>> $ ocamlfind -query async
>>>>>>>> /home/berenger/.opam/system/lib/async
>>>>>>>> $ ocamlfind -query async_extra
>>>>>>>> /home/berenger/.opam/system/lib/async_extra
>>>>>>>>
>>>>>>>>
>>>>>>>> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger
>>>>>>>> wrote:
>>>>>>>>>
>>>>>>>>> Hello,
>>>>>>>>>
>>>>>>>>> I'd like to play with core in my toplevel.
>>>>>>>>>
>>>>>>>>> Is there a recipe?
>>>>>>>>>
>>>>>>>>> I have installed everything with OPAM:
>>>>>>>>> $ opam list | egrep "core|async"
>>>>>>>>> async                 108.07.01  Monadic concurrency library
>>>>>>>>> async_core            108.07.01  Monadic concurrency library
>>>>>>>>> async_extra           108.07.01  Monadic concurrency library
>>>>>>>>> async_unix            108.07.01  Monadic concurrency library
>>>>>>>>> core                  108.07.01  Industrial strength alternative to
>>>>>>>>> OCaml's standard library
>>>>>>>>> core_extended                --  Extra components that are not as
>>>>>>>>> closely vetted or as stable as Core
>>>>>>>>>
>>>>>>>>> In my toplevel, I type
>>>>>>>>> #use "topfind";;
>>>>>>>>> #list;;
>>>>>>>>>
>>>>>>>>> Nothing about core or async shows up.
>>>>>>>>> While parmap is there, for example.
>>>>>>>>>
>>>>>>>>> Is this normal?
>>>>>>>>>
>>>>>>>>> I guess there is some configuration file of findlib to tweak
>>>>>>>>> somewhere.
>>>>>>>>>
>>>>>>>>> Regards,
>>>>>>>>> F.
>>>>>>>>>
>>>>>>>
>>>>>
>>>>
>>


From anil at recoil.org  Thu Nov  8 17:47:20 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 8 Nov 2012 17:47:20 +0000
Subject: Weird bug on Mac OS X
In-Reply-To: <CAP_800oSoHppULSPBoR_KjxxieQoO6pdjGfCXyi-pS9BgK_qog@mail.gmail.com>
References: <CAP_800rEOO6pGfUUb9-NtDtYg-1eBhe92POwFz3AHsS_vGVggQ@mail.gmail.com> <CAMu2m2J7xz1YVLLbMQMom8Pu7UN5f4OH_RGp9eJb7AsTq+bmTg@mail.gmail.com> <CAP_800oSoHppULSPBoR_KjxxieQoO6pdjGfCXyi-pS9BgK_qog@mail.gmail.com>
Message-ID: <6A07B832-6552-482F-BD95-10462BE9171D@recoil.org>


Looks like another misaligned stack pointer somewhere; two were fixed
already here:
http://caml.inria.fr/mantis/view.php?id=5700

MacOS 10.8 strictly needs a 16-byte aligned stack or else lots of systems
functions decide to throw in the towel (due to them using SSE instructions
by default now).

#0  0x00007fff8e4ad8a5 in misaligned_stack_error_entering_dyld_stub_binder ()
#1  0x0000000000000103 in ?? ()
#2  0x0000000100254068 in caml_absf_mask ()
#3  0x000000010022e923 in caml_raise ()
#4  0x000000010022ec71 in caml_array_bound_error ()
#5  0x000000010000b32a in .L101 ()


-a

On 8 Nov 2012, at 17:16, Markus Mottl <markus.mottl at gmail.com> wrote:

> Should have mentioned that, too: I'm running Mac OS X 10.8.2 with the
> latest XCode version (4.5.2).
> 
> On Thu, Nov 8, 2012 at 12:11 PM, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
>> I correctly get an exception with OCaml 3.12.1, Core 108.00.02, on Mac OS X
>> 10.7.5.
>> 
>> On Thu, Nov 8, 2012 at 12:04 PM, Markus Mottl <markus.mottl at gmail.com>
>> wrote:
>>> 
>>> Hi,
>>> 
>>> I've run into a segfault on Mac OS X with a very trivial program that
>>> basically just links with Jane Street Core.  Here is the file test.ml:
>>> 
>>> ----------
>>> module X = Core
>>> 
>>> let () = [||].(0) <- 42
>>> ----------
>>> 
>>> You can build it as follows:
>>> 
>>>  ocamlbuild -use-ocamlfind -cflag -thread -lflag -thread -pkgs core
>>> test.native
>>> 
>>> Running test.native will give you a segfault.  Here is the stack
>>> backtrace:
>>> 
>>> ----------
>>> #0  0x00007fff90fa78a5 in misaligned_stack_error_entering_dyld_stub_binder
>>> ()
>>> #1  0x0000000000000103 in ?? ()
>>> #2  0x0000000101c0a088 in pvars ()
>>> #3  0x0000000101bddedd in caml_raise ()
>>> #4  0x0000000101bddf99 in caml_array_bound_error ()
>>> #5  0x00000001019b6aca in .L101 ()
>>> ----------
>>> 
>>> The program should just raise an exception due to the illegal array
>>> access.  Merely raising an exception directly doesn't trigger the
>>> problem.  The program won't segfault either if the "module X = Core"
>>> line is commented out, i.e. Core has to be linked in.  Other libraries
>>> apparently also don't cause this issue.
>>> 
>>> Could another Mac OS X user here please verify the problem?  I'm using
>>> OCaml 4.00.1 with Opam and the latest release of Core in there.
>>> 
>>> Maybe somebody more knowledgeable about stack alignment and linking
>>> issues on Mac OS X has an idea what's going wrong here.  I suspect
>>> it's a code generation, linking or even runtime issue that may need to
>>> be fixed in the compiler.  Or there could be a bug in some module
>>> initialization in Core that is using C-bindings (less likely, I'm not
>>> aware of anything that could cause this).
>>> 
>>> Regards,
>>> Markus
>>> 
>>> --
>>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>> 
>> 
> 
> 
> 
> -- 
> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
> 



From sweeks at janestreet.com  Fri Nov  9 01:49:13 2012
From: sweeks at janestreet.com (Stephen Weeks)
Date: Thu, 8 Nov 2012 20:49:13 -0500
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <CAMQaOgM77i-Ly3sB3r=dU8q3vLKyZSc_MJVgA7BTzwibzLUm_w@mail.gmail.com>
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
	<87a9usk4fj.fsf@li195-236.members.linode.com>
	<CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>
	<CAPYVAiLMJAYKOgBtLDOj+NTihSjAXEX0=a4QUDTuS25B=z6z4g@mail.gmail.com>
	<CAMQaOgP0gZ-ADHyqJn7ZJH2tkdPXqg+jPs=N-aAvhvn_QT0X7Q@mail.gmail.com>
	<CAMQaOgM77i-Ly3sB3r=dU8q3vLKyZSc_MJVgA7BTzwibzLUm_w@mail.gmail.com>
Message-ID: <CAPYVAi+choTx5gR2SxbF1J1xQJzYpJKWp21MBb2rbyf_eS8aSg@mail.gmail.com>


I think replacing "Jane.Std" with "Core.Std" will work.

On Thu, Nov 8, 2012 at 8:01 PM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> By the way, how do I compile them?
> It was my initial question. ;)
>
> On Fri, Nov 9, 2012 at 10:00 AM, Francois Berenger
> <francois.berenger.working at gmail.com> wrote:
>> $ cd ~/.opam/system/build/async.108.07.01/examples
>> $ grep -ri jane.std *
>> bin_prot_test.ml:open Jane.Std
>> cat.ml:open Jane.Std
>> countdown.ml:open Jane.Std
>> finalizer.ml:open Jane.Std
>> monitors.ml:open Jane.Std
>> process.ml:open Jane.Std
>> process_stream.ml:open Jane.Std
>> server.ml:open Jane.Std
>> signals.ml:open Jane.Std
>> sigpipe.ml:open Jane.Std
>> socket.ml:open Jane.Std
>> sound.ml:open Jane.Std
>> write_forever.ml:open Jane.Std
>>
>> On Fri, Nov 9, 2012 at 2:02 AM, Stephen Weeks <sweeks at janestreet.com> wrote:
>>>> Jane.Std is some internal stuff that is not exported.  We should fix
>>>> that example not to use it.  Which specific example is it?
>>>
>>> Many of the examples in base/async/examples unnecessarily refer to
>>> Jane.Std.  I pushed a fix internally to change them all to Core.Std.


From francois.berenger.working at gmail.com  Fri Nov  9 08:14:42 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Fri, 9 Nov 2012 00:14:42 -0800 (PST)
Subject: How to create the IntSet type with core?
Message-ID: <6c9ce151-b434-4fcc-89c6-83b64fddbfb9@googlegroups.com>

Hello,

I'm converting some standard code to use core.

How do I do this in core:

module IntSet =
  Set.Make
    (struct
      let compare = Pervasives.compare
      type t = int
    end)

Thanks a lot,
F.

PS: yes, I opened Core.Std and did not die from it. ;)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121109/a67b53ee/attachment.html>

From francois.berenger.working at gmail.com  Fri Nov  9 08:33:08 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Fri, 9 Nov 2012 00:33:08 -0800 (PST)
Subject: It's kind of nice the use of labels in core
Message-ID: <16acd619-67fc-40c2-9a68-d973f8970dc3@googlegroups.com>

It makes code a little more readable, I like it.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121109/d405f27c/attachment.html>

From mmatalka at gmail.com  Fri Nov  9 09:08:28 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Fri, 09 Nov 2012 04:08:28 -0500
Subject: It's kind of nice the use of labels in core
In-Reply-To: <16acd619-67fc-40c2-9a68-d973f8970dc3@googlegroups.com> (Francois
	Berenger's message of "Fri, 9 Nov 2012 00:33:08 -0800 (PST)")
References: <16acd619-67fc-40c2-9a68-d973f8970dc3@googlegroups.com>
Message-ID: <877gpv3zzn.fsf@li195-236.members.linode.com>


Yes...yes it does.  One of my favorite stdlib compatibility breaking
features of Core.

Francois Berenger <francois.berenger.working at gmail.com> writes:

> It makes code a little more readable, I like it.


From mmatalka at gmail.com  Fri Nov  9 09:09:47 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Fri, 09 Nov 2012 04:09:47 -0500
Subject: How to create the IntSet type with core?
In-Reply-To: <6c9ce151-b434-4fcc-89c6-83b64fddbfb9@googlegroups.com> (Francois
	Berenger's message of "Fri, 9 Nov 2012 00:14:42 -0800 (PST)")
References: <6c9ce151-b434-4fcc-89c6-83b64fddbfb9@googlegroups.com>
Message-ID: <87390j3zxg.fsf@li195-236.members.linode.com>


The Int module probably already has a Set module in it.  So Int.Set.

All modules generally contain what they are capable of in it.  So String
has a Map module, etc.

Francois Berenger <francois.berenger.working at gmail.com> writes:

> Hello,
>
> I'm converting some standard code to use core.
>
> How do I do this in core:
>
> module IntSet =
>   Set.Make
>     (struct
>       let compare = Pervasives.compare
>       type t = int
>     end)
>
> Thanks a lot,
> F.
>
> PS: yes, I opened Core.Std and did not die from it. ;)


From dhouse at janestreet.com  Fri Nov  9 09:10:10 2012
From: dhouse at janestreet.com (David House)
Date: Fri, 9 Nov 2012 09:10:10 +0000
Subject: How to create the IntSet type with core?
In-Reply-To: <6c9ce151-b434-4fcc-89c6-83b64fddbfb9@googlegroups.com>
References: <6c9ce151-b434-4fcc-89c6-83b64fddbfb9@googlegroups.com>
Message-ID: <CAK=fH+igEs7PpDAuw6XBoVxzMTEDnY0iFeZo+MM3QK-2LZ_=bA@mail.gmail.com>


There is already an Int.Set module! :)

Here is a five-minute guide to the set / map / hashtable setup inside
core. I'll use the example of hashtables, but the language readily
translates into sets / maps.

There are two types of hashtables in core. Ones that use polymorphic
comparison, and ones that use a specific comparision function that is
hopefully more efficient and has non-surprising semantics (we
basically think polymorphic comparison, despite its convenience, is
too surprising to be an overall good thing).

The type of hashtables using polymorphic comparison is ('key, 'value)
Hashtbl.Poly.t. The type of hashtables using, e.g., int comparison for
the keys is 'value Int.Table.t. Given the previous paragraph, you
should always try to use Foo.Table when you can.

When you create a hashtable (e.g. using [create], [of_alist], or
[t_of_sexp]), you must use the specific module name. I.e. [let table =
Int.Table.create () in]. However, when you already have a hashtable in
your hands, and you want to use accessor functions, you should just
use Hashtbl.foo, regardless of what comparison function it uses.

To translate into Maps and Sets:

'value Foo.Table.t  ('key,'value) Hashtbl.Poly.t  Hashtbl.foo
'value Foo.Map.t    ('key,'value) Map.Poly.t      Map.foo
Foo.Set.t           'element Set.Poly.t           Set.foo

--

If you have your own type and want to make Table, Map and Set
submodules, it's really easy:

module T = struct
  type t = ... with compare, sexp
  let hash = (* your hash function, maybe Hashtbl.hash *)
end
include Comparable.Make(T)
include Hashable.Make(T)

Saying "with compare" generates you an efficient comparison function
specialised to your type. (Note that all component types need to have
comparison functions defined too, whether through "with compare" or
through primitives.) The Comparable.Make functor adds in modules to
make you satisfy the Comparable.S signature (basically the Set and Map
modules, and a few more). The Hashable.Make functor adds in modules to
make you satisfy Hashable.S (basically Hashtbl, as well as some others
like Hash_set). If you don't want the Hashable stuff, there is no need
to define a hash function. (Although Hashtbl.hash is normally not a
bad choice.)

--

Here's how this all works under the hood:

The type of maps is "really" ('key, 'value, 'comparator) Map.t. Maps
contain in their values the function that is used for comparing keys,
i.e. a function of type 'key -> 'key -> int. But what is this
"comparator" thing?

We can first motivate things by saying: it's a pain to have to type
Int.Map.find for int-maps, String.Map.find for string-maps, etc. etc.
It'd be nice to have a single type and use Map.find for everything.
But this presents a problem because of functions like Map.merge, which
takes two maps and combines them. You need to know that the comparison
functions are identical, but how can you do this?

So we have this extra comparator phantom type. Nothing in the actual
representation has a type involving 'comparator: it's just for static
checking. If you want to have a new comparison function, you must mint
a new comparator type. (Including the Comparable signature does this
for you.)

I originally wrote this last section with hashtables in mind, but it
appears that hashtables work slightly differently: they just assert
that the hashing functions are physically equal inside [merge]; you
don't get a compile-time error for something like [Hashtbl.merge
(Int.Table.create ()) (String.Table.create ())].

On Fri, Nov 9, 2012 at 8:14 AM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> Hello,
>
> I'm converting some standard code to use core.
>
> How do I do this in core:
>
> module IntSet =
>   Set.Make
>     (struct
>       let compare = Pervasives.compare
>       type t = int
>     end)
>
> Thanks a lot,
> F.
>
> PS: yes, I opened Core.Std and did not die from it. ;)
>


From francois.berenger.working at gmail.com  Fri Nov  9 01:00:59 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Fri, 9 Nov 2012 10:00:59 +0900
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <CAPYVAiLMJAYKOgBtLDOj+NTihSjAXEX0=a4QUDTuS25B=z6z4g@mail.gmail.com>
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
	<87a9usk4fj.fsf@li195-236.members.linode.com>
	<CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>
	<CAPYVAiLMJAYKOgBtLDOj+NTihSjAXEX0=a4QUDTuS25B=z6z4g@mail.gmail.com>
Message-ID: <CAMQaOgP0gZ-ADHyqJn7ZJH2tkdPXqg+jPs=N-aAvhvn_QT0X7Q@mail.gmail.com>


$ cd ~/.opam/system/build/async.108.07.01/examples
$ grep -ri jane.std *
bin_prot_test.ml:open Jane.Std
cat.ml:open Jane.Std
countdown.ml:open Jane.Std
finalizer.ml:open Jane.Std
monitors.ml:open Jane.Std
process.ml:open Jane.Std
process_stream.ml:open Jane.Std
server.ml:open Jane.Std
signals.ml:open Jane.Std
sigpipe.ml:open Jane.Std
socket.ml:open Jane.Std
sound.ml:open Jane.Std
write_forever.ml:open Jane.Std

On Fri, Nov 9, 2012 at 2:02 AM, Stephen Weeks <sweeks at janestreet.com> wrote:
>> Jane.Std is some internal stuff that is not exported.  We should fix
>> that example not to use it.  Which specific example is it?
>
> Many of the examples in base/async/examples unnecessarily refer to
> Jane.Std.  I pushed a fix internally to change them all to Core.Std.


From francois.berenger.working at gmail.com  Fri Nov  9 01:01:48 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Fri, 9 Nov 2012 10:01:48 +0900
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <CAMQaOgP0gZ-ADHyqJn7ZJH2tkdPXqg+jPs=N-aAvhvn_QT0X7Q@mail.gmail.com>
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
	<87a9usk4fj.fsf@li195-236.members.linode.com>
	<CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>
	<CAPYVAiLMJAYKOgBtLDOj+NTihSjAXEX0=a4QUDTuS25B=z6z4g@mail.gmail.com>
	<CAMQaOgP0gZ-ADHyqJn7ZJH2tkdPXqg+jPs=N-aAvhvn_QT0X7Q@mail.gmail.com>
Message-ID: <CAMQaOgM77i-Ly3sB3r=dU8q3vLKyZSc_MJVgA7BTzwibzLUm_w@mail.gmail.com>


By the way, how do I compile them?
It was my initial question. ;)

On Fri, Nov 9, 2012 at 10:00 AM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> $ cd ~/.opam/system/build/async.108.07.01/examples
> $ grep -ri jane.std *
> bin_prot_test.ml:open Jane.Std
> cat.ml:open Jane.Std
> countdown.ml:open Jane.Std
> finalizer.ml:open Jane.Std
> monitors.ml:open Jane.Std
> process.ml:open Jane.Std
> process_stream.ml:open Jane.Std
> server.ml:open Jane.Std
> signals.ml:open Jane.Std
> sigpipe.ml:open Jane.Std
> socket.ml:open Jane.Std
> sound.ml:open Jane.Std
> write_forever.ml:open Jane.Std
>
> On Fri, Nov 9, 2012 at 2:02 AM, Stephen Weeks <sweeks at janestreet.com> wrote:
>>> Jane.Std is some internal stuff that is not exported.  We should fix
>>> that example not to use it.  Which specific example is it?
>>
>> Many of the examples in base/async/examples unnecessarily refer to
>> Jane.Std.  I pushed a fix internally to change them all to Core.Std.


From francois.berenger.working at gmail.com  Fri Nov  9 01:04:59 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Fri, 9 Nov 2012 10:04:59 +0900
Subject: How to load core in the toplevel?
In-Reply-To: <CAB1twEaTdUfYDjLPmxY7uaKExGBVeHD+Qr0oCTaLNOGXYOoB5w@mail.gmail.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>
	<69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com>
	<CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>
	<8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com>
	<CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com>
	<9c71cd13-99c1-40e5-bc68-08217ebb1438@googlegroups.com>
	<0347676C-3D96-40FF-96E9-02C4242825E5@recoil.org>
	<d8383ac4-4b16-4d76-8545-d0ca5629af7e@googlegroups.com>
	<CAMu2m2KC2VFp4a1Wa2jrJgoQ3pxzeOf4AEiWhB8e3d2bjZxzkg@mail.gmail.com>
	<CACLX4jTPxtt2KfMBs-7nNbdB9_DUKDu9GUo+XwarJ8vmFaSzfQ@mail.gmail.com>
	<CAB1twEaTdUfYDjLPmxY7uaKExGBVeHD+Qr0oCTaLNOGXYOoB5w@mail.gmail.com>
Message-ID: <CAMQaOgM2k8_p6H5oAmVkc5AU6UVcbUnA6XFYBM5AsM69Y3pAeQ@mail.gmail.com>


On Fri, Nov 9, 2012 at 2:31 AM, Nathan Linger <nlinger at janestreet.com> wrote:
> A nice way to selectively include submodules from a library packaged
> up in the "Std"-style is
>
> include struct
>   open Mylib.Std
>   module Foo = Foo
>   module Bar = Bar
> end
>
> This is not nearly as good as if ocaml had support for syntax like
> "open Mylib.Std (Foo, Bar)", but it's not so bad either.

This looks like some Haskell code.

Because of all the nice remarks, I may consider opening Core.Std soon. ;)

> Along with Ron, I never feel the need to do this with Core or Async.
> But it is nice for other libraries that aren't so ambitious.
>
> On Thu, Nov 8, 2012 at 11:25 AM, Yaron Minsky <yminsky at janestreet.com> wrote:
>> And even if you want to pick and choose what you want to use, you
>> should get things from the Std namespace.  i.e., you should grab
>> things from Async.Std rather than from Async_extra.  It would be
>> reasonable to do:
>>
>> module Core = Core.Std
>> module Async = Async.Std
>>
>> and just qualify things by "Core" and "Async" when you wanted them.
>>
>> That said, I do think the Core.Std overlay is quite pleasant.
>>
>> y
>>
>> On Thu, Nov 8, 2012 at 11:06 AM, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
>>>> I'm very worried about the open directives
>>>
>>> Your concern is generally correct, but not always. If you are using Jane
>>> Street Core, the implication is that you've chosen this as your standard
>>> library, and doing open Core.Std is the way to use it.
>>>
>>>
>>> On 7 Nov 2012, at 05:33, Francois Berenger <francois.ber... at gmail.com>
>>> wrote:
>>>>>
>>>>>
>>>>> Thanks a lot.
>>>>>
>>>>> So, the whole recipe in my case was:
>>>>>
>>>>> ocaml -I $OCAML_TOPLEVEL_PATH
>>>>> #thread;;
>>>>> #require "core.top";;
>>>>> #require "async";;
>>>>>
>>>>> Regards,
>>>>> F.
>>>>>
>>>>> On Wednesday, November 7, 2012 12:09:15 PM UTC+9, Sebastien Mondet wrote:
>>>>>>
>>>>>>
>>>>>>
>>>>>> I think that one is the
>>>>>>    #thread;;
>>>>>> thing
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>> On Tue, Nov 6, 2012 at 10:06 PM, Francois Berenger
>>>>>> <francois.ber... at gmail.com> wrote:
>>>>>>>
>>>>>>> Thanks! That fixes the problem partially.
>>>>>>>
>>>>>>> Now, I get:
>>>>>>>
>>>>>>> # #require "core.top";;
>>>>>>> # #require "core.top";;stem/lib/core/core.cma: loaded
>>>>>>> Error: Reference to undefined global `Condition'
>>>>>>> # #require "core";;
>>>>>>> # #require "core";;m/system/lib/core/core.cma: loaded
>>>>>>> Error: Reference to undefined global `Condition'
>>>>>>> # #require "async";;
>>>>>>> # #require "async";;/system/lib/core/core.cma: loaded
>>>>>>> Error: Reference to undefined global `Condition'
>>>>>>>
>>>>>>> Any hint?
>>>>>>>
>>>>>>>
>>>>>>> On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet
>>>>>>> wrote:
>>>>>>>>
>>>>>>>>
>>>>>>>> I'm not sure if this is your problem, but there was something with the
>>>>>>>> toplevel (comming with the system compiler) not knowing about opam packages.
>>>>>>>> I have to launch:
>>>>>>>>
>>>>>>>>    ocaml -I $OCAML_TOPLEVEL_PATH
>>>>>>>>
>>>>>>>> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`)
>>>>>>>>
>>>>>>>>
>>>>>>>> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger
>>>>>>>> <francois.ber... at gmail.com> wrote:
>>>>>>>>>
>>>>>>>>> Apparently, ocamlfind knows where these libraries are:
>>>>>>>>>
>>>>>>>>> $ ocamlfind -query core
>>>>>>>>> /home/berenger/.opam/system/lib/core
>>>>>>>>> $ ocamlfind -query async
>>>>>>>>> /home/berenger/.opam/system/lib/async
>>>>>>>>> $ ocamlfind -query async_extra
>>>>>>>>> /home/berenger/.opam/system/lib/async_extra
>>>>>>>>>
>>>>>>>>>
>>>>>>>>> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger
>>>>>>>>> wrote:
>>>>>>>>>>
>>>>>>>>>> Hello,
>>>>>>>>>>
>>>>>>>>>> I'd like to play with core in my toplevel.
>>>>>>>>>>
>>>>>>>>>> Is there a recipe?
>>>>>>>>>>
>>>>>>>>>> I have installed everything with OPAM:
>>>>>>>>>> $ opam list | egrep "core|async"
>>>>>>>>>> async                 108.07.01  Monadic concurrency library
>>>>>>>>>> async_core            108.07.01  Monadic concurrency library
>>>>>>>>>> async_extra           108.07.01  Monadic concurrency library
>>>>>>>>>> async_unix            108.07.01  Monadic concurrency library
>>>>>>>>>> core                  108.07.01  Industrial strength alternative to
>>>>>>>>>> OCaml's standard library
>>>>>>>>>> core_extended                --  Extra components that are not as
>>>>>>>>>> closely vetted or as stable as Core
>>>>>>>>>>
>>>>>>>>>> In my toplevel, I type
>>>>>>>>>> #use "topfind";;
>>>>>>>>>> #list;;
>>>>>>>>>>
>>>>>>>>>> Nothing about core or async shows up.
>>>>>>>>>> While parmap is there, for example.
>>>>>>>>>>
>>>>>>>>>> Is this normal?
>>>>>>>>>>
>>>>>>>>>> I guess there is some configuration file of findlib to tweak
>>>>>>>>>> somewhere.
>>>>>>>>>>
>>>>>>>>>> Regards,
>>>>>>>>>> F.
>>>>>>>>>>
>>>>>>>>
>>>>>>
>>>>>
>>>


From francois.berenger.working at gmail.com  Mon Nov 12 01:18:15 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Sun, 11 Nov 2012 17:18:15 -0800 (PST)
Subject: No statistics or math module in core?
Message-ID: <f8c113b2-b74a-45ab-aedb-e2a9f94e110e@googlegroups.com>

Hello,

I was looking for Pearson and Spearman correlation scores.

Regards,
F.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121111/335c8a9f/attachment.html>

From francois.berenger.working at gmail.com  Mon Nov 12 01:28:19 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Sun, 11 Nov 2012 17:28:19 -0800 (PST)
Subject: Why no fold_left in Core_array?
Message-ID: <a913021f-4ba7-4c87-8c44-78e0ba4b8f03@googlegroups.com>


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121111/fe0a5f2f/attachment.html>

From sweeks at janestreet.com  Mon Nov 12 01:48:27 2012
From: sweeks at janestreet.com (Stephen Weeks)
Date: Sun, 11 Nov 2012 20:48:27 -0500
Subject: Why no fold_left in Core_array?
In-Reply-To: <a913021f-4ba7-4c87-8c44-78e0ba4b8f03@googlegroups.com>
References: <a913021f-4ba7-4c87-8c44-78e0ba4b8f03@googlegroups.com>
Message-ID: <CAPYVAiLMQiMt8RWD7yuzTjMrGR3Wb5Fx6ujsTxwN_6iDc3dF2A@mail.gmail.com>


There is -- it is called "fold", and the spec comes via [include Container.S1].

On Sun, Nov 11, 2012 at 8:28 PM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
>


From francois.berenger.working at gmail.com  Mon Nov 12 05:49:50 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Sun, 11 Nov 2012 21:49:50 -0800 (PST)
Subject: Some functions I could not rewrite using core
Message-ID: <3ce6737c-bf6b-4683-bb9d-877497c5fe70@googlegroups.com>

Hello,

I'm stuck with these (standard OCaml code I'd like t
make core-compatible, or know the equivalent functions
in Core):

module A   = Array
module F   = Filename
module HT  = Hashtbl
module L   = List
module Mar = Marshal
module P   = Printf
module RNG = Random
module S   = String

(* create a Hashtbl from a list of key-value pairs *)
let hashtbl_of key_value_pairs =
  let res = HT.create (L.length key_value_pairs) in
  L.iter
    (fun (k, v) -> HT.add res k v)
    key_value_pairs;
  res

(* transform a Hashtbl of key->value into a Hashtbl of value->key *)
let reverse_binding ht =
  let res = HT.create (HT.length ht) in
  HT.iter
    (fun k v -> HT.add res v k)
    ht;
  res

Thanks,
F.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121111/52392b0f/attachment.html>

From francois.berenger.working at gmail.com  Mon Nov 12 05:51:39 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Sun, 11 Nov 2012 21:51:39 -0800 (PST)
Subject: It's kind of nice the use of labels in core
In-Reply-To: <877gpv3zzn.fsf@li195-236.members.linode.com>
References: <16acd619-67fc-40c2-9a68-d973f8970dc3@googlegroups.com>
 <877gpv3zzn.fsf@li195-236.members.linode.com>
Message-ID: <08292c4a-e602-44e0-981c-2e7bed77d3ee@googlegroups.com>

One thing I realize just now: labels allow to do parameter
flipping without the need for a flip function;
which is also quite handy.

On Friday, November 9, 2012 6:08:33 PM UTC+9, Malcolm wrote:
>
> Yes...yes it does.  One of my favorite stdlib compatibility breaking 
> features of Core. 
>
> Francois Berenger <francois.ber... at gmail.com <javascript:>> writes: 
>
> > It makes code a little more readable, I like it. 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121111/fdc8ce03/attachment.html>

From francois.berenger.working at gmail.com  Mon Nov 12 08:32:27 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Mon, 12 Nov 2012 00:32:27 -0800 (PST)
Subject: Some functions I could not rewrite using core
In-Reply-To: <CAK=fH+g55=EdBH9wBhLFXoBqAbZ2RsJ3c_UJ1929J4g6OkdFiQ@mail.gmail.com>
References: <3ce6737c-bf6b-4683-bb9d-877497c5fe70@googlegroups.com>
 <CAK=fH+g55=EdBH9wBhLFXoBqAbZ2RsJ3c_UJ1929J4g6OkdFiQ@mail.gmail.com>
Message-ID: <a384152f-e4f1-47a0-8422-bfbae4ed3562@googlegroups.com>



On Monday, November 12, 2012 4:38:14 PM UTC+9, David House wrote:
>
> hashtbl_of is called of_alist or of_alist_exn. (Note that because this 
> is a creator function, you have to either use Foo.Table.of_alist, or 
> Hashtbl.Poly.of_alist -- see my email last week.) 
>

I think I will tap into Caml.Hashtbl.
I have too much code relying on them that I don't have the courage to port
today.


> I don't think we have a function that does reverse_binding (I can't 
> recall ever needing it). But you should be able to write it using the 
> other functions in Hashtbl. What precisely are you struggling with? 
>

Something not very interesting to troubleshoot.
Also, I don't have the courage today so Caml.Hashtbl will save me. ;)
 

>
> On Mon, Nov 12, 2012 at 5:49 AM, Francois Berenger 
> <francois.ber... at gmail.com <javascript:>> wrote: 
> > Hello, 
> > 
> > I'm stuck with these (standard OCaml code I'd like t 
> > make core-compatible, or know the equivalent functions 
> > in Core): 
> > 
> > module A   = Array 
> > module F   = Filename 
> > module HT  = Hashtbl 
> > module L   = List 
> > module Mar = Marshal 
> > module P   = Printf 
> > module RNG = Random 
> > module S   = String 
> > 
> > (* create a Hashtbl from a list of key-value pairs *) 
> > let hashtbl_of key_value_pairs = 
> >   let res = HT.create (L.length key_value_pairs) in 
> >   L.iter 
> >     (fun (k, v) -> HT.add res k v) 
> >     key_value_pairs; 
> >   res 
> > 
> > (* transform a Hashtbl of key->value into a Hashtbl of value->key *) 
> > let reverse_binding ht = 
> >   let res = HT.create (HT.length ht) in 
> >   HT.iter 
> >     (fun k v -> HT.add res v k) 
> >     ht; 
> >   res 
> > 
> > Thanks, 
> > F. 
> > 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121112/02a1e780/attachment.html>

From francois.berenger.working at gmail.com  Mon Nov 12 08:51:19 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Mon, 12 Nov 2012 00:51:19 -0800 (PST)
Subject: How to create the IntSet type with core? [joke]
In-Reply-To: <CAK=fH+igEs7PpDAuw6XBoVxzMTEDnY0iFeZo+MM3QK-2LZ_=bA@mail.gmail.com>
References: <6c9ce151-b434-4fcc-89c6-83b64fddbfb9@googlegroups.com>
 <CAK=fH+igEs7PpDAuw6XBoVxzMTEDnY0iFeZo+MM3QK-2LZ_=bA@mail.gmail.com>
Message-ID: <aa2fe250-7e1a-4d67-9dfa-b8b50452a9fe@googlegroups.com>

I think this google group should be renamed to: ocaml-type-junkies
;)

On Friday, November 9, 2012 6:11:14 PM UTC+9, David House wrote:
>
> There is already an Int.Set module! :) 
>
> Here is a five-minute guide to the set / map / hashtable setup inside 
> core. I'll use the example of hashtables, but the language readily 
> translates into sets / maps. 
>
> There are two types of hashtables in core. Ones that use polymorphic 
> comparison, and ones that use a specific comparision function that is 
> hopefully more efficient and has non-surprising semantics (we 
> basically think polymorphic comparison, despite its convenience, is 
> too surprising to be an overall good thing). 
>
> The type of hashtables using polymorphic comparison is ('key, 'value) 
> Hashtbl.Poly.t. The type of hashtables using, e.g., int comparison for 
> the keys is 'value Int.Table.t. Given the previous paragraph, you 
> should always try to use Foo.Table when you can. 
>
> When you create a hashtable (e.g. using [create], [of_alist], or 
> [t_of_sexp]), you must use the specific module name. I.e. [let table = 
> Int.Table.create () in]. However, when you already have a hashtable in 
> your hands, and you want to use accessor functions, you should just 
> use Hashtbl.foo, regardless of what comparison function it uses. 
>
> To translate into Maps and Sets: 
>
> 'value Foo.Table.t  ('key,'value) Hashtbl.Poly.t  Hashtbl.foo 
> 'value Foo.Map.t    ('key,'value) Map.Poly.t      Map.foo 
> Foo.Set.t           'element Set.Poly.t           Set.foo 
>
> -- 
>
> If you have your own type and want to make Table, Map and Set 
> submodules, it's really easy: 
>
> module T = struct 
>   type t = ... with compare, sexp 
>   let hash = (* your hash function, maybe Hashtbl.hash *) 
> end 
> include Comparable.Make(T) 
> include Hashable.Make(T) 
>
> Saying "with compare" generates you an efficient comparison function 
> specialised to your type. (Note that all component types need to have 
> comparison functions defined too, whether through "with compare" or 
> through primitives.) The Comparable.Make functor adds in modules to 
> make you satisfy the Comparable.S signature (basically the Set and Map 
> modules, and a few more). The Hashable.Make functor adds in modules to 
> make you satisfy Hashable.S (basically Hashtbl, as well as some others 
> like Hash_set). If you don't want the Hashable stuff, there is no need 
> to define a hash function. (Although Hashtbl.hash is normally not a 
> bad choice.) 
>
> -- 
>
> Here's how this all works under the hood: 
>
> The type of maps is "really" ('key, 'value, 'comparator) Map.t. Maps 
> contain in their values the function that is used for comparing keys, 
> i.e. a function of type 'key -> 'key -> int. But what is this 
> "comparator" thing? 
>
> We can first motivate things by saying: it's a pain to have to type 
> Int.Map.find for int-maps, String.Map.find for string-maps, etc. etc. 
> It'd be nice to have a single type and use Map.find for everything. 
> But this presents a problem because of functions like Map.merge, which 
> takes two maps and combines them. You need to know that the comparison 
> functions are identical, but how can you do this? 
>
> So we have this extra comparator phantom type. Nothing in the actual 
> representation has a type involving 'comparator: it's just for static 
> checking. If you want to have a new comparison function, you must mint 
> a new comparator type. (Including the Comparable signature does this 
> for you.) 
>
> I originally wrote this last section with hashtables in mind, but it 
> appears that hashtables work slightly differently: they just assert 
> that the hashing functions are physically equal inside [merge]; you 
> don't get a compile-time error for something like [Hashtbl.merge 
> (Int.Table.create ()) (String.Table.create ())]. 
>
> On Fri, Nov 9, 2012 at 8:14 AM, Francois Berenger 
> <francois.ber... at gmail.com <javascript:>> wrote: 
> > Hello, 
> > 
> > I'm converting some standard code to use core. 
> > 
> > How do I do this in core: 
> > 
> > module IntSet = 
> >   Set.Make 
> >     (struct 
> >       let compare = Pervasives.compare 
> >       type t = int 
> >     end) 
> > 
> > Thanks a lot, 
> > F. 
> > 
> > PS: yes, I opened Core.Std and did not die from it. ;) 
> > 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121112/6209c199/attachment.html>

From dhouse at janestreet.com  Mon Nov 12 07:38:12 2012
From: dhouse at janestreet.com (David House)
Date: Mon, 12 Nov 2012 07:38:12 +0000
Subject: Some functions I could not rewrite using core
In-Reply-To: <3ce6737c-bf6b-4683-bb9d-877497c5fe70@googlegroups.com>
References: <3ce6737c-bf6b-4683-bb9d-877497c5fe70@googlegroups.com>
Message-ID: <CAK=fH+g55=EdBH9wBhLFXoBqAbZ2RsJ3c_UJ1929J4g6OkdFiQ@mail.gmail.com>


hashtbl_of is called of_alist or of_alist_exn. (Note that because this
is a creator function, you have to either use Foo.Table.of_alist, or
Hashtbl.Poly.of_alist -- see my email last week.)

I don't think we have a function that does reverse_binding (I can't
recall ever needing it). But you should be able to write it using the
other functions in Hashtbl. What precisely are you struggling with?

On Mon, Nov 12, 2012 at 5:49 AM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> Hello,
>
> I'm stuck with these (standard OCaml code I'd like t
> make core-compatible, or know the equivalent functions
> in Core):
>
> module A   = Array
> module F   = Filename
> module HT  = Hashtbl
> module L   = List
> module Mar = Marshal
> module P   = Printf
> module RNG = Random
> module S   = String
>
> (* create a Hashtbl from a list of key-value pairs *)
> let hashtbl_of key_value_pairs =
>   let res = HT.create (L.length key_value_pairs) in
>   L.iter
>     (fun (k, v) -> HT.add res k v)
>     key_value_pairs;
>   res
>
> (* transform a Hashtbl of key->value into a Hashtbl of value->key *)
> let reverse_binding ht =
>   let res = HT.create (HT.length ht) in
>   HT.iter
>     (fun k v -> HT.add res v k)
>     ht;
>   res
>
> Thanks,
> F.
>


From agarwal1975 at gmail.com  Mon Nov 12 15:08:38 2012
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Mon, 12 Nov 2012 10:08:38 -0500
Subject: No statistics or math module in core?
In-Reply-To: <f8c113b2-b74a-45ab-aedb-e2a9f94e110e@googlegroups.com>
References: <f8c113b2-b74a-45ab-aedb-e2a9f94e110e@googlegroups.com>
Message-ID: <CAMu2m2KB+BpmM3T8UYxbX9pf8gUhnz6pBKzB9chVwMAT6qACUw@mail.gmail.com>

We have these in Biocaml.Math, which is not a great place for them. It
would be nice for OCaml to have some math/statistics libraries. OCaml-R has
a binding to R's math library, but there isn't a stable release.


On Sun, Nov 11, 2012 at 8:18 PM, Francois Berenger <
francois.berenger.working at gmail.com> wrote:

> Hello,
>
> I was looking for Pearson and Spearman correlation scores.
>
> Regards,
> F.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121112/1d74fd4e/attachment.html>

From markus.mottl at gmail.com  Mon Nov 12 15:20:41 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Mon, 12 Nov 2012 10:20:41 -0500
Subject: No statistics or math module in core?
In-Reply-To: <CAMu2m2KB+BpmM3T8UYxbX9pf8gUhnz6pBKzB9chVwMAT6qACUw@mail.gmail.com>
References: <f8c113b2-b74a-45ab-aedb-e2a9f94e110e@googlegroups.com>
	<CAMu2m2KB+BpmM3T8UYxbX9pf8gUhnz6pBKzB9chVwMAT6qACUw@mail.gmail.com>
Message-ID: <CAP_800oNNQcS48fKA68aCrfdZN6hG1O7ZzdWy-OqAt47iQMckw@mail.gmail.com>


On Mon, Nov 12, 2012 at 10:08 AM, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
> We have these in Biocaml.Math, which is not a great place for them. It would
> be nice for OCaml to have some math/statistics libraries. OCaml-R has a
> binding to R's math library, but there isn't a stable release.

There are two libraries that should mostly address your needs for math
and statistics: lacaml and gsl-ocaml:

  https://bitbucket.org/mmottl/lacaml
  https://bitbucket.org/mmottl/gsl-ocaml

The first one interfaces most of BLAS/LAPACK, which are the de-facto
standard for heavy-duty linear algebra (vector and matrix operations,
factorizations, eigenproblems, solving equations and least-squares
problems, etc.).

gsl-ocaml interfaces most of the GNU Scientific Library, which is
probably the most widely used open source library for that purpose.

Regards,
Markus

-- 
Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com


From agarwal1975 at gmail.com  Mon Nov 12 15:39:11 2012
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Mon, 12 Nov 2012 10:39:11 -0500
Subject: No statistics or math module in core?
In-Reply-To: <CAP_800oNNQcS48fKA68aCrfdZN6hG1O7ZzdWy-OqAt47iQMckw@mail.gmail.com>
References: <f8c113b2-b74a-45ab-aedb-e2a9f94e110e@googlegroups.com>
 <CAMu2m2KB+BpmM3T8UYxbX9pf8gUhnz6pBKzB9chVwMAT6qACUw@mail.gmail.com> <CAP_800oNNQcS48fKA68aCrfdZN6hG1O7ZzdWy-OqAt47iQMckw@mail.gmail.com>
Message-ID: <CAMu2m2+b2CpNPxeoT+Uj4XaNdYBFTQsNW+6zUdqboaxjRw+kFQ@mail.gmail.com>

I found Pearson correlation in GSL [1] but don't see Spearman.

[1] http://www.gnu.org/software/gsl/manual/html_node/Correlation.html



On Mon, Nov 12, 2012 at 10:20 AM, Markus Mottl <markus.mottl at gmail.com>wrote:

> On Mon, Nov 12, 2012 at 10:08 AM, Ashish Agarwal <agarwal1975 at gmail.com>
> wrote:
> > We have these in Biocaml.Math, which is not a great place for them. It
> would
> > be nice for OCaml to have some math/statistics libraries. OCaml-R has a
> > binding to R's math library, but there isn't a stable release.
>
> There are two libraries that should mostly address your needs for math
> and statistics: lacaml and gsl-ocaml:
>
>   https://bitbucket.org/mmottl/lacaml
>   https://bitbucket.org/mmottl/gsl-ocaml
>
> The first one interfaces most of BLAS/LAPACK, which are the de-facto
> standard for heavy-duty linear algebra (vector and matrix operations,
> factorizations, eigenproblems, solving equations and least-squares
> problems, etc.).
>
> gsl-ocaml interfaces most of the GNU Scientific Library, which is
> probably the most widely used open source library for that purpose.
>
> Regards,
> Markus
>
> --
> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121112/8bd825f6/attachment.html>

From markus.mottl at gmail.com  Mon Nov 12 15:54:14 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Mon, 12 Nov 2012 10:54:14 -0500
Subject: No statistics or math module in core?
In-Reply-To: <CAMu2m2+b2CpNPxeoT+Uj4XaNdYBFTQsNW+6zUdqboaxjRw+kFQ@mail.gmail.com>
References: <f8c113b2-b74a-45ab-aedb-e2a9f94e110e@googlegroups.com>
	<CAMu2m2KB+BpmM3T8UYxbX9pf8gUhnz6pBKzB9chVwMAT6qACUw@mail.gmail.com>
	<CAP_800oNNQcS48fKA68aCrfdZN6hG1O7ZzdWy-OqAt47iQMckw@mail.gmail.com>
	<CAMu2m2+b2CpNPxeoT+Uj4XaNdYBFTQsNW+6zUdqboaxjRw+kFQ@mail.gmail.com>
Message-ID: <CAP_800pBfkYRfXjfxeazfdjeK1QE4OSAx+Y=YzXYTv7ij_wMcg@mail.gmail.com>


True, it surprisingly seems that Spearman hasn't been implemented in GSL yet.

On Mon, Nov 12, 2012 at 10:39 AM, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
> I found Pearson correlation in GSL [1] but don't see Spearman.
>
> [1] http://www.gnu.org/software/gsl/manual/html_node/Correlation.html
>
>
>
> On Mon, Nov 12, 2012 at 10:20 AM, Markus Mottl <markus.mottl at gmail.com>
> wrote:
>>
>> On Mon, Nov 12, 2012 at 10:08 AM, Ashish Agarwal <agarwal1975 at gmail.com>
>> wrote:
>> > We have these in Biocaml.Math, which is not a great place for them. It
>> > would
>> > be nice for OCaml to have some math/statistics libraries. OCaml-R has a
>> > binding to R's math library, but there isn't a stable release.
>>
>> There are two libraries that should mostly address your needs for math
>> and statistics: lacaml and gsl-ocaml:
>>
>>   https://bitbucket.org/mmottl/lacaml
>>   https://bitbucket.org/mmottl/gsl-ocaml
>>
>> The first one interfaces most of BLAS/LAPACK, which are the de-facto
>> standard for heavy-duty linear algebra (vector and matrix operations,
>> factorizations, eigenproblems, solving equations and least-squares
>> problems, etc.).
>>
>> gsl-ocaml interfaces most of the GNU Scientific Library, which is
>> probably the most widely used open source library for that purpose.
>>
>> Regards,
>> Markus
>>
>> --
>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>
>



-- 
Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com


From dj at lobraico.com  Mon Nov 12 20:20:43 2012
From: dj at lobraico.com (Dominick LoBraico)
Date: Mon, 12 Nov 2012 12:20:43 -0800 (PST)
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <CAMQaOgM77i-Ly3sB3r=dU8q3vLKyZSc_MJVgA7BTzwibzLUm_w@mail.gmail.com>
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
 <87a9usk4fj.fsf@li195-236.members.linode.com>
 <CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>
 <CAPYVAiLMJAYKOgBtLDOj+NTihSjAXEX0=a4QUDTuS25B=z6z4g@mail.gmail.com>
 <CAMQaOgP0gZ-ADHyqJn7ZJH2tkdPXqg+jPs=N-aAvhvn_QT0X7Q@mail.gmail.com>
 <CAMQaOgM77i-Ly3sB3r=dU8q3vLKyZSc_MJVgA7BTzwibzLUm_w@mail.gmail.com>
Message-ID: <1ac23dbf-9e49-4cf6-8f59-7788364941a3@googlegroups.com>

Francois,

If you have ocamlfind install, this should work (for example):

$ ocamlfind ocamlc -thread -package async -linkpkg hello.ml -o hello.exe


On Thursday, November 8, 2012 7:01:50 PM UTC-6, Francois Berenger wrote:
>
> By the way, how do I compile them? 
> It was my initial question. ;) 
>
> On Fri, Nov 9, 2012 at 10:00 AM, Francois Berenger 
> <francois.ber... at gmail.com <javascript:>> wrote: 
> > $ cd ~/.opam/system/build/async.108.07.01/examples 
> > $ grep -ri jane.std * 
> > bin_prot_test.ml:open Jane.Std 
> > cat.ml:open Jane.Std 
> > countdown.ml:open Jane.Std 
> > finalizer.ml:open Jane.Std 
> > monitors.ml:open Jane.Std 
> > process.ml:open Jane.Std 
> > process_stream.ml:open Jane.Std 
> > server.ml:open Jane.Std 
> > signals.ml:open Jane.Std 
> > sigpipe.ml:open Jane.Std 
> > socket.ml:open Jane.Std 
> > sound.ml:open Jane.Std 
> > write_forever.ml:open Jane.Std 
> > 
> > On Fri, Nov 9, 2012 at 2:02 AM, Stephen Weeks <swe... at janestreet.com<javascript:>> 
> wrote: 
> >>> Jane.Std is some internal stuff that is not exported.  We should fix 
> >>> that example not to use it.  Which specific example is it? 
> >> 
> >> Many of the examples in base/async/examples unnecessarily refer to 
> >> Jane.Std.  I pushed a fix internally to change them all to Core.Std. 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121112/43663452/attachment.html>

From yminsky at janestreet.com  Mon Nov 12 17:43:50 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Mon, 12 Nov 2012 12:43:50 -0500
Subject: How to create the IntSet type with core? [joke]
In-Reply-To: <aa2fe250-7e1a-4d67-9dfa-b8b50452a9fe@googlegroups.com>
References: <6c9ce151-b434-4fcc-89c6-83b64fddbfb9@googlegroups.com>
	<CAK=fH+igEs7PpDAuw6XBoVxzMTEDnY0iFeZo+MM3QK-2LZ_=bA@mail.gmail.com>
	<aa2fe250-7e1a-4d67-9dfa-b8b50452a9fe@googlegroups.com>
Message-ID: <CACLX4jSEFXjSd_uWduYA0qMmx4aJxoCTxXmxQ6KJoiStveHYug@mail.gmail.com>


We try to be pretty conservative most of the time, but yeah, there's a
bit of cleverness here....

y

On Mon, Nov 12, 2012 at 3:51 AM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> I think this google group should be renamed to: ocaml-type-junkies
> ;)
>
> On Friday, November 9, 2012 6:11:14 PM UTC+9, David House wrote:
>>
>> There is already an Int.Set module! :)
>>
>> Here is a five-minute guide to the set / map / hashtable setup inside
>> core. I'll use the example of hashtables, but the language readily
>> translates into sets / maps.
>>
>> There are two types of hashtables in core. Ones that use polymorphic
>> comparison, and ones that use a specific comparision function that is
>> hopefully more efficient and has non-surprising semantics (we
>> basically think polymorphic comparison, despite its convenience, is
>> too surprising to be an overall good thing).
>>
>> The type of hashtables using polymorphic comparison is ('key, 'value)
>> Hashtbl.Poly.t. The type of hashtables using, e.g., int comparison for
>> the keys is 'value Int.Table.t. Given the previous paragraph, you
>> should always try to use Foo.Table when you can.
>>
>> When you create a hashtable (e.g. using [create], [of_alist], or
>> [t_of_sexp]), you must use the specific module name. I.e. [let table =
>> Int.Table.create () in]. However, when you already have a hashtable in
>> your hands, and you want to use accessor functions, you should just
>> use Hashtbl.foo, regardless of what comparison function it uses.
>>
>> To translate into Maps and Sets:
>>
>> 'value Foo.Table.t  ('key,'value) Hashtbl.Poly.t  Hashtbl.foo
>> 'value Foo.Map.t    ('key,'value) Map.Poly.t      Map.foo
>> Foo.Set.t           'element Set.Poly.t           Set.foo
>>
>> --
>>
>> If you have your own type and want to make Table, Map and Set
>> submodules, it's really easy:
>>
>> module T = struct
>>   type t = ... with compare, sexp
>>   let hash = (* your hash function, maybe Hashtbl.hash *)
>> end
>> include Comparable.Make(T)
>> include Hashable.Make(T)
>>
>> Saying "with compare" generates you an efficient comparison function
>> specialised to your type. (Note that all component types need to have
>> comparison functions defined too, whether through "with compare" or
>> through primitives.) The Comparable.Make functor adds in modules to
>> make you satisfy the Comparable.S signature (basically the Set and Map
>> modules, and a few more). The Hashable.Make functor adds in modules to
>> make you satisfy Hashable.S (basically Hashtbl, as well as some others
>> like Hash_set). If you don't want the Hashable stuff, there is no need
>> to define a hash function. (Although Hashtbl.hash is normally not a
>> bad choice.)
>>
>> --
>>
>> Here's how this all works under the hood:
>>
>> The type of maps is "really" ('key, 'value, 'comparator) Map.t. Maps
>> contain in their values the function that is used for comparing keys,
>> i.e. a function of type 'key -> 'key -> int. But what is this
>> "comparator" thing?
>>
>> We can first motivate things by saying: it's a pain to have to type
>> Int.Map.find for int-maps, String.Map.find for string-maps, etc. etc.
>> It'd be nice to have a single type and use Map.find for everything.
>> But this presents a problem because of functions like Map.merge, which
>> takes two maps and combines them. You need to know that the comparison
>> functions are identical, but how can you do this?
>>
>> So we have this extra comparator phantom type. Nothing in the actual
>> representation has a type involving 'comparator: it's just for static
>> checking. If you want to have a new comparison function, you must mint
>> a new comparator type. (Including the Comparable signature does this
>> for you.)
>>
>> I originally wrote this last section with hashtables in mind, but it
>> appears that hashtables work slightly differently: they just assert
>> that the hashing functions are physically equal inside [merge]; you
>> don't get a compile-time error for something like [Hashtbl.merge
>> (Int.Table.create ()) (String.Table.create ())].
>>
>> On Fri, Nov 9, 2012 at 8:14 AM, Francois Berenger
>> <francois.ber... at gmail.com> wrote:
>> > Hello,
>> >
>> > I'm converting some standard code to use core.
>> >
>> > How do I do this in core:
>> >
>> > module IntSet =
>> >   Set.Make
>> >     (struct
>> >       let compare = Pervasives.compare
>> >       type t = int
>> >     end)
>> >
>> > Thanks a lot,
>> > F.
>> >
>> > PS: yes, I opened Core.Std and did not die from it. ;)
>> >


From mmatalka at gmail.com  Mon Nov 12 18:04:58 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Mon, 12 Nov 2012 13:04:58 -0500
Subject: How to create the IntSet type with core? [joke]
In-Reply-To: <CACLX4jSEFXjSd_uWduYA0qMmx4aJxoCTxXmxQ6KJoiStveHYug@mail.gmail.com>
	(Yaron Minsky's message of "Mon, 12 Nov 2012 12:43:50 -0500")
References: <6c9ce151-b434-4fcc-89c6-83b64fddbfb9@googlegroups.com>
	<CAK=fH+igEs7PpDAuw6XBoVxzMTEDnY0iFeZo+MM3QK-2LZ_=bA@mail.gmail.com>
	<aa2fe250-7e1a-4d67-9dfa-b8b50452a9fe@googlegroups.com>
	<CACLX4jSEFXjSd_uWduYA0qMmx4aJxoCTxXmxQ6KJoiStveHYug@mail.gmail.com>
Message-ID: <87txsuvgs5.fsf@li195-236.members.linode.com>


It's very handy cleverness though!

Yaron Minsky <yminsky at janestreet.com> writes:

> We try to be pretty conservative most of the time, but yeah, there's a
> bit of cleverness here....
>
> y
>
> On Mon, Nov 12, 2012 at 3:51 AM, Francois Berenger
> <francois.berenger.working at gmail.com> wrote:
>> I think this google group should be renamed to: ocaml-type-junkies
>> ;)
>>
>> On Friday, November 9, 2012 6:11:14 PM UTC+9, David House wrote:
>>>
>>> There is already an Int.Set module! :)
>>>
>>> Here is a five-minute guide to the set / map / hashtable setup inside
>>> core. I'll use the example of hashtables, but the language readily
>>> translates into sets / maps.
>>>
>>> There are two types of hashtables in core. Ones that use polymorphic
>>> comparison, and ones that use a specific comparision function that is
>>> hopefully more efficient and has non-surprising semantics (we
>>> basically think polymorphic comparison, despite its convenience, is
>>> too surprising to be an overall good thing).
>>>
>>> The type of hashtables using polymorphic comparison is ('key, 'value)
>>> Hashtbl.Poly.t. The type of hashtables using, e.g., int comparison for
>>> the keys is 'value Int.Table.t. Given the previous paragraph, you
>>> should always try to use Foo.Table when you can.
>>>
>>> When you create a hashtable (e.g. using [create], [of_alist], or
>>> [t_of_sexp]), you must use the specific module name. I.e. [let table =
>>> Int.Table.create () in]. However, when you already have a hashtable in
>>> your hands, and you want to use accessor functions, you should just
>>> use Hashtbl.foo, regardless of what comparison function it uses.
>>>
>>> To translate into Maps and Sets:
>>>
>>> 'value Foo.Table.t  ('key,'value) Hashtbl.Poly.t  Hashtbl.foo
>>> 'value Foo.Map.t    ('key,'value) Map.Poly.t      Map.foo
>>> Foo.Set.t           'element Set.Poly.t           Set.foo
>>>
>>> --
>>>
>>> If you have your own type and want to make Table, Map and Set
>>> submodules, it's really easy:
>>>
>>> module T = struct
>>>   type t = ... with compare, sexp
>>>   let hash = (* your hash function, maybe Hashtbl.hash *)
>>> end
>>> include Comparable.Make(T)
>>> include Hashable.Make(T)
>>>
>>> Saying "with compare" generates you an efficient comparison function
>>> specialised to your type. (Note that all component types need to have
>>> comparison functions defined too, whether through "with compare" or
>>> through primitives.) The Comparable.Make functor adds in modules to
>>> make you satisfy the Comparable.S signature (basically the Set and Map
>>> modules, and a few more). The Hashable.Make functor adds in modules to
>>> make you satisfy Hashable.S (basically Hashtbl, as well as some others
>>> like Hash_set). If you don't want the Hashable stuff, there is no need
>>> to define a hash function. (Although Hashtbl.hash is normally not a
>>> bad choice.)
>>>
>>> --
>>>
>>> Here's how this all works under the hood:
>>>
>>> The type of maps is "really" ('key, 'value, 'comparator) Map.t. Maps
>>> contain in their values the function that is used for comparing keys,
>>> i.e. a function of type 'key -> 'key -> int. But what is this
>>> "comparator" thing?
>>>
>>> We can first motivate things by saying: it's a pain to have to type
>>> Int.Map.find for int-maps, String.Map.find for string-maps, etc. etc.
>>> It'd be nice to have a single type and use Map.find for everything.
>>> But this presents a problem because of functions like Map.merge, which
>>> takes two maps and combines them. You need to know that the comparison
>>> functions are identical, but how can you do this?
>>>
>>> So we have this extra comparator phantom type. Nothing in the actual
>>> representation has a type involving 'comparator: it's just for static
>>> checking. If you want to have a new comparison function, you must mint
>>> a new comparator type. (Including the Comparable signature does this
>>> for you.)
>>>
>>> I originally wrote this last section with hashtables in mind, but it
>>> appears that hashtables work slightly differently: they just assert
>>> that the hashing functions are physically equal inside [merge]; you
>>> don't get a compile-time error for something like [Hashtbl.merge
>>> (Int.Table.create ()) (String.Table.create ())].
>>>
>>> On Fri, Nov 9, 2012 at 8:14 AM, Francois Berenger
>>> <francois.ber... at gmail.com> wrote:
>>> > Hello,
>>> >
>>> > I'm converting some standard code to use core.
>>> >
>>> > How do I do this in core:
>>> >
>>> > module IntSet =
>>> >   Set.Make
>>> >     (struct
>>> >       let compare = Pervasives.compare
>>> >       type t = int
>>> >     end)
>>> >
>>> > Thanks a lot,
>>> > F.
>>> >
>>> > PS: yes, I opened Core.Std and did not die from it. ;)
>>> >


From dj at lobraico.com  Mon Nov 12 23:39:15 2012
From: dj at lobraico.com (Dominick LoBraico)
Date: Mon, 12 Nov 2012 15:39:15 -0800 (PST)
Subject: Weird bug on Mac OS X
In-Reply-To: <6A07B832-6552-482F-BD95-10462BE9171D@recoil.org>
References: <CAP_800rEOO6pGfUUb9-NtDtYg-1eBhe92POwFz3AHsS_vGVggQ@mail.gmail.com> <CAMu2m2J7xz1YVLLbMQMom8Pu7UN5f4OH_RGp9eJb7AsTq+bmTg@mail.gmail.com> <CAP_800oSoHppULSPBoR_KjxxieQoO6pdjGfCXyi-pS9BgK_qog@mail.gmail.com>
 <6A07B832-6552-482F-BD95-10462BE9171D@recoil.org>
Message-ID: <f4af2464-5d94-4d12-a50d-65317ce79562@googlegroups.com>

Confirmed segfault on 10.8.2 with latest core (108.07.01) and OCaml 
4.00.1+short-types.

On Thursday, November 8, 2012 11:47:21 AM UTC-6, Anil Madhavapeddy wrote:
>
> Looks like another misaligned stack pointer somewhere; two were fixed 
> already here: 
> http://caml.inria.fr/mantis/view.php?id=5700 
>
> MacOS 10.8 strictly needs a 16-byte aligned stack or else lots of systems 
> functions decide to throw in the towel (due to them using SSE instructions 
> by default now). 
>
> #0  0x00007fff8e4ad8a5 in misaligned_stack_error_entering_dyld_stub_binder 
> () 
> #1  0x0000000000000103 in ?? () 
> #2  0x0000000100254068 in caml_absf_mask () 
> #3  0x000000010022e923 in caml_raise () 
> #4  0x000000010022ec71 in caml_array_bound_error () 
> #5  0x000000010000b32a in .L101 () 
>
>
> -a 
>
> On 8 Nov 2012, at 17:16, Markus Mottl <markus... at gmail.com <javascript:>> 
> wrote: 
>
> > Should have mentioned that, too: I'm running Mac OS X 10.8.2 with the 
> > latest XCode version (4.5.2). 
> > 
> > On Thu, Nov 8, 2012 at 12:11 PM, Ashish Agarwal <agarw... at gmail.com<javascript:>> 
> wrote: 
> >> I correctly get an exception with OCaml 3.12.1, Core 108.00.02, on Mac 
> OS X 
> >> 10.7.5. 
> >> 
> >> On Thu, Nov 8, 2012 at 12:04 PM, Markus Mottl <markus... at gmail.com<javascript:>> 
>
> >> wrote: 
> >>> 
> >>> Hi, 
> >>> 
> >>> I've run into a segfault on Mac OS X with a very trivial program that 
> >>> basically just links with Jane Street Core.  Here is the file test.ml: 
>
> >>> 
> >>> ---------- 
> >>> module X = Core 
> >>> 
> >>> let () = [||].(0) <- 42 
> >>> ---------- 
> >>> 
> >>> You can build it as follows: 
> >>> 
> >>>  ocamlbuild -use-ocamlfind -cflag -thread -lflag -thread -pkgs core 
> >>> test.native 
> >>> 
> >>> Running test.native will give you a segfault.  Here is the stack 
> >>> backtrace: 
> >>> 
> >>> ---------- 
> >>> #0  0x00007fff90fa78a5 in 
> misaligned_stack_error_entering_dyld_stub_binder 
> >>> () 
> >>> #1  0x0000000000000103 in ?? () 
> >>> #2  0x0000000101c0a088 in pvars () 
> >>> #3  0x0000000101bddedd in caml_raise () 
> >>> #4  0x0000000101bddf99 in caml_array_bound_error () 
> >>> #5  0x00000001019b6aca in .L101 () 
> >>> ---------- 
> >>> 
> >>> The program should just raise an exception due to the illegal array 
> >>> access.  Merely raising an exception directly doesn't trigger the 
> >>> problem.  The program won't segfault either if the "module X = Core" 
> >>> line is commented out, i.e. Core has to be linked in.  Other libraries 
> >>> apparently also don't cause this issue. 
> >>> 
> >>> Could another Mac OS X user here please verify the problem?  I'm using 
> >>> OCaml 4.00.1 with Opam and the latest release of Core in there. 
> >>> 
> >>> Maybe somebody more knowledgeable about stack alignment and linking 
> >>> issues on Mac OS X has an idea what's going wrong here.  I suspect 
> >>> it's a code generation, linking or even runtime issue that may need to 
> >>> be fixed in the compiler.  Or there could be a bug in some module 
> >>> initialization in Core that is using C-bindings (less likely, I'm not 
> >>> aware of anything that could cause this). 
> >>> 
> >>> Regards, 
> >>> Markus 
> >>> 
> >>> -- 
> >>> Markus Mottl        http://www.ocaml.info        markus... at gmail.com<javascript:> 
> >> 
> >> 
> > 
> > 
> > 
> > -- 
> > Markus Mottl        http://www.ocaml.info        markus... at gmail.com<javascript:> 
> > 
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121112/37ad994a/attachment.html>

From francois.berenger.working at gmail.com  Tue Nov 13 01:00:14 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Mon, 12 Nov 2012 17:00:14 -0800 (PST)
Subject: No statistics or math module in core?
In-Reply-To: <CAP_800pBfkYRfXjfxeazfdjeK1QE4OSAx+Y=YzXYTv7ij_wMcg@mail.gmail.com>
References: <f8c113b2-b74a-45ab-aedb-e2a9f94e110e@googlegroups.com>
 <CAMu2m2KB+BpmM3T8UYxbX9pf8gUhnz6pBKzB9chVwMAT6qACUw@mail.gmail.com>
 <CAP_800oNNQcS48fKA68aCrfdZN6hG1O7ZzdWy-OqAt47iQMckw@mail.gmail.com>
 <CAMu2m2+b2CpNPxeoT+Uj4XaNdYBFTQsNW+6zUdqboaxjRw+kFQ@mail.gmail.com>
 <CAP_800pBfkYRfXjfxeazfdjeK1QE4OSAx+Y=YzXYTv7ij_wMcg@mail.gmail.com>
Message-ID: <47f9b2d0-293a-4c70-9e10-580f88016566@googlegroups.com>

Yes, I noticed this also very recently.

On Tuesday, November 13, 2012 12:54:16 AM UTC+9, Markus wrote:
>
> True, it surprisingly seems that Spearman hasn't been implemented in GSL 
> yet. 
>
> On Mon, Nov 12, 2012 at 10:39 AM, Ashish Agarwal <agarw... at gmail.com<javascript:>> 
> wrote: 
> > I found Pearson correlation in GSL [1] but don't see Spearman. 
> > 
> > [1] http://www.gnu.org/software/gsl/manual/html_node/Correlation.html 
> > 
> > 
> > 
> > On Mon, Nov 12, 2012 at 10:20 AM, Markus Mottl <markus... at gmail.com<javascript:>> 
>
> > wrote: 
> >> 
> >> On Mon, Nov 12, 2012 at 10:08 AM, Ashish Agarwal <agarw... at gmail.com<javascript:>> 
>
> >> wrote: 
> >> > We have these in Biocaml.Math, which is not a great place for them. 
> It 
> >> > would 
> >> > be nice for OCaml to have some math/statistics libraries. OCaml-R has 
> a 
> >> > binding to R's math library, but there isn't a stable release. 
> >> 
> >> There are two libraries that should mostly address your needs for math 
> >> and statistics: lacaml and gsl-ocaml: 
> >> 
> >>   https://bitbucket.org/mmottl/lacaml 
> >>   https://bitbucket.org/mmottl/gsl-ocaml 
> >> 
> >> The first one interfaces most of BLAS/LAPACK, which are the de-facto 
> >> standard for heavy-duty linear algebra (vector and matrix operations, 
> >> factorizations, eigenproblems, solving equations and least-squares 
> >> problems, etc.). 
> >> 
> >> gsl-ocaml interfaces most of the GNU Scientific Library, which is 
> >> probably the most widely used open source library for that purpose. 
> >> 
> >> Regards, 
> >> Markus 
> >> 
> >> -- 
> >> Markus Mottl        http://www.ocaml.info        markus... at gmail.com<javascript:> 
> > 
> > 
>
>
>
> -- 
> Markus Mottl        http://www.ocaml.info        markus... at gmail.com<javascript:> 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121112/56ae4dbf/attachment.html>

From francois.berenger.working at gmail.com  Tue Nov 13 01:02:50 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Mon, 12 Nov 2012 17:02:50 -0800 (PST)
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <1ac23dbf-9e49-4cf6-8f59-7788364941a3@googlegroups.com>
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
 <87a9usk4fj.fsf@li195-236.members.linode.com>
 <CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>
 <CAPYVAiLMJAYKOgBtLDOj+NTihSjAXEX0=a4QUDTuS25B=z6z4g@mail.gmail.com>
 <CAMQaOgP0gZ-ADHyqJn7ZJH2tkdPXqg+jPs=N-aAvhvn_QT0X7Q@mail.gmail.com>
 <CAMQaOgM77i-Ly3sB3r=dU8q3vLKyZSc_MJVgA7BTzwibzLUm_w@mail.gmail.com>
 <1ac23dbf-9e49-4cf6-8f59-7788364941a3@googlegroups.com>
Message-ID: <839ad1cc-6e6e-465c-a824-3e891e0d413f@googlegroups.com>

Thanks for the command.

In fact, it would be quite useful to have example programs for core too. 
I think I saw just one, while async has many.

On Tuesday, November 13, 2012 5:20:43 AM UTC+9, Dominick LoBraico wrote:
>
> Francois,
>
> If you have ocamlfind install, this should work (for example):
>
> $ ocamlfind ocamlc -thread -package async -linkpkg hello.ml -o hello.exe
>
>
> On Thursday, November 8, 2012 7:01:50 PM UTC-6, Francois Berenger wrote:
>>
>> By the way, how do I compile them? 
>> It was my initial question. ;) 
>>
>> On Fri, Nov 9, 2012 at 10:00 AM, Francois Berenger 
>> <francois.ber... at gmail.com> wrote: 
>> > $ cd ~/.opam/system/build/async.108.07.01/examples 
>> > $ grep -ri jane.std * 
>> > bin_prot_test.ml:open Jane.Std 
>> > cat.ml:open Jane.Std 
>> > countdown.ml:open Jane.Std 
>> > finalizer.ml:open Jane.Std 
>> > monitors.ml:open Jane.Std 
>> > process.ml:open Jane.Std 
>> > process_stream.ml:open Jane.Std 
>> > server.ml:open Jane.Std 
>> > signals.ml:open Jane.Std 
>> > sigpipe.ml:open Jane.Std 
>> > socket.ml:open Jane.Std 
>> > sound.ml:open Jane.Std 
>> > write_forever.ml:open Jane.Std 
>> > 
>> > On Fri, Nov 9, 2012 at 2:02 AM, Stephen Weeks <swe... at janestreet.com> 
>> wrote: 
>> >>> Jane.Std is some internal stuff that is not exported.  We should fix 
>> >>> that example not to use it.  Which specific example is it? 
>> >> 
>> >> Many of the examples in base/async/examples unnecessarily refer to 
>> >> Jane.Std.  I pushed a fix internally to change them all to Core.Std. 
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121112/399a7e49/attachment.html>

From francois.berenger.working at gmail.com  Tue Nov 13 01:53:54 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Mon, 12 Nov 2012 17:53:54 -0800 (PST)
Subject: No statistics or math module in core?
In-Reply-To: <47f9b2d0-293a-4c70-9e10-580f88016566@googlegroups.com>
References: <f8c113b2-b74a-45ab-aedb-e2a9f94e110e@googlegroups.com>
 <CAMu2m2KB+BpmM3T8UYxbX9pf8gUhnz6pBKzB9chVwMAT6qACUw@mail.gmail.com>
 <CAP_800oNNQcS48fKA68aCrfdZN6hG1O7ZzdWy-OqAt47iQMckw@mail.gmail.com>
 <CAMu2m2+b2CpNPxeoT+Uj4XaNdYBFTQsNW+6zUdqboaxjRw+kFQ@mail.gmail.com>
 <CAP_800pBfkYRfXjfxeazfdjeK1QE4OSAx+Y=YzXYTv7ij_wMcg@mail.gmail.com>
 <47f9b2d0-293a-4c70-9e10-580f88016566@googlegroups.com>
Message-ID: <5e25e5b0-37fb-4214-b9d9-e15bdbc0b347@googlegroups.com>

I had to code for my needs:

pearson, spearman (copy-paste from Biocaml this one), mean, median, std_dev
+ some significance test for the Pearson score.

While doing this, I just felt I was wasting my time
(especially once I noticed there is a stat module in Haskell with all of 
this,
crafted by people much more versed than me in numerical algorithms, I 
guess).

And, the cherry at the top of the cake, having to declare pi ...

On Tuesday, November 13, 2012 10:00:14 AM UTC+9, Francois Berenger wrote:
>
> Yes, I noticed this also very recently.
>
> On Tuesday, November 13, 2012 12:54:16 AM UTC+9, Markus wrote:
>>
>> True, it surprisingly seems that Spearman hasn't been implemented in GSL 
>> yet. 
>>
>> On Mon, Nov 12, 2012 at 10:39 AM, Ashish Agarwal <agarw... at gmail.com> 
>> wrote: 
>> > I found Pearson correlation in GSL [1] but don't see Spearman. 
>> > 
>> > [1] http://www.gnu.org/software/gsl/manual/html_node/Correlation.html 
>> > 
>> > 
>> > 
>> > On Mon, Nov 12, 2012 at 10:20 AM, Markus Mottl <markus... at gmail.com> 
>> > wrote: 
>> >> 
>> >> On Mon, Nov 12, 2012 at 10:08 AM, Ashish Agarwal <agarw... at gmail.com> 
>> >> wrote: 
>> >> > We have these in Biocaml.Math, which is not a great place for them. 
>> It 
>> >> > would 
>> >> > be nice for OCaml to have some math/statistics libraries. OCaml-R 
>> has a 
>> >> > binding to R's math library, but there isn't a stable release. 
>> >> 
>> >> There are two libraries that should mostly address your needs for math 
>> >> and statistics: lacaml and gsl-ocaml: 
>> >> 
>> >>   https://bitbucket.org/mmottl/lacaml 
>> >>   https://bitbucket.org/mmottl/gsl-ocaml 
>> >> 
>> >> The first one interfaces most of BLAS/LAPACK, which are the de-facto 
>> >> standard for heavy-duty linear algebra (vector and matrix operations, 
>> >> factorizations, eigenproblems, solving equations and least-squares 
>> >> problems, etc.). 
>> >> 
>> >> gsl-ocaml interfaces most of the GNU Scientific Library, which is 
>> >> probably the most widely used open source library for that purpose. 
>> >> 
>> >> Regards, 
>> >> Markus 
>> >> 
>> >> -- 
>> >> Markus Mottl        http://www.ocaml.info        markus... at gmail.com 
>> > 
>> > 
>>
>>
>>
>> -- 
>> Markus Mottl        http://www.ocaml.info        markus... at gmail.com 
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121112/94b22056/attachment.html>

From dhouse at janestreet.com  Mon Nov 12 18:03:52 2012
From: dhouse at janestreet.com (David House)
Date: Mon, 12 Nov 2012 18:03:52 +0000
Subject: How to create the IntSet type with core?
In-Reply-To: <CAK=fH+igEs7PpDAuw6XBoVxzMTEDnY0iFeZo+MM3QK-2LZ_=bA@mail.gmail.com>
References: <6c9ce151-b434-4fcc-89c6-83b64fddbfb9@googlegroups.com>
	<CAK=fH+igEs7PpDAuw6XBoVxzMTEDnY0iFeZo+MM3QK-2LZ_=bA@mail.gmail.com>
Message-ID: <CAK=fH+jxoN9cYcEySYkNJaOZv+D6vO61Qdy3ozgUR6MKRude=A@mail.gmail.com>


I wrote these notes up into a blog post here:

https://ocaml.janestreet.com/?q=node/112

On Fri, Nov 9, 2012 at 9:10 AM, David House <dhouse at janestreet.com> wrote:
> There is already an Int.Set module! :)
>
> Here is a five-minute guide to the set / map / hashtable setup inside
> core. I'll use the example of hashtables, but the language readily
> translates into sets / maps.
>
> There are two types of hashtables in core. Ones that use polymorphic
> comparison, and ones that use a specific comparision function that is
> hopefully more efficient and has non-surprising semantics (we
> basically think polymorphic comparison, despite its convenience, is
> too surprising to be an overall good thing).
>
> The type of hashtables using polymorphic comparison is ('key, 'value)
> Hashtbl.Poly.t. The type of hashtables using, e.g., int comparison for
> the keys is 'value Int.Table.t. Given the previous paragraph, you
> should always try to use Foo.Table when you can.
>
> When you create a hashtable (e.g. using [create], [of_alist], or
> [t_of_sexp]), you must use the specific module name. I.e. [let table =
> Int.Table.create () in]. However, when you already have a hashtable in
> your hands, and you want to use accessor functions, you should just
> use Hashtbl.foo, regardless of what comparison function it uses.
>
> To translate into Maps and Sets:
>
> 'value Foo.Table.t  ('key,'value) Hashtbl.Poly.t  Hashtbl.foo
> 'value Foo.Map.t    ('key,'value) Map.Poly.t      Map.foo
> Foo.Set.t           'element Set.Poly.t           Set.foo
>
> --
>
> If you have your own type and want to make Table, Map and Set
> submodules, it's really easy:
>
> module T = struct
>   type t = ... with compare, sexp
>   let hash = (* your hash function, maybe Hashtbl.hash *)
> end
> include Comparable.Make(T)
> include Hashable.Make(T)
>
> Saying "with compare" generates you an efficient comparison function
> specialised to your type. (Note that all component types need to have
> comparison functions defined too, whether through "with compare" or
> through primitives.) The Comparable.Make functor adds in modules to
> make you satisfy the Comparable.S signature (basically the Set and Map
> modules, and a few more). The Hashable.Make functor adds in modules to
> make you satisfy Hashable.S (basically Hashtbl, as well as some others
> like Hash_set). If you don't want the Hashable stuff, there is no need
> to define a hash function. (Although Hashtbl.hash is normally not a
> bad choice.)
>
> --
>
> Here's how this all works under the hood:
>
> The type of maps is "really" ('key, 'value, 'comparator) Map.t. Maps
> contain in their values the function that is used for comparing keys,
> i.e. a function of type 'key -> 'key -> int. But what is this
> "comparator" thing?
>
> We can first motivate things by saying: it's a pain to have to type
> Int.Map.find for int-maps, String.Map.find for string-maps, etc. etc.
> It'd be nice to have a single type and use Map.find for everything.
> But this presents a problem because of functions like Map.merge, which
> takes two maps and combines them. You need to know that the comparison
> functions are identical, but how can you do this?
>
> So we have this extra comparator phantom type. Nothing in the actual
> representation has a type involving 'comparator: it's just for static
> checking. If you want to have a new comparison function, you must mint
> a new comparator type. (Including the Comparable signature does this
> for you.)
>
> I originally wrote this last section with hashtables in mind, but it
> appears that hashtables work slightly differently: they just assert
> that the hashing functions are physically equal inside [merge]; you
> don't get a compile-time error for something like [Hashtbl.merge
> (Int.Table.create ()) (String.Table.create ())].
>
> On Fri, Nov 9, 2012 at 8:14 AM, Francois Berenger
> <francois.berenger.working at gmail.com> wrote:
>> Hello,
>>
>> I'm converting some standard code to use core.
>>
>> How do I do this in core:
>>
>> module IntSet =
>>   Set.Make
>>     (struct
>>       let compare = Pervasives.compare
>>       type t = int
>>     end)
>>
>> Thanks a lot,
>> F.
>>
>> PS: yes, I opened Core.Std and did not die from it. ;)
>>


From francois.berenger.working at gmail.com  Tue Nov 13 02:39:59 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Mon, 12 Nov 2012 18:39:59 -0800 (PST)
Subject: No statistics or math module in core?
In-Reply-To: <47f9b2d0-293a-4c70-9e10-580f88016566@googlegroups.com>
References: <f8c113b2-b74a-45ab-aedb-e2a9f94e110e@googlegroups.com>
 <CAMu2m2KB+BpmM3T8UYxbX9pf8gUhnz6pBKzB9chVwMAT6qACUw@mail.gmail.com>
 <CAP_800oNNQcS48fKA68aCrfdZN6hG1O7ZzdWy-OqAt47iQMckw@mail.gmail.com>
 <CAMu2m2+b2CpNPxeoT+Uj4XaNdYBFTQsNW+6zUdqboaxjRw+kFQ@mail.gmail.com>
 <CAP_800pBfkYRfXjfxeazfdjeK1QE4OSAx+Y=YzXYTv7ij_wMcg@mail.gmail.com>
 <47f9b2d0-293a-4c70-9e10-580f88016566@googlegroups.com>
Message-ID: <6072be7e-ebcb-4415-9b9b-c17048bff485@googlegroups.com>

On Tuesday, November 13, 2012 10:00:14 AM UTC+9, Francois Berenger wrote:
>
> Yes, I noticed this also very recently.
>

Let's do something about it:

https://savannah.gnu.org/bugs/index.php?37728 

>
> On Tuesday, November 13, 2012 12:54:16 AM UTC+9, Markus wrote:
>>
>> True, it surprisingly seems that Spearman hasn't been implemented in GSL 
>> yet. 
>>
>> On Mon, Nov 12, 2012 at 10:39 AM, Ashish Agarwal <agarw... at gmail.com> 
>> wrote: 
>> > I found Pearson correlation in GSL [1] but don't see Spearman. 
>> > 
>> > [1] http://www.gnu.org/software/gsl/manual/html_node/Correlation.html 
>> > 
>> > 
>> > 
>> > On Mon, Nov 12, 2012 at 10:20 AM, Markus Mottl <markus... at gmail.com> 
>> > wrote: 
>> >> 
>> >> On Mon, Nov 12, 2012 at 10:08 AM, Ashish Agarwal <agarw... at gmail.com> 
>> >> wrote: 
>> >> > We have these in Biocaml.Math, which is not a great place for them. 
>> It 
>> >> > would 
>> >> > be nice for OCaml to have some math/statistics libraries. OCaml-R 
>> has a 
>> >> > binding to R's math library, but there isn't a stable release. 
>> >> 
>> >> There are two libraries that should mostly address your needs for math 
>> >> and statistics: lacaml and gsl-ocaml: 
>> >> 
>> >>   https://bitbucket.org/mmottl/lacaml 
>> >>   https://bitbucket.org/mmottl/gsl-ocaml 
>> >> 
>> >> The first one interfaces most of BLAS/LAPACK, which are the de-facto 
>> >> standard for heavy-duty linear algebra (vector and matrix operations, 
>> >> factorizations, eigenproblems, solving equations and least-squares 
>> >> problems, etc.). 
>> >> 
>> >> gsl-ocaml interfaces most of the GNU Scientific Library, which is 
>> >> probably the most widely used open source library for that purpose. 
>> >> 
>> >> Regards, 
>> >> Markus 
>> >> 
>> >> -- 
>> >> Markus Mottl        http://www.ocaml.info        markus... at gmail.com 
>> > 
>> > 
>>
>>
>>
>> -- 
>> Markus Mottl        http://www.ocaml.info        markus... at gmail.com 
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121112/5bd64954/attachment.html>

From dj at lobraico.com  Tue Nov 13 03:29:23 2012
From: dj at lobraico.com (Dominick LoBraico)
Date: Mon, 12 Nov 2012 19:29:23 -0800 (PST)
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <839ad1cc-6e6e-465c-a824-3e891e0d413f@googlegroups.com>
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
 <87a9usk4fj.fsf@li195-236.members.linode.com>
 <CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>
 <CAPYVAiLMJAYKOgBtLDOj+NTihSjAXEX0=a4QUDTuS25B=z6z4g@mail.gmail.com>
 <CAMQaOgP0gZ-ADHyqJn7ZJH2tkdPXqg+jPs=N-aAvhvn_QT0X7Q@mail.gmail.com>
 <CAMQaOgM77i-Ly3sB3r=dU8q3vLKyZSc_MJVgA7BTzwibzLUm_w@mail.gmail.com>
 <1ac23dbf-9e49-4cf6-8f59-7788364941a3@googlegroups.com>
 <839ad1cc-6e6e-465c-a824-3e891e0d413f@googlegroups.com>
Message-ID: <a0995a8f-8cdb-411e-aad2-214536136615@googlegroups.com>

The fact that has probably blocked that is the general vastness of Core. 
There is an example file for the Command module included with Core I 
believe (command-line parsing module). If there are specific areas that you 
would like to see some clarity on I could write up some simple examples for 
you/the community.

On Monday, November 12, 2012 7:02:51 PM UTC-6, Francois Berenger wrote:
>
> Thanks for the command.
>
> In fact, it would be quite useful to have example programs for core too. 
> I think I saw just one, while async has many.
>
> On Tuesday, November 13, 2012 5:20:43 AM UTC+9, Dominick LoBraico wrote:
>>
>> Francois,
>>
>> If you have ocamlfind install, this should work (for example):
>>
>> $ ocamlfind ocamlc -thread -package async -linkpkg hello.ml -o hello.exe
>>
>>
>> On Thursday, November 8, 2012 7:01:50 PM UTC-6, Francois Berenger wrote:
>>>
>>> By the way, how do I compile them? 
>>> It was my initial question. ;) 
>>>
>>> On Fri, Nov 9, 2012 at 10:00 AM, Francois Berenger 
>>> <francois.ber... at gmail.com> wrote: 
>>> > $ cd ~/.opam/system/build/async.108.07.01/examples 
>>> > $ grep -ri jane.std * 
>>> > bin_prot_test.ml:open Jane.Std 
>>> > cat.ml:open Jane.Std 
>>> > countdown.ml:open Jane.Std 
>>> > finalizer.ml:open Jane.Std 
>>> > monitors.ml:open Jane.Std 
>>> > process.ml:open Jane.Std 
>>> > process_stream.ml:open Jane.Std 
>>> > server.ml:open Jane.Std 
>>> > signals.ml:open Jane.Std 
>>> > sigpipe.ml:open Jane.Std 
>>> > socket.ml:open Jane.Std 
>>> > sound.ml:open Jane.Std 
>>> > write_forever.ml:open Jane.Std 
>>> > 
>>> > On Fri, Nov 9, 2012 at 2:02 AM, Stephen Weeks <swe... at janestreet.com> 
>>> wrote: 
>>> >>> Jane.Std is some internal stuff that is not exported.  We should fix 
>>> >>> that example not to use it.  Which specific example is it? 
>>> >> 
>>> >> Many of the examples in base/async/examples unnecessarily refer to 
>>> >> Jane.Std.  I pushed a fix internally to change them all to Core.Std. 
>>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121112/dcedb200/attachment.html>

From dj at lobraico.com  Tue Nov 13 03:43:49 2012
From: dj at lobraico.com (Dominick LoBraico)
Date: Mon, 12 Nov 2012 19:43:49 -0800 (PST)
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <a0995a8f-8cdb-411e-aad2-214536136615@googlegroups.com>
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
 <87a9usk4fj.fsf@li195-236.members.linode.com>
 <CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>
 <CAPYVAiLMJAYKOgBtLDOj+NTihSjAXEX0=a4QUDTuS25B=z6z4g@mail.gmail.com>
 <CAMQaOgP0gZ-ADHyqJn7ZJH2tkdPXqg+jPs=N-aAvhvn_QT0X7Q@mail.gmail.com>
 <CAMQaOgM77i-Ly3sB3r=dU8q3vLKyZSc_MJVgA7BTzwibzLUm_w@mail.gmail.com>
 <1ac23dbf-9e49-4cf6-8f59-7788364941a3@googlegroups.com>
 <839ad1cc-6e6e-465c-a824-3e891e0d413f@googlegroups.com>
 <a0995a8f-8cdb-411e-aad2-214536136615@googlegroups.com>
Message-ID: <17ba978c-e2af-4b7e-8a97-3eb6c3d1b125@googlegroups.com>

As a follow-up, if you poke around in the various support libraries you'll 
find readme files which contain some small usage examples that may be of 
interest to you 
(e.g. ~/.opam/4.00.1+short-types/build/sexplib.108.07.01/README.md).

On Monday, November 12, 2012 9:29:23 PM UTC-6, Dominick LoBraico wrote:
>
> The fact that has probably blocked that is the general vastness of Core. 
> There is an example file for the Command module included with Core I 
> believe (command-line parsing module). If there are specific areas that you 
> would like to see some clarity on I could write up some simple examples for 
> you/the community.
>
> On Monday, November 12, 2012 7:02:51 PM UTC-6, Francois Berenger wrote:
>>
>> Thanks for the command.
>>
>> In fact, it would be quite useful to have example programs for core too. 
>> I think I saw just one, while async has many.
>>
>> On Tuesday, November 13, 2012 5:20:43 AM UTC+9, Dominick LoBraico wrote:
>>>
>>> Francois,
>>>
>>> If you have ocamlfind install, this should work (for example):
>>>
>>> $ ocamlfind ocamlc -thread -package async -linkpkg hello.ml -o hello.exe
>>>
>>>
>>> On Thursday, November 8, 2012 7:01:50 PM UTC-6, Francois Berenger wrote:
>>>>
>>>> By the way, how do I compile them? 
>>>> It was my initial question. ;) 
>>>>
>>>> On Fri, Nov 9, 2012 at 10:00 AM, Francois Berenger 
>>>> <francois.ber... at gmail.com> wrote: 
>>>> > $ cd ~/.opam/system/build/async.108.07.01/examples 
>>>> > $ grep -ri jane.std * 
>>>> > bin_prot_test.ml:open Jane.Std 
>>>> > cat.ml:open Jane.Std 
>>>> > countdown.ml:open Jane.Std 
>>>> > finalizer.ml:open Jane.Std 
>>>> > monitors.ml:open Jane.Std 
>>>> > process.ml:open Jane.Std 
>>>> > process_stream.ml:open Jane.Std 
>>>> > server.ml:open Jane.Std 
>>>> > signals.ml:open Jane.Std 
>>>> > sigpipe.ml:open Jane.Std 
>>>> > socket.ml:open Jane.Std 
>>>> > sound.ml:open Jane.Std 
>>>> > write_forever.ml:open Jane.Std 
>>>> > 
>>>> > On Fri, Nov 9, 2012 at 2:02 AM, Stephen Weeks <swe... at janestreet.com> 
>>>> wrote: 
>>>> >>> Jane.Std is some internal stuff that is not exported.  We should 
>>>> fix 
>>>> >>> that example not to use it.  Which specific example is it? 
>>>> >> 
>>>> >> Many of the examples in base/async/examples unnecessarily refer to 
>>>> >> Jane.Std.  I pushed a fix internally to change them all to Core.Std. 
>>>>
>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121112/f0321459/attachment.html>

From mmatalka at gmail.com  Tue Nov 13 04:59:47 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Mon, 12 Nov 2012 23:59:47 -0500
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <a0995a8f-8cdb-411e-aad2-214536136615@googlegroups.com> (Dominick
	LoBraico's message of "Mon, 12 Nov 2012 19:29:23 -0800 (PST)")
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
	<87a9usk4fj.fsf@li195-236.members.linode.com>
	<CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>
	<CAPYVAiLMJAYKOgBtLDOj+NTihSjAXEX0=a4QUDTuS25B=z6z4g@mail.gmail.com>
	<CAMQaOgP0gZ-ADHyqJn7ZJH2tkdPXqg+jPs=N-aAvhvn_QT0X7Q@mail.gmail.com>
	<CAMQaOgM77i-Ly3sB3r=dU8q3vLKyZSc_MJVgA7BTzwibzLUm_w@mail.gmail.com>
	<1ac23dbf-9e49-4cf6-8f59-7788364941a3@googlegroups.com>
	<839ad1cc-6e6e-465c-a824-3e891e0d413f@googlegroups.com>
	<a0995a8f-8cdb-411e-aad2-214536136615@googlegroups.com>
Message-ID: <87haouumgs.fsf@li195-236.members.linode.com>


I don't know if it's still available, but the ocaml-tutorial repo from
CUFP has been handy for some things, especially sexp and binio.

What is the easiest way to contribute docs to core?  The bitbucket wiki?

/M

Dominick LoBraico <dj at lobraico.com> writes:

> The fact that has probably blocked that is the general vastness of Core. 
> There is an example file for the Command module included with Core I 
> believe (command-line parsing module). If there are specific areas that you 
> would like to see some clarity on I could write up some simple examples for 
> you/the community.
>
> On Monday, November 12, 2012 7:02:51 PM UTC-6, Francois Berenger wrote:
>>
>> Thanks for the command.
>>
>> In fact, it would be quite useful to have example programs for core too. 
>> I think I saw just one, while async has many.
>>
>> On Tuesday, November 13, 2012 5:20:43 AM UTC+9, Dominick LoBraico wrote:
>>>
>>> Francois,
>>>
>>> If you have ocamlfind install, this should work (for example):
>>>
>>> $ ocamlfind ocamlc -thread -package async -linkpkg hello.ml -o hello.exe
>>>
>>>
>>> On Thursday, November 8, 2012 7:01:50 PM UTC-6, Francois Berenger wrote:
>>>>
>>>> By the way, how do I compile them? 
>>>> It was my initial question. ;) 
>>>>
>>>> On Fri, Nov 9, 2012 at 10:00 AM, Francois Berenger 
>>>> <francois.ber... at gmail.com> wrote: 
>>>> > $ cd ~/.opam/system/build/async.108.07.01/examples 
>>>> > $ grep -ri jane.std * 
>>>> > bin_prot_test.ml:open Jane.Std 
>>>> > cat.ml:open Jane.Std 
>>>> > countdown.ml:open Jane.Std 
>>>> > finalizer.ml:open Jane.Std 
>>>> > monitors.ml:open Jane.Std 
>>>> > process.ml:open Jane.Std 
>>>> > process_stream.ml:open Jane.Std 
>>>> > server.ml:open Jane.Std 
>>>> > signals.ml:open Jane.Std 
>>>> > sigpipe.ml:open Jane.Std 
>>>> > socket.ml:open Jane.Std 
>>>> > sound.ml:open Jane.Std 
>>>> > write_forever.ml:open Jane.Std 
>>>> > 
>>>> > On Fri, Nov 9, 2012 at 2:02 AM, Stephen Weeks <swe... at janestreet.com> 
>>>> wrote: 
>>>> >>> Jane.Std is some internal stuff that is not exported.  We should fix 
>>>> >>> that example not to use it.  Which specific example is it? 
>>>> >> 
>>>> >> Many of the examples in base/async/examples unnecessarily refer to 
>>>> >> Jane.Std.  I pushed a fix internally to change them all to Core.Std. 
>>>>
>>>


From francois.berenger.working at gmail.com  Tue Nov 13 08:02:43 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Tue, 13 Nov 2012 00:02:43 -0800 (PST)
Subject: any logger in core?
In-Reply-To: <CAK=fH+gakKwvurMB5RHZpMdHA8vVh3c+gGR_-kiHrAtLhmugtQ@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
 <CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
 <117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
 <CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
 <20120714161518.GJ14582@dark.recoil.org>
 <9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
 <CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
 <004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
 <5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
 <CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
 <CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
 <CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
 <7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
 <CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
 <CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
 <CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
 <CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
 <d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>
 <CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>
 <CAK=fH+gh3MGxObP-KUPVWfDCZJk8GZhTF+S6c_ktXCuK4_wbHg@mail.gmail.com>
 <04cc5df5-105f-4f90-8769-f499596d58ed@googlegroups.com>
 <CAK=fH+gakKwvurMB5RHZpMdHA8vVh3c+gGR_-kiHrAtLhmugtQ@mail.gmail.com>
Message-ID: <a218f444-19c3-4322-b6b7-1fddc40983cc@googlegroups.com>

The choice in log levels is a little scarce.

Currently:
raw (I don't know it's level, I guess it's always printed but I may be 
wrong)
then, ordered by my intuitive notion of log priority:
debug < info < error

I'm used to:
debug < info < warn < error < fatal

So, I miss the warning and fatal log levels.
But, that's just based on my experience.

Regards,
F.

On Thursday, November 8, 2012 7:13:25 PM UTC+9, David House wrote:
>
> On Thu, Nov 8, 2012 at 3:48 AM, Francois 
> <francois.b... at gmail.com <javascript:>> wrote: 
> > I don't know where to find never_returns. 
>
> It's there if you open Core.Std. 
>
> > But the following did work (and never stop): 
>
> You need to explicitly shut down async using the shutdown function in 
> Async.Std. 
>
> > I'm affraid of open directives, I try to keep my code _very_ explicit 
> > about what it is doing and which function from which module is used 
> > (maybe because of past overexposure to some C++ code). 
>
> I think that's exactly the right approach -- I often find myself 
> making similar comments when doing code review at work. Things are 
> much easier to follow if opens are reduced, or made more local, and 
> more explicit. 
>
> That being said, I do allow myself the luxury of opening Core.Std and 
> Async.Std in most of my modules that use core / async. I find this to 
> strike a good balance between concision and explicitness. 
>
> One of the reasons is that there are very few *values* brought into 
> scope by opening Core.Std and Async.Std. This conversation has contain 
> disproportionally many: never_returns, shutdown, etc. -- an unlucky 
> coincidence! But nearly everything is squirreled away inside a module, 
> which helps a lot. (In other words, our "Pervasives" is much smaller 
> than the ocaml standard library's.) 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121113/76723680/attachment.html>

From ocaml-core at googlegroups.com  Tue Nov 13 03:24:03 2012
From: ocaml-core at googlegroups.com (ocaml-core at googlegroups.com)
Date: Tue, 13 Nov 2012 03:24:03 +0000
Subject: Moderator's spam report for ocaml-core@googlegroups.com
Message-ID: <90e6ba3fcd97205cd904ce57f3c9@google.com>


This message is being sent to you because you are a moderator of the group ocaml-core.

The following suspicious messages were sent to your group, but are being held in your moderation queue because they are classified as likely spam messages.

If you take no action, all the messages below will be discarded automatically as spam.

However, if you see any messages that are not spam below, you may approve them individually by going to:

http://groups.google.com/group/ocaml-core/pendmsg

Please do not mark this notification as spam; this is a service for group moderators. If you do not wish to receive these notifications in the future, you may change your preferences by going to:

http://groups.google.com/group/ocaml-core/manage_post


------- 1 of 1  -------
Subject: Re:Re: sending servers /.../
>From: "James Pike" <ktwphihrilkjin at imbusa.com>
Date: Nov 09 08:06AM -0800

Bulk Email Sending Servers

click here to know more

Highly Stable and Secure Bulk Email Servers

for Email Marketing

As you may already know, many ISPs have strict

Terms of Service (TOS) or Acceptable

Use Policies (AUP) against large

Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=2813174340901979896


For more information about this message, please visit:
https://support.google.com/groups/bin/answer.py?hl=en&answer=47792



From mmatalka at gmail.com  Tue Nov 13 09:27:40 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Tue, 13 Nov 2012 04:27:40 -0500
Subject: any logger in core?
In-Reply-To: <CAK=fH+jP+c8v-57To47MktUNPwB14L1kqqGXy3=p2N93ywL2RA@mail.gmail.com>
	(David House's message of "Tue, 13 Nov 2012 08:41:56 +0000")
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
	<CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
	<7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
	<CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
	<CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
	<CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
	<CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
	<d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>
	<CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>
	<CAK=fH+gh3MGxObP-KUPVWfDCZJk8GZhTF+S6c_ktXCuK4_wbHg@mail.gmail.com>
	<04cc5df5-105f-4f90-8769-f499596d58ed@googlegroups.com>
	<CAK=fH+gakKwvurMB5RHZpMdHA8vVh3c+gGR_-kiHrAtLhmugtQ@mail.gmail.com>
	<a218f444-19c3-4322-b6b7-1fddc40983cc@googlegroups.com>
	<CAK=fH+jP+c8v-57To47MktUNPwB14L1kqqGXy3=p2N93ywL2RA@mail.gmail.com>
Message-ID: <87ip99ua2b.fsf@li195-236.members.linode.com>


I agree with David.  The current logger I am using at work as 5 or 6 log
levels and I have found little value in it.  I think 'fatal' is
especially devilish since, in such a situation, your monitoring tools
should be the ones determining that.

/M

David House <dhouse at janestreet.com> writes:

> Hmm, I am surprised you want so many!
>
> I claim there is a cost in allowing tons and tons of different log
> levels. Firstly, it complicates the interface. Secondly, it leads to
> different applications choosing different logging levels for
> essentially the same errors. E.g. how do you choose whether some
> particular failure is an error, or a fatal? Isn't it likely that
> someone else will make a different choice? There are lines that you
> can draw, but it's a big grey area. Having fewer choices means that
> everyone's programs are more consistent with respect to each other.
>
> Putting it another way: three logging levels should be enough for anyone! :)
>
> On Tue, Nov 13, 2012 at 8:02 AM, Francois Berenger
> <francois.berenger.working at gmail.com> wrote:
>> The choice in log levels is a little scarce.
>>
>> Currently:
>> raw (I don't know it's level, I guess it's always printed but I may be
>> wrong)
>> then, ordered by my intuitive notion of log priority:
>> debug < info < error
>>
>> I'm used to:
>> debug < info < warn < error < fatal
>>
>> So, I miss the warning and fatal log levels.
>> But, that's just based on my experience.
>>
>> Regards,
>> F.
>>
>>
>> On Thursday, November 8, 2012 7:13:25 PM UTC+9, David House wrote:
>>>
>>> On Thu, Nov 8, 2012 at 3:48 AM, Francois
>>> <francois.b... at gmail.com> wrote:
>>> > I don't know where to find never_returns.
>>>
>>> It's there if you open Core.Std.
>>>
>>> > But the following did work (and never stop):
>>>
>>> You need to explicitly shut down async using the shutdown function in
>>> Async.Std.
>>>
>>> > I'm affraid of open directives, I try to keep my code _very_ explicit
>>> > about what it is doing and which function from which module is used
>>> > (maybe because of past overexposure to some C++ code).
>>>
>>> I think that's exactly the right approach -- I often find myself
>>> making similar comments when doing code review at work. Things are
>>> much easier to follow if opens are reduced, or made more local, and
>>> more explicit.
>>>
>>> That being said, I do allow myself the luxury of opening Core.Std and
>>> Async.Std in most of my modules that use core / async. I find this to
>>> strike a good balance between concision and explicitness.
>>>
>>> One of the reasons is that there are very few *values* brought into
>>> scope by opening Core.Std and Async.Std. This conversation has contain
>>> disproportionally many: never_returns, shutdown, etc. -- an unlucky
>>> coincidence! But nearly everything is squirreled away inside a module,
>>> which helps a lot. (In other words, our "Pervasives" is much smaller
>>> than the ocaml standard library's.)


From dhouse at janestreet.com  Tue Nov 13 08:41:56 2012
From: dhouse at janestreet.com (David House)
Date: Tue, 13 Nov 2012 08:41:56 +0000
Subject: any logger in core?
In-Reply-To: <a218f444-19c3-4322-b6b7-1fddc40983cc@googlegroups.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
	<CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
	<7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
	<CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
	<CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
	<CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
	<CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
	<d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>
	<CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>
	<CAK=fH+gh3MGxObP-KUPVWfDCZJk8GZhTF+S6c_ktXCuK4_wbHg@mail.gmail.com>
	<04cc5df5-105f-4f90-8769-f499596d58ed@googlegroups.com>
	<CAK=fH+gakKwvurMB5RHZpMdHA8vVh3c+gGR_-kiHrAtLhmugtQ@mail.gmail.com>
	<a218f444-19c3-4322-b6b7-1fddc40983cc@googlegroups.com>
Message-ID: <CAK=fH+jP+c8v-57To47MktUNPwB14L1kqqGXy3=p2N93ywL2RA@mail.gmail.com>


Hmm, I am surprised you want so many!

I claim there is a cost in allowing tons and tons of different log
levels. Firstly, it complicates the interface. Secondly, it leads to
different applications choosing different logging levels for
essentially the same errors. E.g. how do you choose whether some
particular failure is an error, or a fatal? Isn't it likely that
someone else will make a different choice? There are lines that you
can draw, but it's a big grey area. Having fewer choices means that
everyone's programs are more consistent with respect to each other.

Putting it another way: three logging levels should be enough for anyone! :)

On Tue, Nov 13, 2012 at 8:02 AM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> The choice in log levels is a little scarce.
>
> Currently:
> raw (I don't know it's level, I guess it's always printed but I may be
> wrong)
> then, ordered by my intuitive notion of log priority:
> debug < info < error
>
> I'm used to:
> debug < info < warn < error < fatal
>
> So, I miss the warning and fatal log levels.
> But, that's just based on my experience.
>
> Regards,
> F.
>
>
> On Thursday, November 8, 2012 7:13:25 PM UTC+9, David House wrote:
>>
>> On Thu, Nov 8, 2012 at 3:48 AM, Francois
>> <francois.b... at gmail.com> wrote:
>> > I don't know where to find never_returns.
>>
>> It's there if you open Core.Std.
>>
>> > But the following did work (and never stop):
>>
>> You need to explicitly shut down async using the shutdown function in
>> Async.Std.
>>
>> > I'm affraid of open directives, I try to keep my code _very_ explicit
>> > about what it is doing and which function from which module is used
>> > (maybe because of past overexposure to some C++ code).
>>
>> I think that's exactly the right approach -- I often find myself
>> making similar comments when doing code review at work. Things are
>> much easier to follow if opens are reduced, or made more local, and
>> more explicit.
>>
>> That being said, I do allow myself the luxury of opening Core.Std and
>> Async.Std in most of my modules that use core / async. I find this to
>> strike a good balance between concision and explicitness.
>>
>> One of the reasons is that there are very few *values* brought into
>> scope by opening Core.Std and Async.Std. This conversation has contain
>> disproportionally many: never_returns, shutdown, etc. -- an unlucky
>> coincidence! But nearly everything is squirreled away inside a module,
>> which helps a lot. (In other words, our "Pervasives" is much smaller
>> than the ocaml standard library's.)


From agarwal1975 at gmail.com  Tue Nov 13 13:52:39 2012
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Tue, 13 Nov 2012 08:52:39 -0500
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <87haouumgs.fsf@li195-236.members.linode.com>
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
 <87a9usk4fj.fsf@li195-236.members.linode.com> <CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>
 <CAPYVAiLMJAYKOgBtLDOj+NTihSjAXEX0=a4QUDTuS25B=z6z4g@mail.gmail.com>
 <CAMQaOgP0gZ-ADHyqJn7ZJH2tkdPXqg+jPs=N-aAvhvn_QT0X7Q@mail.gmail.com>
 <CAMQaOgM77i-Ly3sB3r=dU8q3vLKyZSc_MJVgA7BTzwibzLUm_w@mail.gmail.com>
 <1ac23dbf-9e49-4cf6-8f59-7788364941a3@googlegroups.com> <839ad1cc-6e6e-465c-a824-3e891e0d413f@googlegroups.com>
 <a0995a8f-8cdb-411e-aad2-214536136615@googlegroups.com> <87haouumgs.fsf@li195-236.members.linode.com>
Message-ID: <CAMu2m2JbeNYS6Z=Z5nL7-sfK3kW85N2qtPo6Obp7d0KSYSk06g@mail.gmail.com>

The Core/Async tutorials from 2011 and 2012 are linked below, but they
don't mention where the corresponding repos might be.

http://cufp.org/conference/sessions/2011/t2-janestreets-ocaml-core-library
http://cufp.org/conference/sessions/2012/t1-real-world-ocaml-anil-madhavapeddy-university-c



On Mon, Nov 12, 2012 at 11:59 PM, Malcolm Matalka <mmatalka at gmail.com>wrote:

> I don't know if it's still available, but the ocaml-tutorial repo from
> CUFP has been handy for some things, especially sexp and binio.
>
> What is the easiest way to contribute docs to core?  The bitbucket wiki?
>
> /M
>
> Dominick LoBraico <dj at lobraico.com> writes:
>
> > The fact that has probably blocked that is the general vastness of Core.
> > There is an example file for the Command module included with Core I
> > believe (command-line parsing module). If there are specific areas that
> you
> > would like to see some clarity on I could write up some simple examples
> for
> > you/the community.
> >
> > On Monday, November 12, 2012 7:02:51 PM UTC-6, Francois Berenger wrote:
> >>
> >> Thanks for the command.
> >>
> >> In fact, it would be quite useful to have example programs for core too.
> >> I think I saw just one, while async has many.
> >>
> >> On Tuesday, November 13, 2012 5:20:43 AM UTC+9, Dominick LoBraico wrote:
> >>>
> >>> Francois,
> >>>
> >>> If you have ocamlfind install, this should work (for example):
> >>>
> >>> $ ocamlfind ocamlc -thread -package async -linkpkg hello.ml -o
> hello.exe
> >>>
> >>>
> >>> On Thursday, November 8, 2012 7:01:50 PM UTC-6, Francois Berenger
> wrote:
> >>>>
> >>>> By the way, how do I compile them?
> >>>> It was my initial question. ;)
> >>>>
> >>>> On Fri, Nov 9, 2012 at 10:00 AM, Francois Berenger
> >>>> <francois.ber... at gmail.com> wrote:
> >>>> > $ cd ~/.opam/system/build/async.108.07.01/examples
> >>>> > $ grep -ri jane.std *
> >>>> > bin_prot_test.ml:open Jane.Std
> >>>> > cat.ml:open Jane.Std
> >>>> > countdown.ml:open Jane.Std
> >>>> > finalizer.ml:open Jane.Std
> >>>> > monitors.ml:open Jane.Std
> >>>> > process.ml:open Jane.Std
> >>>> > process_stream.ml:open Jane.Std
> >>>> > server.ml:open Jane.Std
> >>>> > signals.ml:open Jane.Std
> >>>> > sigpipe.ml:open Jane.Std
> >>>> > socket.ml:open Jane.Std
> >>>> > sound.ml:open Jane.Std
> >>>> > write_forever.ml:open Jane.Std
> >>>> >
> >>>> > On Fri, Nov 9, 2012 at 2:02 AM, Stephen Weeks <
> swe... at janestreet.com>
> >>>> wrote:
> >>>> >>> Jane.Std is some internal stuff that is not exported.  We should
> fix
> >>>> >>> that example not to use it.  Which specific example is it?
> >>>> >>
> >>>> >> Many of the examples in base/async/examples unnecessarily refer to
> >>>> >> Jane.Std.  I pushed a fix internally to change them all to
> Core.Std.
> >>>>
> >>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121113/218a442b/attachment.html>

From dhouse at janestreet.com  Tue Nov 13 09:34:03 2012
From: dhouse at janestreet.com (David House)
Date: Tue, 13 Nov 2012 09:34:03 +0000
Subject: any logger in core?
In-Reply-To: <87ip99ua2b.fsf@li195-236.members.linode.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
	<CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
	<7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
	<CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
	<CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
	<CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
	<CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
	<d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>
	<CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>
	<CAK=fH+gh3MGxObP-KUPVWfDCZJk8GZhTF+S6c_ktXCuK4_wbHg@mail.gmail.com>
	<04cc5df5-105f-4f90-8769-f499596d58ed@googlegroups.com>
	<CAK=fH+gakKwvurMB5RHZpMdHA8vVh3c+gGR_-kiHrAtLhmugtQ@mail.gmail.com>
	<a218f444-19c3-4322-b6b7-1fddc40983cc@googlegroups.com>
	<CAK=fH+jP+c8v-57To47MktUNPwB14L1kqqGXy3=p2N93ywL2RA@mail.gmail.com>
	<87ip99ua2b.fsf@li195-236.members.linode.com>
Message-ID: <CAK=fH+hz8cTcSdcw65F9CNmQ5kDs2m8NNM5O6HM98dx0P+pNjw@mail.gmail.com>


Also, there is a function for logging fatal errors. It's called failwith :)

On Tue, Nov 13, 2012 at 9:27 AM, Malcolm Matalka <mmatalka at gmail.com> wrote:
> I agree with David.  The current logger I am using at work as 5 or 6 log
> levels and I have found little value in it.  I think 'fatal' is
> especially devilish since, in such a situation, your monitoring tools
> should be the ones determining that.
>
> /M
>
> David House <dhouse at janestreet.com> writes:
>
>> Hmm, I am surprised you want so many!
>>
>> I claim there is a cost in allowing tons and tons of different log
>> levels. Firstly, it complicates the interface. Secondly, it leads to
>> different applications choosing different logging levels for
>> essentially the same errors. E.g. how do you choose whether some
>> particular failure is an error, or a fatal? Isn't it likely that
>> someone else will make a different choice? There are lines that you
>> can draw, but it's a big grey area. Having fewer choices means that
>> everyone's programs are more consistent with respect to each other.
>>
>> Putting it another way: three logging levels should be enough for anyone! :)
>>
>> On Tue, Nov 13, 2012 at 8:02 AM, Francois Berenger
>> <francois.berenger.working at gmail.com> wrote:
>>> The choice in log levels is a little scarce.
>>>
>>> Currently:
>>> raw (I don't know it's level, I guess it's always printed but I may be
>>> wrong)
>>> then, ordered by my intuitive notion of log priority:
>>> debug < info < error
>>>
>>> I'm used to:
>>> debug < info < warn < error < fatal
>>>
>>> So, I miss the warning and fatal log levels.
>>> But, that's just based on my experience.
>>>
>>> Regards,
>>> F.
>>>
>>>
>>> On Thursday, November 8, 2012 7:13:25 PM UTC+9, David House wrote:
>>>>
>>>> On Thu, Nov 8, 2012 at 3:48 AM, Francois
>>>> <francois.b... at gmail.com> wrote:
>>>> > I don't know where to find never_returns.
>>>>
>>>> It's there if you open Core.Std.
>>>>
>>>> > But the following did work (and never stop):
>>>>
>>>> You need to explicitly shut down async using the shutdown function in
>>>> Async.Std.
>>>>
>>>> > I'm affraid of open directives, I try to keep my code _very_ explicit
>>>> > about what it is doing and which function from which module is used
>>>> > (maybe because of past overexposure to some C++ code).
>>>>
>>>> I think that's exactly the right approach -- I often find myself
>>>> making similar comments when doing code review at work. Things are
>>>> much easier to follow if opens are reduced, or made more local, and
>>>> more explicit.
>>>>
>>>> That being said, I do allow myself the luxury of opening Core.Std and
>>>> Async.Std in most of my modules that use core / async. I find this to
>>>> strike a good balance between concision and explicitness.
>>>>
>>>> One of the reasons is that there are very few *values* brought into
>>>> scope by opening Core.Std and Async.Std. This conversation has contain
>>>> disproportionally many: never_returns, shutdown, etc. -- an unlucky
>>>> coincidence! But nearly everything is squirreled away inside a module,
>>>> which helps a lot. (In other words, our "Pervasives" is much smaller
>>>> than the ocaml standard library's.)


From francois.berenger.working at gmail.com  Wed Nov 14 01:40:42 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Tue, 13 Nov 2012 17:40:42 -0800 (PST)
Subject: any logger in core?
In-Reply-To: <CAK=fH+hz8cTcSdcw65F9CNmQ5kDs2m8NNM5O6HM98dx0P+pNjw@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
 <20120714161518.GJ14582@dark.recoil.org>
 <9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
 <CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
 <004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
 <5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
 <CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
 <CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
 <CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
 <7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
 <CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
 <CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
 <CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
 <CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
 <d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>
 <CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>
 <CAK=fH+gh3MGxObP-KUPVWfDCZJk8GZhTF+S6c_ktXCuK4_wbHg@mail.gmail.com>
 <04cc5df5-105f-4f90-8769-f499596d58ed@googlegroups.com>
 <CAK=fH+gakKwvurMB5RHZpMdHA8vVh3c+gGR_-kiHrAtLhmugtQ@mail.gmail.com>
 <a218f444-19c3-4322-b6b7-1fddc40983cc@googlegroups.com>
 <CAK=fH+jP+c8v-57To47MktUNPwB14L1kqqGXy3=p2N93ywL2RA@mail.gmail.com>
 <87ip99ua2b.fsf@li195-236.members.linode.com>
 <CAK=fH+hz8cTcSdcw65F9CNmQ5kDs2m8NNM5O6HM98dx0P+pNjw@mail.gmail.com>
Message-ID: <79ae5b51-0ccb-436c-8a3c-ddfe82e43978@googlegroups.com>

On Tuesday, November 13, 2012 6:34:05 PM UTC+9, David House wrote:
>
> Also, there is a function for logging fatal errors. It's called failwith 
> :) 
>

failwith messages do not come with a timestamp. 

>
> On Tue, Nov 13, 2012 at 9:27 AM, Malcolm Matalka <mmat... at gmail.com<javascript:>> 
> wrote: 
> > I agree with David.  The current logger I am using at work as 5 or 6 log 
> > levels and I have found little value in it.  I think 'fatal' is 
> > especially devilish since, in such a situation, your monitoring tools 
> > should be the ones determining that. 
> > 
> > /M 
> > 
> > David House <dho... at janestreet.com <javascript:>> writes: 
> > 
> >> Hmm, I am surprised you want so many! 
> >> 
> >> I claim there is a cost in allowing tons and tons of different log 
> >> levels. Firstly, it complicates the interface. Secondly, it leads to 
> >> different applications choosing different logging levels for 
> >> essentially the same errors. E.g. how do you choose whether some 
> >> particular failure is an error, or a fatal? Isn't it likely that 
> >> someone else will make a different choice? There are lines that you 
> >> can draw, but it's a big grey area. Having fewer choices means that 
> >> everyone's programs are more consistent with respect to each other. 
> >> 
> >> Putting it another way: three logging levels should be enough for 
> anyone! :) 
> >> 
> >> On Tue, Nov 13, 2012 at 8:02 AM, Francois Berenger 
> >> <francois.ber... at gmail.com <javascript:>> wrote: 
> >>> The choice in log levels is a little scarce. 
> >>> 
> >>> Currently: 
> >>> raw (I don't know it's level, I guess it's always printed but I may be 
> >>> wrong) 
> >>> then, ordered by my intuitive notion of log priority: 
> >>> debug < info < error 
> >>> 
> >>> I'm used to: 
> >>> debug < info < warn < error < fatal 
> >>> 
> >>> So, I miss the warning and fatal log levels. 
> >>> But, that's just based on my experience. 
> >>> 
> >>> Regards, 
> >>> F. 
> >>> 
> >>> 
> >>> On Thursday, November 8, 2012 7:13:25 PM UTC+9, David House wrote: 
> >>>> 
> >>>> On Thu, Nov 8, 2012 at 3:48 AM, Francois 
> >>>> <francois.b... at gmail.com> wrote: 
> >>>> > I don't know where to find never_returns. 
> >>>> 
> >>>> It's there if you open Core.Std. 
> >>>> 
> >>>> > But the following did work (and never stop): 
> >>>> 
> >>>> You need to explicitly shut down async using the shutdown function in 
> >>>> Async.Std. 
> >>>> 
> >>>> > I'm affraid of open directives, I try to keep my code _very_ 
> explicit 
> >>>> > about what it is doing and which function from which module is used 
> >>>> > (maybe because of past overexposure to some C++ code). 
> >>>> 
> >>>> I think that's exactly the right approach -- I often find myself 
> >>>> making similar comments when doing code review at work. Things are 
> >>>> much easier to follow if opens are reduced, or made more local, and 
> >>>> more explicit. 
> >>>> 
> >>>> That being said, I do allow myself the luxury of opening Core.Std and 
> >>>> Async.Std in most of my modules that use core / async. I find this to 
> >>>> strike a good balance between concision and explicitness. 
> >>>> 
> >>>> One of the reasons is that there are very few *values* brought into 
> >>>> scope by opening Core.Std and Async.Std. This conversation has 
> contain 
> >>>> disproportionally many: never_returns, shutdown, etc. -- an unlucky 
> >>>> coincidence! But nearly everything is squirreled away inside a 
> module, 
> >>>> which helps a lot. (In other words, our "Pervasives" is much smaller 
> >>>> than the ocaml standard library's.) 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121113/5e7a0fc0/attachment.html>

From francois.berenger.working at gmail.com  Wed Nov 14 01:44:35 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Tue, 13 Nov 2012 17:44:35 -0800 (PST)
Subject: any logger in core?
In-Reply-To: <CAK=fH+jP+c8v-57To47MktUNPwB14L1kqqGXy3=p2N93ywL2RA@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
 <CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
 <117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
 <CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
 <20120714161518.GJ14582@dark.recoil.org>
 <9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
 <CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
 <004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
 <5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
 <CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
 <CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
 <CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
 <7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
 <CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
 <CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
 <CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
 <CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
 <d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>
 <CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>
 <CAK=fH+gh3MGxObP-KUPVWfDCZJk8GZhTF+S6c_ktXCuK4_wbHg@mail.gmail.com>
 <04cc5df5-105f-4f90-8769-f499596d58ed@googlegroups.com>
 <CAK=fH+gakKwvurMB5RHZpMdHA8vVh3c+gGR_-kiHrAtLhmugtQ@mail.gmail.com>
 <a218f444-19c3-4322-b6b7-1fddc40983cc@googlegroups.com>
 <CAK=fH+jP+c8v-57To47MktUNPwB14L1kqqGXy3=p2N93ywL2RA@mail.gmail.com>
Message-ID: <31722a84-930c-4909-825b-644508e57734@googlegroups.com>



On Tuesday, November 13, 2012 5:43:01 PM UTC+9, David House wrote:
>
> Hmm, I am surprised you want so many! 
>
> I claim there is a cost in allowing tons and tons of different log 
> levels. Firstly, it complicates the interface. Secondly, it leads to 
> different applications choosing different logging levels for 
> essentially the same errors. E.g. how do you choose whether some 
> particular failure is an error, or a fatal?


After a fatal error, the program cannot continue anymore.
Think about a "fatal injury".
I see a grey zone between warn and error, but I think
programmers are usually smart and can be trusted.

Isn't it likely that 
> someone else will make a different choice? There are lines that you 
> can draw, but it's a big grey area. Having fewer choices means that 
> everyone's programs are more consistent with respect to each other. 
>

I agree it's a grey zone.
But the current choice is drastic.
 

>
> Putting it another way: three logging levels should be enough for anyone! 
> :) 
>
> On Tue, Nov 13, 2012 at 8:02 AM, Francois Berenger 
> <francois.ber... at gmail.com <javascript:>> wrote: 
> > The choice in log levels is a little scarce. 
> > 
> > Currently: 
> > raw (I don't know it's level, I guess it's always printed but I may be 
> > wrong) 
> > then, ordered by my intuitive notion of log priority: 
> > debug < info < error 
> > 
> > I'm used to: 
> > debug < info < warn < error < fatal 
> > 
> > So, I miss the warning and fatal log levels. 
> > But, that's just based on my experience. 
> > 
> > Regards, 
> > F. 
> > 
> > 
> > On Thursday, November 8, 2012 7:13:25 PM UTC+9, David House wrote: 
> >> 
> >> On Thu, Nov 8, 2012 at 3:48 AM, Francois 
> >> <francois.b... at gmail.com> wrote: 
> >> > I don't know where to find never_returns. 
> >> 
> >> It's there if you open Core.Std. 
> >> 
> >> > But the following did work (and never stop): 
> >> 
> >> You need to explicitly shut down async using the shutdown function in 
> >> Async.Std. 
> >> 
> >> > I'm affraid of open directives, I try to keep my code _very_ explicit 
> >> > about what it is doing and which function from which module is used 
> >> > (maybe because of past overexposure to some C++ code). 
> >> 
> >> I think that's exactly the right approach -- I often find myself 
> >> making similar comments when doing code review at work. Things are 
> >> much easier to follow if opens are reduced, or made more local, and 
> >> more explicit. 
> >> 
> >> That being said, I do allow myself the luxury of opening Core.Std and 
> >> Async.Std in most of my modules that use core / async. I find this to 
> >> strike a good balance between concision and explicitness. 
> >> 
> >> One of the reasons is that there are very few *values* brought into 
> >> scope by opening Core.Std and Async.Std. This conversation has contain 
> >> disproportionally many: never_returns, shutdown, etc. -- an unlucky 
> >> coincidence! But nearly everything is squirreled away inside a module, 
> >> which helps a lot. (In other words, our "Pervasives" is much smaller 
> >> than the ocaml standard library's.) 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121113/ccb7ae2d/attachment.html>

From francois.berenger.working at gmail.com  Wed Nov 14 03:58:27 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Tue, 13 Nov 2012 19:58:27 -0800 (PST)
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <a0995a8f-8cdb-411e-aad2-214536136615@googlegroups.com>
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
 <87a9usk4fj.fsf@li195-236.members.linode.com>
 <CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>
 <CAPYVAiLMJAYKOgBtLDOj+NTihSjAXEX0=a4QUDTuS25B=z6z4g@mail.gmail.com>
 <CAMQaOgP0gZ-ADHyqJn7ZJH2tkdPXqg+jPs=N-aAvhvn_QT0X7Q@mail.gmail.com>
 <CAMQaOgM77i-Ly3sB3r=dU8q3vLKyZSc_MJVgA7BTzwibzLUm_w@mail.gmail.com>
 <1ac23dbf-9e49-4cf6-8f59-7788364941a3@googlegroups.com>
 <839ad1cc-6e6e-465c-a824-3e891e0d413f@googlegroups.com>
 <a0995a8f-8cdb-411e-aad2-214536136615@googlegroups.com>
Message-ID: <066357a1-20fc-4fb6-9a4c-bccf2e85638e@googlegroups.com>

On Tuesday, November 13, 2012 12:29:23 PM UTC+9, Dominick LoBraico wrote:
>
> The fact that has probably blocked that is the general vastness of Core. 
> There is an example file for the Command module included with Core I 
> believe (command-line parsing module). If there are specific areas that you 
> would like to see some clarity on I could write up some simple examples for 
> you/the community.
>

I gave it some thorough thought, that's why I did not reply right away.

1) definitively target the community, not just me, whatever I ask. I may be
    a marginal user of both core and OCaml (I'm in academia in structural
    biology / computer aided drug design, definitively not the mainstream
    typical OCaml user).

2) I think some code example (compiling and working) using the error monad 
would
    be nice. I would like more of my complex code to not be cluttered with 
error-
    handling so that it is easier to reason about (and write).

3) Anything that's very different from what is in the OCaml std library 
might
    be worth some code example, for example core's hash tables.
    I know sometime there is some "bla bla" in wikis / text files, but 
working and
    compiling code examples are invaluable.
    If you read a lot of UNIX manpages, you will understand this in your 
guts:
    no matter the amount of "bla bla", no matter who wrote it,
    no matter how well it is written,
    examples are _always_ invaluable (yes, some people will only read
    and use the examples and nothing from the documentation,
    but that's the problem of this kind of user).

Best regards,
Francois.


> On Monday, November 12, 2012 7:02:51 PM UTC-6, Francois Berenger wrote:
>>
>> Thanks for the command.
>>
>> In fact, it would be quite useful to have example programs for core too. 
>> I think I saw just one, while async has many.
>>
>> On Tuesday, November 13, 2012 5:20:43 AM UTC+9, Dominick LoBraico wrote:
>>>
>>> Francois,
>>>
>>> If you have ocamlfind install, this should work (for example):
>>>
>>> $ ocamlfind ocamlc -thread -package async -linkpkg hello.ml -o hello.exe
>>>
>>>
>>> On Thursday, November 8, 2012 7:01:50 PM UTC-6, Francois Berenger wrote:
>>>>
>>>> By the way, how do I compile them? 
>>>> It was my initial question. ;) 
>>>>
>>>> On Fri, Nov 9, 2012 at 10:00 AM, Francois Berenger 
>>>> <francois.ber... at gmail.com> wrote: 
>>>> > $ cd ~/.opam/system/build/async.108.07.01/examples 
>>>> > $ grep -ri jane.std * 
>>>> > bin_prot_test.ml:open Jane.Std 
>>>> > cat.ml:open Jane.Std 
>>>> > countdown.ml:open Jane.Std 
>>>> > finalizer.ml:open Jane.Std 
>>>> > monitors.ml:open Jane.Std 
>>>> > process.ml:open Jane.Std 
>>>> > process_stream.ml:open Jane.Std 
>>>> > server.ml:open Jane.Std 
>>>> > signals.ml:open Jane.Std 
>>>> > sigpipe.ml:open Jane.Std 
>>>> > socket.ml:open Jane.Std 
>>>> > sound.ml:open Jane.Std 
>>>> > write_forever.ml:open Jane.Std 
>>>> > 
>>>> > On Fri, Nov 9, 2012 at 2:02 AM, Stephen Weeks <swe... at janestreet.com> 
>>>> wrote: 
>>>> >>> Jane.Std is some internal stuff that is not exported.  We should 
>>>> fix 
>>>> >>> that example not to use it.  Which specific example is it? 
>>>> >> 
>>>> >> Many of the examples in base/async/examples unnecessarily refer to 
>>>> >> Jane.Std.  I pushed a fix internally to change them all to Core.Std. 
>>>>
>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121113/35d2bba6/attachment.html>

From francois.berenger.working at gmail.com  Wed Nov 14 05:10:11 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Tue, 13 Nov 2012 21:10:11 -0800 (PST)
Subject: my experience at porting some code to core
Message-ID: <8672a57f-2032-47c9-9d22-fc3f1112a4c4@googlegroups.com>

Hi,

The project is about 3k LoC, one man.
I removed dependency to batteries, the standard library and
some ugly macros I had for logging.

I had to:
- add a lot of labels
- use Float.XXX instead of *float* from the std lib
- code BatString.tail
- code BatString.starts_with
- code a kind of BatOption.get
- do a lot of code re-reading to make sure I preserve semantic

I'm starting a new project, so I am OK to break things,
I just want all things to compile for the moment.
There will be some scientific validation of the results later on.

I didn't adopt core's Hashtbl yet.
A little because I am lazy, a little because I am annoyed
by some signature changes (for example: find) that would force me
to update a lot of my code.

It was not so funny to do but I hope it will pay-off in the future.
I started this on Monday and was about 60% of the time on it.
I might start to use labels more in my own code.

I already miss the ocamldoc from batteries, which is quite complete
and nice.

The most difficult part is code re-reading I think.
Sometimes also, compiler parsing errors because of missing labels
are not so trivial to understand.

Regards,
F.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121113/f9ffd621/attachment.html>

From ogunden at phauna.org  Wed Nov 14 05:18:20 2012
From: ogunden at phauna.org (Owen Gunden)
Date: Wed, 14 Nov 2012 00:18:20 -0500
Subject: my experience at porting some code to core
In-Reply-To: <8672a57f-2032-47c9-9d22-fc3f1112a4c4@googlegroups.com>
References: <8672a57f-2032-47c9-9d22-fc3f1112a4c4@googlegroups.com>
Message-ID: <CA+LP8rTRvwNDR9=_WdTbQzc6R5GEJhueMKAX+0kDTSpj6dwX-Q@mail.gmail.com>

On Wed, Nov 14, 2012 at 12:10 AM, Francois Berenger <
francois.berenger.working at gmail.com> wrote:

> - code BatString.tail
>

String.drop_prefix


> - code BatString.starts_with
>

String.is_prefix
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121114/600fe4db/attachment.html>

From dj at lobraico.com  Wed Nov 14 06:48:55 2012
From: dj at lobraico.com (Dominick LoBraico)
Date: Wed, 14 Nov 2012 00:48:55 -0600
Subject: my experience at porting some code to core
In-Reply-To: <8672a57f-2032-47c9-9d22-fc3f1112a4c4@googlegroups.com>
References: <8672a57f-2032-47c9-9d22-fc3f1112a4c4@googlegroups.com>
Message-ID: <68A74BB74C374371AC9D2975F54D00DF@lobraico.com>



On Tuesday, November 13, 2012 at 11:10 PM, Francois Berenger wrote:

> Hi,
> 
> The project is about 3k LoC, one man.
> I removed dependency to batteries, the standard library and
> some ugly macros I had for logging.
> 
> I had to:
> - add a lot of labels
> - use Float.XXX instead of *float* from the std lib
> - code BatString.tail
> - code BatString.starts_with
Option.value or Option.value_exn 
> - code a kind of BatOption.get
> - do a lot of code re-reading to make sure I preserve semantic
> 
> I'm starting a new project, so I am OK to break things,
> I just want all things to compile for the moment.
> There will be some scientific validation of the results later on.
> 
> I didn't adopt core's Hashtbl yet.
> A little because I am lazy, a little because I am annoyed
> by some signature changes (for example: find) that would force me
> to update a lot of my code.
> 
> It was not so funny to do but I hope it will pay-off in the future.
> I started this on Monday and was about 60% of the time on it.
> I might start to use labels more in my own code.
> 
You know that you can generate ocamldoc documentation for most/all of the core and async libraries right? E.g.:

$ cd ~/.opam/4.00.1+short-types/build/core.108.07.01
$ make doc 

Additionally, some of this is also hosted online, generated as recently as 8 October: https://ocaml.janestreet.com/ocaml-core/latest/doc/
> I already miss the ocamldoc from batteries, which is quite complete
> and nice.
> 
> The most difficult part is code re-reading I think.
> Sometimes also, compiler parsing errors because of missing labels
> are not so trivial to understand.
> 
> Regards,
> F.
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121114/075619a5/attachment.html>

From yminsky at janestreet.com  Thu Nov 15 03:09:34 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Wed, 14 Nov 2012 22:09:34 -0500
Subject: my experience at porting some code to core
In-Reply-To: <8672a57f-2032-47c9-9d22-fc3f1112a4c4@googlegroups.com>
References: <8672a57f-2032-47c9-9d22-fc3f1112a4c4@googlegroups.com>
Message-ID: <CACLX4jTeegR_-YFuVtxOHUgmRB6yE_-MeGcbd-8Pkd=xABDV3A@mail.gmail.com>


The docs are available here:

https://ocaml.janestreet.com/ocaml-core/108.07.01/doc/

and come out with each new release.  They're not perfect, but they're there.

On Wed, Nov 14, 2012 at 12:10 AM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> Hi,
>
> The project is about 3k LoC, one man.
> I removed dependency to batteries, the standard library and
> some ugly macros I had for logging.
>
> I had to:
> - add a lot of labels
> - use Float.XXX instead of *float* from the std lib
> - code BatString.tail
> - code BatString.starts_with
> - code a kind of BatOption.get
> - do a lot of code re-reading to make sure I preserve semantic
>
> I'm starting a new project, so I am OK to break things,
> I just want all things to compile for the moment.
> There will be some scientific validation of the results later on.
>
> I didn't adopt core's Hashtbl yet.
> A little because I am lazy, a little because I am annoyed
> by some signature changes (for example: find) that would force me
> to update a lot of my code.
>
> It was not so funny to do but I hope it will pay-off in the future.
> I started this on Monday and was about 60% of the time on it.
> I might start to use labels more in my own code.
>
> I already miss the ocamldoc from batteries, which is quite complete
> and nice.
>
> The most difficult part is code re-reading I think.
> Sometimes also, compiler parsing errors because of missing labels
> are not so trivial to understand.
>
> Regards,
> F.
>


From francois.berenger.working at gmail.com  Fri Nov 16 02:33:26 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 15 Nov 2012 18:33:26 -0800 (PST)
Subject: Int.of_string failure
Message-ID: <23c13afe-692e-4763-9766-2d61b681fa2a@googlegroups.com>

(also true for Caml.int_of_string):

The following work:
# Float.of_string "    3.12";;
- : Core.Std.Float.t = 3.12
# Float.of_string "3.12";;
- : Core.Std.Float.t = 3.12
Int.of_string "3";;
- : Core.Std.Int.t = 3

The following does not:
Int.of_string " 3";;
Exception: (Failure "Int.of_string: \" 3\"").

I don't understand why. Bug?

I guess a scanf will work. But I think Int.of_string should work too.

Regards,
F.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121115/a39e8670/attachment.html>

From francois.berenger.working at gmail.com  Fri Nov 16 02:45:40 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 15 Nov 2012 18:45:40 -0800 (PST)
Subject: Int.of_string failure
In-Reply-To: <23c13afe-692e-4763-9766-2d61b681fa2a@googlegroups.com>
References: <23c13afe-692e-4763-9766-2d61b681fa2a@googlegroups.com>
Message-ID: <615d7557-878a-41eb-9e20-beab5edf02bd@googlegroups.com>



On Friday, November 16, 2012 11:33:26 AM UTC+9, Francois Berenger wrote:
>
> (also true for Caml.int_of_string):
>
> The following work:
> # Float.of_string "    3.12";;
> - : Core.Std.Float.t = 3.12
> # Float.of_string "3.12";;
> - : Core.Std.Float.t = 3.12
> Int.of_string "3";;
> - : Core.Std.Int.t = 3
>
> The following does not:
> Int.of_string " 3";;
> Exception: (Failure "Int.of_string: \" 3\"").
>
> I don't understand why. Bug?
>
> I guess a scanf will work.


I guessed wrong:
# Scanf.sscanf " 123" "%d" (fun i -> i);;
Exception:
(Scanf.Scan_failure
 "scanf: bad input at char number 0: ``character ' ' is not a decimal 
digit''").
 

> But I think Int.of_string should work too.
>
> Regards,
> F.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121115/d20655e9/attachment.html>

From dj at lobraico.com  Fri Nov 16 05:56:53 2012
From: dj at lobraico.com (Dominick LoBraico)
Date: Thu, 15 Nov 2012 21:56:53 -0800 (PST)
Subject: Int.of_string failure
In-Reply-To: <615d7557-878a-41eb-9e20-beab5edf02bd@googlegroups.com>
References: <23c13afe-692e-4763-9766-2d61b681fa2a@googlegroups.com>
 <615d7557-878a-41eb-9e20-beab5edf02bd@googlegroups.com>
Message-ID: <d44ce33a-804d-4b94-aaf9-33160aeed0f7@googlegroups.com>

String.strip

On Thursday, November 15, 2012 8:45:41 PM UTC-6, Francois Berenger wrote:
>
>
>
> On Friday, November 16, 2012 11:33:26 AM UTC+9, Francois Berenger wrote:
>>
>> (also true for Caml.int_of_string):
>>
>> The following work:
>> # Float.of_string "    3.12";;
>> - : Core.Std.Float.t = 3.12
>> # Float.of_string "3.12";;
>> - : Core.Std.Float.t = 3.12
>> Int.of_string "3";;
>> - : Core.Std.Int.t = 3
>>
>> The following does not:
>> Int.of_string " 3";;
>> Exception: (Failure "Int.of_string: \" 3\"").
>>
>> I don't understand why. Bug?
>>
>> I guess a scanf will work.
>
>
> I guessed wrong:
> # Scanf.sscanf " 123" "%d" (fun i -> i);;
> Exception:
> (Scanf.Scan_failure
>  "scanf: bad input at char number 0: ``character ' ' is not a decimal 
> digit''").
>  
>
>> But I think Int.of_string should work too.
>>
>> Regards,
>> F.
>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121115/87425649/attachment.html>

From francois.berenger.working at gmail.com  Mon Nov 19 06:41:05 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Sun, 18 Nov 2012 22:41:05 -0800 (PST)
Subject: Any modification to .mli files when using core?
Message-ID: <6eabb2eb-71ec-4a85-94f0-d80e126ac20d@googlegroups.com>

Hello,

All my .ml files now have a 'open Core.Std' at the top.

Should I put something at the top of all my .mli files?

Thanks a lot,
F.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121118/6402426e/attachment.html>

From anil at recoil.org  Mon Nov 19 00:32:27 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Mon, 19 Nov 2012 00:32:27 +0000
Subject: OPAM dev repo updated for 108.08.00-pre0
Message-ID: <CAEE8CC3-0785-4880-9FAD-90A597D48A32@recoil.org>


I've pushed the package descriptions for 108.08.00-pre0 to this repo:
https://github.com/avsm/opam-core-pre0

...if anyone else also wants to test it. You can do so via:

$ opam remote -add coredev git://github.com/avsm/opam-core-pre0
$ opam update
$ opam upgrade

There's also a clone.sh script in there which clones an existing
version and rewrites the URLs to the new version, to make it easier
to generate the boilerplate for future versions.

-anil


From mmatalka at gmail.com  Mon Nov 19 06:54:23 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Mon, 19 Nov 2012 01:54:23 -0500
Subject: Any modification to .mli files when using core?
In-Reply-To: <6eabb2eb-71ec-4a85-94f0-d80e126ac20d@googlegroups.com> (Francois
	Berenger's message of "Sun, 18 Nov 2012 22:41:05 -0800 (PST)")
References: <6eabb2eb-71ec-4a85-94f0-d80e126ac20d@googlegroups.com>
Message-ID: <878v9ygk0w.fsf@li195-236.members.linode.com>


I use open Core.Std in .mli files if they reference something in it.

Francois Berenger <francois.berenger.working at gmail.com> writes:

> Hello,
>
> All my .ml files now have a 'open Core.Std' at the top.
>
> Should I put something at the top of all my .mli files?
>
> Thanks a lot,
> F.


From markus.mottl at gmail.com  Mon Nov 19 17:23:32 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Mon, 19 Nov 2012 12:23:32 -0500
Subject: Cross-module inlining fails
Message-ID: <CAP_800raC7hZobXKzK+zL6AZTyThSMWSph7_jBPZ7WHCNZckoQ@mail.gmail.com>


Hi,

I've noticed that cross-module inlining does not work with the
Opam-installed Core library, because the .cmx file is not installed.
Note that it is not enough to install the .cmxa file, because it is
only used during linking.  The compiler wouldn't know where to look
for optimization information.

Looking at the setup.ml file generated by Oasis, it seems that Oasis
is the culprit, but I thought it would be important to know for other
Core users if they experience bad performance.

Sylvain, is there anything one has to put in the _oasis file to
generate correct installation code?  My guess is that all that's
needed is to fix setup.ml by installing the .cmx of packing targets
(e.g. core.cmx), not just .cmx files for constituents of unpacked
libraries, which seem to be handled correctly.

Regards,
Markus

-- 
Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com


From agarwal1975 at gmail.com  Mon Nov 19 17:32:05 2012
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Mon, 19 Nov 2012 12:32:05 -0500
Subject: old links to docs
Message-ID: <CAMu2m2JXxRePv-a3OG7jB7-uGjWeudRa0orDibFDzi25vDcsaw@mail.gmail.com>

The current link to Core documentation is:
https://ocaml.janestreet.com/ocaml-core/

So the links below are obsolete. Might be good to remove them from your
server to avoid google search directing people to the wrong place.

http://www.janestreet.com/ocaml/janestreet-ocamldocs/
http://www.janestreet.com/ocaml/doc/core/
http://www.janestreet.com/ocaml/doc/core_extended/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121119/0c0ea3ed/attachment.html>

From yury.sulsky at gmail.com  Mon Nov 19 18:04:06 2012
From: yury.sulsky at gmail.com (Yury Sulsky)
Date: Mon, 19 Nov 2012 13:04:06 -0500
Subject: old links to docs
In-Reply-To: <CAMu2m2JXxRePv-a3OG7jB7-uGjWeudRa0orDibFDzi25vDcsaw@mail.gmail.com>
References: <CAMu2m2JXxRePv-a3OG7jB7-uGjWeudRa0orDibFDzi25vDcsaw@mail.gmail.com>
Message-ID: <CAEDxudwwn3nH5BxT6930LtchR9gVMaXmkFhnQeE0u3hm07YwZg@mail.gmail.com>

Done, thanks for the heads up!


On Mon, Nov 19, 2012 at 12:32 PM, Ashish Agarwal <agarwal1975 at gmail.com>wrote:

> The current link to Core documentation is:
> https://ocaml.janestreet.com/ocaml-core/
>
> So the links below are obsolete. Might be good to remove them from your
> server to avoid google search directing people to the wrong place.
>
> http://www.janestreet.com/ocaml/janestreet-ocamldocs/
> http://www.janestreet.com/ocaml/doc/core/
> http://www.janestreet.com/ocaml/doc/core_extended/
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121119/b30d6302/attachment.html>

From markus.mottl at gmail.com  Mon Nov 19 18:16:55 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Mon, 19 Nov 2012 13:16:55 -0500
Subject: Cross-module inlining fails
In-Reply-To: <CAOCAUGOQTYZPLrgPimDuOFZBHOVkr92dFsaCbA4ewcbO4JaQwg@mail.gmail.com>
References: <CAP_800raC7hZobXKzK+zL6AZTyThSMWSph7_jBPZ7WHCNZckoQ@mail.gmail.com>
	<CAOCAUGOQTYZPLrgPimDuOFZBHOVkr92dFsaCbA4ewcbO4JaQwg@mail.gmail.com>
Message-ID: <CAP_800rU0d4b0FuGewHf5kMep_G8Bj09Q_F+YkLHe9ZnJ-cJqg@mail.gmail.com>


On Mon, Nov 19, 2012 at 1:00 PM, Sylvain Le Gall <sylvain at le-gall.net> wrote:
> Well, .cmx file should be installed EXCEPT if you are using packed
> modules...

The .cmx files of _submodules_ should not be installed for packed
libraries, this is correct, but the (single) .cmx file resulting from
packing should be installed for packed libraries.

> The culprit is:
> (not lib.lib_pack) && (* Do not install .cmx packed submodules *)
> in src/oasis/OASISLibrary.ml

This is the location of the likely bug.  My modification to setup.ml
below is completely untested and may not even compile, but the idea is
probably right:

    (* The .cmx that be compiled along *)
    let cmxs =
      let should_be_built =
          match bs.bs_compiled_object with
          | Native -> true
          | Best -> is_native
          | Byte -> false
      in
        if should_be_built then
          if lib.lib_pack then [ cs.cs_name ^ ".cmx" ]
          else
            find_modules
              (lib.lib_modules @ lib.lib_internal_modules)
              "cmx"
        else
          []
    in

> You can experiment installing .cmx by commenting this line. But I am really
> not sure this will help that much. I thought that .cmxs was a pack of .cmx
> so that inlining can work using what is inside this archive (contrary to
> .cmxa).
>
> Maybe the inlining using .cmxs doesn't work as excepted ?

.cmxs files are used for dynamic linking and are hence the "dynamic
brother" of .cmxa files.  Cross-module inlining, however, is done
during compilation, not linking.  It can only be done if the ".cmx"
files of modules referenced from the currently compiled file are
visible.  .cmxa and .cmxs files are completely ignored during
compilation.

Regards,
Markus

-- 
Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com


From vgatien-baron at janestreet.com  Mon Nov 19 18:23:17 2012
From: vgatien-baron at janestreet.com (Valentin Gatien-Baron)
Date: Mon, 19 Nov 2012 13:23:17 -0500
Subject: Cross-module inlining fails
In-Reply-To: <CAOCAUGOQTYZPLrgPimDuOFZBHOVkr92dFsaCbA4ewcbO4JaQwg@mail.gmail.com>
References: <CAP_800raC7hZobXKzK+zL6AZTyThSMWSph7_jBPZ7WHCNZckoQ@mail.gmail.com>
	<CAOCAUGOQTYZPLrgPimDuOFZBHOVkr92dFsaCbA4ewcbO4JaQwg@mail.gmail.com>
Message-ID: <CAFd54qMr=Bg-sx+YCh65uSJePDCOYAFOGtjFCqmxpgKbEKD_kg@mail.gmail.com>


Not all cmx's should be installed, but I don't see why the packed cmx
should not be installed. Generally speaking, I think packed cmx's are
not special and every cmx that was given to ocamlopt to build the cmxa
should be installed.

cmxs are for dynamic loading, so that's not related.

On 11/19/12, Sylvain Le Gall <sylvain at le-gall.net> wrote:
> Hi,
>
>
> 2012/11/19 Markus Mottl <markus.mottl at gmail.com>
>
>> Hi,
>>
>> I've noticed that cross-module inlining does not work with the
>> Opam-installed Core library, because the .cmx file is not installed.
>> Note that it is not enough to install the .cmxa file, because it is
>> only used during linking.  The compiler wouldn't know where to look
>> for optimization information.
>>
>> Looking at the setup.ml file generated by Oasis, it seems that Oasis
>> is the culprit, but I thought it would be important to know for other
>> Core users if they experience bad performance.
>>
>> Sylvain, is there anything one has to put in the _oasis file to
>> generate correct installation code?  My guess is that all that's
>> needed is to fix setup.ml by installing the .cmx of packing targets
>> (e.g. core.cmx), not just .cmx files for constituents of unpacked
>> libraries, which seem to be handled correctly.
>>
>
> Well, .cmx file should be installed EXCEPT if you are using packed
> modules...
>
> The culprit is:
> (not lib.lib_pack) && (* Do not install .cmx packed submodules *)
> in src/oasis/OASISLibrary.ml
>
> AFAIK, Core use pack module, so this is the reason why it doesn't install
> .cmx.
>
> You can experiment installing .cmx by commenting this line. But I am really
> not sure this will help that much. I thought that .cmxs was a pack of .cmx
> so that inlining can work using what is inside this archive (contrary to
> .cmxa).
>
> Maybe the inlining using .cmxs doesn't work as excepted ?
>
>
>> Regards,
>> Markus
>>
>> --
>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>>
>


From markus.mottl at gmail.com  Mon Nov 19 18:31:05 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Mon, 19 Nov 2012 13:31:05 -0500
Subject: [OASIS-devel] Cross-module inlining fails
In-Reply-To: <CAOCAUGP42yM3yZJUS6sVxhwf_ODV1nvpujqmAdTPzzs-1LX5RA@mail.gmail.com>
References: <CAP_800raC7hZobXKzK+zL6AZTyThSMWSph7_jBPZ7WHCNZckoQ@mail.gmail.com>
	<CAOCAUGOQTYZPLrgPimDuOFZBHOVkr92dFsaCbA4ewcbO4JaQwg@mail.gmail.com>
	<CAOCAUGP42yM3yZJUS6sVxhwf_ODV1nvpujqmAdTPzzs-1LX5RA@mail.gmail.com>
Message-ID: <CAP_800onpMdBjPGtBr0hSSJFLAWrbL2BNWhPLqDesTFTAW0QEQ@mail.gmail.com>


On Mon, Nov 19, 2012 at 1:16 PM, Sylvain Le Gall <sylvain at le-gall.net> wrote:
> Second thought on this, exposing .cmx in a packed library is dangerous.
> Because single compilation are supposed to be accessed using Foo.Util, where
> foo is the pack. If you expose utils.cmx you will cause compilation errors
> for programs that uses themself module Utils. So exposing .cmx of a pack is
> kind of the contrary to what pack has been designed for. But maybe i miss
> something here.

Lets consider an example.  Lets assume you want to pack modules A and
B into a packed library module Foo.  Compiling A and B will generate
"a.cmx" and "b.cmx".  Packing A and B into Foo will then generate a
file "foo.cmx".  This "foo.cmx" file should be installed along with
the "foo.cmi", "foo.cmxa", and "foo.a" file after library creation.
It contains the information required for cross-module inlining.

Neither "a.cmx" nor "b.cmx" should be installed, because the user
cannot access these in their code if only "foo.cmi" (rather than
"a.cmi" and "b.cmi") is visible, as it should be.

So the resulting contents of the installation directory is: foo.cmi,
foo.cmx, foo.cmxa, foo.a.

Note that "foo.a" contains the machine code of the non-inlined
functions, whereas "foo.cmxa" only tells the linker how to resolve
calls to this code.  "foo.cmx", however, contains a code
representation suitable for inlining during compilation of other
modules.  It is entirely possible that linking with the ".cmxa" and
".a" file is basically a no-op for your program, because it may have
gotten all it needs from the ".cmx" file during compilation and
inlined it.

Regards,
Markus

-- 
Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com


From markus.mottl at gmail.com  Mon Nov 19 18:31:39 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Mon, 19 Nov 2012 13:31:39 -0500
Subject: Cross-module inlining fails
In-Reply-To: <CAFd54qMr=Bg-sx+YCh65uSJePDCOYAFOGtjFCqmxpgKbEKD_kg@mail.gmail.com>
References: <CAP_800raC7hZobXKzK+zL6AZTyThSMWSph7_jBPZ7WHCNZckoQ@mail.gmail.com>
	<CAOCAUGOQTYZPLrgPimDuOFZBHOVkr92dFsaCbA4ewcbO4JaQwg@mail.gmail.com>
	<CAFd54qMr=Bg-sx+YCh65uSJePDCOYAFOGtjFCqmxpgKbEKD_kg@mail.gmail.com>
Message-ID: <CAP_800qfJt=2+yPMisJ8ny+mUOuuLZVtLdJmaFmFbMrCgbOTNg@mail.gmail.com>


On Mon, Nov 19, 2012 at 1:23 PM, Valentin Gatien-Baron
<vgatien-baron at janestreet.com> wrote:
> Not all cmx's should be installed, but I don't see why the packed cmx
> should not be installed. Generally speaking, I think packed cmx's are
> not special and every cmx that was given to ocamlopt to build the cmxa
> should be installed.
>
> cmxs are for dynamic loading, so that's not related.

This is correct.

-- 
Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com


From sylvain at le-gall.net  Mon Nov 19 18:00:17 2012
From: sylvain at le-gall.net (Sylvain Le Gall)
Date: Mon, 19 Nov 2012 19:00:17 +0100
Subject: Cross-module inlining fails
In-Reply-To: <CAP_800raC7hZobXKzK+zL6AZTyThSMWSph7_jBPZ7WHCNZckoQ@mail.gmail.com>
References: <CAP_800raC7hZobXKzK+zL6AZTyThSMWSph7_jBPZ7WHCNZckoQ@mail.gmail.com>
Message-ID: <CAOCAUGOQTYZPLrgPimDuOFZBHOVkr92dFsaCbA4ewcbO4JaQwg@mail.gmail.com>

Hi,


2012/11/19 Markus Mottl <markus.mottl at gmail.com>

> Hi,
>
> I've noticed that cross-module inlining does not work with the
> Opam-installed Core library, because the .cmx file is not installed.
> Note that it is not enough to install the .cmxa file, because it is
> only used during linking.  The compiler wouldn't know where to look
> for optimization information.
>
> Looking at the setup.ml file generated by Oasis, it seems that Oasis
> is the culprit, but I thought it would be important to know for other
> Core users if they experience bad performance.
>
> Sylvain, is there anything one has to put in the _oasis file to
> generate correct installation code?  My guess is that all that's
> needed is to fix setup.ml by installing the .cmx of packing targets
> (e.g. core.cmx), not just .cmx files for constituents of unpacked
> libraries, which seem to be handled correctly.
>

Well, .cmx file should be installed EXCEPT if you are using packed
modules...

The culprit is:
(not lib.lib_pack) && (* Do not install .cmx packed submodules *)
in src/oasis/OASISLibrary.ml

AFAIK, Core use pack module, so this is the reason why it doesn't install
.cmx.

You can experiment installing .cmx by commenting this line. But I am really
not sure this will help that much. I thought that .cmxs was a pack of .cmx
so that inlining can work using what is inside this archive (contrary to
.cmxa).

Maybe the inlining using .cmxs doesn't work as excepted ?


> Regards,
> Markus
>
> --
> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121119/157b462c/attachment.html>

From ocaml-core at googlegroups.com  Tue Nov 20 02:49:54 2012
From: ocaml-core at googlegroups.com (ocaml-core at googlegroups.com)
Date: Tue, 20 Nov 2012 02:49:54 +0000
Subject: Moderator's spam report for ocaml-core@googlegroups.com
Message-ID: <90e6ba5bc847e86e6a04cee44909@google.com>


This message is being sent to you because you are a moderator of the group ocaml-core.

The following suspicious messages were sent to your group, but are being held in your moderation queue because they are classified as likely spam messages.

If you take no action, all the messages below will be discarded automatically as spam.

However, if you see any messages that are not spam below, you may approve them individually by going to:

http://groups.google.com/group/ocaml-core/pendmsg

Please do not mark this notification as spam; this is a service for group moderators. If you do not wish to receive these notifications in the future, you may change your preferences by going to:

http://groups.google.com/group/ocaml-core/manage_post


------- 1 of 1  -------
Subject: Re: Cross-module inlining fails
>From: Sylvain Le Gall <sylvain at le-gall.net>
Date: Nov 19 07:16PM +0100

>> (e.g. core.cmx), not just .cmx files for constituents of unpacked
>> libraries, which seem to be handled correctly.

> Well, .cmx file should be installed EXCEPT if you are using packed
modules...
> (not lib.lib_pack) && (* Do not install

Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=5195793415094116291


For more information about this message, please visit:
https://support.google.com/groups/bin/answer.py?hl=en&answer=47792



From sylvain at le-gall.net  Tue Nov 20 09:31:39 2012
From: sylvain at le-gall.net (Sylvain Le Gall)
Date: Tue, 20 Nov 2012 10:31:39 +0100
Subject: Cross-module inlining fails
In-Reply-To: <CAFd54qMr=Bg-sx+YCh65uSJePDCOYAFOGtjFCqmxpgKbEKD_kg@mail.gmail.com>
References: <CAP_800raC7hZobXKzK+zL6AZTyThSMWSph7_jBPZ7WHCNZckoQ@mail.gmail.com>
	<CAOCAUGOQTYZPLrgPimDuOFZBHOVkr92dFsaCbA4ewcbO4JaQwg@mail.gmail.com>
	<CAFd54qMr=Bg-sx+YCh65uSJePDCOYAFOGtjFCqmxpgKbEKD_kg@mail.gmail.com>
Message-ID: <CAOCAUGPOoo_CH-HZ8f4Kj6ZktBgU=8NBJToGjkuZNO=RmvHKFQ@mail.gmail.com>

2012/11/19 Valentin Gatien-Baron <vgatien-baron at janestreet.com>

> Not all cmx's should be installed, but I don't see why the packed cmx
> should not be installed. Generally speaking, I think packed cmx's are
> not special and every cmx that was given to ocamlopt to build the cmxa
> should be installed.
>
> cmxs are for dynamic loading, so that's not related.
>
>
Noted, it will be in the next version of OASIS. I'll ping you when it lands
in the github repository.


> On 11/19/12, Sylvain Le Gall <sylvain at le-gall.net> wrote:
> > Hi,
> >
> >
> > 2012/11/19 Markus Mottl <markus.mottl at gmail.com>
> >
> >> Hi,
> >>
> >> I've noticed that cross-module inlining does not work with the
> >> Opam-installed Core library, because the .cmx file is not installed.
> >> Note that it is not enough to install the .cmxa file, because it is
> >> only used during linking.  The compiler wouldn't know where to look
> >> for optimization information.
> >>
> >> Looking at the setup.ml file generated by Oasis, it seems that Oasis
> >> is the culprit, but I thought it would be important to know for other
> >> Core users if they experience bad performance.
> >>
> >> Sylvain, is there anything one has to put in the _oasis file to
> >> generate correct installation code?  My guess is that all that's
> >> needed is to fix setup.ml by installing the .cmx of packing targets
> >> (e.g. core.cmx), not just .cmx files for constituents of unpacked
> >> libraries, which seem to be handled correctly.
> >>
> >
> > Well, .cmx file should be installed EXCEPT if you are using packed
> > modules...
> >
> > The culprit is:
> > (not lib.lib_pack) && (* Do not install .cmx packed submodules *)
> > in src/oasis/OASISLibrary.ml
> >
> > AFAIK, Core use pack module, so this is the reason why it doesn't install
> > .cmx.
> >
> > You can experiment installing .cmx by commenting this line. But I am
> really
> > not sure this will help that much. I thought that .cmxs was a pack of
> .cmx
> > so that inlining can work using what is inside this archive (contrary to
> > .cmxa).
> >
> > Maybe the inlining using .cmxs doesn't work as excepted ?
> >
> >
> >> Regards,
> >> Markus
> >>
> >> --
> >> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
> >>
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121120/7c1035a2/attachment.html>

From francois.berenger.working at gmail.com  Wed Nov 21 08:00:39 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Wed, 21 Nov 2012 00:00:39 -0800 (PST)
Subject: some small example using s-expressions
Message-ID: <3ba2523f-4ed4-4708-9831-6b4ff3207293@googlegroups.com>

Hello,

I am looking for some introduction to using s-expressions.

A small and simple example would be enough
for me to get started:

I'd like to know:
- what to change in my code to enable them (just add ' with sexp' after 
some type declaration?)
- what to change in my build system to enable them (I use oasis)

Thanks a lot,
Francois.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121121/ac4b9e56/attachment.html>

From mmatalka at gmail.com  Wed Nov 21 08:31:41 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Wed, 21 Nov 2012 03:31:41 -0500
Subject: some small example using s-expressions
In-Reply-To: <3ba2523f-4ed4-4708-9831-6b4ff3207293@googlegroups.com> (Francois
	Berenger's message of "Wed, 21 Nov 2012 00:00:39 -0800 (PST)")
References: <3ba2523f-4ed4-4708-9831-6b4ff3207293@googlegroups.com>
Message-ID: <87sj83cq6q.fsf@li195-236.members.linode.com>


https://github.com/avsm/ocaml-tutorial/tree/master/examples/broker

Francois Berenger <francois.berenger.working at gmail.com> writes:

> Hello,
>
> I am looking for some introduction to using s-expressions.
>
> A small and simple example would be enough
> for me to get started:
>
> I'd like to know:
> - what to change in my code to enable them (just add ' with sexp' after 
> some type declaration?)
> - what to change in my build system to enable them (I use oasis)
>
> Thanks a lot,
> Francois.


From mmatalka at gmail.com  Wed Nov 21 09:38:31 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Wed, 21 Nov 2012 04:38:31 -0500
Subject: some small example using s-expressions
In-Reply-To: <CAK=fH+jaZCdSBuG4bEJedTNbmGrUtupaKyYnrm9SDaCYXtZgKA@mail.gmail.com>
	(David House's message of "Wed, 21 Nov 2012 09:31:51 +0000")
References: <3ba2523f-4ed4-4708-9831-6b4ff3207293@googlegroups.com>
	<87sj83cq6q.fsf@li195-236.members.linode.com>
	<CAK=fH+jaZCdSBuG4bEJedTNbmGrUtupaKyYnrm9SDaCYXtZgKA@mail.gmail.com>
Message-ID: <87boercn3c.fsf@li195-236.members.linode.com>


Is that for Async? What if I'm in the synchronous world?  I've been
using Sexp.of_string and Sexp.to_string_hum, is that correct?

/M

David House <dhouse at janestreet.com> writes:

> I'm not sure about the build side, but the usage is very simple. You
> do indeed just say "with sexp" on every type you want to be sexpable,
> in both the .ml and .mli.
>
> You will then have two new functions:
>
> t_of_sexp : Sexp.t -> t
> sexp_of_t : t -> Sexp.t
>
> (Replace "t" with the name of your type throughout.)
>
> You can use these with, e.g., Writer.write_sexp(s), Reader.load_sexp(s).
>
> On Wed, Nov 21, 2012 at 8:31 AM, Malcolm Matalka <mmatalka at gmail.com> wrote:
>> https://github.com/avsm/ocaml-tutorial/tree/master/examples/broker
>>
>> Francois Berenger <francois.berenger.working at gmail.com> writes:
>>
>>> Hello,
>>>
>>> I am looking for some introduction to using s-expressions.
>>>
>>> A small and simple example would be enough
>>> for me to get started:
>>>
>>> I'd like to know:
>>> - what to change in my code to enable them (just add ' with sexp' after
>>> some type declaration?)
>>> - what to change in my build system to enable them (I use oasis)
>>>
>>> Thanks a lot,
>>> Francois.


From dhouse at janestreet.com  Wed Nov 21 09:31:51 2012
From: dhouse at janestreet.com (David House)
Date: Wed, 21 Nov 2012 09:31:51 +0000
Subject: some small example using s-expressions
In-Reply-To: <87sj83cq6q.fsf@li195-236.members.linode.com>
References: <3ba2523f-4ed4-4708-9831-6b4ff3207293@googlegroups.com>
	<87sj83cq6q.fsf@li195-236.members.linode.com>
Message-ID: <CAK=fH+jaZCdSBuG4bEJedTNbmGrUtupaKyYnrm9SDaCYXtZgKA@mail.gmail.com>


I'm not sure about the build side, but the usage is very simple. You
do indeed just say "with sexp" on every type you want to be sexpable,
in both the .ml and .mli.

You will then have two new functions:

t_of_sexp : Sexp.t -> t
sexp_of_t : t -> Sexp.t

(Replace "t" with the name of your type throughout.)

You can use these with, e.g., Writer.write_sexp(s), Reader.load_sexp(s).

On Wed, Nov 21, 2012 at 8:31 AM, Malcolm Matalka <mmatalka at gmail.com> wrote:
> https://github.com/avsm/ocaml-tutorial/tree/master/examples/broker
>
> Francois Berenger <francois.berenger.working at gmail.com> writes:
>
>> Hello,
>>
>> I am looking for some introduction to using s-expressions.
>>
>> A small and simple example would be enough
>> for me to get started:
>>
>> I'd like to know:
>> - what to change in my code to enable them (just add ' with sexp' after
>> some type declaration?)
>> - what to change in my build system to enable them (I use oasis)
>>
>> Thanks a lot,
>> Francois.


From dhouse at janestreet.com  Wed Nov 21 09:45:39 2012
From: dhouse at janestreet.com (David House)
Date: Wed, 21 Nov 2012 09:45:39 +0000
Subject: some small example using s-expressions
In-Reply-To: <87boercn3c.fsf@li195-236.members.linode.com>
References: <3ba2523f-4ed4-4708-9831-6b4ff3207293@googlegroups.com>
	<87sj83cq6q.fsf@li195-236.members.linode.com>
	<CAK=fH+jaZCdSBuG4bEJedTNbmGrUtupaKyYnrm9SDaCYXtZgKA@mail.gmail.com>
	<87boercn3c.fsf@li195-236.members.linode.com>
Message-ID: <CAK=fH+hBwEZpXLTUQ=Vd4uLL0OZCN0wF23mNVzMPhRc_E36QJw@mail.gmail.com>


Sure.

On Wed, Nov 21, 2012 at 9:38 AM, Malcolm Matalka <mmatalka at gmail.com> wrote:
> Is that for Async? What if I'm in the synchronous world?  I've been
> using Sexp.of_string and Sexp.to_string_hum, is that correct?
>
> /M
>
> David House <dhouse at janestreet.com> writes:
>
>> I'm not sure about the build side, but the usage is very simple. You
>> do indeed just say "with sexp" on every type you want to be sexpable,
>> in both the .ml and .mli.
>>
>> You will then have two new functions:
>>
>> t_of_sexp : Sexp.t -> t
>> sexp_of_t : t -> Sexp.t
>>
>> (Replace "t" with the name of your type throughout.)
>>
>> You can use these with, e.g., Writer.write_sexp(s), Reader.load_sexp(s).
>>
>> On Wed, Nov 21, 2012 at 8:31 AM, Malcolm Matalka <mmatalka at gmail.com> wrote:
>>> https://github.com/avsm/ocaml-tutorial/tree/master/examples/broker
>>>
>>> Francois Berenger <francois.berenger.working at gmail.com> writes:
>>>
>>>> Hello,
>>>>
>>>> I am looking for some introduction to using s-expressions.
>>>>
>>>> A small and simple example would be enough
>>>> for me to get started:
>>>>
>>>> I'd like to know:
>>>> - what to change in my code to enable them (just add ' with sexp' after
>>>> some type declaration?)
>>>> - what to change in my build system to enable them (I use oasis)
>>>>
>>>> Thanks a lot,
>>>> Francois.


From agarwal1975 at gmail.com  Wed Nov 21 15:24:02 2012
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Wed, 21 Nov 2012 10:24:02 -0500
Subject: some small example using s-expressions
In-Reply-To: <3ba2523f-4ed4-4708-9831-6b4ff3207293@googlegroups.com>
References: <3ba2523f-4ed4-4708-9831-6b4ff3207293@googlegroups.com>
Message-ID: <CAMu2m2KcOsbvtnoAPff810_d0GF2eV-2=vnnQR84WyjtFMO7WQ@mail.gmail.com>

In _oasis, add sexplib.syntax to BuildDepends.

Make your _tags file like this:

$ cat _tags
# OASIS_START
# OASIS_STOP

<.ml{,i}>: syntax_camlp4o

Then, create some type defs:

$ cat a.ml
type t = A | B of int
with sexp

And similarly add "with sexp" in your .mli files if you want the sexp
converters available in the interface. You'll get extra functions t_of_sexp
and sexp_of_t. Biocaml does this, so you can see that code for an example.

On Wed, Nov 21, 2012 at 3:00 AM, Francois Berenger <
francois.berenger.working at gmail.com> wrote:

> Hello,
>
> I am looking for some introduction to using s-expressions.
>
> A small and simple example would be enough
> for me to get started:
>
> I'd like to know:
> - what to change in my code to enable them (just add ' with sexp' after
> some type declaration?)
> - what to change in my build system to enable them (I use oasis)
>
> Thanks a lot,
> Francois.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121121/10203650/attachment.html>

From francois.berenger.working at gmail.com  Thu Nov 22 00:24:00 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 22 Nov 2012 09:24:00 +0900
Subject: some small example using s-expressions
In-Reply-To: <CAMu2m2KcOsbvtnoAPff810_d0GF2eV-2=vnnQR84WyjtFMO7WQ@mail.gmail.com>
References: <3ba2523f-4ed4-4708-9831-6b4ff3207293@googlegroups.com>
	<CAMu2m2KcOsbvtnoAPff810_d0GF2eV-2=vnnQR84WyjtFMO7WQ@mail.gmail.com>
Message-ID: <CAMQaOgOWoTu5pf94Z1Wd6E7ER5tzCe9jEqQbTmg4XdGu1HxZDA@mail.gmail.com>


Thanks for all the answers!
It helps a lot, really,

My use case will be to have some kind of property file for my project
(as in the Java world) by using s-expressions.

On Thu, Nov 22, 2012 at 12:24 AM, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
> In _oasis, add sexplib.syntax to BuildDepends.
>
> Make your _tags file like this:
>
> $ cat _tags
> # OASIS_START
> # OASIS_STOP
>
> <.ml{,i}>: syntax_camlp4o
>
> Then, create some type defs:
>
> $ cat a.ml
> type t = A | B of int
> with sexp
>
> And similarly add "with sexp" in your .mli files if you want the sexp
> converters available in the interface. You'll get extra functions t_of_sexp
> and sexp_of_t. Biocaml does this, so you can see that code for an example.
>
> On Wed, Nov 21, 2012 at 3:00 AM, Francois Berenger
> <francois.berenger.working at gmail.com> wrote:
>>
>> Hello,
>>
>> I am looking for some introduction to using s-expressions.
>>
>> A small and simple example would be enough
>> for me to get started:
>>
>> I'd like to know:
>> - what to change in my code to enable them (just add ' with sexp' after
>> some type declaration?)
>> - what to change in my build system to enable them (I use oasis)
>>
>> Thanks a lot,
>> Francois.
>>
>


From ocaml-core at googlegroups.com  Fri Nov 23 02:29:15 2012
From: ocaml-core at googlegroups.com (ocaml-core at googlegroups.com)
Date: Fri, 23 Nov 2012 02:29:15 +0000
Subject: Moderator's spam report for ocaml-core@googlegroups.com
Message-ID: <20cf303f6e988fa77004cf205977@google.com>


This message is being sent to you because you are a moderator of the group ocaml-core.

The following suspicious messages were sent to your group, but are being held in your moderation queue because they are classified as likely spam messages.

If you take no action, all the messages below will be discarded automatically as spam.

However, if you see any messages that are not spam below, you may approve them individually by going to:

http://groups.google.com/group/ocaml-core/pendmsg

Please do not mark this notification as spam; this is a service for group moderators. If you do not wish to receive these notifications in the future, you may change your preferences by going to:

http://groups.google.com/group/ocaml-core/manage_post


------- 1 of 2  -------
Subject: Rush!! iPad Cases for only $9.95 save 87% +++
>From: "Kristy Mclean" <hzviwytr at ignitiontechnologies.com>
Date: Nov 20 11:02PM -0800

Today's Deal

Rush!! iPad Cases for only $9.95 save 87%

Purchase Now

Price: $9.95 Value: $79.95

Savings: Save an amazing $70.00

Expires on 1:17pm Sunday 28th November 2012

Deal Details

Fine Print:

Just email us your colours to

Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=5540509541654205595

------- 2 of 2  -------
Subject: Help Jerusalem Fight Terror ! ! !
>From: "Julianne Bowman" <cyyafv at syscon-inc.com>
Date: Nov 22 01:43AM -0800

How Fatima Started Islam

A book like no other on this earth. Not a few cartoons or an infantile movie trailer but 234 page novel which insults Islam like no other. A parody of the always drunk proprietor of "Mohammad's Saloon & Brothel" with his

Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=446044800716414685


For more information about this message, please visit:
https://support.google.com/groups/bin/answer.py?hl=en&answer=47792



From johan.mazel at gmail.com  Mon Nov 26 07:43:29 2012
From: johan.mazel at gmail.com (Johan Mazel)
Date: Sun, 25 Nov 2012 23:43:29 -0800 (PST)
Subject: How to create the IntSet type with core?
In-Reply-To: <CAK=fH+igEs7PpDAuw6XBoVxzMTEDnY0iFeZo+MM3QK-2LZ_=bA@mail.gmail.com>
References: <6c9ce151-b434-4fcc-89c6-83b64fddbfb9@googlegroups.com>
 <CAK=fH+igEs7PpDAuw6XBoVxzMTEDnY0iFeZo+MM3QK-2LZ_=bA@mail.gmail.com>
Message-ID: <d820b4c8-dfda-4576-9523-0cd36e3651c0@googlegroups.com>

I tried to create some submodule as explained in the second paragraph:
"module T = struct
  type t = ... with compare, sexp
  let hash = (* your hash function, maybe Hashtbl.hash *)
end
include Comparable.Make(T)
include Hashable.Make(T)"

I however get some syntax error with "with".
Is there some special tricks involved in terms of compilation 
(preprocessing maybe) ?

Le vendredi 9 novembre 2012 18:11:14 UTC+9, David House a ?crit :
>
> There is already an Int.Set module! :) 
>
> Here is a five-minute guide to the set / map / hashtable setup inside 
> core. I'll use the example of hashtables, but the language readily 
> translates into sets / maps. 
>
> There are two types of hashtables in core. Ones that use polymorphic 
> comparison, and ones that use a specific comparision function that is 
> hopefully more efficient and has non-surprising semantics (we 
> basically think polymorphic comparison, despite its convenience, is 
> too surprising to be an overall good thing). 
>
> The type of hashtables using polymorphic comparison is ('key, 'value) 
> Hashtbl.Poly.t. The type of hashtables using, e.g., int comparison for 
> the keys is 'value Int.Table.t. Given the previous paragraph, you 
> should always try to use Foo.Table when you can. 
>
> When you create a hashtable (e.g. using [create], [of_alist], or 
> [t_of_sexp]), you must use the specific module name. I.e. [let table = 
> Int.Table.create () in]. However, when you already have a hashtable in 
> your hands, and you want to use accessor functions, you should just 
> use Hashtbl.foo, regardless of what comparison function it uses. 
>
> To translate into Maps and Sets: 
>
> 'value Foo.Table.t  ('key,'value) Hashtbl.Poly.t  Hashtbl.foo 
> 'value Foo.Map.t    ('key,'value) Map.Poly.t      Map.foo 
> Foo.Set.t           'element Set.Poly.t           Set.foo 
>
> -- 
>
> If you have your own type and want to make Table, Map and Set 
> submodules, it's really easy: 
>
> module T = struct 
>   type t = ... with compare, sexp 
>   let hash = (* your hash function, maybe Hashtbl.hash *) 
> end 
> include Comparable.Make(T) 
> include Hashable.Make(T) 
>
> Saying "with compare" generates you an efficient comparison function 
> specialised to your type. (Note that all component types need to have 
> comparison functions defined too, whether through "with compare" or 
> through primitives.) The Comparable.Make functor adds in modules to 
> make you satisfy the Comparable.S signature (basically the Set and Map 
> modules, and a few more). The Hashable.Make functor adds in modules to 
> make you satisfy Hashable.S (basically Hashtbl, as well as some others 
> like Hash_set). If you don't want the Hashable stuff, there is no need 
> to define a hash function. (Although Hashtbl.hash is normally not a 
> bad choice.) 
>
> -- 
>
> Here's how this all works under the hood: 
>
> The type of maps is "really" ('key, 'value, 'comparator) Map.t. Maps 
> contain in their values the function that is used for comparing keys, 
> i.e. a function of type 'key -> 'key -> int. But what is this 
> "comparator" thing? 
>
> We can first motivate things by saying: it's a pain to have to type 
> Int.Map.find for int-maps, String.Map.find for string-maps, etc. etc. 
> It'd be nice to have a single type and use Map.find for everything. 
> But this presents a problem because of functions like Map.merge, which 
> takes two maps and combines them. You need to know that the comparison 
> functions are identical, but how can you do this? 
>
> So we have this extra comparator phantom type. Nothing in the actual 
> representation has a type involving 'comparator: it's just for static 
> checking. If you want to have a new comparison function, you must mint 
> a new comparator type. (Including the Comparable signature does this 
> for you.) 
>
> I originally wrote this last section with hashtables in mind, but it 
> appears that hashtables work slightly differently: they just assert 
> that the hashing functions are physically equal inside [merge]; you 
> don't get a compile-time error for something like [Hashtbl.merge 
> (Int.Table.create ()) (String.Table.create ())]. 
>
> On Fri, Nov 9, 2012 at 8:14 AM, Francois Berenger 
> <francois.ber... at gmail.com <javascript:>> wrote: 
> > Hello, 
> > 
> > I'm converting some standard code to use core. 
> > 
> > How do I do this in core: 
> > 
> > module IntSet = 
> >   Set.Make 
> >     (struct 
> >       let compare = Pervasives.compare 
> >       type t = int 
> >     end) 
> > 
> > Thanks a lot, 
> > F. 
> > 
> > PS: yes, I opened Core.Std and did not die from it. ;) 
> > 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121125/f64f8aba/attachment.html>

From philippe.veber at gmail.com  Mon Nov 26 08:57:25 2012
From: philippe.veber at gmail.com (Philippe Veber)
Date: Mon, 26 Nov 2012 09:57:25 +0100
Subject: How to create the IntSet type with core?
In-Reply-To: <d820b4c8-dfda-4576-9523-0cd36e3651c0@googlegroups.com>
References: <6c9ce151-b434-4fcc-89c6-83b64fddbfb9@googlegroups.com>
 <CAK=fH+igEs7PpDAuw6XBoVxzMTEDnY0iFeZo+MM3QK-2LZ_=bA@mail.gmail.com> <d820b4c8-dfda-4576-9523-0cd36e3651c0@googlegroups.com>
Message-ID: <CAOOOohQxuKbLCemHHJ5CXW36ryr36iFK=_NRoOb-bnqpY6twcA@mail.gmail.com>

Hi Johan,

yes, you have to trigger camlp4o during compilation and add the sexp.syntax
and comparelib.syntax packages I guess. How exactly you achieve that
depends on the way you compile your program. With ocamlfind, you'd have
something like

ocamlfind ocamlc -o rien -syntax camlp4o -package sexplib.syntax -package
comparelib.syntax rien.ml

cheers,
  ph.

2012/11/26 Johan Mazel <johan.mazel at gmail.com>

> I tried to create some submodule as explained in the second paragraph:
>
> "module T = struct
>   type t = ... with compare, sexp
>   let hash = (* your hash function, maybe Hashtbl.hash *)
> end
> include Comparable.Make(T)
> include Hashable.Make(T)"
>
> I however get some syntax error with "with".
> Is there some special tricks involved in terms of compilation
> (preprocessing maybe) ?
>
> Le vendredi 9 novembre 2012 18:11:14 UTC+9, David House a ?crit :
>>
>> There is already an Int.Set module! :)
>>
>> Here is a five-minute guide to the set / map / hashtable setup inside
>> core. I'll use the example of hashtables, but the language readily
>> translates into sets / maps.
>>
>> There are two types of hashtables in core. Ones that use polymorphic
>> comparison, and ones that use a specific comparision function that is
>> hopefully more efficient and has non-surprising semantics (we
>> basically think polymorphic comparison, despite its convenience, is
>> too surprising to be an overall good thing).
>>
>> The type of hashtables using polymorphic comparison is ('key, 'value)
>> Hashtbl.Poly.t. The type of hashtables using, e.g., int comparison for
>> the keys is 'value Int.Table.t. Given the previous paragraph, you
>> should always try to use Foo.Table when you can.
>>
>> When you create a hashtable (e.g. using [create], [of_alist], or
>> [t_of_sexp]), you must use the specific module name. I.e. [let table =
>> Int.Table.create () in]. However, when you already have a hashtable in
>> your hands, and you want to use accessor functions, you should just
>> use Hashtbl.foo, regardless of what comparison function it uses.
>>
>> To translate into Maps and Sets:
>>
>> 'value Foo.Table.t  ('key,'value) Hashtbl.Poly.t  Hashtbl.foo
>> 'value Foo.Map.t    ('key,'value) Map.Poly.t      Map.foo
>> Foo.Set.t           'element Set.Poly.t           Set.foo
>>
>> --
>>
>> If you have your own type and want to make Table, Map and Set
>> submodules, it's really easy:
>>
>> module T = struct
>>   type t = ... with compare, sexp
>>   let hash = (* your hash function, maybe Hashtbl.hash *)
>> end
>> include Comparable.Make(T)
>> include Hashable.Make(T)
>>
>> Saying "with compare" generates you an efficient comparison function
>> specialised to your type. (Note that all component types need to have
>> comparison functions defined too, whether through "with compare" or
>> through primitives.) The Comparable.Make functor adds in modules to
>> make you satisfy the Comparable.S signature (basically the Set and Map
>> modules, and a few more). The Hashable.Make functor adds in modules to
>> make you satisfy Hashable.S (basically Hashtbl, as well as some others
>> like Hash_set). If you don't want the Hashable stuff, there is no need
>> to define a hash function. (Although Hashtbl.hash is normally not a
>> bad choice.)
>>
>> --
>>
>> Here's how this all works under the hood:
>>
>> The type of maps is "really" ('key, 'value, 'comparator) Map.t. Maps
>> contain in their values the function that is used for comparing keys,
>> i.e. a function of type 'key -> 'key -> int. But what is this
>> "comparator" thing?
>>
>> We can first motivate things by saying: it's a pain to have to type
>> Int.Map.find for int-maps, String.Map.find for string-maps, etc. etc.
>> It'd be nice to have a single type and use Map.find for everything.
>> But this presents a problem because of functions like Map.merge, which
>> takes two maps and combines them. You need to know that the comparison
>> functions are identical, but how can you do this?
>>
>> So we have this extra comparator phantom type. Nothing in the actual
>> representation has a type involving 'comparator: it's just for static
>> checking. If you want to have a new comparison function, you must mint
>> a new comparator type. (Including the Comparable signature does this
>> for you.)
>>
>> I originally wrote this last section with hashtables in mind, but it
>> appears that hashtables work slightly differently: they just assert
>> that the hashing functions are physically equal inside [merge]; you
>> don't get a compile-time error for something like [Hashtbl.merge
>> (Int.Table.create ()) (String.Table.create ())].
>>
>> On Fri, Nov 9, 2012 at 8:14 AM, Francois Berenger
>> <francois.ber...@**gmail.com> wrote:
>> > Hello,
>> >
>> > I'm converting some standard code to use core.
>> >
>> > How do I do this in core:
>> >
>> > module IntSet =
>> >   Set.Make
>> >     (struct
>> >       let compare = Pervasives.compare
>> >       type t = int
>> >     end)
>> >
>> > Thanks a lot,
>> > F.
>> >
>> > PS: yes, I opened Core.Std and did not die from it. ;)
>> >
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121126/1a3d1db3/attachment.html>

From mmatalka at gmail.com  Tue Nov 27 20:27:16 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Tue, 27 Nov 2012 15:27:16 -0500
Subject: Result monad
Message-ID: <87wqx6vljv.fsf@li195-236.members.linode.com>


I've been playing with writing code that can fail in a lot of ways and
using Result.Monad_infix to make it more readable.  I've found that this
only really works well if all of my functions that return a Result.t
have polymorphic variants on the Error side.  Is this the suggested best
practice as well?  I'm considering just mandating all my code that can
return a Result.t does this.

Thanks,
/Malcolm


From nlinger at janestreet.com  Tue Nov 27 20:34:35 2012
From: nlinger at janestreet.com (Nathan Linger)
Date: Tue, 27 Nov 2012 15:34:35 -0500
Subject: Result monad
In-Reply-To: <87wqx6vljv.fsf@li195-236.members.linode.com>
References: <87wqx6vljv.fsf@li195-236.members.linode.com>
Message-ID: <CAB1twEaFWMJ5LpFE75B=wT9oNa4f8rQ8sLp3fJ6XfhUoGXAwEw@mail.gmail.com>


We've found that the pattern you mention works well in cases where you
want to recover from errors or handle distinct error cases in
different ways.

We've also found that often one merely wants to log errors and not
really handle them.  For this use case, Error.t is a good choice for
the error type component of Result.t.  In fact this is so common we
now use [type 'a Or_error.t = ('a, Error.t) Result.t] for many (most?)
Result-returning functions.

On Tue, Nov 27, 2012 at 3:27 PM, Malcolm Matalka <mmatalka at gmail.com> wrote:
> I've been playing with writing code that can fail in a lot of ways and
> using Result.Monad_infix to make it more readable.  I've found that this
> only really works well if all of my functions that return a Result.t
> have polymorphic variants on the Error side.  Is this the suggested best
> practice as well?  I'm considering just mandating all my code that can
> return a Result.t does this.
>
> Thanks,
> /Malcolm


From sebastien.mondet at gmail.com  Tue Nov 27 20:50:10 2012
From: sebastien.mondet at gmail.com (Sebastien Mondet)
Date: Tue, 27 Nov 2012 15:50:10 -0500
Subject: Result monad
In-Reply-To: <87wqx6vljv.fsf@li195-236.members.linode.com>
References: <87wqx6vljv.fsf@li195-236.members.linode.com>
Message-ID: <CALScVYmE5-h0PAWrCLmax0j9nRCcNMV=bV-Z7=9Hg+RV_VjDGw@mail.gmail.com>

Hi

We've been doing that for a few months (e.g.
https://github.com/biocaml/biocaml/blob/master/src/lib/biocaml_fastq.mli )


In a sense it's great (and we plan to keep doing this):
- polymorphic variants force the exhaustiveness of pattern matching (so you
do not forget error cases)
- (infered) function types fully document anything that may happen inside a
function

There are a few annoyances to keep in mind:
- the error types must remain open so that ocaml can merge them ( [> ... ])
  * sometimes this gets in the way, and you spend time type-hacking only
for errors that never happen
     (e.g. if you want to put a function in a record/object you have then
to play with "type 'error t =  { x : ... -> (..., .... as 'error) Result.t
}" etc.)
  * sometimes it's difficult to "reopen" polymorphic variant types
- pattern matching does not know how to remove cases:
  match error with
  | `db_error e -> .... return ()
  |  other_error -> error other_error (* without annotations, [> `db_error
... ] will remain part of the total error type *)


Cheers
Seb







On Tue, Nov 27, 2012 at 3:27 PM, Malcolm Matalka <mmatalka at gmail.com> wrote:

> I've been playing with writing code that can fail in a lot of ways and
> using Result.Monad_infix to make it more readable.  I've found that this
> only really works well if all of my functions that return a Result.t
> have polymorphic variants on the Error side.  Is this the suggested best
> practice as well?  I'm considering just mandating all my code that can
> return a Result.t does this.
>
> Thanks,
> /Malcolm
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121127/fea364e4/attachment.html>

From mmatalka at gmail.com  Tue Nov 27 21:11:59 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Tue, 27 Nov 2012 16:11:59 -0500
Subject: Result monad
In-Reply-To: <CALScVYmE5-h0PAWrCLmax0j9nRCcNMV=bV-Z7=9Hg+RV_VjDGw@mail.gmail.com>
	(Sebastien Mondet's message of "Tue, 27 Nov 2012 15:50:10 -0500")
References: <87wqx6vljv.fsf@li195-236.members.linode.com>
	<CALScVYmE5-h0PAWrCLmax0j9nRCcNMV=bV-Z7=9Hg+RV_VjDGw@mail.gmail.com>
Message-ID: <87sj7uvjhc.fsf@li195-236.members.linode.com>


Thanks for pointing that out, I actually ran into it this weekend and
didn't get what was going on.  I ended up just handling every failure in
all cases, which is excessive but not so bad in this case.

Sebastien Mondet <sebastien.mondet at gmail.com> writes:

> Hi
>
> We've been doing that for a few months (e.g.
> https://github.com/biocaml/biocaml/blob/master/src/lib/biocaml_fastq.mli )
>
>
> In a sense it's great (and we plan to keep doing this):
> - polymorphic variants force the exhaustiveness of pattern matching (so you
> do not forget error cases)
> - (infered) function types fully document anything that may happen inside a
> function
>
> There are a few annoyances to keep in mind:
> - the error types must remain open so that ocaml can merge them ( [> ... ])
>   * sometimes this gets in the way, and you spend time type-hacking only
> for errors that never happen
>      (e.g. if you want to put a function in a record/object you have then
> to play with "type 'error t =  { x : ... -> (..., .... as 'error) Result.t
> }" etc.)
>   * sometimes it's difficult to "reopen" polymorphic variant types
> - pattern matching does not know how to remove cases:
>   match error with
>   | `db_error e -> .... return ()
>   |  other_error -> error other_error (* without annotations, [> `db_error
> ... ] will remain part of the total error type *)
>
>
> Cheers
> Seb
>
>
>
>
>
>
>
> On Tue, Nov 27, 2012 at 3:27 PM, Malcolm Matalka <mmatalka at gmail.com> wrote:
>
>> I've been playing with writing code that can fail in a lot of ways and
>> using Result.Monad_infix to make it more readable.  I've found that this
>> only really works well if all of my functions that return a Result.t
>> have polymorphic variants on the Error side.  Is this the suggested best
>> practice as well?  I'm considering just mandating all my code that can
>> return a Result.t does this.
>>
>> Thanks,
>> /Malcolm
>>


From yminsky at janestreet.com  Tue Nov 27 22:52:54 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Tue, 27 Nov 2012 17:52:54 -0500
Subject: Result monad
In-Reply-To: <87sj7uvjhc.fsf@li195-236.members.linode.com>
References: <87wqx6vljv.fsf@li195-236.members.linode.com>
	<CALScVYmE5-h0PAWrCLmax0j9nRCcNMV=bV-Z7=9Hg+RV_VjDGw@mail.gmail.com>
	<87sj7uvjhc.fsf@li195-236.members.linode.com>
Message-ID: <CACLX4jQX9a2ypZfSFjQAjYd99zwsS6v4_82gSD_CRc=WsQyw6w@mail.gmail.com>


We actually tend to a style where we use a ('a,Error.t) Result.t
(also known as an 'a Or_error.t), where an Error.t is essentially a
lazily constructed s-expression.  Obviously, once you do this, you
can't programmatically distinguish between different errors
effectively, but we like it better than the polymorphic variant trick
that Sebastien mentions, because of the god-awful type error messages
that leads to.

y

On Tue, Nov 27, 2012 at 4:11 PM, Malcolm Matalka <mmatalka at gmail.com> wrote:
> Thanks for pointing that out, I actually ran into it this weekend and
> didn't get what was going on.  I ended up just handling every failure in
> all cases, which is excessive but not so bad in this case.
>
> Sebastien Mondet <sebastien.mondet at gmail.com> writes:
>
>> Hi
>>
>> We've been doing that for a few months (e.g.
>> https://github.com/biocaml/biocaml/blob/master/src/lib/biocaml_fastq.mli )
>>
>>
>> In a sense it's great (and we plan to keep doing this):
>> - polymorphic variants force the exhaustiveness of pattern matching (so you
>> do not forget error cases)
>> - (infered) function types fully document anything that may happen inside a
>> function
>>
>> There are a few annoyances to keep in mind:
>> - the error types must remain open so that ocaml can merge them ( [> ... ])
>>   * sometimes this gets in the way, and you spend time type-hacking only
>> for errors that never happen
>>      (e.g. if you want to put a function in a record/object you have then
>> to play with "type 'error t =  { x : ... -> (..., .... as 'error) Result.t
>> }" etc.)
>>   * sometimes it's difficult to "reopen" polymorphic variant types
>> - pattern matching does not know how to remove cases:
>>   match error with
>>   | `db_error e -> .... return ()
>>   |  other_error -> error other_error (* without annotations, [> `db_error
>> ... ] will remain part of the total error type *)
>>
>>
>> Cheers
>> Seb
>>
>>
>>
>>
>>
>>
>>
>> On Tue, Nov 27, 2012 at 3:27 PM, Malcolm Matalka <mmatalka at gmail.com> wrote:
>>
>>> I've been playing with writing code that can fail in a lot of ways and
>>> using Result.Monad_infix to make it more readable.  I've found that this
>>> only really works well if all of my functions that return a Result.t
>>> have polymorphic variants on the Error side.  Is this the suggested best
>>> practice as well?  I'm considering just mandating all my code that can
>>> return a Result.t does this.
>>>
>>> Thanks,
>>> /Malcolm
>>>


From mmatalka at gmail.com  Fri Nov 30 11:07:02 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Fri, 30 Nov 2012 06:07:02 -0500
Subject: Will Incremental be open sourced?
Message-ID: <87a9tzqrhl.fsf@li195-236.members.linode.com>


I noticed Yaron gave a talk about Incremental at CMU.  Sounds pretty
great, I've been dreaming about building great ncurses-based
applications in Ocaml since CUFP :)

Is there any plan to open source Incremental?

Thanks,
/Malcolm


From yminsky at janestreet.com  Fri Nov 30 11:38:25 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Fri, 30 Nov 2012 06:38:25 -0500
Subject: Will Incremental be open sourced?
In-Reply-To: <590A9262-7673-4877-8997-A379FBCB9A46@recoil.org>
References: <87a9tzqrhl.fsf@li195-236.members.linode.com>
	<590A9262-7673-4877-8997-A379FBCB9A46@recoil.org>
Message-ID: <CACLX4jRNZvoM4YuzjHtUyUBUp6ELBat5C6tMFfqgdOpZCaQPJg@mail.gmail.com>


Sorry.  At present, we have no plans to open-source incremental.

We do have some other libraries we're thinking about getting cleaned
up for release, though, including a library for coordinating parallel
computations and a library for managing ocaml plug-in libraries...

y

On Fri, Nov 30, 2012 at 6:11 AM, Anil Madhavapeddy <anil at recoil.org> wrote:
> A practical FRP library would be a great thing to have alongside Async!
>
> -anil
>
> On 30 Nov 2012, at 11:07, Malcolm Matalka <mmatalka at gmail.com> wrote:
>
>> I noticed Yaron gave a talk about Incremental at CMU.  Sounds pretty
>> great, I've been dreaming about building great ncurses-based
>> applications in Ocaml since CUFP :)
>>
>> Is there any plan to open source Incremental?
>>
>> Thanks,
>> /Malcolm
>>
>


From mmatalka at gmail.com  Fri Nov 30 11:45:32 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Fri, 30 Nov 2012 06:45:32 -0500
Subject: Will Incremental be open sourced?
In-Reply-To: <CACLX4jRNZvoM4YuzjHtUyUBUp6ELBat5C6tMFfqgdOpZCaQPJg@mail.gmail.com>
	(Yaron Minsky's message of "Fri, 30 Nov 2012 06:38:25 -0500")
References: <87a9tzqrhl.fsf@li195-236.members.linode.com>
	<590A9262-7673-4877-8997-A379FBCB9A46@recoil.org>
	<CACLX4jRNZvoM4YuzjHtUyUBUp6ELBat5C6tMFfqgdOpZCaQPJg@mail.gmail.com>
Message-ID: <87txs7pb4z.fsf@li195-236.members.linode.com>


Damn you for teasing us! But I really appreciate all that Jane St has
given to the community so I can't complain too much :)

Thanks,
/M

Yaron Minsky <yminsky at janestreet.com> writes:

> Sorry.  At present, we have no plans to open-source incremental.
>
> We do have some other libraries we're thinking about getting cleaned
> up for release, though, including a library for coordinating parallel
> computations and a library for managing ocaml plug-in libraries...
>
> y
>
> On Fri, Nov 30, 2012 at 6:11 AM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> A practical FRP library would be a great thing to have alongside Async!
>>
>> -anil
>>
>> On 30 Nov 2012, at 11:07, Malcolm Matalka <mmatalka at gmail.com> wrote:
>>
>>> I noticed Yaron gave a talk about Incremental at CMU.  Sounds pretty
>>> great, I've been dreaming about building great ncurses-based
>>> applications in Ocaml since CUFP :)
>>>
>>> Is there any plan to open source Incremental?
>>>
>>> Thanks,
>>> /Malcolm
>>>
>>


From markus.mottl at gmail.com  Fri Nov 30 14:59:29 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Fri, 30 Nov 2012 09:59:29 -0500
Subject: Will Incremental be open sourced?
In-Reply-To: <590A9262-7673-4877-8997-A379FBCB9A46@recoil.org>
References: <87a9tzqrhl.fsf@li195-236.members.linode.com>
	<590A9262-7673-4877-8997-A379FBCB9A46@recoil.org>
Message-ID: <CAP_800owuBezaMVQGcq97Jbw0bXjLe6hLbmOXvim-a=YU=Hwew@mail.gmail.com>


A few other general things coming to my mind that the community might like:

  * OMake build rules
  * Async curses library
  * LZO library

I'm sure there is more :-)

Regards,
Markus

On Fri, Nov 30, 2012 at 6:11 AM, Anil Madhavapeddy <anil at recoil.org> wrote:
> A practical FRP library would be a great thing to have alongside Async!
>
> -anil
>
> On 30 Nov 2012, at 11:07, Malcolm Matalka <mmatalka at gmail.com> wrote:
>
>> I noticed Yaron gave a talk about Incremental at CMU.  Sounds pretty
>> great, I've been dreaming about building great ncurses-based
>> applications in Ocaml since CUFP :)
>>
>> Is there any plan to open source Incremental?
>>
>> Thanks,
>> /Malcolm
>>
>



-- 
Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com


From mmatalka at gmail.com  Fri Nov 30 15:51:46 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Fri, 30 Nov 2012 10:51:46 -0500
Subject: Will Incremental be open sourced?
In-Reply-To: <14772E20-3F98-44F2-9CCB-19A8CC66F2B5@recoil.org> (Anil
	Madhavapeddy's message of "Fri, 30 Nov 2012 15:01:12 +0000")
References: <87a9tzqrhl.fsf@li195-236.members.linode.com>
	<590A9262-7673-4877-8997-A379FBCB9A46@recoil.org>
	<CAP_800owuBezaMVQGcq97Jbw0bXjLe6hLbmOXvim-a=YU=Hwew@mail.gmail.com>
	<14772E20-3F98-44F2-9CCB-19A8CC66F2B5@recoil.org>
Message-ID: <87hao7ozql.fsf@li195-236.members.linode.com>


Hear hear!


Anil Madhavapeddy <anil at recoil.org> writes:

> On 30 Nov 2012, at 14:59, Markus Mottl <markus.mottl at gmail.com> wrote:
>
>> A few other general things coming to my mind that the community might like:
>> 
>>  * OMake build rules
>>  * Async curses library
>
> This one gets me disproportionately excited.  But then, Jeremie's zed and
> lambda-term libraries are also brilliant (but for Lwt). It's what is used
> to drive the interactive utop experience.
>
> More ncurses, less GUI!
>
> -anil
>
>
>>  * LZO library
>> 
>> I'm sure there is more :-)
>> 
>> Regards,
>> Markus
>> 
>> On Fri, Nov 30, 2012 at 6:11 AM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>> A practical FRP library would be a great thing to have alongside Async!
>>> 
>>> -anil
>>> 
>>> On 30 Nov 2012, at 11:07, Malcolm Matalka <mmatalka at gmail.com> wrote:
>>> 
>>>> I noticed Yaron gave a talk about Incremental at CMU.  Sounds pretty
>>>> great, I've been dreaming about building great ncurses-based
>>>> applications in Ocaml since CUFP :)
>>>> 
>>>> Is there any plan to open source Incremental?
>>>> 
>>>> Thanks,
>>>> /Malcolm
>>>> 
>>> 
>> 
>> 
>> 
>> -- 
>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>> 


From anil at recoil.org  Fri Nov 30 11:11:46 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Fri, 30 Nov 2012 11:11:46 +0000
Subject: Will Incremental be open sourced?
In-Reply-To: <87a9tzqrhl.fsf@li195-236.members.linode.com>
References: <87a9tzqrhl.fsf@li195-236.members.linode.com>
Message-ID: <590A9262-7673-4877-8997-A379FBCB9A46@recoil.org>


A practical FRP library would be a great thing to have alongside Async!

-anil

On 30 Nov 2012, at 11:07, Malcolm Matalka <mmatalka at gmail.com> wrote:

> I noticed Yaron gave a talk about Incremental at CMU.  Sounds pretty
> great, I've been dreaming about building great ncurses-based
> applications in Ocaml since CUFP :)
> 
> Is there any plan to open source Incremental?
> 
> Thanks,
> /Malcolm
> 



From anil at recoil.org  Fri Nov 30 15:01:12 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Fri, 30 Nov 2012 15:01:12 +0000
Subject: Will Incremental be open sourced?
In-Reply-To: <CAP_800owuBezaMVQGcq97Jbw0bXjLe6hLbmOXvim-a=YU=Hwew@mail.gmail.com>
References: <87a9tzqrhl.fsf@li195-236.members.linode.com> <590A9262-7673-4877-8997-A379FBCB9A46@recoil.org> <CAP_800owuBezaMVQGcq97Jbw0bXjLe6hLbmOXvim-a=YU=Hwew@mail.gmail.com>
Message-ID: <14772E20-3F98-44F2-9CCB-19A8CC66F2B5@recoil.org>


On 30 Nov 2012, at 14:59, Markus Mottl <markus.mottl at gmail.com> wrote:

> A few other general things coming to my mind that the community might like:
> 
>  * OMake build rules
>  * Async curses library

This one gets me disproportionately excited.  But then, Jeremie's zed and
lambda-term libraries are also brilliant (but for Lwt). It's what is used
to drive the interactive utop experience.

More ncurses, less GUI!

-anil


>  * LZO library
> 
> I'm sure there is more :-)
> 
> Regards,
> Markus
> 
> On Fri, Nov 30, 2012 at 6:11 AM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> A practical FRP library would be a great thing to have alongside Async!
>> 
>> -anil
>> 
>> On 30 Nov 2012, at 11:07, Malcolm Matalka <mmatalka at gmail.com> wrote:
>> 
>>> I noticed Yaron gave a talk about Incremental at CMU.  Sounds pretty
>>> great, I've been dreaming about building great ncurses-based
>>> applications in Ocaml since CUFP :)
>>> 
>>> Is there any plan to open source Incremental?
>>> 
>>> Thanks,
>>> /Malcolm
>>> 
>> 
> 
> 
> 
> -- 
> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
> 



From yminsky at janestreet.com  Fri Nov 30 22:06:07 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Fri, 30 Nov 2012 17:06:07 -0500
Subject: Will Incremental be open sourced?
In-Reply-To: <87hao7ozql.fsf@li195-236.members.linode.com>
References: <87a9tzqrhl.fsf@li195-236.members.linode.com>
	<590A9262-7673-4877-8997-A379FBCB9A46@recoil.org>
	<CAP_800owuBezaMVQGcq97Jbw0bXjLe6hLbmOXvim-a=YU=Hwew@mail.gmail.com>
	<14772E20-3F98-44F2-9CCB-19A8CC66F2B5@recoil.org>
	<87hao7ozql.fsf@li195-236.members.linode.com>
Message-ID: <CACLX4jQJ=-F36b6ZxmP6AO50ucZvCb3MkF1Luba37C28EYyuRA@mail.gmail.com>


Reasonable suggestions one and all.  The main barrier is time to make
these things ready for an external release.  Actually, real work has
already been done on externalizing the omake rules, though I'm not
sure where that is now.  The curses library would really be a good
idea.  Just need to get someone inside of JS to volunteer to do the
work...

y

On Fri, Nov 30, 2012 at 10:51 AM, Malcolm Matalka <mmatalka at gmail.com> wrote:
> Hear hear!
>
>
> Anil Madhavapeddy <anil at recoil.org> writes:
>
>> On 30 Nov 2012, at 14:59, Markus Mottl <markus.mottl at gmail.com> wrote:
>>
>>> A few other general things coming to my mind that the community might like:
>>>
>>>  * OMake build rules
>>>  * Async curses library
>>
>> This one gets me disproportionately excited.  But then, Jeremie's zed and
>> lambda-term libraries are also brilliant (but for Lwt). It's what is used
>> to drive the interactive utop experience.
>>
>> More ncurses, less GUI!
>>
>> -anil
>>
>>
>>>  * LZO library
>>>
>>> I'm sure there is more :-)
>>>
>>> Regards,
>>> Markus
>>>
>>> On Fri, Nov 30, 2012 at 6:11 AM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>>> A practical FRP library would be a great thing to have alongside Async!
>>>>
>>>> -anil
>>>>
>>>> On 30 Nov 2012, at 11:07, Malcolm Matalka <mmatalka at gmail.com> wrote:
>>>>
>>>>> I noticed Yaron gave a talk about Incremental at CMU.  Sounds pretty
>>>>> great, I've been dreaming about building great ncurses-based
>>>>> applications in Ocaml since CUFP :)
>>>>>
>>>>> Is there any plan to open source Incremental?
>>>>>
>>>>> Thanks,
>>>>> /Malcolm
>>>>>
>>>>
>>>
>>>
>>>
>>> --
>>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>>>


From mmatalka at gmail.com  Fri Nov 30 22:21:25 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Fri, 30 Nov 2012 23:21:25 +0100
Subject: Will Incremental be open sourced?
In-Reply-To: <CACLX4jQJ=-F36b6ZxmP6AO50ucZvCb3MkF1Luba37C28EYyuRA@mail.gmail.com>
References: <87a9tzqrhl.fsf@li195-236.members.linode.com>
	<590A9262-7673-4877-8997-A379FBCB9A46@recoil.org>
	<CAP_800owuBezaMVQGcq97Jbw0bXjLe6hLbmOXvim-a=YU=Hwew@mail.gmail.com>
	<14772E20-3F98-44F2-9CCB-19A8CC66F2B5@recoil.org>
	<87hao7ozql.fsf@li195-236.members.linode.com>
	<CACLX4jQJ=-F36b6ZxmP6AO50ucZvCb3MkF1Luba37C28EYyuRA@mail.gmail.com>
Message-ID: <CAKziXDXdRoC_Xv5bKi=g9Fq0bdBCRj0SFz-soWNJj_k+-g=SjA@mail.gmail.com>

Would it be practical for JS to hire someone part time with an NDA who just
does to grunt work for open sourcing things?  I realize that's a lot to ask
but tossing it out there.

/M
 On Nov 30, 2012 11:07 PM, "Yaron Minsky" <yminsky at janestreet.com> wrote:

> Reasonable suggestions one and all.  The main barrier is time to make
> these things ready for an external release.  Actually, real work has
> already been done on externalizing the omake rules, though I'm not
> sure where that is now.  The curses library would really be a good
> idea.  Just need to get someone inside of JS to volunteer to do the
> work...
>
> y
>
> On Fri, Nov 30, 2012 at 10:51 AM, Malcolm Matalka <mmatalka at gmail.com>
> wrote:
> > Hear hear!
> >
> >
> > Anil Madhavapeddy <anil at recoil.org> writes:
> >
> >> On 30 Nov 2012, at 14:59, Markus Mottl <markus.mottl at gmail.com> wrote:
> >>
> >>> A few other general things coming to my mind that the community might
> like:
> >>>
> >>>  * OMake build rules
> >>>  * Async curses library
> >>
> >> This one gets me disproportionately excited.  But then, Jeremie's zed
> and
> >> lambda-term libraries are also brilliant (but for Lwt). It's what is
> used
> >> to drive the interactive utop experience.
> >>
> >> More ncurses, less GUI!
> >>
> >> -anil
> >>
> >>
> >>>  * LZO library
> >>>
> >>> I'm sure there is more :-)
> >>>
> >>> Regards,
> >>> Markus
> >>>
> >>> On Fri, Nov 30, 2012 at 6:11 AM, Anil Madhavapeddy <anil at recoil.org>
> wrote:
> >>>> A practical FRP library would be a great thing to have alongside
> Async!
> >>>>
> >>>> -anil
> >>>>
> >>>> On 30 Nov 2012, at 11:07, Malcolm Matalka <mmatalka at gmail.com> wrote:
> >>>>
> >>>>> I noticed Yaron gave a talk about Incremental at CMU.  Sounds pretty
> >>>>> great, I've been dreaming about building great ncurses-based
> >>>>> applications in Ocaml since CUFP :)
> >>>>>
> >>>>> Is there any plan to open source Incremental?
> >>>>>
> >>>>> Thanks,
> >>>>> /Malcolm
> >>>>>
> >>>>
> >>>
> >>>
> >>>
> >>> --
> >>> Markus Mottl        http://www.ocaml.info
> markus.mottl at gmail.com
> >>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121130/24c90d8b/attachment.html>

From francois.berenger.working at gmail.com  Fri Nov  2 01:19:39 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 1 Nov 2012 18:19:39 -0700 (PDT)
Subject: any logger in core?
In-Reply-To: <20120714161518.GJ14582@dark.recoil.org>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
 <CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
 <117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
 <CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
 <20120714161518.GJ14582@dark.recoil.org>
Message-ID: <9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>

Hello,

Is there a logger in the current release of core?

Thanks,
F.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/15bd7e82/attachment-0001.html>

From francois.berenger.working at gmail.com  Fri Nov  2 01:39:42 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 1 Nov 2012 18:39:42 -0700 (PDT)
Subject: core's documentation
Message-ID: <51212964-c9f4-4cd1-9347-da3ff7940258@googlegroups.com>

Hello,

Is there a way to build the ocamldoc for core
while being able to jump/unwrap the implementation
code of some function by clicking on its name?

I think ocamldoc can do some code inlining.

I asked this several times for OCaml batteries
and never got a satisfying answer.

Thanks a lot,
F.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/1f3f7d28/attachment-0001.html>

From francois.berenger.working at gmail.com  Fri Nov  2 01:40:40 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 1 Nov 2012 18:40:40 -0700 (PDT)
Subject: any logger in core?
In-Reply-To: <CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
 <CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
 <117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
 <CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
 <20120714161518.GJ14582@dark.recoil.org>
 <9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
 <CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
Message-ID: <004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>

OK, I'm hooked now.

I plus core in my new project.

Thanks!
F.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/68f00e79/attachment-0001.html>

From francois.berenger.working at gmail.com  Fri Nov  2 01:47:21 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 1 Nov 2012 18:47:21 -0700 (PDT)
Subject: core's documentation
In-Reply-To: <51212964-c9f4-4cd1-9347-da3ff7940258@googlegroups.com>
References: <51212964-c9f4-4cd1-9347-da3ff7940258@googlegroups.com>
Message-ID: <f2581bd1-ec4b-48e7-a5f7-b192a3108f5e@googlegroups.com>

By the way, where did OPAM put the doc when installing async?

On Friday, November 2, 2012 10:39:42 AM UTC+9, Francois Berenger wrote:
>
> Hello,
>
> Is there a way to build the ocamldoc for core
> while being able to jump/unwrap the implementation
> code of some function by clicking on its name?
>
> I think ocamldoc can do some code inlining.
>
> I asked this several times for OCaml batteries
> and never got a satisfying answer.
>
> Thanks a lot,
> F.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/35b89d1d/attachment-0001.html>

From francois.berenger.working at gmail.com  Fri Nov  2 01:59:45 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 1 Nov 2012 18:59:45 -0700 (PDT)
Subject: any logger in core?
In-Reply-To: <004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
 <CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
 <117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
 <CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
 <20120714161518.GJ14582@dark.recoil.org>
 <9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
 <CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
 <004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
Message-ID: <5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>

Is there some example program using this logger?

On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger wrote:
>
> OK, I'm hooked now.
>
> I plus core in my new project.
>
> Thanks!
> F.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/858fa92a/attachment-0001.html>

From francois.berenger.working at gmail.com  Fri Nov  2 02:00:49 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 1 Nov 2012 19:00:49 -0700 (PDT)
Subject: core's documentation
In-Reply-To: <f2581bd1-ec4b-48e7-a5f7-b192a3108f5e@googlegroups.com>
References: <51212964-c9f4-4cd1-9347-da3ff7940258@googlegroups.com>
 <f2581bd1-ec4b-48e7-a5f7-b192a3108f5e@googlegroups.com>
Message-ID: <d76a702d-8712-4eb8-a365-7e97c2ffd8df@googlegroups.com>

Can I cd somewhere in OPAM's directory structure and do a make doc / make 
ocamldoc?

On Friday, November 2, 2012 10:47:21 AM UTC+9, Francois Berenger wrote:
>
> By the way, where did OPAM put the doc when installing async?
>
> On Friday, November 2, 2012 10:39:42 AM UTC+9, Francois Berenger wrote:
>>
>> Hello,
>>
>> Is there a way to build the ocamldoc for core
>> while being able to jump/unwrap the implementation
>> code of some function by clicking on its name?
>>
>> I think ocamldoc can do some code inlining.
>>
>> I asked this several times for OCaml batteries
>> and never got a satisfying answer.
>>
>> Thanks a lot,
>> F.
>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/cdc0fd18/attachment-0001.html>

From francois.berenger.working at gmail.com  Fri Nov  2 02:07:46 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 1 Nov 2012 19:07:46 -0700 (PDT)
Subject: core's documentation
In-Reply-To: <d76a702d-8712-4eb8-a365-7e97c2ffd8df@googlegroups.com>
References: <51212964-c9f4-4cd1-9347-da3ff7940258@googlegroups.com>
 <f2581bd1-ec4b-48e7-a5f7-b192a3108f5e@googlegroups.com>
 <d76a702d-8712-4eb8-a365-7e97c2ffd8df@googlegroups.com>
Message-ID: <fe12c264-550b-4bdc-a576-a74bb319ba44@googlegroups.com>

Reply to self, yes apparently:

make doc # in ~/.opam/system/lib/core

On Friday, November 2, 2012 11:00:49 AM UTC+9, Francois Berenger wrote:
>
> Can I cd somewhere in OPAM's directory structure and do a make doc / make 
> ocamldoc?
>
> On Friday, November 2, 2012 10:47:21 AM UTC+9, Francois Berenger wrote:
>>
>> By the way, where did OPAM put the doc when installing async?
>>
>> On Friday, November 2, 2012 10:39:42 AM UTC+9, Francois Berenger wrote:
>>>
>>> Hello,
>>>
>>> Is there a way to build the ocamldoc for core
>>> while being able to jump/unwrap the implementation
>>> code of some function by clicking on its name?
>>>
>>> I think ocamldoc can do some code inlining.
>>>
>>> I asked this several times for OCaml batteries
>>> and never got a satisfying answer.
>>>
>>> Thanks a lot,
>>> F.
>>>
>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/f3db5c87/attachment-0001.html>

From francois.berenger.working at gmail.com  Fri Nov  2 02:09:41 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 1 Nov 2012 19:09:41 -0700 (PDT)
Subject: core does not use ocp-build to compile?
Message-ID: <bdbae551-6c55-4d17-a076-e7b8e29ea889@googlegroups.com>

I'm eager to see my 8 CPUs getting busy. :)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/1b50b819/attachment-0001.html>

From francois.berenger.working at gmail.com  Fri Nov  2 02:13:35 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 1 Nov 2012 19:13:35 -0700 (PDT)
Subject: core does not use ocp-build to compile?
In-Reply-To: <bdbae551-6c55-4d17-a076-e7b8e29ea889@googlegroups.com>
References: <bdbae551-6c55-4d17-a076-e7b8e29ea889@googlegroups.com>
Message-ID: <f3381039-0e6e-460f-b4d0-6e9668c10e28@googlegroups.com>

Almost 7mn to build the doc...

On Friday, November 2, 2012 11:09:41 AM UTC+9, Francois Berenger wrote:
>
> I'm eager to see my 8 CPUs getting busy. :)
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/2c5eb32b/attachment-0001.html>

From francois.berenger.working at gmail.com  Fri Nov  2 02:14:49 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 1 Nov 2012 19:14:49 -0700 (PDT)
Subject: core's documentation
In-Reply-To: <fe12c264-550b-4bdc-a576-a74bb319ba44@googlegroups.com>
References: <51212964-c9f4-4cd1-9347-da3ff7940258@googlegroups.com>
 <f2581bd1-ec4b-48e7-a5f7-b192a3108f5e@googlegroups.com>
 <d76a702d-8712-4eb8-a365-7e97c2ffd8df@googlegroups.com>
 <fe12c264-550b-4bdc-a576-a74bb319ba44@googlegroups.com>
Message-ID: <4a2964b0-6e6d-4603-a485-992863212a58@googlegroups.com>

And the doc went into:

.opam/system/build/core.108.07.01/_build/lib/core.docdir

On Friday, November 2, 2012 11:07:46 AM UTC+9, Francois Berenger wrote:
>
> Reply to self, yes apparently:
>
> make doc # in ~/.opam/system/lib/core
>
> On Friday, November 2, 2012 11:00:49 AM UTC+9, Francois Berenger wrote:
>>
>> Can I cd somewhere in OPAM's directory structure and do a make doc / make 
>> ocamldoc?
>>
>> On Friday, November 2, 2012 10:47:21 AM UTC+9, Francois Berenger wrote:
>>>
>>> By the way, where did OPAM put the doc when installing async?
>>>
>>> On Friday, November 2, 2012 10:39:42 AM UTC+9, Francois Berenger wrote:
>>>>
>>>> Hello,
>>>>
>>>> Is there a way to build the ocamldoc for core
>>>> while being able to jump/unwrap the implementation
>>>> code of some function by clicking on its name?
>>>>
>>>> I think ocamldoc can do some code inlining.
>>>>
>>>> I asked this several times for OCaml batteries
>>>> and never got a satisfying answer.
>>>>
>>>> Thanks a lot,
>>>> F.
>>>>
>>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/b7501d01/attachment-0001.html>

From francois.berenger.working at gmail.com  Fri Nov  2 02:23:50 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 1 Nov 2012 19:23:50 -0700 (PDT)
Subject: core does not use ocp-build to compile?
In-Reply-To: <CACLX4jSyHfXhryYx_kGq1UAKqXFDbuTDcji7jZi2D4Mk3qbVXg@mail.gmail.com>
References: <bdbae551-6c55-4d17-a076-e7b8e29ea889@googlegroups.com>
 <f3381039-0e6e-460f-b4d0-6e9668c10e28@googlegroups.com>
 <CACLX4jSyHfXhryYx_kGq1UAKqXFDbuTDcji7jZi2D4Mk3qbVXg@mail.gmail.com>
Message-ID: <d9458810-8dfd-42ef-974f-b628f873f3c8@googlegroups.com>

You would laugh if you time parallel builds of ocamlbuild.

No acceleration is what I usually observe with it.

On Friday, November 2, 2012 11:15:47 AM UTC+9, Yaron Minsky wrote:
>
> Can't one enable parallel builds on ocamlbuild as well?  Seems like 
> it's a feature that they both support. 
>
> On Thu, Nov 1, 2012 at 10:13 PM, Francois Berenger 
> <francois.ber... at gmail.com <javascript:>> wrote: 
> > Almost 7mn to build the doc... 
> > 
> > 
> > On Friday, November 2, 2012 11:09:41 AM UTC+9, Francois Berenger wrote: 
> >> 
> >> I'm eager to see my 8 CPUs getting busy. :) 
> >> 
> > 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/7a52e174/attachment-0001.html>

From francois.berenger.working at gmail.com  Fri Nov  2 02:31:38 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 1 Nov 2012 19:31:38 -0700 (PDT)
Subject: core does not use ocp-build to compile?
In-Reply-To: <CACLX4jTZ1-bwv4zQiQ1FVw-XrGX9518ehLkxgNfh3jgCVU4nEA@mail.gmail.com>
References: <bdbae551-6c55-4d17-a076-e7b8e29ea889@googlegroups.com>
 <f3381039-0e6e-460f-b4d0-6e9668c10e28@googlegroups.com>
 <CACLX4jSyHfXhryYx_kGq1UAKqXFDbuTDcji7jZi2D4Mk3qbVXg@mail.gmail.com>
 <d9458810-8dfd-42ef-974f-b628f873f3c8@googlegroups.com>
 <CACLX4jTZ1-bwv4zQiQ1FVw-XrGX9518ehLkxgNfh3jgCVU4nEA@mail.gmail.com>
Message-ID: <e7a67335-2a0f-4eb6-8309-2651defc9130@googlegroups.com>

I will first try to use it in my project (and get rid of ocamlbuild, at 
last!).

Then, I will probably talk about it on caml-list.

ocamlbuild is such a shame at parallelizing the build that
I can already bet my farm that ocp-build does a better job at it.

On Friday, November 2, 2012 11:28:29 AM UTC+9, Yaron Minsky wrote:
>
> If it's really better in terms of build times, I'd happily accept an 
> ocp-build based build script... 
>
> y 
>
> On Thu, Nov 1, 2012 at 10:23 PM, Francois Berenger 
> <francois.ber... at gmail.com <javascript:>> wrote: 
> > You would laugh if you time parallel builds of ocamlbuild. 
> > 
> > No acceleration is what I usually observe with it. 
> > 
> > 
> > On Friday, November 2, 2012 11:15:47 AM UTC+9, Yaron Minsky wrote: 
> >> 
> >> Can't one enable parallel builds on ocamlbuild as well?  Seems like 
> >> it's a feature that they both support. 
> >> 
> >> On Thu, Nov 1, 2012 at 10:13 PM, Francois Berenger 
> >> <francois.ber... at gmail.com> wrote: 
> >> > Almost 7mn to build the doc... 
> >> > 
> >> > 
> >> > On Friday, November 2, 2012 11:09:41 AM UTC+9, Francois Berenger 
> wrote: 
> >> >> 
> >> >> I'm eager to see my 8 CPUs getting busy. :) 
> >> >> 
> >> > 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/2ee29829/attachment-0001.html>

From yminsky at janestreet.com  Fri Nov  2 01:33:40 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 1 Nov 2012 21:33:40 -0400
Subject: any logger in core?
In-Reply-To: <9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
Message-ID: <CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>

Yes: if you open Async.Std, it's called "Log".

y

On Thu, Nov 1, 2012 at 9:19 PM, Francois Berenger <
francois.berenger.working at gmail.com> wrote:

> Hello,
>
> Is there a logger in the current release of core?
>
> Thanks,
> F.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121101/d381129a/attachment-0001.html>

From yminsky at janestreet.com  Fri Nov  2 02:14:35 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 1 Nov 2012 22:14:35 -0400
Subject: any logger in core?
In-Reply-To: <5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
Message-ID: <CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>


Sean, does your omake-server use Async.Log?  That might be a good example.

y

On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> Is there some example program using this logger?
>
>
> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger wrote:
>>
>> OK, I'm hooked now.
>>
>> I plus core in my new project.
>>
>> Thanks!
>> F.
>>
>


From yminsky at janestreet.com  Fri Nov  2 02:15:46 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 1 Nov 2012 22:15:46 -0400
Subject: core does not use ocp-build to compile?
In-Reply-To: <f3381039-0e6e-460f-b4d0-6e9668c10e28@googlegroups.com>
References: <bdbae551-6c55-4d17-a076-e7b8e29ea889@googlegroups.com>
	<f3381039-0e6e-460f-b4d0-6e9668c10e28@googlegroups.com>
Message-ID: <CACLX4jSyHfXhryYx_kGq1UAKqXFDbuTDcji7jZi2D4Mk3qbVXg@mail.gmail.com>


Can't one enable parallel builds on ocamlbuild as well?  Seems like
it's a feature that they both support.

On Thu, Nov 1, 2012 at 10:13 PM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> Almost 7mn to build the doc...
>
>
> On Friday, November 2, 2012 11:09:41 AM UTC+9, Francois Berenger wrote:
>>
>> I'm eager to see my 8 CPUs getting busy. :)
>>
>


From yminsky at janestreet.com  Fri Nov  2 02:28:28 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 1 Nov 2012 22:28:28 -0400
Subject: core does not use ocp-build to compile?
In-Reply-To: <d9458810-8dfd-42ef-974f-b628f873f3c8@googlegroups.com>
References: <bdbae551-6c55-4d17-a076-e7b8e29ea889@googlegroups.com>
	<f3381039-0e6e-460f-b4d0-6e9668c10e28@googlegroups.com>
	<CACLX4jSyHfXhryYx_kGq1UAKqXFDbuTDcji7jZi2D4Mk3qbVXg@mail.gmail.com>
	<d9458810-8dfd-42ef-974f-b628f873f3c8@googlegroups.com>
Message-ID: <CACLX4jTZ1-bwv4zQiQ1FVw-XrGX9518ehLkxgNfh3jgCVU4nEA@mail.gmail.com>


If it's really better in terms of build times, I'd happily accept an
ocp-build based build script...

y

On Thu, Nov 1, 2012 at 10:23 PM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> You would laugh if you time parallel builds of ocamlbuild.
>
> No acceleration is what I usually observe with it.
>
>
> On Friday, November 2, 2012 11:15:47 AM UTC+9, Yaron Minsky wrote:
>>
>> Can't one enable parallel builds on ocamlbuild as well?  Seems like
>> it's a feature that they both support.
>>
>> On Thu, Nov 1, 2012 at 10:13 PM, Francois Berenger
>> <francois.ber... at gmail.com> wrote:
>> > Almost 7mn to build the doc...
>> >
>> >
>> > On Friday, November 2, 2012 11:09:41 AM UTC+9, Francois Berenger wrote:
>> >>
>> >> I'm eager to see my 8 CPUs getting busy. :)
>> >>
>> >


From seanmcl at gmail.com  Sat Nov  3 22:43:03 2012
From: seanmcl at gmail.com (Sean McLaughlin)
Date: Sat, 3 Nov 2012 18:43:03 -0400
Subject: any logger in core?
In-Reply-To: <CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
 <CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
 <117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org> <CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
 <20120714161518.GJ14582@dark.recoil.org> <9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
 <CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
 <004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com> <5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
 <CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
Message-ID: <CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>


No, sorry.  I didn't know about Async.Log, and I wrote my own logger.
Switching to this one is probably a good idea in the long run for
omake-server.

On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky <yminsky at janestreet.com> wrote:
> Sean, does your omake-server use Async.Log?  That might be a good example.
>
> y
>
> On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger
> <francois.berenger.working at gmail.com> wrote:
>> Is there some example program using this logger?
>>
>>
>> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger wrote:
>>>
>>> OK, I'm hooked now.
>>>
>>> I plus core in my new project.
>>>
>>> Thanks!
>>> F.
>>>
>>


From yminsky at janestreet.com  Sun Nov  4 12:14:34 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Sun, 4 Nov 2012 07:14:34 -0500
Subject: any logger in core?
In-Reply-To: <CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
Message-ID: <CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>

Don't feel too bad about knowing about it.  It's quite new.

But yeah, moving to it eventually sounds right.

On Sat, Nov 3, 2012 at 6:43 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:

> No, sorry.  I didn't know about Async.Log, and I wrote my own logger.
> Switching to this one is probably a good idea in the long run for
> omake-server.
>
> On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky <yminsky at janestreet.com>
> wrote:
> > Sean, does your omake-server use Async.Log?  That might be a good
> example.
> >
> > y
> >
> > On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger
> > <francois.berenger.working at gmail.com> wrote:
> >> Is there some example program using this logger?
> >>
> >>
> >> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger wrote:
> >>>
> >>> OK, I'm hooked now.
> >>>
> >>> I plus core in my new project.
> >>>
> >>> Thanks!
> >>> F.
> >>>
> >>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121104/64c1bce0/attachment-0001.html>

From francois.berenger.working at gmail.com  Mon Nov  5 06:08:31 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Sun, 4 Nov 2012 22:08:31 -0800 (PST)
Subject: any logger in core?
In-Reply-To: <CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
 <CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
 <117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
 <CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
 <20120714161518.GJ14582@dark.recoil.org>
 <9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
 <CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
 <004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
 <5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
 <CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
 <CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
 <CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
Message-ID: <7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>


Is there some ocamldoc for it?

I think I managed to compile the ocamldoc for core and async, but did
not find anything about a Log module into it.

On Sunday, November 4, 2012 9:15:45 PM UTC+9, Yaron Minsky wrote:
>
> Don't feel too bad about knowing about it.  It's quite new.
>
> But yeah, moving to it eventually sounds right.
>
> On Sat, Nov 3, 2012 at 6:43 PM, Sean McLaughlin <sea... at gmail.com<javascript:>
> > wrote:
>
>> No, sorry.  I didn't know about Async.Log, and I wrote my own logger.
>> Switching to this one is probably a good idea in the long run for
>> omake-server.
>>
>> On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky <ymi... at janestreet.com<javascript:>> 
>> wrote:
>> > Sean, does your omake-server use Async.Log?  That might be a good 
>> example.
>> >
>> > y
>> >
>> > On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger
>> > <francois.ber... at gmail.com <javascript:>> wrote:
>> >> Is there some example program using this logger?
>> >>
>> >>
>> >> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger wrote:
>> >>>
>> >>> OK, I'm hooked now.
>> >>>
>> >>> I plus core in my new project.
>> >>>
>> >>> Thanks!
>> >>> F.
>> >>>
>> >>
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121104/b2ffd05a/attachment-0001.html>

From yminsky at janestreet.com  Mon Nov  5 15:27:18 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Mon, 5 Nov 2012 10:27:18 -0500
Subject: any logger in core?
In-Reply-To: <CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
	<CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
	<7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
	<CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
Message-ID: <CACLX4jSkv0RK-nYM88L09tgyVBUj9b8SZ4-ePMEDJdBEbO7CQA@mail.gmail.com>


https://ocaml.janestreet.com/ocaml-core/108.07.01/doc/async_extra/Log.html

On Mon, Nov 5, 2012 at 6:15 AM, David House <dhouse at janestreet.com> wrote:
> Judging from the mli, there should be some ocamldocs, yes.
>
> However, I recommend just looking at the mli.
>
> On Mon, Nov 5, 2012 at 6:08 AM, Francois Berenger
> <francois.berenger.working at gmail.com> wrote:
>>
>> Is there some ocamldoc for it?
>>
>> I think I managed to compile the ocamldoc for core and async, but did
>> not find anything about a Log module into it.
>>
>>
>> On Sunday, November 4, 2012 9:15:45 PM UTC+9, Yaron Minsky wrote:
>>>
>>> Don't feel too bad about knowing about it.  It's quite new.
>>>
>>> But yeah, moving to it eventually sounds right.
>>>
>>> On Sat, Nov 3, 2012 at 6:43 PM, Sean McLaughlin <sea... at gmail.com> wrote:
>>>>
>>>> No, sorry.  I didn't know about Async.Log, and I wrote my own logger.
>>>> Switching to this one is probably a good idea in the long run for
>>>> omake-server.
>>>>
>>>> On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky <ymi... at janestreet.com>
>>>> wrote:
>>>> > Sean, does your omake-server use Async.Log?  That might be a good
>>>> > example.
>>>> >
>>>> > y
>>>> >
>>>> > On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger
>>>> > <francois.ber... at gmail.com> wrote:
>>>> >> Is there some example program using this logger?
>>>> >>
>>>> >>
>>>> >> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger
>>>> >> wrote:
>>>> >>>
>>>> >>> OK, I'm hooked now.
>>>> >>>
>>>> >>> I plus core in my new project.
>>>> >>>
>>>> >>> Thanks!
>>>> >>> F.
>>>> >>>
>>>> >>
>>>
>>>
>>


From dhouse at janestreet.com  Mon Nov  5 11:15:22 2012
From: dhouse at janestreet.com (David House)
Date: Mon, 5 Nov 2012 11:15:22 +0000
Subject: any logger in core?
In-Reply-To: <7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
	<CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
	<7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
Message-ID: <CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>


Judging from the mli, there should be some ocamldocs, yes.

However, I recommend just looking at the mli.

On Mon, Nov 5, 2012 at 6:08 AM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
>
> Is there some ocamldoc for it?
>
> I think I managed to compile the ocamldoc for core and async, but did
> not find anything about a Log module into it.
>
>
> On Sunday, November 4, 2012 9:15:45 PM UTC+9, Yaron Minsky wrote:
>>
>> Don't feel too bad about knowing about it.  It's quite new.
>>
>> But yeah, moving to it eventually sounds right.
>>
>> On Sat, Nov 3, 2012 at 6:43 PM, Sean McLaughlin <sea... at gmail.com> wrote:
>>>
>>> No, sorry.  I didn't know about Async.Log, and I wrote my own logger.
>>> Switching to this one is probably a good idea in the long run for
>>> omake-server.
>>>
>>> On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky <ymi... at janestreet.com>
>>> wrote:
>>> > Sean, does your omake-server use Async.Log?  That might be a good
>>> > example.
>>> >
>>> > y
>>> >
>>> > On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger
>>> > <francois.ber... at gmail.com> wrote:
>>> >> Is there some example program using this logger?
>>> >>
>>> >>
>>> >> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger
>>> >> wrote:
>>> >>>
>>> >>> OK, I'm hooked now.
>>> >>>
>>> >>> I plus core in my new project.
>>> >>>
>>> >>> Thanks!
>>> >>> F.
>>> >>>
>>> >>
>>
>>
>


From yminsky at janestreet.com  Tue Nov  6 03:12:00 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Mon, 5 Nov 2012 22:12:00 -0500
Subject: any logger in core?
In-Reply-To: <CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
	<CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
	<7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
	<CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
	<CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
Message-ID: <CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>


No, did you see my link?  You can read the ocamldocs:

https://ocaml.janestreet.com/ocaml-core/108.07.01/doc/async_extra/Log.html

On Mon, Nov 5, 2012 at 9:51 PM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> Argh! I'm forced to read an mli file. ;)
>
> On Mon, Nov 5, 2012 at 8:15 PM, David House <dhouse at janestreet.com> wrote:
>> Judging from the mli, there should be some ocamldocs, yes.
>>
>> However, I recommend just looking at the mli.
>>
>> On Mon, Nov 5, 2012 at 6:08 AM, Francois Berenger
>> <francois.berenger.working at gmail.com> wrote:
>>>
>>> Is there some ocamldoc for it?
>>>
>>> I think I managed to compile the ocamldoc for core and async, but did
>>> not find anything about a Log module into it.
>>>
>>>
>>> On Sunday, November 4, 2012 9:15:45 PM UTC+9, Yaron Minsky wrote:
>>>>
>>>> Don't feel too bad about knowing about it.  It's quite new.
>>>>
>>>> But yeah, moving to it eventually sounds right.
>>>>
>>>> On Sat, Nov 3, 2012 at 6:43 PM, Sean McLaughlin <sea... at gmail.com> wrote:
>>>>>
>>>>> No, sorry.  I didn't know about Async.Log, and I wrote my own logger.
>>>>> Switching to this one is probably a good idea in the long run for
>>>>> omake-server.
>>>>>
>>>>> On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky <ymi... at janestreet.com>
>>>>> wrote:
>>>>> > Sean, does your omake-server use Async.Log?  That might be a good
>>>>> > example.
>>>>> >
>>>>> > y
>>>>> >
>>>>> > On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger
>>>>> > <francois.ber... at gmail.com> wrote:
>>>>> >> Is there some example program using this logger?
>>>>> >>
>>>>> >>
>>>>> >> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger
>>>>> >> wrote:
>>>>> >>>
>>>>> >>> OK, I'm hooked now.
>>>>> >>>
>>>>> >>> I plus core in my new project.
>>>>> >>>
>>>>> >>> Thanks!
>>>>> >>> F.
>>>>> >>>
>>>>> >>
>>>>
>>>>
>>>


From francois.berenger.working at gmail.com  Tue Nov  6 02:51:25 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Tue, 6 Nov 2012 11:51:25 +0900
Subject: any logger in core?
In-Reply-To: <CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
	<CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
	<7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
	<CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
Message-ID: <CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>


Argh! I'm forced to read an mli file. ;)

On Mon, Nov 5, 2012 at 8:15 PM, David House <dhouse at janestreet.com> wrote:
> Judging from the mli, there should be some ocamldocs, yes.
>
> However, I recommend just looking at the mli.
>
> On Mon, Nov 5, 2012 at 6:08 AM, Francois Berenger
> <francois.berenger.working at gmail.com> wrote:
>>
>> Is there some ocamldoc for it?
>>
>> I think I managed to compile the ocamldoc for core and async, but did
>> not find anything about a Log module into it.
>>
>>
>> On Sunday, November 4, 2012 9:15:45 PM UTC+9, Yaron Minsky wrote:
>>>
>>> Don't feel too bad about knowing about it.  It's quite new.
>>>
>>> But yeah, moving to it eventually sounds right.
>>>
>>> On Sat, Nov 3, 2012 at 6:43 PM, Sean McLaughlin <sea... at gmail.com> wrote:
>>>>
>>>> No, sorry.  I didn't know about Async.Log, and I wrote my own logger.
>>>> Switching to this one is probably a good idea in the long run for
>>>> omake-server.
>>>>
>>>> On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky <ymi... at janestreet.com>
>>>> wrote:
>>>> > Sean, does your omake-server use Async.Log?  That might be a good
>>>> > example.
>>>> >
>>>> > y
>>>> >
>>>> > On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger
>>>> > <francois.ber... at gmail.com> wrote:
>>>> >> Is there some example program using this logger?
>>>> >>
>>>> >>
>>>> >> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger
>>>> >> wrote:
>>>> >>>
>>>> >>> OK, I'm hooked now.
>>>> >>>
>>>> >>> I plus core in my new project.
>>>> >>>
>>>> >>> Thanks!
>>>> >>> F.
>>>> >>>
>>>> >>
>>>
>>>
>>


From francois.berenger.working at gmail.com  Wed Nov  7 02:32:43 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Tue, 6 Nov 2012 18:32:43 -0800 (PST)
Subject: How to load core in the toplevel?
Message-ID: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>

Hello,

I'd like to play with core in my toplevel.

Is there a recipe?

I have installed everything with OPAM:
$ opam list | egrep "core|async"
async                 108.07.01  Monadic concurrency library
async_core            108.07.01  Monadic concurrency library
async_extra           108.07.01  Monadic concurrency library
async_unix            108.07.01  Monadic concurrency library
core                  108.07.01  Industrial strength alternative to OCaml's 
standard library
core_extended                --  Extra components that are not as closely 
vetted or as stable as Core

In my toplevel, I type
#use "topfind";;
#list;;

Nothing about core or async shows up.
While parmap is there, for example.

Is this normal?

I guess there is some configuration file of findlib to tweak somewhere.

Regards,
F.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121106/a431b0e3/attachment-0001.html>

From francois.berenger.working at gmail.com  Wed Nov  7 02:37:18 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Tue, 6 Nov 2012 18:37:18 -0800 (PST)
Subject: How to load core in the toplevel?
In-Reply-To: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>
Message-ID: <69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com>

Apparently, ocamlfind knows where these libraries are:

$ ocamlfind -query core
/home/berenger/.opam/system/lib/core
$ ocamlfind -query async
/home/berenger/.opam/system/lib/async
$ ocamlfind -query async_extra
/home/berenger/.opam/system/lib/async_extra

On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger wrote:
>
> Hello,
>
> I'd like to play with core in my toplevel.
>
> Is there a recipe?
>
> I have installed everything with OPAM:
> $ opam list | egrep "core|async"
> async                 108.07.01  Monadic concurrency library
> async_core            108.07.01  Monadic concurrency library
> async_extra           108.07.01  Monadic concurrency library
> async_unix            108.07.01  Monadic concurrency library
> core                  108.07.01  Industrial strength alternative to 
> OCaml's standard library
> core_extended                --  Extra components that are not as closely 
> vetted or as stable as Core
>
> In my toplevel, I type
> #use "topfind";;
> #list;;
>
> Nothing about core or async shows up.
> While parmap is there, for example.
>
> Is this normal?
>
> I guess there is some configuration file of findlib to tweak somewhere.
>
> Regards,
> F.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121106/508b4d80/attachment-0001.html>

From francois.berenger.working at gmail.com  Wed Nov  7 03:06:11 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Tue, 6 Nov 2012 19:06:11 -0800 (PST)
Subject: How to load core in the toplevel?
In-Reply-To: <CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com> <69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com>
 <CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>
Message-ID: <8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com>

Thanks! That fixes the problem partially.

Now, I get:

# #require "core.top";;
# #require "core.top";;stem/lib/core/core.cma: loaded
Error: Reference to undefined global `Condition'
# #require "core";;
# #require "core";;m/system/lib/core/core.cma: loaded
Error: Reference to undefined global `Condition'
# #require "async";;
# #require "async";;/system/lib/core/core.cma: loaded
Error: Reference to undefined global `Condition'

Any hint?

On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet wrote:
>
>
> I'm not sure if this is your problem, but there was something with the 
> toplevel (comming with the system compiler) not knowing about opam 
> packages. 
> I have to launch:
>
>    ocaml -I $OCAML_TOPLEVEL_PATH
>
> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`)
>
>
> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger <
> francois.ber... at gmail.com <javascript:>> wrote:
>
>> Apparently, ocamlfind knows where these libraries are:
>>
>> $ ocamlfind -query core
>> /home/berenger/.opam/system/lib/core
>> $ ocamlfind -query async
>> /home/berenger/.opam/system/lib/async
>> $ ocamlfind -query async_extra
>> /home/berenger/.opam/system/lib/async_extra
>>
>>
>> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger wrote:
>>>
>>> Hello,
>>>
>>> I'd like to play with core in my toplevel.
>>>
>>> Is there a recipe?
>>>
>>> I have installed everything with OPAM:
>>> $ opam list | egrep "core|async"
>>> async                 108.07.01  Monadic concurrency library
>>> async_core            108.07.01  Monadic concurrency library
>>> async_extra           108.07.01  Monadic concurrency library
>>> async_unix            108.07.01  Monadic concurrency library
>>> core                  108.07.01  Industrial strength alternative to 
>>> OCaml's standard library
>>> core_extended                --  Extra components that are not as 
>>> closely vetted or as stable as Core
>>>
>>> In my toplevel, I type
>>> #use "topfind";;
>>> #list;;
>>>
>>> Nothing about core or async shows up.
>>> While parmap is there, for example.
>>>
>>> Is this normal?
>>>
>>> I guess there is some configuration file of findlib to tweak somewhere.
>>>
>>> Regards,
>>> F.
>>>
>>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121106/0f61f90e/attachment-0001.html>

From francois.berenger.working at gmail.com  Wed Nov  7 05:33:37 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Tue, 6 Nov 2012 21:33:37 -0800 (PST)
Subject: How to load core in the toplevel?
In-Reply-To: <CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>
 <69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com> <CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>
 <8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com>
 <CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com>
Message-ID: <9c71cd13-99c1-40e5-bc68-08217ebb1438@googlegroups.com>

Thanks a lot.

So, the whole recipe in my case was:

ocaml -I $OCAML_TOPLEVEL_PATH
#thread;;
#require "core.top";;
#require "async";;

Regards,
F.

On Wednesday, November 7, 2012 12:09:15 PM UTC+9, Sebastien Mondet wrote:
>
>
>
> I think that one is the  
>    #thread;;
> thing
>
>
>
>
> On Tue, Nov 6, 2012 at 10:06 PM, Francois Berenger <
> francois.ber... at gmail.com <javascript:>> wrote:
>
>> Thanks! That fixes the problem partially.
>>
>> Now, I get:
>>
>> # #require "core.top";;
>> # #require "core.top";;stem/lib/core/core.cma: loaded
>> Error: Reference to undefined global `Condition'
>> # #require "core";;
>> # #require "core";;m/system/lib/core/core.cma: loaded
>> Error: Reference to undefined global `Condition'
>> # #require "async";;
>> # #require "async";;/system/lib/core/core.cma: loaded
>> Error: Reference to undefined global `Condition'
>>
>> Any hint?
>>
>>
>> On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet wrote:
>>
>>>
>>> I'm not sure if this is your problem, but there was something with the 
>>> toplevel (comming with the system compiler) not knowing about opam 
>>> packages. 
>>> I have to launch:
>>>
>>>    ocaml -I $OCAML_TOPLEVEL_PATH
>>>
>>> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`)
>>>
>>>
>>> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger <francois.ber...@**
>>> gmail.com> wrote:
>>>
>>>> Apparently, ocamlfind knows where these libraries are:
>>>>
>>>> $ ocamlfind -query core
>>>> /home/berenger/.opam/system/**lib/core
>>>> $ ocamlfind -query async
>>>> /home/berenger/.opam/system/**lib/async
>>>> $ ocamlfind -query async_extra
>>>> /home/berenger/.opam/system/**lib/async_extra
>>>>
>>>>
>>>> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger 
>>>> wrote:
>>>>>
>>>>> Hello,
>>>>>
>>>>> I'd like to play with core in my toplevel.
>>>>>
>>>>> Is there a recipe?
>>>>>
>>>>> I have installed everything with OPAM:
>>>>> $ opam list | egrep "core|async"
>>>>> async                 108.07.01  Monadic concurrency library
>>>>> async_core            108.07.01  Monadic concurrency library
>>>>> async_extra           108.07.01  Monadic concurrency library
>>>>> async_unix            108.07.01  Monadic concurrency library
>>>>> core                  108.07.01  Industrial strength alternative to 
>>>>> OCaml's standard library
>>>>> core_extended                --  Extra components that are not as 
>>>>> closely vetted or as stable as Core
>>>>>
>>>>> In my toplevel, I type
>>>>> #use "topfind";;
>>>>> #list;;
>>>>>
>>>>> Nothing about core or async shows up.
>>>>> While parmap is there, for example.
>>>>>
>>>>> Is this normal?
>>>>>
>>>>> I guess there is some configuration file of findlib to tweak somewhere.
>>>>>
>>>>> Regards,
>>>>> F.
>>>>>
>>>>>
>>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121106/c83d3b88/attachment-0001.html>

From sebastien.mondet at gmail.com  Wed Nov  7 02:54:26 2012
From: sebastien.mondet at gmail.com (Sebastien Mondet)
Date: Tue, 6 Nov 2012 21:54:26 -0500
Subject: How to load core in the toplevel?
In-Reply-To: <69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com> <69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com>
Message-ID: <CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>

I'm not sure if this is your problem, but there was something with the
toplevel (comming with the system compiler) not knowing about opam
packages.
I have to launch:

   ocaml -I $OCAML_TOPLEVEL_PATH

(the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`)


On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger <
francois.berenger.working at gmail.com> wrote:

> Apparently, ocamlfind knows where these libraries are:
>
> $ ocamlfind -query core
> /home/berenger/.opam/system/lib/core
> $ ocamlfind -query async
> /home/berenger/.opam/system/lib/async
> $ ocamlfind -query async_extra
> /home/berenger/.opam/system/lib/async_extra
>
>
> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger wrote:
>>
>> Hello,
>>
>> I'd like to play with core in my toplevel.
>>
>> Is there a recipe?
>>
>> I have installed everything with OPAM:
>> $ opam list | egrep "core|async"
>> async                 108.07.01  Monadic concurrency library
>> async_core            108.07.01  Monadic concurrency library
>> async_extra           108.07.01  Monadic concurrency library
>> async_unix            108.07.01  Monadic concurrency library
>> core                  108.07.01  Industrial strength alternative to
>> OCaml's standard library
>> core_extended                --  Extra components that are not as closely
>> vetted or as stable as Core
>>
>> In my toplevel, I type
>> #use "topfind";;
>> #list;;
>>
>> Nothing about core or async shows up.
>> While parmap is there, for example.
>>
>> Is this normal?
>>
>> I guess there is some configuration file of findlib to tweak somewhere.
>>
>> Regards,
>> F.
>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121106/e38ceec8/attachment-0001.html>

From sebastien.mondet at gmail.com  Wed Nov  7 03:08:53 2012
From: sebastien.mondet at gmail.com (Sebastien Mondet)
Date: Tue, 6 Nov 2012 22:08:53 -0500
Subject: How to load core in the toplevel?
In-Reply-To: <8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>
 <69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com> <CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>
 <8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com>
Message-ID: <CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com>

I think that one is the
   #thread;;
thing




On Tue, Nov 6, 2012 at 10:06 PM, Francois Berenger <
francois.berenger.working at gmail.com> wrote:

> Thanks! That fixes the problem partially.
>
> Now, I get:
>
> # #require "core.top";;
> # #require "core.top";;stem/lib/core/core.cma: loaded
> Error: Reference to undefined global `Condition'
> # #require "core";;
> # #require "core";;m/system/lib/core/core.cma: loaded
> Error: Reference to undefined global `Condition'
> # #require "async";;
> # #require "async";;/system/lib/core/core.cma: loaded
> Error: Reference to undefined global `Condition'
>
> Any hint?
>
>
> On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet wrote:
>
>>
>> I'm not sure if this is your problem, but there was something with the
>> toplevel (comming with the system compiler) not knowing about opam
>> packages.
>> I have to launch:
>>
>>    ocaml -I $OCAML_TOPLEVEL_PATH
>>
>> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`)
>>
>>
>> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger <francois.ber...@**
>> gmail.com> wrote:
>>
>>> Apparently, ocamlfind knows where these libraries are:
>>>
>>> $ ocamlfind -query core
>>> /home/berenger/.opam/system/**lib/core
>>> $ ocamlfind -query async
>>> /home/berenger/.opam/system/**lib/async
>>> $ ocamlfind -query async_extra
>>> /home/berenger/.opam/system/**lib/async_extra
>>>
>>>
>>> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger
>>> wrote:
>>>>
>>>> Hello,
>>>>
>>>> I'd like to play with core in my toplevel.
>>>>
>>>> Is there a recipe?
>>>>
>>>> I have installed everything with OPAM:
>>>> $ opam list | egrep "core|async"
>>>> async                 108.07.01  Monadic concurrency library
>>>> async_core            108.07.01  Monadic concurrency library
>>>> async_extra           108.07.01  Monadic concurrency library
>>>> async_unix            108.07.01  Monadic concurrency library
>>>> core                  108.07.01  Industrial strength alternative to
>>>> OCaml's standard library
>>>> core_extended                --  Extra components that are not as
>>>> closely vetted or as stable as Core
>>>>
>>>> In my toplevel, I type
>>>> #use "topfind";;
>>>> #list;;
>>>>
>>>> Nothing about core or async shows up.
>>>> While parmap is there, for example.
>>>>
>>>> Is this normal?
>>>>
>>>> I guess there is some configuration file of findlib to tweak somewhere.
>>>>
>>>> Regards,
>>>> F.
>>>>
>>>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121106/77b309e0/attachment-0001.html>

From francois.berenger.working at gmail.com  Wed Nov  7 07:18:21 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Tue, 6 Nov 2012 23:18:21 -0800 (PST)
Subject: any logger in core?
In-Reply-To: <CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
 <CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
 <117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
 <CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
 <20120714161518.GJ14582@dark.recoil.org>
 <9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
 <CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
 <004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
 <5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
 <CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
 <CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
 <CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
 <7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
 <CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
 <CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
 <CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
 <CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
Message-ID: <d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>

Hello,

How can I construct a value of type Async_extra.Log.Level
and an Async_extra.Log.Output?

Sorry for the stupid question but I have never used
polymorphic variants.

If you can point me to some simple explanation
on them, I will go and read it too
(I looked at http://caml.inria.fr/pub/docs/manual-ocaml/manual006.html
but it does not tell me why I should use them, just how).

Thanks a lot,
F.

On Wednesday, November 7, 2012 10:59:54 AM UTC+9, Francois Berenger wrote:
>
> Yes I saw it, thanks. 
>
> I'll also take a look at the .mli file, as I was advised to do so by 
> David House. 
> I'll try to make an example program to check I can use it correctly. 
>
> On Tue, Nov 6, 2012 at 12:12 PM, Yaron Minsky <yminsky at janestreet.com> 
> wrote: 
> > No, did you see my link?  You can read the ocamldocs: 
> > 
> > 
> https://ocaml.janestreet.com/ocaml-core/108.07.01/doc/async_extra/Log.html 
> > 
> > On Mon, Nov 5, 2012 at 9:51 PM, Francois Berenger 
> > <francois.berenger.working at gmail.com> wrote: 
> >> Argh! I'm forced to read an mli file. ;) 
> >> 
> >> On Mon, Nov 5, 2012 at 8:15 PM, David House <dhouse at janestreet.com> 
> wrote: 
> >>> Judging from the mli, there should be some ocamldocs, yes. 
> >>> 
> >>> However, I recommend just looking at the mli. 
> >>> 
> >>> On Mon, Nov 5, 2012 at 6:08 AM, Francois Berenger 
> >>> <francois.berenger.working at gmail.com> wrote: 
> >>>> 
> >>>> Is there some ocamldoc for it? 
> >>>> 
> >>>> I think I managed to compile the ocamldoc for core and async, but did 
> >>>> not find anything about a Log module into it. 
> >>>> 
> >>>> 
> >>>> On Sunday, November 4, 2012 9:15:45 PM UTC+9, Yaron Minsky wrote: 
> >>>>> 
> >>>>> Don't feel too bad about knowing about it.  It's quite new. 
> >>>>> 
> >>>>> But yeah, moving to it eventually sounds right. 
> >>>>> 
> >>>>> On Sat, Nov 3, 2012 at 6:43 PM, Sean McLaughlin <sea... at gmail.com> 
> wrote: 
> >>>>>> 
> >>>>>> No, sorry.  I didn't know about Async.Log, and I wrote my own 
> logger. 
> >>>>>> Switching to this one is probably a good idea in the long run for 
> >>>>>> omake-server. 
> >>>>>> 
> >>>>>> On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky <
> ymi... at janestreet.com> 
> >>>>>> wrote: 
> >>>>>> > Sean, does your omake-server use Async.Log?  That might be a good 
> >>>>>> > example. 
> >>>>>> > 
> >>>>>> > y 
> >>>>>> > 
> >>>>>> > On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger 
> >>>>>> > <francois.ber... at gmail.com> wrote: 
> >>>>>> >> Is there some example program using this logger? 
> >>>>>> >> 
> >>>>>> >> 
> >>>>>> >> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger 
> >>>>>> >> wrote: 
> >>>>>> >>> 
> >>>>>> >>> OK, I'm hooked now. 
> >>>>>> >>> 
> >>>>>> >>> I plus core in my new project. 
> >>>>>> >>> 
> >>>>>> >>> Thanks! 
> >>>>>> >>> F. 
> >>>>>> >>> 
> >>>>>> >> 
> >>>>> 
> >>>>> 
> >>>> 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121106/9bd61581/attachment-0001.html>

From yminsky at janestreet.com  Wed Nov  7 13:37:56 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Wed, 7 Nov 2012 08:37:56 -0500
Subject: any logger in core?
In-Reply-To: <CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
	<CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
	<7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
	<CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
	<CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
	<CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
	<CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
	<d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>
	<CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>
Message-ID: <CACLX4jRy4opueNd=8hJ7==Dtrh7JPa8KgY9_TyUsAdr-Wezi7w@mail.gmail.com>


You need to call Scheduler.go () to get the async scheduler running.

On Wed, Nov 7, 2012 at 3:34 AM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> I could create a test program.
>
> It compiles, at least, but has the funny property of not logging anything out.
>
> ---
> module Log  = Async_extra.Log
>
> let main () =
>
>   let logger = Log.create (Log.Level.of_string "Debug") [Log.Output.screen] in
>
>   Log.raw   logger "%s\n" "raw log";
>   Log.info  logger "%s\n" "info log";
>   Log.error logger "%s\n" "error log";
>   Log.debug logger "%s\n" "debug log";
>
>   Log.close logger
> ;;
>
> main()
> ---
>
> Here is the oasis file for it:
> ---
> OASISFormat: 0.3
> Name:        Toto
> Version:     0.1
> Synopsis:    Titi
> Authors:     Me
> License:     LGPL-3
> Plugins:     META (0.3), DevFiles (0.3)
>
> Executable logger_test
>   Path:           .
>   BuildDepends:   async_extra
>   BuildTools:     ocamlbuild
>   CompiledObject: native
>   MainIs:         logger_test.ml
> ---
>
> I was thinking all logs would print right away.
>
> Regards,
> F.
>
> On Wed, Nov 7, 2012 at 4:18 PM, Francois Berenger
> <francois.berenger.working at gmail.com> wrote:
>> Hello,
>>
>> How can I construct a value of type Async_extra.Log.Level
>> and an Async_extra.Log.Output?
>>
>> Sorry for the stupid question but I have never used
>> polymorphic variants.
>>
>> If you can point me to some simple explanation
>> on them, I will go and read it too
>> (I looked at http://caml.inria.fr/pub/docs/manual-ocaml/manual006.html
>> but it does not tell me why I should use them, just how).
>>
>> Thanks a lot,
>> F.
>>
>>
>> On Wednesday, November 7, 2012 10:59:54 AM UTC+9, Francois Berenger wrote:
>>>
>>> Yes I saw it, thanks.
>>>
>>> I'll also take a look at the .mli file, as I was advised to do so by
>>> David House.
>>> I'll try to make an example program to check I can use it correctly.
>>>
>>> On Tue, Nov 6, 2012 at 12:12 PM, Yaron Minsky <yminsky at janestreet.com>
>>> wrote:
>>> > No, did you see my link?  You can read the ocamldocs:
>>> >
>>> >
>>> > https://ocaml.janestreet.com/ocaml-core/108.07.01/doc/async_extra/Log.html
>>> >
>>> > On Mon, Nov 5, 2012 at 9:51 PM, Francois Berenger
>>> > <francois.berenger.working at gmail.com> wrote:
>>> >> Argh! I'm forced to read an mli file. ;)
>>> >>
>>> >> On Mon, Nov 5, 2012 at 8:15 PM, David House <dhouse at janestreet.com>
>>> >> wrote:
>>> >>> Judging from the mli, there should be some ocamldocs, yes.
>>> >>>
>>> >>> However, I recommend just looking at the mli.
>>> >>>
>>> >>> On Mon, Nov 5, 2012 at 6:08 AM, Francois Berenger
>>> >>> <francois.berenger.working at gmail.com> wrote:
>>> >>>>
>>> >>>> Is there some ocamldoc for it?
>>> >>>>
>>> >>>> I think I managed to compile the ocamldoc for core and async, but did
>>> >>>> not find anything about a Log module into it.
>>> >>>>
>>> >>>>
>>> >>>> On Sunday, November 4, 2012 9:15:45 PM UTC+9, Yaron Minsky wrote:
>>> >>>>>
>>> >>>>> Don't feel too bad about knowing about it.  It's quite new.
>>> >>>>>
>>> >>>>> But yeah, moving to it eventually sounds right.
>>> >>>>>
>>> >>>>> On Sat, Nov 3, 2012 at 6:43 PM, Sean McLaughlin <sea... at gmail.com>
>>> >>>>> wrote:
>>> >>>>>>
>>> >>>>>> No, sorry.  I didn't know about Async.Log, and I wrote my own
>>> >>>>>> logger.
>>> >>>>>> Switching to this one is probably a good idea in the long run for
>>> >>>>>> omake-server.
>>> >>>>>>
>>> >>>>>> On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky
>>> >>>>>> <ymi... at janestreet.com>
>>> >>>>>> wrote:
>>> >>>>>> > Sean, does your omake-server use Async.Log?  That might be a good
>>> >>>>>> > example.
>>> >>>>>> >
>>> >>>>>> > y
>>> >>>>>> >
>>> >>>>>> > On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger
>>> >>>>>> > <francois.ber... at gmail.com> wrote:
>>> >>>>>> >> Is there some example program using this logger?
>>> >>>>>> >>
>>> >>>>>> >>
>>> >>>>>> >> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger
>>> >>>>>> >> wrote:
>>> >>>>>> >>>
>>> >>>>>> >>> OK, I'm hooked now.
>>> >>>>>> >>>
>>> >>>>>> >>> I plus core in my new project.
>>> >>>>>> >>>
>>> >>>>>> >>> Thanks!
>>> >>>>>> >>> F.
>>> >>>>>> >>>
>>> >>>>>> >>
>>> >>>>>
>>> >>>>>
>>> >>>>


From dhouse at janestreet.com  Wed Nov  7 09:55:59 2012
From: dhouse at janestreet.com (David House)
Date: Wed, 7 Nov 2012 09:55:59 +0000
Subject: any logger in core?
In-Reply-To: <CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
	<CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
	<7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
	<CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
	<CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
	<CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
	<CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
	<d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>
	<CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>
Message-ID: <CAK=fH+gh3MGxObP-KUPVWfDCZJk8GZhTF+S6c_ktXCuK4_wbHg@mail.gmail.com>


You need to start the scheduler. You should do this in all async
programs, or else nothing will get run. Creating a log creates an
async Pipe.t, and doing Log.foo puts things onto that Pipe.t. There is
an async job to read things off of the pipe and to write them out. But
if you don't start the scheduler, this job won't get run. So add the
following at bottom of your code:

let () =
  main ();
  never_returns (Scheduler.go ())

The reason this is done, rather than just writing immediately, is in
case the write blocks, which would halt the whole process. If you
decide you don't care about this risk (e.g. if you're writing to a
terminal then it's not very likely), you can use Log.Blocking.

Also, a smaller point, it's more idiomatic to write "open Async.Std"
rather than referring directly to one of the three async
sub-libraries.

On Wed, Nov 7, 2012 at 8:34 AM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> I could create a test program.
>
> It compiles, at least, but has the funny property of not logging anything out.
>
> ---
> module Log  = Async_extra.Log
>
> let main () =
>
>   let logger = Log.create (Log.Level.of_string "Debug") [Log.Output.screen] in
>
>   Log.raw   logger "%s\n" "raw log";
>   Log.info  logger "%s\n" "info log";
>   Log.error logger "%s\n" "error log";
>   Log.debug logger "%s\n" "debug log";
>
>   Log.close logger
> ;;
>
> main()
> ---
>
> Here is the oasis file for it:
> ---
> OASISFormat: 0.3
> Name:        Toto
> Version:     0.1
> Synopsis:    Titi
> Authors:     Me
> License:     LGPL-3
> Plugins:     META (0.3), DevFiles (0.3)
>
> Executable logger_test
>   Path:           .
>   BuildDepends:   async_extra
>   BuildTools:     ocamlbuild
>   CompiledObject: native
>   MainIs:         logger_test.ml
> ---
>
> I was thinking all logs would print right away.
>
> Regards,
> F.
>
> On Wed, Nov 7, 2012 at 4:18 PM, Francois Berenger
> <francois.berenger.working at gmail.com> wrote:
>> Hello,
>>
>> How can I construct a value of type Async_extra.Log.Level
>> and an Async_extra.Log.Output?
>>
>> Sorry for the stupid question but I have never used
>> polymorphic variants.
>>
>> If you can point me to some simple explanation
>> on them, I will go and read it too
>> (I looked at http://caml.inria.fr/pub/docs/manual-ocaml/manual006.html
>> but it does not tell me why I should use them, just how).
>>
>> Thanks a lot,
>> F.
>>
>>
>> On Wednesday, November 7, 2012 10:59:54 AM UTC+9, Francois Berenger wrote:
>>>
>>> Yes I saw it, thanks.
>>>
>>> I'll also take a look at the .mli file, as I was advised to do so by
>>> David House.
>>> I'll try to make an example program to check I can use it correctly.
>>>
>>> On Tue, Nov 6, 2012 at 12:12 PM, Yaron Minsky <yminsky at janestreet.com>
>>> wrote:
>>> > No, did you see my link?  You can read the ocamldocs:
>>> >
>>> >
>>> > https://ocaml.janestreet.com/ocaml-core/108.07.01/doc/async_extra/Log.html
>>> >
>>> > On Mon, Nov 5, 2012 at 9:51 PM, Francois Berenger
>>> > <francois.berenger.working at gmail.com> wrote:
>>> >> Argh! I'm forced to read an mli file. ;)
>>> >>
>>> >> On Mon, Nov 5, 2012 at 8:15 PM, David House <dhouse at janestreet.com>
>>> >> wrote:
>>> >>> Judging from the mli, there should be some ocamldocs, yes.
>>> >>>
>>> >>> However, I recommend just looking at the mli.
>>> >>>
>>> >>> On Mon, Nov 5, 2012 at 6:08 AM, Francois Berenger
>>> >>> <francois.berenger.working at gmail.com> wrote:
>>> >>>>
>>> >>>> Is there some ocamldoc for it?
>>> >>>>
>>> >>>> I think I managed to compile the ocamldoc for core and async, but did
>>> >>>> not find anything about a Log module into it.
>>> >>>>
>>> >>>>
>>> >>>> On Sunday, November 4, 2012 9:15:45 PM UTC+9, Yaron Minsky wrote:
>>> >>>>>
>>> >>>>> Don't feel too bad about knowing about it.  It's quite new.
>>> >>>>>
>>> >>>>> But yeah, moving to it eventually sounds right.
>>> >>>>>
>>> >>>>> On Sat, Nov 3, 2012 at 6:43 PM, Sean McLaughlin <sea... at gmail.com>
>>> >>>>> wrote:
>>> >>>>>>
>>> >>>>>> No, sorry.  I didn't know about Async.Log, and I wrote my own
>>> >>>>>> logger.
>>> >>>>>> Switching to this one is probably a good idea in the long run for
>>> >>>>>> omake-server.
>>> >>>>>>
>>> >>>>>> On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky
>>> >>>>>> <ymi... at janestreet.com>
>>> >>>>>> wrote:
>>> >>>>>> > Sean, does your omake-server use Async.Log?  That might be a good
>>> >>>>>> > example.
>>> >>>>>> >
>>> >>>>>> > y
>>> >>>>>> >
>>> >>>>>> > On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger
>>> >>>>>> > <francois.ber... at gmail.com> wrote:
>>> >>>>>> >> Is there some example program using this logger?
>>> >>>>>> >>
>>> >>>>>> >>
>>> >>>>>> >> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger
>>> >>>>>> >> wrote:
>>> >>>>>> >>>
>>> >>>>>> >>> OK, I'm hooked now.
>>> >>>>>> >>>
>>> >>>>>> >>> I plus core in my new project.
>>> >>>>>> >>>
>>> >>>>>> >>> Thanks!
>>> >>>>>> >>> F.
>>> >>>>>> >>>
>>> >>>>>> >>
>>> >>>>>
>>> >>>>>
>>> >>>>


From francois.berenger.working at gmail.com  Wed Nov  7 01:59:53 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Wed, 7 Nov 2012 10:59:53 +0900
Subject: any logger in core?
In-Reply-To: <CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
	<CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
	<7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
	<CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
	<CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
	<CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
Message-ID: <CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>


Yes I saw it, thanks.

I'll also take a look at the .mli file, as I was advised to do so by
David House.
I'll try to make an example program to check I can use it correctly.

On Tue, Nov 6, 2012 at 12:12 PM, Yaron Minsky <yminsky at janestreet.com> wrote:
> No, did you see my link?  You can read the ocamldocs:
>
> https://ocaml.janestreet.com/ocaml-core/108.07.01/doc/async_extra/Log.html
>
> On Mon, Nov 5, 2012 at 9:51 PM, Francois Berenger
> <francois.berenger.working at gmail.com> wrote:
>> Argh! I'm forced to read an mli file. ;)
>>
>> On Mon, Nov 5, 2012 at 8:15 PM, David House <dhouse at janestreet.com> wrote:
>>> Judging from the mli, there should be some ocamldocs, yes.
>>>
>>> However, I recommend just looking at the mli.
>>>
>>> On Mon, Nov 5, 2012 at 6:08 AM, Francois Berenger
>>> <francois.berenger.working at gmail.com> wrote:
>>>>
>>>> Is there some ocamldoc for it?
>>>>
>>>> I think I managed to compile the ocamldoc for core and async, but did
>>>> not find anything about a Log module into it.
>>>>
>>>>
>>>> On Sunday, November 4, 2012 9:15:45 PM UTC+9, Yaron Minsky wrote:
>>>>>
>>>>> Don't feel too bad about knowing about it.  It's quite new.
>>>>>
>>>>> But yeah, moving to it eventually sounds right.
>>>>>
>>>>> On Sat, Nov 3, 2012 at 6:43 PM, Sean McLaughlin <sea... at gmail.com> wrote:
>>>>>>
>>>>>> No, sorry.  I didn't know about Async.Log, and I wrote my own logger.
>>>>>> Switching to this one is probably a good idea in the long run for
>>>>>> omake-server.
>>>>>>
>>>>>> On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky <ymi... at janestreet.com>
>>>>>> wrote:
>>>>>> > Sean, does your omake-server use Async.Log?  That might be a good
>>>>>> > example.
>>>>>> >
>>>>>> > y
>>>>>> >
>>>>>> > On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger
>>>>>> > <francois.ber... at gmail.com> wrote:
>>>>>> >> Is there some example program using this logger?
>>>>>> >>
>>>>>> >>
>>>>>> >> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger
>>>>>> >> wrote:
>>>>>> >>>
>>>>>> >>> OK, I'm hooked now.
>>>>>> >>>
>>>>>> >>> I plus core in my new project.
>>>>>> >>>
>>>>>> >>> Thanks!
>>>>>> >>> F.
>>>>>> >>>
>>>>>> >>
>>>>>
>>>>>
>>>>


From anil at recoil.org  Wed Nov  7 16:42:36 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Wed, 7 Nov 2012 16:42:36 +0000
Subject: How to load core in the toplevel?
In-Reply-To: <9c71cd13-99c1-40e5-bc68-08217ebb1438@googlegroups.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com> <69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com> <CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com> <8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com> <CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com> <9c71cd13-99c1-40e5-bc68-08217ebb1438@googlegroups.com>
Message-ID: <0347676C-3D96-40FF-96E9-02C4242825E5@recoil.org>

You should also add "#camlp4o" so that toplevel syntax extensions work too.

I'd really recommend using 'utop' (installable via OPAM) instead of the default toplevel. It doesn't require the extra -I that the default toplevel needs, and has a really nice interactive interpreter.

My full .ocamlinit with utop is:

#use "topfind"
#camlp4o
#thread
#require "core.top";;
#require "async";;
open Core.Std
open Async.Std


-anil

On 7 Nov 2012, at 05:33, Francois Berenger <francois.berenger.working at gmail.com> wrote:

> Thanks a lot.
> 
> So, the whole recipe in my case was:
> 
> ocaml -I $OCAML_TOPLEVEL_PATH
> #thread;;
> #require "core.top";;
> #require "async";;
> 
> Regards,
> F.
> 
> On Wednesday, November 7, 2012 12:09:15 PM UTC+9, Sebastien Mondet wrote:
> 
> 
> I think that one is the  
>    #thread;;
> thing
> 
> 
> 
> 
> On Tue, Nov 6, 2012 at 10:06 PM, Francois Berenger <francois.ber... at gmail.com> wrote:
> Thanks! That fixes the problem partially.
> 
> Now, I get:
> 
> # #require "core.top";;
> # #require "core.top";;stem/lib/core/core.cma: loaded
> Error: Reference to undefined global `Condition'
> # #require "core";;
> # #require "core";;m/system/lib/core/core.cma: loaded
> Error: Reference to undefined global `Condition'
> # #require "async";;
> # #require "async";;/system/lib/core/core.cma: loaded
> Error: Reference to undefined global `Condition'
> 
> Any hint?
> 
> 
> On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet wrote:
> 
> I'm not sure if this is your problem, but there was something with the toplevel (comming with the system compiler) not knowing about opam packages. 
> I have to launch:
> 
>    ocaml -I $OCAML_TOPLEVEL_PATH
> 
> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`)
> 
> 
> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger <francois.ber... at gmail.com> wrote:
> Apparently, ocamlfind knows where these libraries are:
> 
> $ ocamlfind -query core
> /home/berenger/.opam/system/lib/core
> $ ocamlfind -query async
> /home/berenger/.opam/system/lib/async
> $ ocamlfind -query async_extra
> /home/berenger/.opam/system/lib/async_extra
> 
> 
> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger wrote:
> Hello,
> 
> I'd like to play with core in my toplevel.
> 
> Is there a recipe?
> 
> I have installed everything with OPAM:
> $ opam list | egrep "core|async"
> async                 108.07.01  Monadic concurrency library
> async_core            108.07.01  Monadic concurrency library
> async_extra           108.07.01  Monadic concurrency library
> async_unix            108.07.01  Monadic concurrency library
> core                  108.07.01  Industrial strength alternative to OCaml's standard library
> core_extended                --  Extra components that are not as closely vetted or as stable as Core
> 
> In my toplevel, I type
> #use "topfind";;
> #list;;
> 
> Nothing about core or async shows up.
> While parmap is there, for example.
> 
> Is this normal?
> 
> I guess there is some configuration file of findlib to tweak somewhere.
> 
> Regards,
> F.
> 
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121107/693b19b4/attachment-0001.html>

From francois.berenger.working at gmail.com  Wed Nov  7 08:34:07 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Wed, 7 Nov 2012 17:34:07 +0900
Subject: any logger in core?
In-Reply-To: <d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
	<CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
	<7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
	<CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
	<CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
	<CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
	<CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
	<d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>
Message-ID: <CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>


I could create a test program.

It compiles, at least, but has the funny property of not logging anything out.

---
module Log  = Async_extra.Log

let main () =

  let logger = Log.create (Log.Level.of_string "Debug") [Log.Output.screen] in

  Log.raw   logger "%s\n" "raw log";
  Log.info  logger "%s\n" "info log";
  Log.error logger "%s\n" "error log";
  Log.debug logger "%s\n" "debug log";

  Log.close logger
;;

main()
---

Here is the oasis file for it:
---
OASISFormat: 0.3
Name:        Toto
Version:     0.1
Synopsis:    Titi
Authors:     Me
License:     LGPL-3
Plugins:     META (0.3), DevFiles (0.3)

Executable logger_test
  Path:           .
  BuildDepends:   async_extra
  BuildTools:     ocamlbuild
  CompiledObject: native
  MainIs:         logger_test.ml
---

I was thinking all logs would print right away.

Regards,
F.

On Wed, Nov 7, 2012 at 4:18 PM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> Hello,
>
> How can I construct a value of type Async_extra.Log.Level
> and an Async_extra.Log.Output?
>
> Sorry for the stupid question but I have never used
> polymorphic variants.
>
> If you can point me to some simple explanation
> on them, I will go and read it too
> (I looked at http://caml.inria.fr/pub/docs/manual-ocaml/manual006.html
> but it does not tell me why I should use them, just how).
>
> Thanks a lot,
> F.
>
>
> On Wednesday, November 7, 2012 10:59:54 AM UTC+9, Francois Berenger wrote:
>>
>> Yes I saw it, thanks.
>>
>> I'll also take a look at the .mli file, as I was advised to do so by
>> David House.
>> I'll try to make an example program to check I can use it correctly.
>>
>> On Tue, Nov 6, 2012 at 12:12 PM, Yaron Minsky <yminsky at janestreet.com>
>> wrote:
>> > No, did you see my link?  You can read the ocamldocs:
>> >
>> >
>> > https://ocaml.janestreet.com/ocaml-core/108.07.01/doc/async_extra/Log.html
>> >
>> > On Mon, Nov 5, 2012 at 9:51 PM, Francois Berenger
>> > <francois.berenger.working at gmail.com> wrote:
>> >> Argh! I'm forced to read an mli file. ;)
>> >>
>> >> On Mon, Nov 5, 2012 at 8:15 PM, David House <dhouse at janestreet.com>
>> >> wrote:
>> >>> Judging from the mli, there should be some ocamldocs, yes.
>> >>>
>> >>> However, I recommend just looking at the mli.
>> >>>
>> >>> On Mon, Nov 5, 2012 at 6:08 AM, Francois Berenger
>> >>> <francois.berenger.working at gmail.com> wrote:
>> >>>>
>> >>>> Is there some ocamldoc for it?
>> >>>>
>> >>>> I think I managed to compile the ocamldoc for core and async, but did
>> >>>> not find anything about a Log module into it.
>> >>>>
>> >>>>
>> >>>> On Sunday, November 4, 2012 9:15:45 PM UTC+9, Yaron Minsky wrote:
>> >>>>>
>> >>>>> Don't feel too bad about knowing about it.  It's quite new.
>> >>>>>
>> >>>>> But yeah, moving to it eventually sounds right.
>> >>>>>
>> >>>>> On Sat, Nov 3, 2012 at 6:43 PM, Sean McLaughlin <sea... at gmail.com>
>> >>>>> wrote:
>> >>>>>>
>> >>>>>> No, sorry.  I didn't know about Async.Log, and I wrote my own
>> >>>>>> logger.
>> >>>>>> Switching to this one is probably a good idea in the long run for
>> >>>>>> omake-server.
>> >>>>>>
>> >>>>>> On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky
>> >>>>>> <ymi... at janestreet.com>
>> >>>>>> wrote:
>> >>>>>> > Sean, does your omake-server use Async.Log?  That might be a good
>> >>>>>> > example.
>> >>>>>> >
>> >>>>>> > y
>> >>>>>> >
>> >>>>>> > On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger
>> >>>>>> > <francois.ber... at gmail.com> wrote:
>> >>>>>> >> Is there some example program using this logger?
>> >>>>>> >>
>> >>>>>> >>
>> >>>>>> >> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois Berenger
>> >>>>>> >> wrote:
>> >>>>>> >>>
>> >>>>>> >>> OK, I'm hooked now.
>> >>>>>> >>>
>> >>>>>> >>> I plus core in my new project.
>> >>>>>> >>>
>> >>>>>> >>> Thanks!
>> >>>>>> >>> F.
>> >>>>>> >>>
>> >>>>>> >>
>> >>>>>
>> >>>>>
>> >>>>


From francois.berenger.fun at gmail.com  Thu Nov  8 02:12:51 2012
From: francois.berenger.fun at gmail.com (Francois)
Date: Wed, 7 Nov 2012 18:12:51 -0800 (PST)
Subject: How to load core in the toplevel?
In-Reply-To: <0347676C-3D96-40FF-96E9-02C4242825E5@recoil.org>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com> <69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com> <CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com> <8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com> <CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com> <9c71cd13-99c1-40e5-bc68-08217ebb1438@googlegroups.com>
 <0347676C-3D96-40FF-96E9-02C4242825E5@recoil.org>
Message-ID: <d8383ac4-4b16-4d76-8545-d0ca5629af7e@googlegroups.com>



On Thursday, November 8, 2012 1:42:41 AM UTC+9, Anil Madhavapeddy wrote:
>
> You should also add "#camlp4o" so that toplevel syntax extensions work too.
>

In the future, I think only the one from janestreet to do automatic
translations to/from s-expressions interests me.
I prefer to read standard OCaml code usually.
 

>
> I'd really recommend using 'utop' (installable via OPAM) instead of the 
> default toplevel. It doesn't require the extra -I that the default toplevel 
> needs, and has a really nice interactive interpreter.
>

I have to read about it.
I'm conservative about using new things (I'm an isolated OCaml developper, 
no one nearby to help me in case
I mess with something, that's why I'm so active on mailing lists).
 

>
> My full .ocamlinit with utop is:
>
> #use "topfind"
> #camlp4o
> #thread
> #require "core.top";;
> #require "async";;
> open Core.Std
> open Async.Std
>

Thanks for sharing this.
I'm very worried about the open directives
and try to never use them so I don't think
it would fit me for the moment.

Best regards,
Francois.



>
> -anil
>
> On 7 Nov 2012, at 05:33, Francois Berenger <francois.ber... at gmail.com<javascript:>> 
> wrote:
>
> Thanks a lot.
>
> So, the whole recipe in my case was:
>
> ocaml -I $OCAML_TOPLEVEL_PATH
> #thread;;
> #require "core.top";;
> #require "async";;
>
> Regards,
> F.
>
> On Wednesday, November 7, 2012 12:09:15 PM UTC+9, Sebastien Mondet wrote:
>>
>>
>>
>> I think that one is the  
>>    #thread;;
>> thing
>>
>>
>>
>>
>> On Tue, Nov 6, 2012 at 10:06 PM, Francois Berenger <
>> francois.ber... at gmail.com> wrote:
>>
>>> Thanks! That fixes the problem partially.
>>>
>>> Now, I get:
>>>
>>> # #require "core.top";;
>>> # #require "core.top";;stem/lib/core/core.cma: loaded
>>> Error: Reference to undefined global `Condition'
>>> # #require "core";;
>>> # #require "core";;m/system/lib/core/core.cma: loaded
>>> Error: Reference to undefined global `Condition'
>>> # #require "async";;
>>> # #require "async";;/system/lib/core/core.cma: loaded
>>> Error: Reference to undefined global `Condition'
>>>
>>> Any hint?
>>>
>>>
>>> On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet wrote:
>>>
>>>>
>>>> I'm not sure if this is your problem, but there was something with the 
>>>> toplevel (comming with the system compiler) not knowing about opam 
>>>> packages. 
>>>> I have to launch:
>>>>
>>>>    ocaml -I $OCAML_TOPLEVEL_PATH
>>>>
>>>> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`)
>>>>
>>>>
>>>> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger <francois.ber...@**
>>>> gmail.com> wrote:
>>>>
>>>>> Apparently, ocamlfind knows where these libraries are:
>>>>>
>>>>> $ ocamlfind -query core
>>>>> /home/berenger/.opam/system/**lib/core
>>>>> $ ocamlfind -query async
>>>>> /home/berenger/.opam/system/**lib/async
>>>>> $ ocamlfind -query async_extra
>>>>> /home/berenger/.opam/system/**lib/async_extra
>>>>>
>>>>>
>>>>> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger 
>>>>> wrote:
>>>>>>
>>>>>> Hello,
>>>>>>
>>>>>> I'd like to play with core in my toplevel.
>>>>>>
>>>>>> Is there a recipe?
>>>>>>
>>>>>> I have installed everything with OPAM:
>>>>>> $ opam list | egrep "core|async"
>>>>>> async                 108.07.01  Monadic concurrency library
>>>>>> async_core            108.07.01  Monadic concurrency library
>>>>>> async_extra           108.07.01  Monadic concurrency library
>>>>>> async_unix            108.07.01  Monadic concurrency library
>>>>>> core                  108.07.01  Industrial strength alternative to 
>>>>>> OCaml's standard library
>>>>>> core_extended                --  Extra components that are not as 
>>>>>> closely vetted or as stable as Core
>>>>>>
>>>>>> In my toplevel, I type
>>>>>> #use "topfind";;
>>>>>> #list;;
>>>>>>
>>>>>> Nothing about core or async shows up.
>>>>>> While parmap is there, for example.
>>>>>>
>>>>>> Is this normal?
>>>>>>
>>>>>> I guess there is some configuration file of findlib to tweak 
>>>>>> somewhere.
>>>>>>
>>>>>> Regards,
>>>>>> F.
>>>>>>
>>>>>>
>>>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121107/9f4d9545/attachment-0001.html>

From francois.berenger.fun at gmail.com  Thu Nov  8 02:39:42 2012
From: francois.berenger.fun at gmail.com (Francois)
Date: Wed, 7 Nov 2012 18:39:42 -0800 (PST)
Subject: How to compile the examples in ocaml-core/base/async/examples ?
Message-ID: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>

Hello,

I'd like to compile then run some of them,
then have a look at their build scripts.

I don't know where never_returns is defined.

I also don't know with what lib I should link in
order to access the module Jane.Std.

Thanks,
F.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121107/7e32aab5/attachment-0001.html>

From francois.berenger.fun at gmail.com  Thu Nov  8 03:48:14 2012
From: francois.berenger.fun at gmail.com (Francois)
Date: Wed, 7 Nov 2012 19:48:14 -0800 (PST)
Subject: any logger in core?
In-Reply-To: <CAK=fH+gh3MGxObP-KUPVWfDCZJk8GZhTF+S6c_ktXCuK4_wbHg@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
 <CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
 <117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
 <CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
 <20120714161518.GJ14582@dark.recoil.org>
 <9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
 <CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
 <004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
 <5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
 <CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
 <CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
 <CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
 <7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
 <CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
 <CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
 <CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
 <CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
 <d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>
 <CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>
 <CAK=fH+gh3MGxObP-KUPVWfDCZJk8GZhTF+S6c_ktXCuK4_wbHg@mail.gmail.com>
Message-ID: <04cc5df5-105f-4f90-8769-f499596d58ed@googlegroups.com>



On Wednesday, November 7, 2012 6:57:04 PM UTC+9, David House wrote:
>
> You need to start the scheduler. You should do this in all async 
> programs, or else nothing will get run. Creating a log creates an 
> async Pipe.t, and doing Log.foo puts things onto that Pipe.t. There is 
> an async job to read things off of the pipe and to write them out. But 
> if you don't start the scheduler, this job won't get run. So add the 
> following at bottom of your code: 
>
> let () = 
>   main (); 
>   never_returns (Scheduler.go ()) 
>

I don't know where to find never_returns.

But the following did work (and never stop):
---
module Log   = Async_extra.Log
module Sched = Async.Std.Scheduler

let main () =

  let logger = Log.create (Log.Level.of_string "Debug") [Log.Output.screen] 
in

  Log.raw   logger "%s\n" "raw log";
  Log.info  logger "%s\n" "info log";
  Log.error logger "%s\n" "error log";
  Log.debug logger "%s\n" "debug log";

  Log.close logger
;;

main();
Sched.go ()
---
 

>
> The reason this is done, rather than just writing immediately, is in 
> case the write blocks,


I see.

 

> which would halt the whole process. If you 
> decide you don't care about this risk (e.g. if you're writing to a 
> terminal then it's not very likely), you can use Log.Blocking. 
>

I'll try to use that. 


> Also, a smaller point, it's more idiomatic to write "open Async.Std" 
> rather than referring directly to one of the three async 
> sub-libraries. 
>

I'm affraid of open directives, I try to keep my code _very_ explicit
about what it is doing and which function from which module is used
(maybe because of past overexposure to some C++ code).

For the moment, I use the stdlib + batteries
+ (async and async_extra for just the logger).

In some other future thread, I might ask for some help on the
best way to remove batteries, then remove the stdlib,
hopefully to just depend on core and async in the future.

Thanks for all the help,
Francois.
 

>
> On Wed, Nov 7, 2012 at 8:34 AM, Francois Berenger 
> <francois.ber... at gmail.com <javascript:>> wrote: 
> > I could create a test program. 
> > 
> > It compiles, at least, but has the funny property of not logging 
> anything out. 
> > 
> > --- 
> > module Log  = Async_extra.Log 
> > 
> > let main () = 
> > 
> >   let logger = Log.create (Log.Level.of_string "Debug") 
> [Log.Output.screen] in 
> > 
> >   Log.raw   logger "%s\n" "raw log"; 
> >   Log.info  logger "%s\n" "info log"; 
> >   Log.error logger "%s\n" "error log"; 
> >   Log.debug logger "%s\n" "debug log"; 
> > 
> >   Log.close logger 
> > ;; 
> > 
> > main() 
> > --- 
> > 
> > Here is the oasis file for it: 
> > --- 
> > OASISFormat: 0.3 
> > Name:        Toto 
> > Version:     0.1 
> > Synopsis:    Titi 
> > Authors:     Me 
> > License:     LGPL-3 
> > Plugins:     META (0.3), DevFiles (0.3) 
> > 
> > Executable logger_test 
> >   Path:           . 
> >   BuildDepends:   async_extra 
> >   BuildTools:     ocamlbuild 
> >   CompiledObject: native 
> >   MainIs:         logger_test.ml 
> > --- 
> > 
> > I was thinking all logs would print right away. 
> > 
> > Regards, 
> > F. 
> > 
> > On Wed, Nov 7, 2012 at 4:18 PM, Francois Berenger 
> > <francois.ber... at gmail.com <javascript:>> wrote: 
> >> Hello, 
> >> 
> >> How can I construct a value of type Async_extra.Log.Level 
> >> and an Async_extra.Log.Output? 
> >> 
> >> Sorry for the stupid question but I have never used 
> >> polymorphic variants. 
> >> 
> >> If you can point me to some simple explanation 
> >> on them, I will go and read it too 
> >> (I looked at http://caml.inria.fr/pub/docs/manual-ocaml/manual006.html 
> >> but it does not tell me why I should use them, just how). 
> >> 
> >> Thanks a lot, 
> >> F. 
> >> 
> >> 
> >> On Wednesday, November 7, 2012 10:59:54 AM UTC+9, Francois Berenger 
> wrote: 
> >>> 
> >>> Yes I saw it, thanks. 
> >>> 
> >>> I'll also take a look at the .mli file, as I was advised to do so by 
> >>> David House. 
> >>> I'll try to make an example program to check I can use it correctly. 
> >>> 
> >>> On Tue, Nov 6, 2012 at 12:12 PM, Yaron Minsky <ymi... at janestreet.com<javascript:>> 
>
> >>> wrote: 
> >>> > No, did you see my link?  You can read the ocamldocs: 
> >>> > 
> >>> > 
> >>> > 
> https://ocaml.janestreet.com/ocaml-core/108.07.01/doc/async_extra/Log.html 
> >>> > 
> >>> > On Mon, Nov 5, 2012 at 9:51 PM, Francois Berenger 
> >>> > <francois.ber... at gmail.com <javascript:>> wrote: 
> >>> >> Argh! I'm forced to read an mli file. ;) 
> >>> >> 
> >>> >> On Mon, Nov 5, 2012 at 8:15 PM, David House <dho... at janestreet.com<javascript:>> 
>
> >>> >> wrote: 
> >>> >>> Judging from the mli, there should be some ocamldocs, yes. 
> >>> >>> 
> >>> >>> However, I recommend just looking at the mli. 
> >>> >>> 
> >>> >>> On Mon, Nov 5, 2012 at 6:08 AM, Francois Berenger 
> >>> >>> <francois.ber... at gmail.com <javascript:>> wrote: 
> >>> >>>> 
> >>> >>>> Is there some ocamldoc for it? 
> >>> >>>> 
> >>> >>>> I think I managed to compile the ocamldoc for core and async, but 
> did 
> >>> >>>> not find anything about a Log module into it. 
> >>> >>>> 
> >>> >>>> 
> >>> >>>> On Sunday, November 4, 2012 9:15:45 PM UTC+9, Yaron Minsky wrote: 
> >>> >>>>> 
> >>> >>>>> Don't feel too bad about knowing about it.  It's quite new. 
> >>> >>>>> 
> >>> >>>>> But yeah, moving to it eventually sounds right. 
> >>> >>>>> 
> >>> >>>>> On Sat, Nov 3, 2012 at 6:43 PM, Sean McLaughlin <
> sea... at gmail.com> 
> >>> >>>>> wrote: 
> >>> >>>>>> 
> >>> >>>>>> No, sorry.  I didn't know about Async.Log, and I wrote my own 
> >>> >>>>>> logger. 
> >>> >>>>>> Switching to this one is probably a good idea in the long run 
> for 
> >>> >>>>>> omake-server. 
> >>> >>>>>> 
> >>> >>>>>> On Thu, Nov 1, 2012 at 10:14 PM, Yaron Minsky 
> >>> >>>>>> <ymi... at janestreet.com> 
> >>> >>>>>> wrote: 
> >>> >>>>>> > Sean, does your omake-server use Async.Log?  That might be a 
> good 
> >>> >>>>>> > example. 
> >>> >>>>>> > 
> >>> >>>>>> > y 
> >>> >>>>>> > 
> >>> >>>>>> > On Thu, Nov 1, 2012 at 9:59 PM, Francois Berenger 
> >>> >>>>>> > <francois.ber... at gmail.com> wrote: 
> >>> >>>>>> >> Is there some example program using this logger? 
> >>> >>>>>> >> 
> >>> >>>>>> >> 
> >>> >>>>>> >> On Friday, November 2, 2012 10:40:40 AM UTC+9, Francois 
> Berenger 
> >>> >>>>>> >> wrote: 
> >>> >>>>>> >>> 
> >>> >>>>>> >>> OK, I'm hooked now. 
> >>> >>>>>> >>> 
> >>> >>>>>> >>> I plus core in my new project. 
> >>> >>>>>> >>> 
> >>> >>>>>> >>> Thanks! 
> >>> >>>>>> >>> F. 
> >>> >>>>>> >>> 
> >>> >>>>>> >> 
> >>> >>>>> 
> >>> >>>>> 
> >>> >>>> 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121107/1ca31e29/attachment-0001.html>

From francois.berenger.fun at gmail.com  Thu Nov  8 05:09:31 2012
From: francois.berenger.fun at gmail.com (Francois)
Date: Wed, 7 Nov 2012 21:09:31 -0800 (PST)
Subject: some example program using the logger
Message-ID: <6b4517a5-5e24-4b84-8539-8f8bf0609d9a@googlegroups.com>

Hi,

Thanks to all the feedback I got,
I could do what I want.
It compiles and runs properly.

Regards,
F.
---
module Log       = Async_extra.Log.Blocking
module LogLevel  = Async_extra.Log.Level
module LogOutput = Async_extra.Log.Blocking.Output

let main () =

  Log.set_level (LogLevel.of_string "Debug");
  Log.set_output LogOutput.screen;

  Log.raw   "%s" "raw log";
  Log.debug "%s" "debug log";
  Log.info  "%s" "info log";
  Log.error "%s" "error log";

  Printf.printf "a printf\n"
;;

main()
---

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121107/f3787ff7/attachment-0001.html>

From francois.berenger.fun at gmail.com  Thu Nov  8 08:09:17 2012
From: francois.berenger.fun at gmail.com (Francois)
Date: Thu, 8 Nov 2012 00:09:17 -0800 (PST)
Subject: How to load core in the toplevel?
In-Reply-To: <87ehk4k4i5.fsf@li195-236.members.linode.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>
 <69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com>
 <CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>
 <8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com>
 <CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com>
 <9c71cd13-99c1-40e5-bc68-08217ebb1438@googlegroups.com>
 <0347676C-3D96-40FF-96E9-02C4242825E5@recoil.org>
 <d8383ac4-4b16-4d76-8545-d0ca5629af7e@googlegroups.com>
 <87ehk4k4i5.fsf@li195-236.members.linode.com>
Message-ID: <05549d39-5440-4798-ab80-745f69c2fc37@googlegroups.com>

What is the effect of doing an open of Core.Std (I don't need async for the 
moment)?

Does it override the standard prelude and the standard library?

On Thursday, November 8, 2012 3:12:06 PM UTC+9, Malcolm wrote:
>
> Core.Std and Async.Std are designed to be opened. 
>
> Francois <francois.b... at gmail.com <javascript:>> writes: 
>
> > On Thursday, November 8, 2012 1:42:41 AM UTC+9, Anil Madhavapeddy wrote: 
> >> 
> >> You should also add "#camlp4o" so that toplevel syntax extensions work 
> too. 
> >> 
> > 
> > In the future, I think only the one from janestreet to do automatic 
> > translations to/from s-expressions interests me. 
> > I prefer to read standard OCaml code usually. 
> >   
> > 
> >> 
> >> I'd really recommend using 'utop' (installable via OPAM) instead of the 
> >> default toplevel. It doesn't require the extra -I that the default 
> toplevel 
> >> needs, and has a really nice interactive interpreter. 
> >> 
> > 
> > I have to read about it. 
> > I'm conservative about using new things (I'm an isolated OCaml 
> developper, 
> > no one nearby to help me in case 
> > I mess with something, that's why I'm so active on mailing lists). 
> >   
> > 
> >> 
> >> My full .ocamlinit with utop is: 
> >> 
> >> #use "topfind" 
> >> #camlp4o 
> >> #thread 
> >> #require "core.top";; 
> >> #require "async";; 
> >> open Core.Std 
> >> open Async.Std 
> >> 
> > 
> > Thanks for sharing this. 
> > I'm very worried about the open directives 
> > and try to never use them so I don't think 
> > it would fit me for the moment. 
> > 
> > Best regards, 
> > Francois. 
> > 
> > 
> > 
> >> 
> >> -anil 
> >> 
> >> On 7 Nov 2012, at 05:33, Francois Berenger <francois.ber... at gmail.com<javascript:>> 
>
> >> wrote: 
> >> 
> >> Thanks a lot. 
> >> 
> >> So, the whole recipe in my case was: 
> >> 
> >> ocaml -I $OCAML_TOPLEVEL_PATH 
> >> #thread;; 
> >> #require "core.top";; 
> >> #require "async";; 
> >> 
> >> Regards, 
> >> F. 
> >> 
> >> On Wednesday, November 7, 2012 12:09:15 PM UTC+9, Sebastien Mondet 
> wrote: 
> >>> 
> >>> 
> >>> 
> >>> I think that one is the   
> >>>    #thread;; 
> >>> thing 
> >>> 
> >>> 
> >>> 
> >>> 
> >>> On Tue, Nov 6, 2012 at 10:06 PM, Francois Berenger < 
> >>> francois.ber... at gmail.com> wrote: 
> >>> 
> >>>> Thanks! That fixes the problem partially. 
> >>>> 
> >>>> Now, I get: 
> >>>> 
> >>>> # #require "core.top";; 
> >>>> # #require "core.top";;stem/lib/core/core.cma: loaded 
> >>>> Error: Reference to undefined global `Condition' 
> >>>> # #require "core";; 
> >>>> # #require "core";;m/system/lib/core/core.cma: loaded 
> >>>> Error: Reference to undefined global `Condition' 
> >>>> # #require "async";; 
> >>>> # #require "async";;/system/lib/core/core.cma: loaded 
> >>>> Error: Reference to undefined global `Condition' 
> >>>> 
> >>>> Any hint? 
> >>>> 
> >>>> 
> >>>> On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet 
> wrote: 
> >>>> 
> >>>>> 
> >>>>> I'm not sure if this is your problem, but there was something with 
> the 
> >>>>> toplevel (comming with the system compiler) not knowing about opam 
> >>>>> packages. 
> >>>>> I have to launch: 
> >>>>> 
> >>>>>    ocaml -I $OCAML_TOPLEVEL_PATH 
> >>>>> 
> >>>>> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`) 
> >>>>> 
> >>>>> 
> >>>>> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger 
> <francois.ber...@** 
> >>>>> gmail.com> wrote: 
> >>>>> 
> >>>>>> Apparently, ocamlfind knows where these libraries are: 
> >>>>>> 
> >>>>>> $ ocamlfind -query core 
> >>>>>> /home/berenger/.opam/system/**lib/core 
> >>>>>> $ ocamlfind -query async 
> >>>>>> /home/berenger/.opam/system/**lib/async 
> >>>>>> $ ocamlfind -query async_extra 
> >>>>>> /home/berenger/.opam/system/**lib/async_extra 
> >>>>>> 
> >>>>>> 
> >>>>>> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger 
> >>>>>> wrote: 
> >>>>>>> 
> >>>>>>> Hello, 
> >>>>>>> 
> >>>>>>> I'd like to play with core in my toplevel. 
> >>>>>>> 
> >>>>>>> Is there a recipe? 
> >>>>>>> 
> >>>>>>> I have installed everything with OPAM: 
> >>>>>>> $ opam list | egrep "core|async" 
> >>>>>>> async                 108.07.01  Monadic concurrency library 
> >>>>>>> async_core            108.07.01  Monadic concurrency library 
> >>>>>>> async_extra           108.07.01  Monadic concurrency library 
> >>>>>>> async_unix            108.07.01  Monadic concurrency library 
> >>>>>>> core                  108.07.01  Industrial strength alternative 
> to 
> >>>>>>> OCaml's standard library 
> >>>>>>> core_extended                --  Extra components that are not as 
> >>>>>>> closely vetted or as stable as Core 
> >>>>>>> 
> >>>>>>> In my toplevel, I type 
> >>>>>>> #use "topfind";; 
> >>>>>>> #list;; 
> >>>>>>> 
> >>>>>>> Nothing about core or async shows up. 
> >>>>>>> While parmap is there, for example. 
> >>>>>>> 
> >>>>>>> Is this normal? 
> >>>>>>> 
> >>>>>>> I guess there is some configuration file of findlib to tweak 
> >>>>>>> somewhere. 
> >>>>>>> 
> >>>>>>> Regards, 
> >>>>>>> F. 
> >>>>>>> 
> >>>>>>> 
> >>>>> 
> >>> 
> >> 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121108/5a253e75/attachment-0001.html>

From mmatalka at gmail.com  Thu Nov  8 06:12:02 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Thu, 08 Nov 2012 01:12:02 -0500
Subject: How to load core in the toplevel?
In-Reply-To: <d8383ac4-4b16-4d76-8545-d0ca5629af7e@googlegroups.com>
	(Francois's message of "Wed, 7 Nov 2012 18:12:51 -0800 (PST)")
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>
	<69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com>
	<CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>
	<8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com>
	<CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com>
	<9c71cd13-99c1-40e5-bc68-08217ebb1438@googlegroups.com>
	<0347676C-3D96-40FF-96E9-02C4242825E5@recoil.org>
	<d8383ac4-4b16-4d76-8545-d0ca5629af7e@googlegroups.com>
Message-ID: <87ehk4k4i5.fsf@li195-236.members.linode.com>


Core.Std and Async.Std are designed to be opened.

Francois <francois.berenger.fun at gmail.com> writes:

> On Thursday, November 8, 2012 1:42:41 AM UTC+9, Anil Madhavapeddy wrote:
>>
>> You should also add "#camlp4o" so that toplevel syntax extensions work too.
>>
>
> In the future, I think only the one from janestreet to do automatic
> translations to/from s-expressions interests me.
> I prefer to read standard OCaml code usually.
>  
>
>>
>> I'd really recommend using 'utop' (installable via OPAM) instead of the 
>> default toplevel. It doesn't require the extra -I that the default toplevel 
>> needs, and has a really nice interactive interpreter.
>>
>
> I have to read about it.
> I'm conservative about using new things (I'm an isolated OCaml developper, 
> no one nearby to help me in case
> I mess with something, that's why I'm so active on mailing lists).
>  
>
>>
>> My full .ocamlinit with utop is:
>>
>> #use "topfind"
>> #camlp4o
>> #thread
>> #require "core.top";;
>> #require "async";;
>> open Core.Std
>> open Async.Std
>>
>
> Thanks for sharing this.
> I'm very worried about the open directives
> and try to never use them so I don't think
> it would fit me for the moment.
>
> Best regards,
> Francois.
>
>
>
>>
>> -anil
>>
>> On 7 Nov 2012, at 05:33, Francois Berenger <francois.ber... at gmail.com<javascript:>> 
>> wrote:
>>
>> Thanks a lot.
>>
>> So, the whole recipe in my case was:
>>
>> ocaml -I $OCAML_TOPLEVEL_PATH
>> #thread;;
>> #require "core.top";;
>> #require "async";;
>>
>> Regards,
>> F.
>>
>> On Wednesday, November 7, 2012 12:09:15 PM UTC+9, Sebastien Mondet wrote:
>>>
>>>
>>>
>>> I think that one is the  
>>>    #thread;;
>>> thing
>>>
>>>
>>>
>>>
>>> On Tue, Nov 6, 2012 at 10:06 PM, Francois Berenger <
>>> francois.ber... at gmail.com> wrote:
>>>
>>>> Thanks! That fixes the problem partially.
>>>>
>>>> Now, I get:
>>>>
>>>> # #require "core.top";;
>>>> # #require "core.top";;stem/lib/core/core.cma: loaded
>>>> Error: Reference to undefined global `Condition'
>>>> # #require "core";;
>>>> # #require "core";;m/system/lib/core/core.cma: loaded
>>>> Error: Reference to undefined global `Condition'
>>>> # #require "async";;
>>>> # #require "async";;/system/lib/core/core.cma: loaded
>>>> Error: Reference to undefined global `Condition'
>>>>
>>>> Any hint?
>>>>
>>>>
>>>> On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet wrote:
>>>>
>>>>>
>>>>> I'm not sure if this is your problem, but there was something with the 
>>>>> toplevel (comming with the system compiler) not knowing about opam 
>>>>> packages. 
>>>>> I have to launch:
>>>>>
>>>>>    ocaml -I $OCAML_TOPLEVEL_PATH
>>>>>
>>>>> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`)
>>>>>
>>>>>
>>>>> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger <francois.ber...@**
>>>>> gmail.com> wrote:
>>>>>
>>>>>> Apparently, ocamlfind knows where these libraries are:
>>>>>>
>>>>>> $ ocamlfind -query core
>>>>>> /home/berenger/.opam/system/**lib/core
>>>>>> $ ocamlfind -query async
>>>>>> /home/berenger/.opam/system/**lib/async
>>>>>> $ ocamlfind -query async_extra
>>>>>> /home/berenger/.opam/system/**lib/async_extra
>>>>>>
>>>>>>
>>>>>> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger 
>>>>>> wrote:
>>>>>>>
>>>>>>> Hello,
>>>>>>>
>>>>>>> I'd like to play with core in my toplevel.
>>>>>>>
>>>>>>> Is there a recipe?
>>>>>>>
>>>>>>> I have installed everything with OPAM:
>>>>>>> $ opam list | egrep "core|async"
>>>>>>> async                 108.07.01  Monadic concurrency library
>>>>>>> async_core            108.07.01  Monadic concurrency library
>>>>>>> async_extra           108.07.01  Monadic concurrency library
>>>>>>> async_unix            108.07.01  Monadic concurrency library
>>>>>>> core                  108.07.01  Industrial strength alternative to 
>>>>>>> OCaml's standard library
>>>>>>> core_extended                --  Extra components that are not as 
>>>>>>> closely vetted or as stable as Core
>>>>>>>
>>>>>>> In my toplevel, I type
>>>>>>> #use "topfind";;
>>>>>>> #list;;
>>>>>>>
>>>>>>> Nothing about core or async shows up.
>>>>>>> While parmap is there, for example.
>>>>>>>
>>>>>>> Is this normal?
>>>>>>>
>>>>>>> I guess there is some configuration file of findlib to tweak 
>>>>>>> somewhere.
>>>>>>>
>>>>>>> Regards,
>>>>>>> F.
>>>>>>>
>>>>>>>
>>>>>
>>>
>>


From mmatalka at gmail.com  Thu Nov  8 06:13:36 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Thu, 08 Nov 2012 01:13:36 -0500
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
	(Francois's message of "Wed, 7 Nov 2012 18:39:42 -0800 (PST)")
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
Message-ID: <87a9usk4fj.fsf@li195-236.members.linode.com>


never_returns is in Core.Std.  I'm might be wrong by I don't think
Jane.Std actually exists anymore, instead you want Core.Std and
Async.Std opened to have the equivalent effect.

Francois <francois.berenger.fun at gmail.com> writes:

> Hello,
>
> I'd like to compile then run some of them,
> then have a look at their build scripts.
>
> I don't know where never_returns is defined.
>
> I also don't know with what lib I should link in
> order to access the module Jane.Std.
>
> Thanks,
> F.


From yminsky at janestreet.com  Thu Nov  8 11:41:04 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 8 Nov 2012 06:41:04 -0500
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <87a9usk4fj.fsf@li195-236.members.linode.com>
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
	<87a9usk4fj.fsf@li195-236.members.linode.com>
Message-ID: <CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>


Jane.Std is some internal stuff that is not exported.  We should fix
that example not to use it.  Which specific example is it?

y

On Thu, Nov 8, 2012 at 1:13 AM, Malcolm Matalka <mmatalka at gmail.com> wrote:
> never_returns is in Core.Std.  I'm might be wrong by I don't think
> Jane.Std actually exists anymore, instead you want Core.Std and
> Async.Std opened to have the equivalent effect.
>
> Francois <francois.berenger.fun at gmail.com> writes:
>
>> Hello,
>>
>> I'd like to compile then run some of them,
>> then have a look at their build scripts.
>>
>> I don't know where never_returns is defined.
>>
>> I also don't know with what lib I should link in
>> order to access the module Jane.Std.
>>
>> Thanks,
>> F.


From yminsky at janestreet.com  Thu Nov  8 11:41:20 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 8 Nov 2012 06:41:20 -0500
Subject: How to load core in the toplevel?
In-Reply-To: <05549d39-5440-4798-ab80-745f69c2fc37@googlegroups.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>
	<69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com>
	<CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>
	<8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com>
	<CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com>
	<9c71cd13-99c1-40e5-bc68-08217ebb1438@googlegroups.com>
	<0347676C-3D96-40FF-96E9-02C4242825E5@recoil.org>
	<d8383ac4-4b16-4d76-8545-d0ca5629af7e@googlegroups.com>
	<87ehk4k4i5.fsf@li195-236.members.linode.com>
	<05549d39-5440-4798-ab80-745f69c2fc37@googlegroups.com>
Message-ID: <CACLX4jSadoU6b55rd2a55vZXwSZbDeJ=-4uKFt+a2ScoiN9-AA@mail.gmail.com>


On Thu, Nov 8, 2012 at 3:09 AM, Francois
<francois.berenger.fun at gmail.com> wrote:
> What is the effect of doing an open of Core.Std (I don't need async for the
> moment)?
>
> Does it override the standard prelude and the standard library?

Yes.

>
> On Thursday, November 8, 2012 3:12:06 PM UTC+9, Malcolm wrote:
>>
>> Core.Std and Async.Std are designed to be opened.
>>
>> Francois <francois.b... at gmail.com> writes:
>>
>> > On Thursday, November 8, 2012 1:42:41 AM UTC+9, Anil Madhavapeddy wrote:
>> >>
>> >> You should also add "#camlp4o" so that toplevel syntax extensions work
>> >> too.
>> >>
>> >
>> > In the future, I think only the one from janestreet to do automatic
>> > translations to/from s-expressions interests me.
>> > I prefer to read standard OCaml code usually.
>> >
>> >
>> >>
>> >> I'd really recommend using 'utop' (installable via OPAM) instead of the
>> >> default toplevel. It doesn't require the extra -I that the default
>> >> toplevel
>> >> needs, and has a really nice interactive interpreter.
>> >>
>> >
>> > I have to read about it.
>> > I'm conservative about using new things (I'm an isolated OCaml
>> > developper,
>> > no one nearby to help me in case
>> > I mess with something, that's why I'm so active on mailing lists).
>> >
>> >
>> >>
>> >> My full .ocamlinit with utop is:
>> >>
>> >> #use "topfind"
>> >> #camlp4o
>> >> #thread
>> >> #require "core.top";;
>> >> #require "async";;
>> >> open Core.Std
>> >> open Async.Std
>> >>
>> >
>> > Thanks for sharing this.
>> > I'm very worried about the open directives
>> > and try to never use them so I don't think
>> > it would fit me for the moment.
>> >
>> > Best regards,
>> > Francois.
>> >
>> >
>> >
>> >>
>> >> -anil
>> >>
>> >> On 7 Nov 2012, at 05:33, Francois Berenger
>> >> <francois.ber... at gmail.com<javascript:>>
>> >> wrote:
>> >>
>> >> Thanks a lot.
>> >>
>> >> So, the whole recipe in my case was:
>> >>
>> >> ocaml -I $OCAML_TOPLEVEL_PATH
>> >> #thread;;
>> >> #require "core.top";;
>> >> #require "async";;
>> >>
>> >> Regards,
>> >> F.
>> >>
>> >> On Wednesday, November 7, 2012 12:09:15 PM UTC+9, Sebastien Mondet
>> >> wrote:
>> >>>
>> >>>
>> >>>
>> >>> I think that one is the
>> >>>    #thread;;
>> >>> thing
>> >>>
>> >>>
>> >>>
>> >>>
>> >>> On Tue, Nov 6, 2012 at 10:06 PM, Francois Berenger <
>> >>> francois.ber... at gmail.com> wrote:
>> >>>
>> >>>> Thanks! That fixes the problem partially.
>> >>>>
>> >>>> Now, I get:
>> >>>>
>> >>>> # #require "core.top";;
>> >>>> # #require "core.top";;stem/lib/core/core.cma: loaded
>> >>>> Error: Reference to undefined global `Condition'
>> >>>> # #require "core";;
>> >>>> # #require "core";;m/system/lib/core/core.cma: loaded
>> >>>> Error: Reference to undefined global `Condition'
>> >>>> # #require "async";;
>> >>>> # #require "async";;/system/lib/core/core.cma: loaded
>> >>>> Error: Reference to undefined global `Condition'
>> >>>>
>> >>>> Any hint?
>> >>>>
>> >>>>
>> >>>> On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet
>> >>>> wrote:
>> >>>>
>> >>>>>
>> >>>>> I'm not sure if this is your problem, but there was something with
>> >>>>> the
>> >>>>> toplevel (comming with the system compiler) not knowing about opam
>> >>>>> packages.
>> >>>>> I have to launch:
>> >>>>>
>> >>>>>    ocaml -I $OCAML_TOPLEVEL_PATH
>> >>>>>
>> >>>>> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`)
>> >>>>>
>> >>>>>
>> >>>>> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger
>> >>>>> <francois.ber...@**
>> >>>>> gmail.com> wrote:
>> >>>>>
>> >>>>>> Apparently, ocamlfind knows where these libraries are:
>> >>>>>>
>> >>>>>> $ ocamlfind -query core
>> >>>>>> /home/berenger/.opam/system/**lib/core
>> >>>>>> $ ocamlfind -query async
>> >>>>>> /home/berenger/.opam/system/**lib/async
>> >>>>>> $ ocamlfind -query async_extra
>> >>>>>> /home/berenger/.opam/system/**lib/async_extra
>> >>>>>>
>> >>>>>>
>> >>>>>> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger
>> >>>>>> wrote:
>> >>>>>>>
>> >>>>>>> Hello,
>> >>>>>>>
>> >>>>>>> I'd like to play with core in my toplevel.
>> >>>>>>>
>> >>>>>>> Is there a recipe?
>> >>>>>>>
>> >>>>>>> I have installed everything with OPAM:
>> >>>>>>> $ opam list | egrep "core|async"
>> >>>>>>> async                 108.07.01  Monadic concurrency library
>> >>>>>>> async_core            108.07.01  Monadic concurrency library
>> >>>>>>> async_extra           108.07.01  Monadic concurrency library
>> >>>>>>> async_unix            108.07.01  Monadic concurrency library
>> >>>>>>> core                  108.07.01  Industrial strength alternative
>> >>>>>>> to
>> >>>>>>> OCaml's standard library
>> >>>>>>> core_extended                --  Extra components that are not as
>> >>>>>>> closely vetted or as stable as Core
>> >>>>>>>
>> >>>>>>> In my toplevel, I type
>> >>>>>>> #use "topfind";;
>> >>>>>>> #list;;
>> >>>>>>>
>> >>>>>>> Nothing about core or async shows up.
>> >>>>>>> While parmap is there, for example.
>> >>>>>>>
>> >>>>>>> Is this normal?
>> >>>>>>>
>> >>>>>>> I guess there is some configuration file of findlib to tweak
>> >>>>>>> somewhere.
>> >>>>>>>
>> >>>>>>> Regards,
>> >>>>>>> F.
>> >>>>>>>
>> >>>>>>>
>> >>>>>
>> >>>
>> >>


From dhouse at janestreet.com  Thu Nov  8 10:12:21 2012
From: dhouse at janestreet.com (David House)
Date: Thu, 8 Nov 2012 10:12:21 +0000
Subject: any logger in core?
In-Reply-To: <04cc5df5-105f-4f90-8769-f499596d58ed@googlegroups.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
	<CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
	<7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
	<CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
	<CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
	<CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
	<CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
	<d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>
	<CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>
	<CAK=fH+gh3MGxObP-KUPVWfDCZJk8GZhTF+S6c_ktXCuK4_wbHg@mail.gmail.com>
	<04cc5df5-105f-4f90-8769-f499596d58ed@googlegroups.com>
Message-ID: <CAK=fH+gakKwvurMB5RHZpMdHA8vVh3c+gGR_-kiHrAtLhmugtQ@mail.gmail.com>


On Thu, Nov 8, 2012 at 3:48 AM, Francois
<francois.berenger.fun at gmail.com> wrote:
> I don't know where to find never_returns.

It's there if you open Core.Std.

> But the following did work (and never stop):

You need to explicitly shut down async using the shutdown function in Async.Std.

> I'm affraid of open directives, I try to keep my code _very_ explicit
> about what it is doing and which function from which module is used
> (maybe because of past overexposure to some C++ code).

I think that's exactly the right approach -- I often find myself
making similar comments when doing code review at work. Things are
much easier to follow if opens are reduced, or made more local, and
more explicit.

That being said, I do allow myself the luxury of opening Core.Std and
Async.Std in most of my modules that use core / async. I find this to
strike a good balance between concision and explicitness.

One of the reasons is that there are very few *values* brought into
scope by opening Core.Std and Async.Std. This conversation has contain
disproportionally many: never_returns, shutdown, etc. -- an unlucky
coincidence! But nearly everything is squirreled away inside a module,
which helps a lot. (In other words, our "Pervasives" is much smaller
than the ocaml standard library's.)


From dhouse at janestreet.com  Thu Nov  8 10:21:15 2012
From: dhouse at janestreet.com (David House)
Date: Thu, 8 Nov 2012 10:21:15 +0000
Subject: some example program using the logger
In-Reply-To: <6b4517a5-5e24-4b84-8539-8f8bf0609d9a@googlegroups.com>
References: <6b4517a5-5e24-4b84-8539-8f8bf0609d9a@googlegroups.com>
Message-ID: <CAK=fH+hHHHXeDvqJiU2j8BnFXB4nL8LZCOmB2gkpdsj36wTmxg@mail.gmail.com>


For the sake of comparison, I would write this as follows. (N.b.:
untested! There are probably typos.)

open Core.Std
open Async.Std

let main () =
  Log.Global.set_level (Log.Level.of_string "Debug");
  Log.global.set_output Log.Output.screen;

  Log.Global.raw   "%s" "raw log";
  Log.Global.debug "%s" "debug log";
  Log.Global.info  "%s" "info log";
  Log.Global.error "%s" "error log";

  Printf.printf "a printf\n";
  shutdown 0

let () =
  main ();
  never_returns (Scheduler.go ())

On Thu, Nov 8, 2012 at 5:09 AM, Francois
<francois.berenger.fun at gmail.com> wrote:
> Hi,
>
> Thanks to all the feedback I got,
> I could do what I want.
> It compiles and runs properly.
>
> Regards,
> F.
> ---
> module Log       = Async_extra.Log.Blocking
> module LogLevel  = Async_extra.Log.Level
> module LogOutput = Async_extra.Log.Blocking.Output
>
> let main () =
>
>   Log.set_level (LogLevel.of_string "Debug");
>   Log.set_output LogOutput.screen;
>
>   Log.raw   "%s" "raw log";
>   Log.debug "%s" "debug log";
>   Log.info  "%s" "info log";
>   Log.error "%s" "error log";
>
>   Printf.printf "a printf\n"
> ;;
>
> main()
> ---
>


From agarwal1975 at gmail.com  Thu Nov  8 16:06:02 2012
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Thu, 8 Nov 2012 11:06:02 -0500
Subject: How to load core in the toplevel?
In-Reply-To: <d8383ac4-4b16-4d76-8545-d0ca5629af7e@googlegroups.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>
 <69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com> <CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>
 <8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com> <CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com>
 <9c71cd13-99c1-40e5-bc68-08217ebb1438@googlegroups.com> <0347676C-3D96-40FF-96E9-02C4242825E5@recoil.org>
 <d8383ac4-4b16-4d76-8545-d0ca5629af7e@googlegroups.com>
Message-ID: <CAMu2m2KC2VFp4a1Wa2jrJgoQ3pxzeOf4AEiWhB8e3d2bjZxzkg@mail.gmail.com>

> I'm very worried about the open directives

Your concern is generally correct, but not always. If you are using Jane
Street Core, the implication is that you've chosen this as your standard
library, and doing open Core.Std is the way to use it.


On 7 Nov 2012, at 05:33, Francois Berenger <francois.ber...@**gmail.com>
wrote:

>
>> Thanks a lot.
>>
>> So, the whole recipe in my case was:
>>
>> ocaml -I $OCAML_TOPLEVEL_PATH
>> #thread;;
>> #require "core.top";;
>> #require "async";;
>>
>> Regards,
>> F.
>>
>> On Wednesday, November 7, 2012 12:09:15 PM UTC+9, Sebastien Mondet wrote:
>>>
>>>
>>>
>>> I think that one is the
>>>    #thread;;
>>> thing
>>>
>>>
>>>
>>>
>>> On Tue, Nov 6, 2012 at 10:06 PM, Francois Berenger <
>>> francois.ber... at gmail.com> wrote:
>>>
>>>> Thanks! That fixes the problem partially.
>>>>
>>>> Now, I get:
>>>>
>>>> # #require "core.top";;
>>>> # #require "core.top";;stem/lib/core/**core.cma: loaded
>>>> Error: Reference to undefined global `Condition'
>>>> # #require "core";;
>>>> # #require "core";;m/system/lib/core/**core.cma: loaded
>>>> Error: Reference to undefined global `Condition'
>>>> # #require "async";;
>>>> # #require "async";;/system/lib/core/**core.cma: loaded
>>>> Error: Reference to undefined global `Condition'
>>>>
>>>> Any hint?
>>>>
>>>>
>>>> On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet
>>>> wrote:
>>>>
>>>>>
>>>>> I'm not sure if this is your problem, but there was something with the
>>>>> toplevel (comming with the system compiler) not knowing about opam
>>>>> packages.
>>>>> I have to launch:
>>>>>
>>>>>    ocaml -I $OCAML_TOPLEVEL_PATH
>>>>>
>>>>> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`)
>>>>>
>>>>>
>>>>> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger <francois.ber...@**
>>>>> gmail.com> wrote:
>>>>>
>>>>>> Apparently, ocamlfind knows where these libraries are:
>>>>>>
>>>>>> $ ocamlfind -query core
>>>>>> /home/berenger/.opam/system/**li**b/core
>>>>>> $ ocamlfind -query async
>>>>>> /home/berenger/.opam/system/**li**b/async
>>>>>> $ ocamlfind -query async_extra
>>>>>> /home/berenger/.opam/system/**li**b/async_extra
>>>>>>
>>>>>>
>>>>>> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger
>>>>>> wrote:
>>>>>>>
>>>>>>> Hello,
>>>>>>>
>>>>>>> I'd like to play with core in my toplevel.
>>>>>>>
>>>>>>> Is there a recipe?
>>>>>>>
>>>>>>> I have installed everything with OPAM:
>>>>>>> $ opam list | egrep "core|async"
>>>>>>> async                 108.07.01  Monadic concurrency library
>>>>>>> async_core            108.07.01  Monadic concurrency library
>>>>>>> async_extra           108.07.01  Monadic concurrency library
>>>>>>> async_unix            108.07.01  Monadic concurrency library
>>>>>>> core                  108.07.01  Industrial strength alternative to
>>>>>>> OCaml's standard library
>>>>>>> core_extended                --  Extra components that are not as
>>>>>>> closely vetted or as stable as Core
>>>>>>>
>>>>>>> In my toplevel, I type
>>>>>>> #use "topfind";;
>>>>>>> #list;;
>>>>>>>
>>>>>>> Nothing about core or async shows up.
>>>>>>> While parmap is there, for example.
>>>>>>>
>>>>>>> Is this normal?
>>>>>>>
>>>>>>> I guess there is some configuration file of findlib to tweak
>>>>>>> somewhere.
>>>>>>>
>>>>>>> Regards,
>>>>>>> F.
>>>>>>>
>>>>>>>
>>>>>
>>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121108/b06babb9/attachment-0001.html>

From yminsky at janestreet.com  Thu Nov  8 16:25:18 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 8 Nov 2012 11:25:18 -0500
Subject: How to load core in the toplevel?
In-Reply-To: <CAMu2m2KC2VFp4a1Wa2jrJgoQ3pxzeOf4AEiWhB8e3d2bjZxzkg@mail.gmail.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>
	<69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com>
	<CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>
	<8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com>
	<CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com>
	<9c71cd13-99c1-40e5-bc68-08217ebb1438@googlegroups.com>
	<0347676C-3D96-40FF-96E9-02C4242825E5@recoil.org>
	<d8383ac4-4b16-4d76-8545-d0ca5629af7e@googlegroups.com>
	<CAMu2m2KC2VFp4a1Wa2jrJgoQ3pxzeOf4AEiWhB8e3d2bjZxzkg@mail.gmail.com>
Message-ID: <CACLX4jTPxtt2KfMBs-7nNbdB9_DUKDu9GUo+XwarJ8vmFaSzfQ@mail.gmail.com>


And even if you want to pick and choose what you want to use, you
should get things from the Std namespace.  i.e., you should grab
things from Async.Std rather than from Async_extra.  It would be
reasonable to do:

module Core = Core.Std
module Async = Async.Std

and just qualify things by "Core" and "Async" when you wanted them.

That said, I do think the Core.Std overlay is quite pleasant.

y

On Thu, Nov 8, 2012 at 11:06 AM, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
>> I'm very worried about the open directives
>
> Your concern is generally correct, but not always. If you are using Jane
> Street Core, the implication is that you've chosen this as your standard
> library, and doing open Core.Std is the way to use it.
>
>
> On 7 Nov 2012, at 05:33, Francois Berenger <francois.ber... at gmail.com>
> wrote:
>>>
>>>
>>> Thanks a lot.
>>>
>>> So, the whole recipe in my case was:
>>>
>>> ocaml -I $OCAML_TOPLEVEL_PATH
>>> #thread;;
>>> #require "core.top";;
>>> #require "async";;
>>>
>>> Regards,
>>> F.
>>>
>>> On Wednesday, November 7, 2012 12:09:15 PM UTC+9, Sebastien Mondet wrote:
>>>>
>>>>
>>>>
>>>> I think that one is the
>>>>    #thread;;
>>>> thing
>>>>
>>>>
>>>>
>>>>
>>>> On Tue, Nov 6, 2012 at 10:06 PM, Francois Berenger
>>>> <francois.ber... at gmail.com> wrote:
>>>>>
>>>>> Thanks! That fixes the problem partially.
>>>>>
>>>>> Now, I get:
>>>>>
>>>>> # #require "core.top";;
>>>>> # #require "core.top";;stem/lib/core/core.cma: loaded
>>>>> Error: Reference to undefined global `Condition'
>>>>> # #require "core";;
>>>>> # #require "core";;m/system/lib/core/core.cma: loaded
>>>>> Error: Reference to undefined global `Condition'
>>>>> # #require "async";;
>>>>> # #require "async";;/system/lib/core/core.cma: loaded
>>>>> Error: Reference to undefined global `Condition'
>>>>>
>>>>> Any hint?
>>>>>
>>>>>
>>>>> On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet
>>>>> wrote:
>>>>>>
>>>>>>
>>>>>> I'm not sure if this is your problem, but there was something with the
>>>>>> toplevel (comming with the system compiler) not knowing about opam packages.
>>>>>> I have to launch:
>>>>>>
>>>>>>    ocaml -I $OCAML_TOPLEVEL_PATH
>>>>>>
>>>>>> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`)
>>>>>>
>>>>>>
>>>>>> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger
>>>>>> <francois.ber... at gmail.com> wrote:
>>>>>>>
>>>>>>> Apparently, ocamlfind knows where these libraries are:
>>>>>>>
>>>>>>> $ ocamlfind -query core
>>>>>>> /home/berenger/.opam/system/lib/core
>>>>>>> $ ocamlfind -query async
>>>>>>> /home/berenger/.opam/system/lib/async
>>>>>>> $ ocamlfind -query async_extra
>>>>>>> /home/berenger/.opam/system/lib/async_extra
>>>>>>>
>>>>>>>
>>>>>>> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger
>>>>>>> wrote:
>>>>>>>>
>>>>>>>> Hello,
>>>>>>>>
>>>>>>>> I'd like to play with core in my toplevel.
>>>>>>>>
>>>>>>>> Is there a recipe?
>>>>>>>>
>>>>>>>> I have installed everything with OPAM:
>>>>>>>> $ opam list | egrep "core|async"
>>>>>>>> async                 108.07.01  Monadic concurrency library
>>>>>>>> async_core            108.07.01  Monadic concurrency library
>>>>>>>> async_extra           108.07.01  Monadic concurrency library
>>>>>>>> async_unix            108.07.01  Monadic concurrency library
>>>>>>>> core                  108.07.01  Industrial strength alternative to
>>>>>>>> OCaml's standard library
>>>>>>>> core_extended                --  Extra components that are not as
>>>>>>>> closely vetted or as stable as Core
>>>>>>>>
>>>>>>>> In my toplevel, I type
>>>>>>>> #use "topfind";;
>>>>>>>> #list;;
>>>>>>>>
>>>>>>>> Nothing about core or async shows up.
>>>>>>>> While parmap is there, for example.
>>>>>>>>
>>>>>>>> Is this normal?
>>>>>>>>
>>>>>>>> I guess there is some configuration file of findlib to tweak
>>>>>>>> somewhere.
>>>>>>>>
>>>>>>>> Regards,
>>>>>>>> F.
>>>>>>>>
>>>>>>
>>>>
>>>
>


From sweeks at janestreet.com  Thu Nov  8 17:02:45 2012
From: sweeks at janestreet.com (Stephen Weeks)
Date: Thu, 8 Nov 2012 12:02:45 -0500
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
	<87a9usk4fj.fsf@li195-236.members.linode.com>
	<CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>
Message-ID: <CAPYVAiLMJAYKOgBtLDOj+NTihSjAXEX0=a4QUDTuS25B=z6z4g@mail.gmail.com>


> Jane.Std is some internal stuff that is not exported.  We should fix
> that example not to use it.  Which specific example is it?

Many of the examples in base/async/examples unnecessarily refer to
Jane.Std.  I pushed a fix internally to change them all to Core.Std.


From markus.mottl at gmail.com  Thu Nov  8 17:04:40 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Thu, 8 Nov 2012 12:04:40 -0500
Subject: Weird bug on Mac OS X
Message-ID: <CAP_800rEOO6pGfUUb9-NtDtYg-1eBhe92POwFz3AHsS_vGVggQ@mail.gmail.com>


Hi,

I've run into a segfault on Mac OS X with a very trivial program that
basically just links with Jane Street Core.  Here is the file test.ml:

----------
module X = Core

let () = [||].(0) <- 42
----------

You can build it as follows:

  ocamlbuild -use-ocamlfind -cflag -thread -lflag -thread -pkgs core test.native

Running test.native will give you a segfault.  Here is the stack backtrace:

----------
#0  0x00007fff90fa78a5 in misaligned_stack_error_entering_dyld_stub_binder ()
#1  0x0000000000000103 in ?? ()
#2  0x0000000101c0a088 in pvars ()
#3  0x0000000101bddedd in caml_raise ()
#4  0x0000000101bddf99 in caml_array_bound_error ()
#5  0x00000001019b6aca in .L101 ()
----------

The program should just raise an exception due to the illegal array
access.  Merely raising an exception directly doesn't trigger the
problem.  The program won't segfault either if the "module X = Core"
line is commented out, i.e. Core has to be linked in.  Other libraries
apparently also don't cause this issue.

Could another Mac OS X user here please verify the problem?  I'm using
OCaml 4.00.1 with Opam and the latest release of Core in there.

Maybe somebody more knowledgeable about stack alignment and linking
issues on Mac OS X has an idea what's going wrong here.  I suspect
it's a code generation, linking or even runtime issue that may need to
be fixed in the compiler.  Or there could be a bug in some module
initialization in Core that is using C-bindings (less likely, I'm not
aware of anything that could cause this).

Regards,
Markus

--
Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com


From agarwal1975 at gmail.com  Thu Nov  8 17:11:12 2012
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Thu, 8 Nov 2012 12:11:12 -0500
Subject: Weird bug on Mac OS X
In-Reply-To: <CAP_800rEOO6pGfUUb9-NtDtYg-1eBhe92POwFz3AHsS_vGVggQ@mail.gmail.com>
References: <CAP_800rEOO6pGfUUb9-NtDtYg-1eBhe92POwFz3AHsS_vGVggQ@mail.gmail.com>
Message-ID: <CAMu2m2J7xz1YVLLbMQMom8Pu7UN5f4OH_RGp9eJb7AsTq+bmTg@mail.gmail.com>

I correctly get an exception with OCaml 3.12.1, Core 108.00.02, on Mac OS X
10.7.5.

On Thu, Nov 8, 2012 at 12:04 PM, Markus Mottl <markus.mottl at gmail.com>wrote:

> Hi,
>
> I've run into a segfault on Mac OS X with a very trivial program that
> basically just links with Jane Street Core.  Here is the file test.ml:
>
> ----------
> module X = Core
>
> let () = [||].(0) <- 42
> ----------
>
> You can build it as follows:
>
>   ocamlbuild -use-ocamlfind -cflag -thread -lflag -thread -pkgs core
> test.native
>
> Running test.native will give you a segfault.  Here is the stack backtrace:
>
> ----------
> #0  0x00007fff90fa78a5 in misaligned_stack_error_entering_dyld_stub_binder
> ()
> #1  0x0000000000000103 in ?? ()
> #2  0x0000000101c0a088 in pvars ()
> #3  0x0000000101bddedd in caml_raise ()
> #4  0x0000000101bddf99 in caml_array_bound_error ()
> #5  0x00000001019b6aca in .L101 ()
> ----------
>
> The program should just raise an exception due to the illegal array
> access.  Merely raising an exception directly doesn't trigger the
> problem.  The program won't segfault either if the "module X = Core"
> line is commented out, i.e. Core has to be linked in.  Other libraries
> apparently also don't cause this issue.
>
> Could another Mac OS X user here please verify the problem?  I'm using
> OCaml 4.00.1 with Opam and the latest release of Core in there.
>
> Maybe somebody more knowledgeable about stack alignment and linking
> issues on Mac OS X has an idea what's going wrong here.  I suspect
> it's a code generation, linking or even runtime issue that may need to
> be fixed in the compiler.  Or there could be a bug in some module
> initialization in Core that is using C-bindings (less likely, I'm not
> aware of anything that could cause this).
>
> Regards,
> Markus
>
> --
> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121108/f611c28b/attachment-0001.html>

From markus.mottl at gmail.com  Thu Nov  8 17:16:01 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Thu, 8 Nov 2012 12:16:01 -0500
Subject: Weird bug on Mac OS X
In-Reply-To: <CAMu2m2J7xz1YVLLbMQMom8Pu7UN5f4OH_RGp9eJb7AsTq+bmTg@mail.gmail.com>
References: <CAP_800rEOO6pGfUUb9-NtDtYg-1eBhe92POwFz3AHsS_vGVggQ@mail.gmail.com>
	<CAMu2m2J7xz1YVLLbMQMom8Pu7UN5f4OH_RGp9eJb7AsTq+bmTg@mail.gmail.com>
Message-ID: <CAP_800oSoHppULSPBoR_KjxxieQoO6pdjGfCXyi-pS9BgK_qog@mail.gmail.com>


Should have mentioned that, too: I'm running Mac OS X 10.8.2 with the
latest XCode version (4.5.2).

On Thu, Nov 8, 2012 at 12:11 PM, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
> I correctly get an exception with OCaml 3.12.1, Core 108.00.02, on Mac OS X
> 10.7.5.
>
> On Thu, Nov 8, 2012 at 12:04 PM, Markus Mottl <markus.mottl at gmail.com>
> wrote:
>>
>> Hi,
>>
>> I've run into a segfault on Mac OS X with a very trivial program that
>> basically just links with Jane Street Core.  Here is the file test.ml:
>>
>> ----------
>> module X = Core
>>
>> let () = [||].(0) <- 42
>> ----------
>>
>> You can build it as follows:
>>
>>   ocamlbuild -use-ocamlfind -cflag -thread -lflag -thread -pkgs core
>> test.native
>>
>> Running test.native will give you a segfault.  Here is the stack
>> backtrace:
>>
>> ----------
>> #0  0x00007fff90fa78a5 in misaligned_stack_error_entering_dyld_stub_binder
>> ()
>> #1  0x0000000000000103 in ?? ()
>> #2  0x0000000101c0a088 in pvars ()
>> #3  0x0000000101bddedd in caml_raise ()
>> #4  0x0000000101bddf99 in caml_array_bound_error ()
>> #5  0x00000001019b6aca in .L101 ()
>> ----------
>>
>> The program should just raise an exception due to the illegal array
>> access.  Merely raising an exception directly doesn't trigger the
>> problem.  The program won't segfault either if the "module X = Core"
>> line is commented out, i.e. Core has to be linked in.  Other libraries
>> apparently also don't cause this issue.
>>
>> Could another Mac OS X user here please verify the problem?  I'm using
>> OCaml 4.00.1 with Opam and the latest release of Core in there.
>>
>> Maybe somebody more knowledgeable about stack alignment and linking
>> issues on Mac OS X has an idea what's going wrong here.  I suspect
>> it's a code generation, linking or even runtime issue that may need to
>> be fixed in the compiler.  Or there could be a bug in some module
>> initialization in Core that is using C-bindings (less likely, I'm not
>> aware of anything that could cause this).
>>
>> Regards,
>> Markus
>>
>> --
>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>
>



-- 
Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com


From benedikt.grundmann at gmail.com  Thu Nov  8 12:17:24 2012
From: benedikt.grundmann at gmail.com (Benedikt Grundmann)
Date: Thu, 8 Nov 2012 12:17:24 +0000
Subject: How to load core in the toplevel?
In-Reply-To: <CACLX4jSadoU6b55rd2a55vZXwSZbDeJ=-4uKFt+a2ScoiN9-AA@mail.gmail.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>
	<69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com>
	<CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>
	<8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com>
	<CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com>
	<9c71cd13-99c1-40e5-bc68-08217ebb1438@googlegroups.com>
	<0347676C-3D96-40FF-96E9-02C4242825E5@recoil.org>
	<d8383ac4-4b16-4d76-8545-d0ca5629af7e@googlegroups.com>
	<87ehk4k4i5.fsf@li195-236.members.linode.com>
	<05549d39-5440-4798-ab80-745f69c2fc37@googlegroups.com>
	<CACLX4jSadoU6b55rd2a55vZXwSZbDeJ=-4uKFt+a2ScoiN9-AA@mail.gmail.com>
Message-ID: <CAMr3DCPy3tGn1caXmMihNJNaHBLaBpNvER7_Act01vrwCMnMsg@mail.gmail.com>

I like to think about open Core.Std as the equivalent to Racket's #lang
directive.

That is open Core.Std => #lang js_ocaml

Cheers,

Bene


On 8 November 2012 11:41, Yaron Minsky <yminsky at janestreet.com> wrote:

> On Thu, Nov 8, 2012 at 3:09 AM, Francois
> <francois.berenger.fun at gmail.com> wrote:
> > What is the effect of doing an open of Core.Std (I don't need async for
> the
> > moment)?
> >
> > Does it override the standard prelude and the standard library?
>
> Yes.
>
> >
> > On Thursday, November 8, 2012 3:12:06 PM UTC+9, Malcolm wrote:
> >>
> >> Core.Std and Async.Std are designed to be opened.
> >>
> >> Francois <francois.b... at gmail.com> writes:
> >>
> >> > On Thursday, November 8, 2012 1:42:41 AM UTC+9, Anil Madhavapeddy
> wrote:
> >> >>
> >> >> You should also add "#camlp4o" so that toplevel syntax extensions
> work
> >> >> too.
> >> >>
> >> >
> >> > In the future, I think only the one from janestreet to do automatic
> >> > translations to/from s-expressions interests me.
> >> > I prefer to read standard OCaml code usually.
> >> >
> >> >
> >> >>
> >> >> I'd really recommend using 'utop' (installable via OPAM) instead of
> the
> >> >> default toplevel. It doesn't require the extra -I that the default
> >> >> toplevel
> >> >> needs, and has a really nice interactive interpreter.
> >> >>
> >> >
> >> > I have to read about it.
> >> > I'm conservative about using new things (I'm an isolated OCaml
> >> > developper,
> >> > no one nearby to help me in case
> >> > I mess with something, that's why I'm so active on mailing lists).
> >> >
> >> >
> >> >>
> >> >> My full .ocamlinit with utop is:
> >> >>
> >> >> #use "topfind"
> >> >> #camlp4o
> >> >> #thread
> >> >> #require "core.top";;
> >> >> #require "async";;
> >> >> open Core.Std
> >> >> open Async.Std
> >> >>
> >> >
> >> > Thanks for sharing this.
> >> > I'm very worried about the open directives
> >> > and try to never use them so I don't think
> >> > it would fit me for the moment.
> >> >
> >> > Best regards,
> >> > Francois.
> >> >
> >> >
> >> >
> >> >>
> >> >> -anil
> >> >>
> >> >> On 7 Nov 2012, at 05:33, Francois Berenger
> >> >> <francois.ber... at gmail.com<javascript:>>
> >> >> wrote:
> >> >>
> >> >> Thanks a lot.
> >> >>
> >> >> So, the whole recipe in my case was:
> >> >>
> >> >> ocaml -I $OCAML_TOPLEVEL_PATH
> >> >> #thread;;
> >> >> #require "core.top";;
> >> >> #require "async";;
> >> >>
> >> >> Regards,
> >> >> F.
> >> >>
> >> >> On Wednesday, November 7, 2012 12:09:15 PM UTC+9, Sebastien Mondet
> >> >> wrote:
> >> >>>
> >> >>>
> >> >>>
> >> >>> I think that one is the
> >> >>>    #thread;;
> >> >>> thing
> >> >>>
> >> >>>
> >> >>>
> >> >>>
> >> >>> On Tue, Nov 6, 2012 at 10:06 PM, Francois Berenger <
> >> >>> francois.ber... at gmail.com> wrote:
> >> >>>
> >> >>>> Thanks! That fixes the problem partially.
> >> >>>>
> >> >>>> Now, I get:
> >> >>>>
> >> >>>> # #require "core.top";;
> >> >>>> # #require "core.top";;stem/lib/core/core.cma: loaded
> >> >>>> Error: Reference to undefined global `Condition'
> >> >>>> # #require "core";;
> >> >>>> # #require "core";;m/system/lib/core/core.cma: loaded
> >> >>>> Error: Reference to undefined global `Condition'
> >> >>>> # #require "async";;
> >> >>>> # #require "async";;/system/lib/core/core.cma: loaded
> >> >>>> Error: Reference to undefined global `Condition'
> >> >>>>
> >> >>>> Any hint?
> >> >>>>
> >> >>>>
> >> >>>> On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet
> >> >>>> wrote:
> >> >>>>
> >> >>>>>
> >> >>>>> I'm not sure if this is your problem, but there was something with
> >> >>>>> the
> >> >>>>> toplevel (comming with the system compiler) not knowing about opam
> >> >>>>> packages.
> >> >>>>> I have to launch:
> >> >>>>>
> >> >>>>>    ocaml -I $OCAML_TOPLEVEL_PATH
> >> >>>>>
> >> >>>>> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config
> -env`)
> >> >>>>>
> >> >>>>>
> >> >>>>> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger
> >> >>>>> <francois.ber...@**
> >> >>>>> gmail.com> wrote:
> >> >>>>>
> >> >>>>>> Apparently, ocamlfind knows where these libraries are:
> >> >>>>>>
> >> >>>>>> $ ocamlfind -query core
> >> >>>>>> /home/berenger/.opam/system/**lib/core
> >> >>>>>> $ ocamlfind -query async
> >> >>>>>> /home/berenger/.opam/system/**lib/async
> >> >>>>>> $ ocamlfind -query async_extra
> >> >>>>>> /home/berenger/.opam/system/**lib/async_extra
> >> >>>>>>
> >> >>>>>>
> >> >>>>>> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois
> Berenger
> >> >>>>>> wrote:
> >> >>>>>>>
> >> >>>>>>> Hello,
> >> >>>>>>>
> >> >>>>>>> I'd like to play with core in my toplevel.
> >> >>>>>>>
> >> >>>>>>> Is there a recipe?
> >> >>>>>>>
> >> >>>>>>> I have installed everything with OPAM:
> >> >>>>>>> $ opam list | egrep "core|async"
> >> >>>>>>> async                 108.07.01  Monadic concurrency library
> >> >>>>>>> async_core            108.07.01  Monadic concurrency library
> >> >>>>>>> async_extra           108.07.01  Monadic concurrency library
> >> >>>>>>> async_unix            108.07.01  Monadic concurrency library
> >> >>>>>>> core                  108.07.01  Industrial strength alternative
> >> >>>>>>> to
> >> >>>>>>> OCaml's standard library
> >> >>>>>>> core_extended                --  Extra components that are not
> as
> >> >>>>>>> closely vetted or as stable as Core
> >> >>>>>>>
> >> >>>>>>> In my toplevel, I type
> >> >>>>>>> #use "topfind";;
> >> >>>>>>> #list;;
> >> >>>>>>>
> >> >>>>>>> Nothing about core or async shows up.
> >> >>>>>>> While parmap is there, for example.
> >> >>>>>>>
> >> >>>>>>> Is this normal?
> >> >>>>>>>
> >> >>>>>>> I guess there is some configuration file of findlib to tweak
> >> >>>>>>> somewhere.
> >> >>>>>>>
> >> >>>>>>> Regards,
> >> >>>>>>> F.
> >> >>>>>>>
> >> >>>>>>>
> >> >>>>>
> >> >>>
> >> >>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121108/da57e7ba/attachment-0001.html>

From nlinger at janestreet.com  Thu Nov  8 17:31:06 2012
From: nlinger at janestreet.com (Nathan Linger)
Date: Thu, 8 Nov 2012 12:31:06 -0500
Subject: How to load core in the toplevel?
In-Reply-To: <CACLX4jTPxtt2KfMBs-7nNbdB9_DUKDu9GUo+XwarJ8vmFaSzfQ@mail.gmail.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>
	<69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com>
	<CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>
	<8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com>
	<CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com>
	<9c71cd13-99c1-40e5-bc68-08217ebb1438@googlegroups.com>
	<0347676C-3D96-40FF-96E9-02C4242825E5@recoil.org>
	<d8383ac4-4b16-4d76-8545-d0ca5629af7e@googlegroups.com>
	<CAMu2m2KC2VFp4a1Wa2jrJgoQ3pxzeOf4AEiWhB8e3d2bjZxzkg@mail.gmail.com>
	<CACLX4jTPxtt2KfMBs-7nNbdB9_DUKDu9GUo+XwarJ8vmFaSzfQ@mail.gmail.com>
Message-ID: <CAB1twEaTdUfYDjLPmxY7uaKExGBVeHD+Qr0oCTaLNOGXYOoB5w@mail.gmail.com>


A nice way to selectively include submodules from a library packaged
up in the "Std"-style is

include struct
  open Mylib.Std
  module Foo = Foo
  module Bar = Bar
end

This is not nearly as good as if ocaml had support for syntax like
"open Mylib.Std (Foo, Bar)", but it's not so bad either.

Along with Ron, I never feel the need to do this with Core or Async.
But it is nice for other libraries that aren't so ambitious.

On Thu, Nov 8, 2012 at 11:25 AM, Yaron Minsky <yminsky at janestreet.com> wrote:
> And even if you want to pick and choose what you want to use, you
> should get things from the Std namespace.  i.e., you should grab
> things from Async.Std rather than from Async_extra.  It would be
> reasonable to do:
>
> module Core = Core.Std
> module Async = Async.Std
>
> and just qualify things by "Core" and "Async" when you wanted them.
>
> That said, I do think the Core.Std overlay is quite pleasant.
>
> y
>
> On Thu, Nov 8, 2012 at 11:06 AM, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
>>> I'm very worried about the open directives
>>
>> Your concern is generally correct, but not always. If you are using Jane
>> Street Core, the implication is that you've chosen this as your standard
>> library, and doing open Core.Std is the way to use it.
>>
>>
>> On 7 Nov 2012, at 05:33, Francois Berenger <francois.ber... at gmail.com>
>> wrote:
>>>>
>>>>
>>>> Thanks a lot.
>>>>
>>>> So, the whole recipe in my case was:
>>>>
>>>> ocaml -I $OCAML_TOPLEVEL_PATH
>>>> #thread;;
>>>> #require "core.top";;
>>>> #require "async";;
>>>>
>>>> Regards,
>>>> F.
>>>>
>>>> On Wednesday, November 7, 2012 12:09:15 PM UTC+9, Sebastien Mondet wrote:
>>>>>
>>>>>
>>>>>
>>>>> I think that one is the
>>>>>    #thread;;
>>>>> thing
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> On Tue, Nov 6, 2012 at 10:06 PM, Francois Berenger
>>>>> <francois.ber... at gmail.com> wrote:
>>>>>>
>>>>>> Thanks! That fixes the problem partially.
>>>>>>
>>>>>> Now, I get:
>>>>>>
>>>>>> # #require "core.top";;
>>>>>> # #require "core.top";;stem/lib/core/core.cma: loaded
>>>>>> Error: Reference to undefined global `Condition'
>>>>>> # #require "core";;
>>>>>> # #require "core";;m/system/lib/core/core.cma: loaded
>>>>>> Error: Reference to undefined global `Condition'
>>>>>> # #require "async";;
>>>>>> # #require "async";;/system/lib/core/core.cma: loaded
>>>>>> Error: Reference to undefined global `Condition'
>>>>>>
>>>>>> Any hint?
>>>>>>
>>>>>>
>>>>>> On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet
>>>>>> wrote:
>>>>>>>
>>>>>>>
>>>>>>> I'm not sure if this is your problem, but there was something with the
>>>>>>> toplevel (comming with the system compiler) not knowing about opam packages.
>>>>>>> I have to launch:
>>>>>>>
>>>>>>>    ocaml -I $OCAML_TOPLEVEL_PATH
>>>>>>>
>>>>>>> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`)
>>>>>>>
>>>>>>>
>>>>>>> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger
>>>>>>> <francois.ber... at gmail.com> wrote:
>>>>>>>>
>>>>>>>> Apparently, ocamlfind knows where these libraries are:
>>>>>>>>
>>>>>>>> $ ocamlfind -query core
>>>>>>>> /home/berenger/.opam/system/lib/core
>>>>>>>> $ ocamlfind -query async
>>>>>>>> /home/berenger/.opam/system/lib/async
>>>>>>>> $ ocamlfind -query async_extra
>>>>>>>> /home/berenger/.opam/system/lib/async_extra
>>>>>>>>
>>>>>>>>
>>>>>>>> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger
>>>>>>>> wrote:
>>>>>>>>>
>>>>>>>>> Hello,
>>>>>>>>>
>>>>>>>>> I'd like to play with core in my toplevel.
>>>>>>>>>
>>>>>>>>> Is there a recipe?
>>>>>>>>>
>>>>>>>>> I have installed everything with OPAM:
>>>>>>>>> $ opam list | egrep "core|async"
>>>>>>>>> async                 108.07.01  Monadic concurrency library
>>>>>>>>> async_core            108.07.01  Monadic concurrency library
>>>>>>>>> async_extra           108.07.01  Monadic concurrency library
>>>>>>>>> async_unix            108.07.01  Monadic concurrency library
>>>>>>>>> core                  108.07.01  Industrial strength alternative to
>>>>>>>>> OCaml's standard library
>>>>>>>>> core_extended                --  Extra components that are not as
>>>>>>>>> closely vetted or as stable as Core
>>>>>>>>>
>>>>>>>>> In my toplevel, I type
>>>>>>>>> #use "topfind";;
>>>>>>>>> #list;;
>>>>>>>>>
>>>>>>>>> Nothing about core or async shows up.
>>>>>>>>> While parmap is there, for example.
>>>>>>>>>
>>>>>>>>> Is this normal?
>>>>>>>>>
>>>>>>>>> I guess there is some configuration file of findlib to tweak
>>>>>>>>> somewhere.
>>>>>>>>>
>>>>>>>>> Regards,
>>>>>>>>> F.
>>>>>>>>>
>>>>>>>
>>>>>
>>>>
>>


From anil at recoil.org  Thu Nov  8 17:47:20 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 8 Nov 2012 17:47:20 +0000
Subject: Weird bug on Mac OS X
In-Reply-To: <CAP_800oSoHppULSPBoR_KjxxieQoO6pdjGfCXyi-pS9BgK_qog@mail.gmail.com>
References: <CAP_800rEOO6pGfUUb9-NtDtYg-1eBhe92POwFz3AHsS_vGVggQ@mail.gmail.com> <CAMu2m2J7xz1YVLLbMQMom8Pu7UN5f4OH_RGp9eJb7AsTq+bmTg@mail.gmail.com> <CAP_800oSoHppULSPBoR_KjxxieQoO6pdjGfCXyi-pS9BgK_qog@mail.gmail.com>
Message-ID: <6A07B832-6552-482F-BD95-10462BE9171D@recoil.org>


Looks like another misaligned stack pointer somewhere; two were fixed
already here:
http://caml.inria.fr/mantis/view.php?id=5700

MacOS 10.8 strictly needs a 16-byte aligned stack or else lots of systems
functions decide to throw in the towel (due to them using SSE instructions
by default now).

#0  0x00007fff8e4ad8a5 in misaligned_stack_error_entering_dyld_stub_binder ()
#1  0x0000000000000103 in ?? ()
#2  0x0000000100254068 in caml_absf_mask ()
#3  0x000000010022e923 in caml_raise ()
#4  0x000000010022ec71 in caml_array_bound_error ()
#5  0x000000010000b32a in .L101 ()


-a

On 8 Nov 2012, at 17:16, Markus Mottl <markus.mottl at gmail.com> wrote:

> Should have mentioned that, too: I'm running Mac OS X 10.8.2 with the
> latest XCode version (4.5.2).
> 
> On Thu, Nov 8, 2012 at 12:11 PM, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
>> I correctly get an exception with OCaml 3.12.1, Core 108.00.02, on Mac OS X
>> 10.7.5.
>> 
>> On Thu, Nov 8, 2012 at 12:04 PM, Markus Mottl <markus.mottl at gmail.com>
>> wrote:
>>> 
>>> Hi,
>>> 
>>> I've run into a segfault on Mac OS X with a very trivial program that
>>> basically just links with Jane Street Core.  Here is the file test.ml:
>>> 
>>> ----------
>>> module X = Core
>>> 
>>> let () = [||].(0) <- 42
>>> ----------
>>> 
>>> You can build it as follows:
>>> 
>>>  ocamlbuild -use-ocamlfind -cflag -thread -lflag -thread -pkgs core
>>> test.native
>>> 
>>> Running test.native will give you a segfault.  Here is the stack
>>> backtrace:
>>> 
>>> ----------
>>> #0  0x00007fff90fa78a5 in misaligned_stack_error_entering_dyld_stub_binder
>>> ()
>>> #1  0x0000000000000103 in ?? ()
>>> #2  0x0000000101c0a088 in pvars ()
>>> #3  0x0000000101bddedd in caml_raise ()
>>> #4  0x0000000101bddf99 in caml_array_bound_error ()
>>> #5  0x00000001019b6aca in .L101 ()
>>> ----------
>>> 
>>> The program should just raise an exception due to the illegal array
>>> access.  Merely raising an exception directly doesn't trigger the
>>> problem.  The program won't segfault either if the "module X = Core"
>>> line is commented out, i.e. Core has to be linked in.  Other libraries
>>> apparently also don't cause this issue.
>>> 
>>> Could another Mac OS X user here please verify the problem?  I'm using
>>> OCaml 4.00.1 with Opam and the latest release of Core in there.
>>> 
>>> Maybe somebody more knowledgeable about stack alignment and linking
>>> issues on Mac OS X has an idea what's going wrong here.  I suspect
>>> it's a code generation, linking or even runtime issue that may need to
>>> be fixed in the compiler.  Or there could be a bug in some module
>>> initialization in Core that is using C-bindings (less likely, I'm not
>>> aware of anything that could cause this).
>>> 
>>> Regards,
>>> Markus
>>> 
>>> --
>>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>> 
>> 
> 
> 
> 
> -- 
> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
> 



From sweeks at janestreet.com  Fri Nov  9 01:49:13 2012
From: sweeks at janestreet.com (Stephen Weeks)
Date: Thu, 8 Nov 2012 20:49:13 -0500
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <CAMQaOgM77i-Ly3sB3r=dU8q3vLKyZSc_MJVgA7BTzwibzLUm_w@mail.gmail.com>
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
	<87a9usk4fj.fsf@li195-236.members.linode.com>
	<CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>
	<CAPYVAiLMJAYKOgBtLDOj+NTihSjAXEX0=a4QUDTuS25B=z6z4g@mail.gmail.com>
	<CAMQaOgP0gZ-ADHyqJn7ZJH2tkdPXqg+jPs=N-aAvhvn_QT0X7Q@mail.gmail.com>
	<CAMQaOgM77i-Ly3sB3r=dU8q3vLKyZSc_MJVgA7BTzwibzLUm_w@mail.gmail.com>
Message-ID: <CAPYVAi+choTx5gR2SxbF1J1xQJzYpJKWp21MBb2rbyf_eS8aSg@mail.gmail.com>


I think replacing "Jane.Std" with "Core.Std" will work.

On Thu, Nov 8, 2012 at 8:01 PM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> By the way, how do I compile them?
> It was my initial question. ;)
>
> On Fri, Nov 9, 2012 at 10:00 AM, Francois Berenger
> <francois.berenger.working at gmail.com> wrote:
>> $ cd ~/.opam/system/build/async.108.07.01/examples
>> $ grep -ri jane.std *
>> bin_prot_test.ml:open Jane.Std
>> cat.ml:open Jane.Std
>> countdown.ml:open Jane.Std
>> finalizer.ml:open Jane.Std
>> monitors.ml:open Jane.Std
>> process.ml:open Jane.Std
>> process_stream.ml:open Jane.Std
>> server.ml:open Jane.Std
>> signals.ml:open Jane.Std
>> sigpipe.ml:open Jane.Std
>> socket.ml:open Jane.Std
>> sound.ml:open Jane.Std
>> write_forever.ml:open Jane.Std
>>
>> On Fri, Nov 9, 2012 at 2:02 AM, Stephen Weeks <sweeks at janestreet.com> wrote:
>>>> Jane.Std is some internal stuff that is not exported.  We should fix
>>>> that example not to use it.  Which specific example is it?
>>>
>>> Many of the examples in base/async/examples unnecessarily refer to
>>> Jane.Std.  I pushed a fix internally to change them all to Core.Std.


From francois.berenger.working at gmail.com  Fri Nov  9 08:14:42 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Fri, 9 Nov 2012 00:14:42 -0800 (PST)
Subject: How to create the IntSet type with core?
Message-ID: <6c9ce151-b434-4fcc-89c6-83b64fddbfb9@googlegroups.com>

Hello,

I'm converting some standard code to use core.

How do I do this in core:

module IntSet =
  Set.Make
    (struct
      let compare = Pervasives.compare
      type t = int
    end)

Thanks a lot,
F.

PS: yes, I opened Core.Std and did not die from it. ;)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121109/a67b53ee/attachment-0001.html>

From francois.berenger.working at gmail.com  Fri Nov  9 08:33:08 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Fri, 9 Nov 2012 00:33:08 -0800 (PST)
Subject: It's kind of nice the use of labels in core
Message-ID: <16acd619-67fc-40c2-9a68-d973f8970dc3@googlegroups.com>

It makes code a little more readable, I like it.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121109/d405f27c/attachment-0001.html>

From mmatalka at gmail.com  Fri Nov  9 09:08:28 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Fri, 09 Nov 2012 04:08:28 -0500
Subject: It's kind of nice the use of labels in core
In-Reply-To: <16acd619-67fc-40c2-9a68-d973f8970dc3@googlegroups.com> (Francois
	Berenger's message of "Fri, 9 Nov 2012 00:33:08 -0800 (PST)")
References: <16acd619-67fc-40c2-9a68-d973f8970dc3@googlegroups.com>
Message-ID: <877gpv3zzn.fsf@li195-236.members.linode.com>


Yes...yes it does.  One of my favorite stdlib compatibility breaking
features of Core.

Francois Berenger <francois.berenger.working at gmail.com> writes:

> It makes code a little more readable, I like it.


From mmatalka at gmail.com  Fri Nov  9 09:09:47 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Fri, 09 Nov 2012 04:09:47 -0500
Subject: How to create the IntSet type with core?
In-Reply-To: <6c9ce151-b434-4fcc-89c6-83b64fddbfb9@googlegroups.com> (Francois
	Berenger's message of "Fri, 9 Nov 2012 00:14:42 -0800 (PST)")
References: <6c9ce151-b434-4fcc-89c6-83b64fddbfb9@googlegroups.com>
Message-ID: <87390j3zxg.fsf@li195-236.members.linode.com>


The Int module probably already has a Set module in it.  So Int.Set.

All modules generally contain what they are capable of in it.  So String
has a Map module, etc.

Francois Berenger <francois.berenger.working at gmail.com> writes:

> Hello,
>
> I'm converting some standard code to use core.
>
> How do I do this in core:
>
> module IntSet =
>   Set.Make
>     (struct
>       let compare = Pervasives.compare
>       type t = int
>     end)
>
> Thanks a lot,
> F.
>
> PS: yes, I opened Core.Std and did not die from it. ;)


From dhouse at janestreet.com  Fri Nov  9 09:10:10 2012
From: dhouse at janestreet.com (David House)
Date: Fri, 9 Nov 2012 09:10:10 +0000
Subject: How to create the IntSet type with core?
In-Reply-To: <6c9ce151-b434-4fcc-89c6-83b64fddbfb9@googlegroups.com>
References: <6c9ce151-b434-4fcc-89c6-83b64fddbfb9@googlegroups.com>
Message-ID: <CAK=fH+igEs7PpDAuw6XBoVxzMTEDnY0iFeZo+MM3QK-2LZ_=bA@mail.gmail.com>


There is already an Int.Set module! :)

Here is a five-minute guide to the set / map / hashtable setup inside
core. I'll use the example of hashtables, but the language readily
translates into sets / maps.

There are two types of hashtables in core. Ones that use polymorphic
comparison, and ones that use a specific comparision function that is
hopefully more efficient and has non-surprising semantics (we
basically think polymorphic comparison, despite its convenience, is
too surprising to be an overall good thing).

The type of hashtables using polymorphic comparison is ('key, 'value)
Hashtbl.Poly.t. The type of hashtables using, e.g., int comparison for
the keys is 'value Int.Table.t. Given the previous paragraph, you
should always try to use Foo.Table when you can.

When you create a hashtable (e.g. using [create], [of_alist], or
[t_of_sexp]), you must use the specific module name. I.e. [let table =
Int.Table.create () in]. However, when you already have a hashtable in
your hands, and you want to use accessor functions, you should just
use Hashtbl.foo, regardless of what comparison function it uses.

To translate into Maps and Sets:

'value Foo.Table.t  ('key,'value) Hashtbl.Poly.t  Hashtbl.foo
'value Foo.Map.t    ('key,'value) Map.Poly.t      Map.foo
Foo.Set.t           'element Set.Poly.t           Set.foo

--

If you have your own type and want to make Table, Map and Set
submodules, it's really easy:

module T = struct
  type t = ... with compare, sexp
  let hash = (* your hash function, maybe Hashtbl.hash *)
end
include Comparable.Make(T)
include Hashable.Make(T)

Saying "with compare" generates you an efficient comparison function
specialised to your type. (Note that all component types need to have
comparison functions defined too, whether through "with compare" or
through primitives.) The Comparable.Make functor adds in modules to
make you satisfy the Comparable.S signature (basically the Set and Map
modules, and a few more). The Hashable.Make functor adds in modules to
make you satisfy Hashable.S (basically Hashtbl, as well as some others
like Hash_set). If you don't want the Hashable stuff, there is no need
to define a hash function. (Although Hashtbl.hash is normally not a
bad choice.)

--

Here's how this all works under the hood:

The type of maps is "really" ('key, 'value, 'comparator) Map.t. Maps
contain in their values the function that is used for comparing keys,
i.e. a function of type 'key -> 'key -> int. But what is this
"comparator" thing?

We can first motivate things by saying: it's a pain to have to type
Int.Map.find for int-maps, String.Map.find for string-maps, etc. etc.
It'd be nice to have a single type and use Map.find for everything.
But this presents a problem because of functions like Map.merge, which
takes two maps and combines them. You need to know that the comparison
functions are identical, but how can you do this?

So we have this extra comparator phantom type. Nothing in the actual
representation has a type involving 'comparator: it's just for static
checking. If you want to have a new comparison function, you must mint
a new comparator type. (Including the Comparable signature does this
for you.)

I originally wrote this last section with hashtables in mind, but it
appears that hashtables work slightly differently: they just assert
that the hashing functions are physically equal inside [merge]; you
don't get a compile-time error for something like [Hashtbl.merge
(Int.Table.create ()) (String.Table.create ())].

On Fri, Nov 9, 2012 at 8:14 AM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> Hello,
>
> I'm converting some standard code to use core.
>
> How do I do this in core:
>
> module IntSet =
>   Set.Make
>     (struct
>       let compare = Pervasives.compare
>       type t = int
>     end)
>
> Thanks a lot,
> F.
>
> PS: yes, I opened Core.Std and did not die from it. ;)
>


From francois.berenger.working at gmail.com  Fri Nov  9 01:00:59 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Fri, 9 Nov 2012 10:00:59 +0900
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <CAPYVAiLMJAYKOgBtLDOj+NTihSjAXEX0=a4QUDTuS25B=z6z4g@mail.gmail.com>
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
	<87a9usk4fj.fsf@li195-236.members.linode.com>
	<CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>
	<CAPYVAiLMJAYKOgBtLDOj+NTihSjAXEX0=a4QUDTuS25B=z6z4g@mail.gmail.com>
Message-ID: <CAMQaOgP0gZ-ADHyqJn7ZJH2tkdPXqg+jPs=N-aAvhvn_QT0X7Q@mail.gmail.com>


$ cd ~/.opam/system/build/async.108.07.01/examples
$ grep -ri jane.std *
bin_prot_test.ml:open Jane.Std
cat.ml:open Jane.Std
countdown.ml:open Jane.Std
finalizer.ml:open Jane.Std
monitors.ml:open Jane.Std
process.ml:open Jane.Std
process_stream.ml:open Jane.Std
server.ml:open Jane.Std
signals.ml:open Jane.Std
sigpipe.ml:open Jane.Std
socket.ml:open Jane.Std
sound.ml:open Jane.Std
write_forever.ml:open Jane.Std

On Fri, Nov 9, 2012 at 2:02 AM, Stephen Weeks <sweeks at janestreet.com> wrote:
>> Jane.Std is some internal stuff that is not exported.  We should fix
>> that example not to use it.  Which specific example is it?
>
> Many of the examples in base/async/examples unnecessarily refer to
> Jane.Std.  I pushed a fix internally to change them all to Core.Std.


From francois.berenger.working at gmail.com  Fri Nov  9 01:01:48 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Fri, 9 Nov 2012 10:01:48 +0900
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <CAMQaOgP0gZ-ADHyqJn7ZJH2tkdPXqg+jPs=N-aAvhvn_QT0X7Q@mail.gmail.com>
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
	<87a9usk4fj.fsf@li195-236.members.linode.com>
	<CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>
	<CAPYVAiLMJAYKOgBtLDOj+NTihSjAXEX0=a4QUDTuS25B=z6z4g@mail.gmail.com>
	<CAMQaOgP0gZ-ADHyqJn7ZJH2tkdPXqg+jPs=N-aAvhvn_QT0X7Q@mail.gmail.com>
Message-ID: <CAMQaOgM77i-Ly3sB3r=dU8q3vLKyZSc_MJVgA7BTzwibzLUm_w@mail.gmail.com>


By the way, how do I compile them?
It was my initial question. ;)

On Fri, Nov 9, 2012 at 10:00 AM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> $ cd ~/.opam/system/build/async.108.07.01/examples
> $ grep -ri jane.std *
> bin_prot_test.ml:open Jane.Std
> cat.ml:open Jane.Std
> countdown.ml:open Jane.Std
> finalizer.ml:open Jane.Std
> monitors.ml:open Jane.Std
> process.ml:open Jane.Std
> process_stream.ml:open Jane.Std
> server.ml:open Jane.Std
> signals.ml:open Jane.Std
> sigpipe.ml:open Jane.Std
> socket.ml:open Jane.Std
> sound.ml:open Jane.Std
> write_forever.ml:open Jane.Std
>
> On Fri, Nov 9, 2012 at 2:02 AM, Stephen Weeks <sweeks at janestreet.com> wrote:
>>> Jane.Std is some internal stuff that is not exported.  We should fix
>>> that example not to use it.  Which specific example is it?
>>
>> Many of the examples in base/async/examples unnecessarily refer to
>> Jane.Std.  I pushed a fix internally to change them all to Core.Std.


From francois.berenger.working at gmail.com  Fri Nov  9 01:04:59 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Fri, 9 Nov 2012 10:04:59 +0900
Subject: How to load core in the toplevel?
In-Reply-To: <CAB1twEaTdUfYDjLPmxY7uaKExGBVeHD+Qr0oCTaLNOGXYOoB5w@mail.gmail.com>
References: <5d25c1a7-1f19-4dbc-85ed-6745c6f187fe@googlegroups.com>
	<69353055-41f7-46db-aab6-6b3ac41d5680@googlegroups.com>
	<CALScVYmxyeeEhSbvb7Q4Rnzcc7HNo1E6FWo-T=2GRp+K+RY+HA@mail.gmail.com>
	<8173e1f3-463c-454c-a3e9-ff22eade7f84@googlegroups.com>
	<CALScVYmSWRfG+9YEcLBCH8b040UbB9ZM6dxm+Ap0xEeN2Ucpgg@mail.gmail.com>
	<9c71cd13-99c1-40e5-bc68-08217ebb1438@googlegroups.com>
	<0347676C-3D96-40FF-96E9-02C4242825E5@recoil.org>
	<d8383ac4-4b16-4d76-8545-d0ca5629af7e@googlegroups.com>
	<CAMu2m2KC2VFp4a1Wa2jrJgoQ3pxzeOf4AEiWhB8e3d2bjZxzkg@mail.gmail.com>
	<CACLX4jTPxtt2KfMBs-7nNbdB9_DUKDu9GUo+XwarJ8vmFaSzfQ@mail.gmail.com>
	<CAB1twEaTdUfYDjLPmxY7uaKExGBVeHD+Qr0oCTaLNOGXYOoB5w@mail.gmail.com>
Message-ID: <CAMQaOgM2k8_p6H5oAmVkc5AU6UVcbUnA6XFYBM5AsM69Y3pAeQ@mail.gmail.com>


On Fri, Nov 9, 2012 at 2:31 AM, Nathan Linger <nlinger at janestreet.com> wrote:
> A nice way to selectively include submodules from a library packaged
> up in the "Std"-style is
>
> include struct
>   open Mylib.Std
>   module Foo = Foo
>   module Bar = Bar
> end
>
> This is not nearly as good as if ocaml had support for syntax like
> "open Mylib.Std (Foo, Bar)", but it's not so bad either.

This looks like some Haskell code.

Because of all the nice remarks, I may consider opening Core.Std soon. ;)

> Along with Ron, I never feel the need to do this with Core or Async.
> But it is nice for other libraries that aren't so ambitious.
>
> On Thu, Nov 8, 2012 at 11:25 AM, Yaron Minsky <yminsky at janestreet.com> wrote:
>> And even if you want to pick and choose what you want to use, you
>> should get things from the Std namespace.  i.e., you should grab
>> things from Async.Std rather than from Async_extra.  It would be
>> reasonable to do:
>>
>> module Core = Core.Std
>> module Async = Async.Std
>>
>> and just qualify things by "Core" and "Async" when you wanted them.
>>
>> That said, I do think the Core.Std overlay is quite pleasant.
>>
>> y
>>
>> On Thu, Nov 8, 2012 at 11:06 AM, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
>>>> I'm very worried about the open directives
>>>
>>> Your concern is generally correct, but not always. If you are using Jane
>>> Street Core, the implication is that you've chosen this as your standard
>>> library, and doing open Core.Std is the way to use it.
>>>
>>>
>>> On 7 Nov 2012, at 05:33, Francois Berenger <francois.ber... at gmail.com>
>>> wrote:
>>>>>
>>>>>
>>>>> Thanks a lot.
>>>>>
>>>>> So, the whole recipe in my case was:
>>>>>
>>>>> ocaml -I $OCAML_TOPLEVEL_PATH
>>>>> #thread;;
>>>>> #require "core.top";;
>>>>> #require "async";;
>>>>>
>>>>> Regards,
>>>>> F.
>>>>>
>>>>> On Wednesday, November 7, 2012 12:09:15 PM UTC+9, Sebastien Mondet wrote:
>>>>>>
>>>>>>
>>>>>>
>>>>>> I think that one is the
>>>>>>    #thread;;
>>>>>> thing
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>> On Tue, Nov 6, 2012 at 10:06 PM, Francois Berenger
>>>>>> <francois.ber... at gmail.com> wrote:
>>>>>>>
>>>>>>> Thanks! That fixes the problem partially.
>>>>>>>
>>>>>>> Now, I get:
>>>>>>>
>>>>>>> # #require "core.top";;
>>>>>>> # #require "core.top";;stem/lib/core/core.cma: loaded
>>>>>>> Error: Reference to undefined global `Condition'
>>>>>>> # #require "core";;
>>>>>>> # #require "core";;m/system/lib/core/core.cma: loaded
>>>>>>> Error: Reference to undefined global `Condition'
>>>>>>> # #require "async";;
>>>>>>> # #require "async";;/system/lib/core/core.cma: loaded
>>>>>>> Error: Reference to undefined global `Condition'
>>>>>>>
>>>>>>> Any hint?
>>>>>>>
>>>>>>>
>>>>>>> On Wednesday, November 7, 2012 11:54:47 AM UTC+9, Sebastien Mondet
>>>>>>> wrote:
>>>>>>>>
>>>>>>>>
>>>>>>>> I'm not sure if this is your problem, but there was something with the
>>>>>>>> toplevel (comming with the system compiler) not knowing about opam packages.
>>>>>>>> I have to launch:
>>>>>>>>
>>>>>>>>    ocaml -I $OCAML_TOPLEVEL_PATH
>>>>>>>>
>>>>>>>> (the variable OCAML_TOPLEVEL_PATH is set by eval `opam config -env`)
>>>>>>>>
>>>>>>>>
>>>>>>>> On Tue, Nov 6, 2012 at 9:37 PM, Francois Berenger
>>>>>>>> <francois.ber... at gmail.com> wrote:
>>>>>>>>>
>>>>>>>>> Apparently, ocamlfind knows where these libraries are:
>>>>>>>>>
>>>>>>>>> $ ocamlfind -query core
>>>>>>>>> /home/berenger/.opam/system/lib/core
>>>>>>>>> $ ocamlfind -query async
>>>>>>>>> /home/berenger/.opam/system/lib/async
>>>>>>>>> $ ocamlfind -query async_extra
>>>>>>>>> /home/berenger/.opam/system/lib/async_extra
>>>>>>>>>
>>>>>>>>>
>>>>>>>>> On Wednesday, November 7, 2012 11:32:43 AM UTC+9, Francois Berenger
>>>>>>>>> wrote:
>>>>>>>>>>
>>>>>>>>>> Hello,
>>>>>>>>>>
>>>>>>>>>> I'd like to play with core in my toplevel.
>>>>>>>>>>
>>>>>>>>>> Is there a recipe?
>>>>>>>>>>
>>>>>>>>>> I have installed everything with OPAM:
>>>>>>>>>> $ opam list | egrep "core|async"
>>>>>>>>>> async                 108.07.01  Monadic concurrency library
>>>>>>>>>> async_core            108.07.01  Monadic concurrency library
>>>>>>>>>> async_extra           108.07.01  Monadic concurrency library
>>>>>>>>>> async_unix            108.07.01  Monadic concurrency library
>>>>>>>>>> core                  108.07.01  Industrial strength alternative to
>>>>>>>>>> OCaml's standard library
>>>>>>>>>> core_extended                --  Extra components that are not as
>>>>>>>>>> closely vetted or as stable as Core
>>>>>>>>>>
>>>>>>>>>> In my toplevel, I type
>>>>>>>>>> #use "topfind";;
>>>>>>>>>> #list;;
>>>>>>>>>>
>>>>>>>>>> Nothing about core or async shows up.
>>>>>>>>>> While parmap is there, for example.
>>>>>>>>>>
>>>>>>>>>> Is this normal?
>>>>>>>>>>
>>>>>>>>>> I guess there is some configuration file of findlib to tweak
>>>>>>>>>> somewhere.
>>>>>>>>>>
>>>>>>>>>> Regards,
>>>>>>>>>> F.
>>>>>>>>>>
>>>>>>>>
>>>>>>
>>>>>
>>>


From francois.berenger.working at gmail.com  Mon Nov 12 01:18:15 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Sun, 11 Nov 2012 17:18:15 -0800 (PST)
Subject: No statistics or math module in core?
Message-ID: <f8c113b2-b74a-45ab-aedb-e2a9f94e110e@googlegroups.com>

Hello,

I was looking for Pearson and Spearman correlation scores.

Regards,
F.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121111/335c8a9f/attachment-0001.html>

From francois.berenger.working at gmail.com  Mon Nov 12 01:28:19 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Sun, 11 Nov 2012 17:28:19 -0800 (PST)
Subject: Why no fold_left in Core_array?
Message-ID: <a913021f-4ba7-4c87-8c44-78e0ba4b8f03@googlegroups.com>


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121111/fe0a5f2f/attachment-0001.html>

From sweeks at janestreet.com  Mon Nov 12 01:48:27 2012
From: sweeks at janestreet.com (Stephen Weeks)
Date: Sun, 11 Nov 2012 20:48:27 -0500
Subject: Why no fold_left in Core_array?
In-Reply-To: <a913021f-4ba7-4c87-8c44-78e0ba4b8f03@googlegroups.com>
References: <a913021f-4ba7-4c87-8c44-78e0ba4b8f03@googlegroups.com>
Message-ID: <CAPYVAiLMQiMt8RWD7yuzTjMrGR3Wb5Fx6ujsTxwN_6iDc3dF2A@mail.gmail.com>


There is -- it is called "fold", and the spec comes via [include Container.S1].

On Sun, Nov 11, 2012 at 8:28 PM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
>


From francois.berenger.working at gmail.com  Mon Nov 12 05:49:50 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Sun, 11 Nov 2012 21:49:50 -0800 (PST)
Subject: Some functions I could not rewrite using core
Message-ID: <3ce6737c-bf6b-4683-bb9d-877497c5fe70@googlegroups.com>

Hello,

I'm stuck with these (standard OCaml code I'd like t
make core-compatible, or know the equivalent functions
in Core):

module A   = Array
module F   = Filename
module HT  = Hashtbl
module L   = List
module Mar = Marshal
module P   = Printf
module RNG = Random
module S   = String

(* create a Hashtbl from a list of key-value pairs *)
let hashtbl_of key_value_pairs =
  let res = HT.create (L.length key_value_pairs) in
  L.iter
    (fun (k, v) -> HT.add res k v)
    key_value_pairs;
  res

(* transform a Hashtbl of key->value into a Hashtbl of value->key *)
let reverse_binding ht =
  let res = HT.create (HT.length ht) in
  HT.iter
    (fun k v -> HT.add res v k)
    ht;
  res

Thanks,
F.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121111/52392b0f/attachment-0001.html>

From francois.berenger.working at gmail.com  Mon Nov 12 05:51:39 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Sun, 11 Nov 2012 21:51:39 -0800 (PST)
Subject: It's kind of nice the use of labels in core
In-Reply-To: <877gpv3zzn.fsf@li195-236.members.linode.com>
References: <16acd619-67fc-40c2-9a68-d973f8970dc3@googlegroups.com>
 <877gpv3zzn.fsf@li195-236.members.linode.com>
Message-ID: <08292c4a-e602-44e0-981c-2e7bed77d3ee@googlegroups.com>

One thing I realize just now: labels allow to do parameter
flipping without the need for a flip function;
which is also quite handy.

On Friday, November 9, 2012 6:08:33 PM UTC+9, Malcolm wrote:
>
> Yes...yes it does.  One of my favorite stdlib compatibility breaking 
> features of Core. 
>
> Francois Berenger <francois.ber... at gmail.com <javascript:>> writes: 
>
> > It makes code a little more readable, I like it. 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121111/fdc8ce03/attachment-0001.html>

From francois.berenger.working at gmail.com  Mon Nov 12 08:32:27 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Mon, 12 Nov 2012 00:32:27 -0800 (PST)
Subject: Some functions I could not rewrite using core
In-Reply-To: <CAK=fH+g55=EdBH9wBhLFXoBqAbZ2RsJ3c_UJ1929J4g6OkdFiQ@mail.gmail.com>
References: <3ce6737c-bf6b-4683-bb9d-877497c5fe70@googlegroups.com>
 <CAK=fH+g55=EdBH9wBhLFXoBqAbZ2RsJ3c_UJ1929J4g6OkdFiQ@mail.gmail.com>
Message-ID: <a384152f-e4f1-47a0-8422-bfbae4ed3562@googlegroups.com>



On Monday, November 12, 2012 4:38:14 PM UTC+9, David House wrote:
>
> hashtbl_of is called of_alist or of_alist_exn. (Note that because this 
> is a creator function, you have to either use Foo.Table.of_alist, or 
> Hashtbl.Poly.of_alist -- see my email last week.) 
>

I think I will tap into Caml.Hashtbl.
I have too much code relying on them that I don't have the courage to port
today.


> I don't think we have a function that does reverse_binding (I can't 
> recall ever needing it). But you should be able to write it using the 
> other functions in Hashtbl. What precisely are you struggling with? 
>

Something not very interesting to troubleshoot.
Also, I don't have the courage today so Caml.Hashtbl will save me. ;)
 

>
> On Mon, Nov 12, 2012 at 5:49 AM, Francois Berenger 
> <francois.ber... at gmail.com <javascript:>> wrote: 
> > Hello, 
> > 
> > I'm stuck with these (standard OCaml code I'd like t 
> > make core-compatible, or know the equivalent functions 
> > in Core): 
> > 
> > module A   = Array 
> > module F   = Filename 
> > module HT  = Hashtbl 
> > module L   = List 
> > module Mar = Marshal 
> > module P   = Printf 
> > module RNG = Random 
> > module S   = String 
> > 
> > (* create a Hashtbl from a list of key-value pairs *) 
> > let hashtbl_of key_value_pairs = 
> >   let res = HT.create (L.length key_value_pairs) in 
> >   L.iter 
> >     (fun (k, v) -> HT.add res k v) 
> >     key_value_pairs; 
> >   res 
> > 
> > (* transform a Hashtbl of key->value into a Hashtbl of value->key *) 
> > let reverse_binding ht = 
> >   let res = HT.create (HT.length ht) in 
> >   HT.iter 
> >     (fun k v -> HT.add res v k) 
> >     ht; 
> >   res 
> > 
> > Thanks, 
> > F. 
> > 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121112/02a1e780/attachment-0001.html>

From francois.berenger.working at gmail.com  Mon Nov 12 08:51:19 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Mon, 12 Nov 2012 00:51:19 -0800 (PST)
Subject: How to create the IntSet type with core? [joke]
In-Reply-To: <CAK=fH+igEs7PpDAuw6XBoVxzMTEDnY0iFeZo+MM3QK-2LZ_=bA@mail.gmail.com>
References: <6c9ce151-b434-4fcc-89c6-83b64fddbfb9@googlegroups.com>
 <CAK=fH+igEs7PpDAuw6XBoVxzMTEDnY0iFeZo+MM3QK-2LZ_=bA@mail.gmail.com>
Message-ID: <aa2fe250-7e1a-4d67-9dfa-b8b50452a9fe@googlegroups.com>

I think this google group should be renamed to: ocaml-type-junkies
;)

On Friday, November 9, 2012 6:11:14 PM UTC+9, David House wrote:
>
> There is already an Int.Set module! :) 
>
> Here is a five-minute guide to the set / map / hashtable setup inside 
> core. I'll use the example of hashtables, but the language readily 
> translates into sets / maps. 
>
> There are two types of hashtables in core. Ones that use polymorphic 
> comparison, and ones that use a specific comparision function that is 
> hopefully more efficient and has non-surprising semantics (we 
> basically think polymorphic comparison, despite its convenience, is 
> too surprising to be an overall good thing). 
>
> The type of hashtables using polymorphic comparison is ('key, 'value) 
> Hashtbl.Poly.t. The type of hashtables using, e.g., int comparison for 
> the keys is 'value Int.Table.t. Given the previous paragraph, you 
> should always try to use Foo.Table when you can. 
>
> When you create a hashtable (e.g. using [create], [of_alist], or 
> [t_of_sexp]), you must use the specific module name. I.e. [let table = 
> Int.Table.create () in]. However, when you already have a hashtable in 
> your hands, and you want to use accessor functions, you should just 
> use Hashtbl.foo, regardless of what comparison function it uses. 
>
> To translate into Maps and Sets: 
>
> 'value Foo.Table.t  ('key,'value) Hashtbl.Poly.t  Hashtbl.foo 
> 'value Foo.Map.t    ('key,'value) Map.Poly.t      Map.foo 
> Foo.Set.t           'element Set.Poly.t           Set.foo 
>
> -- 
>
> If you have your own type and want to make Table, Map and Set 
> submodules, it's really easy: 
>
> module T = struct 
>   type t = ... with compare, sexp 
>   let hash = (* your hash function, maybe Hashtbl.hash *) 
> end 
> include Comparable.Make(T) 
> include Hashable.Make(T) 
>
> Saying "with compare" generates you an efficient comparison function 
> specialised to your type. (Note that all component types need to have 
> comparison functions defined too, whether through "with compare" or 
> through primitives.) The Comparable.Make functor adds in modules to 
> make you satisfy the Comparable.S signature (basically the Set and Map 
> modules, and a few more). The Hashable.Make functor adds in modules to 
> make you satisfy Hashable.S (basically Hashtbl, as well as some others 
> like Hash_set). If you don't want the Hashable stuff, there is no need 
> to define a hash function. (Although Hashtbl.hash is normally not a 
> bad choice.) 
>
> -- 
>
> Here's how this all works under the hood: 
>
> The type of maps is "really" ('key, 'value, 'comparator) Map.t. Maps 
> contain in their values the function that is used for comparing keys, 
> i.e. a function of type 'key -> 'key -> int. But what is this 
> "comparator" thing? 
>
> We can first motivate things by saying: it's a pain to have to type 
> Int.Map.find for int-maps, String.Map.find for string-maps, etc. etc. 
> It'd be nice to have a single type and use Map.find for everything. 
> But this presents a problem because of functions like Map.merge, which 
> takes two maps and combines them. You need to know that the comparison 
> functions are identical, but how can you do this? 
>
> So we have this extra comparator phantom type. Nothing in the actual 
> representation has a type involving 'comparator: it's just for static 
> checking. If you want to have a new comparison function, you must mint 
> a new comparator type. (Including the Comparable signature does this 
> for you.) 
>
> I originally wrote this last section with hashtables in mind, but it 
> appears that hashtables work slightly differently: they just assert 
> that the hashing functions are physically equal inside [merge]; you 
> don't get a compile-time error for something like [Hashtbl.merge 
> (Int.Table.create ()) (String.Table.create ())]. 
>
> On Fri, Nov 9, 2012 at 8:14 AM, Francois Berenger 
> <francois.ber... at gmail.com <javascript:>> wrote: 
> > Hello, 
> > 
> > I'm converting some standard code to use core. 
> > 
> > How do I do this in core: 
> > 
> > module IntSet = 
> >   Set.Make 
> >     (struct 
> >       let compare = Pervasives.compare 
> >       type t = int 
> >     end) 
> > 
> > Thanks a lot, 
> > F. 
> > 
> > PS: yes, I opened Core.Std and did not die from it. ;) 
> > 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121112/6209c199/attachment-0001.html>

From dhouse at janestreet.com  Mon Nov 12 07:38:12 2012
From: dhouse at janestreet.com (David House)
Date: Mon, 12 Nov 2012 07:38:12 +0000
Subject: Some functions I could not rewrite using core
In-Reply-To: <3ce6737c-bf6b-4683-bb9d-877497c5fe70@googlegroups.com>
References: <3ce6737c-bf6b-4683-bb9d-877497c5fe70@googlegroups.com>
Message-ID: <CAK=fH+g55=EdBH9wBhLFXoBqAbZ2RsJ3c_UJ1929J4g6OkdFiQ@mail.gmail.com>


hashtbl_of is called of_alist or of_alist_exn. (Note that because this
is a creator function, you have to either use Foo.Table.of_alist, or
Hashtbl.Poly.of_alist -- see my email last week.)

I don't think we have a function that does reverse_binding (I can't
recall ever needing it). But you should be able to write it using the
other functions in Hashtbl. What precisely are you struggling with?

On Mon, Nov 12, 2012 at 5:49 AM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> Hello,
>
> I'm stuck with these (standard OCaml code I'd like t
> make core-compatible, or know the equivalent functions
> in Core):
>
> module A   = Array
> module F   = Filename
> module HT  = Hashtbl
> module L   = List
> module Mar = Marshal
> module P   = Printf
> module RNG = Random
> module S   = String
>
> (* create a Hashtbl from a list of key-value pairs *)
> let hashtbl_of key_value_pairs =
>   let res = HT.create (L.length key_value_pairs) in
>   L.iter
>     (fun (k, v) -> HT.add res k v)
>     key_value_pairs;
>   res
>
> (* transform a Hashtbl of key->value into a Hashtbl of value->key *)
> let reverse_binding ht =
>   let res = HT.create (HT.length ht) in
>   HT.iter
>     (fun k v -> HT.add res v k)
>     ht;
>   res
>
> Thanks,
> F.
>


From agarwal1975 at gmail.com  Mon Nov 12 15:08:38 2012
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Mon, 12 Nov 2012 10:08:38 -0500
Subject: No statistics or math module in core?
In-Reply-To: <f8c113b2-b74a-45ab-aedb-e2a9f94e110e@googlegroups.com>
References: <f8c113b2-b74a-45ab-aedb-e2a9f94e110e@googlegroups.com>
Message-ID: <CAMu2m2KB+BpmM3T8UYxbX9pf8gUhnz6pBKzB9chVwMAT6qACUw@mail.gmail.com>

We have these in Biocaml.Math, which is not a great place for them. It
would be nice for OCaml to have some math/statistics libraries. OCaml-R has
a binding to R's math library, but there isn't a stable release.


On Sun, Nov 11, 2012 at 8:18 PM, Francois Berenger <
francois.berenger.working at gmail.com> wrote:

> Hello,
>
> I was looking for Pearson and Spearman correlation scores.
>
> Regards,
> F.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121112/1d74fd4e/attachment-0001.html>

From markus.mottl at gmail.com  Mon Nov 12 15:20:41 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Mon, 12 Nov 2012 10:20:41 -0500
Subject: No statistics or math module in core?
In-Reply-To: <CAMu2m2KB+BpmM3T8UYxbX9pf8gUhnz6pBKzB9chVwMAT6qACUw@mail.gmail.com>
References: <f8c113b2-b74a-45ab-aedb-e2a9f94e110e@googlegroups.com>
	<CAMu2m2KB+BpmM3T8UYxbX9pf8gUhnz6pBKzB9chVwMAT6qACUw@mail.gmail.com>
Message-ID: <CAP_800oNNQcS48fKA68aCrfdZN6hG1O7ZzdWy-OqAt47iQMckw@mail.gmail.com>


On Mon, Nov 12, 2012 at 10:08 AM, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
> We have these in Biocaml.Math, which is not a great place for them. It would
> be nice for OCaml to have some math/statistics libraries. OCaml-R has a
> binding to R's math library, but there isn't a stable release.

There are two libraries that should mostly address your needs for math
and statistics: lacaml and gsl-ocaml:

  https://bitbucket.org/mmottl/lacaml
  https://bitbucket.org/mmottl/gsl-ocaml

The first one interfaces most of BLAS/LAPACK, which are the de-facto
standard for heavy-duty linear algebra (vector and matrix operations,
factorizations, eigenproblems, solving equations and least-squares
problems, etc.).

gsl-ocaml interfaces most of the GNU Scientific Library, which is
probably the most widely used open source library for that purpose.

Regards,
Markus

-- 
Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com


From agarwal1975 at gmail.com  Mon Nov 12 15:39:11 2012
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Mon, 12 Nov 2012 10:39:11 -0500
Subject: No statistics or math module in core?
In-Reply-To: <CAP_800oNNQcS48fKA68aCrfdZN6hG1O7ZzdWy-OqAt47iQMckw@mail.gmail.com>
References: <f8c113b2-b74a-45ab-aedb-e2a9f94e110e@googlegroups.com>
 <CAMu2m2KB+BpmM3T8UYxbX9pf8gUhnz6pBKzB9chVwMAT6qACUw@mail.gmail.com> <CAP_800oNNQcS48fKA68aCrfdZN6hG1O7ZzdWy-OqAt47iQMckw@mail.gmail.com>
Message-ID: <CAMu2m2+b2CpNPxeoT+Uj4XaNdYBFTQsNW+6zUdqboaxjRw+kFQ@mail.gmail.com>

I found Pearson correlation in GSL [1] but don't see Spearman.

[1] http://www.gnu.org/software/gsl/manual/html_node/Correlation.html



On Mon, Nov 12, 2012 at 10:20 AM, Markus Mottl <markus.mottl at gmail.com>wrote:

> On Mon, Nov 12, 2012 at 10:08 AM, Ashish Agarwal <agarwal1975 at gmail.com>
> wrote:
> > We have these in Biocaml.Math, which is not a great place for them. It
> would
> > be nice for OCaml to have some math/statistics libraries. OCaml-R has a
> > binding to R's math library, but there isn't a stable release.
>
> There are two libraries that should mostly address your needs for math
> and statistics: lacaml and gsl-ocaml:
>
>   https://bitbucket.org/mmottl/lacaml
>   https://bitbucket.org/mmottl/gsl-ocaml
>
> The first one interfaces most of BLAS/LAPACK, which are the de-facto
> standard for heavy-duty linear algebra (vector and matrix operations,
> factorizations, eigenproblems, solving equations and least-squares
> problems, etc.).
>
> gsl-ocaml interfaces most of the GNU Scientific Library, which is
> probably the most widely used open source library for that purpose.
>
> Regards,
> Markus
>
> --
> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121112/8bd825f6/attachment-0001.html>

From markus.mottl at gmail.com  Mon Nov 12 15:54:14 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Mon, 12 Nov 2012 10:54:14 -0500
Subject: No statistics or math module in core?
In-Reply-To: <CAMu2m2+b2CpNPxeoT+Uj4XaNdYBFTQsNW+6zUdqboaxjRw+kFQ@mail.gmail.com>
References: <f8c113b2-b74a-45ab-aedb-e2a9f94e110e@googlegroups.com>
	<CAMu2m2KB+BpmM3T8UYxbX9pf8gUhnz6pBKzB9chVwMAT6qACUw@mail.gmail.com>
	<CAP_800oNNQcS48fKA68aCrfdZN6hG1O7ZzdWy-OqAt47iQMckw@mail.gmail.com>
	<CAMu2m2+b2CpNPxeoT+Uj4XaNdYBFTQsNW+6zUdqboaxjRw+kFQ@mail.gmail.com>
Message-ID: <CAP_800pBfkYRfXjfxeazfdjeK1QE4OSAx+Y=YzXYTv7ij_wMcg@mail.gmail.com>


True, it surprisingly seems that Spearman hasn't been implemented in GSL yet.

On Mon, Nov 12, 2012 at 10:39 AM, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
> I found Pearson correlation in GSL [1] but don't see Spearman.
>
> [1] http://www.gnu.org/software/gsl/manual/html_node/Correlation.html
>
>
>
> On Mon, Nov 12, 2012 at 10:20 AM, Markus Mottl <markus.mottl at gmail.com>
> wrote:
>>
>> On Mon, Nov 12, 2012 at 10:08 AM, Ashish Agarwal <agarwal1975 at gmail.com>
>> wrote:
>> > We have these in Biocaml.Math, which is not a great place for them. It
>> > would
>> > be nice for OCaml to have some math/statistics libraries. OCaml-R has a
>> > binding to R's math library, but there isn't a stable release.
>>
>> There are two libraries that should mostly address your needs for math
>> and statistics: lacaml and gsl-ocaml:
>>
>>   https://bitbucket.org/mmottl/lacaml
>>   https://bitbucket.org/mmottl/gsl-ocaml
>>
>> The first one interfaces most of BLAS/LAPACK, which are the de-facto
>> standard for heavy-duty linear algebra (vector and matrix operations,
>> factorizations, eigenproblems, solving equations and least-squares
>> problems, etc.).
>>
>> gsl-ocaml interfaces most of the GNU Scientific Library, which is
>> probably the most widely used open source library for that purpose.
>>
>> Regards,
>> Markus
>>
>> --
>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>
>



-- 
Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com


From dj at lobraico.com  Mon Nov 12 20:20:43 2012
From: dj at lobraico.com (Dominick LoBraico)
Date: Mon, 12 Nov 2012 12:20:43 -0800 (PST)
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <CAMQaOgM77i-Ly3sB3r=dU8q3vLKyZSc_MJVgA7BTzwibzLUm_w@mail.gmail.com>
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
 <87a9usk4fj.fsf@li195-236.members.linode.com>
 <CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>
 <CAPYVAiLMJAYKOgBtLDOj+NTihSjAXEX0=a4QUDTuS25B=z6z4g@mail.gmail.com>
 <CAMQaOgP0gZ-ADHyqJn7ZJH2tkdPXqg+jPs=N-aAvhvn_QT0X7Q@mail.gmail.com>
 <CAMQaOgM77i-Ly3sB3r=dU8q3vLKyZSc_MJVgA7BTzwibzLUm_w@mail.gmail.com>
Message-ID: <1ac23dbf-9e49-4cf6-8f59-7788364941a3@googlegroups.com>

Francois,

If you have ocamlfind install, this should work (for example):

$ ocamlfind ocamlc -thread -package async -linkpkg hello.ml -o hello.exe


On Thursday, November 8, 2012 7:01:50 PM UTC-6, Francois Berenger wrote:
>
> By the way, how do I compile them? 
> It was my initial question. ;) 
>
> On Fri, Nov 9, 2012 at 10:00 AM, Francois Berenger 
> <francois.ber... at gmail.com <javascript:>> wrote: 
> > $ cd ~/.opam/system/build/async.108.07.01/examples 
> > $ grep -ri jane.std * 
> > bin_prot_test.ml:open Jane.Std 
> > cat.ml:open Jane.Std 
> > countdown.ml:open Jane.Std 
> > finalizer.ml:open Jane.Std 
> > monitors.ml:open Jane.Std 
> > process.ml:open Jane.Std 
> > process_stream.ml:open Jane.Std 
> > server.ml:open Jane.Std 
> > signals.ml:open Jane.Std 
> > sigpipe.ml:open Jane.Std 
> > socket.ml:open Jane.Std 
> > sound.ml:open Jane.Std 
> > write_forever.ml:open Jane.Std 
> > 
> > On Fri, Nov 9, 2012 at 2:02 AM, Stephen Weeks <swe... at janestreet.com<javascript:>> 
> wrote: 
> >>> Jane.Std is some internal stuff that is not exported.  We should fix 
> >>> that example not to use it.  Which specific example is it? 
> >> 
> >> Many of the examples in base/async/examples unnecessarily refer to 
> >> Jane.Std.  I pushed a fix internally to change them all to Core.Std. 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121112/43663452/attachment-0001.html>

From yminsky at janestreet.com  Mon Nov 12 17:43:50 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Mon, 12 Nov 2012 12:43:50 -0500
Subject: How to create the IntSet type with core? [joke]
In-Reply-To: <aa2fe250-7e1a-4d67-9dfa-b8b50452a9fe@googlegroups.com>
References: <6c9ce151-b434-4fcc-89c6-83b64fddbfb9@googlegroups.com>
	<CAK=fH+igEs7PpDAuw6XBoVxzMTEDnY0iFeZo+MM3QK-2LZ_=bA@mail.gmail.com>
	<aa2fe250-7e1a-4d67-9dfa-b8b50452a9fe@googlegroups.com>
Message-ID: <CACLX4jSEFXjSd_uWduYA0qMmx4aJxoCTxXmxQ6KJoiStveHYug@mail.gmail.com>


We try to be pretty conservative most of the time, but yeah, there's a
bit of cleverness here....

y

On Mon, Nov 12, 2012 at 3:51 AM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> I think this google group should be renamed to: ocaml-type-junkies
> ;)
>
> On Friday, November 9, 2012 6:11:14 PM UTC+9, David House wrote:
>>
>> There is already an Int.Set module! :)
>>
>> Here is a five-minute guide to the set / map / hashtable setup inside
>> core. I'll use the example of hashtables, but the language readily
>> translates into sets / maps.
>>
>> There are two types of hashtables in core. Ones that use polymorphic
>> comparison, and ones that use a specific comparision function that is
>> hopefully more efficient and has non-surprising semantics (we
>> basically think polymorphic comparison, despite its convenience, is
>> too surprising to be an overall good thing).
>>
>> The type of hashtables using polymorphic comparison is ('key, 'value)
>> Hashtbl.Poly.t. The type of hashtables using, e.g., int comparison for
>> the keys is 'value Int.Table.t. Given the previous paragraph, you
>> should always try to use Foo.Table when you can.
>>
>> When you create a hashtable (e.g. using [create], [of_alist], or
>> [t_of_sexp]), you must use the specific module name. I.e. [let table =
>> Int.Table.create () in]. However, when you already have a hashtable in
>> your hands, and you want to use accessor functions, you should just
>> use Hashtbl.foo, regardless of what comparison function it uses.
>>
>> To translate into Maps and Sets:
>>
>> 'value Foo.Table.t  ('key,'value) Hashtbl.Poly.t  Hashtbl.foo
>> 'value Foo.Map.t    ('key,'value) Map.Poly.t      Map.foo
>> Foo.Set.t           'element Set.Poly.t           Set.foo
>>
>> --
>>
>> If you have your own type and want to make Table, Map and Set
>> submodules, it's really easy:
>>
>> module T = struct
>>   type t = ... with compare, sexp
>>   let hash = (* your hash function, maybe Hashtbl.hash *)
>> end
>> include Comparable.Make(T)
>> include Hashable.Make(T)
>>
>> Saying "with compare" generates you an efficient comparison function
>> specialised to your type. (Note that all component types need to have
>> comparison functions defined too, whether through "with compare" or
>> through primitives.) The Comparable.Make functor adds in modules to
>> make you satisfy the Comparable.S signature (basically the Set and Map
>> modules, and a few more). The Hashable.Make functor adds in modules to
>> make you satisfy Hashable.S (basically Hashtbl, as well as some others
>> like Hash_set). If you don't want the Hashable stuff, there is no need
>> to define a hash function. (Although Hashtbl.hash is normally not a
>> bad choice.)
>>
>> --
>>
>> Here's how this all works under the hood:
>>
>> The type of maps is "really" ('key, 'value, 'comparator) Map.t. Maps
>> contain in their values the function that is used for comparing keys,
>> i.e. a function of type 'key -> 'key -> int. But what is this
>> "comparator" thing?
>>
>> We can first motivate things by saying: it's a pain to have to type
>> Int.Map.find for int-maps, String.Map.find for string-maps, etc. etc.
>> It'd be nice to have a single type and use Map.find for everything.
>> But this presents a problem because of functions like Map.merge, which
>> takes two maps and combines them. You need to know that the comparison
>> functions are identical, but how can you do this?
>>
>> So we have this extra comparator phantom type. Nothing in the actual
>> representation has a type involving 'comparator: it's just for static
>> checking. If you want to have a new comparison function, you must mint
>> a new comparator type. (Including the Comparable signature does this
>> for you.)
>>
>> I originally wrote this last section with hashtables in mind, but it
>> appears that hashtables work slightly differently: they just assert
>> that the hashing functions are physically equal inside [merge]; you
>> don't get a compile-time error for something like [Hashtbl.merge
>> (Int.Table.create ()) (String.Table.create ())].
>>
>> On Fri, Nov 9, 2012 at 8:14 AM, Francois Berenger
>> <francois.ber... at gmail.com> wrote:
>> > Hello,
>> >
>> > I'm converting some standard code to use core.
>> >
>> > How do I do this in core:
>> >
>> > module IntSet =
>> >   Set.Make
>> >     (struct
>> >       let compare = Pervasives.compare
>> >       type t = int
>> >     end)
>> >
>> > Thanks a lot,
>> > F.
>> >
>> > PS: yes, I opened Core.Std and did not die from it. ;)
>> >


From mmatalka at gmail.com  Mon Nov 12 18:04:58 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Mon, 12 Nov 2012 13:04:58 -0500
Subject: How to create the IntSet type with core? [joke]
In-Reply-To: <CACLX4jSEFXjSd_uWduYA0qMmx4aJxoCTxXmxQ6KJoiStveHYug@mail.gmail.com>
	(Yaron Minsky's message of "Mon, 12 Nov 2012 12:43:50 -0500")
References: <6c9ce151-b434-4fcc-89c6-83b64fddbfb9@googlegroups.com>
	<CAK=fH+igEs7PpDAuw6XBoVxzMTEDnY0iFeZo+MM3QK-2LZ_=bA@mail.gmail.com>
	<aa2fe250-7e1a-4d67-9dfa-b8b50452a9fe@googlegroups.com>
	<CACLX4jSEFXjSd_uWduYA0qMmx4aJxoCTxXmxQ6KJoiStveHYug@mail.gmail.com>
Message-ID: <87txsuvgs5.fsf@li195-236.members.linode.com>


It's very handy cleverness though!

Yaron Minsky <yminsky at janestreet.com> writes:

> We try to be pretty conservative most of the time, but yeah, there's a
> bit of cleverness here....
>
> y
>
> On Mon, Nov 12, 2012 at 3:51 AM, Francois Berenger
> <francois.berenger.working at gmail.com> wrote:
>> I think this google group should be renamed to: ocaml-type-junkies
>> ;)
>>
>> On Friday, November 9, 2012 6:11:14 PM UTC+9, David House wrote:
>>>
>>> There is already an Int.Set module! :)
>>>
>>> Here is a five-minute guide to the set / map / hashtable setup inside
>>> core. I'll use the example of hashtables, but the language readily
>>> translates into sets / maps.
>>>
>>> There are two types of hashtables in core. Ones that use polymorphic
>>> comparison, and ones that use a specific comparision function that is
>>> hopefully more efficient and has non-surprising semantics (we
>>> basically think polymorphic comparison, despite its convenience, is
>>> too surprising to be an overall good thing).
>>>
>>> The type of hashtables using polymorphic comparison is ('key, 'value)
>>> Hashtbl.Poly.t. The type of hashtables using, e.g., int comparison for
>>> the keys is 'value Int.Table.t. Given the previous paragraph, you
>>> should always try to use Foo.Table when you can.
>>>
>>> When you create a hashtable (e.g. using [create], [of_alist], or
>>> [t_of_sexp]), you must use the specific module name. I.e. [let table =
>>> Int.Table.create () in]. However, when you already have a hashtable in
>>> your hands, and you want to use accessor functions, you should just
>>> use Hashtbl.foo, regardless of what comparison function it uses.
>>>
>>> To translate into Maps and Sets:
>>>
>>> 'value Foo.Table.t  ('key,'value) Hashtbl.Poly.t  Hashtbl.foo
>>> 'value Foo.Map.t    ('key,'value) Map.Poly.t      Map.foo
>>> Foo.Set.t           'element Set.Poly.t           Set.foo
>>>
>>> --
>>>
>>> If you have your own type and want to make Table, Map and Set
>>> submodules, it's really easy:
>>>
>>> module T = struct
>>>   type t = ... with compare, sexp
>>>   let hash = (* your hash function, maybe Hashtbl.hash *)
>>> end
>>> include Comparable.Make(T)
>>> include Hashable.Make(T)
>>>
>>> Saying "with compare" generates you an efficient comparison function
>>> specialised to your type. (Note that all component types need to have
>>> comparison functions defined too, whether through "with compare" or
>>> through primitives.) The Comparable.Make functor adds in modules to
>>> make you satisfy the Comparable.S signature (basically the Set and Map
>>> modules, and a few more). The Hashable.Make functor adds in modules to
>>> make you satisfy Hashable.S (basically Hashtbl, as well as some others
>>> like Hash_set). If you don't want the Hashable stuff, there is no need
>>> to define a hash function. (Although Hashtbl.hash is normally not a
>>> bad choice.)
>>>
>>> --
>>>
>>> Here's how this all works under the hood:
>>>
>>> The type of maps is "really" ('key, 'value, 'comparator) Map.t. Maps
>>> contain in their values the function that is used for comparing keys,
>>> i.e. a function of type 'key -> 'key -> int. But what is this
>>> "comparator" thing?
>>>
>>> We can first motivate things by saying: it's a pain to have to type
>>> Int.Map.find for int-maps, String.Map.find for string-maps, etc. etc.
>>> It'd be nice to have a single type and use Map.find for everything.
>>> But this presents a problem because of functions like Map.merge, which
>>> takes two maps and combines them. You need to know that the comparison
>>> functions are identical, but how can you do this?
>>>
>>> So we have this extra comparator phantom type. Nothing in the actual
>>> representation has a type involving 'comparator: it's just for static
>>> checking. If you want to have a new comparison function, you must mint
>>> a new comparator type. (Including the Comparable signature does this
>>> for you.)
>>>
>>> I originally wrote this last section with hashtables in mind, but it
>>> appears that hashtables work slightly differently: they just assert
>>> that the hashing functions are physically equal inside [merge]; you
>>> don't get a compile-time error for something like [Hashtbl.merge
>>> (Int.Table.create ()) (String.Table.create ())].
>>>
>>> On Fri, Nov 9, 2012 at 8:14 AM, Francois Berenger
>>> <francois.ber... at gmail.com> wrote:
>>> > Hello,
>>> >
>>> > I'm converting some standard code to use core.
>>> >
>>> > How do I do this in core:
>>> >
>>> > module IntSet =
>>> >   Set.Make
>>> >     (struct
>>> >       let compare = Pervasives.compare
>>> >       type t = int
>>> >     end)
>>> >
>>> > Thanks a lot,
>>> > F.
>>> >
>>> > PS: yes, I opened Core.Std and did not die from it. ;)
>>> >


From dj at lobraico.com  Mon Nov 12 23:39:15 2012
From: dj at lobraico.com (Dominick LoBraico)
Date: Mon, 12 Nov 2012 15:39:15 -0800 (PST)
Subject: Weird bug on Mac OS X
In-Reply-To: <6A07B832-6552-482F-BD95-10462BE9171D@recoil.org>
References: <CAP_800rEOO6pGfUUb9-NtDtYg-1eBhe92POwFz3AHsS_vGVggQ@mail.gmail.com> <CAMu2m2J7xz1YVLLbMQMom8Pu7UN5f4OH_RGp9eJb7AsTq+bmTg@mail.gmail.com> <CAP_800oSoHppULSPBoR_KjxxieQoO6pdjGfCXyi-pS9BgK_qog@mail.gmail.com>
 <6A07B832-6552-482F-BD95-10462BE9171D@recoil.org>
Message-ID: <f4af2464-5d94-4d12-a50d-65317ce79562@googlegroups.com>

Confirmed segfault on 10.8.2 with latest core (108.07.01) and OCaml 
4.00.1+short-types.

On Thursday, November 8, 2012 11:47:21 AM UTC-6, Anil Madhavapeddy wrote:
>
> Looks like another misaligned stack pointer somewhere; two were fixed 
> already here: 
> http://caml.inria.fr/mantis/view.php?id=5700 
>
> MacOS 10.8 strictly needs a 16-byte aligned stack or else lots of systems 
> functions decide to throw in the towel (due to them using SSE instructions 
> by default now). 
>
> #0  0x00007fff8e4ad8a5 in misaligned_stack_error_entering_dyld_stub_binder 
> () 
> #1  0x0000000000000103 in ?? () 
> #2  0x0000000100254068 in caml_absf_mask () 
> #3  0x000000010022e923 in caml_raise () 
> #4  0x000000010022ec71 in caml_array_bound_error () 
> #5  0x000000010000b32a in .L101 () 
>
>
> -a 
>
> On 8 Nov 2012, at 17:16, Markus Mottl <markus... at gmail.com <javascript:>> 
> wrote: 
>
> > Should have mentioned that, too: I'm running Mac OS X 10.8.2 with the 
> > latest XCode version (4.5.2). 
> > 
> > On Thu, Nov 8, 2012 at 12:11 PM, Ashish Agarwal <agarw... at gmail.com<javascript:>> 
> wrote: 
> >> I correctly get an exception with OCaml 3.12.1, Core 108.00.02, on Mac 
> OS X 
> >> 10.7.5. 
> >> 
> >> On Thu, Nov 8, 2012 at 12:04 PM, Markus Mottl <markus... at gmail.com<javascript:>> 
>
> >> wrote: 
> >>> 
> >>> Hi, 
> >>> 
> >>> I've run into a segfault on Mac OS X with a very trivial program that 
> >>> basically just links with Jane Street Core.  Here is the file test.ml: 
>
> >>> 
> >>> ---------- 
> >>> module X = Core 
> >>> 
> >>> let () = [||].(0) <- 42 
> >>> ---------- 
> >>> 
> >>> You can build it as follows: 
> >>> 
> >>>  ocamlbuild -use-ocamlfind -cflag -thread -lflag -thread -pkgs core 
> >>> test.native 
> >>> 
> >>> Running test.native will give you a segfault.  Here is the stack 
> >>> backtrace: 
> >>> 
> >>> ---------- 
> >>> #0  0x00007fff90fa78a5 in 
> misaligned_stack_error_entering_dyld_stub_binder 
> >>> () 
> >>> #1  0x0000000000000103 in ?? () 
> >>> #2  0x0000000101c0a088 in pvars () 
> >>> #3  0x0000000101bddedd in caml_raise () 
> >>> #4  0x0000000101bddf99 in caml_array_bound_error () 
> >>> #5  0x00000001019b6aca in .L101 () 
> >>> ---------- 
> >>> 
> >>> The program should just raise an exception due to the illegal array 
> >>> access.  Merely raising an exception directly doesn't trigger the 
> >>> problem.  The program won't segfault either if the "module X = Core" 
> >>> line is commented out, i.e. Core has to be linked in.  Other libraries 
> >>> apparently also don't cause this issue. 
> >>> 
> >>> Could another Mac OS X user here please verify the problem?  I'm using 
> >>> OCaml 4.00.1 with Opam and the latest release of Core in there. 
> >>> 
> >>> Maybe somebody more knowledgeable about stack alignment and linking 
> >>> issues on Mac OS X has an idea what's going wrong here.  I suspect 
> >>> it's a code generation, linking or even runtime issue that may need to 
> >>> be fixed in the compiler.  Or there could be a bug in some module 
> >>> initialization in Core that is using C-bindings (less likely, I'm not 
> >>> aware of anything that could cause this). 
> >>> 
> >>> Regards, 
> >>> Markus 
> >>> 
> >>> -- 
> >>> Markus Mottl        http://www.ocaml.info        markus... at gmail.com<javascript:> 
> >> 
> >> 
> > 
> > 
> > 
> > -- 
> > Markus Mottl        http://www.ocaml.info        markus... at gmail.com<javascript:> 
> > 
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121112/37ad994a/attachment-0001.html>

From francois.berenger.working at gmail.com  Tue Nov 13 01:00:14 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Mon, 12 Nov 2012 17:00:14 -0800 (PST)
Subject: No statistics or math module in core?
In-Reply-To: <CAP_800pBfkYRfXjfxeazfdjeK1QE4OSAx+Y=YzXYTv7ij_wMcg@mail.gmail.com>
References: <f8c113b2-b74a-45ab-aedb-e2a9f94e110e@googlegroups.com>
 <CAMu2m2KB+BpmM3T8UYxbX9pf8gUhnz6pBKzB9chVwMAT6qACUw@mail.gmail.com>
 <CAP_800oNNQcS48fKA68aCrfdZN6hG1O7ZzdWy-OqAt47iQMckw@mail.gmail.com>
 <CAMu2m2+b2CpNPxeoT+Uj4XaNdYBFTQsNW+6zUdqboaxjRw+kFQ@mail.gmail.com>
 <CAP_800pBfkYRfXjfxeazfdjeK1QE4OSAx+Y=YzXYTv7ij_wMcg@mail.gmail.com>
Message-ID: <47f9b2d0-293a-4c70-9e10-580f88016566@googlegroups.com>

Yes, I noticed this also very recently.

On Tuesday, November 13, 2012 12:54:16 AM UTC+9, Markus wrote:
>
> True, it surprisingly seems that Spearman hasn't been implemented in GSL 
> yet. 
>
> On Mon, Nov 12, 2012 at 10:39 AM, Ashish Agarwal <agarw... at gmail.com<javascript:>> 
> wrote: 
> > I found Pearson correlation in GSL [1] but don't see Spearman. 
> > 
> > [1] http://www.gnu.org/software/gsl/manual/html_node/Correlation.html 
> > 
> > 
> > 
> > On Mon, Nov 12, 2012 at 10:20 AM, Markus Mottl <markus... at gmail.com<javascript:>> 
>
> > wrote: 
> >> 
> >> On Mon, Nov 12, 2012 at 10:08 AM, Ashish Agarwal <agarw... at gmail.com<javascript:>> 
>
> >> wrote: 
> >> > We have these in Biocaml.Math, which is not a great place for them. 
> It 
> >> > would 
> >> > be nice for OCaml to have some math/statistics libraries. OCaml-R has 
> a 
> >> > binding to R's math library, but there isn't a stable release. 
> >> 
> >> There are two libraries that should mostly address your needs for math 
> >> and statistics: lacaml and gsl-ocaml: 
> >> 
> >>   https://bitbucket.org/mmottl/lacaml 
> >>   https://bitbucket.org/mmottl/gsl-ocaml 
> >> 
> >> The first one interfaces most of BLAS/LAPACK, which are the de-facto 
> >> standard for heavy-duty linear algebra (vector and matrix operations, 
> >> factorizations, eigenproblems, solving equations and least-squares 
> >> problems, etc.). 
> >> 
> >> gsl-ocaml interfaces most of the GNU Scientific Library, which is 
> >> probably the most widely used open source library for that purpose. 
> >> 
> >> Regards, 
> >> Markus 
> >> 
> >> -- 
> >> Markus Mottl        http://www.ocaml.info        markus... at gmail.com<javascript:> 
> > 
> > 
>
>
>
> -- 
> Markus Mottl        http://www.ocaml.info        markus... at gmail.com<javascript:> 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121112/56ae4dbf/attachment-0001.html>

From francois.berenger.working at gmail.com  Tue Nov 13 01:02:50 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Mon, 12 Nov 2012 17:02:50 -0800 (PST)
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <1ac23dbf-9e49-4cf6-8f59-7788364941a3@googlegroups.com>
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
 <87a9usk4fj.fsf@li195-236.members.linode.com>
 <CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>
 <CAPYVAiLMJAYKOgBtLDOj+NTihSjAXEX0=a4QUDTuS25B=z6z4g@mail.gmail.com>
 <CAMQaOgP0gZ-ADHyqJn7ZJH2tkdPXqg+jPs=N-aAvhvn_QT0X7Q@mail.gmail.com>
 <CAMQaOgM77i-Ly3sB3r=dU8q3vLKyZSc_MJVgA7BTzwibzLUm_w@mail.gmail.com>
 <1ac23dbf-9e49-4cf6-8f59-7788364941a3@googlegroups.com>
Message-ID: <839ad1cc-6e6e-465c-a824-3e891e0d413f@googlegroups.com>

Thanks for the command.

In fact, it would be quite useful to have example programs for core too. 
I think I saw just one, while async has many.

On Tuesday, November 13, 2012 5:20:43 AM UTC+9, Dominick LoBraico wrote:
>
> Francois,
>
> If you have ocamlfind install, this should work (for example):
>
> $ ocamlfind ocamlc -thread -package async -linkpkg hello.ml -o hello.exe
>
>
> On Thursday, November 8, 2012 7:01:50 PM UTC-6, Francois Berenger wrote:
>>
>> By the way, how do I compile them? 
>> It was my initial question. ;) 
>>
>> On Fri, Nov 9, 2012 at 10:00 AM, Francois Berenger 
>> <francois.ber... at gmail.com> wrote: 
>> > $ cd ~/.opam/system/build/async.108.07.01/examples 
>> > $ grep -ri jane.std * 
>> > bin_prot_test.ml:open Jane.Std 
>> > cat.ml:open Jane.Std 
>> > countdown.ml:open Jane.Std 
>> > finalizer.ml:open Jane.Std 
>> > monitors.ml:open Jane.Std 
>> > process.ml:open Jane.Std 
>> > process_stream.ml:open Jane.Std 
>> > server.ml:open Jane.Std 
>> > signals.ml:open Jane.Std 
>> > sigpipe.ml:open Jane.Std 
>> > socket.ml:open Jane.Std 
>> > sound.ml:open Jane.Std 
>> > write_forever.ml:open Jane.Std 
>> > 
>> > On Fri, Nov 9, 2012 at 2:02 AM, Stephen Weeks <swe... at janestreet.com> 
>> wrote: 
>> >>> Jane.Std is some internal stuff that is not exported.  We should fix 
>> >>> that example not to use it.  Which specific example is it? 
>> >> 
>> >> Many of the examples in base/async/examples unnecessarily refer to 
>> >> Jane.Std.  I pushed a fix internally to change them all to Core.Std. 
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121112/399a7e49/attachment-0001.html>

From francois.berenger.working at gmail.com  Tue Nov 13 01:53:54 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Mon, 12 Nov 2012 17:53:54 -0800 (PST)
Subject: No statistics or math module in core?
In-Reply-To: <47f9b2d0-293a-4c70-9e10-580f88016566@googlegroups.com>
References: <f8c113b2-b74a-45ab-aedb-e2a9f94e110e@googlegroups.com>
 <CAMu2m2KB+BpmM3T8UYxbX9pf8gUhnz6pBKzB9chVwMAT6qACUw@mail.gmail.com>
 <CAP_800oNNQcS48fKA68aCrfdZN6hG1O7ZzdWy-OqAt47iQMckw@mail.gmail.com>
 <CAMu2m2+b2CpNPxeoT+Uj4XaNdYBFTQsNW+6zUdqboaxjRw+kFQ@mail.gmail.com>
 <CAP_800pBfkYRfXjfxeazfdjeK1QE4OSAx+Y=YzXYTv7ij_wMcg@mail.gmail.com>
 <47f9b2d0-293a-4c70-9e10-580f88016566@googlegroups.com>
Message-ID: <5e25e5b0-37fb-4214-b9d9-e15bdbc0b347@googlegroups.com>

I had to code for my needs:

pearson, spearman (copy-paste from Biocaml this one), mean, median, std_dev
+ some significance test for the Pearson score.

While doing this, I just felt I was wasting my time
(especially once I noticed there is a stat module in Haskell with all of 
this,
crafted by people much more versed than me in numerical algorithms, I 
guess).

And, the cherry at the top of the cake, having to declare pi ...

On Tuesday, November 13, 2012 10:00:14 AM UTC+9, Francois Berenger wrote:
>
> Yes, I noticed this also very recently.
>
> On Tuesday, November 13, 2012 12:54:16 AM UTC+9, Markus wrote:
>>
>> True, it surprisingly seems that Spearman hasn't been implemented in GSL 
>> yet. 
>>
>> On Mon, Nov 12, 2012 at 10:39 AM, Ashish Agarwal <agarw... at gmail.com> 
>> wrote: 
>> > I found Pearson correlation in GSL [1] but don't see Spearman. 
>> > 
>> > [1] http://www.gnu.org/software/gsl/manual/html_node/Correlation.html 
>> > 
>> > 
>> > 
>> > On Mon, Nov 12, 2012 at 10:20 AM, Markus Mottl <markus... at gmail.com> 
>> > wrote: 
>> >> 
>> >> On Mon, Nov 12, 2012 at 10:08 AM, Ashish Agarwal <agarw... at gmail.com> 
>> >> wrote: 
>> >> > We have these in Biocaml.Math, which is not a great place for them. 
>> It 
>> >> > would 
>> >> > be nice for OCaml to have some math/statistics libraries. OCaml-R 
>> has a 
>> >> > binding to R's math library, but there isn't a stable release. 
>> >> 
>> >> There are two libraries that should mostly address your needs for math 
>> >> and statistics: lacaml and gsl-ocaml: 
>> >> 
>> >>   https://bitbucket.org/mmottl/lacaml 
>> >>   https://bitbucket.org/mmottl/gsl-ocaml 
>> >> 
>> >> The first one interfaces most of BLAS/LAPACK, which are the de-facto 
>> >> standard for heavy-duty linear algebra (vector and matrix operations, 
>> >> factorizations, eigenproblems, solving equations and least-squares 
>> >> problems, etc.). 
>> >> 
>> >> gsl-ocaml interfaces most of the GNU Scientific Library, which is 
>> >> probably the most widely used open source library for that purpose. 
>> >> 
>> >> Regards, 
>> >> Markus 
>> >> 
>> >> -- 
>> >> Markus Mottl        http://www.ocaml.info        markus... at gmail.com 
>> > 
>> > 
>>
>>
>>
>> -- 
>> Markus Mottl        http://www.ocaml.info        markus... at gmail.com 
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121112/94b22056/attachment-0001.html>

From dhouse at janestreet.com  Mon Nov 12 18:03:52 2012
From: dhouse at janestreet.com (David House)
Date: Mon, 12 Nov 2012 18:03:52 +0000
Subject: How to create the IntSet type with core?
In-Reply-To: <CAK=fH+igEs7PpDAuw6XBoVxzMTEDnY0iFeZo+MM3QK-2LZ_=bA@mail.gmail.com>
References: <6c9ce151-b434-4fcc-89c6-83b64fddbfb9@googlegroups.com>
	<CAK=fH+igEs7PpDAuw6XBoVxzMTEDnY0iFeZo+MM3QK-2LZ_=bA@mail.gmail.com>
Message-ID: <CAK=fH+jxoN9cYcEySYkNJaOZv+D6vO61Qdy3ozgUR6MKRude=A@mail.gmail.com>


I wrote these notes up into a blog post here:

https://ocaml.janestreet.com/?q=node/112

On Fri, Nov 9, 2012 at 9:10 AM, David House <dhouse at janestreet.com> wrote:
> There is already an Int.Set module! :)
>
> Here is a five-minute guide to the set / map / hashtable setup inside
> core. I'll use the example of hashtables, but the language readily
> translates into sets / maps.
>
> There are two types of hashtables in core. Ones that use polymorphic
> comparison, and ones that use a specific comparision function that is
> hopefully more efficient and has non-surprising semantics (we
> basically think polymorphic comparison, despite its convenience, is
> too surprising to be an overall good thing).
>
> The type of hashtables using polymorphic comparison is ('key, 'value)
> Hashtbl.Poly.t. The type of hashtables using, e.g., int comparison for
> the keys is 'value Int.Table.t. Given the previous paragraph, you
> should always try to use Foo.Table when you can.
>
> When you create a hashtable (e.g. using [create], [of_alist], or
> [t_of_sexp]), you must use the specific module name. I.e. [let table =
> Int.Table.create () in]. However, when you already have a hashtable in
> your hands, and you want to use accessor functions, you should just
> use Hashtbl.foo, regardless of what comparison function it uses.
>
> To translate into Maps and Sets:
>
> 'value Foo.Table.t  ('key,'value) Hashtbl.Poly.t  Hashtbl.foo
> 'value Foo.Map.t    ('key,'value) Map.Poly.t      Map.foo
> Foo.Set.t           'element Set.Poly.t           Set.foo
>
> --
>
> If you have your own type and want to make Table, Map and Set
> submodules, it's really easy:
>
> module T = struct
>   type t = ... with compare, sexp
>   let hash = (* your hash function, maybe Hashtbl.hash *)
> end
> include Comparable.Make(T)
> include Hashable.Make(T)
>
> Saying "with compare" generates you an efficient comparison function
> specialised to your type. (Note that all component types need to have
> comparison functions defined too, whether through "with compare" or
> through primitives.) The Comparable.Make functor adds in modules to
> make you satisfy the Comparable.S signature (basically the Set and Map
> modules, and a few more). The Hashable.Make functor adds in modules to
> make you satisfy Hashable.S (basically Hashtbl, as well as some others
> like Hash_set). If you don't want the Hashable stuff, there is no need
> to define a hash function. (Although Hashtbl.hash is normally not a
> bad choice.)
>
> --
>
> Here's how this all works under the hood:
>
> The type of maps is "really" ('key, 'value, 'comparator) Map.t. Maps
> contain in their values the function that is used for comparing keys,
> i.e. a function of type 'key -> 'key -> int. But what is this
> "comparator" thing?
>
> We can first motivate things by saying: it's a pain to have to type
> Int.Map.find for int-maps, String.Map.find for string-maps, etc. etc.
> It'd be nice to have a single type and use Map.find for everything.
> But this presents a problem because of functions like Map.merge, which
> takes two maps and combines them. You need to know that the comparison
> functions are identical, but how can you do this?
>
> So we have this extra comparator phantom type. Nothing in the actual
> representation has a type involving 'comparator: it's just for static
> checking. If you want to have a new comparison function, you must mint
> a new comparator type. (Including the Comparable signature does this
> for you.)
>
> I originally wrote this last section with hashtables in mind, but it
> appears that hashtables work slightly differently: they just assert
> that the hashing functions are physically equal inside [merge]; you
> don't get a compile-time error for something like [Hashtbl.merge
> (Int.Table.create ()) (String.Table.create ())].
>
> On Fri, Nov 9, 2012 at 8:14 AM, Francois Berenger
> <francois.berenger.working at gmail.com> wrote:
>> Hello,
>>
>> I'm converting some standard code to use core.
>>
>> How do I do this in core:
>>
>> module IntSet =
>>   Set.Make
>>     (struct
>>       let compare = Pervasives.compare
>>       type t = int
>>     end)
>>
>> Thanks a lot,
>> F.
>>
>> PS: yes, I opened Core.Std and did not die from it. ;)
>>


From francois.berenger.working at gmail.com  Tue Nov 13 02:39:59 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Mon, 12 Nov 2012 18:39:59 -0800 (PST)
Subject: No statistics or math module in core?
In-Reply-To: <47f9b2d0-293a-4c70-9e10-580f88016566@googlegroups.com>
References: <f8c113b2-b74a-45ab-aedb-e2a9f94e110e@googlegroups.com>
 <CAMu2m2KB+BpmM3T8UYxbX9pf8gUhnz6pBKzB9chVwMAT6qACUw@mail.gmail.com>
 <CAP_800oNNQcS48fKA68aCrfdZN6hG1O7ZzdWy-OqAt47iQMckw@mail.gmail.com>
 <CAMu2m2+b2CpNPxeoT+Uj4XaNdYBFTQsNW+6zUdqboaxjRw+kFQ@mail.gmail.com>
 <CAP_800pBfkYRfXjfxeazfdjeK1QE4OSAx+Y=YzXYTv7ij_wMcg@mail.gmail.com>
 <47f9b2d0-293a-4c70-9e10-580f88016566@googlegroups.com>
Message-ID: <6072be7e-ebcb-4415-9b9b-c17048bff485@googlegroups.com>

On Tuesday, November 13, 2012 10:00:14 AM UTC+9, Francois Berenger wrote:
>
> Yes, I noticed this also very recently.
>

Let's do something about it:

https://savannah.gnu.org/bugs/index.php?37728 

>
> On Tuesday, November 13, 2012 12:54:16 AM UTC+9, Markus wrote:
>>
>> True, it surprisingly seems that Spearman hasn't been implemented in GSL 
>> yet. 
>>
>> On Mon, Nov 12, 2012 at 10:39 AM, Ashish Agarwal <agarw... at gmail.com> 
>> wrote: 
>> > I found Pearson correlation in GSL [1] but don't see Spearman. 
>> > 
>> > [1] http://www.gnu.org/software/gsl/manual/html_node/Correlation.html 
>> > 
>> > 
>> > 
>> > On Mon, Nov 12, 2012 at 10:20 AM, Markus Mottl <markus... at gmail.com> 
>> > wrote: 
>> >> 
>> >> On Mon, Nov 12, 2012 at 10:08 AM, Ashish Agarwal <agarw... at gmail.com> 
>> >> wrote: 
>> >> > We have these in Biocaml.Math, which is not a great place for them. 
>> It 
>> >> > would 
>> >> > be nice for OCaml to have some math/statistics libraries. OCaml-R 
>> has a 
>> >> > binding to R's math library, but there isn't a stable release. 
>> >> 
>> >> There are two libraries that should mostly address your needs for math 
>> >> and statistics: lacaml and gsl-ocaml: 
>> >> 
>> >>   https://bitbucket.org/mmottl/lacaml 
>> >>   https://bitbucket.org/mmottl/gsl-ocaml 
>> >> 
>> >> The first one interfaces most of BLAS/LAPACK, which are the de-facto 
>> >> standard for heavy-duty linear algebra (vector and matrix operations, 
>> >> factorizations, eigenproblems, solving equations and least-squares 
>> >> problems, etc.). 
>> >> 
>> >> gsl-ocaml interfaces most of the GNU Scientific Library, which is 
>> >> probably the most widely used open source library for that purpose. 
>> >> 
>> >> Regards, 
>> >> Markus 
>> >> 
>> >> -- 
>> >> Markus Mottl        http://www.ocaml.info        markus... at gmail.com 
>> > 
>> > 
>>
>>
>>
>> -- 
>> Markus Mottl        http://www.ocaml.info        markus... at gmail.com 
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121112/5bd64954/attachment-0001.html>

From dj at lobraico.com  Tue Nov 13 03:29:23 2012
From: dj at lobraico.com (Dominick LoBraico)
Date: Mon, 12 Nov 2012 19:29:23 -0800 (PST)
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <839ad1cc-6e6e-465c-a824-3e891e0d413f@googlegroups.com>
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
 <87a9usk4fj.fsf@li195-236.members.linode.com>
 <CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>
 <CAPYVAiLMJAYKOgBtLDOj+NTihSjAXEX0=a4QUDTuS25B=z6z4g@mail.gmail.com>
 <CAMQaOgP0gZ-ADHyqJn7ZJH2tkdPXqg+jPs=N-aAvhvn_QT0X7Q@mail.gmail.com>
 <CAMQaOgM77i-Ly3sB3r=dU8q3vLKyZSc_MJVgA7BTzwibzLUm_w@mail.gmail.com>
 <1ac23dbf-9e49-4cf6-8f59-7788364941a3@googlegroups.com>
 <839ad1cc-6e6e-465c-a824-3e891e0d413f@googlegroups.com>
Message-ID: <a0995a8f-8cdb-411e-aad2-214536136615@googlegroups.com>

The fact that has probably blocked that is the general vastness of Core. 
There is an example file for the Command module included with Core I 
believe (command-line parsing module). If there are specific areas that you 
would like to see some clarity on I could write up some simple examples for 
you/the community.

On Monday, November 12, 2012 7:02:51 PM UTC-6, Francois Berenger wrote:
>
> Thanks for the command.
>
> In fact, it would be quite useful to have example programs for core too. 
> I think I saw just one, while async has many.
>
> On Tuesday, November 13, 2012 5:20:43 AM UTC+9, Dominick LoBraico wrote:
>>
>> Francois,
>>
>> If you have ocamlfind install, this should work (for example):
>>
>> $ ocamlfind ocamlc -thread -package async -linkpkg hello.ml -o hello.exe
>>
>>
>> On Thursday, November 8, 2012 7:01:50 PM UTC-6, Francois Berenger wrote:
>>>
>>> By the way, how do I compile them? 
>>> It was my initial question. ;) 
>>>
>>> On Fri, Nov 9, 2012 at 10:00 AM, Francois Berenger 
>>> <francois.ber... at gmail.com> wrote: 
>>> > $ cd ~/.opam/system/build/async.108.07.01/examples 
>>> > $ grep -ri jane.std * 
>>> > bin_prot_test.ml:open Jane.Std 
>>> > cat.ml:open Jane.Std 
>>> > countdown.ml:open Jane.Std 
>>> > finalizer.ml:open Jane.Std 
>>> > monitors.ml:open Jane.Std 
>>> > process.ml:open Jane.Std 
>>> > process_stream.ml:open Jane.Std 
>>> > server.ml:open Jane.Std 
>>> > signals.ml:open Jane.Std 
>>> > sigpipe.ml:open Jane.Std 
>>> > socket.ml:open Jane.Std 
>>> > sound.ml:open Jane.Std 
>>> > write_forever.ml:open Jane.Std 
>>> > 
>>> > On Fri, Nov 9, 2012 at 2:02 AM, Stephen Weeks <swe... at janestreet.com> 
>>> wrote: 
>>> >>> Jane.Std is some internal stuff that is not exported.  We should fix 
>>> >>> that example not to use it.  Which specific example is it? 
>>> >> 
>>> >> Many of the examples in base/async/examples unnecessarily refer to 
>>> >> Jane.Std.  I pushed a fix internally to change them all to Core.Std. 
>>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121112/dcedb200/attachment-0001.html>

From dj at lobraico.com  Tue Nov 13 03:43:49 2012
From: dj at lobraico.com (Dominick LoBraico)
Date: Mon, 12 Nov 2012 19:43:49 -0800 (PST)
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <a0995a8f-8cdb-411e-aad2-214536136615@googlegroups.com>
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
 <87a9usk4fj.fsf@li195-236.members.linode.com>
 <CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>
 <CAPYVAiLMJAYKOgBtLDOj+NTihSjAXEX0=a4QUDTuS25B=z6z4g@mail.gmail.com>
 <CAMQaOgP0gZ-ADHyqJn7ZJH2tkdPXqg+jPs=N-aAvhvn_QT0X7Q@mail.gmail.com>
 <CAMQaOgM77i-Ly3sB3r=dU8q3vLKyZSc_MJVgA7BTzwibzLUm_w@mail.gmail.com>
 <1ac23dbf-9e49-4cf6-8f59-7788364941a3@googlegroups.com>
 <839ad1cc-6e6e-465c-a824-3e891e0d413f@googlegroups.com>
 <a0995a8f-8cdb-411e-aad2-214536136615@googlegroups.com>
Message-ID: <17ba978c-e2af-4b7e-8a97-3eb6c3d1b125@googlegroups.com>

As a follow-up, if you poke around in the various support libraries you'll 
find readme files which contain some small usage examples that may be of 
interest to you 
(e.g. ~/.opam/4.00.1+short-types/build/sexplib.108.07.01/README.md).

On Monday, November 12, 2012 9:29:23 PM UTC-6, Dominick LoBraico wrote:
>
> The fact that has probably blocked that is the general vastness of Core. 
> There is an example file for the Command module included with Core I 
> believe (command-line parsing module). If there are specific areas that you 
> would like to see some clarity on I could write up some simple examples for 
> you/the community.
>
> On Monday, November 12, 2012 7:02:51 PM UTC-6, Francois Berenger wrote:
>>
>> Thanks for the command.
>>
>> In fact, it would be quite useful to have example programs for core too. 
>> I think I saw just one, while async has many.
>>
>> On Tuesday, November 13, 2012 5:20:43 AM UTC+9, Dominick LoBraico wrote:
>>>
>>> Francois,
>>>
>>> If you have ocamlfind install, this should work (for example):
>>>
>>> $ ocamlfind ocamlc -thread -package async -linkpkg hello.ml -o hello.exe
>>>
>>>
>>> On Thursday, November 8, 2012 7:01:50 PM UTC-6, Francois Berenger wrote:
>>>>
>>>> By the way, how do I compile them? 
>>>> It was my initial question. ;) 
>>>>
>>>> On Fri, Nov 9, 2012 at 10:00 AM, Francois Berenger 
>>>> <francois.ber... at gmail.com> wrote: 
>>>> > $ cd ~/.opam/system/build/async.108.07.01/examples 
>>>> > $ grep -ri jane.std * 
>>>> > bin_prot_test.ml:open Jane.Std 
>>>> > cat.ml:open Jane.Std 
>>>> > countdown.ml:open Jane.Std 
>>>> > finalizer.ml:open Jane.Std 
>>>> > monitors.ml:open Jane.Std 
>>>> > process.ml:open Jane.Std 
>>>> > process_stream.ml:open Jane.Std 
>>>> > server.ml:open Jane.Std 
>>>> > signals.ml:open Jane.Std 
>>>> > sigpipe.ml:open Jane.Std 
>>>> > socket.ml:open Jane.Std 
>>>> > sound.ml:open Jane.Std 
>>>> > write_forever.ml:open Jane.Std 
>>>> > 
>>>> > On Fri, Nov 9, 2012 at 2:02 AM, Stephen Weeks <swe... at janestreet.com> 
>>>> wrote: 
>>>> >>> Jane.Std is some internal stuff that is not exported.  We should 
>>>> fix 
>>>> >>> that example not to use it.  Which specific example is it? 
>>>> >> 
>>>> >> Many of the examples in base/async/examples unnecessarily refer to 
>>>> >> Jane.Std.  I pushed a fix internally to change them all to Core.Std. 
>>>>
>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121112/f0321459/attachment-0001.html>

From mmatalka at gmail.com  Tue Nov 13 04:59:47 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Mon, 12 Nov 2012 23:59:47 -0500
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <a0995a8f-8cdb-411e-aad2-214536136615@googlegroups.com> (Dominick
	LoBraico's message of "Mon, 12 Nov 2012 19:29:23 -0800 (PST)")
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
	<87a9usk4fj.fsf@li195-236.members.linode.com>
	<CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>
	<CAPYVAiLMJAYKOgBtLDOj+NTihSjAXEX0=a4QUDTuS25B=z6z4g@mail.gmail.com>
	<CAMQaOgP0gZ-ADHyqJn7ZJH2tkdPXqg+jPs=N-aAvhvn_QT0X7Q@mail.gmail.com>
	<CAMQaOgM77i-Ly3sB3r=dU8q3vLKyZSc_MJVgA7BTzwibzLUm_w@mail.gmail.com>
	<1ac23dbf-9e49-4cf6-8f59-7788364941a3@googlegroups.com>
	<839ad1cc-6e6e-465c-a824-3e891e0d413f@googlegroups.com>
	<a0995a8f-8cdb-411e-aad2-214536136615@googlegroups.com>
Message-ID: <87haouumgs.fsf@li195-236.members.linode.com>


I don't know if it's still available, but the ocaml-tutorial repo from
CUFP has been handy for some things, especially sexp and binio.

What is the easiest way to contribute docs to core?  The bitbucket wiki?

/M

Dominick LoBraico <dj at lobraico.com> writes:

> The fact that has probably blocked that is the general vastness of Core. 
> There is an example file for the Command module included with Core I 
> believe (command-line parsing module). If there are specific areas that you 
> would like to see some clarity on I could write up some simple examples for 
> you/the community.
>
> On Monday, November 12, 2012 7:02:51 PM UTC-6, Francois Berenger wrote:
>>
>> Thanks for the command.
>>
>> In fact, it would be quite useful to have example programs for core too. 
>> I think I saw just one, while async has many.
>>
>> On Tuesday, November 13, 2012 5:20:43 AM UTC+9, Dominick LoBraico wrote:
>>>
>>> Francois,
>>>
>>> If you have ocamlfind install, this should work (for example):
>>>
>>> $ ocamlfind ocamlc -thread -package async -linkpkg hello.ml -o hello.exe
>>>
>>>
>>> On Thursday, November 8, 2012 7:01:50 PM UTC-6, Francois Berenger wrote:
>>>>
>>>> By the way, how do I compile them? 
>>>> It was my initial question. ;) 
>>>>
>>>> On Fri, Nov 9, 2012 at 10:00 AM, Francois Berenger 
>>>> <francois.ber... at gmail.com> wrote: 
>>>> > $ cd ~/.opam/system/build/async.108.07.01/examples 
>>>> > $ grep -ri jane.std * 
>>>> > bin_prot_test.ml:open Jane.Std 
>>>> > cat.ml:open Jane.Std 
>>>> > countdown.ml:open Jane.Std 
>>>> > finalizer.ml:open Jane.Std 
>>>> > monitors.ml:open Jane.Std 
>>>> > process.ml:open Jane.Std 
>>>> > process_stream.ml:open Jane.Std 
>>>> > server.ml:open Jane.Std 
>>>> > signals.ml:open Jane.Std 
>>>> > sigpipe.ml:open Jane.Std 
>>>> > socket.ml:open Jane.Std 
>>>> > sound.ml:open Jane.Std 
>>>> > write_forever.ml:open Jane.Std 
>>>> > 
>>>> > On Fri, Nov 9, 2012 at 2:02 AM, Stephen Weeks <swe... at janestreet.com> 
>>>> wrote: 
>>>> >>> Jane.Std is some internal stuff that is not exported.  We should fix 
>>>> >>> that example not to use it.  Which specific example is it? 
>>>> >> 
>>>> >> Many of the examples in base/async/examples unnecessarily refer to 
>>>> >> Jane.Std.  I pushed a fix internally to change them all to Core.Std. 
>>>>
>>>


From francois.berenger.working at gmail.com  Tue Nov 13 08:02:43 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Tue, 13 Nov 2012 00:02:43 -0800 (PST)
Subject: any logger in core?
In-Reply-To: <CAK=fH+gakKwvurMB5RHZpMdHA8vVh3c+gGR_-kiHrAtLhmugtQ@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
 <CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
 <117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
 <CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
 <20120714161518.GJ14582@dark.recoil.org>
 <9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
 <CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
 <004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
 <5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
 <CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
 <CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
 <CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
 <7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
 <CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
 <CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
 <CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
 <CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
 <d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>
 <CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>
 <CAK=fH+gh3MGxObP-KUPVWfDCZJk8GZhTF+S6c_ktXCuK4_wbHg@mail.gmail.com>
 <04cc5df5-105f-4f90-8769-f499596d58ed@googlegroups.com>
 <CAK=fH+gakKwvurMB5RHZpMdHA8vVh3c+gGR_-kiHrAtLhmugtQ@mail.gmail.com>
Message-ID: <a218f444-19c3-4322-b6b7-1fddc40983cc@googlegroups.com>

The choice in log levels is a little scarce.

Currently:
raw (I don't know it's level, I guess it's always printed but I may be 
wrong)
then, ordered by my intuitive notion of log priority:
debug < info < error

I'm used to:
debug < info < warn < error < fatal

So, I miss the warning and fatal log levels.
But, that's just based on my experience.

Regards,
F.

On Thursday, November 8, 2012 7:13:25 PM UTC+9, David House wrote:
>
> On Thu, Nov 8, 2012 at 3:48 AM, Francois 
> <francois.b... at gmail.com <javascript:>> wrote: 
> > I don't know where to find never_returns. 
>
> It's there if you open Core.Std. 
>
> > But the following did work (and never stop): 
>
> You need to explicitly shut down async using the shutdown function in 
> Async.Std. 
>
> > I'm affraid of open directives, I try to keep my code _very_ explicit 
> > about what it is doing and which function from which module is used 
> > (maybe because of past overexposure to some C++ code). 
>
> I think that's exactly the right approach -- I often find myself 
> making similar comments when doing code review at work. Things are 
> much easier to follow if opens are reduced, or made more local, and 
> more explicit. 
>
> That being said, I do allow myself the luxury of opening Core.Std and 
> Async.Std in most of my modules that use core / async. I find this to 
> strike a good balance between concision and explicitness. 
>
> One of the reasons is that there are very few *values* brought into 
> scope by opening Core.Std and Async.Std. This conversation has contain 
> disproportionally many: never_returns, shutdown, etc. -- an unlucky 
> coincidence! But nearly everything is squirreled away inside a module, 
> which helps a lot. (In other words, our "Pervasives" is much smaller 
> than the ocaml standard library's.) 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121113/76723680/attachment-0001.html>

From ocaml-core at googlegroups.com  Tue Nov 13 03:24:03 2012
From: ocaml-core at googlegroups.com (ocaml-core at googlegroups.com)
Date: Tue, 13 Nov 2012 03:24:03 +0000
Subject: Moderator's spam report for ocaml-core@googlegroups.com
Message-ID: <90e6ba3fcd97205cd904ce57f3c9@google.com>


This message is being sent to you because you are a moderator of the group ocaml-core.

The following suspicious messages were sent to your group, but are being held in your moderation queue because they are classified as likely spam messages.

If you take no action, all the messages below will be discarded automatically as spam.

However, if you see any messages that are not spam below, you may approve them individually by going to:

http://groups.google.com/group/ocaml-core/pendmsg

Please do not mark this notification as spam; this is a service for group moderators. If you do not wish to receive these notifications in the future, you may change your preferences by going to:

http://groups.google.com/group/ocaml-core/manage_post


------- 1 of 1  -------
Subject: Re:Re: sending servers /.../
>From: "James Pike" <ktwphihrilkjin at imbusa.com>
Date: Nov 09 08:06AM -0800

Bulk Email Sending Servers

click here to know more

Highly Stable and Secure Bulk Email Servers

for Email Marketing

As you may already know, many ISPs have strict

Terms of Service (TOS) or Acceptable

Use Policies (AUP) against large

Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=2813174340901979896


For more information about this message, please visit:
https://support.google.com/groups/bin/answer.py?hl=en&answer=47792



From mmatalka at gmail.com  Tue Nov 13 09:27:40 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Tue, 13 Nov 2012 04:27:40 -0500
Subject: any logger in core?
In-Reply-To: <CAK=fH+jP+c8v-57To47MktUNPwB14L1kqqGXy3=p2N93ywL2RA@mail.gmail.com>
	(David House's message of "Tue, 13 Nov 2012 08:41:56 +0000")
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
	<CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
	<7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
	<CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
	<CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
	<CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
	<CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
	<d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>
	<CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>
	<CAK=fH+gh3MGxObP-KUPVWfDCZJk8GZhTF+S6c_ktXCuK4_wbHg@mail.gmail.com>
	<04cc5df5-105f-4f90-8769-f499596d58ed@googlegroups.com>
	<CAK=fH+gakKwvurMB5RHZpMdHA8vVh3c+gGR_-kiHrAtLhmugtQ@mail.gmail.com>
	<a218f444-19c3-4322-b6b7-1fddc40983cc@googlegroups.com>
	<CAK=fH+jP+c8v-57To47MktUNPwB14L1kqqGXy3=p2N93ywL2RA@mail.gmail.com>
Message-ID: <87ip99ua2b.fsf@li195-236.members.linode.com>


I agree with David.  The current logger I am using at work as 5 or 6 log
levels and I have found little value in it.  I think 'fatal' is
especially devilish since, in such a situation, your monitoring tools
should be the ones determining that.

/M

David House <dhouse at janestreet.com> writes:

> Hmm, I am surprised you want so many!
>
> I claim there is a cost in allowing tons and tons of different log
> levels. Firstly, it complicates the interface. Secondly, it leads to
> different applications choosing different logging levels for
> essentially the same errors. E.g. how do you choose whether some
> particular failure is an error, or a fatal? Isn't it likely that
> someone else will make a different choice? There are lines that you
> can draw, but it's a big grey area. Having fewer choices means that
> everyone's programs are more consistent with respect to each other.
>
> Putting it another way: three logging levels should be enough for anyone! :)
>
> On Tue, Nov 13, 2012 at 8:02 AM, Francois Berenger
> <francois.berenger.working at gmail.com> wrote:
>> The choice in log levels is a little scarce.
>>
>> Currently:
>> raw (I don't know it's level, I guess it's always printed but I may be
>> wrong)
>> then, ordered by my intuitive notion of log priority:
>> debug < info < error
>>
>> I'm used to:
>> debug < info < warn < error < fatal
>>
>> So, I miss the warning and fatal log levels.
>> But, that's just based on my experience.
>>
>> Regards,
>> F.
>>
>>
>> On Thursday, November 8, 2012 7:13:25 PM UTC+9, David House wrote:
>>>
>>> On Thu, Nov 8, 2012 at 3:48 AM, Francois
>>> <francois.b... at gmail.com> wrote:
>>> > I don't know where to find never_returns.
>>>
>>> It's there if you open Core.Std.
>>>
>>> > But the following did work (and never stop):
>>>
>>> You need to explicitly shut down async using the shutdown function in
>>> Async.Std.
>>>
>>> > I'm affraid of open directives, I try to keep my code _very_ explicit
>>> > about what it is doing and which function from which module is used
>>> > (maybe because of past overexposure to some C++ code).
>>>
>>> I think that's exactly the right approach -- I often find myself
>>> making similar comments when doing code review at work. Things are
>>> much easier to follow if opens are reduced, or made more local, and
>>> more explicit.
>>>
>>> That being said, I do allow myself the luxury of opening Core.Std and
>>> Async.Std in most of my modules that use core / async. I find this to
>>> strike a good balance between concision and explicitness.
>>>
>>> One of the reasons is that there are very few *values* brought into
>>> scope by opening Core.Std and Async.Std. This conversation has contain
>>> disproportionally many: never_returns, shutdown, etc. -- an unlucky
>>> coincidence! But nearly everything is squirreled away inside a module,
>>> which helps a lot. (In other words, our "Pervasives" is much smaller
>>> than the ocaml standard library's.)


From dhouse at janestreet.com  Tue Nov 13 08:41:56 2012
From: dhouse at janestreet.com (David House)
Date: Tue, 13 Nov 2012 08:41:56 +0000
Subject: any logger in core?
In-Reply-To: <a218f444-19c3-4322-b6b7-1fddc40983cc@googlegroups.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
	<117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
	<CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
	<CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
	<7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
	<CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
	<CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
	<CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
	<CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
	<d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>
	<CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>
	<CAK=fH+gh3MGxObP-KUPVWfDCZJk8GZhTF+S6c_ktXCuK4_wbHg@mail.gmail.com>
	<04cc5df5-105f-4f90-8769-f499596d58ed@googlegroups.com>
	<CAK=fH+gakKwvurMB5RHZpMdHA8vVh3c+gGR_-kiHrAtLhmugtQ@mail.gmail.com>
	<a218f444-19c3-4322-b6b7-1fddc40983cc@googlegroups.com>
Message-ID: <CAK=fH+jP+c8v-57To47MktUNPwB14L1kqqGXy3=p2N93ywL2RA@mail.gmail.com>


Hmm, I am surprised you want so many!

I claim there is a cost in allowing tons and tons of different log
levels. Firstly, it complicates the interface. Secondly, it leads to
different applications choosing different logging levels for
essentially the same errors. E.g. how do you choose whether some
particular failure is an error, or a fatal? Isn't it likely that
someone else will make a different choice? There are lines that you
can draw, but it's a big grey area. Having fewer choices means that
everyone's programs are more consistent with respect to each other.

Putting it another way: three logging levels should be enough for anyone! :)

On Tue, Nov 13, 2012 at 8:02 AM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> The choice in log levels is a little scarce.
>
> Currently:
> raw (I don't know it's level, I guess it's always printed but I may be
> wrong)
> then, ordered by my intuitive notion of log priority:
> debug < info < error
>
> I'm used to:
> debug < info < warn < error < fatal
>
> So, I miss the warning and fatal log levels.
> But, that's just based on my experience.
>
> Regards,
> F.
>
>
> On Thursday, November 8, 2012 7:13:25 PM UTC+9, David House wrote:
>>
>> On Thu, Nov 8, 2012 at 3:48 AM, Francois
>> <francois.b... at gmail.com> wrote:
>> > I don't know where to find never_returns.
>>
>> It's there if you open Core.Std.
>>
>> > But the following did work (and never stop):
>>
>> You need to explicitly shut down async using the shutdown function in
>> Async.Std.
>>
>> > I'm affraid of open directives, I try to keep my code _very_ explicit
>> > about what it is doing and which function from which module is used
>> > (maybe because of past overexposure to some C++ code).
>>
>> I think that's exactly the right approach -- I often find myself
>> making similar comments when doing code review at work. Things are
>> much easier to follow if opens are reduced, or made more local, and
>> more explicit.
>>
>> That being said, I do allow myself the luxury of opening Core.Std and
>> Async.Std in most of my modules that use core / async. I find this to
>> strike a good balance between concision and explicitness.
>>
>> One of the reasons is that there are very few *values* brought into
>> scope by opening Core.Std and Async.Std. This conversation has contain
>> disproportionally many: never_returns, shutdown, etc. -- an unlucky
>> coincidence! But nearly everything is squirreled away inside a module,
>> which helps a lot. (In other words, our "Pervasives" is much smaller
>> than the ocaml standard library's.)


From agarwal1975 at gmail.com  Tue Nov 13 13:52:39 2012
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Tue, 13 Nov 2012 08:52:39 -0500
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <87haouumgs.fsf@li195-236.members.linode.com>
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
 <87a9usk4fj.fsf@li195-236.members.linode.com> <CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>
 <CAPYVAiLMJAYKOgBtLDOj+NTihSjAXEX0=a4QUDTuS25B=z6z4g@mail.gmail.com>
 <CAMQaOgP0gZ-ADHyqJn7ZJH2tkdPXqg+jPs=N-aAvhvn_QT0X7Q@mail.gmail.com>
 <CAMQaOgM77i-Ly3sB3r=dU8q3vLKyZSc_MJVgA7BTzwibzLUm_w@mail.gmail.com>
 <1ac23dbf-9e49-4cf6-8f59-7788364941a3@googlegroups.com> <839ad1cc-6e6e-465c-a824-3e891e0d413f@googlegroups.com>
 <a0995a8f-8cdb-411e-aad2-214536136615@googlegroups.com> <87haouumgs.fsf@li195-236.members.linode.com>
Message-ID: <CAMu2m2JbeNYS6Z=Z5nL7-sfK3kW85N2qtPo6Obp7d0KSYSk06g@mail.gmail.com>

The Core/Async tutorials from 2011 and 2012 are linked below, but they
don't mention where the corresponding repos might be.

http://cufp.org/conference/sessions/2011/t2-janestreets-ocaml-core-library
http://cufp.org/conference/sessions/2012/t1-real-world-ocaml-anil-madhavapeddy-university-c



On Mon, Nov 12, 2012 at 11:59 PM, Malcolm Matalka <mmatalka at gmail.com>wrote:

> I don't know if it's still available, but the ocaml-tutorial repo from
> CUFP has been handy for some things, especially sexp and binio.
>
> What is the easiest way to contribute docs to core?  The bitbucket wiki?
>
> /M
>
> Dominick LoBraico <dj at lobraico.com> writes:
>
> > The fact that has probably blocked that is the general vastness of Core.
> > There is an example file for the Command module included with Core I
> > believe (command-line parsing module). If there are specific areas that
> you
> > would like to see some clarity on I could write up some simple examples
> for
> > you/the community.
> >
> > On Monday, November 12, 2012 7:02:51 PM UTC-6, Francois Berenger wrote:
> >>
> >> Thanks for the command.
> >>
> >> In fact, it would be quite useful to have example programs for core too.
> >> I think I saw just one, while async has many.
> >>
> >> On Tuesday, November 13, 2012 5:20:43 AM UTC+9, Dominick LoBraico wrote:
> >>>
> >>> Francois,
> >>>
> >>> If you have ocamlfind install, this should work (for example):
> >>>
> >>> $ ocamlfind ocamlc -thread -package async -linkpkg hello.ml -o
> hello.exe
> >>>
> >>>
> >>> On Thursday, November 8, 2012 7:01:50 PM UTC-6, Francois Berenger
> wrote:
> >>>>
> >>>> By the way, how do I compile them?
> >>>> It was my initial question. ;)
> >>>>
> >>>> On Fri, Nov 9, 2012 at 10:00 AM, Francois Berenger
> >>>> <francois.ber... at gmail.com> wrote:
> >>>> > $ cd ~/.opam/system/build/async.108.07.01/examples
> >>>> > $ grep -ri jane.std *
> >>>> > bin_prot_test.ml:open Jane.Std
> >>>> > cat.ml:open Jane.Std
> >>>> > countdown.ml:open Jane.Std
> >>>> > finalizer.ml:open Jane.Std
> >>>> > monitors.ml:open Jane.Std
> >>>> > process.ml:open Jane.Std
> >>>> > process_stream.ml:open Jane.Std
> >>>> > server.ml:open Jane.Std
> >>>> > signals.ml:open Jane.Std
> >>>> > sigpipe.ml:open Jane.Std
> >>>> > socket.ml:open Jane.Std
> >>>> > sound.ml:open Jane.Std
> >>>> > write_forever.ml:open Jane.Std
> >>>> >
> >>>> > On Fri, Nov 9, 2012 at 2:02 AM, Stephen Weeks <
> swe... at janestreet.com>
> >>>> wrote:
> >>>> >>> Jane.Std is some internal stuff that is not exported.  We should
> fix
> >>>> >>> that example not to use it.  Which specific example is it?
> >>>> >>
> >>>> >> Many of the examples in base/async/examples unnecessarily refer to
> >>>> >> Jane.Std.  I pushed a fix internally to change them all to
> Core.Std.
> >>>>
> >>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121113/218a442b/attachment-0001.html>

From dhouse at janestreet.com  Tue Nov 13 09:34:03 2012
From: dhouse at janestreet.com (David House)
Date: Tue, 13 Nov 2012 09:34:03 +0000
Subject: any logger in core?
In-Reply-To: <87ip99ua2b.fsf@li195-236.members.linode.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
	<20120714161518.GJ14582@dark.recoil.org>
	<9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
	<CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
	<004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
	<5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
	<CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
	<CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
	<CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
	<7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
	<CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
	<CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
	<CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
	<CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
	<d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>
	<CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>
	<CAK=fH+gh3MGxObP-KUPVWfDCZJk8GZhTF+S6c_ktXCuK4_wbHg@mail.gmail.com>
	<04cc5df5-105f-4f90-8769-f499596d58ed@googlegroups.com>
	<CAK=fH+gakKwvurMB5RHZpMdHA8vVh3c+gGR_-kiHrAtLhmugtQ@mail.gmail.com>
	<a218f444-19c3-4322-b6b7-1fddc40983cc@googlegroups.com>
	<CAK=fH+jP+c8v-57To47MktUNPwB14L1kqqGXy3=p2N93ywL2RA@mail.gmail.com>
	<87ip99ua2b.fsf@li195-236.members.linode.com>
Message-ID: <CAK=fH+hz8cTcSdcw65F9CNmQ5kDs2m8NNM5O6HM98dx0P+pNjw@mail.gmail.com>


Also, there is a function for logging fatal errors. It's called failwith :)

On Tue, Nov 13, 2012 at 9:27 AM, Malcolm Matalka <mmatalka at gmail.com> wrote:
> I agree with David.  The current logger I am using at work as 5 or 6 log
> levels and I have found little value in it.  I think 'fatal' is
> especially devilish since, in such a situation, your monitoring tools
> should be the ones determining that.
>
> /M
>
> David House <dhouse at janestreet.com> writes:
>
>> Hmm, I am surprised you want so many!
>>
>> I claim there is a cost in allowing tons and tons of different log
>> levels. Firstly, it complicates the interface. Secondly, it leads to
>> different applications choosing different logging levels for
>> essentially the same errors. E.g. how do you choose whether some
>> particular failure is an error, or a fatal? Isn't it likely that
>> someone else will make a different choice? There are lines that you
>> can draw, but it's a big grey area. Having fewer choices means that
>> everyone's programs are more consistent with respect to each other.
>>
>> Putting it another way: three logging levels should be enough for anyone! :)
>>
>> On Tue, Nov 13, 2012 at 8:02 AM, Francois Berenger
>> <francois.berenger.working at gmail.com> wrote:
>>> The choice in log levels is a little scarce.
>>>
>>> Currently:
>>> raw (I don't know it's level, I guess it's always printed but I may be
>>> wrong)
>>> then, ordered by my intuitive notion of log priority:
>>> debug < info < error
>>>
>>> I'm used to:
>>> debug < info < warn < error < fatal
>>>
>>> So, I miss the warning and fatal log levels.
>>> But, that's just based on my experience.
>>>
>>> Regards,
>>> F.
>>>
>>>
>>> On Thursday, November 8, 2012 7:13:25 PM UTC+9, David House wrote:
>>>>
>>>> On Thu, Nov 8, 2012 at 3:48 AM, Francois
>>>> <francois.b... at gmail.com> wrote:
>>>> > I don't know where to find never_returns.
>>>>
>>>> It's there if you open Core.Std.
>>>>
>>>> > But the following did work (and never stop):
>>>>
>>>> You need to explicitly shut down async using the shutdown function in
>>>> Async.Std.
>>>>
>>>> > I'm affraid of open directives, I try to keep my code _very_ explicit
>>>> > about what it is doing and which function from which module is used
>>>> > (maybe because of past overexposure to some C++ code).
>>>>
>>>> I think that's exactly the right approach -- I often find myself
>>>> making similar comments when doing code review at work. Things are
>>>> much easier to follow if opens are reduced, or made more local, and
>>>> more explicit.
>>>>
>>>> That being said, I do allow myself the luxury of opening Core.Std and
>>>> Async.Std in most of my modules that use core / async. I find this to
>>>> strike a good balance between concision and explicitness.
>>>>
>>>> One of the reasons is that there are very few *values* brought into
>>>> scope by opening Core.Std and Async.Std. This conversation has contain
>>>> disproportionally many: never_returns, shutdown, etc. -- an unlucky
>>>> coincidence! But nearly everything is squirreled away inside a module,
>>>> which helps a lot. (In other words, our "Pervasives" is much smaller
>>>> than the ocaml standard library's.)


From francois.berenger.working at gmail.com  Wed Nov 14 01:40:42 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Tue, 13 Nov 2012 17:40:42 -0800 (PST)
Subject: any logger in core?
In-Reply-To: <CAK=fH+hz8cTcSdcw65F9CNmQ5kDs2m8NNM5O6HM98dx0P+pNjw@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
 <20120714161518.GJ14582@dark.recoil.org>
 <9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
 <CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
 <004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
 <5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
 <CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
 <CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
 <CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
 <7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
 <CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
 <CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
 <CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
 <CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
 <d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>
 <CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>
 <CAK=fH+gh3MGxObP-KUPVWfDCZJk8GZhTF+S6c_ktXCuK4_wbHg@mail.gmail.com>
 <04cc5df5-105f-4f90-8769-f499596d58ed@googlegroups.com>
 <CAK=fH+gakKwvurMB5RHZpMdHA8vVh3c+gGR_-kiHrAtLhmugtQ@mail.gmail.com>
 <a218f444-19c3-4322-b6b7-1fddc40983cc@googlegroups.com>
 <CAK=fH+jP+c8v-57To47MktUNPwB14L1kqqGXy3=p2N93ywL2RA@mail.gmail.com>
 <87ip99ua2b.fsf@li195-236.members.linode.com>
 <CAK=fH+hz8cTcSdcw65F9CNmQ5kDs2m8NNM5O6HM98dx0P+pNjw@mail.gmail.com>
Message-ID: <79ae5b51-0ccb-436c-8a3c-ddfe82e43978@googlegroups.com>

On Tuesday, November 13, 2012 6:34:05 PM UTC+9, David House wrote:
>
> Also, there is a function for logging fatal errors. It's called failwith 
> :) 
>

failwith messages do not come with a timestamp. 

>
> On Tue, Nov 13, 2012 at 9:27 AM, Malcolm Matalka <mmat... at gmail.com<javascript:>> 
> wrote: 
> > I agree with David.  The current logger I am using at work as 5 or 6 log 
> > levels and I have found little value in it.  I think 'fatal' is 
> > especially devilish since, in such a situation, your monitoring tools 
> > should be the ones determining that. 
> > 
> > /M 
> > 
> > David House <dho... at janestreet.com <javascript:>> writes: 
> > 
> >> Hmm, I am surprised you want so many! 
> >> 
> >> I claim there is a cost in allowing tons and tons of different log 
> >> levels. Firstly, it complicates the interface. Secondly, it leads to 
> >> different applications choosing different logging levels for 
> >> essentially the same errors. E.g. how do you choose whether some 
> >> particular failure is an error, or a fatal? Isn't it likely that 
> >> someone else will make a different choice? There are lines that you 
> >> can draw, but it's a big grey area. Having fewer choices means that 
> >> everyone's programs are more consistent with respect to each other. 
> >> 
> >> Putting it another way: three logging levels should be enough for 
> anyone! :) 
> >> 
> >> On Tue, Nov 13, 2012 at 8:02 AM, Francois Berenger 
> >> <francois.ber... at gmail.com <javascript:>> wrote: 
> >>> The choice in log levels is a little scarce. 
> >>> 
> >>> Currently: 
> >>> raw (I don't know it's level, I guess it's always printed but I may be 
> >>> wrong) 
> >>> then, ordered by my intuitive notion of log priority: 
> >>> debug < info < error 
> >>> 
> >>> I'm used to: 
> >>> debug < info < warn < error < fatal 
> >>> 
> >>> So, I miss the warning and fatal log levels. 
> >>> But, that's just based on my experience. 
> >>> 
> >>> Regards, 
> >>> F. 
> >>> 
> >>> 
> >>> On Thursday, November 8, 2012 7:13:25 PM UTC+9, David House wrote: 
> >>>> 
> >>>> On Thu, Nov 8, 2012 at 3:48 AM, Francois 
> >>>> <francois.b... at gmail.com> wrote: 
> >>>> > I don't know where to find never_returns. 
> >>>> 
> >>>> It's there if you open Core.Std. 
> >>>> 
> >>>> > But the following did work (and never stop): 
> >>>> 
> >>>> You need to explicitly shut down async using the shutdown function in 
> >>>> Async.Std. 
> >>>> 
> >>>> > I'm affraid of open directives, I try to keep my code _very_ 
> explicit 
> >>>> > about what it is doing and which function from which module is used 
> >>>> > (maybe because of past overexposure to some C++ code). 
> >>>> 
> >>>> I think that's exactly the right approach -- I often find myself 
> >>>> making similar comments when doing code review at work. Things are 
> >>>> much easier to follow if opens are reduced, or made more local, and 
> >>>> more explicit. 
> >>>> 
> >>>> That being said, I do allow myself the luxury of opening Core.Std and 
> >>>> Async.Std in most of my modules that use core / async. I find this to 
> >>>> strike a good balance between concision and explicitness. 
> >>>> 
> >>>> One of the reasons is that there are very few *values* brought into 
> >>>> scope by opening Core.Std and Async.Std. This conversation has 
> contain 
> >>>> disproportionally many: never_returns, shutdown, etc. -- an unlucky 
> >>>> coincidence! But nearly everything is squirreled away inside a 
> module, 
> >>>> which helps a lot. (In other words, our "Pervasives" is much smaller 
> >>>> than the ocaml standard library's.) 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121113/5e7a0fc0/attachment-0001.html>

From francois.berenger.working at gmail.com  Wed Nov 14 01:44:35 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Tue, 13 Nov 2012 17:44:35 -0800 (PST)
Subject: any logger in core?
In-Reply-To: <CAK=fH+jP+c8v-57To47MktUNPwB14L1kqqGXy3=p2N93ywL2RA@mail.gmail.com>
References: <06c42acb-1cc9-4f27-abf8-ba33fb2dc85c@googlegroups.com>
 <CACLX4jQt56bfewfQVxS7X5qL-bO-nLn=WD=rzMU8hsheLhb0xA@mail.gmail.com>
 <117B162E-CB0D-4901-BB27-327AD6C654C7@recoil.org>
 <CACLX4jTYb3ZP4RP+zFcr63=jZHDaLjaOmjjtM6k60H6WCDKTeQ@mail.gmail.com>
 <20120714161518.GJ14582@dark.recoil.org>
 <9112fe9a-2fad-4220-9132-1ba23d37df7b@googlegroups.com>
 <CACLX4jQSDECRwffBAhnZBVkcKx+p0xAj0jcPX-j_aREOJpeahg@mail.gmail.com>
 <004d7307-6e77-470f-b2ff-8b0ee0715757@googlegroups.com>
 <5cb90860-690f-45bf-9a72-06fafbcf1315@googlegroups.com>
 <CACLX4jRmATkFSe_tvoN9+Ha7nM-8Y3om3U6Ab5k6HLmhz0=m_w@mail.gmail.com>
 <CAO4dZbe7Ljv5gmLyzbFOQCqiEO=k00DdqVyOYEE_tOOsPjdU8Q@mail.gmail.com>
 <CACLX4jSEiOurhTGxQ0vrjvgEk6pXpqoy-xSm-6Bb5BTyrHM6XA@mail.gmail.com>
 <7b3161c8-88d3-4a84-b9ba-7a1a69ca6182@googlegroups.com>
 <CAK=fH+hc-xNc+K08vXuaFJV6p0akN5NEaLvzH+qpNqzOOirb3w@mail.gmail.com>
 <CAMQaOgOqDpo9DtFLQ4KM5i5y-_fpD91VDcALU+vAVkm_HvODuQ@mail.gmail.com>
 <CACLX4jSaB+OzVsNw6dEu--PH+qtAbQGUvxqKnzuAyDpckqWR6w@mail.gmail.com>
 <CAMQaOgO=-xW66arJ7QoTXNxt4rHgq5Vob2GFA5x-gbLSOGc5qQ@mail.gmail.com>
 <d4138578-fdf1-44e8-88e8-885618fbf581@googlegroups.com>
 <CAMQaOgMB588p4t_p1_f+ZfWiQy4N6WLEmU6-jLeEV6M2WVP-ug@mail.gmail.com>
 <CAK=fH+gh3MGxObP-KUPVWfDCZJk8GZhTF+S6c_ktXCuK4_wbHg@mail.gmail.com>
 <04cc5df5-105f-4f90-8769-f499596d58ed@googlegroups.com>
 <CAK=fH+gakKwvurMB5RHZpMdHA8vVh3c+gGR_-kiHrAtLhmugtQ@mail.gmail.com>
 <a218f444-19c3-4322-b6b7-1fddc40983cc@googlegroups.com>
 <CAK=fH+jP+c8v-57To47MktUNPwB14L1kqqGXy3=p2N93ywL2RA@mail.gmail.com>
Message-ID: <31722a84-930c-4909-825b-644508e57734@googlegroups.com>



On Tuesday, November 13, 2012 5:43:01 PM UTC+9, David House wrote:
>
> Hmm, I am surprised you want so many! 
>
> I claim there is a cost in allowing tons and tons of different log 
> levels. Firstly, it complicates the interface. Secondly, it leads to 
> different applications choosing different logging levels for 
> essentially the same errors. E.g. how do you choose whether some 
> particular failure is an error, or a fatal?


After a fatal error, the program cannot continue anymore.
Think about a "fatal injury".
I see a grey zone between warn and error, but I think
programmers are usually smart and can be trusted.

Isn't it likely that 
> someone else will make a different choice? There are lines that you 
> can draw, but it's a big grey area. Having fewer choices means that 
> everyone's programs are more consistent with respect to each other. 
>

I agree it's a grey zone.
But the current choice is drastic.
 

>
> Putting it another way: three logging levels should be enough for anyone! 
> :) 
>
> On Tue, Nov 13, 2012 at 8:02 AM, Francois Berenger 
> <francois.ber... at gmail.com <javascript:>> wrote: 
> > The choice in log levels is a little scarce. 
> > 
> > Currently: 
> > raw (I don't know it's level, I guess it's always printed but I may be 
> > wrong) 
> > then, ordered by my intuitive notion of log priority: 
> > debug < info < error 
> > 
> > I'm used to: 
> > debug < info < warn < error < fatal 
> > 
> > So, I miss the warning and fatal log levels. 
> > But, that's just based on my experience. 
> > 
> > Regards, 
> > F. 
> > 
> > 
> > On Thursday, November 8, 2012 7:13:25 PM UTC+9, David House wrote: 
> >> 
> >> On Thu, Nov 8, 2012 at 3:48 AM, Francois 
> >> <francois.b... at gmail.com> wrote: 
> >> > I don't know where to find never_returns. 
> >> 
> >> It's there if you open Core.Std. 
> >> 
> >> > But the following did work (and never stop): 
> >> 
> >> You need to explicitly shut down async using the shutdown function in 
> >> Async.Std. 
> >> 
> >> > I'm affraid of open directives, I try to keep my code _very_ explicit 
> >> > about what it is doing and which function from which module is used 
> >> > (maybe because of past overexposure to some C++ code). 
> >> 
> >> I think that's exactly the right approach -- I often find myself 
> >> making similar comments when doing code review at work. Things are 
> >> much easier to follow if opens are reduced, or made more local, and 
> >> more explicit. 
> >> 
> >> That being said, I do allow myself the luxury of opening Core.Std and 
> >> Async.Std in most of my modules that use core / async. I find this to 
> >> strike a good balance between concision and explicitness. 
> >> 
> >> One of the reasons is that there are very few *values* brought into 
> >> scope by opening Core.Std and Async.Std. This conversation has contain 
> >> disproportionally many: never_returns, shutdown, etc. -- an unlucky 
> >> coincidence! But nearly everything is squirreled away inside a module, 
> >> which helps a lot. (In other words, our "Pervasives" is much smaller 
> >> than the ocaml standard library's.) 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121113/ccb7ae2d/attachment-0001.html>

From francois.berenger.working at gmail.com  Wed Nov 14 03:58:27 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Tue, 13 Nov 2012 19:58:27 -0800 (PST)
Subject: How to compile the examples in ocaml-core/base/async/examples ?
In-Reply-To: <a0995a8f-8cdb-411e-aad2-214536136615@googlegroups.com>
References: <8e9fdd06-480a-4de1-803c-8dc5ad103af0@googlegroups.com>
 <87a9usk4fj.fsf@li195-236.members.linode.com>
 <CACLX4jRf7OUkC1FZ6ZDfAX-Sy=G=AM9b6+je2Z881_A2b_Hy7Q@mail.gmail.com>
 <CAPYVAiLMJAYKOgBtLDOj+NTihSjAXEX0=a4QUDTuS25B=z6z4g@mail.gmail.com>
 <CAMQaOgP0gZ-ADHyqJn7ZJH2tkdPXqg+jPs=N-aAvhvn_QT0X7Q@mail.gmail.com>
 <CAMQaOgM77i-Ly3sB3r=dU8q3vLKyZSc_MJVgA7BTzwibzLUm_w@mail.gmail.com>
 <1ac23dbf-9e49-4cf6-8f59-7788364941a3@googlegroups.com>
 <839ad1cc-6e6e-465c-a824-3e891e0d413f@googlegroups.com>
 <a0995a8f-8cdb-411e-aad2-214536136615@googlegroups.com>
Message-ID: <066357a1-20fc-4fb6-9a4c-bccf2e85638e@googlegroups.com>

On Tuesday, November 13, 2012 12:29:23 PM UTC+9, Dominick LoBraico wrote:
>
> The fact that has probably blocked that is the general vastness of Core. 
> There is an example file for the Command module included with Core I 
> believe (command-line parsing module). If there are specific areas that you 
> would like to see some clarity on I could write up some simple examples for 
> you/the community.
>

I gave it some thorough thought, that's why I did not reply right away.

1) definitively target the community, not just me, whatever I ask. I may be
    a marginal user of both core and OCaml (I'm in academia in structural
    biology / computer aided drug design, definitively not the mainstream
    typical OCaml user).

2) I think some code example (compiling and working) using the error monad 
would
    be nice. I would like more of my complex code to not be cluttered with 
error-
    handling so that it is easier to reason about (and write).

3) Anything that's very different from what is in the OCaml std library 
might
    be worth some code example, for example core's hash tables.
    I know sometime there is some "bla bla" in wikis / text files, but 
working and
    compiling code examples are invaluable.
    If you read a lot of UNIX manpages, you will understand this in your 
guts:
    no matter the amount of "bla bla", no matter who wrote it,
    no matter how well it is written,
    examples are _always_ invaluable (yes, some people will only read
    and use the examples and nothing from the documentation,
    but that's the problem of this kind of user).

Best regards,
Francois.


> On Monday, November 12, 2012 7:02:51 PM UTC-6, Francois Berenger wrote:
>>
>> Thanks for the command.
>>
>> In fact, it would be quite useful to have example programs for core too. 
>> I think I saw just one, while async has many.
>>
>> On Tuesday, November 13, 2012 5:20:43 AM UTC+9, Dominick LoBraico wrote:
>>>
>>> Francois,
>>>
>>> If you have ocamlfind install, this should work (for example):
>>>
>>> $ ocamlfind ocamlc -thread -package async -linkpkg hello.ml -o hello.exe
>>>
>>>
>>> On Thursday, November 8, 2012 7:01:50 PM UTC-6, Francois Berenger wrote:
>>>>
>>>> By the way, how do I compile them? 
>>>> It was my initial question. ;) 
>>>>
>>>> On Fri, Nov 9, 2012 at 10:00 AM, Francois Berenger 
>>>> <francois.ber... at gmail.com> wrote: 
>>>> > $ cd ~/.opam/system/build/async.108.07.01/examples 
>>>> > $ grep -ri jane.std * 
>>>> > bin_prot_test.ml:open Jane.Std 
>>>> > cat.ml:open Jane.Std 
>>>> > countdown.ml:open Jane.Std 
>>>> > finalizer.ml:open Jane.Std 
>>>> > monitors.ml:open Jane.Std 
>>>> > process.ml:open Jane.Std 
>>>> > process_stream.ml:open Jane.Std 
>>>> > server.ml:open Jane.Std 
>>>> > signals.ml:open Jane.Std 
>>>> > sigpipe.ml:open Jane.Std 
>>>> > socket.ml:open Jane.Std 
>>>> > sound.ml:open Jane.Std 
>>>> > write_forever.ml:open Jane.Std 
>>>> > 
>>>> > On Fri, Nov 9, 2012 at 2:02 AM, Stephen Weeks <swe... at janestreet.com> 
>>>> wrote: 
>>>> >>> Jane.Std is some internal stuff that is not exported.  We should 
>>>> fix 
>>>> >>> that example not to use it.  Which specific example is it? 
>>>> >> 
>>>> >> Many of the examples in base/async/examples unnecessarily refer to 
>>>> >> Jane.Std.  I pushed a fix internally to change them all to Core.Std. 
>>>>
>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121113/35d2bba6/attachment-0001.html>

From francois.berenger.working at gmail.com  Wed Nov 14 05:10:11 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Tue, 13 Nov 2012 21:10:11 -0800 (PST)
Subject: my experience at porting some code to core
Message-ID: <8672a57f-2032-47c9-9d22-fc3f1112a4c4@googlegroups.com>

Hi,

The project is about 3k LoC, one man.
I removed dependency to batteries, the standard library and
some ugly macros I had for logging.

I had to:
- add a lot of labels
- use Float.XXX instead of *float* from the std lib
- code BatString.tail
- code BatString.starts_with
- code a kind of BatOption.get
- do a lot of code re-reading to make sure I preserve semantic

I'm starting a new project, so I am OK to break things,
I just want all things to compile for the moment.
There will be some scientific validation of the results later on.

I didn't adopt core's Hashtbl yet.
A little because I am lazy, a little because I am annoyed
by some signature changes (for example: find) that would force me
to update a lot of my code.

It was not so funny to do but I hope it will pay-off in the future.
I started this on Monday and was about 60% of the time on it.
I might start to use labels more in my own code.

I already miss the ocamldoc from batteries, which is quite complete
and nice.

The most difficult part is code re-reading I think.
Sometimes also, compiler parsing errors because of missing labels
are not so trivial to understand.

Regards,
F.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121113/f9ffd621/attachment-0001.html>

From ogunden at phauna.org  Wed Nov 14 05:18:20 2012
From: ogunden at phauna.org (Owen Gunden)
Date: Wed, 14 Nov 2012 00:18:20 -0500
Subject: my experience at porting some code to core
In-Reply-To: <8672a57f-2032-47c9-9d22-fc3f1112a4c4@googlegroups.com>
References: <8672a57f-2032-47c9-9d22-fc3f1112a4c4@googlegroups.com>
Message-ID: <CA+LP8rTRvwNDR9=_WdTbQzc6R5GEJhueMKAX+0kDTSpj6dwX-Q@mail.gmail.com>

On Wed, Nov 14, 2012 at 12:10 AM, Francois Berenger <
francois.berenger.working at gmail.com> wrote:

> - code BatString.tail
>

String.drop_prefix


> - code BatString.starts_with
>

String.is_prefix
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121114/600fe4db/attachment-0001.html>

From dj at lobraico.com  Wed Nov 14 06:48:55 2012
From: dj at lobraico.com (Dominick LoBraico)
Date: Wed, 14 Nov 2012 00:48:55 -0600
Subject: my experience at porting some code to core
In-Reply-To: <8672a57f-2032-47c9-9d22-fc3f1112a4c4@googlegroups.com>
References: <8672a57f-2032-47c9-9d22-fc3f1112a4c4@googlegroups.com>
Message-ID: <68A74BB74C374371AC9D2975F54D00DF@lobraico.com>



On Tuesday, November 13, 2012 at 11:10 PM, Francois Berenger wrote:

> Hi,
> 
> The project is about 3k LoC, one man.
> I removed dependency to batteries, the standard library and
> some ugly macros I had for logging.
> 
> I had to:
> - add a lot of labels
> - use Float.XXX instead of *float* from the std lib
> - code BatString.tail
> - code BatString.starts_with
Option.value or Option.value_exn 
> - code a kind of BatOption.get
> - do a lot of code re-reading to make sure I preserve semantic
> 
> I'm starting a new project, so I am OK to break things,
> I just want all things to compile for the moment.
> There will be some scientific validation of the results later on.
> 
> I didn't adopt core's Hashtbl yet.
> A little because I am lazy, a little because I am annoyed
> by some signature changes (for example: find) that would force me
> to update a lot of my code.
> 
> It was not so funny to do but I hope it will pay-off in the future.
> I started this on Monday and was about 60% of the time on it.
> I might start to use labels more in my own code.
> 
You know that you can generate ocamldoc documentation for most/all of the core and async libraries right? E.g.:

$ cd ~/.opam/4.00.1+short-types/build/core.108.07.01
$ make doc 

Additionally, some of this is also hosted online, generated as recently as 8 October: https://ocaml.janestreet.com/ocaml-core/latest/doc/
> I already miss the ocamldoc from batteries, which is quite complete
> and nice.
> 
> The most difficult part is code re-reading I think.
> Sometimes also, compiler parsing errors because of missing labels
> are not so trivial to understand.
> 
> Regards,
> F.
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121114/075619a5/attachment-0001.html>

From yminsky at janestreet.com  Thu Nov 15 03:09:34 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Wed, 14 Nov 2012 22:09:34 -0500
Subject: my experience at porting some code to core
In-Reply-To: <8672a57f-2032-47c9-9d22-fc3f1112a4c4@googlegroups.com>
References: <8672a57f-2032-47c9-9d22-fc3f1112a4c4@googlegroups.com>
Message-ID: <CACLX4jTeegR_-YFuVtxOHUgmRB6yE_-MeGcbd-8Pkd=xABDV3A@mail.gmail.com>


The docs are available here:

https://ocaml.janestreet.com/ocaml-core/108.07.01/doc/

and come out with each new release.  They're not perfect, but they're there.

On Wed, Nov 14, 2012 at 12:10 AM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> Hi,
>
> The project is about 3k LoC, one man.
> I removed dependency to batteries, the standard library and
> some ugly macros I had for logging.
>
> I had to:
> - add a lot of labels
> - use Float.XXX instead of *float* from the std lib
> - code BatString.tail
> - code BatString.starts_with
> - code a kind of BatOption.get
> - do a lot of code re-reading to make sure I preserve semantic
>
> I'm starting a new project, so I am OK to break things,
> I just want all things to compile for the moment.
> There will be some scientific validation of the results later on.
>
> I didn't adopt core's Hashtbl yet.
> A little because I am lazy, a little because I am annoyed
> by some signature changes (for example: find) that would force me
> to update a lot of my code.
>
> It was not so funny to do but I hope it will pay-off in the future.
> I started this on Monday and was about 60% of the time on it.
> I might start to use labels more in my own code.
>
> I already miss the ocamldoc from batteries, which is quite complete
> and nice.
>
> The most difficult part is code re-reading I think.
> Sometimes also, compiler parsing errors because of missing labels
> are not so trivial to understand.
>
> Regards,
> F.
>


From francois.berenger.working at gmail.com  Fri Nov 16 02:33:26 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 15 Nov 2012 18:33:26 -0800 (PST)
Subject: Int.of_string failure
Message-ID: <23c13afe-692e-4763-9766-2d61b681fa2a@googlegroups.com>

(also true for Caml.int_of_string):

The following work:
# Float.of_string "    3.12";;
- : Core.Std.Float.t = 3.12
# Float.of_string "3.12";;
- : Core.Std.Float.t = 3.12
Int.of_string "3";;
- : Core.Std.Int.t = 3

The following does not:
Int.of_string " 3";;
Exception: (Failure "Int.of_string: \" 3\"").

I don't understand why. Bug?

I guess a scanf will work. But I think Int.of_string should work too.

Regards,
F.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121115/a39e8670/attachment-0001.html>

From francois.berenger.working at gmail.com  Fri Nov 16 02:45:40 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 15 Nov 2012 18:45:40 -0800 (PST)
Subject: Int.of_string failure
In-Reply-To: <23c13afe-692e-4763-9766-2d61b681fa2a@googlegroups.com>
References: <23c13afe-692e-4763-9766-2d61b681fa2a@googlegroups.com>
Message-ID: <615d7557-878a-41eb-9e20-beab5edf02bd@googlegroups.com>



On Friday, November 16, 2012 11:33:26 AM UTC+9, Francois Berenger wrote:
>
> (also true for Caml.int_of_string):
>
> The following work:
> # Float.of_string "    3.12";;
> - : Core.Std.Float.t = 3.12
> # Float.of_string "3.12";;
> - : Core.Std.Float.t = 3.12
> Int.of_string "3";;
> - : Core.Std.Int.t = 3
>
> The following does not:
> Int.of_string " 3";;
> Exception: (Failure "Int.of_string: \" 3\"").
>
> I don't understand why. Bug?
>
> I guess a scanf will work.


I guessed wrong:
# Scanf.sscanf " 123" "%d" (fun i -> i);;
Exception:
(Scanf.Scan_failure
 "scanf: bad input at char number 0: ``character ' ' is not a decimal 
digit''").
 

> But I think Int.of_string should work too.
>
> Regards,
> F.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121115/d20655e9/attachment-0001.html>

From dj at lobraico.com  Fri Nov 16 05:56:53 2012
From: dj at lobraico.com (Dominick LoBraico)
Date: Thu, 15 Nov 2012 21:56:53 -0800 (PST)
Subject: Int.of_string failure
In-Reply-To: <615d7557-878a-41eb-9e20-beab5edf02bd@googlegroups.com>
References: <23c13afe-692e-4763-9766-2d61b681fa2a@googlegroups.com>
 <615d7557-878a-41eb-9e20-beab5edf02bd@googlegroups.com>
Message-ID: <d44ce33a-804d-4b94-aaf9-33160aeed0f7@googlegroups.com>

String.strip

On Thursday, November 15, 2012 8:45:41 PM UTC-6, Francois Berenger wrote:
>
>
>
> On Friday, November 16, 2012 11:33:26 AM UTC+9, Francois Berenger wrote:
>>
>> (also true for Caml.int_of_string):
>>
>> The following work:
>> # Float.of_string "    3.12";;
>> - : Core.Std.Float.t = 3.12
>> # Float.of_string "3.12";;
>> - : Core.Std.Float.t = 3.12
>> Int.of_string "3";;
>> - : Core.Std.Int.t = 3
>>
>> The following does not:
>> Int.of_string " 3";;
>> Exception: (Failure "Int.of_string: \" 3\"").
>>
>> I don't understand why. Bug?
>>
>> I guess a scanf will work.
>
>
> I guessed wrong:
> # Scanf.sscanf " 123" "%d" (fun i -> i);;
> Exception:
> (Scanf.Scan_failure
>  "scanf: bad input at char number 0: ``character ' ' is not a decimal 
> digit''").
>  
>
>> But I think Int.of_string should work too.
>>
>> Regards,
>> F.
>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121115/87425649/attachment-0001.html>

From francois.berenger.working at gmail.com  Mon Nov 19 06:41:05 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Sun, 18 Nov 2012 22:41:05 -0800 (PST)
Subject: Any modification to .mli files when using core?
Message-ID: <6eabb2eb-71ec-4a85-94f0-d80e126ac20d@googlegroups.com>

Hello,

All my .ml files now have a 'open Core.Std' at the top.

Should I put something at the top of all my .mli files?

Thanks a lot,
F.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121118/6402426e/attachment-0001.html>

From anil at recoil.org  Mon Nov 19 00:32:27 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Mon, 19 Nov 2012 00:32:27 +0000
Subject: OPAM dev repo updated for 108.08.00-pre0
Message-ID: <CAEE8CC3-0785-4880-9FAD-90A597D48A32@recoil.org>


I've pushed the package descriptions for 108.08.00-pre0 to this repo:
https://github.com/avsm/opam-core-pre0

...if anyone else also wants to test it. You can do so via:

$ opam remote -add coredev git://github.com/avsm/opam-core-pre0
$ opam update
$ opam upgrade

There's also a clone.sh script in there which clones an existing
version and rewrites the URLs to the new version, to make it easier
to generate the boilerplate for future versions.

-anil


From mmatalka at gmail.com  Mon Nov 19 06:54:23 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Mon, 19 Nov 2012 01:54:23 -0500
Subject: Any modification to .mli files when using core?
In-Reply-To: <6eabb2eb-71ec-4a85-94f0-d80e126ac20d@googlegroups.com> (Francois
	Berenger's message of "Sun, 18 Nov 2012 22:41:05 -0800 (PST)")
References: <6eabb2eb-71ec-4a85-94f0-d80e126ac20d@googlegroups.com>
Message-ID: <878v9ygk0w.fsf@li195-236.members.linode.com>


I use open Core.Std in .mli files if they reference something in it.

Francois Berenger <francois.berenger.working at gmail.com> writes:

> Hello,
>
> All my .ml files now have a 'open Core.Std' at the top.
>
> Should I put something at the top of all my .mli files?
>
> Thanks a lot,
> F.


From markus.mottl at gmail.com  Mon Nov 19 17:23:32 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Mon, 19 Nov 2012 12:23:32 -0500
Subject: Cross-module inlining fails
Message-ID: <CAP_800raC7hZobXKzK+zL6AZTyThSMWSph7_jBPZ7WHCNZckoQ@mail.gmail.com>


Hi,

I've noticed that cross-module inlining does not work with the
Opam-installed Core library, because the .cmx file is not installed.
Note that it is not enough to install the .cmxa file, because it is
only used during linking.  The compiler wouldn't know where to look
for optimization information.

Looking at the setup.ml file generated by Oasis, it seems that Oasis
is the culprit, but I thought it would be important to know for other
Core users if they experience bad performance.

Sylvain, is there anything one has to put in the _oasis file to
generate correct installation code?  My guess is that all that's
needed is to fix setup.ml by installing the .cmx of packing targets
(e.g. core.cmx), not just .cmx files for constituents of unpacked
libraries, which seem to be handled correctly.

Regards,
Markus

-- 
Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com


From agarwal1975 at gmail.com  Mon Nov 19 17:32:05 2012
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Mon, 19 Nov 2012 12:32:05 -0500
Subject: old links to docs
Message-ID: <CAMu2m2JXxRePv-a3OG7jB7-uGjWeudRa0orDibFDzi25vDcsaw@mail.gmail.com>

The current link to Core documentation is:
https://ocaml.janestreet.com/ocaml-core/

So the links below are obsolete. Might be good to remove them from your
server to avoid google search directing people to the wrong place.

http://www.janestreet.com/ocaml/janestreet-ocamldocs/
http://www.janestreet.com/ocaml/doc/core/
http://www.janestreet.com/ocaml/doc/core_extended/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121119/0c0ea3ed/attachment-0001.html>

From yury.sulsky at gmail.com  Mon Nov 19 18:04:06 2012
From: yury.sulsky at gmail.com (Yury Sulsky)
Date: Mon, 19 Nov 2012 13:04:06 -0500
Subject: old links to docs
In-Reply-To: <CAMu2m2JXxRePv-a3OG7jB7-uGjWeudRa0orDibFDzi25vDcsaw@mail.gmail.com>
References: <CAMu2m2JXxRePv-a3OG7jB7-uGjWeudRa0orDibFDzi25vDcsaw@mail.gmail.com>
Message-ID: <CAEDxudwwn3nH5BxT6930LtchR9gVMaXmkFhnQeE0u3hm07YwZg@mail.gmail.com>

Done, thanks for the heads up!


On Mon, Nov 19, 2012 at 12:32 PM, Ashish Agarwal <agarwal1975 at gmail.com>wrote:

> The current link to Core documentation is:
> https://ocaml.janestreet.com/ocaml-core/
>
> So the links below are obsolete. Might be good to remove them from your
> server to avoid google search directing people to the wrong place.
>
> http://www.janestreet.com/ocaml/janestreet-ocamldocs/
> http://www.janestreet.com/ocaml/doc/core/
> http://www.janestreet.com/ocaml/doc/core_extended/
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121119/b30d6302/attachment-0001.html>

From markus.mottl at gmail.com  Mon Nov 19 18:16:55 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Mon, 19 Nov 2012 13:16:55 -0500
Subject: Cross-module inlining fails
In-Reply-To: <CAOCAUGOQTYZPLrgPimDuOFZBHOVkr92dFsaCbA4ewcbO4JaQwg@mail.gmail.com>
References: <CAP_800raC7hZobXKzK+zL6AZTyThSMWSph7_jBPZ7WHCNZckoQ@mail.gmail.com>
	<CAOCAUGOQTYZPLrgPimDuOFZBHOVkr92dFsaCbA4ewcbO4JaQwg@mail.gmail.com>
Message-ID: <CAP_800rU0d4b0FuGewHf5kMep_G8Bj09Q_F+YkLHe9ZnJ-cJqg@mail.gmail.com>


On Mon, Nov 19, 2012 at 1:00 PM, Sylvain Le Gall <sylvain at le-gall.net> wrote:
> Well, .cmx file should be installed EXCEPT if you are using packed
> modules...

The .cmx files of _submodules_ should not be installed for packed
libraries, this is correct, but the (single) .cmx file resulting from
packing should be installed for packed libraries.

> The culprit is:
> (not lib.lib_pack) && (* Do not install .cmx packed submodules *)
> in src/oasis/OASISLibrary.ml

This is the location of the likely bug.  My modification to setup.ml
below is completely untested and may not even compile, but the idea is
probably right:

    (* The .cmx that be compiled along *)
    let cmxs =
      let should_be_built =
          match bs.bs_compiled_object with
          | Native -> true
          | Best -> is_native
          | Byte -> false
      in
        if should_be_built then
          if lib.lib_pack then [ cs.cs_name ^ ".cmx" ]
          else
            find_modules
              (lib.lib_modules @ lib.lib_internal_modules)
              "cmx"
        else
          []
    in

> You can experiment installing .cmx by commenting this line. But I am really
> not sure this will help that much. I thought that .cmxs was a pack of .cmx
> so that inlining can work using what is inside this archive (contrary to
> .cmxa).
>
> Maybe the inlining using .cmxs doesn't work as excepted ?

.cmxs files are used for dynamic linking and are hence the "dynamic
brother" of .cmxa files.  Cross-module inlining, however, is done
during compilation, not linking.  It can only be done if the ".cmx"
files of modules referenced from the currently compiled file are
visible.  .cmxa and .cmxs files are completely ignored during
compilation.

Regards,
Markus

-- 
Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com


From vgatien-baron at janestreet.com  Mon Nov 19 18:23:17 2012
From: vgatien-baron at janestreet.com (Valentin Gatien-Baron)
Date: Mon, 19 Nov 2012 13:23:17 -0500
Subject: Cross-module inlining fails
In-Reply-To: <CAOCAUGOQTYZPLrgPimDuOFZBHOVkr92dFsaCbA4ewcbO4JaQwg@mail.gmail.com>
References: <CAP_800raC7hZobXKzK+zL6AZTyThSMWSph7_jBPZ7WHCNZckoQ@mail.gmail.com>
	<CAOCAUGOQTYZPLrgPimDuOFZBHOVkr92dFsaCbA4ewcbO4JaQwg@mail.gmail.com>
Message-ID: <CAFd54qMr=Bg-sx+YCh65uSJePDCOYAFOGtjFCqmxpgKbEKD_kg@mail.gmail.com>


Not all cmx's should be installed, but I don't see why the packed cmx
should not be installed. Generally speaking, I think packed cmx's are
not special and every cmx that was given to ocamlopt to build the cmxa
should be installed.

cmxs are for dynamic loading, so that's not related.

On 11/19/12, Sylvain Le Gall <sylvain at le-gall.net> wrote:
> Hi,
>
>
> 2012/11/19 Markus Mottl <markus.mottl at gmail.com>
>
>> Hi,
>>
>> I've noticed that cross-module inlining does not work with the
>> Opam-installed Core library, because the .cmx file is not installed.
>> Note that it is not enough to install the .cmxa file, because it is
>> only used during linking.  The compiler wouldn't know where to look
>> for optimization information.
>>
>> Looking at the setup.ml file generated by Oasis, it seems that Oasis
>> is the culprit, but I thought it would be important to know for other
>> Core users if they experience bad performance.
>>
>> Sylvain, is there anything one has to put in the _oasis file to
>> generate correct installation code?  My guess is that all that's
>> needed is to fix setup.ml by installing the .cmx of packing targets
>> (e.g. core.cmx), not just .cmx files for constituents of unpacked
>> libraries, which seem to be handled correctly.
>>
>
> Well, .cmx file should be installed EXCEPT if you are using packed
> modules...
>
> The culprit is:
> (not lib.lib_pack) && (* Do not install .cmx packed submodules *)
> in src/oasis/OASISLibrary.ml
>
> AFAIK, Core use pack module, so this is the reason why it doesn't install
> .cmx.
>
> You can experiment installing .cmx by commenting this line. But I am really
> not sure this will help that much. I thought that .cmxs was a pack of .cmx
> so that inlining can work using what is inside this archive (contrary to
> .cmxa).
>
> Maybe the inlining using .cmxs doesn't work as excepted ?
>
>
>> Regards,
>> Markus
>>
>> --
>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>>
>


From markus.mottl at gmail.com  Mon Nov 19 18:31:05 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Mon, 19 Nov 2012 13:31:05 -0500
Subject: [OASIS-devel] Cross-module inlining fails
In-Reply-To: <CAOCAUGP42yM3yZJUS6sVxhwf_ODV1nvpujqmAdTPzzs-1LX5RA@mail.gmail.com>
References: <CAP_800raC7hZobXKzK+zL6AZTyThSMWSph7_jBPZ7WHCNZckoQ@mail.gmail.com>
	<CAOCAUGOQTYZPLrgPimDuOFZBHOVkr92dFsaCbA4ewcbO4JaQwg@mail.gmail.com>
	<CAOCAUGP42yM3yZJUS6sVxhwf_ODV1nvpujqmAdTPzzs-1LX5RA@mail.gmail.com>
Message-ID: <CAP_800onpMdBjPGtBr0hSSJFLAWrbL2BNWhPLqDesTFTAW0QEQ@mail.gmail.com>


On Mon, Nov 19, 2012 at 1:16 PM, Sylvain Le Gall <sylvain at le-gall.net> wrote:
> Second thought on this, exposing .cmx in a packed library is dangerous.
> Because single compilation are supposed to be accessed using Foo.Util, where
> foo is the pack. If you expose utils.cmx you will cause compilation errors
> for programs that uses themself module Utils. So exposing .cmx of a pack is
> kind of the contrary to what pack has been designed for. But maybe i miss
> something here.

Lets consider an example.  Lets assume you want to pack modules A and
B into a packed library module Foo.  Compiling A and B will generate
"a.cmx" and "b.cmx".  Packing A and B into Foo will then generate a
file "foo.cmx".  This "foo.cmx" file should be installed along with
the "foo.cmi", "foo.cmxa", and "foo.a" file after library creation.
It contains the information required for cross-module inlining.

Neither "a.cmx" nor "b.cmx" should be installed, because the user
cannot access these in their code if only "foo.cmi" (rather than
"a.cmi" and "b.cmi") is visible, as it should be.

So the resulting contents of the installation directory is: foo.cmi,
foo.cmx, foo.cmxa, foo.a.

Note that "foo.a" contains the machine code of the non-inlined
functions, whereas "foo.cmxa" only tells the linker how to resolve
calls to this code.  "foo.cmx", however, contains a code
representation suitable for inlining during compilation of other
modules.  It is entirely possible that linking with the ".cmxa" and
".a" file is basically a no-op for your program, because it may have
gotten all it needs from the ".cmx" file during compilation and
inlined it.

Regards,
Markus

-- 
Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com


From markus.mottl at gmail.com  Mon Nov 19 18:31:39 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Mon, 19 Nov 2012 13:31:39 -0500
Subject: Cross-module inlining fails
In-Reply-To: <CAFd54qMr=Bg-sx+YCh65uSJePDCOYAFOGtjFCqmxpgKbEKD_kg@mail.gmail.com>
References: <CAP_800raC7hZobXKzK+zL6AZTyThSMWSph7_jBPZ7WHCNZckoQ@mail.gmail.com>
	<CAOCAUGOQTYZPLrgPimDuOFZBHOVkr92dFsaCbA4ewcbO4JaQwg@mail.gmail.com>
	<CAFd54qMr=Bg-sx+YCh65uSJePDCOYAFOGtjFCqmxpgKbEKD_kg@mail.gmail.com>
Message-ID: <CAP_800qfJt=2+yPMisJ8ny+mUOuuLZVtLdJmaFmFbMrCgbOTNg@mail.gmail.com>


On Mon, Nov 19, 2012 at 1:23 PM, Valentin Gatien-Baron
<vgatien-baron at janestreet.com> wrote:
> Not all cmx's should be installed, but I don't see why the packed cmx
> should not be installed. Generally speaking, I think packed cmx's are
> not special and every cmx that was given to ocamlopt to build the cmxa
> should be installed.
>
> cmxs are for dynamic loading, so that's not related.

This is correct.

-- 
Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com


From sylvain at le-gall.net  Mon Nov 19 18:00:17 2012
From: sylvain at le-gall.net (Sylvain Le Gall)
Date: Mon, 19 Nov 2012 19:00:17 +0100
Subject: Cross-module inlining fails
In-Reply-To: <CAP_800raC7hZobXKzK+zL6AZTyThSMWSph7_jBPZ7WHCNZckoQ@mail.gmail.com>
References: <CAP_800raC7hZobXKzK+zL6AZTyThSMWSph7_jBPZ7WHCNZckoQ@mail.gmail.com>
Message-ID: <CAOCAUGOQTYZPLrgPimDuOFZBHOVkr92dFsaCbA4ewcbO4JaQwg@mail.gmail.com>

Hi,


2012/11/19 Markus Mottl <markus.mottl at gmail.com>

> Hi,
>
> I've noticed that cross-module inlining does not work with the
> Opam-installed Core library, because the .cmx file is not installed.
> Note that it is not enough to install the .cmxa file, because it is
> only used during linking.  The compiler wouldn't know where to look
> for optimization information.
>
> Looking at the setup.ml file generated by Oasis, it seems that Oasis
> is the culprit, but I thought it would be important to know for other
> Core users if they experience bad performance.
>
> Sylvain, is there anything one has to put in the _oasis file to
> generate correct installation code?  My guess is that all that's
> needed is to fix setup.ml by installing the .cmx of packing targets
> (e.g. core.cmx), not just .cmx files for constituents of unpacked
> libraries, which seem to be handled correctly.
>

Well, .cmx file should be installed EXCEPT if you are using packed
modules...

The culprit is:
(not lib.lib_pack) && (* Do not install .cmx packed submodules *)
in src/oasis/OASISLibrary.ml

AFAIK, Core use pack module, so this is the reason why it doesn't install
.cmx.

You can experiment installing .cmx by commenting this line. But I am really
not sure this will help that much. I thought that .cmxs was a pack of .cmx
so that inlining can work using what is inside this archive (contrary to
.cmxa).

Maybe the inlining using .cmxs doesn't work as excepted ?


> Regards,
> Markus
>
> --
> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121119/157b462c/attachment-0001.html>

From ocaml-core at googlegroups.com  Tue Nov 20 02:49:54 2012
From: ocaml-core at googlegroups.com (ocaml-core at googlegroups.com)
Date: Tue, 20 Nov 2012 02:49:54 +0000
Subject: Moderator's spam report for ocaml-core@googlegroups.com
Message-ID: <90e6ba5bc847e86e6a04cee44909@google.com>


This message is being sent to you because you are a moderator of the group ocaml-core.

The following suspicious messages were sent to your group, but are being held in your moderation queue because they are classified as likely spam messages.

If you take no action, all the messages below will be discarded automatically as spam.

However, if you see any messages that are not spam below, you may approve them individually by going to:

http://groups.google.com/group/ocaml-core/pendmsg

Please do not mark this notification as spam; this is a service for group moderators. If you do not wish to receive these notifications in the future, you may change your preferences by going to:

http://groups.google.com/group/ocaml-core/manage_post


------- 1 of 1  -------
Subject: Re: Cross-module inlining fails
>From: Sylvain Le Gall <sylvain at le-gall.net>
Date: Nov 19 07:16PM +0100

>> (e.g. core.cmx), not just .cmx files for constituents of unpacked
>> libraries, which seem to be handled correctly.

> Well, .cmx file should be installed EXCEPT if you are using packed
modules...
> (not lib.lib_pack) && (* Do not install

Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=5195793415094116291


For more information about this message, please visit:
https://support.google.com/groups/bin/answer.py?hl=en&answer=47792



From sylvain at le-gall.net  Tue Nov 20 09:31:39 2012
From: sylvain at le-gall.net (Sylvain Le Gall)
Date: Tue, 20 Nov 2012 10:31:39 +0100
Subject: Cross-module inlining fails
In-Reply-To: <CAFd54qMr=Bg-sx+YCh65uSJePDCOYAFOGtjFCqmxpgKbEKD_kg@mail.gmail.com>
References: <CAP_800raC7hZobXKzK+zL6AZTyThSMWSph7_jBPZ7WHCNZckoQ@mail.gmail.com>
	<CAOCAUGOQTYZPLrgPimDuOFZBHOVkr92dFsaCbA4ewcbO4JaQwg@mail.gmail.com>
	<CAFd54qMr=Bg-sx+YCh65uSJePDCOYAFOGtjFCqmxpgKbEKD_kg@mail.gmail.com>
Message-ID: <CAOCAUGPOoo_CH-HZ8f4Kj6ZktBgU=8NBJToGjkuZNO=RmvHKFQ@mail.gmail.com>

2012/11/19 Valentin Gatien-Baron <vgatien-baron at janestreet.com>

> Not all cmx's should be installed, but I don't see why the packed cmx
> should not be installed. Generally speaking, I think packed cmx's are
> not special and every cmx that was given to ocamlopt to build the cmxa
> should be installed.
>
> cmxs are for dynamic loading, so that's not related.
>
>
Noted, it will be in the next version of OASIS. I'll ping you when it lands
in the github repository.


> On 11/19/12, Sylvain Le Gall <sylvain at le-gall.net> wrote:
> > Hi,
> >
> >
> > 2012/11/19 Markus Mottl <markus.mottl at gmail.com>
> >
> >> Hi,
> >>
> >> I've noticed that cross-module inlining does not work with the
> >> Opam-installed Core library, because the .cmx file is not installed.
> >> Note that it is not enough to install the .cmxa file, because it is
> >> only used during linking.  The compiler wouldn't know where to look
> >> for optimization information.
> >>
> >> Looking at the setup.ml file generated by Oasis, it seems that Oasis
> >> is the culprit, but I thought it would be important to know for other
> >> Core users if they experience bad performance.
> >>
> >> Sylvain, is there anything one has to put in the _oasis file to
> >> generate correct installation code?  My guess is that all that's
> >> needed is to fix setup.ml by installing the .cmx of packing targets
> >> (e.g. core.cmx), not just .cmx files for constituents of unpacked
> >> libraries, which seem to be handled correctly.
> >>
> >
> > Well, .cmx file should be installed EXCEPT if you are using packed
> > modules...
> >
> > The culprit is:
> > (not lib.lib_pack) && (* Do not install .cmx packed submodules *)
> > in src/oasis/OASISLibrary.ml
> >
> > AFAIK, Core use pack module, so this is the reason why it doesn't install
> > .cmx.
> >
> > You can experiment installing .cmx by commenting this line. But I am
> really
> > not sure this will help that much. I thought that .cmxs was a pack of
> .cmx
> > so that inlining can work using what is inside this archive (contrary to
> > .cmxa).
> >
> > Maybe the inlining using .cmxs doesn't work as excepted ?
> >
> >
> >> Regards,
> >> Markus
> >>
> >> --
> >> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
> >>
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121120/7c1035a2/attachment-0001.html>

From francois.berenger.working at gmail.com  Wed Nov 21 08:00:39 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Wed, 21 Nov 2012 00:00:39 -0800 (PST)
Subject: some small example using s-expressions
Message-ID: <3ba2523f-4ed4-4708-9831-6b4ff3207293@googlegroups.com>

Hello,

I am looking for some introduction to using s-expressions.

A small and simple example would be enough
for me to get started:

I'd like to know:
- what to change in my code to enable them (just add ' with sexp' after 
some type declaration?)
- what to change in my build system to enable them (I use oasis)

Thanks a lot,
Francois.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121121/ac4b9e56/attachment-0001.html>

From mmatalka at gmail.com  Wed Nov 21 08:31:41 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Wed, 21 Nov 2012 03:31:41 -0500
Subject: some small example using s-expressions
In-Reply-To: <3ba2523f-4ed4-4708-9831-6b4ff3207293@googlegroups.com> (Francois
	Berenger's message of "Wed, 21 Nov 2012 00:00:39 -0800 (PST)")
References: <3ba2523f-4ed4-4708-9831-6b4ff3207293@googlegroups.com>
Message-ID: <87sj83cq6q.fsf@li195-236.members.linode.com>


https://github.com/avsm/ocaml-tutorial/tree/master/examples/broker

Francois Berenger <francois.berenger.working at gmail.com> writes:

> Hello,
>
> I am looking for some introduction to using s-expressions.
>
> A small and simple example would be enough
> for me to get started:
>
> I'd like to know:
> - what to change in my code to enable them (just add ' with sexp' after 
> some type declaration?)
> - what to change in my build system to enable them (I use oasis)
>
> Thanks a lot,
> Francois.


From mmatalka at gmail.com  Wed Nov 21 09:38:31 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Wed, 21 Nov 2012 04:38:31 -0500
Subject: some small example using s-expressions
In-Reply-To: <CAK=fH+jaZCdSBuG4bEJedTNbmGrUtupaKyYnrm9SDaCYXtZgKA@mail.gmail.com>
	(David House's message of "Wed, 21 Nov 2012 09:31:51 +0000")
References: <3ba2523f-4ed4-4708-9831-6b4ff3207293@googlegroups.com>
	<87sj83cq6q.fsf@li195-236.members.linode.com>
	<CAK=fH+jaZCdSBuG4bEJedTNbmGrUtupaKyYnrm9SDaCYXtZgKA@mail.gmail.com>
Message-ID: <87boercn3c.fsf@li195-236.members.linode.com>


Is that for Async? What if I'm in the synchronous world?  I've been
using Sexp.of_string and Sexp.to_string_hum, is that correct?

/M

David House <dhouse at janestreet.com> writes:

> I'm not sure about the build side, but the usage is very simple. You
> do indeed just say "with sexp" on every type you want to be sexpable,
> in both the .ml and .mli.
>
> You will then have two new functions:
>
> t_of_sexp : Sexp.t -> t
> sexp_of_t : t -> Sexp.t
>
> (Replace "t" with the name of your type throughout.)
>
> You can use these with, e.g., Writer.write_sexp(s), Reader.load_sexp(s).
>
> On Wed, Nov 21, 2012 at 8:31 AM, Malcolm Matalka <mmatalka at gmail.com> wrote:
>> https://github.com/avsm/ocaml-tutorial/tree/master/examples/broker
>>
>> Francois Berenger <francois.berenger.working at gmail.com> writes:
>>
>>> Hello,
>>>
>>> I am looking for some introduction to using s-expressions.
>>>
>>> A small and simple example would be enough
>>> for me to get started:
>>>
>>> I'd like to know:
>>> - what to change in my code to enable them (just add ' with sexp' after
>>> some type declaration?)
>>> - what to change in my build system to enable them (I use oasis)
>>>
>>> Thanks a lot,
>>> Francois.


From dhouse at janestreet.com  Wed Nov 21 09:31:51 2012
From: dhouse at janestreet.com (David House)
Date: Wed, 21 Nov 2012 09:31:51 +0000
Subject: some small example using s-expressions
In-Reply-To: <87sj83cq6q.fsf@li195-236.members.linode.com>
References: <3ba2523f-4ed4-4708-9831-6b4ff3207293@googlegroups.com>
	<87sj83cq6q.fsf@li195-236.members.linode.com>
Message-ID: <CAK=fH+jaZCdSBuG4bEJedTNbmGrUtupaKyYnrm9SDaCYXtZgKA@mail.gmail.com>


I'm not sure about the build side, but the usage is very simple. You
do indeed just say "with sexp" on every type you want to be sexpable,
in both the .ml and .mli.

You will then have two new functions:

t_of_sexp : Sexp.t -> t
sexp_of_t : t -> Sexp.t

(Replace "t" with the name of your type throughout.)

You can use these with, e.g., Writer.write_sexp(s), Reader.load_sexp(s).

On Wed, Nov 21, 2012 at 8:31 AM, Malcolm Matalka <mmatalka at gmail.com> wrote:
> https://github.com/avsm/ocaml-tutorial/tree/master/examples/broker
>
> Francois Berenger <francois.berenger.working at gmail.com> writes:
>
>> Hello,
>>
>> I am looking for some introduction to using s-expressions.
>>
>> A small and simple example would be enough
>> for me to get started:
>>
>> I'd like to know:
>> - what to change in my code to enable them (just add ' with sexp' after
>> some type declaration?)
>> - what to change in my build system to enable them (I use oasis)
>>
>> Thanks a lot,
>> Francois.


From dhouse at janestreet.com  Wed Nov 21 09:45:39 2012
From: dhouse at janestreet.com (David House)
Date: Wed, 21 Nov 2012 09:45:39 +0000
Subject: some small example using s-expressions
In-Reply-To: <87boercn3c.fsf@li195-236.members.linode.com>
References: <3ba2523f-4ed4-4708-9831-6b4ff3207293@googlegroups.com>
	<87sj83cq6q.fsf@li195-236.members.linode.com>
	<CAK=fH+jaZCdSBuG4bEJedTNbmGrUtupaKyYnrm9SDaCYXtZgKA@mail.gmail.com>
	<87boercn3c.fsf@li195-236.members.linode.com>
Message-ID: <CAK=fH+hBwEZpXLTUQ=Vd4uLL0OZCN0wF23mNVzMPhRc_E36QJw@mail.gmail.com>


Sure.

On Wed, Nov 21, 2012 at 9:38 AM, Malcolm Matalka <mmatalka at gmail.com> wrote:
> Is that for Async? What if I'm in the synchronous world?  I've been
> using Sexp.of_string and Sexp.to_string_hum, is that correct?
>
> /M
>
> David House <dhouse at janestreet.com> writes:
>
>> I'm not sure about the build side, but the usage is very simple. You
>> do indeed just say "with sexp" on every type you want to be sexpable,
>> in both the .ml and .mli.
>>
>> You will then have two new functions:
>>
>> t_of_sexp : Sexp.t -> t
>> sexp_of_t : t -> Sexp.t
>>
>> (Replace "t" with the name of your type throughout.)
>>
>> You can use these with, e.g., Writer.write_sexp(s), Reader.load_sexp(s).
>>
>> On Wed, Nov 21, 2012 at 8:31 AM, Malcolm Matalka <mmatalka at gmail.com> wrote:
>>> https://github.com/avsm/ocaml-tutorial/tree/master/examples/broker
>>>
>>> Francois Berenger <francois.berenger.working at gmail.com> writes:
>>>
>>>> Hello,
>>>>
>>>> I am looking for some introduction to using s-expressions.
>>>>
>>>> A small and simple example would be enough
>>>> for me to get started:
>>>>
>>>> I'd like to know:
>>>> - what to change in my code to enable them (just add ' with sexp' after
>>>> some type declaration?)
>>>> - what to change in my build system to enable them (I use oasis)
>>>>
>>>> Thanks a lot,
>>>> Francois.


From agarwal1975 at gmail.com  Wed Nov 21 15:24:02 2012
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Wed, 21 Nov 2012 10:24:02 -0500
Subject: some small example using s-expressions
In-Reply-To: <3ba2523f-4ed4-4708-9831-6b4ff3207293@googlegroups.com>
References: <3ba2523f-4ed4-4708-9831-6b4ff3207293@googlegroups.com>
Message-ID: <CAMu2m2KcOsbvtnoAPff810_d0GF2eV-2=vnnQR84WyjtFMO7WQ@mail.gmail.com>

In _oasis, add sexplib.syntax to BuildDepends.

Make your _tags file like this:

$ cat _tags
# OASIS_START
# OASIS_STOP

<.ml{,i}>: syntax_camlp4o

Then, create some type defs:

$ cat a.ml
type t = A | B of int
with sexp

And similarly add "with sexp" in your .mli files if you want the sexp
converters available in the interface. You'll get extra functions t_of_sexp
and sexp_of_t. Biocaml does this, so you can see that code for an example.

On Wed, Nov 21, 2012 at 3:00 AM, Francois Berenger <
francois.berenger.working at gmail.com> wrote:

> Hello,
>
> I am looking for some introduction to using s-expressions.
>
> A small and simple example would be enough
> for me to get started:
>
> I'd like to know:
> - what to change in my code to enable them (just add ' with sexp' after
> some type declaration?)
> - what to change in my build system to enable them (I use oasis)
>
> Thanks a lot,
> Francois.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121121/10203650/attachment-0001.html>

From francois.berenger.working at gmail.com  Thu Nov 22 00:24:00 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 22 Nov 2012 09:24:00 +0900
Subject: some small example using s-expressions
In-Reply-To: <CAMu2m2KcOsbvtnoAPff810_d0GF2eV-2=vnnQR84WyjtFMO7WQ@mail.gmail.com>
References: <3ba2523f-4ed4-4708-9831-6b4ff3207293@googlegroups.com>
	<CAMu2m2KcOsbvtnoAPff810_d0GF2eV-2=vnnQR84WyjtFMO7WQ@mail.gmail.com>
Message-ID: <CAMQaOgOWoTu5pf94Z1Wd6E7ER5tzCe9jEqQbTmg4XdGu1HxZDA@mail.gmail.com>


Thanks for all the answers!
It helps a lot, really,

My use case will be to have some kind of property file for my project
(as in the Java world) by using s-expressions.

On Thu, Nov 22, 2012 at 12:24 AM, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
> In _oasis, add sexplib.syntax to BuildDepends.
>
> Make your _tags file like this:
>
> $ cat _tags
> # OASIS_START
> # OASIS_STOP
>
> <.ml{,i}>: syntax_camlp4o
>
> Then, create some type defs:
>
> $ cat a.ml
> type t = A | B of int
> with sexp
>
> And similarly add "with sexp" in your .mli files if you want the sexp
> converters available in the interface. You'll get extra functions t_of_sexp
> and sexp_of_t. Biocaml does this, so you can see that code for an example.
>
> On Wed, Nov 21, 2012 at 3:00 AM, Francois Berenger
> <francois.berenger.working at gmail.com> wrote:
>>
>> Hello,
>>
>> I am looking for some introduction to using s-expressions.
>>
>> A small and simple example would be enough
>> for me to get started:
>>
>> I'd like to know:
>> - what to change in my code to enable them (just add ' with sexp' after
>> some type declaration?)
>> - what to change in my build system to enable them (I use oasis)
>>
>> Thanks a lot,
>> Francois.
>>
>


From ocaml-core at googlegroups.com  Fri Nov 23 02:29:15 2012
From: ocaml-core at googlegroups.com (ocaml-core at googlegroups.com)
Date: Fri, 23 Nov 2012 02:29:15 +0000
Subject: Moderator's spam report for ocaml-core@googlegroups.com
Message-ID: <20cf303f6e988fa77004cf205977@google.com>


This message is being sent to you because you are a moderator of the group ocaml-core.

The following suspicious messages were sent to your group, but are being held in your moderation queue because they are classified as likely spam messages.

If you take no action, all the messages below will be discarded automatically as spam.

However, if you see any messages that are not spam below, you may approve them individually by going to:

http://groups.google.com/group/ocaml-core/pendmsg

Please do not mark this notification as spam; this is a service for group moderators. If you do not wish to receive these notifications in the future, you may change your preferences by going to:

http://groups.google.com/group/ocaml-core/manage_post


------- 1 of 2  -------
Subject: Rush!! iPad Cases for only $9.95 save 87% +++
>From: "Kristy Mclean" <hzviwytr at ignitiontechnologies.com>
Date: Nov 20 11:02PM -0800

Today's Deal

Rush!! iPad Cases for only $9.95 save 87%

Purchase Now

Price: $9.95 Value: $79.95

Savings: Save an amazing $70.00

Expires on 1:17pm Sunday 28th November 2012

Deal Details

Fine Print:

Just email us your colours to

Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=5540509541654205595

------- 2 of 2  -------
Subject: Help Jerusalem Fight Terror ! ! !
>From: "Julianne Bowman" <cyyafv at syscon-inc.com>
Date: Nov 22 01:43AM -0800

How Fatima Started Islam

A book like no other on this earth. Not a few cartoons or an infantile movie trailer but 234 page novel which insults Islam like no other. A parody of the always drunk proprietor of "Mohammad's Saloon & Brothel" with his

Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=446044800716414685


For more information about this message, please visit:
https://support.google.com/groups/bin/answer.py?hl=en&answer=47792



From johan.mazel at gmail.com  Mon Nov 26 07:43:29 2012
From: johan.mazel at gmail.com (Johan Mazel)
Date: Sun, 25 Nov 2012 23:43:29 -0800 (PST)
Subject: How to create the IntSet type with core?
In-Reply-To: <CAK=fH+igEs7PpDAuw6XBoVxzMTEDnY0iFeZo+MM3QK-2LZ_=bA@mail.gmail.com>
References: <6c9ce151-b434-4fcc-89c6-83b64fddbfb9@googlegroups.com>
 <CAK=fH+igEs7PpDAuw6XBoVxzMTEDnY0iFeZo+MM3QK-2LZ_=bA@mail.gmail.com>
Message-ID: <d820b4c8-dfda-4576-9523-0cd36e3651c0@googlegroups.com>

I tried to create some submodule as explained in the second paragraph:
"module T = struct
  type t = ... with compare, sexp
  let hash = (* your hash function, maybe Hashtbl.hash *)
end
include Comparable.Make(T)
include Hashable.Make(T)"

I however get some syntax error with "with".
Is there some special tricks involved in terms of compilation 
(preprocessing maybe) ?

Le vendredi 9 novembre 2012 18:11:14 UTC+9, David House a ?crit :
>
> There is already an Int.Set module! :) 
>
> Here is a five-minute guide to the set / map / hashtable setup inside 
> core. I'll use the example of hashtables, but the language readily 
> translates into sets / maps. 
>
> There are two types of hashtables in core. Ones that use polymorphic 
> comparison, and ones that use a specific comparision function that is 
> hopefully more efficient and has non-surprising semantics (we 
> basically think polymorphic comparison, despite its convenience, is 
> too surprising to be an overall good thing). 
>
> The type of hashtables using polymorphic comparison is ('key, 'value) 
> Hashtbl.Poly.t. The type of hashtables using, e.g., int comparison for 
> the keys is 'value Int.Table.t. Given the previous paragraph, you 
> should always try to use Foo.Table when you can. 
>
> When you create a hashtable (e.g. using [create], [of_alist], or 
> [t_of_sexp]), you must use the specific module name. I.e. [let table = 
> Int.Table.create () in]. However, when you already have a hashtable in 
> your hands, and you want to use accessor functions, you should just 
> use Hashtbl.foo, regardless of what comparison function it uses. 
>
> To translate into Maps and Sets: 
>
> 'value Foo.Table.t  ('key,'value) Hashtbl.Poly.t  Hashtbl.foo 
> 'value Foo.Map.t    ('key,'value) Map.Poly.t      Map.foo 
> Foo.Set.t           'element Set.Poly.t           Set.foo 
>
> -- 
>
> If you have your own type and want to make Table, Map and Set 
> submodules, it's really easy: 
>
> module T = struct 
>   type t = ... with compare, sexp 
>   let hash = (* your hash function, maybe Hashtbl.hash *) 
> end 
> include Comparable.Make(T) 
> include Hashable.Make(T) 
>
> Saying "with compare" generates you an efficient comparison function 
> specialised to your type. (Note that all component types need to have 
> comparison functions defined too, whether through "with compare" or 
> through primitives.) The Comparable.Make functor adds in modules to 
> make you satisfy the Comparable.S signature (basically the Set and Map 
> modules, and a few more). The Hashable.Make functor adds in modules to 
> make you satisfy Hashable.S (basically Hashtbl, as well as some others 
> like Hash_set). If you don't want the Hashable stuff, there is no need 
> to define a hash function. (Although Hashtbl.hash is normally not a 
> bad choice.) 
>
> -- 
>
> Here's how this all works under the hood: 
>
> The type of maps is "really" ('key, 'value, 'comparator) Map.t. Maps 
> contain in their values the function that is used for comparing keys, 
> i.e. a function of type 'key -> 'key -> int. But what is this 
> "comparator" thing? 
>
> We can first motivate things by saying: it's a pain to have to type 
> Int.Map.find for int-maps, String.Map.find for string-maps, etc. etc. 
> It'd be nice to have a single type and use Map.find for everything. 
> But this presents a problem because of functions like Map.merge, which 
> takes two maps and combines them. You need to know that the comparison 
> functions are identical, but how can you do this? 
>
> So we have this extra comparator phantom type. Nothing in the actual 
> representation has a type involving 'comparator: it's just for static 
> checking. If you want to have a new comparison function, you must mint 
> a new comparator type. (Including the Comparable signature does this 
> for you.) 
>
> I originally wrote this last section with hashtables in mind, but it 
> appears that hashtables work slightly differently: they just assert 
> that the hashing functions are physically equal inside [merge]; you 
> don't get a compile-time error for something like [Hashtbl.merge 
> (Int.Table.create ()) (String.Table.create ())]. 
>
> On Fri, Nov 9, 2012 at 8:14 AM, Francois Berenger 
> <francois.ber... at gmail.com <javascript:>> wrote: 
> > Hello, 
> > 
> > I'm converting some standard code to use core. 
> > 
> > How do I do this in core: 
> > 
> > module IntSet = 
> >   Set.Make 
> >     (struct 
> >       let compare = Pervasives.compare 
> >       type t = int 
> >     end) 
> > 
> > Thanks a lot, 
> > F. 
> > 
> > PS: yes, I opened Core.Std and did not die from it. ;) 
> > 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121125/f64f8aba/attachment-0001.html>

From philippe.veber at gmail.com  Mon Nov 26 08:57:25 2012
From: philippe.veber at gmail.com (Philippe Veber)
Date: Mon, 26 Nov 2012 09:57:25 +0100
Subject: How to create the IntSet type with core?
In-Reply-To: <d820b4c8-dfda-4576-9523-0cd36e3651c0@googlegroups.com>
References: <6c9ce151-b434-4fcc-89c6-83b64fddbfb9@googlegroups.com>
 <CAK=fH+igEs7PpDAuw6XBoVxzMTEDnY0iFeZo+MM3QK-2LZ_=bA@mail.gmail.com> <d820b4c8-dfda-4576-9523-0cd36e3651c0@googlegroups.com>
Message-ID: <CAOOOohQxuKbLCemHHJ5CXW36ryr36iFK=_NRoOb-bnqpY6twcA@mail.gmail.com>

Hi Johan,

yes, you have to trigger camlp4o during compilation and add the sexp.syntax
and comparelib.syntax packages I guess. How exactly you achieve that
depends on the way you compile your program. With ocamlfind, you'd have
something like

ocamlfind ocamlc -o rien -syntax camlp4o -package sexplib.syntax -package
comparelib.syntax rien.ml

cheers,
  ph.

2012/11/26 Johan Mazel <johan.mazel at gmail.com>

> I tried to create some submodule as explained in the second paragraph:
>
> "module T = struct
>   type t = ... with compare, sexp
>   let hash = (* your hash function, maybe Hashtbl.hash *)
> end
> include Comparable.Make(T)
> include Hashable.Make(T)"
>
> I however get some syntax error with "with".
> Is there some special tricks involved in terms of compilation
> (preprocessing maybe) ?
>
> Le vendredi 9 novembre 2012 18:11:14 UTC+9, David House a ?crit :
>>
>> There is already an Int.Set module! :)
>>
>> Here is a five-minute guide to the set / map / hashtable setup inside
>> core. I'll use the example of hashtables, but the language readily
>> translates into sets / maps.
>>
>> There are two types of hashtables in core. Ones that use polymorphic
>> comparison, and ones that use a specific comparision function that is
>> hopefully more efficient and has non-surprising semantics (we
>> basically think polymorphic comparison, despite its convenience, is
>> too surprising to be an overall good thing).
>>
>> The type of hashtables using polymorphic comparison is ('key, 'value)
>> Hashtbl.Poly.t. The type of hashtables using, e.g., int comparison for
>> the keys is 'value Int.Table.t. Given the previous paragraph, you
>> should always try to use Foo.Table when you can.
>>
>> When you create a hashtable (e.g. using [create], [of_alist], or
>> [t_of_sexp]), you must use the specific module name. I.e. [let table =
>> Int.Table.create () in]. However, when you already have a hashtable in
>> your hands, and you want to use accessor functions, you should just
>> use Hashtbl.foo, regardless of what comparison function it uses.
>>
>> To translate into Maps and Sets:
>>
>> 'value Foo.Table.t  ('key,'value) Hashtbl.Poly.t  Hashtbl.foo
>> 'value Foo.Map.t    ('key,'value) Map.Poly.t      Map.foo
>> Foo.Set.t           'element Set.Poly.t           Set.foo
>>
>> --
>>
>> If you have your own type and want to make Table, Map and Set
>> submodules, it's really easy:
>>
>> module T = struct
>>   type t = ... with compare, sexp
>>   let hash = (* your hash function, maybe Hashtbl.hash *)
>> end
>> include Comparable.Make(T)
>> include Hashable.Make(T)
>>
>> Saying "with compare" generates you an efficient comparison function
>> specialised to your type. (Note that all component types need to have
>> comparison functions defined too, whether through "with compare" or
>> through primitives.) The Comparable.Make functor adds in modules to
>> make you satisfy the Comparable.S signature (basically the Set and Map
>> modules, and a few more). The Hashable.Make functor adds in modules to
>> make you satisfy Hashable.S (basically Hashtbl, as well as some others
>> like Hash_set). If you don't want the Hashable stuff, there is no need
>> to define a hash function. (Although Hashtbl.hash is normally not a
>> bad choice.)
>>
>> --
>>
>> Here's how this all works under the hood:
>>
>> The type of maps is "really" ('key, 'value, 'comparator) Map.t. Maps
>> contain in their values the function that is used for comparing keys,
>> i.e. a function of type 'key -> 'key -> int. But what is this
>> "comparator" thing?
>>
>> We can first motivate things by saying: it's a pain to have to type
>> Int.Map.find for int-maps, String.Map.find for string-maps, etc. etc.
>> It'd be nice to have a single type and use Map.find for everything.
>> But this presents a problem because of functions like Map.merge, which
>> takes two maps and combines them. You need to know that the comparison
>> functions are identical, but how can you do this?
>>
>> So we have this extra comparator phantom type. Nothing in the actual
>> representation has a type involving 'comparator: it's just for static
>> checking. If you want to have a new comparison function, you must mint
>> a new comparator type. (Including the Comparable signature does this
>> for you.)
>>
>> I originally wrote this last section with hashtables in mind, but it
>> appears that hashtables work slightly differently: they just assert
>> that the hashing functions are physically equal inside [merge]; you
>> don't get a compile-time error for something like [Hashtbl.merge
>> (Int.Table.create ()) (String.Table.create ())].
>>
>> On Fri, Nov 9, 2012 at 8:14 AM, Francois Berenger
>> <francois.ber...@**gmail.com> wrote:
>> > Hello,
>> >
>> > I'm converting some standard code to use core.
>> >
>> > How do I do this in core:
>> >
>> > module IntSet =
>> >   Set.Make
>> >     (struct
>> >       let compare = Pervasives.compare
>> >       type t = int
>> >     end)
>> >
>> > Thanks a lot,
>> > F.
>> >
>> > PS: yes, I opened Core.Std and did not die from it. ;)
>> >
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121126/1a3d1db3/attachment-0001.html>

From mmatalka at gmail.com  Tue Nov 27 20:27:16 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Tue, 27 Nov 2012 15:27:16 -0500
Subject: Result monad
Message-ID: <87wqx6vljv.fsf@li195-236.members.linode.com>


I've been playing with writing code that can fail in a lot of ways and
using Result.Monad_infix to make it more readable.  I've found that this
only really works well if all of my functions that return a Result.t
have polymorphic variants on the Error side.  Is this the suggested best
practice as well?  I'm considering just mandating all my code that can
return a Result.t does this.

Thanks,
/Malcolm


From nlinger at janestreet.com  Tue Nov 27 20:34:35 2012
From: nlinger at janestreet.com (Nathan Linger)
Date: Tue, 27 Nov 2012 15:34:35 -0500
Subject: Result monad
In-Reply-To: <87wqx6vljv.fsf@li195-236.members.linode.com>
References: <87wqx6vljv.fsf@li195-236.members.linode.com>
Message-ID: <CAB1twEaFWMJ5LpFE75B=wT9oNa4f8rQ8sLp3fJ6XfhUoGXAwEw@mail.gmail.com>


We've found that the pattern you mention works well in cases where you
want to recover from errors or handle distinct error cases in
different ways.

We've also found that often one merely wants to log errors and not
really handle them.  For this use case, Error.t is a good choice for
the error type component of Result.t.  In fact this is so common we
now use [type 'a Or_error.t = ('a, Error.t) Result.t] for many (most?)
Result-returning functions.

On Tue, Nov 27, 2012 at 3:27 PM, Malcolm Matalka <mmatalka at gmail.com> wrote:
> I've been playing with writing code that can fail in a lot of ways and
> using Result.Monad_infix to make it more readable.  I've found that this
> only really works well if all of my functions that return a Result.t
> have polymorphic variants on the Error side.  Is this the suggested best
> practice as well?  I'm considering just mandating all my code that can
> return a Result.t does this.
>
> Thanks,
> /Malcolm


From sebastien.mondet at gmail.com  Tue Nov 27 20:50:10 2012
From: sebastien.mondet at gmail.com (Sebastien Mondet)
Date: Tue, 27 Nov 2012 15:50:10 -0500
Subject: Result monad
In-Reply-To: <87wqx6vljv.fsf@li195-236.members.linode.com>
References: <87wqx6vljv.fsf@li195-236.members.linode.com>
Message-ID: <CALScVYmE5-h0PAWrCLmax0j9nRCcNMV=bV-Z7=9Hg+RV_VjDGw@mail.gmail.com>

Hi

We've been doing that for a few months (e.g.
https://github.com/biocaml/biocaml/blob/master/src/lib/biocaml_fastq.mli )


In a sense it's great (and we plan to keep doing this):
- polymorphic variants force the exhaustiveness of pattern matching (so you
do not forget error cases)
- (infered) function types fully document anything that may happen inside a
function

There are a few annoyances to keep in mind:
- the error types must remain open so that ocaml can merge them ( [> ... ])
  * sometimes this gets in the way, and you spend time type-hacking only
for errors that never happen
     (e.g. if you want to put a function in a record/object you have then
to play with "type 'error t =  { x : ... -> (..., .... as 'error) Result.t
}" etc.)
  * sometimes it's difficult to "reopen" polymorphic variant types
- pattern matching does not know how to remove cases:
  match error with
  | `db_error e -> .... return ()
  |  other_error -> error other_error (* without annotations, [> `db_error
... ] will remain part of the total error type *)


Cheers
Seb







On Tue, Nov 27, 2012 at 3:27 PM, Malcolm Matalka <mmatalka at gmail.com> wrote:

> I've been playing with writing code that can fail in a lot of ways and
> using Result.Monad_infix to make it more readable.  I've found that this
> only really works well if all of my functions that return a Result.t
> have polymorphic variants on the Error side.  Is this the suggested best
> practice as well?  I'm considering just mandating all my code that can
> return a Result.t does this.
>
> Thanks,
> /Malcolm
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121127/fea364e4/attachment-0001.html>

From mmatalka at gmail.com  Tue Nov 27 21:11:59 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Tue, 27 Nov 2012 16:11:59 -0500
Subject: Result monad
In-Reply-To: <CALScVYmE5-h0PAWrCLmax0j9nRCcNMV=bV-Z7=9Hg+RV_VjDGw@mail.gmail.com>
	(Sebastien Mondet's message of "Tue, 27 Nov 2012 15:50:10 -0500")
References: <87wqx6vljv.fsf@li195-236.members.linode.com>
	<CALScVYmE5-h0PAWrCLmax0j9nRCcNMV=bV-Z7=9Hg+RV_VjDGw@mail.gmail.com>
Message-ID: <87sj7uvjhc.fsf@li195-236.members.linode.com>


Thanks for pointing that out, I actually ran into it this weekend and
didn't get what was going on.  I ended up just handling every failure in
all cases, which is excessive but not so bad in this case.

Sebastien Mondet <sebastien.mondet at gmail.com> writes:

> Hi
>
> We've been doing that for a few months (e.g.
> https://github.com/biocaml/biocaml/blob/master/src/lib/biocaml_fastq.mli )
>
>
> In a sense it's great (and we plan to keep doing this):
> - polymorphic variants force the exhaustiveness of pattern matching (so you
> do not forget error cases)
> - (infered) function types fully document anything that may happen inside a
> function
>
> There are a few annoyances to keep in mind:
> - the error types must remain open so that ocaml can merge them ( [> ... ])
>   * sometimes this gets in the way, and you spend time type-hacking only
> for errors that never happen
>      (e.g. if you want to put a function in a record/object you have then
> to play with "type 'error t =  { x : ... -> (..., .... as 'error) Result.t
> }" etc.)
>   * sometimes it's difficult to "reopen" polymorphic variant types
> - pattern matching does not know how to remove cases:
>   match error with
>   | `db_error e -> .... return ()
>   |  other_error -> error other_error (* without annotations, [> `db_error
> ... ] will remain part of the total error type *)
>
>
> Cheers
> Seb
>
>
>
>
>
>
>
> On Tue, Nov 27, 2012 at 3:27 PM, Malcolm Matalka <mmatalka at gmail.com> wrote:
>
>> I've been playing with writing code that can fail in a lot of ways and
>> using Result.Monad_infix to make it more readable.  I've found that this
>> only really works well if all of my functions that return a Result.t
>> have polymorphic variants on the Error side.  Is this the suggested best
>> practice as well?  I'm considering just mandating all my code that can
>> return a Result.t does this.
>>
>> Thanks,
>> /Malcolm
>>


From yminsky at janestreet.com  Tue Nov 27 22:52:54 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Tue, 27 Nov 2012 17:52:54 -0500
Subject: Result monad
In-Reply-To: <87sj7uvjhc.fsf@li195-236.members.linode.com>
References: <87wqx6vljv.fsf@li195-236.members.linode.com>
	<CALScVYmE5-h0PAWrCLmax0j9nRCcNMV=bV-Z7=9Hg+RV_VjDGw@mail.gmail.com>
	<87sj7uvjhc.fsf@li195-236.members.linode.com>
Message-ID: <CACLX4jQX9a2ypZfSFjQAjYd99zwsS6v4_82gSD_CRc=WsQyw6w@mail.gmail.com>


We actually tend to a style where we use a ('a,Error.t) Result.t
(also known as an 'a Or_error.t), where an Error.t is essentially a
lazily constructed s-expression.  Obviously, once you do this, you
can't programmatically distinguish between different errors
effectively, but we like it better than the polymorphic variant trick
that Sebastien mentions, because of the god-awful type error messages
that leads to.

y

On Tue, Nov 27, 2012 at 4:11 PM, Malcolm Matalka <mmatalka at gmail.com> wrote:
> Thanks for pointing that out, I actually ran into it this weekend and
> didn't get what was going on.  I ended up just handling every failure in
> all cases, which is excessive but not so bad in this case.
>
> Sebastien Mondet <sebastien.mondet at gmail.com> writes:
>
>> Hi
>>
>> We've been doing that for a few months (e.g.
>> https://github.com/biocaml/biocaml/blob/master/src/lib/biocaml_fastq.mli )
>>
>>
>> In a sense it's great (and we plan to keep doing this):
>> - polymorphic variants force the exhaustiveness of pattern matching (so you
>> do not forget error cases)
>> - (infered) function types fully document anything that may happen inside a
>> function
>>
>> There are a few annoyances to keep in mind:
>> - the error types must remain open so that ocaml can merge them ( [> ... ])
>>   * sometimes this gets in the way, and you spend time type-hacking only
>> for errors that never happen
>>      (e.g. if you want to put a function in a record/object you have then
>> to play with "type 'error t =  { x : ... -> (..., .... as 'error) Result.t
>> }" etc.)
>>   * sometimes it's difficult to "reopen" polymorphic variant types
>> - pattern matching does not know how to remove cases:
>>   match error with
>>   | `db_error e -> .... return ()
>>   |  other_error -> error other_error (* without annotations, [> `db_error
>> ... ] will remain part of the total error type *)
>>
>>
>> Cheers
>> Seb
>>
>>
>>
>>
>>
>>
>>
>> On Tue, Nov 27, 2012 at 3:27 PM, Malcolm Matalka <mmatalka at gmail.com> wrote:
>>
>>> I've been playing with writing code that can fail in a lot of ways and
>>> using Result.Monad_infix to make it more readable.  I've found that this
>>> only really works well if all of my functions that return a Result.t
>>> have polymorphic variants on the Error side.  Is this the suggested best
>>> practice as well?  I'm considering just mandating all my code that can
>>> return a Result.t does this.
>>>
>>> Thanks,
>>> /Malcolm
>>>


From mmatalka at gmail.com  Fri Nov 30 11:07:02 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Fri, 30 Nov 2012 06:07:02 -0500
Subject: Will Incremental be open sourced?
Message-ID: <87a9tzqrhl.fsf@li195-236.members.linode.com>


I noticed Yaron gave a talk about Incremental at CMU.  Sounds pretty
great, I've been dreaming about building great ncurses-based
applications in Ocaml since CUFP :)

Is there any plan to open source Incremental?

Thanks,
/Malcolm


From yminsky at janestreet.com  Fri Nov 30 11:38:25 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Fri, 30 Nov 2012 06:38:25 -0500
Subject: Will Incremental be open sourced?
In-Reply-To: <590A9262-7673-4877-8997-A379FBCB9A46@recoil.org>
References: <87a9tzqrhl.fsf@li195-236.members.linode.com>
	<590A9262-7673-4877-8997-A379FBCB9A46@recoil.org>
Message-ID: <CACLX4jRNZvoM4YuzjHtUyUBUp6ELBat5C6tMFfqgdOpZCaQPJg@mail.gmail.com>


Sorry.  At present, we have no plans to open-source incremental.

We do have some other libraries we're thinking about getting cleaned
up for release, though, including a library for coordinating parallel
computations and a library for managing ocaml plug-in libraries...

y

On Fri, Nov 30, 2012 at 6:11 AM, Anil Madhavapeddy <anil at recoil.org> wrote:
> A practical FRP library would be a great thing to have alongside Async!
>
> -anil
>
> On 30 Nov 2012, at 11:07, Malcolm Matalka <mmatalka at gmail.com> wrote:
>
>> I noticed Yaron gave a talk about Incremental at CMU.  Sounds pretty
>> great, I've been dreaming about building great ncurses-based
>> applications in Ocaml since CUFP :)
>>
>> Is there any plan to open source Incremental?
>>
>> Thanks,
>> /Malcolm
>>
>


From mmatalka at gmail.com  Fri Nov 30 11:45:32 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Fri, 30 Nov 2012 06:45:32 -0500
Subject: Will Incremental be open sourced?
In-Reply-To: <CACLX4jRNZvoM4YuzjHtUyUBUp6ELBat5C6tMFfqgdOpZCaQPJg@mail.gmail.com>
	(Yaron Minsky's message of "Fri, 30 Nov 2012 06:38:25 -0500")
References: <87a9tzqrhl.fsf@li195-236.members.linode.com>
	<590A9262-7673-4877-8997-A379FBCB9A46@recoil.org>
	<CACLX4jRNZvoM4YuzjHtUyUBUp6ELBat5C6tMFfqgdOpZCaQPJg@mail.gmail.com>
Message-ID: <87txs7pb4z.fsf@li195-236.members.linode.com>


Damn you for teasing us! But I really appreciate all that Jane St has
given to the community so I can't complain too much :)

Thanks,
/M

Yaron Minsky <yminsky at janestreet.com> writes:

> Sorry.  At present, we have no plans to open-source incremental.
>
> We do have some other libraries we're thinking about getting cleaned
> up for release, though, including a library for coordinating parallel
> computations and a library for managing ocaml plug-in libraries...
>
> y
>
> On Fri, Nov 30, 2012 at 6:11 AM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> A practical FRP library would be a great thing to have alongside Async!
>>
>> -anil
>>
>> On 30 Nov 2012, at 11:07, Malcolm Matalka <mmatalka at gmail.com> wrote:
>>
>>> I noticed Yaron gave a talk about Incremental at CMU.  Sounds pretty
>>> great, I've been dreaming about building great ncurses-based
>>> applications in Ocaml since CUFP :)
>>>
>>> Is there any plan to open source Incremental?
>>>
>>> Thanks,
>>> /Malcolm
>>>
>>


From markus.mottl at gmail.com  Fri Nov 30 14:59:29 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Fri, 30 Nov 2012 09:59:29 -0500
Subject: Will Incremental be open sourced?
In-Reply-To: <590A9262-7673-4877-8997-A379FBCB9A46@recoil.org>
References: <87a9tzqrhl.fsf@li195-236.members.linode.com>
	<590A9262-7673-4877-8997-A379FBCB9A46@recoil.org>
Message-ID: <CAP_800owuBezaMVQGcq97Jbw0bXjLe6hLbmOXvim-a=YU=Hwew@mail.gmail.com>


A few other general things coming to my mind that the community might like:

  * OMake build rules
  * Async curses library
  * LZO library

I'm sure there is more :-)

Regards,
Markus

On Fri, Nov 30, 2012 at 6:11 AM, Anil Madhavapeddy <anil at recoil.org> wrote:
> A practical FRP library would be a great thing to have alongside Async!
>
> -anil
>
> On 30 Nov 2012, at 11:07, Malcolm Matalka <mmatalka at gmail.com> wrote:
>
>> I noticed Yaron gave a talk about Incremental at CMU.  Sounds pretty
>> great, I've been dreaming about building great ncurses-based
>> applications in Ocaml since CUFP :)
>>
>> Is there any plan to open source Incremental?
>>
>> Thanks,
>> /Malcolm
>>
>



-- 
Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com


From mmatalka at gmail.com  Fri Nov 30 15:51:46 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Fri, 30 Nov 2012 10:51:46 -0500
Subject: Will Incremental be open sourced?
In-Reply-To: <14772E20-3F98-44F2-9CCB-19A8CC66F2B5@recoil.org> (Anil
	Madhavapeddy's message of "Fri, 30 Nov 2012 15:01:12 +0000")
References: <87a9tzqrhl.fsf@li195-236.members.linode.com>
	<590A9262-7673-4877-8997-A379FBCB9A46@recoil.org>
	<CAP_800owuBezaMVQGcq97Jbw0bXjLe6hLbmOXvim-a=YU=Hwew@mail.gmail.com>
	<14772E20-3F98-44F2-9CCB-19A8CC66F2B5@recoil.org>
Message-ID: <87hao7ozql.fsf@li195-236.members.linode.com>


Hear hear!


Anil Madhavapeddy <anil at recoil.org> writes:

> On 30 Nov 2012, at 14:59, Markus Mottl <markus.mottl at gmail.com> wrote:
>
>> A few other general things coming to my mind that the community might like:
>> 
>>  * OMake build rules
>>  * Async curses library
>
> This one gets me disproportionately excited.  But then, Jeremie's zed and
> lambda-term libraries are also brilliant (but for Lwt). It's what is used
> to drive the interactive utop experience.
>
> More ncurses, less GUI!
>
> -anil
>
>
>>  * LZO library
>> 
>> I'm sure there is more :-)
>> 
>> Regards,
>> Markus
>> 
>> On Fri, Nov 30, 2012 at 6:11 AM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>> A practical FRP library would be a great thing to have alongside Async!
>>> 
>>> -anil
>>> 
>>> On 30 Nov 2012, at 11:07, Malcolm Matalka <mmatalka at gmail.com> wrote:
>>> 
>>>> I noticed Yaron gave a talk about Incremental at CMU.  Sounds pretty
>>>> great, I've been dreaming about building great ncurses-based
>>>> applications in Ocaml since CUFP :)
>>>> 
>>>> Is there any plan to open source Incremental?
>>>> 
>>>> Thanks,
>>>> /Malcolm
>>>> 
>>> 
>> 
>> 
>> 
>> -- 
>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>> 


From anil at recoil.org  Fri Nov 30 11:11:46 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Fri, 30 Nov 2012 11:11:46 +0000
Subject: Will Incremental be open sourced?
In-Reply-To: <87a9tzqrhl.fsf@li195-236.members.linode.com>
References: <87a9tzqrhl.fsf@li195-236.members.linode.com>
Message-ID: <590A9262-7673-4877-8997-A379FBCB9A46@recoil.org>


A practical FRP library would be a great thing to have alongside Async!

-anil

On 30 Nov 2012, at 11:07, Malcolm Matalka <mmatalka at gmail.com> wrote:

> I noticed Yaron gave a talk about Incremental at CMU.  Sounds pretty
> great, I've been dreaming about building great ncurses-based
> applications in Ocaml since CUFP :)
> 
> Is there any plan to open source Incremental?
> 
> Thanks,
> /Malcolm
> 



From anil at recoil.org  Fri Nov 30 15:01:12 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Fri, 30 Nov 2012 15:01:12 +0000
Subject: Will Incremental be open sourced?
In-Reply-To: <CAP_800owuBezaMVQGcq97Jbw0bXjLe6hLbmOXvim-a=YU=Hwew@mail.gmail.com>
References: <87a9tzqrhl.fsf@li195-236.members.linode.com> <590A9262-7673-4877-8997-A379FBCB9A46@recoil.org> <CAP_800owuBezaMVQGcq97Jbw0bXjLe6hLbmOXvim-a=YU=Hwew@mail.gmail.com>
Message-ID: <14772E20-3F98-44F2-9CCB-19A8CC66F2B5@recoil.org>


On 30 Nov 2012, at 14:59, Markus Mottl <markus.mottl at gmail.com> wrote:

> A few other general things coming to my mind that the community might like:
> 
>  * OMake build rules
>  * Async curses library

This one gets me disproportionately excited.  But then, Jeremie's zed and
lambda-term libraries are also brilliant (but for Lwt). It's what is used
to drive the interactive utop experience.

More ncurses, less GUI!

-anil


>  * LZO library
> 
> I'm sure there is more :-)
> 
> Regards,
> Markus
> 
> On Fri, Nov 30, 2012 at 6:11 AM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> A practical FRP library would be a great thing to have alongside Async!
>> 
>> -anil
>> 
>> On 30 Nov 2012, at 11:07, Malcolm Matalka <mmatalka at gmail.com> wrote:
>> 
>>> I noticed Yaron gave a talk about Incremental at CMU.  Sounds pretty
>>> great, I've been dreaming about building great ncurses-based
>>> applications in Ocaml since CUFP :)
>>> 
>>> Is there any plan to open source Incremental?
>>> 
>>> Thanks,
>>> /Malcolm
>>> 
>> 
> 
> 
> 
> -- 
> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
> 



From yminsky at janestreet.com  Fri Nov 30 22:06:07 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Fri, 30 Nov 2012 17:06:07 -0500
Subject: Will Incremental be open sourced?
In-Reply-To: <87hao7ozql.fsf@li195-236.members.linode.com>
References: <87a9tzqrhl.fsf@li195-236.members.linode.com>
	<590A9262-7673-4877-8997-A379FBCB9A46@recoil.org>
	<CAP_800owuBezaMVQGcq97Jbw0bXjLe6hLbmOXvim-a=YU=Hwew@mail.gmail.com>
	<14772E20-3F98-44F2-9CCB-19A8CC66F2B5@recoil.org>
	<87hao7ozql.fsf@li195-236.members.linode.com>
Message-ID: <CACLX4jQJ=-F36b6ZxmP6AO50ucZvCb3MkF1Luba37C28EYyuRA@mail.gmail.com>


Reasonable suggestions one and all.  The main barrier is time to make
these things ready for an external release.  Actually, real work has
already been done on externalizing the omake rules, though I'm not
sure where that is now.  The curses library would really be a good
idea.  Just need to get someone inside of JS to volunteer to do the
work...

y

On Fri, Nov 30, 2012 at 10:51 AM, Malcolm Matalka <mmatalka at gmail.com> wrote:
> Hear hear!
>
>
> Anil Madhavapeddy <anil at recoil.org> writes:
>
>> On 30 Nov 2012, at 14:59, Markus Mottl <markus.mottl at gmail.com> wrote:
>>
>>> A few other general things coming to my mind that the community might like:
>>>
>>>  * OMake build rules
>>>  * Async curses library
>>
>> This one gets me disproportionately excited.  But then, Jeremie's zed and
>> lambda-term libraries are also brilliant (but for Lwt). It's what is used
>> to drive the interactive utop experience.
>>
>> More ncurses, less GUI!
>>
>> -anil
>>
>>
>>>  * LZO library
>>>
>>> I'm sure there is more :-)
>>>
>>> Regards,
>>> Markus
>>>
>>> On Fri, Nov 30, 2012 at 6:11 AM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>>> A practical FRP library would be a great thing to have alongside Async!
>>>>
>>>> -anil
>>>>
>>>> On 30 Nov 2012, at 11:07, Malcolm Matalka <mmatalka at gmail.com> wrote:
>>>>
>>>>> I noticed Yaron gave a talk about Incremental at CMU.  Sounds pretty
>>>>> great, I've been dreaming about building great ncurses-based
>>>>> applications in Ocaml since CUFP :)
>>>>>
>>>>> Is there any plan to open source Incremental?
>>>>>
>>>>> Thanks,
>>>>> /Malcolm
>>>>>
>>>>
>>>
>>>
>>>
>>> --
>>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>>>


From mmatalka at gmail.com  Fri Nov 30 22:21:25 2012
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Fri, 30 Nov 2012 23:21:25 +0100
Subject: Will Incremental be open sourced?
In-Reply-To: <CACLX4jQJ=-F36b6ZxmP6AO50ucZvCb3MkF1Luba37C28EYyuRA@mail.gmail.com>
References: <87a9tzqrhl.fsf@li195-236.members.linode.com>
	<590A9262-7673-4877-8997-A379FBCB9A46@recoil.org>
	<CAP_800owuBezaMVQGcq97Jbw0bXjLe6hLbmOXvim-a=YU=Hwew@mail.gmail.com>
	<14772E20-3F98-44F2-9CCB-19A8CC66F2B5@recoil.org>
	<87hao7ozql.fsf@li195-236.members.linode.com>
	<CACLX4jQJ=-F36b6ZxmP6AO50ucZvCb3MkF1Luba37C28EYyuRA@mail.gmail.com>
Message-ID: <CAKziXDXdRoC_Xv5bKi=g9Fq0bdBCRj0SFz-soWNJj_k+-g=SjA@mail.gmail.com>

Would it be practical for JS to hire someone part time with an NDA who just
does to grunt work for open sourcing things?  I realize that's a lot to ask
but tossing it out there.

/M
 On Nov 30, 2012 11:07 PM, "Yaron Minsky" <yminsky at janestreet.com> wrote:

> Reasonable suggestions one and all.  The main barrier is time to make
> these things ready for an external release.  Actually, real work has
> already been done on externalizing the omake rules, though I'm not
> sure where that is now.  The curses library would really be a good
> idea.  Just need to get someone inside of JS to volunteer to do the
> work...
>
> y
>
> On Fri, Nov 30, 2012 at 10:51 AM, Malcolm Matalka <mmatalka at gmail.com>
> wrote:
> > Hear hear!
> >
> >
> > Anil Madhavapeddy <anil at recoil.org> writes:
> >
> >> On 30 Nov 2012, at 14:59, Markus Mottl <markus.mottl at gmail.com> wrote:
> >>
> >>> A few other general things coming to my mind that the community might
> like:
> >>>
> >>>  * OMake build rules
> >>>  * Async curses library
> >>
> >> This one gets me disproportionately excited.  But then, Jeremie's zed
> and
> >> lambda-term libraries are also brilliant (but for Lwt). It's what is
> used
> >> to drive the interactive utop experience.
> >>
> >> More ncurses, less GUI!
> >>
> >> -anil
> >>
> >>
> >>>  * LZO library
> >>>
> >>> I'm sure there is more :-)
> >>>
> >>> Regards,
> >>> Markus
> >>>
> >>> On Fri, Nov 30, 2012 at 6:11 AM, Anil Madhavapeddy <anil at recoil.org>
> wrote:
> >>>> A practical FRP library would be a great thing to have alongside
> Async!
> >>>>
> >>>> -anil
> >>>>
> >>>> On 30 Nov 2012, at 11:07, Malcolm Matalka <mmatalka at gmail.com> wrote:
> >>>>
> >>>>> I noticed Yaron gave a talk about Incremental at CMU.  Sounds pretty
> >>>>> great, I've been dreaming about building great ncurses-based
> >>>>> applications in Ocaml since CUFP :)
> >>>>>
> >>>>> Is there any plan to open source Incremental?
> >>>>>
> >>>>> Thanks,
> >>>>> /Malcolm
> >>>>>
> >>>>
> >>>
> >>>
> >>>
> >>> --
> >>> Markus Mottl        http://www.ocaml.info
> markus.mottl at gmail.com
> >>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20121130/24c90d8b/attachment-0001.html>

