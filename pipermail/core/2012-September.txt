From anil at recoil.org  Sat Sep  1 02:42:38 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Fri, 31 Aug 2012 18:42:38 -0700
Subject: SSL bindings for Async?
Message-ID: <E12E8E41-38A7-4A60-BF08-B0F2E50BD031@recoil.org>


Are there any SSL bindings for Async at present?  I've been hacking on a Github API (https://github.com/avsm/ocaml-github) that uses Cohttp, and would like to functorise it over Async as well as Lwt, and this is the missing link.

-anil

From orbitz at gmail.com  Sun Sep  2 18:14:16 2012
From: orbitz at gmail.com (orbitz)
Date: Sun, 2 Sep 2012 19:14:16 +0200
Subject: Core on a Mac
In-Reply-To: <96D17667-DE37-4116-85FB-583F61D1B7C7@recoil.org>
References: <CADy1MavvzhL3+Q2WPV+4u1xcDmNcEUSCTvUMUu=A8SXPb96Nxg@mail.gmail.com>
	<027F8960-82EA-432D-884E-4E900389088F@recoil.org>
	<CAMu2m2LezwGjxo9v6ZV2JPdN58L6oPeRWno7K_5OA2e88pPpjQ@mail.gmail.com>
	<96D17667-DE37-4116-85FB-583F61D1B7C7@recoil.org>
Message-ID: <CAAHaHtnmn_yHBZkir2EsvaSaJoSH-1bTo8FV+uEwpL=N=KZNpg@mail.gmail.com>

I install core via odb which works great.  The only problem I have run
into, so far, is Unix.create_process segfaults the forked process.  I'm not
sure why.  create_process appears to be an external C function in Core,
although I'm unsure what it does above the standard Unix.create_process.  I
got around this by implementing my own wrapper of the standard
Unix.create_process.

/M

On Sat, Sep 1, 2012 at 12:18 AM, Anil Madhavapeddy <anil at recoil.org> wrote:

> The Homebrew OCaml includes 10.8-specific fixes [1] too, which cause
> sporadic crashes otherwise with exception backtraces in particular.  And
> once OPAM is bootstrapped, it supports multiple local development
> environments via `opam switch`.  This is assuming its solver isn't going
> off and upgrading everything, which Thomas has mostly fixed now :)
>
> [1] http://caml.inria.fr/mantis/view.php?id=5700
>
> -a
>
> On 31 Aug 2012, at 15:14, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
>
> I install core from the release tarball on my OS X 10.7.4 Mac without
> problems. It's on top of a base installation of ocaml, findlib, etc. from
> godi.
>
> On Fri, Aug 31, 2012 at 5:51 PM, Anil Madhavapeddy <anil at recoil.org>wrote:
>
>> On 31 Aug 2012, at 14:48, David House <dmhouse at gmail.com> wrote:
>>
>> > I'm interested in getting core working on my Mac. Has anyone tried
>> > this, and how well does it work?
>>
>>
>> - Install Homebrew from http://github.com/mxcl/homebrew
>> - $ brew install ocaml
>> - $ brew tap mirage/ocaml      # hook in custom ocaml packages
>> - $ brew install opam --HEAD   # get the very latest OPAM
>> - $ opam install core async
>> - $ eval `opam config -env`    # import the right PATH
>>
>> Some of these steps will disappear in a bit (e.g. the tap is only
>> required until a more stable OPAM appears, which will hopefully be
>> before ICFP in a couple of weeks).
>>
>> Note that Homebrew just updated to ocaml-4.00.0, so hopefully Core
>> works with it too.
>>
>> -anil
>>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120902/971ea42d/attachment.html>

From anil at recoil.org  Mon Sep  3 21:58:22 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Mon, 3 Sep 2012 13:58:22 -0700
Subject: SSL bindings for Async?
In-Reply-To: <CACLX4jQS0mhy9_M+hawa=YjDm4fMnGuBSB47=3y9RTAc+mp8mg@mail.gmail.com>
References: <E12E8E41-38A7-4A60-BF08-B0F2E50BD031@recoil.org> <CACLX4jQS0mhy9_M+hawa=YjDm4fMnGuBSB47=3y9RTAc+mp8mg@mail.gmail.com>
Message-ID: <B62F5928-2072-4A62-85C9-534229A4BA48@recoil.org>


I'll take a shot at writing an Async wrapper using ocaml-ssl (which are the same bindings used by Lwt_ssl, so should be stable enough)

-anil

On 3 Sep 2012, at 13:56, Yaron Minsky <yminsky at janestreet.com> wrote:

> None I am aware of.  We don't have anything internally.
> 
> On Fri, Aug 31, 2012 at 9:42 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> Are there any SSL bindings for Async at present?  I've been hacking on a Github API (https://github.com/avsm/ocaml-github) that uses Cohttp, and would like to functorise it over Async as well as Lwt, and this is the missing link.
>> 
>> -anil
> 



From yminsky at janestreet.com  Mon Sep  3 21:56:39 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Mon, 3 Sep 2012 16:56:39 -0400
Subject: SSL bindings for Async?
In-Reply-To: <E12E8E41-38A7-4A60-BF08-B0F2E50BD031@recoil.org>
References: <E12E8E41-38A7-4A60-BF08-B0F2E50BD031@recoil.org>
Message-ID: <CACLX4jQS0mhy9_M+hawa=YjDm4fMnGuBSB47=3y9RTAc+mp8mg@mail.gmail.com>


None I am aware of.  We don't have anything internally.

On Fri, Aug 31, 2012 at 9:42 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> Are there any SSL bindings for Async at present?  I've been hacking on a Github API (https://github.com/avsm/ocaml-github) that uses Cohttp, and would like to functorise it over Async as well as Lwt, and this is the missing link.
>
> -anil


From yminsky at janestreet.com  Mon Sep  3 21:58:22 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Mon, 3 Sep 2012 16:58:22 -0400
Subject: Core on a Mac
In-Reply-To: <96D17667-DE37-4116-85FB-583F61D1B7C7@recoil.org>
References: <CADy1MavvzhL3+Q2WPV+4u1xcDmNcEUSCTvUMUu=A8SXPb96Nxg@mail.gmail.com>
	<027F8960-82EA-432D-884E-4E900389088F@recoil.org>
	<CAMu2m2LezwGjxo9v6ZV2JPdN58L6oPeRWno7K_5OA2e88pPpjQ@mail.gmail.com>
	<96D17667-DE37-4116-85FB-583F61D1B7C7@recoil.org>
Message-ID: <CACLX4jR9rC5BNAqdsd5KENHYRf5XzgYn-fk5hb_BEcLC+59V_A@mail.gmail.com>


I've also been using opam, and it's been awesome.  It's improving
quickly, it has lots of useful features, and it does a good job of
picking the versions to install.  (It uses a SAT-solver for picking a
compatible set of version numbers.)  It's still young, but given that
it's already pretty stable.

y

On Fri, Aug 31, 2012 at 6:18 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> The Homebrew OCaml includes 10.8-specific fixes [1] too, which cause
> sporadic crashes otherwise with exception backtraces in particular.  And
> once OPAM is bootstrapped, it supports multiple local development
> environments via `opam switch`.  This is assuming its solver isn't going off
> and upgrading everything, which Thomas has mostly fixed now :)
>
> [1] http://caml.inria.fr/mantis/view.php?id=5700
>
> -a
>
> On 31 Aug 2012, at 15:14, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
>
> I install core from the release tarball on my OS X 10.7.4 Mac without
> problems. It's on top of a base installation of ocaml, findlib, etc. from
> godi.
>
> On Fri, Aug 31, 2012 at 5:51 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>
>> On 31 Aug 2012, at 14:48, David House <dmhouse at gmail.com> wrote:
>>
>> > I'm interested in getting core working on my Mac. Has anyone tried
>> > this, and how well does it work?
>>
>>
>> - Install Homebrew from http://github.com/mxcl/homebrew
>> - $ brew install ocaml
>> - $ brew tap mirage/ocaml      # hook in custom ocaml packages
>> - $ brew install opam --HEAD   # get the very latest OPAM
>> - $ opam install core async
>> - $ eval `opam config -env`    # import the right PATH
>>
>> Some of these steps will disappear in a bit (e.g. the tap is only
>> required until a more stable OPAM appears, which will hopefully be
>> before ICFP in a couple of weeks).
>>
>> Note that Homebrew just updated to ocaml-4.00.0, so hopefully Core
>> works with it too.
>>
>> -anil
>
>
>


From brankovv at gmail.com  Tue Sep  4 14:26:13 2012
From: brankovv at gmail.com (Vladimir Brankov)
Date: Tue, 4 Sep 2012 06:26:13 -0700 (PDT)
Subject: Compose function operator
In-Reply-To: <CACLX4jTU=Og-fnDpgAEzEFv1pPh3TKFhKJajLncxs=2DRwzZSg@mail.gmail.com>
References: <84233b57-4b25-4712-81eb-e30ec98d54cc@googlegroups.com>
 <CAK=fH+jzc59ccPkpkxrU+oG0_1qUsO_jiQ5rOZchn-Jr+VpN9w@mail.gmail.com>
 <fde573cc-4432-45a4-a408-7c41407b6248@googlegroups.com>
 <CADy1MasMTjjQXcn-oS27pDZS4T6ok0KCcQTCvnqozH6SSzATmw@mail.gmail.com>
 <e601804a-5f75-48e9-976e-dc7397de251b@googlegroups.com>
 <CACLX4jTU=Og-fnDpgAEzEFv1pPh3TKFhKJajLncxs=2DRwzZSg@mail.gmail.com>
Message-ID: <bf1d9287-072a-4112-9d37-f96dfcb50cb4@googlegroups.com>

I think that not having operators which are standard in Haskell, F# and 
Batteries is a brave decision.  Being harder to read can come from not 
being used to.  It would be interesting to hear arguments and experiences 
from where the operators are available.

On Friday, August 31, 2012 5:44:29 PM UTC-4, Yaron Minsky wrote:
>
> We've talked about this one a lot internally over the years, and have 
> settled on not adding a compose operator.  Our experience has been 
> that code using the compose operator tends to be harder to read, and 
> House's point about the cognitive load of infix operators is well 
> taken. 
>
> y 
>
> On Fri, Aug 31, 2012 at 4:20 PM, Vladimir Brankov <bran... at gmail.com<javascript:>> 
> wrote: 
> > What about this case: 
> > 
> >     List.iter l ~f:(fun t -> to_string t |! lowercase) 
> > 
> > as opposed to 
> > 
> >     List.iter l ~f:(lowercase |- to_string) 
> > 
> > I suppose you would argue that the first one is preferred.  That raises 
> a 
> > question - who decides whether a feature gets included or rejected?  I 
> > suppose that none of us can claim to know what the majority of the users 
> > would or wouldn't want.  What's the procedure for new features? 
> > 
> > On Friday, August 31, 2012 4:04:17 PM UTC-4, David House wrote: 
> >> 
> >> Don't you mean: 
> >> 
> >>   let name = lowercase |- to_string 
> >> 
> >> Functional composition is normally written such that the function on 
> >> the right is applied first. 
> >> 
> >> This strikes me as less clear than your example with |!, because of 
> >> the weird ordering. 
> >> 
> >> But even without the ordering constraint, if |- were as clear or only 
> >> a little clearer than |!, we should still not include it, because |! 
> >> already exists (and is more general), and because of that cost of 
> >> every new infix operator that I mentioned before. 
> >> 
> >> On 31 August 2012 21:00, Vladimir Brankov <bran... at gmail.com> wrote: 
> >> > Composition would not hurt in this case: 
> >> > 
> >> >     let name = to_string |- lowercase 
> >> > 
> >> > as opposed to 
> >> > 
> >> >     let name t = to_string t |! lowercase 
> >> > 
> >> > IMHO both are slightly clearer than: 
> >> > 
> >> >     let name t = lowercase (to_string t) 
> >> > 
> >> > This is a small example, imagine if we have a few stacked functions. 
> >> > 
> >> > On Friday, August 31, 2012 12:01:12 PM UTC-4, David House wrote: 
> >> >> 
> >> >> There is already (|!) which almost does what you want, but in a more 
> >> >> logical order. 
> >> >> 
> >> >> I say "almost" since it does not allow you to build up a partially 
> >> >> applied function. But I for one very much dislike Fn.compose in 
> those 
> >> >> scenarios. I think it's generally much clearer to write out the 
> >> >> lambda, since then one is forced to give a name to the variable. 
> E.g. 
> >> >> which is clearer? 
> >> >> 
> >> >>   List.map events ~f:(Fn.compose to_string fst) 
> >> >>   List.map events ~f:(fun (kind, _time) -> to_string kind) 
> >> >> 
> >> >> The latter code is much more annotated and, to me, clearer as a 
> result. 
> >> >> 
> >> >> I know that sometimes writing names is pretty unnecessary, because 
> >> >> it's already clear what the output of a function will be. And in 
> that 
> >> >> case, adding names can just clutter the code and decrease the 
> >> >> information density, making it harder to read. But one can just use 
> >> >> (|!), which as I said makes things appear in a more logical order. 
> >> >> 
> >> >> Finally, there is a significant cost for any new infix operator. If 
> >> >> that thing is not used all the time, it is very obscure and makes 
> code 
> >> >> quite opaque. 
> >> >> 
> >> >> On Fri, Aug 31, 2012 at 4:48 PM, Vladimir Brankov <bran... at gmail.com> 
>
> >> >> wrote: 
> >> >> > As far as I can tell, the only way to compose functions is 
> >> >> > Fn.compose. 
> >> >> > Why 
> >> >> > not having an operator as well?  It's easier to say: 
> >> >> > 
> >> >> >     f1 |- f2 |- f3 
> >> >> > 
> >> >> > than 
> >> >> > 
> >> >> >     compose (compose f1 f2) f3 
> >> >> > 
> >> >> > Also, I see that Batteries has some other interesting function 
> >> >> > composition 
> >> >> > operators.  I don't have any use for it now, but we may want to 
> think 
> >> >> > about 
> >> >> > it. 
> >> >> > 
> >> >> > 
> >> >> > 
> >> >> > 
> http://batteries.forge.ocamlcore.org/doc.preview:batteries-beta1/html/api/Standard.html 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120904/b980e231/attachment.html>

From yminsky at janestreet.com  Tue Sep  4 16:25:21 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Tue, 4 Sep 2012 11:25:21 -0400
Subject: Compose function operator
In-Reply-To: <bf1d9287-072a-4112-9d37-f96dfcb50cb4@googlegroups.com>
References: <84233b57-4b25-4712-81eb-e30ec98d54cc@googlegroups.com>
	<CAK=fH+jzc59ccPkpkxrU+oG0_1qUsO_jiQ5rOZchn-Jr+VpN9w@mail.gmail.com>
	<fde573cc-4432-45a4-a408-7c41407b6248@googlegroups.com>
	<CADy1MasMTjjQXcn-oS27pDZS4T6ok0KCcQTCvnqozH6SSzATmw@mail.gmail.com>
	<e601804a-5f75-48e9-976e-dc7397de251b@googlegroups.com>
	<CACLX4jTU=Og-fnDpgAEzEFv1pPh3TKFhKJajLncxs=2DRwzZSg@mail.gmail.com>
	<bf1d9287-072a-4112-9d37-f96dfcb50cb4@googlegroups.com>
Message-ID: <CACLX4jTVzyF6MjfxpTEOTdvDEvLDbsT7tBYyt4v8LiHZKroQmw@mail.gmail.com>


API design is as much about what to exclude as what to include.
Throwing in every operator that other languages have doesn't seem like
a sound design principle.

On Tue, Sep 4, 2012 at 9:26 AM, Vladimir Brankov <brankovv at gmail.com> wrote:
> I think that not having operators which are standard in Haskell, F# and
> Batteries is a brave decision.  Being harder to read can come from not being
> used to.  It would be interesting to hear arguments and experiences from
> where the operators are available.
>
>
> On Friday, August 31, 2012 5:44:29 PM UTC-4, Yaron Minsky wrote:
>>
>> We've talked about this one a lot internally over the years, and have
>> settled on not adding a compose operator.  Our experience has been
>> that code using the compose operator tends to be harder to read, and
>> House's point about the cognitive load of infix operators is well
>> taken.
>>
>> y
>>
>> On Fri, Aug 31, 2012 at 4:20 PM, Vladimir Brankov <bran... at gmail.com>
>> wrote:
>> > What about this case:
>> >
>> >     List.iter l ~f:(fun t -> to_string t |! lowercase)
>> >
>> > as opposed to
>> >
>> >     List.iter l ~f:(lowercase |- to_string)
>> >
>> > I suppose you would argue that the first one is preferred.  That raises
>> > a
>> > question - who decides whether a feature gets included or rejected?  I
>> > suppose that none of us can claim to know what the majority of the users
>> > would or wouldn't want.  What's the procedure for new features?
>> >
>> > On Friday, August 31, 2012 4:04:17 PM UTC-4, David House wrote:
>> >>
>> >> Don't you mean:
>> >>
>> >>   let name = lowercase |- to_string
>> >>
>> >> Functional composition is normally written such that the function on
>> >> the right is applied first.
>> >>
>> >> This strikes me as less clear than your example with |!, because of
>> >> the weird ordering.
>> >>
>> >> But even without the ordering constraint, if |- were as clear or only
>> >> a little clearer than |!, we should still not include it, because |!
>> >> already exists (and is more general), and because of that cost of
>> >> every new infix operator that I mentioned before.
>> >>
>> >> On 31 August 2012 21:00, Vladimir Brankov <bran... at gmail.com> wrote:
>> >> > Composition would not hurt in this case:
>> >> >
>> >> >     let name = to_string |- lowercase
>> >> >
>> >> > as opposed to
>> >> >
>> >> >     let name t = to_string t |! lowercase
>> >> >
>> >> > IMHO both are slightly clearer than:
>> >> >
>> >> >     let name t = lowercase (to_string t)
>> >> >
>> >> > This is a small example, imagine if we have a few stacked functions.
>> >> >
>> >> > On Friday, August 31, 2012 12:01:12 PM UTC-4, David House wrote:
>> >> >>
>> >> >> There is already (|!) which almost does what you want, but in a more
>> >> >> logical order.
>> >> >>
>> >> >> I say "almost" since it does not allow you to build up a partially
>> >> >> applied function. But I for one very much dislike Fn.compose in
>> >> >> those
>> >> >> scenarios. I think it's generally much clearer to write out the
>> >> >> lambda, since then one is forced to give a name to the variable.
>> >> >> E.g.
>> >> >> which is clearer?
>> >> >>
>> >> >>   List.map events ~f:(Fn.compose to_string fst)
>> >> >>   List.map events ~f:(fun (kind, _time) -> to_string kind)
>> >> >>
>> >> >> The latter code is much more annotated and, to me, clearer as a
>> >> >> result.
>> >> >>
>> >> >> I know that sometimes writing names is pretty unnecessary, because
>> >> >> it's already clear what the output of a function will be. And in
>> >> >> that
>> >> >> case, adding names can just clutter the code and decrease the
>> >> >> information density, making it harder to read. But one can just use
>> >> >> (|!), which as I said makes things appear in a more logical order.
>> >> >>
>> >> >> Finally, there is a significant cost for any new infix operator. If
>> >> >> that thing is not used all the time, it is very obscure and makes
>> >> >> code
>> >> >> quite opaque.
>> >> >>
>> >> >> On Fri, Aug 31, 2012 at 4:48 PM, Vladimir Brankov
>> >> >> <bran... at gmail.com>
>> >> >> wrote:
>> >> >> > As far as I can tell, the only way to compose functions is
>> >> >> > Fn.compose.
>> >> >> > Why
>> >> >> > not having an operator as well?  It's easier to say:
>> >> >> >
>> >> >> >     f1 |- f2 |- f3
>> >> >> >
>> >> >> > than
>> >> >> >
>> >> >> >     compose (compose f1 f2) f3
>> >> >> >
>> >> >> > Also, I see that Batteries has some other interesting function
>> >> >> > composition
>> >> >> > operators.  I don't have any use for it now, but we may want to
>> >> >> > think
>> >> >> > about
>> >> >> > it.
>> >> >> >
>> >> >> >
>> >> >> >
>> >> >> >
>> >> >> > http://batteries.forge.ocamlcore.org/doc.preview:batteries-beta1/html/api/Standard.html


From sebastien.mondet at gmail.com  Tue Sep  4 17:40:27 2012
From: sebastien.mondet at gmail.com (Sebastien Mondet)
Date: Tue, 4 Sep 2012 12:40:27 -0400
Subject: Compose function operator
In-Reply-To: <CACLX4jTVzyF6MjfxpTEOTdvDEvLDbsT7tBYyt4v8LiHZKroQmw@mail.gmail.com>
References: <84233b57-4b25-4712-81eb-e30ec98d54cc@googlegroups.com>
 <CAK=fH+jzc59ccPkpkxrU+oG0_1qUsO_jiQ5rOZchn-Jr+VpN9w@mail.gmail.com>
 <fde573cc-4432-45a4-a408-7c41407b6248@googlegroups.com> <CADy1MasMTjjQXcn-oS27pDZS4T6ok0KCcQTCvnqozH6SSzATmw@mail.gmail.com>
 <e601804a-5f75-48e9-976e-dc7397de251b@googlegroups.com> <CACLX4jTU=Og-fnDpgAEzEFv1pPh3TKFhKJajLncxs=2DRwzZSg@mail.gmail.com>
 <bf1d9287-072a-4112-9d37-f96dfcb50cb4@googlegroups.com> <CACLX4jTVzyF6MjfxpTEOTdvDEvLDbsT7tBYyt4v8LiHZKroQmw@mail.gmail.com>
Message-ID: <CALScVY=5Pm8VP6XV191QovyAskQ_nH2LVbBw5QxvJ6XyRQvAPA@mail.gmail.com>

Hi

I agree that infix operators kill readability very very fast.


But, this good old trick could be a compromise (?):

Define these two:

  let (<<) f x = x f;;
  let (>>) x f = x f;;

And then create ?infix functions? which may be much more readable:

  let compose f g = fun x -> f (g x);;
  let pipe x f = f x;;
  let group f x = f x;;  (* Haskell's dollar... but readable *)


The operator precedence makes things look nice:

  let f = float <<compose>> (+) 42 << compose >> ( * ) 2;;

# f 1;;
- : float = 44.
# 1 <<pipe>> f;;
- : float = 44.
# 1 <<pipe>> f <<pipe>> (+.) 3.;;
- : float = 47.
# float <<group>> (+) 4 3;;
- : float = 7.

etc.


Cheers
Sebastien





On Tue, Sep 4, 2012 at 11:25 AM, Yaron Minsky <yminsky at janestreet.com>wrote:

> API design is as much about what to exclude as what to include.
> Throwing in every operator that other languages have doesn't seem like
> a sound design principle.
>
> On Tue, Sep 4, 2012 at 9:26 AM, Vladimir Brankov <brankovv at gmail.com>
> wrote:
> > I think that not having operators which are standard in Haskell, F# and
> > Batteries is a brave decision.  Being harder to read can come from not
> being
> > used to.  It would be interesting to hear arguments and experiences from
> > where the operators are available.
> >
> >
> > On Friday, August 31, 2012 5:44:29 PM UTC-4, Yaron Minsky wrote:
> >>
> >> We've talked about this one a lot internally over the years, and have
> >> settled on not adding a compose operator.  Our experience has been
> >> that code using the compose operator tends to be harder to read, and
> >> House's point about the cognitive load of infix operators is well
> >> taken.
> >>
> >> y
> >>
> >> On Fri, Aug 31, 2012 at 4:20 PM, Vladimir Brankov <bran... at gmail.com>
> >> wrote:
> >> > What about this case:
> >> >
> >> >     List.iter l ~f:(fun t -> to_string t |! lowercase)
> >> >
> >> > as opposed to
> >> >
> >> >     List.iter l ~f:(lowercase |- to_string)
> >> >
> >> > I suppose you would argue that the first one is preferred.  That
> raises
> >> > a
> >> > question - who decides whether a feature gets included or rejected?  I
> >> > suppose that none of us can claim to know what the majority of the
> users
> >> > would or wouldn't want.  What's the procedure for new features?
> >> >
> >> > On Friday, August 31, 2012 4:04:17 PM UTC-4, David House wrote:
> >> >>
> >> >> Don't you mean:
> >> >>
> >> >>   let name = lowercase |- to_string
> >> >>
> >> >> Functional composition is normally written such that the function on
> >> >> the right is applied first.
> >> >>
> >> >> This strikes me as less clear than your example with |!, because of
> >> >> the weird ordering.
> >> >>
> >> >> But even without the ordering constraint, if |- were as clear or only
> >> >> a little clearer than |!, we should still not include it, because |!
> >> >> already exists (and is more general), and because of that cost of
> >> >> every new infix operator that I mentioned before.
> >> >>
> >> >> On 31 August 2012 21:00, Vladimir Brankov <bran... at gmail.com> wrote:
> >> >> > Composition would not hurt in this case:
> >> >> >
> >> >> >     let name = to_string |- lowercase
> >> >> >
> >> >> > as opposed to
> >> >> >
> >> >> >     let name t = to_string t |! lowercase
> >> >> >
> >> >> > IMHO both are slightly clearer than:
> >> >> >
> >> >> >     let name t = lowercase (to_string t)
> >> >> >
> >> >> > This is a small example, imagine if we have a few stacked
> functions.
> >> >> >
> >> >> > On Friday, August 31, 2012 12:01:12 PM UTC-4, David House wrote:
> >> >> >>
> >> >> >> There is already (|!) which almost does what you want, but in a
> more
> >> >> >> logical order.
> >> >> >>
> >> >> >> I say "almost" since it does not allow you to build up a partially
> >> >> >> applied function. But I for one very much dislike Fn.compose in
> >> >> >> those
> >> >> >> scenarios. I think it's generally much clearer to write out the
> >> >> >> lambda, since then one is forced to give a name to the variable.
> >> >> >> E.g.
> >> >> >> which is clearer?
> >> >> >>
> >> >> >>   List.map events ~f:(Fn.compose to_string fst)
> >> >> >>   List.map events ~f:(fun (kind, _time) -> to_string kind)
> >> >> >>
> >> >> >> The latter code is much more annotated and, to me, clearer as a
> >> >> >> result.
> >> >> >>
> >> >> >> I know that sometimes writing names is pretty unnecessary, because
> >> >> >> it's already clear what the output of a function will be. And in
> >> >> >> that
> >> >> >> case, adding names can just clutter the code and decrease the
> >> >> >> information density, making it harder to read. But one can just
> use
> >> >> >> (|!), which as I said makes things appear in a more logical order.
> >> >> >>
> >> >> >> Finally, there is a significant cost for any new infix operator.
> If
> >> >> >> that thing is not used all the time, it is very obscure and makes
> >> >> >> code
> >> >> >> quite opaque.
> >> >> >>
> >> >> >> On Fri, Aug 31, 2012 at 4:48 PM, Vladimir Brankov
> >> >> >> <bran... at gmail.com>
> >> >> >> wrote:
> >> >> >> > As far as I can tell, the only way to compose functions is
> >> >> >> > Fn.compose.
> >> >> >> > Why
> >> >> >> > not having an operator as well?  It's easier to say:
> >> >> >> >
> >> >> >> >     f1 |- f2 |- f3
> >> >> >> >
> >> >> >> > than
> >> >> >> >
> >> >> >> >     compose (compose f1 f2) f3
> >> >> >> >
> >> >> >> > Also, I see that Batteries has some other interesting function
> >> >> >> > composition
> >> >> >> > operators.  I don't have any use for it now, but we may want to
> >> >> >> > think
> >> >> >> > about
> >> >> >> > it.
> >> >> >> >
> >> >> >> >
> >> >> >> >
> >> >> >> >
> >> >> >> >
> http://batteries.forge.ocamlcore.org/doc.preview:batteries-beta1/html/api/Standard.html
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120904/d35bf5b0/attachment.html>

From yminsky at janestreet.com  Tue Sep  4 17:54:38 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Tue, 4 Sep 2012 12:54:38 -0400
Subject: Compose function operator
In-Reply-To: <CALScVY=5Pm8VP6XV191QovyAskQ_nH2LVbBw5QxvJ6XyRQvAPA@mail.gmail.com>
References: <84233b57-4b25-4712-81eb-e30ec98d54cc@googlegroups.com>
	<CAK=fH+jzc59ccPkpkxrU+oG0_1qUsO_jiQ5rOZchn-Jr+VpN9w@mail.gmail.com>
	<fde573cc-4432-45a4-a408-7c41407b6248@googlegroups.com>
	<CADy1MasMTjjQXcn-oS27pDZS4T6ok0KCcQTCvnqozH6SSzATmw@mail.gmail.com>
	<e601804a-5f75-48e9-976e-dc7397de251b@googlegroups.com>
	<CACLX4jTU=Og-fnDpgAEzEFv1pPh3TKFhKJajLncxs=2DRwzZSg@mail.gmail.com>
	<bf1d9287-072a-4112-9d37-f96dfcb50cb4@googlegroups.com>
	<CACLX4jTVzyF6MjfxpTEOTdvDEvLDbsT7tBYyt4v8LiHZKroQmw@mail.gmail.com>
	<CALScVY=5Pm8VP6XV191QovyAskQ_nH2LVbBw5QxvJ6XyRQvAPA@mail.gmail.com>
Message-ID: <CACLX4jS0h2vNAaDF07=HTUqUhvwpmpXXrYPT8Ki9qk7APOG91w@mail.gmail.com>


Ah, cute!  This is like Haskell's backtick syntax for converting a
prefix operator into an infix one, yes?  The main downside I see of
the particular notation is it looks a hell of a lot like quotations...

On Tue, Sep 4, 2012 at 12:40 PM, Sebastien Mondet
<sebastien.mondet at gmail.com> wrote:
>
> Hi
>
> I agree that infix operators kill readability very very fast.
>
>
> But, this good old trick could be a compromise (?):
>
> Define these two:
>
>   let (<<) f x = x f;;
>   let (>>) x f = x f;;
>
> And then create ?infix functions? which may be much more readable:
>
>   let compose f g = fun x -> f (g x);;
>   let pipe x f = f x;;
>   let group f x = f x;;  (* Haskell's dollar... but readable *)
>
>
> The operator precedence makes things look nice:
>
>   let f = float <<compose>> (+) 42 << compose >> ( * ) 2;;
>
> # f 1;;
> - : float = 44.
> # 1 <<pipe>> f;;
> - : float = 44.
> # 1 <<pipe>> f <<pipe>> (+.) 3.;;
> - : float = 47.
> # float <<group>> (+) 4 3;;
> - : float = 7.
>
> etc.
>
>
> Cheers
> Sebastien
>
>
>
>
>
> On Tue, Sep 4, 2012 at 11:25 AM, Yaron Minsky <yminsky at janestreet.com>
> wrote:
>>
>> API design is as much about what to exclude as what to include.
>> Throwing in every operator that other languages have doesn't seem like
>> a sound design principle.
>>
>> On Tue, Sep 4, 2012 at 9:26 AM, Vladimir Brankov <brankovv at gmail.com>
>> wrote:
>> > I think that not having operators which are standard in Haskell, F# and
>> > Batteries is a brave decision.  Being harder to read can come from not
>> > being
>> > used to.  It would be interesting to hear arguments and experiences from
>> > where the operators are available.
>> >
>> >
>> > On Friday, August 31, 2012 5:44:29 PM UTC-4, Yaron Minsky wrote:
>> >>
>> >> We've talked about this one a lot internally over the years, and have
>> >> settled on not adding a compose operator.  Our experience has been
>> >> that code using the compose operator tends to be harder to read, and
>> >> House's point about the cognitive load of infix operators is well
>> >> taken.
>> >>
>> >> y
>> >>
>> >> On Fri, Aug 31, 2012 at 4:20 PM, Vladimir Brankov <bran... at gmail.com>
>> >> wrote:
>> >> > What about this case:
>> >> >
>> >> >     List.iter l ~f:(fun t -> to_string t |! lowercase)
>> >> >
>> >> > as opposed to
>> >> >
>> >> >     List.iter l ~f:(lowercase |- to_string)
>> >> >
>> >> > I suppose you would argue that the first one is preferred.  That
>> >> > raises
>> >> > a
>> >> > question - who decides whether a feature gets included or rejected?
>> >> > I
>> >> > suppose that none of us can claim to know what the majority of the
>> >> > users
>> >> > would or wouldn't want.  What's the procedure for new features?
>> >> >
>> >> > On Friday, August 31, 2012 4:04:17 PM UTC-4, David House wrote:
>> >> >>
>> >> >> Don't you mean:
>> >> >>
>> >> >>   let name = lowercase |- to_string
>> >> >>
>> >> >> Functional composition is normally written such that the function on
>> >> >> the right is applied first.
>> >> >>
>> >> >> This strikes me as less clear than your example with |!, because of
>> >> >> the weird ordering.
>> >> >>
>> >> >> But even without the ordering constraint, if |- were as clear or
>> >> >> only
>> >> >> a little clearer than |!, we should still not include it, because |!
>> >> >> already exists (and is more general), and because of that cost of
>> >> >> every new infix operator that I mentioned before.
>> >> >>
>> >> >> On 31 August 2012 21:00, Vladimir Brankov <bran... at gmail.com> wrote:
>> >> >> > Composition would not hurt in this case:
>> >> >> >
>> >> >> >     let name = to_string |- lowercase
>> >> >> >
>> >> >> > as opposed to
>> >> >> >
>> >> >> >     let name t = to_string t |! lowercase
>> >> >> >
>> >> >> > IMHO both are slightly clearer than:
>> >> >> >
>> >> >> >     let name t = lowercase (to_string t)
>> >> >> >
>> >> >> > This is a small example, imagine if we have a few stacked
>> >> >> > functions.
>> >> >> >
>> >> >> > On Friday, August 31, 2012 12:01:12 PM UTC-4, David House wrote:
>> >> >> >>
>> >> >> >> There is already (|!) which almost does what you want, but in a
>> >> >> >> more
>> >> >> >> logical order.
>> >> >> >>
>> >> >> >> I say "almost" since it does not allow you to build up a
>> >> >> >> partially
>> >> >> >> applied function. But I for one very much dislike Fn.compose in
>> >> >> >> those
>> >> >> >> scenarios. I think it's generally much clearer to write out the
>> >> >> >> lambda, since then one is forced to give a name to the variable.
>> >> >> >> E.g.
>> >> >> >> which is clearer?
>> >> >> >>
>> >> >> >>   List.map events ~f:(Fn.compose to_string fst)
>> >> >> >>   List.map events ~f:(fun (kind, _time) -> to_string kind)
>> >> >> >>
>> >> >> >> The latter code is much more annotated and, to me, clearer as a
>> >> >> >> result.
>> >> >> >>
>> >> >> >> I know that sometimes writing names is pretty unnecessary,
>> >> >> >> because
>> >> >> >> it's already clear what the output of a function will be. And in
>> >> >> >> that
>> >> >> >> case, adding names can just clutter the code and decrease the
>> >> >> >> information density, making it harder to read. But one can just
>> >> >> >> use
>> >> >> >> (|!), which as I said makes things appear in a more logical
>> >> >> >> order.
>> >> >> >>
>> >> >> >> Finally, there is a significant cost for any new infix operator.
>> >> >> >> If
>> >> >> >> that thing is not used all the time, it is very obscure and makes
>> >> >> >> code
>> >> >> >> quite opaque.
>> >> >> >>
>> >> >> >> On Fri, Aug 31, 2012 at 4:48 PM, Vladimir Brankov
>> >> >> >> <bran... at gmail.com>
>> >> >> >> wrote:
>> >> >> >> > As far as I can tell, the only way to compose functions is
>> >> >> >> > Fn.compose.
>> >> >> >> > Why
>> >> >> >> > not having an operator as well?  It's easier to say:
>> >> >> >> >
>> >> >> >> >     f1 |- f2 |- f3
>> >> >> >> >
>> >> >> >> > than
>> >> >> >> >
>> >> >> >> >     compose (compose f1 f2) f3
>> >> >> >> >
>> >> >> >> > Also, I see that Batteries has some other interesting function
>> >> >> >> > composition
>> >> >> >> > operators.  I don't have any use for it now, but we may want to
>> >> >> >> > think
>> >> >> >> > about
>> >> >> >> > it.
>> >> >> >> >
>> >> >> >> >
>> >> >> >> >
>> >> >> >> >
>> >> >> >> >
>> >> >> >> > http://batteries.forge.ocamlcore.org/doc.preview:batteries-beta1/html/api/Standard.html
>
>


From 5764c029b688c1c0d24a2e97cd764f at gmail.com  Wed Sep  5 10:19:37 2012
From: 5764c029b688c1c0d24a2e97cd764f at gmail.com (Matej Kosik)
Date: Wed, 05 Sep 2012 10:19:37 +0100
Subject: Compose function operator
In-Reply-To: <CAK=fH+jzc59ccPkpkxrU+oG0_1qUsO_jiQ5rOZchn-Jr+VpN9w@mail.gmail.com>
References: <84233b57-4b25-4712-81eb-e30ec98d54cc@googlegroups.com> <CAK=fH+jzc59ccPkpkxrU+oG0_1qUsO_jiQ5rOZchn-Jr+VpN9w@mail.gmail.com>
Message-ID: <50471929.3090909@gmail.com>


On 31/08/12 17:01, David House wrote:
> There is already (|!) which almost does what you want, but in a more
> logical order.
> 
> I say "almost" since it does not allow you to build up a partially
> applied function. But I for one very much dislike Fn.compose in those
> scenarios. I think it's generally much clearer to write out the
> lambda, since then one is forced to give a name to the variable. E.g.
> which is clearer?
> 
>   List.map events ~f:(Fn.compose to_string fst)
>   List.map events ~f:(fun (kind, _time) -> to_string kind)
> 
> The latter code is much more annotated and, to me, clearer as a result.
> 
> I know that sometimes writing names is pretty unnecessary, because
> it's already clear what the output of a function will be. And in that
> case, adding names can just clutter the code and decrease the
> information density, making it harder to read. But one can just use
> (|!), which as I said makes things appear in a more logical order.

AFAIK, Batteries provide two relevant infix operators:

	|-

	-|

One of them is obviously redundant.

<speculation>
Both are kept probably because it is hard to decide which one to drop.
By dropping one, you can annoy some set of people.
By dropping the other one, you can annoy another set of people.
</speculation>

But function composition is an important technique for compressing
source code at micro-level. Even in mathematics, you have "o" operator
so introducing infix operator for function composition does not seem to
be a culturally alien thing. I got used to it. Sometimes really, code
verbosity is just verbosity, not clarity.

> 
> Finally, there is a significant cost for any new infix operator. If
> that thing is not used all the time, it is very obscure and makes code
> quite opaque.
> 
> On Fri, Aug 31, 2012 at 4:48 PM, Vladimir Brankov <brankovv at gmail.com> wrote:
>> As far as I can tell, the only way to compose functions is Fn.compose.  Why
>> not having an operator as well?  It's easier to say:
>>
>>     f1 |- f2 |- f3
>>
>> than
>>
>>     compose (compose f1 f2) f3
>>
>> Also, I see that Batteries has some other interesting function composition
>> operators.  I don't have any use for it now, but we may want to think about
>> it.
>>
>> http://batteries.forge.ocamlcore.org/doc.preview:batteries-beta1/html/api/Standard.html



From francois.berenger.working at gmail.com  Wed Sep  5 05:33:17 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Wed, 5 Sep 2012 13:33:17 +0900
Subject: Compose function operator
In-Reply-To: <CACLX4jS0h2vNAaDF07=HTUqUhvwpmpXXrYPT8Ki9qk7APOG91w@mail.gmail.com>
References: <84233b57-4b25-4712-81eb-e30ec98d54cc@googlegroups.com>
	<CAK=fH+jzc59ccPkpkxrU+oG0_1qUsO_jiQ5rOZchn-Jr+VpN9w@mail.gmail.com>
	<fde573cc-4432-45a4-a408-7c41407b6248@googlegroups.com>
	<CADy1MasMTjjQXcn-oS27pDZS4T6ok0KCcQTCvnqozH6SSzATmw@mail.gmail.com>
	<e601804a-5f75-48e9-976e-dc7397de251b@googlegroups.com>
	<CACLX4jTU=Og-fnDpgAEzEFv1pPh3TKFhKJajLncxs=2DRwzZSg@mail.gmail.com>
	<bf1d9287-072a-4112-9d37-f96dfcb50cb4@googlegroups.com>
	<CACLX4jTVzyF6MjfxpTEOTdvDEvLDbsT7tBYyt4v8LiHZKroQmw@mail.gmail.com>
	<CALScVY=5Pm8VP6XV191QovyAskQ_nH2LVbBw5QxvJ6XyRQvAPA@mail.gmail.com>
	<CACLX4jS0h2vNAaDF07=HTUqUhvwpmpXXrYPT8Ki9qk7APOG91w@mail.gmail.com>
Message-ID: <CAMQaOgPx-fGR3Z9Z6g56zdLkQtGzSehuJk4vuw18nHuPk5g8iQ@mail.gmail.com>


<<pipe>> is a little too verbose I think.
But Sebastian's examples looks cool and readable.

On Wed, Sep 5, 2012 at 1:54 AM, Yaron Minsky <yminsky at janestreet.com> wrote:
> Ah, cute!  This is like Haskell's backtick syntax for converting a
> prefix operator into an infix one, yes?  The main downside I see of
> the particular notation is it looks a hell of a lot like quotations...
>
> On Tue, Sep 4, 2012 at 12:40 PM, Sebastien Mondet
> <sebastien.mondet at gmail.com> wrote:
>>
>> Hi
>>
>> I agree that infix operators kill readability very very fast.
>>
>>
>> But, this good old trick could be a compromise (?):
>>
>> Define these two:
>>
>>   let (<<) f x = x f;;
>>   let (>>) x f = x f;;
>>
>> And then create ?infix functions? which may be much more readable:
>>
>>   let compose f g = fun x -> f (g x);;
>>   let pipe x f = f x;;
>>   let group f x = f x;;  (* Haskell's dollar... but readable *)
>>
>>
>> The operator precedence makes things look nice:
>>
>>   let f = float <<compose>> (+) 42 << compose >> ( * ) 2;;
>>
>> # f 1;;
>> - : float = 44.
>> # 1 <<pipe>> f;;
>> - : float = 44.
>> # 1 <<pipe>> f <<pipe>> (+.) 3.;;
>> - : float = 47.
>> # float <<group>> (+) 4 3;;
>> - : float = 7.
>>
>> etc.
>>
>>
>> Cheers
>> Sebastien
>>
>>
>>
>>
>>
>> On Tue, Sep 4, 2012 at 11:25 AM, Yaron Minsky <yminsky at janestreet.com>
>> wrote:
>>>
>>> API design is as much about what to exclude as what to include.
>>> Throwing in every operator that other languages have doesn't seem like
>>> a sound design principle.
>>>
>>> On Tue, Sep 4, 2012 at 9:26 AM, Vladimir Brankov <brankovv at gmail.com>
>>> wrote:
>>> > I think that not having operators which are standard in Haskell, F# and
>>> > Batteries is a brave decision.  Being harder to read can come from not
>>> > being
>>> > used to.  It would be interesting to hear arguments and experiences from
>>> > where the operators are available.
>>> >
>>> >
>>> > On Friday, August 31, 2012 5:44:29 PM UTC-4, Yaron Minsky wrote:
>>> >>
>>> >> We've talked about this one a lot internally over the years, and have
>>> >> settled on not adding a compose operator.  Our experience has been
>>> >> that code using the compose operator tends to be harder to read, and
>>> >> House's point about the cognitive load of infix operators is well
>>> >> taken.
>>> >>
>>> >> y
>>> >>
>>> >> On Fri, Aug 31, 2012 at 4:20 PM, Vladimir Brankov <bran... at gmail.com>
>>> >> wrote:
>>> >> > What about this case:
>>> >> >
>>> >> >     List.iter l ~f:(fun t -> to_string t |! lowercase)
>>> >> >
>>> >> > as opposed to
>>> >> >
>>> >> >     List.iter l ~f:(lowercase |- to_string)
>>> >> >
>>> >> > I suppose you would argue that the first one is preferred.  That
>>> >> > raises
>>> >> > a
>>> >> > question - who decides whether a feature gets included or rejected?
>>> >> > I
>>> >> > suppose that none of us can claim to know what the majority of the
>>> >> > users
>>> >> > would or wouldn't want.  What's the procedure for new features?
>>> >> >
>>> >> > On Friday, August 31, 2012 4:04:17 PM UTC-4, David House wrote:
>>> >> >>
>>> >> >> Don't you mean:
>>> >> >>
>>> >> >>   let name = lowercase |- to_string
>>> >> >>
>>> >> >> Functional composition is normally written such that the function on
>>> >> >> the right is applied first.
>>> >> >>
>>> >> >> This strikes me as less clear than your example with |!, because of
>>> >> >> the weird ordering.
>>> >> >>
>>> >> >> But even without the ordering constraint, if |- were as clear or
>>> >> >> only
>>> >> >> a little clearer than |!, we should still not include it, because |!
>>> >> >> already exists (and is more general), and because of that cost of
>>> >> >> every new infix operator that I mentioned before.
>>> >> >>
>>> >> >> On 31 August 2012 21:00, Vladimir Brankov <bran... at gmail.com> wrote:
>>> >> >> > Composition would not hurt in this case:
>>> >> >> >
>>> >> >> >     let name = to_string |- lowercase
>>> >> >> >
>>> >> >> > as opposed to
>>> >> >> >
>>> >> >> >     let name t = to_string t |! lowercase
>>> >> >> >
>>> >> >> > IMHO both are slightly clearer than:
>>> >> >> >
>>> >> >> >     let name t = lowercase (to_string t)
>>> >> >> >
>>> >> >> > This is a small example, imagine if we have a few stacked
>>> >> >> > functions.
>>> >> >> >
>>> >> >> > On Friday, August 31, 2012 12:01:12 PM UTC-4, David House wrote:
>>> >> >> >>
>>> >> >> >> There is already (|!) which almost does what you want, but in a
>>> >> >> >> more
>>> >> >> >> logical order.
>>> >> >> >>
>>> >> >> >> I say "almost" since it does not allow you to build up a
>>> >> >> >> partially
>>> >> >> >> applied function. But I for one very much dislike Fn.compose in
>>> >> >> >> those
>>> >> >> >> scenarios. I think it's generally much clearer to write out the
>>> >> >> >> lambda, since then one is forced to give a name to the variable.
>>> >> >> >> E.g.
>>> >> >> >> which is clearer?
>>> >> >> >>
>>> >> >> >>   List.map events ~f:(Fn.compose to_string fst)
>>> >> >> >>   List.map events ~f:(fun (kind, _time) -> to_string kind)
>>> >> >> >>
>>> >> >> >> The latter code is much more annotated and, to me, clearer as a
>>> >> >> >> result.
>>> >> >> >>
>>> >> >> >> I know that sometimes writing names is pretty unnecessary,
>>> >> >> >> because
>>> >> >> >> it's already clear what the output of a function will be. And in
>>> >> >> >> that
>>> >> >> >> case, adding names can just clutter the code and decrease the
>>> >> >> >> information density, making it harder to read. But one can just
>>> >> >> >> use
>>> >> >> >> (|!), which as I said makes things appear in a more logical
>>> >> >> >> order.
>>> >> >> >>
>>> >> >> >> Finally, there is a significant cost for any new infix operator.
>>> >> >> >> If
>>> >> >> >> that thing is not used all the time, it is very obscure and makes
>>> >> >> >> code
>>> >> >> >> quite opaque.
>>> >> >> >>
>>> >> >> >> On Fri, Aug 31, 2012 at 4:48 PM, Vladimir Brankov
>>> >> >> >> <bran... at gmail.com>
>>> >> >> >> wrote:
>>> >> >> >> > As far as I can tell, the only way to compose functions is
>>> >> >> >> > Fn.compose.
>>> >> >> >> > Why
>>> >> >> >> > not having an operator as well?  It's easier to say:
>>> >> >> >> >
>>> >> >> >> >     f1 |- f2 |- f3
>>> >> >> >> >
>>> >> >> >> > than
>>> >> >> >> >
>>> >> >> >> >     compose (compose f1 f2) f3
>>> >> >> >> >
>>> >> >> >> > Also, I see that Batteries has some other interesting function
>>> >> >> >> > composition
>>> >> >> >> > operators.  I don't have any use for it now, but we may want to
>>> >> >> >> > think
>>> >> >> >> > about
>>> >> >> >> > it.
>>> >> >> >> >
>>> >> >> >> >
>>> >> >> >> >
>>> >> >> >> >
>>> >> >> >> >
>>> >> >> >> > http://batteries.forge.ocamlcore.org/doc.preview:batteries-beta1/html/api/Standard.html
>>
>>


From anil at recoil.org  Thu Sep  6 00:29:51 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 6 Sep 2012 00:29:51 +0100
Subject: Lwt/Async abstraction for HTTP library
In-Reply-To: <CAK=fH+iho4Nzuvbi63yKc9nJRzyUakB9tPGHFkAmUg5N4pZf0A@mail.gmail.com>
References: <C83A6D18-3331-4311-8874-AD50F5640E37@recoil.org>
 <CACLX4jS3Vw0boWAk-a+0DG7ALy4qxMuMiW6DYJ=EhLTrdm8JQA@mail.gmail.com>
 <20120821021103.GR24660@dark.recoil.org>
 <CAK=fH+iho4Nzuvbi63yKc9nJRzyUakB9tPGHFkAmUg5N4pZf0A@mail.gmail.com>
Message-ID: <20120905232951.GA17109@dark.recoil.org>


On Thu, Aug 23, 2012 at 09:01:52AM +0100, David House wrote:
> On Tue, Aug 21, 2012 at 3:11 AM, Anil Madhavapeddy <anil at recoil.org> wrote:
> > So my question is what to do with:
> >
> >   (* TODO: how to run write () as a background task? *)
> >   let _ = write () in
> >   rd
> >
> > Does write() need to be registered with something to be a "proper"
> > background task for accounting purposes, or to run a cleanup function if
> > the Reader pipe terminates early?
> 
> As Yaron points out, it is more idiomatic to say [whenever (write
> ())], or in the newer version of async, [don't_wait_for (write ())].
> For example, the stuff below "TODO" in Client.read_response might be
> written:
> 
> if close then don't_wait_for (
>   Pipe.closed body_rd
>   >>= fun () ->
>   Reader.close ic
>   >>= fun () ->
>   Writer.close oc)
> 
> There is no need to register background processes with the scheduler.
> Your code is already correct in the case of early termination by the
> consumer: one of the [Pipe.write_when_ready] calls will terminate with
> `Closed, and your loop will exit.
> 
> P.s. I see in your code that you open Deferred. Why is this? All of
> the infix operators, plus [return] and a few others, are already in
> the scope of Async.Std, so there is no need to go opening anything
> else.
> 

David, thanks for all these hints.  I was opening Deferred due to missing
the Async.Std, so I've reverted all that now.

> Also, two more stylistic points:
> 
> 1. If the code on the right-hand side of a bind does not return a
> deferred, it is common to use >>| instead of >>=, and then delete all
> the "return"s on the right-hand side. E.g. in read_response.
> 
> 2. All code between two binds is guaranteed to execute atomically,
> without being interleaved with any other code. This is a very nice
> feature of async, and really simplifies thinking about concurrent
> code. Because of this, it is idiomatic to put all of your binds
> flush-left, so that they stick out visually. (This is not quite
> universal in our code base, but is certainly to be encouraged.) You
> can see that in my snippet above.

Ack.  I've been tidying up http://github.com/avsm/ocaml-cohttp to work
across Async, Lwt_unix and Mirage via functors. The result is a reasonably
good HTTP/1.1 (w/ pipelining) client/server for all these threading
systems.

Many of my other thoughts on Async shortcomings seem to be addressed by
the upcoming new release (such as Async equivalents of Core modules such
as Option.  I'll play around with them shortly.

I'm just going to finish up SSL bindings for Async to get it to
feature-parity with the Lwt version, and then port the Github API bindings
(http://github.com/avsm/ocaml-github).  It's quite useful having two
different threading libraries to really force a good structure between
protocol modules.

Most of these will be packaged up in OPAM by the end of the week, for our
upcoming CUFP tutorial next week.

-- 
Anil Madhavapeddy                                 http://anil.recoil.org


From anil at recoil.org  Thu Sep  6 22:35:58 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 6 Sep 2012 14:35:58 -0700
Subject: type_conv/ocaml4 release
In-Reply-To: <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org> <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
Message-ID: <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>


On 8 Jul 2012, at 19:02, Markus Mottl <markus.mottl at gmail.com> wrote:

> On Sun, Jul 8, 2012 at 5:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> Also, is it necessary to have warnings-are-errors enabled in the released tarballs? It makes it awkward to test out new compiler versions, which usually introduce new ones every release.
> 
> I agree with Anil that warnings-as-errors should not be enabled in
> releases, only during development work.


The latest pre-release Core tarballs also fail to compile under Homebrew/MacOS X (OCaml-4.00) due to warnings-as-errors still being activated on release tarballs.  Have you considered disabling this on release tarballs?

-anil



From anil at recoil.org  Thu Sep  6 23:25:05 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 6 Sep 2012 15:25:05 -0700
Subject: type_conv/ocaml4 release
In-Reply-To: <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org> <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com> <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org> <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
Message-ID: <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>

The warnings are due to unused variables, mostly (such as linux_ext.ml and the Epoll module having variables in there like 'let none = 0' which are unused).  It's hard to see how to fix these without conditional compilation, or just skipping the Linux_ext module entirely).

The warn_error=false flag in the environment sounds great, but isn't currently present in the tarballs.  It would be very easy to set in most packaging systems, so that's a good alternative to turning it off by default too.

I'm trying a MacOS X 3.12.1 compile now to see how that goes...

-anil

On 6 Sep 2012, at 15:21, Yury Sulsky <yury.sulsky at gmail.com> wrote:

> Thanks Anil, I'll fix the packages to disable the warnings-as-errors. In the meantime, you should be able to build with "warn_error=false" in your environment.
> Aside from that, what warnings are you encountering?
> 
> On Thu, Sep 6, 2012 at 5:35 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> On 8 Jul 2012, at 19:02, Markus Mottl <markus.mottl at gmail.com> wrote:
> 
> > On Sun, Jul 8, 2012 at 5:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> >> Also, is it necessary to have warnings-are-errors enabled in the released tarballs? It makes it awkward to test out new compiler versions, which usually introduce new ones every release.
> >
> > I agree with Anil that warnings-as-errors should not be enabled in
> > releases, only during development work.
> 
> 
> The latest pre-release Core tarballs also fail to compile under Homebrew/MacOS X (OCaml-4.00) due to warnings-as-errors still being activated on release tarballs.  Have you considered disabling this on release tarballs?
> 
> -anil
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120906/b4f53b40/attachment.html>

From anil at recoil.org  Thu Sep  6 23:26:41 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 6 Sep 2012 15:26:41 -0700
Subject: type_conv/ocaml4 release
In-Reply-To: <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org> <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com> <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org> <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com> <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
Message-ID: <A27D704F-2338-46B6-8FF1-92C5FF1F9A81@recoil.org>


Linux/Debian gives me a ~30000 line backtrace in the Async build, using separate tarballs. If you have OPAM-0.5, you can try:

$ opam remote -add core-dev git://github.com/avsm/opam-core-pre0
$ opam install async

File "lib/async.cmx", line 1, characters 0-1:
Error: The implementation (obtained by packing)
      does not match the interface lib/async.mli:
      Modules do not match:
        sig
          module Backpatched :

 <25,000 lines of signature snipped>

      Values do not match:
        val to_host_and_port :
          string ->
          int -> Async_extra.Import.Socket.Address.Inet.t where_to_connect
      is not included in
        val to_host_and_port :
          string ->
          int -> Async_extra.Import.Socket.Address.Inet.t where_to_connect

Anyone else see this? Async_core,_extra,_unix seem to install ok on Debian, it's just the final pack that's failing on ocaml-3.12.1. 

-anil


On 6 Sep 2012, at 15:25, Anil Madhavapeddy <anil at recoil.org> wrote:

> The warnings are due to unused variables, mostly (such as linux_ext.ml and the Epoll module having variables in there like 'let none = 0' which are unused).  It's hard to see how to fix these without conditional compilation, or just skipping the Linux_ext module entirely).
> 
> The warn_error=false flag in the environment sounds great, but isn't currently present in the tarballs.  It would be very easy to set in most packaging systems, so that's a good alternative to turning it off by default too.
> 
> I'm trying a MacOS X 3.12.1 compile now to see how that goes...
> 
> -anil
> 
> On 6 Sep 2012, at 15:21, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> 
>> Thanks Anil, I'll fix the packages to disable the warnings-as-errors. In the meantime, you should be able to build with "warn_error=false" in your environment.
>> Aside from that, what warnings are you encountering?
>> 
>> On Thu, Sep 6, 2012 at 5:35 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> On 8 Jul 2012, at 19:02, Markus Mottl <markus.mottl at gmail.com> wrote:
>> 
>> > On Sun, Jul 8, 2012 at 5:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> >> Also, is it necessary to have warnings-are-errors enabled in the released tarballs? It makes it awkward to test out new compiler versions, which usually introduce new ones every release.
>> >
>> > I agree with Anil that warnings-as-errors should not be enabled in
>> > releases, only during development work.
>> 
>> 
>> The latest pre-release Core tarballs also fail to compile under Homebrew/MacOS X (OCaml-4.00) due to warnings-as-errors still being activated on release tarballs.  Have you considered disabling this on release tarballs?
>> 
>> -anil
>> 
>> 
> 



From anil at recoil.org  Thu Sep  6 23:36:52 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 6 Sep 2012 15:36:52 -0700
Subject: type_conv/ocaml4 release
In-Reply-To: <A27D704F-2338-46B6-8FF1-92C5FF1F9A81@recoil.org>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org> <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com> <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org> <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com> <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org> <A27D704F-2338-46B6-8FF1-92C5FF1F9A81@recoil.org>
Message-ID: <023B1A10-0B4D-433D-A037-A5F666D27696@recoil.org>


3.12.1/MacOS X Core compilation fails with yet another error. I've not had a chance to chase this one down either, but it's done via a fresh 3.12.1 install using `opam switch 3.12.1`.

+ mv open_stubs.o lib/open_stubs.o
+ ocamlfind ocamlc -ccopt -pipe -ccopt -g -ccopt -fPIC -ccopt -O2 -ccopt -fomit-frame-pointer -ccopt -fsigned-char -ccopt -Wall -ccopt -pedantic -ccopt -Wextra -ccopt -Wunused -ccopt -Wno-long-long -c lib/signal_stubs.c
+ mv signal_stubs.o lib/signal_stubs.o
+ ocamlfind ocamlc -ccopt -pipe -ccopt -g -ccopt -fPIC -ccopt -O2 -ccopt -fomit-frame-pointer -ccopt -fsigned-char -ccopt -Wall -ccopt -pedantic -ccopt -Wextra -ccopt -Wunused -ccopt -Wno-long-long -c lib/unix_stubs.c
+ + ocamlfind ocamlc -ccopt -pipe -ccopt -g -ccopt -fPIC -ccopt -O2 -ccopt -fomit-frame-pointer -ccopt -fsigned-char -ccopt -Wall -ccopt -pedantic -ccopt -Wextra -ccopt -Wunused -ccopt -Wno-long-long -c lib/unix_stubs.c
+ lib/unix_stubs.c: In function ?core_unix_stat_64?:
+ lib/unix_stubs.c:393: warning: ?stat64? is deprecated (declared at /usr/include/sys/stat.h:466)
+ lib/unix_stubs.c: In function ?core_unix_lstat_64?:
+ lib/unix_stubs.c:407: warning: ?lstat64? is deprecated (declared at /usr/include/sys/stat.h:465)
+ lib/unix_stubs.c: In function ?core_unix_fstat_64?:
+ lib/unix_stubs.c:419: warning: ?fstat64? is deprecated (declared at /usr/include/sys/stat.h:464)
+ lib/unix_stubs.c:595:2: warning: #warning is a GCC extension
+ lib/unix_stubs.c:595:2: warning: #warning "_POSIX_SYNCHRONIZED_IO undefined or <= 0; aliasing unix_fdatasync to unix_fsync"
+ lib/unix_stubs.c:869:2: warning: #warning is a GCC extension
+ lib/unix_stubs.c:869:2: warning: #warning "posix timers not present; clock functions undefined"
+ lib/unix_stubs.c:1069:2: warning: #warning is a GCC extension
+ lib/unix_stubs.c:1069:2: warning: #warning "POSIX TMO not present; unix_mutex_timedlock undefined"
+ lib/unix_stubs.c:1419:2: warning: #warning is a GCC extension
+ lib/unix_stubs.c:1419:2: warning: #warning "_POSIX_PRIORITY_SCHEDULING not present; sched_setscheduler undefined"
+ mv unix_stubs.o lib/unix_stubs.o
+ /Users/avsm/.opam/3.12.1/bin/ocamlmklib -o lib/core_stubs lib/backtrace_stubs.o lib/bigstring_marshal_stubs.o lib/bigstring_stubs.o lib/crc_stubs.o lib/linux_ext_stubs.o lib/misc.o lib/ocaml_utils_stubs.o lib/open_stubs.o lib/signal_stubs.o lib/unix_stubs.o
+ + /Users/avsm/.opam/3.12.1/bin/ocamlmklib -o lib/core_stubs lib/backtrace_stubs.o lib/bigstring_marshal_stubs.o lib/bigstring_stubs.o lib/crc_stubs.o lib/linux_ext_stubs.o lib/misc.o lib/ocaml_utils_stubs.o lib/open_stubs.o lib/signal_stubs.o lib/unix_stubs.o
+ ld: warning: -read_only_relocs cannot be used with x86_64
+ /usr/bin/ranlib: file: lib/libcore_stubs.a(backtrace_stubs.o) has no symbols
+ /usr/bin/ranlib: file: lib/libcore_stubs.a(linux_ext_stubs.o) has no symbols
+ ranlib: file: lib/libcore_stubs.a(backtrace_stubs.o) has no symbols
+ ranlib: file: lib/libcore_stubs.a(linux_ext_stubs.o) has no symbols
+ ocamlfind ocamldep -package variantslib.syntax -package variantslib -package unix -package threads -package sexplib.syntax -package sexplib -package res -package pa_pipebang -package pa_ounit -package fieldslib.syntax -package fieldslib -package comparelib.syntax -package bin_prot.syntax -package bin_prot -package bigarray -syntax camlp4o -modules lib/array_permute.ml > lib/array_permute.ml.depends
+ + ocamlfind ocamldep -package variantslib.syntax -package variantslib -package unix -package threads -package sexplib.syntax -package sexplib -package res -package pa_pipebang -package pa_ounit -package fieldslib.syntax -package fieldslib -package comparelib.syntax -package bin_prot.syntax -package bin_prot -package bigarray -syntax camlp4o -modules lib/array_permute.ml > lib/array_permute.ml.depends
+ Camlp4: Uncaught exception: DynLoader.Error ("/Users/avsm/.opam/3.12.1/lib/ocaml/bigarray.cma", "error loading shared library: /usr/local/lib/ocaml/stublibs/dllbigarray.so: dlopen(/usr/local/lib/ocaml/stublibs/dllbigarray.so, 138): Symbol not found: _caml_hash_mix_double\n  Referenced from: /usr/local/lib/ocaml/stublibs/dllbigarray.so\n  Expected in: flat namespace\n in /usr/local/lib/ocaml/stublibs/dllbigarray.so")
+ 
+ Preprocessing error on file lib/array_permute.ml
+ Command exited with code 2.

caml_hash_mix_double should be exported in dllbigarray already, but I'll have to look into this one later.

-anil

On 6 Sep 2012, at 15:26, Anil Madhavapeddy <anil at recoil.org> wrote:

> Linux/Debian gives me a ~30000 line backtrace in the Async build, using separate tarballs. If you have OPAM-0.5, you can try:
> 
> $ opam remote -add core-dev git://github.com/avsm/opam-core-pre0
> $ opam install async
> 
> File "lib/async.cmx", line 1, characters 0-1:
> Error: The implementation (obtained by packing)
>      does not match the interface lib/async.mli:
>      Modules do not match:
>        sig
>          module Backpatched :
> 
> <25,000 lines of signature snipped>
> 
>      Values do not match:
>        val to_host_and_port :
>          string ->
>          int -> Async_extra.Import.Socket.Address.Inet.t where_to_connect
>      is not included in
>        val to_host_and_port :
>          string ->
>          int -> Async_extra.Import.Socket.Address.Inet.t where_to_connect
> 
> Anyone else see this? Async_core,_extra,_unix seem to install ok on Debian, it's just the final pack that's failing on ocaml-3.12.1. 
> 
> -anil
> 
> 
> On 6 Sep 2012, at 15:25, Anil Madhavapeddy <anil at recoil.org> wrote:
> 
>> The warnings are due to unused variables, mostly (such as linux_ext.ml and the Epoll module having variables in there like 'let none = 0' which are unused).  It's hard to see how to fix these without conditional compilation, or just skipping the Linux_ext module entirely).
>> 
>> The warn_error=false flag in the environment sounds great, but isn't currently present in the tarballs.  It would be very easy to set in most packaging systems, so that's a good alternative to turning it off by default too.
>> 
>> I'm trying a MacOS X 3.12.1 compile now to see how that goes...
>> 
>> -anil
>> 
>> On 6 Sep 2012, at 15:21, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>> 
>>> Thanks Anil, I'll fix the packages to disable the warnings-as-errors. In the meantime, you should be able to build with "warn_error=false" in your environment.
>>> Aside from that, what warnings are you encountering?
>>> 
>>> On Thu, Sep 6, 2012 at 5:35 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>> On 8 Jul 2012, at 19:02, Markus Mottl <markus.mottl at gmail.com> wrote:
>>> 
>>>> On Sun, Jul 8, 2012 at 5:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>>>> Also, is it necessary to have warnings-are-errors enabled in the released tarballs? It makes it awkward to test out new compiler versions, which usually introduce new ones every release.
>>>> 
>>>> I agree with Anil that warnings-as-errors should not be enabled in
>>>> releases, only during development work.
>>> 
>>> 
>>> The latest pre-release Core tarballs also fail to compile under Homebrew/MacOS X (OCaml-4.00) due to warnings-as-errors still being activated on release tarballs.  Have you considered disabling this on release tarballs?
>>> 
>>> -anil
>>> 
>>> 
>> 
> 



From anil at recoil.org  Thu Sep  6 23:37:49 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 6 Sep 2012 15:37:49 -0700
Subject: type_conv/ocaml4 release
In-Reply-To: <CAEDxudzdxYz4biWFb8Vap=wp6tohNix8dbMVaJxO2c9RbS22gg@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org> <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com> <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org> <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com> <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org> <CAEDxudzdxYz4biWFb8Vap=wp6tohNix8dbMVaJxO2c9RbS22gg@mail.gmail.com>
Message-ID: <8E2C8BCD-962D-40E7-B26D-2F77D22DFB0B@recoil.org>

On 6 Sep 2012, at 15:36, Yury Sulsky <yury.sulsky at gmail.com> wrote:

> On Thu, Sep 6, 2012 at 6:25 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> The warnings are due to unused variables, mostly (such as linux_ext.ml and the Epoll module having variables in there like 'let none = 0' which are unused).  It's hard to see how to fix these without conditional compilation, or just skipping the Linux_ext module entirely).
> 
> Thanks, I don't know how I missed that one. The fix there is to just remove line 669 in linux_ext.ml (that "none" value actually isn't used).

Oh! A warning that actually is an error ;-)

-anil
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120906/60e156a6/attachment.html>

From anil at recoil.org  Thu Sep  6 23:54:37 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 6 Sep 2012 15:54:37 -0700
Subject: type_conv/ocaml4 release
In-Reply-To: <CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org> <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com> <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org> <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com> <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org> <CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com>
Message-ID: <8AD494F3-8932-4E57-ABCA-58366E8553C1@recoil.org>

On 6 Sep 2012, at 15:42, Markus Mottl <markus.mottl at gmail.com> wrote:

> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
> The warnings are due to unused variables,
> 
> You might also want to apply my Bitbucket patch queue for ocaml-core.  The resulting tree should build fine on Mac OS X, fixes a couple of bugs, and adds some useful features.

I'm a bit confused by all the patch queues up on Bitbucket (forgive me if this has been covered before on the list!)

Is this the correct one?
https://bitbucket.org/yminsky/ocaml-core-submissions

The pre-release tarballs aren't on Bitbucket yet, and the repository-splitting script has to be run by Yury, so it's got to be applied manually too I think.  I only use the individual Core tarballs since other packages depend on them (mainly type_conv).

-anil
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120906/9dece0c8/attachment.html>

From francois.berenger.working at gmail.com  Thu Sep  6 08:04:23 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 6 Sep 2012 16:04:23 +0900
Subject: Compose function operator
In-Reply-To: <CAMQaOgPx-fGR3Z9Z6g56zdLkQtGzSehuJk4vuw18nHuPk5g8iQ@mail.gmail.com>
References: <84233b57-4b25-4712-81eb-e30ec98d54cc@googlegroups.com>
	<CAK=fH+jzc59ccPkpkxrU+oG0_1qUsO_jiQ5rOZchn-Jr+VpN9w@mail.gmail.com>
	<fde573cc-4432-45a4-a408-7c41407b6248@googlegroups.com>
	<CADy1MasMTjjQXcn-oS27pDZS4T6ok0KCcQTCvnqozH6SSzATmw@mail.gmail.com>
	<e601804a-5f75-48e9-976e-dc7397de251b@googlegroups.com>
	<CACLX4jTU=Og-fnDpgAEzEFv1pPh3TKFhKJajLncxs=2DRwzZSg@mail.gmail.com>
	<bf1d9287-072a-4112-9d37-f96dfcb50cb4@googlegroups.com>
	<CACLX4jTVzyF6MjfxpTEOTdvDEvLDbsT7tBYyt4v8LiHZKroQmw@mail.gmail.com>
	<CALScVY=5Pm8VP6XV191QovyAskQ_nH2LVbBw5QxvJ6XyRQvAPA@mail.gmail.com>
	<CACLX4jS0h2vNAaDF07=HTUqUhvwpmpXXrYPT8Ki9qk7APOG91w@mail.gmail.com>
	<CAMQaOgPx-fGR3Z9Z6g56zdLkQtGzSehuJk4vuw18nHuPk5g8iQ@mail.gmail.com>
Message-ID: <CAMQaOgOFDuQPXGdtiQWCbN9_q5G+JV+uk40mNJxGeAfd0REwtg@mail.gmail.com>


On Wed, Sep 5, 2012 at 1:33 PM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> <<pipe>> is a little too verbose I think.
> But Sebastian's examples looks cool and readable.

I think the notation is . in Haskell: i.e. (f . g) x = f (g x).
It's not very far from the math notation which is a big dot
if I remember correctly.


From anil at recoil.org  Fri Sep  7 00:12:06 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 6 Sep 2012 16:12:06 -0700
Subject: type_conv/ocaml4 release
In-Reply-To: <CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org> <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com> <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org> <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com> <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org> <CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com> <CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com> <CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com>
Message-ID: <D4B1E5DF-2B3B-4A21-B574-BE9975118919@recoil.org>

Spot on... looks like OPAM might be leaking an environment variable that is pointing to the wrong DLL stubs directory after a compiler switch.  Should be easy to fix.

Sorry about that; I'll clean up the 25 different OCaml installations I have and do a more fresh build as soon as I get a chance!

-anil

On 6 Sep 2012, at 16:09, Yury Sulsky <yury.sulsky at gmail.com> wrote:

> Ah, okay. Anil, it looks like there might be some mixup in your install. The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere in ocaml-3.12.
> Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS after all, which is why I didn't catch that unused value warning. I'll install and test with 4.00 on a Mac tomorrow.
> 
> On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> Hi Markus,
> 
> A few of your sexplib changes didn't make it into this release, and I'll take a look at your patch queue to see what else we're missing. But I've been building and testing on Mac OS X. I'll see if I can recreate Anil's missing symbol problem (I haven't been testing with 3.12.1)
> 
> 
> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com> wrote:
> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
> The warnings are due to unused variables,
> 
> You might also want to apply my Bitbucket patch queue for ocaml-core.  The resulting tree should build fine on Mac OS X, fixes a couple of bugs, and adds some useful features.
> 
> Regards,
> Markus
> 
> 
> -- 
> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120906/6b89b0b9/attachment.html>

From yury.sulsky at gmail.com  Thu Sep  6 23:21:00 2012
From: yury.sulsky at gmail.com (Yury Sulsky)
Date: Thu, 6 Sep 2012 18:21:00 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
Message-ID: <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>

Thanks Anil, I'll fix the packages to disable the warnings-as-errors. In
the meantime, you should be able to build with "warn_error=false" in your
environment.
Aside from that, what warnings are you encountering?

On Thu, Sep 6, 2012 at 5:35 PM, Anil Madhavapeddy <anil at recoil.org> wrote:

> On 8 Jul 2012, at 19:02, Markus Mottl <markus.mottl at gmail.com> wrote:
>
> > On Sun, Jul 8, 2012 at 5:12 PM, Anil Madhavapeddy <anil at recoil.org>
> wrote:
> >> Also, is it necessary to have warnings-are-errors enabled in the
> released tarballs? It makes it awkward to test out new compiler versions,
> which usually introduce new ones every release.
> >
> > I agree with Anil that warnings-as-errors should not be enabled in
> > releases, only during development work.
>
>
> The latest pre-release Core tarballs also fail to compile under
> Homebrew/MacOS X (OCaml-4.00) due to warnings-as-errors still being
> activated on release tarballs.  Have you considered disabling this on
> release tarballs?
>
> -anil
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120906/0595d12d/attachment.html>

From yury.sulsky at gmail.com  Thu Sep  6 23:23:02 2012
From: yury.sulsky at gmail.com (Yury Sulsky)
Date: Thu, 6 Sep 2012 18:23:02 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
Message-ID: <CAEDxudx0iwC2axXXqT6xnuTLeUyvMcKSt_1iui=62_XdE9cNaA@mail.gmail.com>

Ah, scratch that warn_error=false bit. Sorry, I just need to regenerate the
packages.

On Thu, Sep 6, 2012 at 6:21 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:

> Thanks Anil, I'll fix the packages to disable the warnings-as-errors. In
> the meantime, you should be able to build with "warn_error=false" in your
> environment.
> Aside from that, what warnings are you encountering?
>
>
> On Thu, Sep 6, 2012 at 5:35 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>
>> On 8 Jul 2012, at 19:02, Markus Mottl <markus.mottl at gmail.com> wrote:
>>
>> > On Sun, Jul 8, 2012 at 5:12 PM, Anil Madhavapeddy <anil at recoil.org>
>> wrote:
>> >> Also, is it necessary to have warnings-are-errors enabled in the
>> released tarballs? It makes it awkward to test out new compiler versions,
>> which usually introduce new ones every release.
>> >
>> > I agree with Anil that warnings-as-errors should not be enabled in
>> > releases, only during development work.
>>
>>
>> The latest pre-release Core tarballs also fail to compile under
>> Homebrew/MacOS X (OCaml-4.00) due to warnings-as-errors still being
>> activated on release tarballs.  Have you considered disabling this on
>> release tarballs?
>>
>> -anil
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120906/ee8230ab/attachment.html>

From yury.sulsky at gmail.com  Thu Sep  6 23:34:24 2012
From: yury.sulsky at gmail.com (Yury Sulsky)
Date: Thu, 6 Sep 2012 18:34:24 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <A27D704F-2338-46B6-8FF1-92C5FF1F9A81@recoil.org>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
	<98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
	<A27D704F-2338-46B6-8FF1-92C5FF1F9A81@recoil.org>
Message-ID: <CAEDxudw0AzufT4mJXFOnRZTwJrBx-DudTNpjixkD88y1g2nfVQ@mail.gmail.com>

There's a horrible hack to get around this in the build-and-install script
to disable the creation of async.mli during the link step. Does anyone
understand why packing Async with a cmi causes this error?

On Thu, Sep 6, 2012 at 6:26 PM, Anil Madhavapeddy <anil at recoil.org> wrote:

> Linux/Debian gives me a ~30000 line backtrace in the Async build, using
> separate tarballs. If you have OPAM-0.5, you can try:
>
> $ opam remote -add core-dev git://github.com/avsm/opam-core-pre0
> $ opam install async
>
> File "lib/async.cmx", line 1, characters 0-1:
> Error: The implementation (obtained by packing)
>       does not match the interface lib/async.mli:
>       Modules do not match:
>         sig
>           module Backpatched :
>
>  <25,000 lines of signature snipped>
>
>       Values do not match:
>         val to_host_and_port :
>           string ->
>           int -> Async_extra.Import.Socket.Address.Inet.t where_to_connect
>       is not included in
>         val to_host_and_port :
>           string ->
>           int -> Async_extra.Import.Socket.Address.Inet.t where_to_connect
>
> Anyone else see this? Async_core,_extra,_unix seem to install ok on
> Debian, it's just the final pack that's failing on ocaml-3.12.1.
>
> -anil
>
>
> On 6 Sep 2012, at 15:25, Anil Madhavapeddy <anil at recoil.org> wrote:
>
> > The warnings are due to unused variables, mostly (such as linux_ext.mland the Epoll module having variables in there like 'let none = 0' which
> are unused).  It's hard to see how to fix these without conditional
> compilation, or just skipping the Linux_ext module entirely).
> >
> > The warn_error=false flag in the environment sounds great, but isn't
> currently present in the tarballs.  It would be very easy to set in most
> packaging systems, so that's a good alternative to turning it off by
> default too.
> >
> > I'm trying a MacOS X 3.12.1 compile now to see how that goes...
> >
> > -anil
> >
> > On 6 Sep 2012, at 15:21, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> >
> >> Thanks Anil, I'll fix the packages to disable the warnings-as-errors.
> In the meantime, you should be able to build with "warn_error=false" in
> your environment.
> >> Aside from that, what warnings are you encountering?
> >>
> >> On Thu, Sep 6, 2012 at 5:35 PM, Anil Madhavapeddy <anil at recoil.org>
> wrote:
> >> On 8 Jul 2012, at 19:02, Markus Mottl <markus.mottl at gmail.com> wrote:
> >>
> >> > On Sun, Jul 8, 2012 at 5:12 PM, Anil Madhavapeddy <anil at recoil.org>
> wrote:
> >> >> Also, is it necessary to have warnings-are-errors enabled in the
> released tarballs? It makes it awkward to test out new compiler versions,
> which usually introduce new ones every release.
> >> >
> >> > I agree with Anil that warnings-as-errors should not be enabled in
> >> > releases, only during development work.
> >>
> >>
> >> The latest pre-release Core tarballs also fail to compile under
> Homebrew/MacOS X (OCaml-4.00) due to warnings-as-errors still being
> activated on release tarballs.  Have you considered disabling this on
> release tarballs?
> >>
> >> -anil
> >>
> >>
> >
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120906/5017a881/attachment.html>

From yminsky at janestreet.com  Thu Sep  6 23:35:31 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 6 Sep 2012 18:35:31 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <CAEDxudw0AzufT4mJXFOnRZTwJrBx-DudTNpjixkD88y1g2nfVQ@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
	<98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
	<A27D704F-2338-46B6-8FF1-92C5FF1F9A81@recoil.org>
	<CAEDxudw0AzufT4mJXFOnRZTwJrBx-DudTNpjixkD88y1g2nfVQ@mail.gmail.com>
Message-ID: <CACLX4jR67XzOR2X5zH2g4KqPuV_CJK-jGuTvZp-+C+j3q0=rGw@mail.gmail.com>


Looping in Nick, Valentin and Sweeks.  I think they've probably seen
some of these issues before.

y

On Thu, Sep 6, 2012 at 6:34 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> There's a horrible hack to get around this in the build-and-install script
> to disable the creation of async.mli during the link step. Does anyone
> understand why packing Async with a cmi causes this error?
>
>
> On Thu, Sep 6, 2012 at 6:26 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>
>> Linux/Debian gives me a ~30000 line backtrace in the Async build, using
>> separate tarballs. If you have OPAM-0.5, you can try:
>>
>> $ opam remote -add core-dev git://github.com/avsm/opam-core-pre0
>> $ opam install async
>>
>> File "lib/async.cmx", line 1, characters 0-1:
>> Error: The implementation (obtained by packing)
>>       does not match the interface lib/async.mli:
>>       Modules do not match:
>>         sig
>>           module Backpatched :
>>
>>  <25,000 lines of signature snipped>
>>
>>       Values do not match:
>>         val to_host_and_port :
>>           string ->
>>           int -> Async_extra.Import.Socket.Address.Inet.t where_to_connect
>>       is not included in
>>         val to_host_and_port :
>>           string ->
>>           int -> Async_extra.Import.Socket.Address.Inet.t where_to_connect
>>
>> Anyone else see this? Async_core,_extra,_unix seem to install ok on
>> Debian, it's just the final pack that's failing on ocaml-3.12.1.
>>
>> -anil
>>
>>
>> On 6 Sep 2012, at 15:25, Anil Madhavapeddy <anil at recoil.org> wrote:
>>
>> > The warnings are due to unused variables, mostly (such as linux_ext.ml
>> > and the Epoll module having variables in there like 'let none = 0' which are
>> > unused).  It's hard to see how to fix these without conditional compilation,
>> > or just skipping the Linux_ext module entirely).
>> >
>> > The warn_error=false flag in the environment sounds great, but isn't
>> > currently present in the tarballs.  It would be very easy to set in most
>> > packaging systems, so that's a good alternative to turning it off by default
>> > too.
>> >
>> > I'm trying a MacOS X 3.12.1 compile now to see how that goes...
>> >
>> > -anil
>> >
>> > On 6 Sep 2012, at 15:21, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>> >
>> >> Thanks Anil, I'll fix the packages to disable the warnings-as-errors.
>> >> In the meantime, you should be able to build with "warn_error=false" in your
>> >> environment.
>> >> Aside from that, what warnings are you encountering?
>> >>
>> >> On Thu, Sep 6, 2012 at 5:35 PM, Anil Madhavapeddy <anil at recoil.org>
>> >> wrote:
>> >> On 8 Jul 2012, at 19:02, Markus Mottl <markus.mottl at gmail.com> wrote:
>> >>
>> >> > On Sun, Jul 8, 2012 at 5:12 PM, Anil Madhavapeddy <anil at recoil.org>
>> >> > wrote:
>> >> >> Also, is it necessary to have warnings-are-errors enabled in the
>> >> >> released tarballs? It makes it awkward to test out new compiler versions,
>> >> >> which usually introduce new ones every release.
>> >> >
>> >> > I agree with Anil that warnings-as-errors should not be enabled in
>> >> > releases, only during development work.
>> >>
>> >>
>> >> The latest pre-release Core tarballs also fail to compile under
>> >> Homebrew/MacOS X (OCaml-4.00) due to warnings-as-errors still being
>> >> activated on release tarballs.  Have you considered disabling this on
>> >> release tarballs?
>> >>
>> >> -anil
>> >>
>> >>
>> >
>>
>


From yury.sulsky at gmail.com  Thu Sep  6 23:36:46 2012
From: yury.sulsky at gmail.com (Yury Sulsky)
Date: Thu, 6 Sep 2012 18:36:46 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
	<98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
Message-ID: <CAEDxudzdxYz4biWFb8Vap=wp6tohNix8dbMVaJxO2c9RbS22gg@mail.gmail.com>

On Thu, Sep 6, 2012 at 6:25 PM, Anil Madhavapeddy <anil at recoil.org> wrote:

> The warnings are due to unused variables, mostly (such as linux_ext.mland the Epoll module having variables in there like 'let none = 0' which
> are unused).  It's hard to see how to fix these without conditional
> compilation, or just skipping the Linux_ext module entirely).
>

Thanks, I don't know how I missed that one. The fix there is to just remove
line 669 in linux_ext.ml (that "none" value actually isn't used).


>
> The warn_error=false flag in the environment sounds great, but isn't
> currently present in the tarballs.  It would be very easy to set in most
> packaging systems, so that's a good alternative to turning it off by
> default too.
>
> I'm trying a MacOS X 3.12.1 compile now to see how that goes...
>
> -anil
>
> On 6 Sep 2012, at 15:21, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>
> Thanks Anil, I'll fix the packages to disable the warnings-as-errors. In
> the meantime, you should be able to build with "warn_error=false" in your
> environment.
> Aside from that, what warnings are you encountering?
>
> On Thu, Sep 6, 2012 at 5:35 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>
>> On 8 Jul 2012, at 19:02, Markus Mottl <markus.mottl at gmail.com> wrote:
>>
>> > On Sun, Jul 8, 2012 at 5:12 PM, Anil Madhavapeddy <anil at recoil.org>
>> wrote:
>> >> Also, is it necessary to have warnings-are-errors enabled in the
>> released tarballs? It makes it awkward to test out new compiler versions,
>> which usually introduce new ones every release.
>> >
>> > I agree with Anil that warnings-as-errors should not be enabled in
>> > releases, only during development work.
>>
>>
>> The latest pre-release Core tarballs also fail to compile under
>> Homebrew/MacOS X (OCaml-4.00) due to warnings-as-errors still being
>> activated on release tarballs.  Have you considered disabling this on
>> release tarballs?
>>
>> -anil
>>
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120906/3b047eba/attachment.html>

From markus.mottl at gmail.com  Thu Sep  6 23:42:24 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Thu, 6 Sep 2012 18:42:24 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
	<98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
Message-ID: <CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com>

On Thursday, September 6, 2012, Anil Madhavapeddy wrote:

> The warnings are due to unused variables,
>

You might also want to apply my Bitbucket patch queue for ocaml-core.  The
resulting tree should build fine on Mac OS X, fixes a couple of bugs, and
adds some useful features.

Regards,
Markus

>

-- 
Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120906/90ba8734/attachment.html>

From yury.sulsky at gmail.com  Thu Sep  6 23:55:02 2012
From: yury.sulsky at gmail.com (Yury Sulsky)
Date: Thu, 6 Sep 2012 18:55:02 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
	<98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
	<CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com>
Message-ID: <CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com>

Hi Markus,

A few of your sexplib changes didn't make it into this release, and I'll
take a look at your patch queue to see what else we're missing. But I've
been building and testing on Mac OS X. I'll see if I can recreate Anil's
missing symbol problem (I haven't been testing with 3.12.1)

On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com> wrote:

> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
>
>> The warnings are due to unused variables,
>>
>
> You might also want to apply my Bitbucket patch queue for ocaml-core.  The
> resulting tree should build fine on Mac OS X, fixes a couple of bugs, and
> adds some useful features.
>
> Regards,
> Markus
>
>>
>
> --
> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120906/a983a8ab/attachment.html>

From yury.sulsky at gmail.com  Fri Sep  7 00:09:56 2012
From: yury.sulsky at gmail.com (Yury Sulsky)
Date: Thu, 6 Sep 2012 19:09:56 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
	<98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
	<CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com>
	<CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com>
Message-ID: <CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com>

Ah, okay. Anil, it looks like there might be some mixup in your install.
The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere in
ocaml-3.12.
Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS
after all, which is why I didn't catch that unused value warning. I'll
install and test with 4.00 on a Mac tomorrow.

On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:

> Hi Markus,
>
> A few of your sexplib changes didn't make it into this release, and I'll
> take a look at your patch queue to see what else we're missing. But I've
> been building and testing on Mac OS X. I'll see if I can recreate Anil's
> missing symbol problem (I haven't been testing with 3.12.1)
>
>
> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com>wrote:
>
>> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
>>
>>> The warnings are due to unused variables,
>>>
>>
>> You might also want to apply my Bitbucket patch queue for ocaml-core.
>>  The resulting tree should build fine on Mac OS X, fixes a couple of bugs,
>> and adds some useful features.
>>
>> Regards,
>> Markus
>>
>>>
>>
>> --
>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120906/c7eab775/attachment.html>

From francois.berenger.working at gmail.com  Fri Sep  7 05:38:58 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 6 Sep 2012 21:38:58 -0700 (PDT)
Subject: when starting a new project with Async...
Message-ID: <2fcb89fb-c641-49d0-b3c7-36dfb3d073b4@googlegroups.com>

Hello,

I will use Async, should I better use core also instead of the
standard Pervasives module?

Previously, I used batteries, but I'm OK to switch to something more
fail-safe for this new project.

Also, please don't forget the logger in the next release of core! :)

Regards,
F.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120906/5d28044b/attachment.html>

From markus.mottl at gmail.com  Fri Sep  7 02:55:29 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Thu, 6 Sep 2012 21:55:29 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <8AD494F3-8932-4E57-ABCA-58366E8553C1@recoil.org>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
	<98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
	<CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com>
	<8AD494F3-8932-4E57-ABCA-58366E8553C1@recoil.org>
Message-ID: <CAP_800qyqMe-NPR=N+Wg4gJhmGmASPQJnU6oAv5wqakCELDtvg@mail.gmail.com>


On Thu, Sep 6, 2012 at 6:54 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> I'm a bit confused by all the patch queues up on Bitbucket (forgive me if
> this has been covered before on the list!)
>
> Is this the correct one?
> https://bitbucket.org/yminsky/ocaml-core-submissions

The above is the queue of patches accepted by Jane Street.  You can
get my fork, which has a lot of patches that have not yet been
accepted, from:

  https://bitbucket.org/mmottl/ocaml-core-submissions

You may want to read up on Bitbucket patch queues if you want to learn
how to merge and apply them:

  http://ches.nausicaamedia.com/articles/technogeekery/using-mercurial-queues-and-bitbucket-org

Regards,
Markus

-- 
Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com


From dmhouse at gmail.com  Fri Sep  7 05:48:00 2012
From: dmhouse at gmail.com (David House)
Date: Fri, 7 Sep 2012 05:48:00 +0100
Subject: when starting a new project with Async...
In-Reply-To: <2fcb89fb-c641-49d0-b3c7-36dfb3d073b4@googlegroups.com>
References: <2fcb89fb-c641-49d0-b3c7-36dfb3d073b4@googlegroups.com>
Message-ID: <CADy1MauCO9EJxGYTX4y-8JXdiH9K_8eoe86hdy41thQetr=Ptw@mail.gmail.com>


Yes, Async is built on top of core, and it is basically required to
use core when using async.

On 7 September 2012 05:38, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> Hello,
>
> I will use Async, should I better use core also instead of the
> standard Pervasives module?
>
> Previously, I used batteries, but I'm OK to switch to something more
> fail-safe for this new project.
>
> Also, please don't forget the logger in the next release of core! :)
>
> Regards,
> F.
>


From vgatien-baron at janestreet.com  Fri Sep  7 11:01:02 2012
From: vgatien-baron at janestreet.com (Valentin Gatien-Baron)
Date: Fri, 7 Sep 2012 11:01:02 +0100
Subject: type_conv/ocaml4 release
In-Reply-To: <CACLX4jR67XzOR2X5zH2g4KqPuV_CJK-jGuTvZp-+C+j3q0=rGw@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
	<98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
	<A27D704F-2338-46B6-8FF1-92C5FF1F9A81@recoil.org>
	<CAEDxudw0AzufT4mJXFOnRZTwJrBx-DudTNpjixkD88y1g2nfVQ@mail.gmail.com>
	<CACLX4jR67XzOR2X5zH2g4KqPuV_CJK-jGuTvZp-+C+j3q0=rGw@mail.gmail.com>
Message-ID: <CAFd54qPM1kAeFQqQgdYx0SfOB-PHTZkcMVT14pgDwp1FfdJ0BA@mail.gmail.com>

It is hard to say why async doesn't build if we don't even know what
commands were executed.

>From the look of it, I would blame ocamlbuild for doing something fishy.
When packing and when there is no mli for the pack, It touches the mli,
calls the compiler and then deletes the mli. I don't see how that's solving
anything, the code doesn't say it and there is actually a FIXME right at
that place, although nothing says what needs to be fixed. It is also the
only place in ocamlbuild where it is creates mlis this way.

On Thu, Sep 6, 2012 at 11:35 PM, Yaron Minsky <yminsky at janestreet.com>wrote:

> Looping in Nick, Valentin and Sweeks.  I think they've probably seen
> some of these issues before.
>
> y
>
> On Thu, Sep 6, 2012 at 6:34 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> > There's a horrible hack to get around this in the build-and-install
> script
> > to disable the creation of async.mli during the link step. Does anyone
> > understand why packing Async with a cmi causes this error?
> >
> >
> > On Thu, Sep 6, 2012 at 6:26 PM, Anil Madhavapeddy <anil at recoil.org>
> wrote:
> >>
> >> Linux/Debian gives me a ~30000 line backtrace in the Async build, using
> >> separate tarballs. If you have OPAM-0.5, you can try:
> >>
> >> $ opam remote -add core-dev git://github.com/avsm/opam-core-pre0
> >> $ opam install async
> >>
> >> File "lib/async.cmx", line 1, characters 0-1:
> >> Error: The implementation (obtained by packing)
> >>       does not match the interface lib/async.mli:
> >>       Modules do not match:
> >>         sig
> >>           module Backpatched :
> >>
> >>  <25,000 lines of signature snipped>
> >>
> >>       Values do not match:
> >>         val to_host_and_port :
> >>           string ->
> >>           int -> Async_extra.Import.Socket.Address.Inet.t
> where_to_connect
> >>       is not included in
> >>         val to_host_and_port :
> >>           string ->
> >>           int -> Async_extra.Import.Socket.Address.Inet.t
> where_to_connect
> >>
> >> Anyone else see this? Async_core,_extra,_unix seem to install ok on
> >> Debian, it's just the final pack that's failing on ocaml-3.12.1.
> >>
> >> -anil
> >>
> >>
> >> On 6 Sep 2012, at 15:25, Anil Madhavapeddy <anil at recoil.org> wrote:
> >>
> >> > The warnings are due to unused variables, mostly (such as
> linux_ext.ml
> >> > and the Epoll module having variables in there like 'let none = 0'
> which are
> >> > unused).  It's hard to see how to fix these without conditional
> compilation,
> >> > or just skipping the Linux_ext module entirely).
> >> >
> >> > The warn_error=false flag in the environment sounds great, but isn't
> >> > currently present in the tarballs.  It would be very easy to set in
> most
> >> > packaging systems, so that's a good alternative to turning it off by
> default
> >> > too.
> >> >
> >> > I'm trying a MacOS X 3.12.1 compile now to see how that goes...
> >> >
> >> > -anil
> >> >
> >> > On 6 Sep 2012, at 15:21, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> >> >
> >> >> Thanks Anil, I'll fix the packages to disable the warnings-as-errors.
> >> >> In the meantime, you should be able to build with "warn_error=false"
> in your
> >> >> environment.
> >> >> Aside from that, what warnings are you encountering?
> >> >>
> >> >> On Thu, Sep 6, 2012 at 5:35 PM, Anil Madhavapeddy <anil at recoil.org>
> >> >> wrote:
> >> >> On 8 Jul 2012, at 19:02, Markus Mottl <markus.mottl at gmail.com>
> wrote:
> >> >>
> >> >> > On Sun, Jul 8, 2012 at 5:12 PM, Anil Madhavapeddy <anil at recoil.org
> >
> >> >> > wrote:
> >> >> >> Also, is it necessary to have warnings-are-errors enabled in the
> >> >> >> released tarballs? It makes it awkward to test out new compiler
> versions,
> >> >> >> which usually introduce new ones every release.
> >> >> >
> >> >> > I agree with Anil that warnings-as-errors should not be enabled in
> >> >> > releases, only during development work.
> >> >>
> >> >>
> >> >> The latest pre-release Core tarballs also fail to compile under
> >> >> Homebrew/MacOS X (OCaml-4.00) due to warnings-as-errors still being
> >> >> activated on release tarballs.  Have you considered disabling this on
> >> >> release tarballs?
> >> >>
> >> >> -anil
> >> >>
> >> >>
> >> >
> >>
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120907/f8f7a0f1/attachment.html>

From nicolas at braud-santoni.eu  Fri Sep  7 11:20:14 2012
From: nicolas at braud-santoni.eu (Nicolas Braud-Santoni)
Date: Fri, 7 Sep 2012 12:20:14 +0200
Subject: Compose function operator
In-Reply-To: <CAMQaOgOFDuQPXGdtiQWCbN9_q5G+JV+uk40mNJxGeAfd0REwtg@mail.gmail.com>
References: <84233b57-4b25-4712-81eb-e30ec98d54cc@googlegroups.com>
	<CAK=fH+jzc59ccPkpkxrU+oG0_1qUsO_jiQ5rOZchn-Jr+VpN9w@mail.gmail.com>
	<fde573cc-4432-45a4-a408-7c41407b6248@googlegroups.com>
	<CADy1MasMTjjQXcn-oS27pDZS4T6ok0KCcQTCvnqozH6SSzATmw@mail.gmail.com>
	<e601804a-5f75-48e9-976e-dc7397de251b@googlegroups.com>
	<CACLX4jTU=Og-fnDpgAEzEFv1pPh3TKFhKJajLncxs=2DRwzZSg@mail.gmail.com>
	<bf1d9287-072a-4112-9d37-f96dfcb50cb4@googlegroups.com>
	<CACLX4jTVzyF6MjfxpTEOTdvDEvLDbsT7tBYyt4v8LiHZKroQmw@mail.gmail.com>
	<CALScVY=5Pm8VP6XV191QovyAskQ_nH2LVbBw5QxvJ6XyRQvAPA@mail.gmail.com>
	<CACLX4jS0h2vNAaDF07=HTUqUhvwpmpXXrYPT8Ki9qk7APOG91w@mail.gmail.com>
	<CAMQaOgPx-fGR3Z9Z6g56zdLkQtGzSehuJk4vuw18nHuPk5g8iQ@mail.gmail.com>
	<CAMQaOgOFDuQPXGdtiQWCbN9_q5G+JV+uk40mNJxGeAfd0REwtg@mail.gmail.com>
Message-ID: <CA+qp_4r6H0TaBECP4NrqbeKgttgAyB1JrBL6P_=LB3Rdt5cecg@mail.gmail.com>


Exactly.

As far as I know, the dot notation was chosen for this reason.

2012/9/6 Francois Berenger <francois.berenger.working at gmail.com>:
> On Wed, Sep 5, 2012 at 1:33 PM, Francois Berenger
> <francois.berenger.working at gmail.com> wrote:
>> <<pipe>> is a little too verbose I think.
>> But Sebastian's examples looks cool and readable.
>
> I think the notation is . in Haskell: i.e. (f . g) x = f (g x).
> It's not very far from the math notation which is a big dot
> if I remember correctly.


From anil at recoil.org  Sat Sep  8 01:43:01 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Fri, 7 Sep 2012 17:43:01 -0700
Subject: type_conv/ocaml4 release
In-Reply-To: <CAEDxudx=hh98khJRNgjCD=QYOxw7xY9kPWCXAqUWpMnJg+Kr3Q@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org> <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com> <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org> <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com> <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org> <CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com> <CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com> <CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com> <D4B1E5DF-2B3B-4A21-B574-BE9975118919@recoil.org> <CAEDxudx=hh98khJRNgjCD=QYOxw7xY9kPWCXAqUWpMnJg+Kr3Q@mail.gmail.com>
Message-ID: <4367EABA-A450-4A7E-A25D-95F45B7A66CB@recoil.org>

Trying it now. I've pushed updates to the avsm/opam-core-pre0 and am compiling them now.

Is there a hard requirement on ocaml-4.00.0 now? bin_prot's myocamlbuild:

+ + /usr/bin/ocamlopt.opt -I /usr/lib/ocaml/ocamlbuild unix.cmxa /usr/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa myocamlbuild.ml /usr/lib/ocaml/ocamlbuild/ocamlbuild.cmx -o myocamlbuild
+ File "myocamlbuild.ml", line 506, characters 24-50:
+ Error: Unbound value Filename.get_temp_dir_name

...which only appeared in ocaml-4.00.0, so 3.12.1 compilation fails (Debian/wheezy).

-anil

On 7 Sep 2012, at 17:13, Yury Sulsky <yury.sulsky at gmail.com> wrote:

> Hi Anil,
> 
> I've just uploaded new packages to https://ocaml.janestreet.com/ocaml-core/108.07.00-pre1/. I've moved the async hack down into base/async/setup.ml, so it should work when building async individually.
> 
> Could you take a look and see if they work for you?
> 
> Thanks,
> Yury
> 
> On Thu, Sep 6, 2012 at 7:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> Spot on... looks like OPAM might be leaking an environment variable that is pointing to the wrong DLL stubs directory after a compiler switch.  Should be easy to fix.
> 
> Sorry about that; I'll clean up the 25 different OCaml installations I have and do a more fresh build as soon as I get a chance!
> 
> -anil
> 
> 
> On 6 Sep 2012, at 16:09, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> 
>> Ah, okay. Anil, it looks like there might be some mixup in your install. The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere in ocaml-3.12.
>> Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS after all, which is why I didn't catch that unused value warning. I'll install and test with 4.00 on a Mac tomorrow.
>> 
>> On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>> Hi Markus,
>> 
>> A few of your sexplib changes didn't make it into this release, and I'll take a look at your patch queue to see what else we're missing. But I've been building and testing on Mac OS X. I'll see if I can recreate Anil's missing symbol problem (I haven't been testing with 3.12.1)
>> 
>> 
>> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com> wrote:
>> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
>> The warnings are due to unused variables,
>> 
>> You might also want to apply my Bitbucket patch queue for ocaml-core.  The resulting tree should build fine on Mac OS X, fixes a couple of bugs, and adds some useful features.
>> 
>> Regards,
>> Markus
>> 
>> 
>> -- 
>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>> 
>> 
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120907/f892688a/attachment.html>

From avsm2 at cl.cam.ac.uk  Sat Sep  8 02:19:09 2012
From: avsm2 at cl.cam.ac.uk (Anil Madhavapeddy)
Date: Fri, 7 Sep 2012 18:19:09 -0700
Subject: type_conv/ocaml4 release
In-Reply-To: <4367EABA-A450-4A7E-A25D-95F45B7A66CB@recoil.org>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org> <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com> <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org> <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com> <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org> <CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com> <CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com> <CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com> <D4B1E5DF-2B3B-4A21-B574-BE9975118919@recoil.org> <CAEDxudx=hh98khJRNgjCD=QYOxw7xY9kPWCXAqUWpMnJg+Kr3Q@mail.gmail.com> <4367EABA-A450-4A7E-A25D-95F45B7A66CB@recoil.org>
Message-ID: <1BCF4DD2-39CA-4F47-9FFB-CB485B0CE1A4@cl.cam.ac.uk>

Stream of notes here:

- Compiles on the Mac, hurrah!  Compiling my little HTTP library against it, and I notice:

Async_core:
(** [write_when_ready writer ~f] waits until there is space available in the pipe, and
    then calls [f write], where [write] can be used by [f] to write a single value into
    the pipe at a time.  [with_write] guarantees that the pipe is open when it calls [f],
    and hence that the writes will succeed, unless [f] itself closes the pipe. *)

- Pipe.with_writer is now gone, but there is still a reference to it in the ocamldoc above in the renamed function.

- Similarly, Deferred.whenever is now gone, but there is a reference that should be renamed to Deferred.dont_wait_for:
  async_core/async_stream.mli:(** [iter t ~f] = [whenever (iter' t ~f:(fun a -> f a; Deferred.unit))] *)

- The new name Deferred.don't_wait_for seems really awkward with the apostrophe in it.  Why not just call it 'do_not_wait_for' or 'dont_wait_for' ?  Its quite rare to have function names with special characters, and the apostrophe is easy to mistake for a type variable when scanning through code.  It may be too much hassle to change it now though...

- The unconditional use of GADTs in async_extra answers my earlier question about ocaml-4 being a requirement. I'll add a constraint to the OPAM packages.

- I like the new TCP.Where_to_listen use of GADTs. It's a much more self-documenting interface than before!

Cohttp only requires a small diff to compile with the new version. I'll test it over the weekend as I write tutorial notes.

-anil



On 7 Sep 2012, at 17:43, Anil Madhavapeddy <anil at recoil.org> wrote:

> Trying it now. I've pushed updates to the avsm/opam-core-pre0 and am compiling them now.
> 
> Is there a hard requirement on ocaml-4.00.0 now? bin_prot's myocamlbuild:
> 
> + + /usr/bin/ocamlopt.opt -I /usr/lib/ocaml/ocamlbuild unix.cmxa /usr/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa myocamlbuild.ml /usr/lib/ocaml/ocamlbuild/ocamlbuild.cmx -o myocamlbuild
> + File "myocamlbuild.ml", line 506, characters 24-50:
> + Error: Unbound value Filename.get_temp_dir_name
> 
> ...which only appeared in ocaml-4.00.0, so 3.12.1 compilation fails (Debian/wheezy).
> 
> -anil
> 
> On 7 Sep 2012, at 17:13, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> 
>> Hi Anil,
>> 
>> I've just uploaded new packages to https://ocaml.janestreet.com/ocaml-core/108.07.00-pre1/. I've moved the async hack down into base/async/setup.ml, so it should work when building async individually.
>> 
>> Could you take a look and see if they work for you?
>> 
>> Thanks,
>> Yury
>> 
>> On Thu, Sep 6, 2012 at 7:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> Spot on... looks like OPAM might be leaking an environment variable that is pointing to the wrong DLL stubs directory after a compiler switch.  Should be easy to fix.
>> 
>> Sorry about that; I'll clean up the 25 different OCaml installations I have and do a more fresh build as soon as I get a chance!
>> 
>> -anil
>> 
>> 
>> On 6 Sep 2012, at 16:09, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>> 
>>> Ah, okay. Anil, it looks like there might be some mixup in your install. The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere in ocaml-3.12.
>>> Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS after all, which is why I didn't catch that unused value warning. I'll install and test with 4.00 on a Mac tomorrow.
>>> 
>>> On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>> Hi Markus,
>>> 
>>> A few of your sexplib changes didn't make it into this release, and I'll take a look at your patch queue to see what else we're missing. But I've been building and testing on Mac OS X. I'll see if I can recreate Anil's missing symbol problem (I haven't been testing with 3.12.1)
>>> 
>>> 
>>> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com> wrote:
>>> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
>>> The warnings are due to unused variables,
>>> 
>>> You might also want to apply my Bitbucket patch queue for ocaml-core.  The resulting tree should build fine on Mac OS X, fixes a couple of bugs, and adds some useful features.
>>> 
>>> Regards,
>>> Markus
>>> 
>>> 
>>> -- 
>>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>>> 
>>> 
>> 
>> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120907/753d1ecd/attachment.html>

From avsm2 at cl.cam.ac.uk  Sat Sep  8 02:57:40 2012
From: avsm2 at cl.cam.ac.uk (Anil Madhavapeddy)
Date: Fri, 7 Sep 2012 18:57:40 -0700
Subject: type_conv/ocaml4 release
In-Reply-To: <4367EABA-A450-4A7E-A25D-95F45B7A66CB@recoil.org>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org> <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com> <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org> <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com> <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org> <CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com> <CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com> <CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com> <D4B1E5DF-2B3B-4A21-B574-BE9975118919@recoil.org> <CAEDxudx=hh98khJRNgjCD=QYOxw7xY9kPWCXAqUWpMnJg+Kr3Q@mail.gmail.com> <4367EABA-A450-4A7E-A25D-95F45B7A66CB@recoil.org>
Message-ID: <2E5B8BFF-346D-482F-ADCA-EFAC4C9AA667@cl.cam.ac.uk>

Stream of notes here:

- Compiles on the Mac, hurrah!  Compiling my little HTTP library against it, and I notice:

Async_core:
(** [write_when_ready writer ~f] waits until there is space available in the pipe, and
    then calls [f write], where [write] can be used by [f] to write a single value into
    the pipe at a time.  [with_write] guarantees that the pipe is open when it calls [f],
    and hence that the writes will succeed, unless [f] itself closes the pipe. *)

- Pipe.with_writer is now gone, but there is still a reference to it in the ocamldoc above in the renamed function.

- Similarly, Deferred.whenever is now gone, but there is a reference that should be renamed to Deferred.dont_wait_for:
  async_core/async_stream.mli:(** [iter t ~f] = [whenever (iter' t ~f:(fun a -> f a; Deferred.unit))] *)

- The new name Deferred.don't_wait_for seems really awkward with the apostrophe in it.  Why not just call it 'do_not_wait_for' or 'dont_wait_for' ?  Its quite rare to have function names with special characters, and the apostrophe is easy to mistake for a type variable when scanning through code.  It may be too much hassle to change it now though...

- The unconditional use of GADTs in async_extra answers my earlier question about ocaml-4 being a requirement. I'll add a constraint to the OPAM packages.

- I like the new TCP.Where_to_listen use of GADTs. It's a much more self-documenting interface than before!

Cohttp only requires a small diff to compile with the new version. I'll test it over the weekend as I write tutorial notes.

-anil



On 7 Sep 2012, at 17:43, Anil Madhavapeddy <anil at recoil.org> wrote:

> Trying it now. I've pushed updates to the avsm/opam-core-pre0 and am compiling them now.
> 
> Is there a hard requirement on ocaml-4.00.0 now? bin_prot's myocamlbuild:
> 
> + + /usr/bin/ocamlopt.opt -I /usr/lib/ocaml/ocamlbuild unix.cmxa /usr/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa myocamlbuild.ml /usr/lib/ocaml/ocamlbuild/ocamlbuild.cmx -o myocamlbuild
> + File "myocamlbuild.ml", line 506, characters 24-50:
> + Error: Unbound value Filename.get_temp_dir_name
> 
> ...which only appeared in ocaml-4.00.0, so 3.12.1 compilation fails (Debian/wheezy).
> 
> -anil
> 
> On 7 Sep 2012, at 17:13, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> 
>> Hi Anil,
>> 
>> I've just uploaded new packages to https://ocaml.janestreet.com/ocaml-core/108.07.00-pre1/. I've moved the async hack down into base/async/setup.ml, so it should work when building async individually.
>> 
>> Could you take a look and see if they work for you?
>> 
>> Thanks,
>> Yury
>> 
>> On Thu, Sep 6, 2012 at 7:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> Spot on... looks like OPAM might be leaking an environment variable that is pointing to the wrong DLL stubs directory after a compiler switch.  Should be easy to fix.
>> 
>> Sorry about that; I'll clean up the 25 different OCaml installations I have and do a more fresh build as soon as I get a chance!
>> 
>> -anil
>> 
>> 
>> On 6 Sep 2012, at 16:09, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>> 
>>> Ah, okay. Anil, it looks like there might be some mixup in your install. The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere in ocaml-3.12.
>>> Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS after all, which is why I didn't catch that unused value warning. I'll install and test with 4.00 on a Mac tomorrow.
>>> 
>>> On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>> Hi Markus,
>>> 
>>> A few of your sexplib changes didn't make it into this release, and I'll take a look at your patch queue to see what else we're missing. But I've been building and testing on Mac OS X. I'll see if I can recreate Anil's missing symbol problem (I haven't been testing with 3.12.1)
>>> 
>>> 
>>> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com> wrote:
>>> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
>>> The warnings are due to unused variables,
>>> 
>>> You might also want to apply my Bitbucket patch queue for ocaml-core.  The resulting tree should build fine on Mac OS X, fixes a couple of bugs, and adds some useful features.
>>> 
>>> Regards,
>>> Markus
>>> 
>>> 
>>> -- 
>>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>>> 
>>> 
>> 
>> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120907/e36da9e9/attachment.html>

From yury.sulsky at gmail.com  Sat Sep  8 01:13:32 2012
From: yury.sulsky at gmail.com (Yury Sulsky)
Date: Fri, 7 Sep 2012 20:13:32 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <D4B1E5DF-2B3B-4A21-B574-BE9975118919@recoil.org>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
	<98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
	<CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com>
	<CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com>
	<CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com>
	<D4B1E5DF-2B3B-4A21-B574-BE9975118919@recoil.org>
Message-ID: <CAEDxudx=hh98khJRNgjCD=QYOxw7xY9kPWCXAqUWpMnJg+Kr3Q@mail.gmail.com>

Hi Anil,

I've just uploaded new packages to
https://ocaml.janestreet.com/ocaml-core/108.07.00-pre1/. I've moved the
async hack down into base/async/setup.ml, so it should work when building
async individually.

Could you take a look and see if they work for you?

Thanks,
Yury

On Thu, Sep 6, 2012 at 7:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:

> Spot on... looks like OPAM might be leaking an environment variable that
> is pointing to the wrong DLL stubs directory after a compiler switch.
>  Should be easy to fix.
>
> Sorry about that; I'll clean up the 25 different OCaml installations I
> have and do a more fresh build as soon as I get a chance!
>
> -anil
>
>
> On 6 Sep 2012, at 16:09, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>
> Ah, okay. Anil, it looks like there might be some mixup in your install.
> The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere in
> ocaml-3.12.
> Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS
> after all, which is why I didn't catch that unused value warning. I'll
> install and test with 4.00 on a Mac tomorrow.
>
> On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>
>> Hi Markus,
>>
>> A few of your sexplib changes didn't make it into this release, and I'll
>> take a look at your patch queue to see what else we're missing. But I've
>> been building and testing on Mac OS X. I'll see if I can recreate Anil's
>> missing symbol problem (I haven't been testing with 3.12.1)
>>
>>
>> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com>wrote:
>>
>>> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
>>>
>>>> The warnings are due to unused variables,
>>>>
>>>
>>> You might also want to apply my Bitbucket patch queue for ocaml-core.
>>>  The resulting tree should build fine on Mac OS X, fixes a couple of bugs,
>>> and adds some useful features.
>>>
>>> Regards,
>>> Markus
>>>
>>>>
>>>
>>> --
>>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>>>
>>
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120907/0ccd2af4/attachment.html>

From yminsky at janestreet.com  Sat Sep  8 02:24:49 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Fri, 7 Sep 2012 21:24:49 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <4367EABA-A450-4A7E-A25D-95F45B7A66CB@recoil.org>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
	<98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
	<CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com>
	<CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com>
	<CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com>
	<D4B1E5DF-2B3B-4A21-B574-BE9975118919@recoil.org>
	<CAEDxudx=hh98khJRNgjCD=QYOxw7xY9kPWCXAqUWpMnJg+Kr3Q@mail.gmail.com>
	<4367EABA-A450-4A7E-A25D-95F45B7A66CB@recoil.org>
Message-ID: <CACLX4jSwBE=C+YpDgdZWQhVgTTF7877S9Vw2m5Uz9t7oR4R+3w@mail.gmail.com>


Doesn't seem like there should be.  We're only using 4.0
experimentally internally, so we definitely support 3.12.1 in our
internal tree.  Yury made some small modifications for the external
tarball, so maybe there's an issue there.

y

On Fri, Sep 7, 2012 at 8:43 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> Trying it now. I've pushed updates to the avsm/opam-core-pre0 and am
> compiling them now.
>
> Is there a hard requirement on ocaml-4.00.0 now? bin_prot's myocamlbuild:
>
> + + /usr/bin/ocamlopt.opt -I /usr/lib/ocaml/ocamlbuild unix.cmxa
> /usr/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa myocamlbuild.ml
> /usr/lib/ocaml/ocamlbuild/ocamlbuild.cmx -o myocamlbuild
> + File "myocamlbuild.ml", line 506, characters 24-50:
> + Error: Unbound value Filename.get_temp_dir_name
>
> ...which only appeared in ocaml-4.00.0, so 3.12.1 compilation fails
> (Debian/wheezy).
>
> -anil
>
> On 7 Sep 2012, at 17:13, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>
> Hi Anil,
>
> I've just uploaded new packages to
> https://ocaml.janestreet.com/ocaml-core/108.07.00-pre1/. I've moved the
> async hack down into base/async/setup.ml, so it should work when building
> async individually.
>
> Could you take a look and see if they work for you?
>
> Thanks,
> Yury
>
> On Thu, Sep 6, 2012 at 7:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>
>> Spot on... looks like OPAM might be leaking an environment variable that
>> is pointing to the wrong DLL stubs directory after a compiler switch.
>> Should be easy to fix.
>>
>> Sorry about that; I'll clean up the 25 different OCaml installations I
>> have and do a more fresh build as soon as I get a chance!
>>
>> -anil
>>
>>
>> On 6 Sep 2012, at 16:09, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>
>> Ah, okay. Anil, it looks like there might be some mixup in your install.
>> The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere in
>> ocaml-3.12.
>> Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS
>> after all, which is why I didn't catch that unused value warning. I'll
>> install and test with 4.00 on a Mac tomorrow.
>>
>> On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>>
>>> Hi Markus,
>>>
>>> A few of your sexplib changes didn't make it into this release, and I'll
>>> take a look at your patch queue to see what else we're missing. But I've
>>> been building and testing on Mac OS X. I'll see if I can recreate Anil's
>>> missing symbol problem (I haven't been testing with 3.12.1)
>>>
>>>
>>> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com>
>>> wrote:
>>>>
>>>> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
>>>>>
>>>>> The warnings are due to unused variables,
>>>>
>>>>
>>>> You might also want to apply my Bitbucket patch queue for ocaml-core.
>>>> The resulting tree should build fine on Mac OS X, fixes a couple of bugs,
>>>> and adds some useful features.
>>>>
>>>> Regards,
>>>> Markus
>>>>
>>>>
>>>>
>>>> --
>>>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>>>
>>>
>>
>>
>
>


From yury.sulsky at gmail.com  Sat Sep  8 04:48:26 2012
From: yury.sulsky at gmail.com (Yury Sulsky)
Date: Fri, 7 Sep 2012 23:48:26 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <CACLX4jSwBE=C+YpDgdZWQhVgTTF7877S9Vw2m5Uz9t7oR4R+3w@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
 <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
 <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org> <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
 <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org> <CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com>
 <CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com>
 <CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com>
 <D4B1E5DF-2B3B-4A21-B574-BE9975118919@recoil.org> <CAEDxudx=hh98khJRNgjCD=QYOxw7xY9kPWCXAqUWpMnJg+Kr3Q@mail.gmail.com>
 <4367EABA-A450-4A7E-A25D-95F45B7A66CB@recoil.org> <CACLX4jSwBE=C+YpDgdZWQhVgTTF7877S9Vw2m5Uz9t7oR4R+3w@mail.gmail.com>
Message-ID: <-1174972042362450028@unknownmsgid>


Yes, sorry that's my fault. Ill fix the packages tomorrow, but in the
meantime I think you can just globally replace
[Filename.get_temp_dir_name ()] with [Filename.temp_dir_name] in
*/{myocamlbuild,setup}.ml

Yury

On Sep 7, 2012, at 9:24 PM, Yaron Minsky <yminsky at janestreet.com> wrote:

> Doesn't seem like there should be.  We're only using 4.0
> experimentally internally, so we definitely support 3.12.1 in our
> internal tree.  Yury made some small modifications for the external
> tarball, so maybe there's an issue there.
>
> y
>
> On Fri, Sep 7, 2012 at 8:43 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> Trying it now. I've pushed updates to the avsm/opam-core-pre0 and am
>> compiling them now.
>>
>> Is there a hard requirement on ocaml-4.00.0 now? bin_prot's myocamlbuild:
>>
>> + + /usr/bin/ocamlopt.opt -I /usr/lib/ocaml/ocamlbuild unix.cmxa
>> /usr/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa myocamlbuild.ml
>> /usr/lib/ocaml/ocamlbuild/ocamlbuild.cmx -o myocamlbuild
>> + File "myocamlbuild.ml", line 506, characters 24-50:
>> + Error: Unbound value Filename.get_temp_dir_name
>>
>> ...which only appeared in ocaml-4.00.0, so 3.12.1 compilation fails
>> (Debian/wheezy).
>>
>> -anil
>>
>> On 7 Sep 2012, at 17:13, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>
>> Hi Anil,
>>
>> I've just uploaded new packages to
>> https://ocaml.janestreet.com/ocaml-core/108.07.00-pre1/. I've moved the
>> async hack down into base/async/setup.ml, so it should work when building
>> async individually.
>>
>> Could you take a look and see if they work for you?
>>
>> Thanks,
>> Yury
>>
>> On Thu, Sep 6, 2012 at 7:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>>
>>> Spot on... looks like OPAM might be leaking an environment variable that
>>> is pointing to the wrong DLL stubs directory after a compiler switch.
>>> Should be easy to fix.
>>>
>>> Sorry about that; I'll clean up the 25 different OCaml installations I
>>> have and do a more fresh build as soon as I get a chance!
>>>
>>> -anil
>>>
>>>
>>> On 6 Sep 2012, at 16:09, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>>
>>> Ah, okay. Anil, it looks like there might be some mixup in your install.
>>> The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere in
>>> ocaml-3.12.
>>> Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS
>>> after all, which is why I didn't catch that unused value warning. I'll
>>> install and test with 4.00 on a Mac tomorrow.
>>>
>>> On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>>>
>>>> Hi Markus,
>>>>
>>>> A few of your sexplib changes didn't make it into this release, and I'll
>>>> take a look at your patch queue to see what else we're missing. But I've
>>>> been building and testing on Mac OS X. I'll see if I can recreate Anil's
>>>> missing symbol problem (I haven't been testing with 3.12.1)
>>>>
>>>>
>>>> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com>
>>>> wrote:
>>>>>
>>>>> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
>>>>>>
>>>>>> The warnings are due to unused variables,
>>>>>
>>>>>
>>>>> You might also want to apply my Bitbucket patch queue for ocaml-core.
>>>>> The resulting tree should build fine on Mac OS X, fixes a couple of bugs,
>>>>> and adds some useful features.
>>>>>
>>>>> Regards,
>>>>> Markus
>>>>>
>>>>>
>>>>>
>>>>> --
>>>>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>>>>
>>>>
>>>
>>>
>>
>>


From avsm2 at cl.cam.ac.uk  Sat Sep  8 19:41:31 2012
From: avsm2 at cl.cam.ac.uk (Anil Madhavapeddy)
Date: Sat, 8 Sep 2012 11:41:31 -0700
Subject: Fwd: type_conv/ocaml4 release
References: <2E5B8BFF-346D-482F-ADCA-EFAC4C9AA667@cl.cam.ac.uk>
Message-ID: <33FEC878-4E05-4F25-BA1A-DB02D76A83E2@cl.cam.ac.uk>

Did this email make it through to the list? I never received it back, but other replies have come through.
-anil

Begin forwarded message:

> From: Anil Madhavapeddy <avsm2 at cl.cam.ac.uk>
> Subject: Re: type_conv/ocaml4 release
> Date: 7 September 2012 18:57:40 PDT
> To: ocaml-core at googlegroups.com
> 
> Stream of notes here:
> 
> - Compiles on the Mac, hurrah!  Compiling my little HTTP library against it, and I notice:
> 
> Async_core:
> (** [write_when_ready writer ~f] waits until there is space available in the pipe, and
>     then calls [f write], where [write] can be used by [f] to write a single value into
>     the pipe at a time.  [with_write] guarantees that the pipe is open when it calls [f],
>     and hence that the writes will succeed, unless [f] itself closes the pipe. *)
> 
> - Pipe.with_writer is now gone, but there is still a reference to it in the ocamldoc above in the renamed function.
> 
> - Similarly, Deferred.whenever is now gone, but there is a reference that should be renamed to Deferred.dont_wait_for:
>   async_core/async_stream.mli:(** [iter t ~f] = [whenever (iter' t ~f:(fun a -> f a; Deferred.unit))] *)
> 
> - The new name Deferred.don't_wait_for seems really awkward with the apostrophe in it.  Why not just call it 'do_not_wait_for' or 'dont_wait_for' ?  Its quite rare to have function names with special characters, and the apostrophe is easy to mistake for a type variable when scanning through code.  It may be too much hassle to change it now though...
> 
> - The unconditional use of GADTs in async_extra answers my earlier question about ocaml-4 being a requirement. I'll add a constraint to the OPAM packages.
> 
> - I like the new TCP.Where_to_listen use of GADTs. It's a much more self-documenting interface than before!
> 
> Cohttp only requires a small diff to compile with the new version. I'll test it over the weekend as I write tutorial notes.
> 
> -anil
> 
> 
> 
> On 7 Sep 2012, at 17:43, Anil Madhavapeddy <anil at recoil.org> wrote:
> 
>> Trying it now. I've pushed updates to the avsm/opam-core-pre0 and am compiling them now.
>> 
>> Is there a hard requirement on ocaml-4.00.0 now? bin_prot's myocamlbuild:
>> 
>> + + /usr/bin/ocamlopt.opt -I /usr/lib/ocaml/ocamlbuild unix.cmxa /usr/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa myocamlbuild.ml /usr/lib/ocaml/ocamlbuild/ocamlbuild.cmx -o myocamlbuild
>> + File "myocamlbuild.ml", line 506, characters 24-50:
>> + Error: Unbound value Filename.get_temp_dir_name
>> 
>> ...which only appeared in ocaml-4.00.0, so 3.12.1 compilation fails (Debian/wheezy).
>> 
>> -anil
>> 
>> On 7 Sep 2012, at 17:13, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>> 
>>> Hi Anil,
>>> 
>>> I've just uploaded new packages to https://ocaml.janestreet.com/ocaml-core/108.07.00-pre1/. I've moved the async hack down into base/async/setup.ml, so it should work when building async individually.
>>> 
>>> Could you take a look and see if they work for you?
>>> 
>>> Thanks,
>>> Yury
>>> 
>>> On Thu, Sep 6, 2012 at 7:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>> Spot on... looks like OPAM might be leaking an environment variable that is pointing to the wrong DLL stubs directory after a compiler switch.  Should be easy to fix.
>>> 
>>> Sorry about that; I'll clean up the 25 different OCaml installations I have and do a more fresh build as soon as I get a chance!
>>> 
>>> -anil
>>> 
>>> 
>>> On 6 Sep 2012, at 16:09, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>> 
>>>> Ah, okay. Anil, it looks like there might be some mixup in your install. The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere in ocaml-3.12.
>>>> Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS after all, which is why I didn't catch that unused value warning. I'll install and test with 4.00 on a Mac tomorrow.
>>>> 
>>>> On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>>> Hi Markus,
>>>> 
>>>> A few of your sexplib changes didn't make it into this release, and I'll take a look at your patch queue to see what else we're missing. But I've been building and testing on Mac OS X. I'll see if I can recreate Anil's missing symbol problem (I haven't been testing with 3.12.1)
>>>> 
>>>> 
>>>> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com> wrote:
>>>> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
>>>> The warnings are due to unused variables,
>>>> 
>>>> You might also want to apply my Bitbucket patch queue for ocaml-core.  The resulting tree should build fine on Mac OS X, fixes a couple of bugs, and adds some useful features.
>>>> 
>>>> Regards,
>>>> Markus
>>>> 
>>>> 
>>>> -- 
>>>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>>>> 
>>>> 
>>> 
>>> 
>> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120908/c1742125/attachment.html>

From anil at recoil.org  Sat Sep  8 20:04:16 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Sat, 8 Sep 2012 12:04:16 -0700
Subject: type_conv/ocaml4 release
In-Reply-To: <CADKNfh++8af17hCoZyUbwVKazVOD+aSxETTRFrWnOmF=xYc=ng@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org> <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com> <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org> <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com> <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org> <CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com> <CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com> <CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com> <D4B1E5DF-2B3B-4A21-B574-BE9975118919@recoil.org> <CAEDxudx=hh98khJRNgjCD=QYOxw7xY9kPWCXAqUWpMnJg+Kr3Q@mail.gmail.com> <4367EABA-A450-4A7E-A25D-95F45B7A66CB@recoil.org> <1BCF4DD2-39CA-4F47-9FFB-CB485B0CE1A4@cl.cam.ac.uk> <CADKNfh++8af17hCoZyUbwVKazVOD+aSxETTRFrWnOmF=xYc=ng@mail.gmail.com>
Message-ID: <D3746CDE-0086-45C3-8798-715DDA56B787@recoil.org>


On 8 Sep 2012, at 11:55, Yaron Minsky <yminsky at gmail.com> wrote:

>> 
>> - The unconditional use of GADTs in async_extra answers my earlier
>>  question about ocaml-4 being a requirement. I'll add a constraint
>>  to the OPAM packages.
> 
> Where specifically?  As I said, our internal tree doesn't use GADTs,
> since everything must compile against 3.12.1 to get through our
> compile daemon.
> 
>> - I like the new TCP.Where_to_listen use of GADTs. It's a much more
>>  self-documenting interface than before!
> 
> The version I'm looking at doesn't require GADTs, so again, I'm
> confused.

Sorry, ignore this chunk. My brain read the constraint clause as a
new GADT use, whereas it's been in OCaml for ages.  Coding on Caltrain...

-anil


From yminsky at gmail.com  Sat Sep  8 19:45:52 2012
From: yminsky at gmail.com (Yaron Minsky)
Date: Sat, 8 Sep 2012 14:45:52 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <33FEC878-4E05-4F25-BA1A-DB02D76A83E2@cl.cam.ac.uk>
References: <2E5B8BFF-346D-482F-ADCA-EFAC4C9AA667@cl.cam.ac.uk>
	<33FEC878-4E05-4F25-BA1A-DB02D76A83E2@cl.cam.ac.uk>
Message-ID: <CADKNfhLoS7dLkLbUznLd4m1rXdYLuGARKFXYopfdtmwQqQEB+A@mail.gmail.com>


It got blocked, and I missed the notification.  Fixed!

On Sat, Sep 8, 2012 at 2:41 PM, Anil Madhavapeddy <avsm2 at cl.cam.ac.uk> wrote:
> Did this email make it through to the list? I never received it back, but
> other replies have come through.
> -anil
>
> Begin forwarded message:
>
> From: Anil Madhavapeddy <avsm2 at cl.cam.ac.uk>
> Subject: Re: type_conv/ocaml4 release
> Date: 7 September 2012 18:57:40 PDT
> To: ocaml-core at googlegroups.com
>
> Stream of notes here:
>
> - Compiles on the Mac, hurrah!  Compiling my little HTTP library against it,
> and I notice:
>
> Async_core:
> (** [write_when_ready writer ~f] waits until there is space available in the
> pipe, and
>     then calls [f write], where [write] can be used by [f] to write a single
> value into
>     the pipe at a time.  [with_write] guarantees that the pipe is open when
> it calls [f],
>     and hence that the writes will succeed, unless [f] itself closes the
> pipe. *)
>
> - Pipe.with_writer is now gone, but there is still a reference to it in the
> ocamldoc above in the renamed function.
>
> - Similarly, Deferred.whenever is now gone, but there is a reference that
> should be renamed to Deferred.dont_wait_for:
>   async_core/async_stream.mli:(** [iter t ~f] = [whenever (iter' t ~f:(fun a
> -> f a; Deferred.unit))] *)
>
> - The new name Deferred.don't_wait_for seems really awkward with the
> apostrophe in it.  Why not just call it 'do_not_wait_for' or 'dont_wait_for'
> ?  Its quite rare to have function names with special characters, and the
> apostrophe is easy to mistake for a type variable when scanning through
> code.  It may be too much hassle to change it now though...
>
> - The unconditional use of GADTs in async_extra answers my earlier question
> about ocaml-4 being a requirement. I'll add a constraint to the OPAM
> packages.
>
> - I like the new TCP.Where_to_listen use of GADTs. It's a much more
> self-documenting interface than before!
>
> Cohttp only requires a small diff to compile with the new version. I'll test
> it over the weekend as I write tutorial notes.
>
> -anil
>
>
>
> On 7 Sep 2012, at 17:43, Anil Madhavapeddy <anil at recoil.org> wrote:
>
> Trying it now. I've pushed updates to the avsm/opam-core-pre0 and am
> compiling them now.
>
> Is there a hard requirement on ocaml-4.00.0 now? bin_prot's myocamlbuild:
>
> + + /usr/bin/ocamlopt.opt -I /usr/lib/ocaml/ocamlbuild unix.cmxa
> /usr/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa myocamlbuild.ml
> /usr/lib/ocaml/ocamlbuild/ocamlbuild.cmx -o myocamlbuild
> + File "myocamlbuild.ml", line 506, characters 24-50:
> + Error: Unbound value Filename.get_temp_dir_name
>
> ...which only appeared in ocaml-4.00.0, so 3.12.1 compilation fails
> (Debian/wheezy).
>
> -anil
>
> On 7 Sep 2012, at 17:13, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>
> Hi Anil,
>
> I've just uploaded new packages to
> https://ocaml.janestreet.com/ocaml-core/108.07.00-pre1/. I've moved the
> async hack down into base/async/setup.ml, so it should work when building
> async individually.
>
> Could you take a look and see if they work for you?
>
> Thanks,
> Yury
>
> On Thu, Sep 6, 2012 at 7:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>
>> Spot on... looks like OPAM might be leaking an environment variable that
>> is pointing to the wrong DLL stubs directory after a compiler switch.
>> Should be easy to fix.
>>
>> Sorry about that; I'll clean up the 25 different OCaml installations I
>> have and do a more fresh build as soon as I get a chance!
>>
>> -anil
>>
>>
>> On 6 Sep 2012, at 16:09, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>
>> Ah, okay. Anil, it looks like there might be some mixup in your install.
>> The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere in
>> ocaml-3.12.
>> Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS
>> after all, which is why I didn't catch that unused value warning. I'll
>> install and test with 4.00 on a Mac tomorrow.
>>
>> On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>>
>>> Hi Markus,
>>>
>>> A few of your sexplib changes didn't make it into this release, and I'll
>>> take a look at your patch queue to see what else we're missing. But I've
>>> been building and testing on Mac OS X. I'll see if I can recreate Anil's
>>> missing symbol problem (I haven't been testing with 3.12.1)
>>>
>>>
>>> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com>
>>> wrote:
>>>>
>>>> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
>>>>>
>>>>> The warnings are due to unused variables,
>>>>
>>>>
>>>> You might also want to apply my Bitbucket patch queue for ocaml-core.
>>>> The resulting tree should build fine on Mac OS X, fixes a couple of bugs,
>>>> and adds some useful features.
>>>>
>>>> Regards,
>>>> Markus
>>>>
>>>>
>>>>
>>>> --
>>>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>>>
>>>
>>
>>
>
>
>
>


From yminsky at gmail.com  Sat Sep  8 19:55:42 2012
From: yminsky at gmail.com (Yaron Minsky)
Date: Sat, 8 Sep 2012 14:55:42 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <1BCF4DD2-39CA-4F47-9FFB-CB485B0CE1A4@cl.cam.ac.uk>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
	<98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
	<CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com>
	<CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com>
	<CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com>
	<D4B1E5DF-2B3B-4A21-B574-BE9975118919@recoil.org>
	<CAEDxudx=hh98khJRNgjCD=QYOxw7xY9kPWCXAqUWpMnJg+Kr3Q@mail.gmail.com>
	<4367EABA-A450-4A7E-A25D-95F45B7A66CB@recoil.org>
	<1BCF4DD2-39CA-4F47-9FFB-CB485B0CE1A4@cl.cam.ac.uk>
Message-ID: <CADKNfh++8af17hCoZyUbwVKazVOD+aSxETTRFrWnOmF=xYc=ng@mail.gmail.com>


On Fri, Sep 7, 2012 at 9:19 PM, Anil Madhavapeddy <avsm2 at cl.cam.ac.uk> wrote:
> Stream of notes here:
>
> - Compiles on the Mac, hurrah!  Compiling my little HTTP library against it,
>   and I notice:

Great.

> Async_core:
> (** [write_when_ready writer ~f] waits until there is space available in the
>     pipe, and then calls [f write], where [write] can be used by [f]
>     to write a single value into the pipe at a time.  [with_write]
>     guarantees that the pipe is open when it calls [f], and hence
>     that the writes will succeed, unless [f] itself closes the
>     pipe. *)
>
> - Pipe.with_writer is now gone, but there is still a reference to it
>   in the ocamldoc above in the renamed function.

Thanks.  Will fix!

> - Similarly, Deferred.whenever is now gone, but there is a reference that
>   should be renamed to Deferred.dont_wait_for:
>   async_core/async_stream.mli:(** [iter t ~f] = [whenever (iter' t ~f:(fun a
>                                    -> f a; Deferred.unit))] *)

Will fix!

> - The new name Deferred.don't_wait_for seems really awkward with the
>   apostrophe in it.  Why not just call it 'do_not_wait_for' or
>   'dont_wait_for' ?  Its quite rare to have function names with
>   special characters, and the apostrophe is easy to mistake for a
>   type variable when scanning through code.  It may be too much
>   hassle to change it now though...

Yeah, we had a bunch of unsatisfactory names to choose between, and
I'm somewhat regret changing it, but it's far too much pain to change
it again now.  I agree the apostrophe is not ideal, but I was for it
before I was against it...

> - The unconditional use of GADTs in async_extra answers my earlier
>   question about ocaml-4 being a requirement. I'll add a constraint
>   to the OPAM packages.

Where specifically?  As I said, our internal tree doesn't use GADTs,
since everything must compile against 3.12.1 to get through our
compile daemon.

> - I like the new TCP.Where_to_listen use of GADTs. It's a much more
>   self-documenting interface than before!

The version I'm looking at doesn't require GADTs, so again, I'm
confused.

> Cohttp only requires a small diff to compile with the new
> version. I'll test it over the weekend as I write tutorial notes.
>
> -anil
>
>
>
> On 7 Sep 2012, at 17:43, Anil Madhavapeddy <anil at recoil.org> wrote:
>
> Trying it now. I've pushed updates to the avsm/opam-core-pre0 and am
> compiling them now.
>
> Is there a hard requirement on ocaml-4.00.0 now? bin_prot's myocamlbuild:
>
> + + /usr/bin/ocamlopt.opt -I /usr/lib/ocaml/ocamlbuild unix.cmxa
> /usr/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa myocamlbuild.ml
> /usr/lib/ocaml/ocamlbuild/ocamlbuild.cmx -o myocamlbuild
> + File "myocamlbuild.ml", line 506, characters 24-50:
> + Error: Unbound value Filename.get_temp_dir_name
>
> ...which only appeared in ocaml-4.00.0, so 3.12.1 compilation fails
> (Debian/wheezy).
>
> -anil
>
> On 7 Sep 2012, at 17:13, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>
> Hi Anil,
>
> I've just uploaded new packages to
> https://ocaml.janestreet.com/ocaml-core/108.07.00-pre1/. I've moved the
> async hack down into base/async/setup.ml, so it should work when building
> async individually.
>
> Could you take a look and see if they work for you?
>
> Thanks,
> Yury
>
> On Thu, Sep 6, 2012 at 7:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>
>> Spot on... looks like OPAM might be leaking an environment variable that
>> is pointing to the wrong DLL stubs directory after a compiler switch.
>> Should be easy to fix.
>>
>> Sorry about that; I'll clean up the 25 different OCaml installations I
>> have and do a more fresh build as soon as I get a chance!
>>
>> -anil
>>
>>
>> On 6 Sep 2012, at 16:09, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>
>> Ah, okay. Anil, it looks like there might be some mixup in your install.
>> The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere in
>> ocaml-3.12.
>> Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS
>> after all, which is why I didn't catch that unused value warning. I'll
>> install and test with 4.00 on a Mac tomorrow.
>>
>> On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>>
>>> Hi Markus,
>>>
>>> A few of your sexplib changes didn't make it into this release, and I'll
>>> take a look at your patch queue to see what else we're missing. But I've
>>> been building and testing on Mac OS X. I'll see if I can recreate Anil's
>>> missing symbol problem (I haven't been testing with 3.12.1)
>>>
>>>
>>> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com>
>>> wrote:
>>>>
>>>> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
>>>>>
>>>>> The warnings are due to unused variables,
>>>>
>>>>
>>>> You might also want to apply my Bitbucket patch queue for ocaml-core.
>>>> The resulting tree should build fine on Mac OS X, fixes a couple of bugs,
>>>> and adds some useful features.
>>>>
>>>> Regards,
>>>> Markus
>>>>
>>>>
>>>>
>>>> --
>>>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>>>
>>>
>>
>>
>
>
>


From yury.sulsky at gmail.com  Sun Sep  9 17:00:11 2012
From: yury.sulsky at gmail.com (Yury Sulsky)
Date: Sun, 9 Sep 2012 12:00:11 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <-1174972042362450028@unknownmsgid>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
	<98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
	<CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com>
	<CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com>
	<CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com>
	<D4B1E5DF-2B3B-4A21-B574-BE9975118919@recoil.org>
	<CAEDxudx=hh98khJRNgjCD=QYOxw7xY9kPWCXAqUWpMnJg+Kr3Q@mail.gmail.com>
	<4367EABA-A450-4A7E-A25D-95F45B7A66CB@recoil.org>
	<CACLX4jSwBE=C+YpDgdZWQhVgTTF7877S9Vw2m5Uz9t7oR4R+3w@mail.gmail.com>
	<-1174972042362450028@unknownmsgid>
Message-ID: <CAEDxudwny91WbBd4rkxWe1VcwfB8VUzc4NMb-TZRLxtkKdkCoQ@mail.gmail.com>

Hi Anil, I just wanted to let you know that the updated packages are up
now. Since the only change is that they compile with 3.12 now, I just
replaced the existing 108.07.00-pre1 tarballs.

Yury

On Fri, Sep 7, 2012 at 11:48 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:

> Yes, sorry that's my fault. Ill fix the packages tomorrow, but in the
> meantime I think you can just globally replace
> [Filename.get_temp_dir_name ()] with [Filename.temp_dir_name] in
> */{myocamlbuild,setup}.ml
>
> Yury
>
> On Sep 7, 2012, at 9:24 PM, Yaron Minsky <yminsky at janestreet.com> wrote:
>
> > Doesn't seem like there should be.  We're only using 4.0
> > experimentally internally, so we definitely support 3.12.1 in our
> > internal tree.  Yury made some small modifications for the external
> > tarball, so maybe there's an issue there.
> >
> > y
> >
> > On Fri, Sep 7, 2012 at 8:43 PM, Anil Madhavapeddy <anil at recoil.org>
> wrote:
> >> Trying it now. I've pushed updates to the avsm/opam-core-pre0 and am
> >> compiling them now.
> >>
> >> Is there a hard requirement on ocaml-4.00.0 now? bin_prot's
> myocamlbuild:
> >>
> >> + + /usr/bin/ocamlopt.opt -I /usr/lib/ocaml/ocamlbuild unix.cmxa
> >> /usr/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa myocamlbuild.ml
> >> /usr/lib/ocaml/ocamlbuild/ocamlbuild.cmx -o myocamlbuild
> >> + File "myocamlbuild.ml", line 506, characters 24-50:
> >> + Error: Unbound value Filename.get_temp_dir_name
> >>
> >> ...which only appeared in ocaml-4.00.0, so 3.12.1 compilation fails
> >> (Debian/wheezy).
> >>
> >> -anil
> >>
> >> On 7 Sep 2012, at 17:13, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> >>
> >> Hi Anil,
> >>
> >> I've just uploaded new packages to
> >> https://ocaml.janestreet.com/ocaml-core/108.07.00-pre1/. I've moved the
> >> async hack down into base/async/setup.ml, so it should work when
> building
> >> async individually.
> >>
> >> Could you take a look and see if they work for you?
> >>
> >> Thanks,
> >> Yury
> >>
> >> On Thu, Sep 6, 2012 at 7:12 PM, Anil Madhavapeddy <anil at recoil.org>
> wrote:
> >>>
> >>> Spot on... looks like OPAM might be leaking an environment variable
> that
> >>> is pointing to the wrong DLL stubs directory after a compiler switch.
> >>> Should be easy to fix.
> >>>
> >>> Sorry about that; I'll clean up the 25 different OCaml installations I
> >>> have and do a more fresh build as soon as I get a chance!
> >>>
> >>> -anil
> >>>
> >>>
> >>> On 6 Sep 2012, at 16:09, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> >>>
> >>> Ah, okay. Anil, it looks like there might be some mixup in your
> install.
> >>> The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere
> in
> >>> ocaml-3.12.
> >>> Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS
> >>> after all, which is why I didn't catch that unused value warning. I'll
> >>> install and test with 4.00 on a Mac tomorrow.
> >>>
> >>> On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com>
> wrote:
> >>>>
> >>>> Hi Markus,
> >>>>
> >>>> A few of your sexplib changes didn't make it into this release, and
> I'll
> >>>> take a look at your patch queue to see what else we're missing. But
> I've
> >>>> been building and testing on Mac OS X. I'll see if I can recreate
> Anil's
> >>>> missing symbol problem (I haven't been testing with 3.12.1)
> >>>>
> >>>>
> >>>> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com>
> >>>> wrote:
> >>>>>
> >>>>> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
> >>>>>>
> >>>>>> The warnings are due to unused variables,
> >>>>>
> >>>>>
> >>>>> You might also want to apply my Bitbucket patch queue for ocaml-core.
> >>>>> The resulting tree should build fine on Mac OS X, fixes a couple of
> bugs,
> >>>>> and adds some useful features.
> >>>>>
> >>>>> Regards,
> >>>>> Markus
> >>>>>
> >>>>>
> >>>>>
> >>>>> --
> >>>>> Markus Mottl        http://www.ocaml.info
> markus.mottl at gmail.com
> >>>>
> >>>>
> >>>
> >>>
> >>
> >>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120909/568901ea/attachment.html>

From anil at recoil.org  Sun Sep  9 23:59:55 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Sun, 9 Sep 2012 15:59:55 -0700
Subject: type_conv/ocaml4 release
In-Reply-To: <CAEDxudwny91WbBd4rkxWe1VcwfB8VUzc4NMb-TZRLxtkKdkCoQ@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org> <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com> <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org> <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com> <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org> <CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com> <CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com> <CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com> <D4B1E5DF-2B3B-4A21-B574-BE9975118919@recoil.org> <CAEDxudx=hh98khJRNgjCD=QYOxw7xY9kPWCXAqUWpMnJg+Kr3Q@mail.gmail.com> <4367EABA-A450-4A7E-A25D-95F45B7A66CB@recoil.org> <CACLX4jSwBE=C+YpDgdZWQhVgTTF7877S9Vw2m5Uz9t7oR4R+3w@mail.gmail.com> <-1174972042362450028@unknownmsgid> <CAEDxudwny91WbBd4rkxWe1VcwfB8VUzc4NMb-TZRLxtkKdkCoQ@mail.gmail.com>
Message-ID: <09320B80-BE21-4855-8602-11FEF24CE45F@recoil.org>

Thanks Yury; I've pushed an update to my avsm/opam-core-pre0 repo and am testing now.

For future releases, it would be useful not to ever modify distribution tarballs once released, as the file checksums are recorded separately in the various upstream packaging systems.

-anil

On 9 Sep 2012, at 09:00, Yury Sulsky <yury.sulsky at gmail.com> wrote:

> Hi Anil, I just wanted to let you know that the updated packages are up now. Since the only change is that they compile with 3.12 now, I just replaced the existing 108.07.00-pre1 tarballs.
> 
> Yury
> 
> On Fri, Sep 7, 2012 at 11:48 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> Yes, sorry that's my fault. Ill fix the packages tomorrow, but in the
> meantime I think you can just globally replace
> [Filename.get_temp_dir_name ()] with [Filename.temp_dir_name] in
> */{myocamlbuild,setup}.ml
> 
> Yury
> 
> On Sep 7, 2012, at 9:24 PM, Yaron Minsky <yminsky at janestreet.com> wrote:
> 
> > Doesn't seem like there should be.  We're only using 4.0
> > experimentally internally, so we definitely support 3.12.1 in our
> > internal tree.  Yury made some small modifications for the external
> > tarball, so maybe there's an issue there.
> >
> > y
> >
> > On Fri, Sep 7, 2012 at 8:43 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> >> Trying it now. I've pushed updates to the avsm/opam-core-pre0 and am
> >> compiling them now.
> >>
> >> Is there a hard requirement on ocaml-4.00.0 now? bin_prot's myocamlbuild:
> >>
> >> + + /usr/bin/ocamlopt.opt -I /usr/lib/ocaml/ocamlbuild unix.cmxa
> >> /usr/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa myocamlbuild.ml
> >> /usr/lib/ocaml/ocamlbuild/ocamlbuild.cmx -o myocamlbuild
> >> + File "myocamlbuild.ml", line 506, characters 24-50:
> >> + Error: Unbound value Filename.get_temp_dir_name
> >>
> >> ...which only appeared in ocaml-4.00.0, so 3.12.1 compilation fails
> >> (Debian/wheezy).
> >>
> >> -anil
> >>
> >> On 7 Sep 2012, at 17:13, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> >>
> >> Hi Anil,
> >>
> >> I've just uploaded new packages to
> >> https://ocaml.janestreet.com/ocaml-core/108.07.00-pre1/. I've moved the
> >> async hack down into base/async/setup.ml, so it should work when building
> >> async individually.
> >>
> >> Could you take a look and see if they work for you?
> >>
> >> Thanks,
> >> Yury
> >>
> >> On Thu, Sep 6, 2012 at 7:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> >>>
> >>> Spot on... looks like OPAM might be leaking an environment variable that
> >>> is pointing to the wrong DLL stubs directory after a compiler switch.
> >>> Should be easy to fix.
> >>>
> >>> Sorry about that; I'll clean up the 25 different OCaml installations I
> >>> have and do a more fresh build as soon as I get a chance!
> >>>
> >>> -anil
> >>>
> >>>
> >>> On 6 Sep 2012, at 16:09, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> >>>
> >>> Ah, okay. Anil, it looks like there might be some mixup in your install.
> >>> The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere in
> >>> ocaml-3.12.
> >>> Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS
> >>> after all, which is why I didn't catch that unused value warning. I'll
> >>> install and test with 4.00 on a Mac tomorrow.
> >>>
> >>> On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> >>>>
> >>>> Hi Markus,
> >>>>
> >>>> A few of your sexplib changes didn't make it into this release, and I'll
> >>>> take a look at your patch queue to see what else we're missing. But I've
> >>>> been building and testing on Mac OS X. I'll see if I can recreate Anil's
> >>>> missing symbol problem (I haven't been testing with 3.12.1)
> >>>>
> >>>>
> >>>> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com>
> >>>> wrote:
> >>>>>
> >>>>> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
> >>>>>>
> >>>>>> The warnings are due to unused variables,
> >>>>>
> >>>>>
> >>>>> You might also want to apply my Bitbucket patch queue for ocaml-core.
> >>>>> The resulting tree should build fine on Mac OS X, fixes a couple of bugs,
> >>>>> and adds some useful features.
> >>>>>
> >>>>> Regards,
> >>>>> Markus
> >>>>>
> >>>>>
> >>>>>
> >>>>> --
> >>>>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
> >>>>
> >>>>
> >>>
> >>>
> >>
> >>
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120909/a0900080/attachment.html>

From dmhouse at gmail.com  Sun Sep  9 21:02:25 2012
From: dmhouse at gmail.com (David House)
Date: Sun, 9 Sep 2012 21:02:25 +0100
Subject: Core on a Mac
In-Reply-To: <CACLX4jR9rC5BNAqdsd5KENHYRf5XzgYn-fk5hb_BEcLC+59V_A@mail.gmail.com>
References: <CADy1MavvzhL3+Q2WPV+4u1xcDmNcEUSCTvUMUu=A8SXPb96Nxg@mail.gmail.com>
	<027F8960-82EA-432D-884E-4E900389088F@recoil.org>
	<CAMu2m2LezwGjxo9v6ZV2JPdN58L6oPeRWno7K_5OA2e88pPpjQ@mail.gmail.com>
	<96D17667-DE37-4116-85FB-583F61D1B7C7@recoil.org>
	<CACLX4jR9rC5BNAqdsd5KENHYRf5XzgYn-fk5hb_BEcLC+59V_A@mail.gmail.com>
Message-ID: <CADy1MasFR2gojfU2KkJhKre0K5K7mXMmuX-sAVUODbssp_xxtA@mail.gmail.com>


Thanks guys. I finally got round to trying this out a few days ago,
and the opam route worked with basically no hitches.


On 3 September 2012 21:58, Yaron Minsky <yminsky at janestreet.com> wrote:
> I've also been using opam, and it's been awesome.  It's improving
> quickly, it has lots of useful features, and it does a good job of
> picking the versions to install.  (It uses a SAT-solver for picking a
> compatible set of version numbers.)  It's still young, but given that
> it's already pretty stable.
>
> y
>
> On Fri, Aug 31, 2012 at 6:18 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> The Homebrew OCaml includes 10.8-specific fixes [1] too, which cause
>> sporadic crashes otherwise with exception backtraces in particular.  And
>> once OPAM is bootstrapped, it supports multiple local development
>> environments via `opam switch`.  This is assuming its solver isn't going off
>> and upgrading everything, which Thomas has mostly fixed now :)
>>
>> [1] http://caml.inria.fr/mantis/view.php?id=5700
>>
>> -a
>>
>> On 31 Aug 2012, at 15:14, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
>>
>> I install core from the release tarball on my OS X 10.7.4 Mac without
>> problems. It's on top of a base installation of ocaml, findlib, etc. from
>> godi.
>>
>> On Fri, Aug 31, 2012 at 5:51 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>>
>>> On 31 Aug 2012, at 14:48, David House <dmhouse at gmail.com> wrote:
>>>
>>> > I'm interested in getting core working on my Mac. Has anyone tried
>>> > this, and how well does it work?
>>>
>>>
>>> - Install Homebrew from http://github.com/mxcl/homebrew
>>> - $ brew install ocaml
>>> - $ brew tap mirage/ocaml      # hook in custom ocaml packages
>>> - $ brew install opam --HEAD   # get the very latest OPAM
>>> - $ opam install core async
>>> - $ eval `opam config -env`    # import the right PATH
>>>
>>> Some of these steps will disappear in a bit (e.g. the tap is only
>>> required until a more stable OPAM appears, which will hopefully be
>>> before ICFP in a couple of weeks).
>>>
>>> Note that Homebrew just updated to ocaml-4.00.0, so hopefully Core
>>> works with it too.
>>>
>>> -anil
>>
>>
>>


From seanmcl at gmail.com  Thu Sep 13 22:41:57 2012
From: seanmcl at gmail.com (Sean McLaughlin)
Date: Thu, 13 Sep 2012 17:41:57 -0400
Subject: ocaml-core doesn't build with opam installed ocaml
Message-ID: <CAO4dZbdMoPZmKqdv1Bdw0rrt2mHpns3Fe6=UkX3TW-CRG8HxBQ@mail.gmail.com>

Hi,

I tried to build core today using my opam-installed ocaml compiler.  It
failed due to the error-enabled warnings.
It seems like we should try to get this to work out of the box, in case
users want to work on core.

Best,

Sean

$ hg clone https://seanmcl at bitbucket.org/yminsky/ocaml-coreocaml-core-yminsky
requesting all changes
adding changesets
adding manifests
adding file changes
added 140 changesets with 2188 changes to 1172 files
updating to branch default
cd ocaml-core
899 files updated, 0 files merged, 0 files removed, 0 files unresolved
$ cd ocaml-core-yminsky/
/usr/local/src/ocaml-core-yminsky
$ ./build-and-install
=> base/type_conv
   * uninstalling
   * configuring
   * compiling
ocaml setup.ml -build
/home/seanmcl/.opam/4.00.0/bin/ocamlopt.opt -I
/home/seanmcl/.opam/4.00.0/lib/ocaml/ocamlbuild unix.cmxa
/home/seanmcl/.opam/4.00.0/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa
myocamlbuild.ml/home/seanmcl/.opam/4.00.0/lib/ocaml/ocamlbuild/ocamlbuild.cmx
-o
myocamlbuild
ocamlfind ocamldep -package camlp4.quotations -package camlp4.extend
-modules lib/pa_type_conv.mli > lib/pa_type_conv.mli.depends
ocamlfind ocamlc -c -g -w @Aemr-28 -strict-sequence -package
camlp4.quotations -package camlp4.extend -I lib -o lib/pa_type_conv.cmi
lib/pa_type_conv.mli
ocamlfind ocamldep -package camlp4.quotations -package camlp4.extend
-syntax camlp4o -modules lib/pa_type_conv.ml > lib/pa_type_conv.ml.depends
ocamlfind ocamlc -c -g -w @Aemr-28 -strict-sequence -package
camlp4.quotations -package camlp4.extend -syntax camlp4o -I lib -o
lib/pa_type_conv.cmo lib/pa_type_conv.ml
+ ocamlfind ocamlc -c -g -w @Aemr-28 -strict-sequence -package
camlp4.quotations -package camlp4.extend -syntax camlp4o -I lib -o
lib/pa_type_conv.cmo lib/pa_type_conv.ml
 File "lib/pa_type_conv.ml", line 275, characters 19-1267:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(TyTypePol (_, _, _)|TyAnP _|TyAnM _)
File "lib/pa_type_conv.ml", line 4, characters 0-11:
Warning 33: unused open Lexing.
File "lib/pa_type_conv.ml", line 12, characters 4-8:
Warning 32: unused value both.
File "lib/pa_type_conv.ml", line 1:
Error: Error-enabled warnings (3 occurrences)
Command exited with code 2.
E: Failure("Command '/home/seanmcl/.opam/4.00.0/bin/ocamlbuild
lib/pa_type_conv.cma -tag debug' terminated with error code 10")
make: *** [build] Error 1
*** ERROR: Couldn't compile type_conv
EXIT STATUS 1
/usr/local/src/ocaml-core-yminsky
$
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120913/dcd8be4e/attachment.html>

From yury.sulsky at gmail.com  Thu Sep 13 23:13:45 2012
From: yury.sulsky at gmail.com (Yury Sulsky)
Date: Thu, 13 Sep 2012 18:13:45 -0400
Subject: ocaml-core doesn't build with opam installed ocaml
In-Reply-To: <CAO4dZbdMoPZmKqdv1Bdw0rrt2mHpns3Fe6=UkX3TW-CRG8HxBQ@mail.gmail.com>
References: <CAO4dZbdMoPZmKqdv1Bdw0rrt2mHpns3Fe6=UkX3TW-CRG8HxBQ@mail.gmail.com>
Message-ID: <CAEDxudwxHH2GqULNG=bXPXgWPcMCkj_tWEHAoRTRmScP+n_M=w@mail.gmail.com>

Hi Sean, the released packages are more up-to-date than the bitbucket tree
right now. The tree will get updated with the next release, 108.08.

Yury

On Thu, Sep 13, 2012 at 5:41 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:

> Hi,
>
> I tried to build core today using my opam-installed ocaml compiler.  It
> failed due to the error-enabled warnings.
> It seems like we should try to get this to work out of the box, in case
> users want to work on core.
>
> Best,
>
> Sean
>
> $ hg clone https://seanmcl at bitbucket.org/yminsky/ocaml-coreocaml-core-yminsky
> requesting all changes
> adding changesets
> adding manifests
> adding file changes
> added 140 changesets with 2188 changes to 1172 files
> updating to branch default
> cd ocaml-core
> 899 files updated, 0 files merged, 0 files removed, 0 files unresolved
> $ cd ocaml-core-yminsky/
> /usr/local/src/ocaml-core-yminsky
> $ ./build-and-install
> => base/type_conv
>    * uninstalling
>    * configuring
>    * compiling
> ocaml setup.ml -build
> /home/seanmcl/.opam/4.00.0/bin/ocamlopt.opt -I
> /home/seanmcl/.opam/4.00.0/lib/ocaml/ocamlbuild unix.cmxa
> /home/seanmcl/.opam/4.00.0/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa
> myocamlbuild.ml/home/seanmcl/.opam/4.00.0/lib/ocaml/ocamlbuild/ocamlbuild.cmx -o
> myocamlbuild
> ocamlfind ocamldep -package camlp4.quotations -package camlp4.extend
> -modules lib/pa_type_conv.mli > lib/pa_type_conv.mli.depends
> ocamlfind ocamlc -c -g -w @Aemr-28 -strict-sequence -package
> camlp4.quotations -package camlp4.extend -I lib -o lib/pa_type_conv.cmi
> lib/pa_type_conv.mli
> ocamlfind ocamldep -package camlp4.quotations -package camlp4.extend
> -syntax camlp4o -modules lib/pa_type_conv.ml > lib/pa_type_conv.ml.depends
> ocamlfind ocamlc -c -g -w @Aemr-28 -strict-sequence -package
> camlp4.quotations -package camlp4.extend -syntax camlp4o -I lib -o
> lib/pa_type_conv.cmo lib/pa_type_conv.ml
> + ocamlfind ocamlc -c -g -w @Aemr-28 -strict-sequence -package
> camlp4.quotations -package camlp4.extend -syntax camlp4o -I lib -o
> lib/pa_type_conv.cmo lib/pa_type_conv.ml
>  File "lib/pa_type_conv.ml", line 275, characters 19-1267:
> Warning 8: this pattern-matching is not exhaustive.
> Here is an example of a value that is not matched:
> (TyTypePol (_, _, _)|TyAnP _|TyAnM _)
> File "lib/pa_type_conv.ml", line 4, characters 0-11:
> Warning 33: unused open Lexing.
> File "lib/pa_type_conv.ml", line 12, characters 4-8:
> Warning 32: unused value both.
> File "lib/pa_type_conv.ml", line 1:
> Error: Error-enabled warnings (3 occurrences)
> Command exited with code 2.
> E: Failure("Command '/home/seanmcl/.opam/4.00.0/bin/ocamlbuild
> lib/pa_type_conv.cma -tag debug' terminated with error code 10")
> make: *** [build] Error 1
> *** ERROR: Couldn't compile type_conv
> EXIT STATUS 1
> /usr/local/src/ocaml-core-yminsky
> $
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120913/2a6d3159/attachment.html>

From seanmcl at gmail.com  Sat Sep 15 21:12:28 2012
From: seanmcl at gmail.com (Sean McLaughlin)
Date: Sat, 15 Sep 2012 16:12:28 -0400
Subject: core + opam
Message-ID: <CAO4dZbeCX+iDqozMsD1ZBEPF0KCARzyHaoBYgcOxj1kZoR2a1w@mail.gmail.com>

Hi,

I'm experiencing problems compiling core with opam.  This seems to be due
to the way opam separates the compiled stub files
(in .opam/4.00.0/lib/stublibs/dllbin_prot_stubs.so) from the libraries
themselves (.opam/4.00.0/lib/bin_prot/*.cmx).  I'm not sure if we should
fix this on the Jane Street side in the build system, or if opam's ocaml
should know about this directory during linking.

The failure occurs for me on both on OSX and Linux.  Could this be a
problem with my install of opam?  Has anyone else got this to work?  Before
JS releases a tarball, do you try to compile with opam?

Best,

Sean

+ ocamlfind ocamldep -package variantslib.syntax -package variantslib
-package unix -package threads -package sexplib.syntax -package sexplib
-package res -package pa_pipebang -package pa_ounit -package
fieldslib.syntax -package fieldslib -package comparelib.syntax -package
bin_prot.syntax -package bin_prot -package bigarray -syntax camlp4o
-modules lib/array_permute.ml > lib/array_permute.ml.depends
Camlp4: Uncaught exception: DynLoader.Error
("/Users/seanmcl/.opam/4.00.0/lib/bin_prot/bin_prot.cma", "error loading
shared library: dllbin_prot_stubs.so: dlopen(dllbin_prot_stubs.so, 138):
image not found")
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120915/cfdb13ae/attachment.html>

From seanmcl at gmail.com  Sat Sep 15 21:14:54 2012
From: seanmcl at gmail.com (Sean McLaughlin)
Date: Sat, 15 Sep 2012 16:14:54 -0400
Subject: core + opam
In-Reply-To: <CAO4dZbeCX+iDqozMsD1ZBEPF0KCARzyHaoBYgcOxj1kZoR2a1w@mail.gmail.com>
References: <CAO4dZbeCX+iDqozMsD1ZBEPF0KCARzyHaoBYgcOxj1kZoR2a1w@mail.gmail.com>
Message-ID: <CAO4dZbc+wuGrM3iURHtTgLQGx63N+rLnHa9E9KrHQYNt=iRbnA@mail.gmail.com>

I forgot to mention I'm trying

https://ocaml.janestreet.com/ocaml-core/108.07.00-pre1/core-suite-
108.07.00-pre1.tar.gz

On Sat, Sep 15, 2012 at 4:12 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:

> Hi,
>
> I'm experiencing problems compiling core with opam.  This seems to be due
> to the way opam separates the compiled stub files
> (in .opam/4.00.0/lib/stublibs/dllbin_prot_stubs.so) from the libraries
> themselves (.opam/4.00.0/lib/bin_prot/*.cmx).  I'm not sure if we should
> fix this on the Jane Street side in the build system, or if opam's ocaml
> should know about this directory during linking.
>
> The failure occurs for me on both on OSX and Linux.  Could this be a
> problem with my install of opam?  Has anyone else got this to work?  Before
> JS releases a tarball, do you try to compile with opam?
>
> Best,
>
> Sean
>
> + ocamlfind ocamldep -package variantslib.syntax -package variantslib
> -package unix -package threads -package sexplib.syntax -package sexplib
> -package res -package pa_pipebang -package pa_ounit -package
> fieldslib.syntax -package fieldslib -package comparelib.syntax -package
> bin_prot.syntax -package bin_prot -package bigarray -syntax camlp4o
> -modules lib/array_permute.ml > lib/array_permute.ml.depends
> Camlp4: Uncaught exception: DynLoader.Error
> ("/Users/seanmcl/.opam/4.00.0/lib/bin_prot/bin_prot.cma", "error loading
> shared library: dllbin_prot_stubs.so: dlopen(dllbin_prot_stubs.so, 138):
> image not found")
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120915/c4b56f19/attachment.html>

From seanmcl at gmail.com  Sat Sep 15 21:53:33 2012
From: seanmcl at gmail.com (Sean McLaughlin)
Date: Sat, 15 Sep 2012 16:53:33 -0400
Subject: core + opam (Resolved)
Message-ID: <CAO4dZberb0Br57QQTkfefGvwoaqktM5L=UXzb_0CrtmCSRNeBQ@mail.gmail.com>

I didn't realize you need to call

  eval `opam config -env`

before every compilation.  This fixed the problem.  Sorry for the noise.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120915/da1cf1ac/attachment.html>

From yminsky at janestreet.com  Sun Sep 16 02:44:26 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Sun, 16 Sep 2012 03:44:26 +0200
Subject: core + opam (Resolved)
In-Reply-To: <CAO4dZberb0Br57QQTkfefGvwoaqktM5L=UXzb_0CrtmCSRNeBQ@mail.gmail.com>
References: <CAO4dZberb0Br57QQTkfefGvwoaqktM5L=UXzb_0CrtmCSRNeBQ@mail.gmail.com>
Message-ID: <CACLX4jRps6DqhoBhtDCb8go5tC=+=FRL4HFKcZxt_AsHuddrpA@mail.gmail.com>


No problem.  You should really just put that into your bashrc...

y

On Sat, Sep 15, 2012 at 10:53 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:
>
> I didn't realize you need to call
>
>   eval `opam config -env`
>
> before every compilation.  This fixed the problem.  Sorry for the noise.


From dmhouse at gmail.com  Sun Sep 16 19:18:50 2012
From: dmhouse at gmail.com (David House)
Date: Sun, 16 Sep 2012 19:18:50 +0100
Subject: core + opam (Resolved)
In-Reply-To: <CACLX4jRps6DqhoBhtDCb8go5tC=+=FRL4HFKcZxt_AsHuddrpA@mail.gmail.com>
References: <CAO4dZberb0Br57QQTkfefGvwoaqktM5L=UXzb_0CrtmCSRNeBQ@mail.gmail.com>
	<CACLX4jRps6DqhoBhtDCb8go5tC=+=FRL4HFKcZxt_AsHuddrpA@mail.gmail.com>
Message-ID: <CADy1MasJNGekOYRzRs=1f-NK5uswUacFLfZf4zpr_j-Gm+kTVg@mail.gmail.com>


I also think opam could offer to do this for you.


On 16 September 2012 02:44, Yaron Minsky <yminsky at janestreet.com> wrote:
> No problem.  You should really just put that into your bashrc...
>
> y
>
> On Sat, Sep 15, 2012 at 10:53 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:
>>
>> I didn't realize you need to call
>>
>>   eval `opam config -env`
>>
>> before every compilation.  This fixed the problem.  Sorry for the noise.


From anil at recoil.org  Sun Sep 16 19:21:35 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Sun, 16 Sep 2012 19:21:35 +0100
Subject: core + opam (Resolved)
In-Reply-To: <CADy1MasJNGekOYRzRs=1f-NK5uswUacFLfZf4zpr_j-Gm+kTVg@mail.gmail.com>
References: <CAO4dZberb0Br57QQTkfefGvwoaqktM5L=UXzb_0CrtmCSRNeBQ@mail.gmail.com> <CACLX4jRps6DqhoBhtDCb8go5tC=+=FRL4HFKcZxt_AsHuddrpA@mail.gmail.com> <CADy1MasJNGekOYRzRs=1f-NK5uswUacFLfZf4zpr_j-Gm+kTVg@mail.gmail.com>
Message-ID: <1D777330-10CC-4565-9DE7-77FEF7AB8E7D@recoil.org>


OPAM can't do the shell eval automatically.

However, there is a bug here anyway.  All of the shells invoked by OPAM
(including the builds of the packages) should have the correct environment
variables set, so it's very odd that CAML_LD_LIBRARY_PATH appears to be
incorrect.  You shouldn't need to run the eval for opam invocations: only for
using the OCaml environment outside of OPAM.

What OPAM version are you using?

-a

On 16 Sep 2012, at 19:18, David House <dmhouse at gmail.com> wrote:

> I also think opam could offer to do this for you.
> 
> 
> On 16 September 2012 02:44, Yaron Minsky <yminsky at janestreet.com> wrote:
>> No problem.  You should really just put that into your bashrc...
>> 
>> y
>> 
>> On Sat, Sep 15, 2012 at 10:53 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:
>>> 
>>> I didn't realize you need to call
>>> 
>>>  eval `opam config -env`
>>> 
>>> before every compilation.  This fixed the problem.  Sorry for the noise.
> 



From dmhouse at gmail.com  Sun Sep 16 19:30:38 2012
From: dmhouse at gmail.com (David House)
Date: Sun, 16 Sep 2012 19:30:38 +0100
Subject: core + opam (Resolved)
In-Reply-To: <1D777330-10CC-4565-9DE7-77FEF7AB8E7D@recoil.org>
References: <CAO4dZberb0Br57QQTkfefGvwoaqktM5L=UXzb_0CrtmCSRNeBQ@mail.gmail.com>
	<CACLX4jRps6DqhoBhtDCb8go5tC=+=FRL4HFKcZxt_AsHuddrpA@mail.gmail.com>
	<CADy1MasJNGekOYRzRs=1f-NK5uswUacFLfZf4zpr_j-Gm+kTVg@mail.gmail.com>
	<1D777330-10CC-4565-9DE7-77FEF7AB8E7D@recoil.org>
Message-ID: <CADy1MauvQzoWAY2QywoGDCvkN1GEhccwi_X-hY5EQZ-KJiqozg@mail.gmail.com>


On 16 September 2012 19:21, Anil Madhavapeddy <anil at recoil.org> wrote:
> OPAM can't do the shell eval automatically.

I mean, it could offer to edit your bashrc for you. Every little helps... :)


From anil at recoil.org  Sun Sep 16 19:51:10 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Sun, 16 Sep 2012 19:51:10 +0100
Subject: core + opam (Resolved)
In-Reply-To: <CADy1MauvQzoWAY2QywoGDCvkN1GEhccwi_X-hY5EQZ-KJiqozg@mail.gmail.com>
References: <CAO4dZberb0Br57QQTkfefGvwoaqktM5L=UXzb_0CrtmCSRNeBQ@mail.gmail.com> <CACLX4jRps6DqhoBhtDCb8go5tC=+=FRL4HFKcZxt_AsHuddrpA@mail.gmail.com> <CADy1MasJNGekOYRzRs=1f-NK5uswUacFLfZf4zpr_j-Gm+kTVg@mail.gmail.com> <1D777330-10CC-4565-9DE7-77FEF7AB8E7D@recoil.org> <CADy1MauvQzoWAY2QywoGDCvkN1GEhccwi_X-hY5EQZ-KJiqozg@mail.gmail.com>
Message-ID: <29E1FA6E-605A-46C0-92F3-EDFBFC9495FC@recoil.org>


On 16 Sep 2012, at 19:30, David House <dmhouse at gmail.com> wrote:

> On 16 September 2012 19:21, Anil Madhavapeddy <anil at recoil.org> wrote:
>> OPAM can't do the shell eval automatically.
> 
> I mean, it could offer to edit your bashrc for you. Every little helps... :)
> 

You should see my bashrc. No machine could edit that :-)

This is indeed a good thing for opam init to suggest (and remove the "would you like to install crucial base packages  that will cause odd errors if you select N") prompt that it currently offers.

On github as https://github.com/OCamlPro/opam/issues/151

-a



From thomas.gazagnaire at gmail.com  Mon Sep 17 08:45:54 2012
From: thomas.gazagnaire at gmail.com (Thomas Gazagnaire)
Date: Mon, 17 Sep 2012 09:45:54 +0200
Subject: core + opam
In-Reply-To: <CAO4dZbeCX+iDqozMsD1ZBEPF0KCARzyHaoBYgcOxj1kZoR2a1w@mail.gmail.com>
References: <CAO4dZbeCX+iDqozMsD1ZBEPF0KCARzyHaoBYgcOxj1kZoR2a1w@mail.gmail.com>
Message-ID: <E29DFC4C-C041-4542-8B79-1352E9694B2B@ocamlpro.com>


Hi Sean,

are you compiling core packaged with opam (ie. opam install core) or you are compiling the archive manually ? In the first case, opam should automatically set-up the OCAML_LD_LIBRARY_PATH correctly; in the second case, you should call 'eval `opam config -env`' to update your env variables before compiling (or add it to your .bashrc as suggested by Yaron).

--
Thomas

On Sep 15, 2012, at 10:12 PM, Sean McLaughlin wrote:

> Hi,
> 
> I'm experiencing problems compiling core with opam.  This seems to be due to the way opam separates the compiled stub files (in .opam/4.00.0/lib/stublibs/dllbin_prot_stubs.so) from the libraries themselves (.opam/4.00.0/lib/bin_prot/*.cmx).  I'm not sure if we should fix this on the Jane Street side in the build system, or if opam's ocaml should know about this directory during linking.  
> 
> The failure occurs for me on both on OSX and Linux.  Could this be a problem with my install of opam?  Has anyone else got this to work?  Before JS releases a tarball, do you try to compile with opam?
> 
> Best,
> 
> Sean
> 
> + ocamlfind ocamldep -package variantslib.syntax -package variantslib -package unix -package threads -package sexplib.syntax -package sexplib -package res -package pa_pipebang -package pa_ounit -package fieldslib.syntax -package fieldslib -package comparelib.syntax -package bin_prot.syntax -package bin_prot -package bigarray -syntax camlp4o -modules lib/array_permute.ml > lib/array_permute.ml.depends
> Camlp4: Uncaught exception: DynLoader.Error ("/Users/seanmcl/.opam/4.00.0/lib/bin_prot/bin_prot.cma", "error loading shared library: dllbin_prot_stubs.so: dlopen(dllbin_prot_stubs.so, 138): image not found")
> 
> 



From seanmcl at gmail.com  Mon Sep 17 19:40:55 2012
From: seanmcl at gmail.com (Sean McLaughlin)
Date: Mon, 17 Sep 2012 14:40:55 -0400
Subject: opam 'remove' not working
Message-ID: <CAO4dZbc+N-jbt-u-Eu4nNb25wUbd7VNH6fFsz7HJo40N=pBb1A@mail.gmail.com>

Hi,

I'm trying to work on core, and am having some trouble with opam.  I
downloaded the latest tarball

  ocaml-core-108.07.00

and everything compiled fine.  Then I edited some code in

  ocaml-core-108.07.00/core-108.07.00/lib

and ran

  /usr/local/src/ocaml-core-108.07.00/core-108.07.00
  $ ocaml setup.ml -build

which completed fine. Then I tried to install, but got the following error

$ ocaml setup.ml -install
ocamlfind: Package core is already installed
 - (file /Users/seanmcl/.opam/4.00.0/lib/core/META already exists)
E: Failure("Command ''/Users/seanmcl/.opam/4.00.0/bin/ocamlfind' install
core lib/META _build/top/core_install_printers.cmx
_build/top/core_install_printers.cmi _build/top/core_top.cmxs
_build/top/core_top.a _build/top/core_top.cmxa _build/top/core_top.cma top/
core_install_printers.ml _build/lib/core.cmxs _build/lib/core.a
_build/lib/core.cmxa _build/lib/core.cma _build/lib/core.cmi
_build/lib/dllcore_stubs.so _build/lib/libcore_stubs.a lib/zone.mli
lib/word_size.mli lib/with_return.mli lib/weekday.mli lib/unpack_buffer.mli
lib/univ_map.mli lib/univ.mli lib/unit.mli
lib/unique_id_intf.mllib/unique_id.mli lib/union_find.mli
lib/tuple.mli lib/timer.mli lib/
time_internal.ml lib/time.mli lib/thread_safe_queue.mli
lib/t.mllib/sys_open_patch.mli lib/
substring_intf.ml lib/substring.mli lib/string_id.mli lib/stringable.ml lib/
std_internal.ml lib/std.ml lib/staged.mli
lib/stable_unit_test_intf.mllib/stable_unit_test.mli lib/
stable_internal.ml lib/stable_containers.mli lib/stable.ml lib/squeue.mli
lib/span.mli lib/space_safe_tuple.mli lib/source_code_position.mli
lib/signal.mli lib/sexpable.ml lib/set_once.mli
lib/robustly_comparable.mllib/result.mli lib/ref.mli
lib/quickcheck.mli lib/pretty_printer.mli lib/
polymorphic_compare_intf.ml lib/polymorphic_compare.mli
lib/piecewise_linear.mli lib/pid.mli lib/out_channel.mli lib/or_error.mli
lib/ordered_collection_common.mli lib/option.mli lib/only_in_test.mli
lib/ofday_unit_tests_v1.mli lib/ofday.mli lib/no_polymorphic_compare.mli
lib/nano_mutex.mli lib/mutex0.ml lib/month.mli lib/monad.ml lib/memo.mli
lib/make_substring.ml lib/lock_file.mli lib/linux_ext.mli lib/int_set.mli
lib/int_replace_polymorphic_compare.mli lib/int_intf.ml
lib/interval_intf.mllib/interval.mli lib/
interfaces.ml lib/int_conversions.ml lib/intable.ml
lib/inline_tests.mllib/info.mli lib/in_channel.mli
lib/identifiable.mli lib/host_and_port.mli
lib/heap.mli lib/hash_set_intf.ml lib/hash_set.mli lib/hash_queue.ml lib/
hash_heap.ml lib/hashable.ml lib/fqueue.mli lib/force_once.mli lib/fn.mli
lib/float_robust_compare.mli lib/float_intf.ml
lib/floatable.mllib/float.mli lib/exn.mli lib/error.mli
lib/doubly_linked.mli
lib/dequeue.mli lib/date.mli lib/daemon.mli lib/crc.mli lib/core_unix.mli
lib/core_thread.mli lib/core_sys.mli lib/core_string.mli lib/core_stack.mli
lib/core_sexp.mli lib/core_set_unit_tests.mli
lib/core_set_intf.mllib/core_set.mli lib/core_random.mli
lib/core_queue.mli lib/core_printf.mli
lib/core_printexc.mli lib/core_nativeint.mli lib/core_mutex.mli
lib/core_map_unit_tests.mli lib/core_map_intf.ml lib/core_map.mli
lib/core_list.mli lib/core_lazy.mli lib/core_int64.mli lib/core_int63.mli
lib/core_int32.mli lib/core_int.mli
lib/core_hashtbl_intf.mllib/core_hashtbl.mli lib/core_gc.mli
lib/core_filename.mli lib/
core_field.ml lib/core_condition.mli lib/core_char.mli
lib/core_bin_prot.mllib/core_array.mli lib/core_arg.mli lib/
container.ml lib/constrained_float.ml lib/comparator.mli lib/comparable.mllib/
commutative_group.ml lib/common0.ml lib/common.mli lib/command.mli lib/
caml.ml lib/byte_units.mli lib/bucket.ml lib/bounded_int_table.mli
lib/bool.mli lib/blang.mli lib/binary_packing.mli
lib/binable0.mllib/binable.mli lib/bigsubstring.mli
lib/bigstring_marshal.mli
lib/bigstring.mli lib/bigbuffer.mli lib/bag.mli lib/backtrace.mli
lib/avltree.mli lib/array_permute.ml' terminated with error code 2")
EXIT STATUS 1

I tried doing

  opam remove core

which completed without error.  But the files are not removed from

  .opam/4.00.0/lib/core

and the -install step still complains that there's an existing META file
and refuses to install itself.

Please let me know what I'm doing wrong.

Thanks,

Sean

Is there an opam mailing list yet so I don't spam the wrong ocamlpro guys?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120917/dae2eb43/attachment.html>

From seanmcl at gmail.com  Mon Sep 17 19:43:41 2012
From: seanmcl at gmail.com (Sean McLaughlin)
Date: Mon, 17 Sep 2012 14:43:41 -0400
Subject: opam 'remove' not working
In-Reply-To: <CAO4dZbc+N-jbt-u-Eu4nNb25wUbd7VNH6fFsz7HJo40N=pBb1A@mail.gmail.com>
References: <CAO4dZbc+N-jbt-u-Eu4nNb25wUbd7VNH6fFsz7HJo40N=pBb1A@mail.gmail.com>
Message-ID: <CAO4dZbeJb=YFMkC+SCuDp6euTbCHN_FOUfdhTGg9c7L0vMLEFw@mail.gmail.com>

PS: I know it's 'opam remove' that is not working, because even after doing

  opam remove core

I can do

$ ocaml
...
# #require "core";;

and it loads the old cma file.



On Mon, Sep 17, 2012 at 2:40 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:

> Hi,
>
> I'm trying to work on core, and am having some trouble with opam.  I
> downloaded the latest tarball
>
>   ocaml-core-108.07.00
>
> and everything compiled fine.  Then I edited some code in
>
>   ocaml-core-108.07.00/core-108.07.00/lib
>
> and ran
>
>   /usr/local/src/ocaml-core-108.07.00/core-108.07.00
>   $ ocaml setup.ml -build
>
> which completed fine. Then I tried to install, but got the following error
>
> $ ocaml setup.ml -install
> ocamlfind: Package core is already installed
>  - (file /Users/seanmcl/.opam/4.00.0/lib/core/META already exists)
> E: Failure("Command ''/Users/seanmcl/.opam/4.00.0/bin/ocamlfind' install
> core lib/META _build/top/core_install_printers.cmx
> _build/top/core_install_printers.cmi _build/top/core_top.cmxs
> _build/top/core_top.a _build/top/core_top.cmxa _build/top/core_top.cma top/
> core_install_printers.ml _build/lib/core.cmxs _build/lib/core.a
> _build/lib/core.cmxa _build/lib/core.cma _build/lib/core.cmi
> _build/lib/dllcore_stubs.so _build/lib/libcore_stubs.a lib/zone.mli
> lib/word_size.mli lib/with_return.mli lib/weekday.mli lib/unpack_buffer.mli
> lib/univ_map.mli lib/univ.mli lib/unit.mli lib/unique_id_intf.mllib/unique_id.mli lib/union_find.mli lib/tuple.mli lib/timer.mli lib/
> time_internal.ml lib/time.mli lib/thread_safe_queue.mli lib/t.mllib/sys_open_patch.mli lib/
> substring_intf.ml lib/substring.mli lib/string_id.mli lib/stringable.mllib/
> std_internal.ml lib/std.ml lib/staged.mli lib/stable_unit_test_intf.mllib/stable_unit_test.mli lib/
> stable_internal.ml lib/stable_containers.mli lib/stable.ml lib/squeue.mli
> lib/span.mli lib/space_safe_tuple.mli lib/source_code_position.mli
> lib/signal.mli lib/sexpable.ml lib/set_once.mli lib/robustly_comparable.mllib/result.mli lib/ref.mli lib/quickcheck.mli lib/pretty_printer.mli lib/
> polymorphic_compare_intf.ml lib/polymorphic_compare.mli
> lib/piecewise_linear.mli lib/pid.mli lib/out_channel.mli lib/or_error.mli
> lib/ordered_collection_common.mli lib/option.mli lib/only_in_test.mli
> lib/ofday_unit_tests_v1.mli lib/ofday.mli lib/no_polymorphic_compare.mli
> lib/nano_mutex.mli lib/mutex0.ml lib/month.mli lib/monad.ml lib/memo.mli
> lib/make_substring.ml lib/lock_file.mli lib/linux_ext.mli lib/int_set.mli
> lib/int_replace_polymorphic_compare.mli lib/int_intf.ml lib/
> interval_intf.ml lib/interval.mli lib/interfaces.ml lib/int_conversions.mllib/
> intable.ml lib/inline_tests.ml lib/info.mli lib/in_channel.mli
> lib/identifiable.mli lib/host_and_port.mli lib/heap.mli lib/
> hash_set_intf.ml lib/hash_set.mli lib/hash_queue.ml lib/hash_heap.ml lib/
> hashable.ml lib/fqueue.mli lib/force_once.mli lib/fn.mli
> lib/float_robust_compare.mli lib/float_intf.ml lib/floatable.mllib/float.mli lib/exn.mli lib/error.mli lib/doubly_linked.mli
> lib/dequeue.mli lib/date.mli lib/daemon.mli lib/crc.mli lib/core_unix.mli
> lib/core_thread.mli lib/core_sys.mli lib/core_string.mli lib/core_stack.mli
> lib/core_sexp.mli lib/core_set_unit_tests.mli lib/core_set_intf.mllib/core_set.mli lib/core_random.mli lib/core_queue.mli lib/core_printf.mli
> lib/core_printexc.mli lib/core_nativeint.mli lib/core_mutex.mli
> lib/core_map_unit_tests.mli lib/core_map_intf.ml lib/core_map.mli
> lib/core_list.mli lib/core_lazy.mli lib/core_int64.mli lib/core_int63.mli
> lib/core_int32.mli lib/core_int.mli lib/core_hashtbl_intf.mllib/core_hashtbl.mli lib/core_gc.mli lib/core_filename.mli lib/
> core_field.ml lib/core_condition.mli lib/core_char.mli lib/
> core_bin_prot.ml lib/core_array.mli lib/core_arg.mli lib/container.ml lib/
> constrained_float.ml lib/comparator.mli lib/comparable.ml lib/
> commutative_group.ml lib/common0.ml lib/common.mli lib/command.mli lib/
> caml.ml lib/byte_units.mli lib/bucket.ml lib/bounded_int_table.mli
> lib/bool.mli lib/blang.mli lib/binary_packing.mli lib/binable0.mllib/binable.mli lib/bigsubstring.mli lib/bigstring_marshal.mli
> lib/bigstring.mli lib/bigbuffer.mli lib/bag.mli lib/backtrace.mli
> lib/avltree.mli lib/array_permute.ml' terminated with error code 2")
> EXIT STATUS 1
>
> I tried doing
>
>   opam remove core
>
> which completed without error.  But the files are not removed from
>
>   .opam/4.00.0/lib/core
>
> and the -install step still complains that there's an existing META file
> and refuses to install itself.
>
> Please let me know what I'm doing wrong.
>
> Thanks,
>
> Sean
>
> Is there an opam mailing list yet so I don't spam the wrong ocamlpro guys?
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120917/4152f108/attachment.html>

From anil at recoil.org  Mon Sep 17 21:41:39 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Mon, 17 Sep 2012 16:41:39 -0400
Subject: opam 'remove' not working
In-Reply-To: <CAO4dZbeJb=YFMkC+SCuDp6euTbCHN_FOUfdhTGg9c7L0vMLEFw@mail.gmail.com>
References: <CAO4dZbc+N-jbt-u-Eu4nNb25wUbd7VNH6fFsz7HJo40N=pBb1A@mail.gmail.com> <CAO4dZbeJb=YFMkC+SCuDp6euTbCHN_FOUfdhTGg9c7L0vMLEFw@mail.gmail.com>
Message-ID: <536A9684-E72C-4D56-B774-B27CD80E7E7B@recoil.org>

Alas, if for any reason OPAM gets out of sync with OCamlfind, you need to manually rectify it.

Ocamlfind refuses to install over an existing installation...

This shouldn't happen in normal practise, but of course, packaging bugs happen.

-anil

On 17 Sep 2012, at 14:43, Sean McLaughlin <seanmcl at gmail.com> wrote:

> PS: I know it's 'opam remove' that is not working, because even after doing 
> 
>   opam remove core
> 
> I can do
> 
> $ ocaml
> ...
> # #require "core";;
> 
> and it loads the old cma file.
> 
> 
> 
> On Mon, Sep 17, 2012 at 2:40 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:
> Hi,
> 
> I'm trying to work on core, and am having some trouble with opam.  I downloaded the latest tarball 
> 
>   ocaml-core-108.07.00
> 
> and everything compiled fine.  Then I edited some code in 
> 
>   ocaml-core-108.07.00/core-108.07.00/lib
> 
> and ran 
> 
>   /usr/local/src/ocaml-core-108.07.00/core-108.07.00
>   $ ocaml setup.ml -build
> 
> which completed fine. Then I tried to install, but got the following error
> 
> $ ocaml setup.ml -install
> ocamlfind: Package core is already installed
>  - (file /Users/seanmcl/.opam/4.00.0/lib/core/META already exists)
> E: Failure("Command ''/Users/seanmcl/.opam/4.00.0/bin/ocamlfind' install core lib/META _build/top/core_install_printers.cmx _build/top/core_install_printers.cmi _build/top/core_top.cmxs _build/top/core_top.a _build/top/core_top.cmxa _build/top/core_top.cma top/core_install_printers.ml _build/lib/core.cmxs _build/lib/core.a _build/lib/core.cmxa _build/lib/core.cma _build/lib/core.cmi _build/lib/dllcore_stubs.so _build/lib/libcore_stubs.a lib/zone.mli lib/word_size.mli lib/with_return.mli lib/weekday.mli lib/unpack_buffer.mli lib/univ_map.mli lib/univ.mli lib/unit.mli lib/unique_id_intf.ml lib/unique_id.mli lib/union_find.mli lib/tuple.mli lib/timer.mli lib/time_internal.ml lib/time.mli lib/thread_safe_queue.mli lib/t.ml lib/sys_open_patch.mli lib/substring_intf.ml lib/substring.mli lib/string_id.mli lib/stringable.ml lib/std_internal.ml lib/std.ml lib/staged.mli lib/stable_unit_test_intf.ml lib/stable_unit_test.mli lib/stable_internal.ml lib/stable_containers.mli lib/stable.ml lib/squeue.mli lib/span.mli lib/space_safe_tuple.mli lib/source_code_position.mli lib/signal.mli lib/sexpable.ml lib/set_once.mli lib/robustly_comparable.ml lib/result.mli lib/ref.mli lib/quickcheck.mli lib/pretty_printer.mli lib/polymorphic_compare_intf.ml lib/polymorphic_compare.mli lib/piecewise_linear.mli lib/pid.mli lib/out_channel.mli lib/or_error.mli lib/ordered_collection_common.mli lib/option.mli lib/only_in_test.mli lib/ofday_unit_tests_v1.mli lib/ofday.mli lib/no_polymorphic_compare.mli lib/nano_mutex.mli lib/mutex0.ml lib/month.mli lib/monad.ml lib/memo.mli lib/make_substring.ml lib/lock_file.mli lib/linux_ext.mli lib/int_set.mli lib/int_replace_polymorphic_compare.mli lib/int_intf.ml lib/interval_intf.ml lib/interval.mli lib/interfaces.ml lib/int_conversions.ml lib/intable.ml lib/inline_tests.ml lib/info.mli lib/in_channel.mli lib/identifiable.mli lib/host_and_port.mli lib/heap.mli lib/hash_set_intf.ml lib/hash_set.mli lib/hash_queue.ml lib/hash_heap.ml lib/hashable.ml lib/fqueue.mli lib/force_once.mli lib/fn.mli lib/float_robust_compare.mli lib/float_intf.ml lib/floatable.ml lib/float.mli lib/exn.mli lib/error.mli lib/doubly_linked.mli lib/dequeue.mli lib/date.mli lib/daemon.mli lib/crc.mli lib/core_unix.mli lib/core_thread.mli lib/core_sys.mli lib/core_string.mli lib/core_stack.mli lib/core_sexp.mli lib/core_set_unit_tests.mli lib/core_set_intf.ml lib/core_set.mli lib/core_random.mli lib/core_queue.mli lib/core_printf.mli lib/core_printexc.mli lib/core_nativeint.mli lib/core_mutex.mli lib/core_map_unit_tests.mli lib/core_map_intf.ml lib/core_map.mli lib/core_list.mli lib/core_lazy.mli lib/core_int64.mli lib/core_int63.mli lib/core_int32.mli lib/core_int.mli lib/core_hashtbl_intf.ml lib/core_hashtbl.mli lib/core_gc.mli lib/core_filename.mli lib/core_field.ml lib/core_condition.mli lib/core_char.mli lib/core_bin_prot.ml lib/core_array.mli lib/core_arg.mli lib/container.ml lib/constrained_float.ml lib/comparator.mli lib/comparable.ml lib/commutative_group.ml lib/common0.ml lib/common.mli lib/command.mli lib/caml.ml lib/byte_units.mli lib/bucket.ml lib/bounded_int_table.mli lib/bool.mli lib/blang.mli lib/binary_packing.mli lib/binable0.ml lib/binable.mli lib/bigsubstring.mli lib/bigstring_marshal.mli lib/bigstring.mli lib/bigbuffer.mli lib/bag.mli lib/backtrace.mli lib/avltree.mli lib/array_permute.ml' terminated with error code 2")
> EXIT STATUS 1
> 
> I tried doing 
> 
>   opam remove core 
> 
> which completed without error.  But the files are not removed from 
> 
>   .opam/4.00.0/lib/core
> 
> and the -install step still complains that there's an existing META file and refuses to install itself.  
> 
> Please let me know what I'm doing wrong.
> 
> Thanks,
> 
> Sean
> 
> Is there an opam mailing list yet so I don't spam the wrong ocamlpro guys?
>    
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120917/356613d8/attachment.html>

From thomas.gazagnaire at gmail.com  Mon Sep 17 21:47:44 2012
From: thomas.gazagnaire at gmail.com (Thomas Gazagnaire)
Date: Mon, 17 Sep 2012 22:47:44 +0200
Subject: opam 'remove' not working
In-Reply-To: <536A9684-E72C-4D56-B774-B27CD80E7E7B@recoil.org>
References: <CAO4dZbc+N-jbt-u-Eu4nNb25wUbd7VNH6fFsz7HJo40N=pBb1A@mail.gmail.com> <CAO4dZbeJb=YFMkC+SCuDp6euTbCHN_FOUfdhTGg9c7L0vMLEFw@mail.gmail.com> <536A9684-E72C-4D56-B774-B27CD80E7E7B@recoil.org>
Message-ID: <D39C31F4-935D-4B07-AA0E-82063E16B2FC@ocamlpro.com>


> Alas, if for any reason OPAM gets out of sync with OCamlfind, you need to manually rectify it.
> 
> Ocamlfind refuses to install over an existing installation...
> 
> This shouldn't happen in normal practise, but of course, packaging bugs happen.

exactly. One way to solve your problem is to tell ocamlfind that indeed core needs to be uninstalled (ie. ocamlfind remove core). But I guess opam should double-check that a package files are properly indeed really removed when you try to run 'opam remove <foo>'.  I'm tracking this issue in https://github.com/OCamlPro/opam/issues/162, feel free to comment if you have any idea.

--
Thomas


> 
> -anil
> 
> On 17 Sep 2012, at 14:43, Sean McLaughlin <seanmcl at gmail.com> wrote:
> 
>> PS: I know it's 'opam remove' that is not working, because even after doing 
>> 
>>   opam remove core
>> 
>> I can do
>> 
>> $ ocaml
>> ...
>> # #require "core";;
>> 
>> and it loads the old cma file.
>> 
>> 
>> 
>> On Mon, Sep 17, 2012 at 2:40 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:
>> Hi,
>> 
>> I'm trying to work on core, and am having some trouble with opam.  I downloaded the latest tarball 
>> 
>>   ocaml-core-108.07.00
>> 
>> and everything compiled fine.  Then I edited some code in 
>> 
>>   ocaml-core-108.07.00/core-108.07.00/lib
>> 
>> and ran 
>> 
>>   /usr/local/src/ocaml-core-108.07.00/core-108.07.00
>>   $ ocaml setup.ml -build
>> 
>> which completed fine. Then I tried to install, but got the following error
>> 
>> $ ocaml setup.ml -install
>> ocamlfind: Package core is already installed
>>  - (file /Users/seanmcl/.opam/4.00.0/lib/core/META already exists)
>> E: Failure("Command ''/Users/seanmcl/.opam/4.00.0/bin/ocamlfind' install core lib/META _build/top/core_install_printers.cmx _build/top/core_install_printers.cmi _build/top/core_top.cmxs _build/top/core_top.a _build/top/core_top.cmxa _build/top/core_top.cma top/core_install_printers.ml _build/lib/core.cmxs _build/lib/core.a _build/lib/core.cmxa _build/lib/core.cma _build/lib/core.cmi _build/lib/dllcore_stubs.so _build/lib/libcore_stubs.a lib/zone.mli lib/word_size.mli lib/with_return.mli lib/weekday.mli lib/unpack_buffer.mli lib/univ_map.mli lib/univ.mli lib/unit.mli lib/unique_id_intf.ml lib/unique_id.mli lib/union_find.mli lib/tuple.mli lib/timer.mli lib/time_internal.ml lib/time.mli lib/thread_safe_queue.mli lib/t.ml lib/sys_open_patch.mli lib/substring_intf.ml lib/substring.mli lib/string_id.mli lib/stringable.ml lib/std_internal.ml lib/std.ml lib/staged.mli lib/stable_unit_test_intf.ml lib/stable_unit_test.mli lib/stable_internal.ml lib/stable_containers.mli lib/stable.ml lib/squeue.mli lib/span.mli lib/space_safe_tuple.mli lib/source_code_position.mli lib/signal.mli lib/sexpable.ml lib/set_once.mli lib/robustly_comparable.ml lib/result.mli lib/ref.mli lib/quickcheck.mli lib/pretty_printer.mli lib/polymorphic_compare_intf.ml lib/polymorphic_compare.mli lib/piecewise_linear.mli lib/pid.mli lib/out_channel.mli lib/or_error.mli lib/ordered_collection_common.mli lib/option.mli lib/only_in_test.mli lib/ofday_unit_tests_v1.mli lib/ofday.mli lib/no_polymorphic_compare.mli lib/nano_mutex.mli lib/mutex0.ml lib/month.mli lib/monad.ml lib/memo.mli lib/make_substring.ml lib/lock_file.mli lib/linux_ext.mli lib/int_set.mli lib/int_replace_polymorphic_compare.mli lib/int_intf.ml lib/interval_intf.ml lib/interval.mli lib/interfaces.ml lib/int_conversions.ml lib/intable.ml lib/inline_tests.ml lib/info.mli lib/in_channel.mli lib/identifiable.mli lib/host_and_port.mli lib/heap.mli lib/hash_set_intf.ml lib/hash_set.mli lib/hash_queue.ml lib/hash_heap.ml lib/hashable.ml lib/fqueue.mli lib/force_once.mli lib/fn.mli lib/float_robust_compare.mli lib/float_intf.ml lib/floatable.ml lib/float.mli lib/exn.mli lib/error.mli lib/doubly_linked.mli lib/dequeue.mli lib/date.mli lib/daemon.mli lib/crc.mli lib/core_unix.mli lib/core_thread.mli lib/core_sys.mli lib/core_string.mli lib/core_stack.mli lib/core_sexp.mli lib/core_set_unit_tests.mli lib/core_set_intf.ml lib/core_set.mli lib/core_random.mli lib/core_queue.mli lib/core_printf.mli lib/core_printexc.mli lib/core_nativeint.mli lib/core_mutex.mli lib/core_map_unit_tests.mli lib/core_map_intf.ml lib/core_map.mli lib/core_list.mli lib/core_lazy.mli lib/core_int64.mli lib/core_int63.mli lib/core_int32.mli lib/core_int.mli lib/core_hashtbl_intf.ml lib/core_hashtbl.mli lib/core_gc.mli lib/core_filename.mli lib/core_field.ml lib/core_condition.mli lib/core_char.mli lib/core_bin_prot.ml lib/core_array.mli lib/core_arg.mli lib/container.ml lib/constrained_float.ml lib/comparator.mli lib/comparable.ml lib/commutative_group.ml lib/common0.ml lib/common.mli lib/command.mli lib/caml.ml lib/byte_units.mli lib/bucket.ml lib/bounded_int_table.mli lib/bool.mli lib/blang.mli lib/binary_packing.mli lib/binable0.ml lib/binable.mli lib/bigsubstring.mli lib/bigstring_marshal.mli lib/bigstring.mli lib/bigbuffer.mli lib/bag.mli lib/backtrace.mli lib/avltree.mli lib/array_permute.ml' terminated with error code 2")
>> EXIT STATUS 1
>> 
>> I tried doing 
>> 
>>   opam remove core 
>> 
>> which completed without error.  But the files are not removed from 
>> 
>>   .opam/4.00.0/lib/core
>> 
>> and the -install step still complains that there's an existing META file and refuses to install itself.  
>> 
>> Please let me know what I'm doing wrong.
>> 
>> Thanks,
>> 
>> Sean
>> 
>> Is there an opam mailing list yet so I don't spam the wrong ocamlpro guys?
>>    
>> 
>> 
> 



From fabrice.le_fessant at ocamlpro.com  Mon Sep 17 21:52:45 2012
From: fabrice.le_fessant at ocamlpro.com (Fabrice Le Fessant)
Date: Mon, 17 Sep 2012 22:52:45 +0200
Subject: opam 'remove' not working
In-Reply-To: <D39C31F4-935D-4B07-AA0E-82063E16B2FC@ocamlpro.com>
References: <CAO4dZbc+N-jbt-u-Eu4nNb25wUbd7VNH6fFsz7HJo40N=pBb1A@mail.gmail.com> <CAO4dZbeJb=YFMkC+SCuDp6euTbCHN_FOUfdhTGg9c7L0vMLEFw@mail.gmail.com> <536A9684-E72C-4D56-B774-B27CD80E7E7B@recoil.org> <D39C31F4-935D-4B07-AA0E-82063E16B2FC@ocamlpro.com>
Message-ID: <50578D9D.6040407@ocamlpro.com>

On 09/17/2012 10:47 PM, Thomas Gazagnaire wrote:
>> Alas, if for any reason OPAM gets out of sync with OCamlfind, you need to manually rectify it.
>>
>> Ocamlfind refuses to install over an existing installation...
>>
>> This shouldn't happen in normal practise, but of course, packaging bugs happen.
>
> exactly. One way to solve your problem is to tell ocamlfind that indeed core needs to be uninstalled (ie. ocamlfind remove core). But I guess opam should double-check that a package files are properly indeed really removed when you try to run 'opam remove <foo>'.  I'm tracking this issue in https://github.com/OCamlPro/opam/issues/162, feel free to comment if you have any idea.

In the original specification, a package was supposed to contain a list 
of files to install, that would be copied by opam, instead of using 
ocamlfind to install these files. With such a list, opam would also be 
able to remove the files, instead of using ocamlfind to uninstall it.

This was removed from the current specification, because it would slow 
down the creation of packages, but now that we have many of them, we 
should probably re-add this behavior to the specification.

--Fabrice
-------------- next part --------------
A non-text attachment was scrubbed...
Name: fabrice_le_fessant.vcf
Type: text/x-vcard
Size: 438 bytes
Desc: not available
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120917/def29978/attachment.vcf>

From thomas.gazagnaire at gmail.com  Tue Sep 18 11:12:37 2012
From: thomas.gazagnaire at gmail.com (Thomas Gazagnaire)
Date: Tue, 18 Sep 2012 12:12:37 +0200
Subject: opam 'remove' not working
In-Reply-To: <50578D9D.6040407@ocamlpro.com>
References: <CAO4dZbc+N-jbt-u-Eu4nNb25wUbd7VNH6fFsz7HJo40N=pBb1A@mail.gmail.com> <CAO4dZbeJb=YFMkC+SCuDp6euTbCHN_FOUfdhTGg9c7L0vMLEFw@mail.gmail.com> <536A9684-E72C-4D56-B774-B27CD80E7E7B@recoil.org> <D39C31F4-935D-4B07-AA0E-82063E16B2FC@ocamlpro.com> <50578D9D.6040407@ocamlpro.com>
Message-ID: <E5EE710F-FEA4-4B3C-9BC9-10EE78D7CE91@gmail.com>


> In the original specification, a package was supposed to contain a list of files to install, that would be copied by opam, instead of using ocamlfind to install these files. With such a list, opam would also be able to remove the files, instead of using ocamlfind to uninstall it.

Unfortunately, having a .install will not solve all the issue. For instance, it will break if a user manually install a package using ocamlfind (which seems to be what happened in this case).

> This was removed from the current specification, because it would slow down the creation of packages, but now that we have many of them, we should probably re-add this behavior to the specification.

Actually, it is still working in the current version of opam (ie. you can add either add a .install file or call 'make install'). After having packaged a good collection of package, I can say it much more practical to call 'make install' that to enumerate all the files to copy :-)

--
Thomas

From sylvain at le-gall.net  Tue Sep 18 11:24:02 2012
From: sylvain at le-gall.net (Sylvain Le Gall)
Date: Tue, 18 Sep 2012 12:24:02 +0200
Subject: opam 'remove' not working
In-Reply-To: <E5EE710F-FEA4-4B3C-9BC9-10EE78D7CE91@gmail.com>
References: <CAO4dZbc+N-jbt-u-Eu4nNb25wUbd7VNH6fFsz7HJo40N=pBb1A@mail.gmail.com>
	<CAO4dZbeJb=YFMkC+SCuDp6euTbCHN_FOUfdhTGg9c7L0vMLEFw@mail.gmail.com>
	<536A9684-E72C-4D56-B774-B27CD80E7E7B@recoil.org>
	<D39C31F4-935D-4B07-AA0E-82063E16B2FC@ocamlpro.com>
	<50578D9D.6040407@ocamlpro.com>
	<E5EE710F-FEA4-4B3C-9BC9-10EE78D7CE91@gmail.com>
Message-ID: <CAOCAUGOugmW=iBQSZCgonyrZgOMPLH5aBqXcRSL3_bAf-0KvWQ@mail.gmail.com>


For packages using oasis, you can look at setup.log that will list
files installed.

Although if it is possible to automate the generation of .install for
opam, it would probably make sense to have a subcommand in setup.ml
that will list all files installed.

E.g. after "ocaml setup.ml -install",
$> ocaml setup.ml -list-installed
foo/bin/myexe
$OCAMLFIND/lib.cma
$OCAMLFIND/lib.cmxa
$OCAMLFIND/lib.cmi
...

What is your opinion on that ?


2012/9/18 Thomas Gazagnaire <thomas.gazagnaire at gmail.com>:
>> In the original specification, a package was supposed to contain a list of files to install, that would be copied by opam, instead of using ocamlfind to install these files. With such a list, opam would also be able to remove the files, instead of using ocamlfind to uninstall it.
>
> Unfortunately, having a .install will not solve all the issue. For instance, it will break if a user manually install a package using ocamlfind (which seems to be what happened in this case).
>
>> This was removed from the current specification, because it would slow down the creation of packages, but now that we have many of them, we should probably re-add this behavior to the specification.
>
> Actually, it is still working in the current version of opam (ie. you can add either add a .install file or call 'make install'). After having packaged a good collection of package, I can say it much more practical to call 'make install' that to enumerate all the files to copy :-)
>
> --
> Thomas


From rudi.grinberg at gmail.com  Thu Sep 20 07:52:00 2012
From: rudi.grinberg at gmail.com (Rudi Grinberg)
Date: Thu, 20 Sep 2012 02:52:00 -0400
Subject: Missing comments?
Message-ID: <CADU9VHtWcTqMUAjHv=R2K45xCLr=kwQKDCJ9YePp+BLry6XvvA@mail.gmail.com>


The dummies guide to async says: "Start by looking at
async/lib/std.ml, which has comments that should guide you through
reading the rest of it."

However, looking at:
https://bitbucket.org/yminsky/ocaml-core/raw/8808e3a2571f/base/async/lib/std.ml
 I don't see anything.

Is this the wrong file? I can't find the comments anywhere else either.


From dhouse at janestreet.com  Thu Sep 20 08:22:18 2012
From: dhouse at janestreet.com (David House)
Date: Thu, 20 Sep 2012 08:22:18 +0100
Subject: Missing comments?
In-Reply-To: <CADU9VHtWcTqMUAjHv=R2K45xCLr=kwQKDCJ9YePp+BLry6XvvA@mail.gmail.com>
References: <CADU9VHtWcTqMUAjHv=R2K45xCLr=kwQKDCJ9YePp+BLry6XvvA@mail.gmail.com>
Message-ID: <CAK=fH+iGBK+nBRFxF0ioX=ACWPHkykcwxuTayh=qhmOFn9A4dw@mail.gmail.com>


Sigh, this is out of date. This was probably written before we split
async into three parts: the core, the unix-dependent bits, and
"extra", everything else.

So one might imagine that reading each of
async/{core,unix,extra}/std.ml might be a good idea. But it turns out
they're basically commentless.

I didn't realise quite how bad the state of our documentation was --
I'll try to find some time to work on it.

There is some stuff in examples/, but sadly some of that is out of
date as well. It's not worthless though, especially if you consider a
couple of points that might help modernise the code:

1. Prefer pipes over streams -- they have different semantics, but
Pipe's are nicer, and it can be pretty easy to make mistakes with
Streams.

2. Prefer >>= over upon/>>>. There is a pretty simple translation:

foo
>>> fun a ->
bar
>>> fun b ->
baz
>>> fun c ->
quux

->

foo
>>= fun a ->
bar
>>= fun b ->
baz
>>| fun c ->
quux

This gives the whole block a deferred result type. For library
functions, this is only really a good thing, since your callers can
bind on the result, or can throw it away with [whenever] if they don't
want to wait for your function to finish (whenever is soon to be
renamed don't_wait_for).

For blocks at the top-level of your code, there isn't as much benefit
(you don't have any callers), but it's still nice to do it for
consistency.

[A bit more background for the interested:

It used to be the case that recursive loops written with bind, e.g.:

  let loop () =
    if predicate then Deferred.unit else
      Clock.after (sec 1.)
      >>= fun () ->
      loop ()

would take space proportional to the depth of recursion. So one would
have to write using upon, where

  let loop () =
    if predicate then () else
      Clock.after (sec 1.)
      >>> fun () ->
      loop ()

and you had no way of telling when the loop was done -- if you wanted
to do that, you had to create the deferred explicitly:

  Deferred.create (fun ivar ->
    let loop () =
      if predicate then Ivar.fill ivar () else
        Clock.after (sec 1.)
        >>> fun () ->
        loop ()))

But this is no longer necessary, and the bind loop should be
considered the best style in almost all circumstances. The reason is a
really neat trick, but this email is already too long -- I'll try to
write a blog post about it.
]

On Thu, Sep 20, 2012 at 7:52 AM, Rudi Grinberg <rudi.grinberg at gmail.com> wrote:
> The dummies guide to async says: "Start by looking at
> async/lib/std.ml, which has comments that should guide you through
> reading the rest of it."
>
> However, looking at:
> https://bitbucket.org/yminsky/ocaml-core/raw/8808e3a2571f/base/async/lib/std.ml
>  I don't see anything.
>
> Is this the wrong file? I can't find the comments anywhere else either.


From rudi.grinberg at gmail.com  Thu Sep 20 22:46:14 2012
From: rudi.grinberg at gmail.com (Rudi Grinberg)
Date: Thu, 20 Sep 2012 17:46:14 -0400
Subject: Missing comments?
In-Reply-To: <CAK=fH+iGBK+nBRFxF0ioX=ACWPHkykcwxuTayh=qhmOFn9A4dw@mail.gmail.com>
References: <CADU9VHtWcTqMUAjHv=R2K45xCLr=kwQKDCJ9YePp+BLry6XvvA@mail.gmail.com>
	<CAK=fH+iGBK+nBRFxF0ioX=ACWPHkykcwxuTayh=qhmOFn9A4dw@mail.gmail.com>
Message-ID: <CADU9VHtXQXxLRYhHAs9=2_J10Fav6XoUgBwxkwALD_8dCZvcog@mail.gmail.com>


Thanks for the quick and informative reply David. The examples seems
very useful for now and the examples that I've tried
seem to compile and work as well. So it's not totally outdated. A blog
post about Async would be very welcome!

On Thu, Sep 20, 2012 at 3:22 AM, David House <dhouse at janestreet.com> wrote:
> Sigh, this is out of date. This was probably written before we split
> async into three parts: the core, the unix-dependent bits, and
> "extra", everything else.
>
> So one might imagine that reading each of
> async/{core,unix,extra}/std.ml might be a good idea. But it turns out
> they're basically commentless.
>
> I didn't realise quite how bad the state of our documentation was --
> I'll try to find some time to work on it.
>
> There is some stuff in examples/, but sadly some of that is out of
> date as well. It's not worthless though, especially if you consider a
> couple of points that might help modernise the code:
>
> 1. Prefer pipes over streams -- they have different semantics, but
> Pipe's are nicer, and it can be pretty easy to make mistakes with
> Streams.
>
> 2. Prefer >>= over upon/>>>. There is a pretty simple translation:
>
> foo
>>>> fun a ->
> bar
>>>> fun b ->
> baz
>>>> fun c ->
> quux
>
> ->
>
> foo
>>>= fun a ->
> bar
>>>= fun b ->
> baz
>>>| fun c ->
> quux
>
> This gives the whole block a deferred result type. For library
> functions, this is only really a good thing, since your callers can
> bind on the result, or can throw it away with [whenever] if they don't
> want to wait for your function to finish (whenever is soon to be
> renamed don't_wait_for).
>
> For blocks at the top-level of your code, there isn't as much benefit
> (you don't have any callers), but it's still nice to do it for
> consistency.
>
> [A bit more background for the interested:
>
> It used to be the case that recursive loops written with bind, e.g.:
>
>   let loop () =
>     if predicate then Deferred.unit else
>       Clock.after (sec 1.)
>       >>= fun () ->
>       loop ()
>
> would take space proportional to the depth of recursion. So one would
> have to write using upon, where
>
>   let loop () =
>     if predicate then () else
>       Clock.after (sec 1.)
>       >>> fun () ->
>       loop ()
>
> and you had no way of telling when the loop was done -- if you wanted
> to do that, you had to create the deferred explicitly:
>
>   Deferred.create (fun ivar ->
>     let loop () =
>       if predicate then Ivar.fill ivar () else
>         Clock.after (sec 1.)
>         >>> fun () ->
>         loop ()))
>
> But this is no longer necessary, and the bind loop should be
> considered the best style in almost all circumstances. The reason is a
> really neat trick, but this email is already too long -- I'll try to
> write a blog post about it.
> ]
>
> On Thu, Sep 20, 2012 at 7:52 AM, Rudi Grinberg <rudi.grinberg at gmail.com> wrote:
>> The dummies guide to async says: "Start by looking at
>> async/lib/std.ml, which has comments that should guide you through
>> reading the rest of it."
>>
>> However, looking at:
>> https://bitbucket.org/yminsky/ocaml-core/raw/8808e3a2571f/base/async/lib/std.ml
>>  I don't see anything.
>>
>> Is this the wrong file? I can't find the comments anywhere else either.


From seanmcl at gmail.com  Sun Sep 23 13:01:32 2012
From: seanmcl at gmail.com (Sean McLaughlin)
Date: Sun, 23 Sep 2012 08:01:32 -0400
Subject: scripting with ocaml and core
Message-ID: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com>

Hi,

I'm interested in doing some shell scripting in ocaml with core for some
regression testing.  It takes awhile (~4 seconds) for core to load into the
toplevel.  (Simple example at end of email.)  I figured I could make a
custom toplevel that linked all the code in, but I can't seem to improve it
much (~3 seconds).  I suspect I'm calling ocamlmktop incorrectly though,
because I can't see what would be taking all that time.  Here's what I used:

ocamlfind ocamlmktop -o core-ocaml -thread -package
core,core_extended,findlib -linkpkg

which I concocted after reading

http://projects.camlcity.org/projects/dl/findlib-1.2.1/doc/guide-html/x227.html

Has anyone successfully used core with the toplevel and not had this big
performance hit?

Thanks,

Sean


(* test.ml *)

#directory "/Users/seanmcl/.opam/4.00.0/lib/toplevel";;
#directory "/Users/seanmcl/.opam/4.00.0/lib/stublibs";;

#use "topfind";;
#camlp4o;;
#thread;;
#require "pcre";;
#require "core";;
#require "core_extended";;

open Core.Std

let _ = Printf.printf "Hello, world!\n"
;;

exit 0
(* end test.ml *)

$ time ocaml test.ml
Hello, world!

real 0m4.254s

$ time ./core-ocaml test.ml
Hello, world!

real 0m3.430s
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120923/fb5367ea/attachment.html>

From yminsky at janestreet.com  Sun Sep 23 13:10:08 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Sun, 23 Sep 2012 08:10:08 -0400
Subject: scripting with ocaml and core
In-Reply-To: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com>
References: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com>
Message-ID: <CACLX4jSSV13bY_J0pswjS=HQ24C+ZawNwEf7hj3dxaVQewgCbw@mail.gmail.com>

I don't know how to make this faster either, unfortunately.  How long does
it take if you don't include core_extended?  We should move Shell from
core_extended to Core, which should allow one to avoid most of
Core_extended.

I think this kind of thing should get better when namespaces show up in
OCaml, so that we can load just parts of Core and still have a coherent set
of naming conventions.

y

On Sun, Sep 23, 2012 at 8:01 AM, Sean McLaughlin <seanmcl at gmail.com> wrote:

> Hi,
>
> I'm interested in doing some shell scripting in ocaml with core for some
> regression testing.  It takes awhile (~4 seconds) for core to load into the
> toplevel.  (Simple example at end of email.)  I figured I could make a
> custom toplevel that linked all the code in, but I can't seem to improve it
> much (~3 seconds).  I suspect I'm calling ocamlmktop incorrectly though,
> because I can't see what would be taking all that time.  Here's what I used:
>
> ocamlfind ocamlmktop -o core-ocaml -thread -package
> core,core_extended,findlib -linkpkg
>
> which I concocted after reading
>
>
> http://projects.camlcity.org/projects/dl/findlib-1.2.1/doc/guide-html/x227.html
>
> Has anyone successfully used core with the toplevel and not had this big
> performance hit?
>
> Thanks,
>
> Sean
>
>
> (* test.ml *)
>
> #directory "/Users/seanmcl/.opam/4.00.0/lib/toplevel";;
> #directory "/Users/seanmcl/.opam/4.00.0/lib/stublibs";;
>
> #use "topfind";;
> #camlp4o;;
> #thread;;
> #require "pcre";;
> #require "core";;
> #require "core_extended";;
>
> open Core.Std
>
> let _ = Printf.printf "Hello, world!\n"
> ;;
>
> exit 0
> (* end test.ml *)
>
> $ time ocaml test.ml
> Hello, world!
>
> real 0m4.254s
>
> $ time ./core-ocaml test.ml
> Hello, world!
>
> real 0m3.430s
>
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120923/9ffdf14c/attachment.html>

From seanmcl at gmail.com  Sun Sep 23 13:31:25 2012
From: seanmcl at gmail.com (Sean McLaughlin)
Date: Sun, 23 Sep 2012 08:31:25 -0400
Subject: scripting with ocaml and core
In-Reply-To: <CACLX4jSSV13bY_J0pswjS=HQ24C+ZawNwEf7hj3dxaVQewgCbw@mail.gmail.com>
References: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com>
 <CACLX4jSSV13bY_J0pswjS=HQ24C+ZawNwEf7hj3dxaVQewgCbw@mail.gmail.com>
Message-ID: <CAO4dZbfToja39pT0s1B+9fW=xZGrSNBdw0OS+v7U1Huy7J5FOQ@mail.gmail.com>

Not loading core_extended is surprisingly not helping much.

3.5s with
3.0s without

It's actually the call to

    open Core.std

that takes most of the time.  Without that, I have

1.0s with no special toplevel
0.7s with the linked toplevel



On Sun, Sep 23, 2012 at 8:10 AM, Yaron Minsky <yminsky at janestreet.com>wrote:

> I don't know how to make this faster either, unfortunately.  How long does
> it take if you don't include core_extended?  We should move Shell from
> core_extended to Core, which should allow one to avoid most of
> Core_extended.
>
> I think this kind of thing should get better when namespaces show up in
> OCaml, so that we can load just parts of Core and still have a coherent set
> of naming conventions.
>
> y
>
>
> On Sun, Sep 23, 2012 at 8:01 AM, Sean McLaughlin <seanmcl at gmail.com>wrote:
>
>> Hi,
>>
>> I'm interested in doing some shell scripting in ocaml with core for some
>> regression testing.  It takes awhile (~4 seconds) for core to load into the
>> toplevel.  (Simple example at end of email.)  I figured I could make a
>> custom toplevel that linked all the code in, but I can't seem to improve it
>> much (~3 seconds).  I suspect I'm calling ocamlmktop incorrectly though,
>> because I can't see what would be taking all that time.  Here's what I used:
>>
>> ocamlfind ocamlmktop -o core-ocaml -thread -package
>> core,core_extended,findlib -linkpkg
>>
>> which I concocted after reading
>>
>>
>> http://projects.camlcity.org/projects/dl/findlib-1.2.1/doc/guide-html/x227.html
>>
>> Has anyone successfully used core with the toplevel and not had this big
>> performance hit?
>>
>> Thanks,
>>
>> Sean
>>
>>
>> (* test.ml *)
>>
>> #directory "/Users/seanmcl/.opam/4.00.0/lib/toplevel";;
>> #directory "/Users/seanmcl/.opam/4.00.0/lib/stublibs";;
>>
>> #use "topfind";;
>> #camlp4o;;
>> #thread;;
>> #require "pcre";;
>> #require "core";;
>> #require "core_extended";;
>>
>> open Core.Std
>>
>> let _ = Printf.printf "Hello, world!\n"
>> ;;
>>
>> exit 0
>> (* end test.ml *)
>>
>> $ time ocaml test.ml
>> Hello, world!
>>
>> real 0m4.254s
>>
>> $ time ./core-ocaml test.ml
>> Hello, world!
>>
>> real 0m3.430s
>>
>>
>>
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120923/e9adeada/attachment.html>

From yminsky at janestreet.com  Sun Sep 23 18:36:44 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Sun, 23 Sep 2012 13:36:44 -0400
Subject: scripting with ocaml and core
In-Reply-To: <CAO4dZbfToja39pT0s1B+9fW=xZGrSNBdw0OS+v7U1Huy7J5FOQ@mail.gmail.com>
References: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com>
	<CACLX4jSSV13bY_J0pswjS=HQ24C+ZawNwEf7hj3dxaVQewgCbw@mail.gmail.com>
	<CAO4dZbfToja39pT0s1B+9fW=xZGrSNBdw0OS+v7U1Huy7J5FOQ@mail.gmail.com>
Message-ID: <CACLX4jRHmrxbjqsO7sMge_2ATQ+sxdi4fnZCrut3n9j_rfOKOQ@mail.gmail.com>

I've seen more or less the same thing.  Manipulating the name space seems
to be quite expensive.  To be fair, Core.Std is a pretty massive module.
 Does anyone who knows more about how the toplevel actually works have any
thoughts on what might be going on, and if it can be made more efficient?

y

On Sun, Sep 23, 2012 at 8:31 AM, Sean McLaughlin <seanmcl at gmail.com> wrote:

> Not loading core_extended is surprisingly not helping much.
>
> 3.5s with
> 3.0s without
>
> It's actually the call to
>
>     open Core.std
>
> that takes most of the time.  Without that, I have
>
> 1.0s with no special toplevel
> 0.7s with the linked toplevel
>
>
>
>
> On Sun, Sep 23, 2012 at 8:10 AM, Yaron Minsky <yminsky at janestreet.com>wrote:
>
>> I don't know how to make this faster either, unfortunately.  How long
>> does it take if you don't include core_extended?  We should move Shell from
>> core_extended to Core, which should allow one to avoid most of
>> Core_extended.
>>
>> I think this kind of thing should get better when namespaces show up in
>> OCaml, so that we can load just parts of Core and still have a coherent set
>> of naming conventions.
>>
>> y
>>
>>
>> On Sun, Sep 23, 2012 at 8:01 AM, Sean McLaughlin <seanmcl at gmail.com>wrote:
>>
>>> Hi,
>>>
>>> I'm interested in doing some shell scripting in ocaml with core for some
>>> regression testing.  It takes awhile (~4 seconds) for core to load into the
>>> toplevel.  (Simple example at end of email.)  I figured I could make a
>>> custom toplevel that linked all the code in, but I can't seem to improve it
>>> much (~3 seconds).  I suspect I'm calling ocamlmktop incorrectly though,
>>> because I can't see what would be taking all that time.  Here's what I used:
>>>
>>> ocamlfind ocamlmktop -o core-ocaml -thread -package
>>> core,core_extended,findlib -linkpkg
>>>
>>> which I concocted after reading
>>>
>>>
>>> http://projects.camlcity.org/projects/dl/findlib-1.2.1/doc/guide-html/x227.html
>>>
>>> Has anyone successfully used core with the toplevel and not had this big
>>> performance hit?
>>>
>>> Thanks,
>>>
>>> Sean
>>>
>>>
>>> (* test.ml *)
>>>
>>> #directory "/Users/seanmcl/.opam/4.00.0/lib/toplevel";;
>>> #directory "/Users/seanmcl/.opam/4.00.0/lib/stublibs";;
>>>
>>> #use "topfind";;
>>> #camlp4o;;
>>> #thread;;
>>> #require "pcre";;
>>> #require "core";;
>>> #require "core_extended";;
>>>
>>> open Core.Std
>>>
>>> let _ = Printf.printf "Hello, world!\n"
>>> ;;
>>>
>>> exit 0
>>> (* end test.ml *)
>>>
>>> $ time ocaml test.ml
>>> Hello, world!
>>>
>>> real 0m4.254s
>>>
>>> $ time ./core-ocaml test.ml
>>> Hello, world!
>>>
>>> real 0m3.430s
>>>
>>>
>>>
>>>
>>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120923/f4b9dd01/attachment.html>

From anil at recoil.org  Mon Sep 24 02:57:57 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Sun, 23 Sep 2012 21:57:57 -0400
Subject: scripting with ocaml and core
In-Reply-To: <CACLX4jRHmrxbjqsO7sMge_2ATQ+sxdi4fnZCrut3n9j_rfOKOQ@mail.gmail.com>
References: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com> <CACLX4jSSV13bY_J0pswjS=HQ24C+ZawNwEf7hj3dxaVQewgCbw@mail.gmail.com> <CAO4dZbfToja39pT0s1B+9fW=xZGrSNBdw0OS+v7U1Huy7J5FOQ@mail.gmail.com> <CACLX4jRHmrxbjqsO7sMge_2ATQ+sxdi4fnZCrut3n9j_rfOKOQ@mail.gmail.com>
Message-ID: <A6CD9DEE-D02A-472F-94C0-E1CB6EBBB999@recoil.org>

Switching to the native toplevel would no doubt help a lot. 

I took a quick look at ocamlnat in 4.00.0, and it has bitrotted slightly.  Attached patch (+make ocamlnat) gets ocaml-trunk/ocamlnat building again, but then I ran into a slew of OPAM bugs and the fact that most packages don't install .cmxs files.  Patch against ocaml-trunk attached anyway, and I'll submit it upstream when cleaned up; it'll be nice to have ocamlnat working out of OPAM soon as a compiler switch.

Jeremie, have you ever tried utop as native code?


-anil

On 23 Sep 2012, at 13:36, Yaron Minsky <yminsky at janestreet.com> wrote:

> I've seen more or less the same thing.  Manipulating the name space seems to be quite expensive.  To be fair, Core.Std is a pretty massive module.  Does anyone who knows more about how the toplevel actually works have any thoughts on what might be going on, and if it can be made more efficient?
> 
> y
> 
> On Sun, Sep 23, 2012 at 8:31 AM, Sean McLaughlin <seanmcl at gmail.com> wrote:
> Not loading core_extended is surprisingly not helping much.  
> 
> 3.5s with 
> 3.0s without
> 
> It's actually the call to 
> 
>     open Core.std
> 
> that takes most of the time.  Without that, I have
> 
> 1.0s with no special toplevel
> 0.7s with the linked toplevel
> 
> 
> 
> 
> On Sun, Sep 23, 2012 at 8:10 AM, Yaron Minsky <yminsky at janestreet.com> wrote:
> I don't know how to make this faster either, unfortunately.  How long does it take if you don't include core_extended?  We should move Shell from core_extended to Core, which should allow one to avoid most of Core_extended.
> 
> I think this kind of thing should get better when namespaces show up in OCaml, so that we can load just parts of Core and still have a coherent set of naming conventions.
> 
> y
> 
> 
> On Sun, Sep 23, 2012 at 8:01 AM, Sean McLaughlin <seanmcl at gmail.com> wrote:
> Hi,
> 
> I'm interested in doing some shell scripting in ocaml with core for some regression testing.  It takes awhile (~4 seconds) for core to load into the toplevel.  (Simple example at end of email.)  I figured I could make a custom toplevel that linked all the code in, but I can't seem to improve it much (~3 seconds).  I suspect I'm calling ocamlmktop incorrectly though, because I can't see what would be taking all that time.  Here's what I used:
> 
> ocamlfind ocamlmktop -o core-ocaml -thread -package core,core_extended,findlib -linkpkg
> 
> which I concocted after reading
> 
> http://projects.camlcity.org/projects/dl/findlib-1.2.1/doc/guide-html/x227.html
> 
> Has anyone successfully used core with the toplevel and not had this big performance hit?
> 
> Thanks,
> 
> Sean
> 
> 
> (* test.ml *)
> 
> #directory "/Users/seanmcl/.opam/4.00.0/lib/toplevel";;
> #directory "/Users/seanmcl/.opam/4.00.0/lib/stublibs";;
> 
> #use "topfind";;
> #camlp4o;;
> #thread;;
> #require "pcre";;
> #require "core";;
> #require "core_extended";;
> 
> open Core.Std
> 
> let _ = Printf.printf "Hello, world!\n"
> ;;
> 
> exit 0
> (* end test.ml *)
> 
> $ time ocaml test.ml
> Hello, world!
> 
> real	0m4.254s
> 
> $ time ./core-ocaml test.ml
> Hello, world!
> 
> real	0m3.430s
> 
> 
> 
> 
> 
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120923/a48eedf2/attachment.html>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120923/a48eedf2/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: ocamlnat-trunk.diff
Type: application/octet-stream
Size: 5680 bytes
Desc: not available
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120923/a48eedf2/attachment.obj>

From jeremie at dimino.org  Mon Sep 24 07:26:06 2012
From: jeremie at dimino.org (=?UTF-8?B?SsOpcsOpbWll?= Dimino)
Date: Mon, 24 Sep 2012 08:26:06 +0200
Subject: scripting with ocaml and core
In-Reply-To: <A6CD9DEE-D02A-472F-94C0-E1CB6EBBB999@recoil.org>
References: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com>
	<CACLX4jSSV13bY_J0pswjS=HQ24C+ZawNwEf7hj3dxaVQewgCbw@mail.gmail.com>
	<CAO4dZbfToja39pT0s1B+9fW=xZGrSNBdw0OS+v7U1Huy7J5FOQ@mail.gmail.com>
	<CACLX4jRHmrxbjqsO7sMge_2ATQ+sxdi4fnZCrut3n9j_rfOKOQ@mail.gmail.com>
	<A6CD9DEE-D02A-472F-94C0-E1CB6EBBB999@recoil.org>
Message-ID: <20120924082606.133392d8@locris.home>

Le Sun, 23 Sep 2012 21:57:57 -0400,
Anil Madhavapeddy <anil at recoil.org> a ?crit :

> Jeremie, have you ever tried utop as native code?

No, but it should work with the attached patch and the latest version
of findlib.

-- 
J?r?mie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: utop-nat.diff
Type: text/x-patch
Size: 2417 bytes
Desc: not available
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120924/313c6976/attachment.bin>

From jeremie at dimino.org  Mon Sep 24 08:51:21 2012
From: jeremie at dimino.org (=?UTF-8?B?SsOpcsOpbWll?= Dimino)
Date: Mon, 24 Sep 2012 09:51:21 +0200
Subject: scripting with ocaml and core
In-Reply-To: <CACLX4jRHmrxbjqsO7sMge_2ATQ+sxdi4fnZCrut3n9j_rfOKOQ@mail.gmail.com>
References: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com>
	<CACLX4jSSV13bY_J0pswjS=HQ24C+ZawNwEf7hj3dxaVQewgCbw@mail.gmail.com>
	<CAO4dZbfToja39pT0s1B+9fW=xZGrSNBdw0OS+v7U1Huy7J5FOQ@mail.gmail.com>
	<CACLX4jRHmrxbjqsO7sMge_2ATQ+sxdi4fnZCrut3n9j_rfOKOQ@mail.gmail.com>
Message-ID: <20120924095121.1649cfcc@caladan.esterel-technologies.com>


Le Sun, 23 Sep 2012 13:36:44 -0400,
Yaron Minsky <yminsky at janestreet.com> a ?crit :

> I've seen more or less the same thing.  Manipulating the name space
> seems to be quite expensive.  To be fair, Core.Std is a pretty
> massive module. Does anyone who knows more about how the toplevel
> actually works have any thoughts on what might be going on, and if it
> can be made more efficient?

I think it is opening the module in the environment that is slow
(Typemod.type_open). It is not really related to the toplevel. On my
computer, compiling a file containing only "open Core.Std" takes the
same amount of time as doing it in the toplevel. Compilation using
ocamlc.opt instead of ocamlc is only 2 times faster:

  $ touch empty.ml
  $ time ocaml -I /home/dim/findlib/core empty.ml

  real	0m0.009s
  user	0m0.008s
  sys	0m0.000s
  $ time ocamlc -I /home/dim/findlib/core -c empty.ml

  real	0m0.007s
  user	0m0.000s
  sys	0m0.004s
  $ time ocamlc.opt -I /home/dim/findlib/core -c empty.ml

  real	0m0.003s
  user	0m0.000s
  sys	0m0.000s
  $ echo "open Core.Std" > open_core_std.ml
  $ time ocaml -I /home/dim/findlib/core open_core_std.ml

  real	0m0.384s
  user	0m0.352s
  sys	0m0.028s
  $ time ocamlc -I /home/dim/findlib/core -c open_core_std.ml

  real	0m0.400s
  user	0m0.372s
  sys	0m0.008s
  $ time ocamlc.opt -I /home/dim/findlib/core -c open_core_std.ml

  real	0m0.190s
  user	0m0.172s
  sys	0m0.016s

-- 
J?r?mie


From dhouse at janestreet.com  Mon Sep 24 09:51:34 2012
From: dhouse at janestreet.com (David House)
Date: Mon, 24 Sep 2012 09:51:34 +0100
Subject: scripting with ocaml and core
In-Reply-To: <20120924095121.1649cfcc@caladan.esterel-technologies.com>
References: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com>
	<CACLX4jSSV13bY_J0pswjS=HQ24C+ZawNwEf7hj3dxaVQewgCbw@mail.gmail.com>
	<CAO4dZbfToja39pT0s1B+9fW=xZGrSNBdw0OS+v7U1Huy7J5FOQ@mail.gmail.com>
	<CACLX4jRHmrxbjqsO7sMge_2ATQ+sxdi4fnZCrut3n9j_rfOKOQ@mail.gmail.com>
	<20120924095121.1649cfcc@caladan.esterel-technologies.com>
Message-ID: <CAK=fH+j+CMCO1zsj7Wpj6gMO8S9=tCa+0gaqvO1kS_FL7mrd8A@mail.gmail.com>


Well, hang on. The last example took 0.2s. This seems a lot more
acceptable than the times reported ~2.5s by Sean.

Is your computer an order of magnitude faster than Sean's? What else
is going on here?

On Mon, Sep 24, 2012 at 8:51 AM, J?r?mie Dimino <jeremie at dimino.org> wrote:
> Le Sun, 23 Sep 2012 13:36:44 -0400,
> Yaron Minsky <yminsky at janestreet.com> a ?crit :
>
>> I've seen more or less the same thing.  Manipulating the name space
>> seems to be quite expensive.  To be fair, Core.Std is a pretty
>> massive module. Does anyone who knows more about how the toplevel
>> actually works have any thoughts on what might be going on, and if it
>> can be made more efficient?
>
> I think it is opening the module in the environment that is slow
> (Typemod.type_open). It is not really related to the toplevel. On my
> computer, compiling a file containing only "open Core.Std" takes the
> same amount of time as doing it in the toplevel. Compilation using
> ocamlc.opt instead of ocamlc is only 2 times faster:
>
>   $ touch empty.ml
>   $ time ocaml -I /home/dim/findlib/core empty.ml
>
>   real  0m0.009s
>   user  0m0.008s
>   sys   0m0.000s
>   $ time ocamlc -I /home/dim/findlib/core -c empty.ml
>
>   real  0m0.007s
>   user  0m0.000s
>   sys   0m0.004s
>   $ time ocamlc.opt -I /home/dim/findlib/core -c empty.ml
>
>   real  0m0.003s
>   user  0m0.000s
>   sys   0m0.000s
>   $ echo "open Core.Std" > open_core_std.ml
>   $ time ocaml -I /home/dim/findlib/core open_core_std.ml
>
>   real  0m0.384s
>   user  0m0.352s
>   sys   0m0.028s
>   $ time ocamlc -I /home/dim/findlib/core -c open_core_std.ml
>
>   real  0m0.400s
>   user  0m0.372s
>   sys   0m0.008s
>   $ time ocamlc.opt -I /home/dim/findlib/core -c open_core_std.ml
>
>   real  0m0.190s
>   user  0m0.172s
>   sys   0m0.016s
>
> --
> J?r?mie


From francois.berenger.working at gmail.com  Mon Sep 24 02:06:49 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Mon, 24 Sep 2012 10:06:49 +0900
Subject: scripting with ocaml and core
In-Reply-To: <CACLX4jRHmrxbjqsO7sMge_2ATQ+sxdi4fnZCrut3n9j_rfOKOQ@mail.gmail.com>
References: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com>
	<CACLX4jSSV13bY_J0pswjS=HQ24C+ZawNwEf7hj3dxaVQewgCbw@mail.gmail.com>
	<CAO4dZbfToja39pT0s1B+9fW=xZGrSNBdw0OS+v7U1Huy7J5FOQ@mail.gmail.com>
	<CACLX4jRHmrxbjqsO7sMge_2ATQ+sxdi4fnZCrut3n9j_rfOKOQ@mail.gmail.com>
Message-ID: <CAMQaOgP1rp-GDDX==CL5j3mxjEoO+SroYZthjk+nKV+m+rdCSA@mail.gmail.com>


On Mon, Sep 24, 2012 at 2:36 AM, Yaron Minsky <yminsky at janestreet.com> wrote:
> I've seen more or less the same thing.  Manipulating the name space seems to
> be quite expensive.  To be fair, Core.Std is a pretty massive module.  Does
> anyone who knows more about how the toplevel actually works have any
> thoughts on what might be going on, and if it can be made more efficient?

How about using ocamlscript?

Once the .exe is compiled, I guess there is no more loading time.

> y
>
>
> On Sun, Sep 23, 2012 at 8:31 AM, Sean McLaughlin <seanmcl at gmail.com> wrote:
>>
>> Not loading core_extended is surprisingly not helping much.
>>
>> 3.5s with
>> 3.0s without
>>
>> It's actually the call to
>>
>>     open Core.std
>>
>> that takes most of the time.  Without that, I have
>>
>> 1.0s with no special toplevel
>> 0.7s with the linked toplevel
>>
>>
>>
>>
>> On Sun, Sep 23, 2012 at 8:10 AM, Yaron Minsky <yminsky at janestreet.com>
>> wrote:
>>>
>>> I don't know how to make this faster either, unfortunately.  How long
>>> does it take if you don't include core_extended?  We should move Shell from
>>> core_extended to Core, which should allow one to avoid most of
>>> Core_extended.
>>>
>>> I think this kind of thing should get better when namespaces show up in
>>> OCaml, so that we can load just parts of Core and still have a coherent set
>>> of naming conventions.
>>>
>>> y
>>>
>>>
>>> On Sun, Sep 23, 2012 at 8:01 AM, Sean McLaughlin <seanmcl at gmail.com>
>>> wrote:
>>>>
>>>> Hi,
>>>>
>>>> I'm interested in doing some shell scripting in ocaml with core for some
>>>> regression testing.  It takes awhile (~4 seconds) for core to load into the
>>>> toplevel.  (Simple example at end of email.)  I figured I could make a
>>>> custom toplevel that linked all the code in, but I can't seem to improve it
>>>> much (~3 seconds).  I suspect I'm calling ocamlmktop incorrectly though,
>>>> because I can't see what would be taking all that time.  Here's what I used:
>>>>
>>>> ocamlfind ocamlmktop -o core-ocaml -thread -package
>>>> core,core_extended,findlib -linkpkg
>>>>
>>>> which I concocted after reading
>>>>
>>>>
>>>> http://projects.camlcity.org/projects/dl/findlib-1.2.1/doc/guide-html/x227.html
>>>>
>>>> Has anyone successfully used core with the toplevel and not had this big
>>>> performance hit?
>>>>
>>>> Thanks,
>>>>
>>>> Sean
>>>>
>>>>
>>>> (* test.ml *)
>>>>
>>>> #directory "/Users/seanmcl/.opam/4.00.0/lib/toplevel";;
>>>> #directory "/Users/seanmcl/.opam/4.00.0/lib/stublibs";;
>>>>
>>>> #use "topfind";;
>>>> #camlp4o;;
>>>> #thread;;
>>>> #require "pcre";;
>>>> #require "core";;
>>>> #require "core_extended";;
>>>>
>>>> open Core.Std
>>>>
>>>> let _ = Printf.printf "Hello, world!\n"
>>>> ;;
>>>>
>>>> exit 0
>>>> (* end test.ml *)
>>>>
>>>> $ time ocaml test.ml
>>>> Hello, world!
>>>>
>>>> real 0m4.254s
>>>>
>>>> $ time ./core-ocaml test.ml
>>>> Hello, world!
>>>>
>>>> real 0m3.430s
>>>>
>>>>
>>>>
>>>>
>>>
>>
>


From sylvain at le-gall.net  Mon Sep 24 10:03:47 2012
From: sylvain at le-gall.net (Sylvain Le Gall)
Date: Mon, 24 Sep 2012 11:03:47 +0200
Subject: scripting with ocaml and core
In-Reply-To: <CAK=fH+j+CMCO1zsj7Wpj6gMO8S9=tCa+0gaqvO1kS_FL7mrd8A@mail.gmail.com>
References: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com>
	<CACLX4jSSV13bY_J0pswjS=HQ24C+ZawNwEf7hj3dxaVQewgCbw@mail.gmail.com>
	<CAO4dZbfToja39pT0s1B+9fW=xZGrSNBdw0OS+v7U1Huy7J5FOQ@mail.gmail.com>
	<CACLX4jRHmrxbjqsO7sMge_2ATQ+sxdi4fnZCrut3n9j_rfOKOQ@mail.gmail.com>
	<20120924095121.1649cfcc@caladan.esterel-technologies.com>
	<CAK=fH+j+CMCO1zsj7Wpj6gMO8S9=tCa+0gaqvO1kS_FL7mrd8A@mail.gmail.com>
Message-ID: <CAOCAUGM-GwQNLOvXk+x2zdkDgZF_mmcatoEKpY70Hm-qdWOOOA@mail.gmail.com>


+Gerd

2012/9/24 David House <dhouse at janestreet.com>:
> Well, hang on. The last example took 0.2s. This seems a lot more
> acceptable than the times reported ~2.5s by Sean.
>
> Is your computer an order of magnitude faster than Sean's? What else
> is going on here?

Maybe it is related to findlib ?

I had a look at findlib code and I think we can do some cleanup to
gain a significant boost (which will in turn boost general compilation
as well). Maybe we can have a "optimization day" on findlib with Gerd
?

>
> On Mon, Sep 24, 2012 at 8:51 AM, J?r?mie Dimino <jeremie at dimino.org> wrote:
>> Le Sun, 23 Sep 2012 13:36:44 -0400,
>> Yaron Minsky <yminsky at janestreet.com> a ?crit :
>>
>>> I've seen more or less the same thing.  Manipulating the name space
>>> seems to be quite expensive.  To be fair, Core.Std is a pretty
>>> massive module. Does anyone who knows more about how the toplevel
>>> actually works have any thoughts on what might be going on, and if it
>>> can be made more efficient?
>>
>> I think it is opening the module in the environment that is slow
>> (Typemod.type_open). It is not really related to the toplevel. On my
>> computer, compiling a file containing only "open Core.Std" takes the
>> same amount of time as doing it in the toplevel. Compilation using
>> ocamlc.opt instead of ocamlc is only 2 times faster:
>>
>>   $ touch empty.ml
>>   $ time ocaml -I /home/dim/findlib/core empty.ml
>>
>>   real  0m0.009s
>>   user  0m0.008s
>>   sys   0m0.000s
>>   $ time ocamlc -I /home/dim/findlib/core -c empty.ml
>>
>>   real  0m0.007s
>>   user  0m0.000s
>>   sys   0m0.004s
>>   $ time ocamlc.opt -I /home/dim/findlib/core -c empty.ml
>>
>>   real  0m0.003s
>>   user  0m0.000s
>>   sys   0m0.000s
>>   $ echo "open Core.Std" > open_core_std.ml
>>   $ time ocaml -I /home/dim/findlib/core open_core_std.ml
>>
>>   real  0m0.384s
>>   user  0m0.352s
>>   sys   0m0.028s
>>   $ time ocamlc -I /home/dim/findlib/core -c open_core_std.ml
>>
>>   real  0m0.400s
>>   user  0m0.372s
>>   sys   0m0.008s
>>   $ time ocamlc.opt -I /home/dim/findlib/core -c open_core_std.ml
>>
>>   real  0m0.190s
>>   user  0m0.172s
>>   sys   0m0.016s
>>
>> --
>> J?r?mie


From sylvain at le-gall.net  Mon Sep 24 10:05:32 2012
From: sylvain at le-gall.net (Sylvain Le Gall)
Date: Mon, 24 Sep 2012 11:05:32 +0200
Subject: scripting with ocaml and core
In-Reply-To: <A6CD9DEE-D02A-472F-94C0-E1CB6EBBB999@recoil.org>
References: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com>
	<CACLX4jSSV13bY_J0pswjS=HQ24C+ZawNwEf7hj3dxaVQewgCbw@mail.gmail.com>
	<CAO4dZbfToja39pT0s1B+9fW=xZGrSNBdw0OS+v7U1Huy7J5FOQ@mail.gmail.com>
	<CACLX4jRHmrxbjqsO7sMge_2ATQ+sxdi4fnZCrut3n9j_rfOKOQ@mail.gmail.com>
	<A6CD9DEE-D02A-472F-94C0-E1CB6EBBB999@recoil.org>
Message-ID: <CAOCAUGMg-Fz2aCQYQe=iN1uiu83qK_=y1RF-ueFj41rBaA1DqA@mail.gmail.com>


Hi,

2012/9/24 Anil Madhavapeddy <anil at recoil.org>:
> Switching to the native toplevel would no doubt help a lot.
>
> I took a quick look at ocamlnat in 4.00.0, and it has bitrotted slightly.
> Attached patch (+make ocamlnat) gets ocaml-trunk/ocamlnat building again,
> but then I ran into a slew of OPAM bugs and the fact that most packages
> don't install .cmxs files.

Note that by default packages using OASIS 0.3.0 with the default
ocamlbuild rules will generate .cmxs!

>
> -anil
>
> On 23 Sep 2012, at 13:36, Yaron Minsky <yminsky at janestreet.com> wrote:
>
> I've seen more or less the same thing.  Manipulating the name space seems to
> be quite expensive.  To be fair, Core.Std is a pretty massive module.  Does
> anyone who knows more about how the toplevel actually works have any
> thoughts on what might be going on, and if it can be made more efficient?
>
> y
>
> On Sun, Sep 23, 2012 at 8:31 AM, Sean McLaughlin <seanmcl at gmail.com> wrote:
>>
>> Not loading core_extended is surprisingly not helping much.
>>
>> 3.5s with
>> 3.0s without
>>
>> It's actually the call to
>>
>>     open Core.std
>>
>> that takes most of the time.  Without that, I have
>>
>> 1.0s with no special toplevel
>> 0.7s with the linked toplevel
>>
>>
>>
>>
>> On Sun, Sep 23, 2012 at 8:10 AM, Yaron Minsky <yminsky at janestreet.com>
>> wrote:
>>>
>>> I don't know how to make this faster either, unfortunately.  How long
>>> does it take if you don't include core_extended?  We should move Shell from
>>> core_extended to Core, which should allow one to avoid most of
>>> Core_extended.
>>>
>>> I think this kind of thing should get better when namespaces show up in
>>> OCaml, so that we can load just parts of Core and still have a coherent set
>>> of naming conventions.
>>>
>>> y
>>>
>>>
>>> On Sun, Sep 23, 2012 at 8:01 AM, Sean McLaughlin <seanmcl at gmail.com>
>>> wrote:
>>>>
>>>> Hi,
>>>>
>>>> I'm interested in doing some shell scripting in ocaml with core for some
>>>> regression testing.  It takes awhile (~4 seconds) for core to load into the
>>>> toplevel.  (Simple example at end of email.)  I figured I could make a
>>>> custom toplevel that linked all the code in, but I can't seem to improve it
>>>> much (~3 seconds).  I suspect I'm calling ocamlmktop incorrectly though,
>>>> because I can't see what would be taking all that time.  Here's what I used:
>>>>
>>>> ocamlfind ocamlmktop -o core-ocaml -thread -package
>>>> core,core_extended,findlib -linkpkg
>>>>
>>>> which I concocted after reading
>>>>
>>>>
>>>> http://projects.camlcity.org/projects/dl/findlib-1.2.1/doc/guide-html/x227.html
>>>>
>>>> Has anyone successfully used core with the toplevel and not had this big
>>>> performance hit?
>>>>
>>>> Thanks,
>>>>
>>>> Sean
>>>>
>>>>
>>>> (* test.ml *)
>>>>
>>>> #directory "/Users/seanmcl/.opam/4.00.0/lib/toplevel";;
>>>> #directory "/Users/seanmcl/.opam/4.00.0/lib/stublibs";;
>>>>
>>>> #use "topfind";;
>>>> #camlp4o;;
>>>> #thread;;
>>>> #require "pcre";;
>>>> #require "core";;
>>>> #require "core_extended";;
>>>>
>>>> open Core.Std
>>>>
>>>> let _ = Printf.printf "Hello, world!\n"
>>>> ;;
>>>>
>>>> exit 0
>>>> (* end test.ml *)
>>>>
>>>> $ time ocaml test.ml
>>>> Hello, world!
>>>>
>>>> real 0m4.254s
>>>>
>>>> $ time ./core-ocaml test.ml
>>>> Hello, world!
>>>>
>>>> real 0m3.430s
>>>>
>>>>
>>>>
>>>>
>>>
>>
>
>
>


From jeremie at dimino.org  Mon Sep 24 10:25:21 2012
From: jeremie at dimino.org (=?UTF-8?B?SsOpcsOpbWll?= Dimino)
Date: Mon, 24 Sep 2012 11:25:21 +0200
Subject: scripting with ocaml and core
In-Reply-To: <CAK=fH+j+CMCO1zsj7Wpj6gMO8S9=tCa+0gaqvO1kS_FL7mrd8A@mail.gmail.com>
References: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com>
	<CACLX4jSSV13bY_J0pswjS=HQ24C+ZawNwEf7hj3dxaVQewgCbw@mail.gmail.com>
	<CAO4dZbfToja39pT0s1B+9fW=xZGrSNBdw0OS+v7U1Huy7J5FOQ@mail.gmail.com>
	<CACLX4jRHmrxbjqsO7sMge_2ATQ+sxdi4fnZCrut3n9j_rfOKOQ@mail.gmail.com>
	<20120924095121.1649cfcc@caladan.esterel-technologies.com>
	<CAK=fH+j+CMCO1zsj7Wpj6gMO8S9=tCa+0gaqvO1kS_FL7mrd8A@mail.gmail.com>
Message-ID: <20120924112521.2fce03a6@caladan.esterel-technologies.com>


Le Mon, 24 Sep 2012 09:51:34 +0100,
David House <dhouse at janestreet.com> a ?crit :

> Is your computer an order of magnitude faster than Sean's?

Maybe, mine is a Core i5-2400 desktop computer. Here is what I get
with Sean's test.ml file:

$ time ocaml test.ml
Hello, world!

real	0m0.507s
user	0m0.484s
sys	0m0.020s

Also i did the test with ocaml 3.12.1, not with 4.00.

-- 
J?r?mie


From info at gerd-stolpmann.de  Mon Sep 24 12:12:46 2012
From: info at gerd-stolpmann.de (Gerd Stolpmann)
Date: Mon, 24 Sep 2012 13:12:46 +0200
Subject: AW: scripting with ocaml and core
In-Reply-To: <CAOCAUGM-GwQNLOvXk+x2zdkDgZF_mmcatoEKpY70Hm-qdWOOOA@mail.gmail.com>
	(from sylvain@le-gall.net on Mon Sep 24 11:03:47 2012)
Message-ID: <1348485166.11634.1@samsung>


Am 24.09.2012 11:03:47 schrieb(en) Sylvain Le Gall:
> +Gerd
> 
> 2012/9/24 David House <dhouse at janestreet.com>:
> > Well, hang on. The last example took 0.2s. This seems a lot more
> > acceptable than the times reported ~2.5s by Sean.
> >
> > Is your computer an order of magnitude faster than Sean's? What else
> > is going on here?
> 
> Maybe it is related to findlib ?
> 
> I had a look at findlib code and I think we can do some cleanup to
> gain a significant boost (which will in turn boost general compilation
> as well). Maybe we can have a "optimization day" on findlib with Gerd
> ?

I don't think you can do here much. All algorithms in findlib are  
linear (esp. the topological sorting of the packages), and I've never  
seen any bigger problems with the implementation, even for really large  
projects.

My guess about the long opening time: It's loading all of Core, not  
only Core.Std. It's a downside of packing modules.

Gerd

> >
> > On Mon, Sep 24, 2012 at 8:51 AM, J?r?mie Dimino  
> <jeremie at dimino.org> wrote:
> >> Le Sun, 23 Sep 2012 13:36:44 -0400,
> >> Yaron Minsky <yminsky at janestreet.com> a ?crit :
> >>
> >>> I've seen more or less the same thing.  Manipulating the name  
> space
> >>> seems to be quite expensive.  To be fair, Core.Std is a pretty
> >>> massive module. Does anyone who knows more about how the toplevel
> >>> actually works have any thoughts on what might be going on, and  
> if it
> >>> can be made more efficient?
> >>
> >> I think it is opening the module in the environment that is slow
> >> (Typemod.type_open). It is not really related to the toplevel. On  
> my
> >> computer, compiling a file containing only "open Core.Std" takes  
> the
> >> same amount of time as doing it in the toplevel. Compilation using
> >> ocamlc.opt instead of ocamlc is only 2 times faster:
> >>
> >>   $ touch empty.ml
> >>   $ time ocaml -I /home/dim/findlib/core empty.ml
> >>
> >>   real  0m0.009s
> >>   user  0m0.008s
> >>   sys   0m0.000s
> >>   $ time ocamlc -I /home/dim/findlib/core -c empty.ml
> >>
> >>   real  0m0.007s
> >>   user  0m0.000s
> >>   sys   0m0.004s
> >>   $ time ocamlc.opt -I /home/dim/findlib/core -c empty.ml
> >>
> >>   real  0m0.003s
> >>   user  0m0.000s
> >>   sys   0m0.000s
> >>   $ echo "open Core.Std" > open_core_std.ml
> >>   $ time ocaml -I /home/dim/findlib/core open_core_std.ml
> >>
> >>   real  0m0.384s
> >>   user  0m0.352s
> >>   sys   0m0.028s
> >>   $ time ocamlc -I /home/dim/findlib/core -c open_core_std.ml
> >>
> >>   real  0m0.400s
> >>   user  0m0.372s
> >>   sys   0m0.008s
> >>   $ time ocamlc.opt -I /home/dim/findlib/core -c open_core_std.ml
> >>
> >>   real  0m0.190s
> >>   user  0m0.172s
> >>   sys   0m0.016s
> >>
> >> --
> >> J?r?mie
> 
> 



-- 
------------------------------------------------------------
Gerd Stolpmann, Darmstadt, Germany    gerd at gerd-stolpmann.de
Creator of GODI and camlcity.org.
Contact details:        http://www.camlcity.org/contact.html
Company homepage:       http://www.gerd-stolpmann.de
------------------------------------------------------------

From nathan.mishralinger at gmail.com  Sat Sep 29 04:27:26 2012
From: nathan.mishralinger at gmail.com (Nathan Mishra Linger)
Date: Fri, 28 Sep 2012 23:27:26 -0400
Subject: problem with `opam init`
Message-ID: <CAJO0BX0B8ENnZWxiXWXih-QY5K7vRwc=v7b+aEjBM25uqG-y3w@mail.gmail.com>


I tried to get opam running on my Ubuntu laptop.  After downloading
the 0.6.0 tarball from the OcamlPro tutorial page
(http://opam.ocamlpro.com/doc/Tutorial.html) and building and
installing it without incident, my first opam command fell over:

nathanml at panther:~$ opam init
File /home/nathanml/.opam/opam/benchmark.1.1.opam: Bad format!
Expecting list or list-list, got list({option(list({string("rm")
string("setup.ml")}),{string("%{ocaml-version}%") symbol(=)
string("4.00.0")}) option(list({string("oasis")
string("setup")}),{string("%{ocaml-version}%") symbol(=)
string("4.00.0")}) list({string("ocaml") string("setup.ml")
string("-configure") string("--prefix") string("%{prefix}%")})
list({string("ocaml") string("setup.ml") string("-build")})
list({string("ocaml") string("setup.ml") string("-install")})})
  'opam init' failed

I can't find the file mentioned here after this command runs (in fact
I still don't even have a $HOME/.opam), so I'm not sure how to get
past this problem.


From anil at recoil.org  Sat Sep 29 07:56:05 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Fri, 28 Sep 2012 23:56:05 -0700
Subject: problem with `opam init`
In-Reply-To: <CAJO0BX0B8ENnZWxiXWXih-QY5K7vRwc=v7b+aEjBM25uqG-y3w@mail.gmail.com>
References: <CAJO0BX0B8ENnZWxiXWXih-QY5K7vRwc=v7b+aEjBM25uqG-y3w@mail.gmail.com>
Message-ID: <A77D3D49-83A4-4A01-B40F-098A4668EC5C@recoil.org>


Could you try it with a more recent version, such as 0.7.2?
https://github.com/OCamlPro/opam/tarball/0.7.2

I suspect the repository version may have moved beyond 0.6.0 as things are
rapidly being fixed (or it could be something else).  Hopefully this aspect
will stabilise soon, before it goes into a public beta.

-anil

On 28 Sep 2012, at 20:27, Nathan Mishra Linger <nathan.mishralinger at gmail.com> wrote:

> I tried to get opam running on my Ubuntu laptop.  After downloading
> the 0.6.0 tarball from the OcamlPro tutorial page
> (http://opam.ocamlpro.com/doc/Tutorial.html) and building and
> installing it without incident, my first opam command fell over:
> 
> nathanml at panther:~$ opam init
> File /home/nathanml/.opam/opam/benchmark.1.1.opam: Bad format!
> Expecting list or list-list, got list({option(list({string("rm")
> string("setup.ml")}),{string("%{ocaml-version}%") symbol(=)
> string("4.00.0")}) option(list({string("oasis")
> string("setup")}),{string("%{ocaml-version}%") symbol(=)
> string("4.00.0")}) list({string("ocaml") string("setup.ml")
> string("-configure") string("--prefix") string("%{prefix}%")})
> list({string("ocaml") string("setup.ml") string("-build")})
> list({string("ocaml") string("setup.ml") string("-install")})})
>  'opam init' failed
> 
> I can't find the file mentioned here after this command runs (in fact
> I still don't even have a $HOME/.opam), so I'm not sure how to get
> past this problem.
> 



From anil at recoil.org  Sun Sep 30 05:32:54 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Sat, 29 Sep 2012 21:32:54 -0700
Subject: type_conv-108.07 breakage
Message-ID: <67F9CDEC-3CCB-49ED-9C0A-E0F23D0B3C10@recoil.org>


I've been porting some of our syntax extensions to the new type_conv (from 108.00.02 -> 108.07), and the Dyntype extension is broken because of some extra bits that are generated:

For a simple:

# type t = int with value;;

This diff happens between the output of 108.00.02 and 108.07.00:

--- simple-108.00.02.ml	2012-09-29 21:29:42.000000000 -0700
+++ _build/simple_value_test.ml	2012-09-29 21:30:04.000000000 -0700
@@ -22,6 +22,12 @@
           then Dyntype.Value.Rec ((("t", __id__), __x__))
           else Dyntype.Value.Ext ((("t", (gen_t_id ~id_seed __x3__)), __x__))
   
+let _ = t
+and _ = t
+and _ = t
+and _ = ref
+and _ = value_of_t
+  
 let (t_of_value : Dyntype.Value.t -> t) =
   let module Deps =
     struct
@@ -73,4 +79,8 @@
              raise (Deps.Runtime_error (("Var/Rec/Ext", __x__))))
     in t_of_value_aux { Deps.t = []; }
   
+let _ = t
+and _ = t
+and _ = t_of_value
+  

These are unbound, and so compilation breaks... what are they for?

-anil

From nathan.mishralinger at gmail.com  Sun Sep 30 03:19:53 2012
From: nathan.mishralinger at gmail.com (Nathan Mishra Linger)
Date: Sat, 29 Sep 2012 22:19:53 -0400
Subject: problem with `opam init`
In-Reply-To: <A77D3D49-83A4-4A01-B40F-098A4668EC5C@recoil.org>
References: <CAJO0BX0B8ENnZWxiXWXih-QY5K7vRwc=v7b+aEjBM25uqG-y3w@mail.gmail.com>
	<A77D3D49-83A4-4A01-B40F-098A4668EC5C@recoil.org>
Message-ID: <CAJO0BX0QRiiZmuY_ehMh7wYFJcL0S6w+TwHHWw4LDVbu_GB-+Q@mail.gmail.com>


Thanks for this suggestion.  It worked! :)

Now I've advanced to being stuck on
https://bitbucket.org/yminsky/ocaml-core/issue/3/exception-failure-could-not-configure-core
instead. :(

On Sat, Sep 29, 2012 at 2:56 AM, Anil Madhavapeddy <anil at recoil.org> wrote:
> Could you try it with a more recent version, such as 0.7.2?
> https://github.com/OCamlPro/opam/tarball/0.7.2
>
> I suspect the repository version may have moved beyond 0.6.0 as things are
> rapidly being fixed (or it could be something else).  Hopefully this aspect
> will stabilise soon, before it goes into a public beta.
>
> -anil
>
> On 28 Sep 2012, at 20:27, Nathan Mishra Linger <nathan.mishralinger at gmail.com> wrote:
>
>> I tried to get opam running on my Ubuntu laptop.  After downloading
>> the 0.6.0 tarball from the OcamlPro tutorial page
>> (http://opam.ocamlpro.com/doc/Tutorial.html) and building and
>> installing it without incident, my first opam command fell over:
>>
>> nathanml at panther:~$ opam init
>> File /home/nathanml/.opam/opam/benchmark.1.1.opam: Bad format!
>> Expecting list or list-list, got list({option(list({string("rm")
>> string("setup.ml")}),{string("%{ocaml-version}%") symbol(=)
>> string("4.00.0")}) option(list({string("oasis")
>> string("setup")}),{string("%{ocaml-version}%") symbol(=)
>> string("4.00.0")}) list({string("ocaml") string("setup.ml")
>> string("-configure") string("--prefix") string("%{prefix}%")})
>> list({string("ocaml") string("setup.ml") string("-build")})
>> list({string("ocaml") string("setup.ml") string("-install")})})
>>  'opam init' failed
>>
>> I can't find the file mentioned here after this command runs (in fact
>> I still don't even have a $HOME/.opam), so I'm not sure how to get
>> past this problem.
>>
>


From yury.sulsky at gmail.com  Sun Sep 30 13:46:37 2012
From: yury.sulsky at gmail.com (Yury Sulsky)
Date: Sun, 30 Sep 2012 08:46:37 -0400
Subject: type_conv-108.07 breakage
In-Reply-To: <67F9CDEC-3CCB-49ED-9C0A-E0F23D0B3C10@recoil.org>
References: <67F9CDEC-3CCB-49ED-9C0A-E0F23D0B3C10@recoil.org>
Message-ID: <CAEDxudy2bk4m+an-5gUYNE-Zt16VTUwGRi_efyhmMG_3zxjQuA@mail.gmail.com>

Hi Anil,

I'll take a look at the dyntype extension to see how type_conv is broken,
but the point of these assignments is to avoid ocaml 4's unused value
warnings by from generated code. Apparently, type_conv thinks that values
called "t", "ref", "t_of_value", and "value_of_t" have been generated by
this extension.

On Sun, Sep 30, 2012 at 12:32 AM, Anil Madhavapeddy <anil at recoil.org> wrote:

> I've been porting some of our syntax extensions to the new type_conv (from
> 108.00.02 -> 108.07), and the Dyntype extension is broken because of some
> extra bits that are generated:
>
> For a simple:
>
> # type t = int with value;;
>
> This diff happens between the output of 108.00.02 and 108.07.00:
>
> --- simple-108.00.02.ml 2012-09-29 21:29:42.000000000 -0700
> +++ _build/simple_value_test.ml 2012-09-29 21:30:04.000000000 -0700
> @@ -22,6 +22,12 @@
>            then Dyntype.Value.Rec ((("t", __id__), __x__))
>            else Dyntype.Value.Ext ((("t", (gen_t_id ~id_seed __x3__)),
> __x__))
>
> +let _ = t
> +and _ = t
> +and _ = t
> +and _ = ref
> +and _ = value_of_t
> +
>  let (t_of_value : Dyntype.Value.t -> t) =
>    let module Deps =
>      struct
> @@ -73,4 +79,8 @@
>               raise (Deps.Runtime_error (("Var/Rec/Ext", __x__))))
>      in t_of_value_aux { Deps.t = []; }
>
> +let _ = t
> +and _ = t
> +and _ = t_of_value
> +
>
> These are unbound, and so compilation breaks... what are they for?
>
> -anil
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120930/de51f5e2/attachment.html>

From anil at recoil.org  Sat Sep  1 02:42:38 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Fri, 31 Aug 2012 18:42:38 -0700
Subject: SSL bindings for Async?
Message-ID: <E12E8E41-38A7-4A60-BF08-B0F2E50BD031@recoil.org>


Are there any SSL bindings for Async at present?  I've been hacking on a Github API (https://github.com/avsm/ocaml-github) that uses Cohttp, and would like to functorise it over Async as well as Lwt, and this is the missing link.

-anil

From orbitz at gmail.com  Sun Sep  2 18:14:16 2012
From: orbitz at gmail.com (orbitz)
Date: Sun, 2 Sep 2012 19:14:16 +0200
Subject: Core on a Mac
In-Reply-To: <96D17667-DE37-4116-85FB-583F61D1B7C7@recoil.org>
References: <CADy1MavvzhL3+Q2WPV+4u1xcDmNcEUSCTvUMUu=A8SXPb96Nxg@mail.gmail.com>
	<027F8960-82EA-432D-884E-4E900389088F@recoil.org>
	<CAMu2m2LezwGjxo9v6ZV2JPdN58L6oPeRWno7K_5OA2e88pPpjQ@mail.gmail.com>
	<96D17667-DE37-4116-85FB-583F61D1B7C7@recoil.org>
Message-ID: <CAAHaHtnmn_yHBZkir2EsvaSaJoSH-1bTo8FV+uEwpL=N=KZNpg@mail.gmail.com>

I install core via odb which works great.  The only problem I have run
into, so far, is Unix.create_process segfaults the forked process.  I'm not
sure why.  create_process appears to be an external C function in Core,
although I'm unsure what it does above the standard Unix.create_process.  I
got around this by implementing my own wrapper of the standard
Unix.create_process.

/M

On Sat, Sep 1, 2012 at 12:18 AM, Anil Madhavapeddy <anil at recoil.org> wrote:

> The Homebrew OCaml includes 10.8-specific fixes [1] too, which cause
> sporadic crashes otherwise with exception backtraces in particular.  And
> once OPAM is bootstrapped, it supports multiple local development
> environments via `opam switch`.  This is assuming its solver isn't going
> off and upgrading everything, which Thomas has mostly fixed now :)
>
> [1] http://caml.inria.fr/mantis/view.php?id=5700
>
> -a
>
> On 31 Aug 2012, at 15:14, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
>
> I install core from the release tarball on my OS X 10.7.4 Mac without
> problems. It's on top of a base installation of ocaml, findlib, etc. from
> godi.
>
> On Fri, Aug 31, 2012 at 5:51 PM, Anil Madhavapeddy <anil at recoil.org>wrote:
>
>> On 31 Aug 2012, at 14:48, David House <dmhouse at gmail.com> wrote:
>>
>> > I'm interested in getting core working on my Mac. Has anyone tried
>> > this, and how well does it work?
>>
>>
>> - Install Homebrew from http://github.com/mxcl/homebrew
>> - $ brew install ocaml
>> - $ brew tap mirage/ocaml      # hook in custom ocaml packages
>> - $ brew install opam --HEAD   # get the very latest OPAM
>> - $ opam install core async
>> - $ eval `opam config -env`    # import the right PATH
>>
>> Some of these steps will disappear in a bit (e.g. the tap is only
>> required until a more stable OPAM appears, which will hopefully be
>> before ICFP in a couple of weeks).
>>
>> Note that Homebrew just updated to ocaml-4.00.0, so hopefully Core
>> works with it too.
>>
>> -anil
>>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120902/971ea42d/attachment-0001.html>

From anil at recoil.org  Mon Sep  3 21:58:22 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Mon, 3 Sep 2012 13:58:22 -0700
Subject: SSL bindings for Async?
In-Reply-To: <CACLX4jQS0mhy9_M+hawa=YjDm4fMnGuBSB47=3y9RTAc+mp8mg@mail.gmail.com>
References: <E12E8E41-38A7-4A60-BF08-B0F2E50BD031@recoil.org> <CACLX4jQS0mhy9_M+hawa=YjDm4fMnGuBSB47=3y9RTAc+mp8mg@mail.gmail.com>
Message-ID: <B62F5928-2072-4A62-85C9-534229A4BA48@recoil.org>


I'll take a shot at writing an Async wrapper using ocaml-ssl (which are the same bindings used by Lwt_ssl, so should be stable enough)

-anil

On 3 Sep 2012, at 13:56, Yaron Minsky <yminsky at janestreet.com> wrote:

> None I am aware of.  We don't have anything internally.
> 
> On Fri, Aug 31, 2012 at 9:42 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> Are there any SSL bindings for Async at present?  I've been hacking on a Github API (https://github.com/avsm/ocaml-github) that uses Cohttp, and would like to functorise it over Async as well as Lwt, and this is the missing link.
>> 
>> -anil
> 



From yminsky at janestreet.com  Mon Sep  3 21:56:39 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Mon, 3 Sep 2012 16:56:39 -0400
Subject: SSL bindings for Async?
In-Reply-To: <E12E8E41-38A7-4A60-BF08-B0F2E50BD031@recoil.org>
References: <E12E8E41-38A7-4A60-BF08-B0F2E50BD031@recoil.org>
Message-ID: <CACLX4jQS0mhy9_M+hawa=YjDm4fMnGuBSB47=3y9RTAc+mp8mg@mail.gmail.com>


None I am aware of.  We don't have anything internally.

On Fri, Aug 31, 2012 at 9:42 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> Are there any SSL bindings for Async at present?  I've been hacking on a Github API (https://github.com/avsm/ocaml-github) that uses Cohttp, and would like to functorise it over Async as well as Lwt, and this is the missing link.
>
> -anil


From yminsky at janestreet.com  Mon Sep  3 21:58:22 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Mon, 3 Sep 2012 16:58:22 -0400
Subject: Core on a Mac
In-Reply-To: <96D17667-DE37-4116-85FB-583F61D1B7C7@recoil.org>
References: <CADy1MavvzhL3+Q2WPV+4u1xcDmNcEUSCTvUMUu=A8SXPb96Nxg@mail.gmail.com>
	<027F8960-82EA-432D-884E-4E900389088F@recoil.org>
	<CAMu2m2LezwGjxo9v6ZV2JPdN58L6oPeRWno7K_5OA2e88pPpjQ@mail.gmail.com>
	<96D17667-DE37-4116-85FB-583F61D1B7C7@recoil.org>
Message-ID: <CACLX4jR9rC5BNAqdsd5KENHYRf5XzgYn-fk5hb_BEcLC+59V_A@mail.gmail.com>


I've also been using opam, and it's been awesome.  It's improving
quickly, it has lots of useful features, and it does a good job of
picking the versions to install.  (It uses a SAT-solver for picking a
compatible set of version numbers.)  It's still young, but given that
it's already pretty stable.

y

On Fri, Aug 31, 2012 at 6:18 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> The Homebrew OCaml includes 10.8-specific fixes [1] too, which cause
> sporadic crashes otherwise with exception backtraces in particular.  And
> once OPAM is bootstrapped, it supports multiple local development
> environments via `opam switch`.  This is assuming its solver isn't going off
> and upgrading everything, which Thomas has mostly fixed now :)
>
> [1] http://caml.inria.fr/mantis/view.php?id=5700
>
> -a
>
> On 31 Aug 2012, at 15:14, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
>
> I install core from the release tarball on my OS X 10.7.4 Mac without
> problems. It's on top of a base installation of ocaml, findlib, etc. from
> godi.
>
> On Fri, Aug 31, 2012 at 5:51 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>
>> On 31 Aug 2012, at 14:48, David House <dmhouse at gmail.com> wrote:
>>
>> > I'm interested in getting core working on my Mac. Has anyone tried
>> > this, and how well does it work?
>>
>>
>> - Install Homebrew from http://github.com/mxcl/homebrew
>> - $ brew install ocaml
>> - $ brew tap mirage/ocaml      # hook in custom ocaml packages
>> - $ brew install opam --HEAD   # get the very latest OPAM
>> - $ opam install core async
>> - $ eval `opam config -env`    # import the right PATH
>>
>> Some of these steps will disappear in a bit (e.g. the tap is only
>> required until a more stable OPAM appears, which will hopefully be
>> before ICFP in a couple of weeks).
>>
>> Note that Homebrew just updated to ocaml-4.00.0, so hopefully Core
>> works with it too.
>>
>> -anil
>
>
>


From brankovv at gmail.com  Tue Sep  4 14:26:13 2012
From: brankovv at gmail.com (Vladimir Brankov)
Date: Tue, 4 Sep 2012 06:26:13 -0700 (PDT)
Subject: Compose function operator
In-Reply-To: <CACLX4jTU=Og-fnDpgAEzEFv1pPh3TKFhKJajLncxs=2DRwzZSg@mail.gmail.com>
References: <84233b57-4b25-4712-81eb-e30ec98d54cc@googlegroups.com>
 <CAK=fH+jzc59ccPkpkxrU+oG0_1qUsO_jiQ5rOZchn-Jr+VpN9w@mail.gmail.com>
 <fde573cc-4432-45a4-a408-7c41407b6248@googlegroups.com>
 <CADy1MasMTjjQXcn-oS27pDZS4T6ok0KCcQTCvnqozH6SSzATmw@mail.gmail.com>
 <e601804a-5f75-48e9-976e-dc7397de251b@googlegroups.com>
 <CACLX4jTU=Og-fnDpgAEzEFv1pPh3TKFhKJajLncxs=2DRwzZSg@mail.gmail.com>
Message-ID: <bf1d9287-072a-4112-9d37-f96dfcb50cb4@googlegroups.com>

I think that not having operators which are standard in Haskell, F# and 
Batteries is a brave decision.  Being harder to read can come from not 
being used to.  It would be interesting to hear arguments and experiences 
from where the operators are available.

On Friday, August 31, 2012 5:44:29 PM UTC-4, Yaron Minsky wrote:
>
> We've talked about this one a lot internally over the years, and have 
> settled on not adding a compose operator.  Our experience has been 
> that code using the compose operator tends to be harder to read, and 
> House's point about the cognitive load of infix operators is well 
> taken. 
>
> y 
>
> On Fri, Aug 31, 2012 at 4:20 PM, Vladimir Brankov <bran... at gmail.com<javascript:>> 
> wrote: 
> > What about this case: 
> > 
> >     List.iter l ~f:(fun t -> to_string t |! lowercase) 
> > 
> > as opposed to 
> > 
> >     List.iter l ~f:(lowercase |- to_string) 
> > 
> > I suppose you would argue that the first one is preferred.  That raises 
> a 
> > question - who decides whether a feature gets included or rejected?  I 
> > suppose that none of us can claim to know what the majority of the users 
> > would or wouldn't want.  What's the procedure for new features? 
> > 
> > On Friday, August 31, 2012 4:04:17 PM UTC-4, David House wrote: 
> >> 
> >> Don't you mean: 
> >> 
> >>   let name = lowercase |- to_string 
> >> 
> >> Functional composition is normally written such that the function on 
> >> the right is applied first. 
> >> 
> >> This strikes me as less clear than your example with |!, because of 
> >> the weird ordering. 
> >> 
> >> But even without the ordering constraint, if |- were as clear or only 
> >> a little clearer than |!, we should still not include it, because |! 
> >> already exists (and is more general), and because of that cost of 
> >> every new infix operator that I mentioned before. 
> >> 
> >> On 31 August 2012 21:00, Vladimir Brankov <bran... at gmail.com> wrote: 
> >> > Composition would not hurt in this case: 
> >> > 
> >> >     let name = to_string |- lowercase 
> >> > 
> >> > as opposed to 
> >> > 
> >> >     let name t = to_string t |! lowercase 
> >> > 
> >> > IMHO both are slightly clearer than: 
> >> > 
> >> >     let name t = lowercase (to_string t) 
> >> > 
> >> > This is a small example, imagine if we have a few stacked functions. 
> >> > 
> >> > On Friday, August 31, 2012 12:01:12 PM UTC-4, David House wrote: 
> >> >> 
> >> >> There is already (|!) which almost does what you want, but in a more 
> >> >> logical order. 
> >> >> 
> >> >> I say "almost" since it does not allow you to build up a partially 
> >> >> applied function. But I for one very much dislike Fn.compose in 
> those 
> >> >> scenarios. I think it's generally much clearer to write out the 
> >> >> lambda, since then one is forced to give a name to the variable. 
> E.g. 
> >> >> which is clearer? 
> >> >> 
> >> >>   List.map events ~f:(Fn.compose to_string fst) 
> >> >>   List.map events ~f:(fun (kind, _time) -> to_string kind) 
> >> >> 
> >> >> The latter code is much more annotated and, to me, clearer as a 
> result. 
> >> >> 
> >> >> I know that sometimes writing names is pretty unnecessary, because 
> >> >> it's already clear what the output of a function will be. And in 
> that 
> >> >> case, adding names can just clutter the code and decrease the 
> >> >> information density, making it harder to read. But one can just use 
> >> >> (|!), which as I said makes things appear in a more logical order. 
> >> >> 
> >> >> Finally, there is a significant cost for any new infix operator. If 
> >> >> that thing is not used all the time, it is very obscure and makes 
> code 
> >> >> quite opaque. 
> >> >> 
> >> >> On Fri, Aug 31, 2012 at 4:48 PM, Vladimir Brankov <bran... at gmail.com> 
>
> >> >> wrote: 
> >> >> > As far as I can tell, the only way to compose functions is 
> >> >> > Fn.compose. 
> >> >> > Why 
> >> >> > not having an operator as well?  It's easier to say: 
> >> >> > 
> >> >> >     f1 |- f2 |- f3 
> >> >> > 
> >> >> > than 
> >> >> > 
> >> >> >     compose (compose f1 f2) f3 
> >> >> > 
> >> >> > Also, I see that Batteries has some other interesting function 
> >> >> > composition 
> >> >> > operators.  I don't have any use for it now, but we may want to 
> think 
> >> >> > about 
> >> >> > it. 
> >> >> > 
> >> >> > 
> >> >> > 
> >> >> > 
> http://batteries.forge.ocamlcore.org/doc.preview:batteries-beta1/html/api/Standard.html 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120904/b980e231/attachment-0001.html>

From yminsky at janestreet.com  Tue Sep  4 16:25:21 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Tue, 4 Sep 2012 11:25:21 -0400
Subject: Compose function operator
In-Reply-To: <bf1d9287-072a-4112-9d37-f96dfcb50cb4@googlegroups.com>
References: <84233b57-4b25-4712-81eb-e30ec98d54cc@googlegroups.com>
	<CAK=fH+jzc59ccPkpkxrU+oG0_1qUsO_jiQ5rOZchn-Jr+VpN9w@mail.gmail.com>
	<fde573cc-4432-45a4-a408-7c41407b6248@googlegroups.com>
	<CADy1MasMTjjQXcn-oS27pDZS4T6ok0KCcQTCvnqozH6SSzATmw@mail.gmail.com>
	<e601804a-5f75-48e9-976e-dc7397de251b@googlegroups.com>
	<CACLX4jTU=Og-fnDpgAEzEFv1pPh3TKFhKJajLncxs=2DRwzZSg@mail.gmail.com>
	<bf1d9287-072a-4112-9d37-f96dfcb50cb4@googlegroups.com>
Message-ID: <CACLX4jTVzyF6MjfxpTEOTdvDEvLDbsT7tBYyt4v8LiHZKroQmw@mail.gmail.com>


API design is as much about what to exclude as what to include.
Throwing in every operator that other languages have doesn't seem like
a sound design principle.

On Tue, Sep 4, 2012 at 9:26 AM, Vladimir Brankov <brankovv at gmail.com> wrote:
> I think that not having operators which are standard in Haskell, F# and
> Batteries is a brave decision.  Being harder to read can come from not being
> used to.  It would be interesting to hear arguments and experiences from
> where the operators are available.
>
>
> On Friday, August 31, 2012 5:44:29 PM UTC-4, Yaron Minsky wrote:
>>
>> We've talked about this one a lot internally over the years, and have
>> settled on not adding a compose operator.  Our experience has been
>> that code using the compose operator tends to be harder to read, and
>> House's point about the cognitive load of infix operators is well
>> taken.
>>
>> y
>>
>> On Fri, Aug 31, 2012 at 4:20 PM, Vladimir Brankov <bran... at gmail.com>
>> wrote:
>> > What about this case:
>> >
>> >     List.iter l ~f:(fun t -> to_string t |! lowercase)
>> >
>> > as opposed to
>> >
>> >     List.iter l ~f:(lowercase |- to_string)
>> >
>> > I suppose you would argue that the first one is preferred.  That raises
>> > a
>> > question - who decides whether a feature gets included or rejected?  I
>> > suppose that none of us can claim to know what the majority of the users
>> > would or wouldn't want.  What's the procedure for new features?
>> >
>> > On Friday, August 31, 2012 4:04:17 PM UTC-4, David House wrote:
>> >>
>> >> Don't you mean:
>> >>
>> >>   let name = lowercase |- to_string
>> >>
>> >> Functional composition is normally written such that the function on
>> >> the right is applied first.
>> >>
>> >> This strikes me as less clear than your example with |!, because of
>> >> the weird ordering.
>> >>
>> >> But even without the ordering constraint, if |- were as clear or only
>> >> a little clearer than |!, we should still not include it, because |!
>> >> already exists (and is more general), and because of that cost of
>> >> every new infix operator that I mentioned before.
>> >>
>> >> On 31 August 2012 21:00, Vladimir Brankov <bran... at gmail.com> wrote:
>> >> > Composition would not hurt in this case:
>> >> >
>> >> >     let name = to_string |- lowercase
>> >> >
>> >> > as opposed to
>> >> >
>> >> >     let name t = to_string t |! lowercase
>> >> >
>> >> > IMHO both are slightly clearer than:
>> >> >
>> >> >     let name t = lowercase (to_string t)
>> >> >
>> >> > This is a small example, imagine if we have a few stacked functions.
>> >> >
>> >> > On Friday, August 31, 2012 12:01:12 PM UTC-4, David House wrote:
>> >> >>
>> >> >> There is already (|!) which almost does what you want, but in a more
>> >> >> logical order.
>> >> >>
>> >> >> I say "almost" since it does not allow you to build up a partially
>> >> >> applied function. But I for one very much dislike Fn.compose in
>> >> >> those
>> >> >> scenarios. I think it's generally much clearer to write out the
>> >> >> lambda, since then one is forced to give a name to the variable.
>> >> >> E.g.
>> >> >> which is clearer?
>> >> >>
>> >> >>   List.map events ~f:(Fn.compose to_string fst)
>> >> >>   List.map events ~f:(fun (kind, _time) -> to_string kind)
>> >> >>
>> >> >> The latter code is much more annotated and, to me, clearer as a
>> >> >> result.
>> >> >>
>> >> >> I know that sometimes writing names is pretty unnecessary, because
>> >> >> it's already clear what the output of a function will be. And in
>> >> >> that
>> >> >> case, adding names can just clutter the code and decrease the
>> >> >> information density, making it harder to read. But one can just use
>> >> >> (|!), which as I said makes things appear in a more logical order.
>> >> >>
>> >> >> Finally, there is a significant cost for any new infix operator. If
>> >> >> that thing is not used all the time, it is very obscure and makes
>> >> >> code
>> >> >> quite opaque.
>> >> >>
>> >> >> On Fri, Aug 31, 2012 at 4:48 PM, Vladimir Brankov
>> >> >> <bran... at gmail.com>
>> >> >> wrote:
>> >> >> > As far as I can tell, the only way to compose functions is
>> >> >> > Fn.compose.
>> >> >> > Why
>> >> >> > not having an operator as well?  It's easier to say:
>> >> >> >
>> >> >> >     f1 |- f2 |- f3
>> >> >> >
>> >> >> > than
>> >> >> >
>> >> >> >     compose (compose f1 f2) f3
>> >> >> >
>> >> >> > Also, I see that Batteries has some other interesting function
>> >> >> > composition
>> >> >> > operators.  I don't have any use for it now, but we may want to
>> >> >> > think
>> >> >> > about
>> >> >> > it.
>> >> >> >
>> >> >> >
>> >> >> >
>> >> >> >
>> >> >> > http://batteries.forge.ocamlcore.org/doc.preview:batteries-beta1/html/api/Standard.html


From sebastien.mondet at gmail.com  Tue Sep  4 17:40:27 2012
From: sebastien.mondet at gmail.com (Sebastien Mondet)
Date: Tue, 4 Sep 2012 12:40:27 -0400
Subject: Compose function operator
In-Reply-To: <CACLX4jTVzyF6MjfxpTEOTdvDEvLDbsT7tBYyt4v8LiHZKroQmw@mail.gmail.com>
References: <84233b57-4b25-4712-81eb-e30ec98d54cc@googlegroups.com>
 <CAK=fH+jzc59ccPkpkxrU+oG0_1qUsO_jiQ5rOZchn-Jr+VpN9w@mail.gmail.com>
 <fde573cc-4432-45a4-a408-7c41407b6248@googlegroups.com> <CADy1MasMTjjQXcn-oS27pDZS4T6ok0KCcQTCvnqozH6SSzATmw@mail.gmail.com>
 <e601804a-5f75-48e9-976e-dc7397de251b@googlegroups.com> <CACLX4jTU=Og-fnDpgAEzEFv1pPh3TKFhKJajLncxs=2DRwzZSg@mail.gmail.com>
 <bf1d9287-072a-4112-9d37-f96dfcb50cb4@googlegroups.com> <CACLX4jTVzyF6MjfxpTEOTdvDEvLDbsT7tBYyt4v8LiHZKroQmw@mail.gmail.com>
Message-ID: <CALScVY=5Pm8VP6XV191QovyAskQ_nH2LVbBw5QxvJ6XyRQvAPA@mail.gmail.com>

Hi

I agree that infix operators kill readability very very fast.


But, this good old trick could be a compromise (?):

Define these two:

  let (<<) f x = x f;;
  let (>>) x f = x f;;

And then create ?infix functions? which may be much more readable:

  let compose f g = fun x -> f (g x);;
  let pipe x f = f x;;
  let group f x = f x;;  (* Haskell's dollar... but readable *)


The operator precedence makes things look nice:

  let f = float <<compose>> (+) 42 << compose >> ( * ) 2;;

# f 1;;
- : float = 44.
# 1 <<pipe>> f;;
- : float = 44.
# 1 <<pipe>> f <<pipe>> (+.) 3.;;
- : float = 47.
# float <<group>> (+) 4 3;;
- : float = 7.

etc.


Cheers
Sebastien





On Tue, Sep 4, 2012 at 11:25 AM, Yaron Minsky <yminsky at janestreet.com>wrote:

> API design is as much about what to exclude as what to include.
> Throwing in every operator that other languages have doesn't seem like
> a sound design principle.
>
> On Tue, Sep 4, 2012 at 9:26 AM, Vladimir Brankov <brankovv at gmail.com>
> wrote:
> > I think that not having operators which are standard in Haskell, F# and
> > Batteries is a brave decision.  Being harder to read can come from not
> being
> > used to.  It would be interesting to hear arguments and experiences from
> > where the operators are available.
> >
> >
> > On Friday, August 31, 2012 5:44:29 PM UTC-4, Yaron Minsky wrote:
> >>
> >> We've talked about this one a lot internally over the years, and have
> >> settled on not adding a compose operator.  Our experience has been
> >> that code using the compose operator tends to be harder to read, and
> >> House's point about the cognitive load of infix operators is well
> >> taken.
> >>
> >> y
> >>
> >> On Fri, Aug 31, 2012 at 4:20 PM, Vladimir Brankov <bran... at gmail.com>
> >> wrote:
> >> > What about this case:
> >> >
> >> >     List.iter l ~f:(fun t -> to_string t |! lowercase)
> >> >
> >> > as opposed to
> >> >
> >> >     List.iter l ~f:(lowercase |- to_string)
> >> >
> >> > I suppose you would argue that the first one is preferred.  That
> raises
> >> > a
> >> > question - who decides whether a feature gets included or rejected?  I
> >> > suppose that none of us can claim to know what the majority of the
> users
> >> > would or wouldn't want.  What's the procedure for new features?
> >> >
> >> > On Friday, August 31, 2012 4:04:17 PM UTC-4, David House wrote:
> >> >>
> >> >> Don't you mean:
> >> >>
> >> >>   let name = lowercase |- to_string
> >> >>
> >> >> Functional composition is normally written such that the function on
> >> >> the right is applied first.
> >> >>
> >> >> This strikes me as less clear than your example with |!, because of
> >> >> the weird ordering.
> >> >>
> >> >> But even without the ordering constraint, if |- were as clear or only
> >> >> a little clearer than |!, we should still not include it, because |!
> >> >> already exists (and is more general), and because of that cost of
> >> >> every new infix operator that I mentioned before.
> >> >>
> >> >> On 31 August 2012 21:00, Vladimir Brankov <bran... at gmail.com> wrote:
> >> >> > Composition would not hurt in this case:
> >> >> >
> >> >> >     let name = to_string |- lowercase
> >> >> >
> >> >> > as opposed to
> >> >> >
> >> >> >     let name t = to_string t |! lowercase
> >> >> >
> >> >> > IMHO both are slightly clearer than:
> >> >> >
> >> >> >     let name t = lowercase (to_string t)
> >> >> >
> >> >> > This is a small example, imagine if we have a few stacked
> functions.
> >> >> >
> >> >> > On Friday, August 31, 2012 12:01:12 PM UTC-4, David House wrote:
> >> >> >>
> >> >> >> There is already (|!) which almost does what you want, but in a
> more
> >> >> >> logical order.
> >> >> >>
> >> >> >> I say "almost" since it does not allow you to build up a partially
> >> >> >> applied function. But I for one very much dislike Fn.compose in
> >> >> >> those
> >> >> >> scenarios. I think it's generally much clearer to write out the
> >> >> >> lambda, since then one is forced to give a name to the variable.
> >> >> >> E.g.
> >> >> >> which is clearer?
> >> >> >>
> >> >> >>   List.map events ~f:(Fn.compose to_string fst)
> >> >> >>   List.map events ~f:(fun (kind, _time) -> to_string kind)
> >> >> >>
> >> >> >> The latter code is much more annotated and, to me, clearer as a
> >> >> >> result.
> >> >> >>
> >> >> >> I know that sometimes writing names is pretty unnecessary, because
> >> >> >> it's already clear what the output of a function will be. And in
> >> >> >> that
> >> >> >> case, adding names can just clutter the code and decrease the
> >> >> >> information density, making it harder to read. But one can just
> use
> >> >> >> (|!), which as I said makes things appear in a more logical order.
> >> >> >>
> >> >> >> Finally, there is a significant cost for any new infix operator.
> If
> >> >> >> that thing is not used all the time, it is very obscure and makes
> >> >> >> code
> >> >> >> quite opaque.
> >> >> >>
> >> >> >> On Fri, Aug 31, 2012 at 4:48 PM, Vladimir Brankov
> >> >> >> <bran... at gmail.com>
> >> >> >> wrote:
> >> >> >> > As far as I can tell, the only way to compose functions is
> >> >> >> > Fn.compose.
> >> >> >> > Why
> >> >> >> > not having an operator as well?  It's easier to say:
> >> >> >> >
> >> >> >> >     f1 |- f2 |- f3
> >> >> >> >
> >> >> >> > than
> >> >> >> >
> >> >> >> >     compose (compose f1 f2) f3
> >> >> >> >
> >> >> >> > Also, I see that Batteries has some other interesting function
> >> >> >> > composition
> >> >> >> > operators.  I don't have any use for it now, but we may want to
> >> >> >> > think
> >> >> >> > about
> >> >> >> > it.
> >> >> >> >
> >> >> >> >
> >> >> >> >
> >> >> >> >
> >> >> >> >
> http://batteries.forge.ocamlcore.org/doc.preview:batteries-beta1/html/api/Standard.html
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120904/d35bf5b0/attachment-0001.html>

From yminsky at janestreet.com  Tue Sep  4 17:54:38 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Tue, 4 Sep 2012 12:54:38 -0400
Subject: Compose function operator
In-Reply-To: <CALScVY=5Pm8VP6XV191QovyAskQ_nH2LVbBw5QxvJ6XyRQvAPA@mail.gmail.com>
References: <84233b57-4b25-4712-81eb-e30ec98d54cc@googlegroups.com>
	<CAK=fH+jzc59ccPkpkxrU+oG0_1qUsO_jiQ5rOZchn-Jr+VpN9w@mail.gmail.com>
	<fde573cc-4432-45a4-a408-7c41407b6248@googlegroups.com>
	<CADy1MasMTjjQXcn-oS27pDZS4T6ok0KCcQTCvnqozH6SSzATmw@mail.gmail.com>
	<e601804a-5f75-48e9-976e-dc7397de251b@googlegroups.com>
	<CACLX4jTU=Og-fnDpgAEzEFv1pPh3TKFhKJajLncxs=2DRwzZSg@mail.gmail.com>
	<bf1d9287-072a-4112-9d37-f96dfcb50cb4@googlegroups.com>
	<CACLX4jTVzyF6MjfxpTEOTdvDEvLDbsT7tBYyt4v8LiHZKroQmw@mail.gmail.com>
	<CALScVY=5Pm8VP6XV191QovyAskQ_nH2LVbBw5QxvJ6XyRQvAPA@mail.gmail.com>
Message-ID: <CACLX4jS0h2vNAaDF07=HTUqUhvwpmpXXrYPT8Ki9qk7APOG91w@mail.gmail.com>


Ah, cute!  This is like Haskell's backtick syntax for converting a
prefix operator into an infix one, yes?  The main downside I see of
the particular notation is it looks a hell of a lot like quotations...

On Tue, Sep 4, 2012 at 12:40 PM, Sebastien Mondet
<sebastien.mondet at gmail.com> wrote:
>
> Hi
>
> I agree that infix operators kill readability very very fast.
>
>
> But, this good old trick could be a compromise (?):
>
> Define these two:
>
>   let (<<) f x = x f;;
>   let (>>) x f = x f;;
>
> And then create ?infix functions? which may be much more readable:
>
>   let compose f g = fun x -> f (g x);;
>   let pipe x f = f x;;
>   let group f x = f x;;  (* Haskell's dollar... but readable *)
>
>
> The operator precedence makes things look nice:
>
>   let f = float <<compose>> (+) 42 << compose >> ( * ) 2;;
>
> # f 1;;
> - : float = 44.
> # 1 <<pipe>> f;;
> - : float = 44.
> # 1 <<pipe>> f <<pipe>> (+.) 3.;;
> - : float = 47.
> # float <<group>> (+) 4 3;;
> - : float = 7.
>
> etc.
>
>
> Cheers
> Sebastien
>
>
>
>
>
> On Tue, Sep 4, 2012 at 11:25 AM, Yaron Minsky <yminsky at janestreet.com>
> wrote:
>>
>> API design is as much about what to exclude as what to include.
>> Throwing in every operator that other languages have doesn't seem like
>> a sound design principle.
>>
>> On Tue, Sep 4, 2012 at 9:26 AM, Vladimir Brankov <brankovv at gmail.com>
>> wrote:
>> > I think that not having operators which are standard in Haskell, F# and
>> > Batteries is a brave decision.  Being harder to read can come from not
>> > being
>> > used to.  It would be interesting to hear arguments and experiences from
>> > where the operators are available.
>> >
>> >
>> > On Friday, August 31, 2012 5:44:29 PM UTC-4, Yaron Minsky wrote:
>> >>
>> >> We've talked about this one a lot internally over the years, and have
>> >> settled on not adding a compose operator.  Our experience has been
>> >> that code using the compose operator tends to be harder to read, and
>> >> House's point about the cognitive load of infix operators is well
>> >> taken.
>> >>
>> >> y
>> >>
>> >> On Fri, Aug 31, 2012 at 4:20 PM, Vladimir Brankov <bran... at gmail.com>
>> >> wrote:
>> >> > What about this case:
>> >> >
>> >> >     List.iter l ~f:(fun t -> to_string t |! lowercase)
>> >> >
>> >> > as opposed to
>> >> >
>> >> >     List.iter l ~f:(lowercase |- to_string)
>> >> >
>> >> > I suppose you would argue that the first one is preferred.  That
>> >> > raises
>> >> > a
>> >> > question - who decides whether a feature gets included or rejected?
>> >> > I
>> >> > suppose that none of us can claim to know what the majority of the
>> >> > users
>> >> > would or wouldn't want.  What's the procedure for new features?
>> >> >
>> >> > On Friday, August 31, 2012 4:04:17 PM UTC-4, David House wrote:
>> >> >>
>> >> >> Don't you mean:
>> >> >>
>> >> >>   let name = lowercase |- to_string
>> >> >>
>> >> >> Functional composition is normally written such that the function on
>> >> >> the right is applied first.
>> >> >>
>> >> >> This strikes me as less clear than your example with |!, because of
>> >> >> the weird ordering.
>> >> >>
>> >> >> But even without the ordering constraint, if |- were as clear or
>> >> >> only
>> >> >> a little clearer than |!, we should still not include it, because |!
>> >> >> already exists (and is more general), and because of that cost of
>> >> >> every new infix operator that I mentioned before.
>> >> >>
>> >> >> On 31 August 2012 21:00, Vladimir Brankov <bran... at gmail.com> wrote:
>> >> >> > Composition would not hurt in this case:
>> >> >> >
>> >> >> >     let name = to_string |- lowercase
>> >> >> >
>> >> >> > as opposed to
>> >> >> >
>> >> >> >     let name t = to_string t |! lowercase
>> >> >> >
>> >> >> > IMHO both are slightly clearer than:
>> >> >> >
>> >> >> >     let name t = lowercase (to_string t)
>> >> >> >
>> >> >> > This is a small example, imagine if we have a few stacked
>> >> >> > functions.
>> >> >> >
>> >> >> > On Friday, August 31, 2012 12:01:12 PM UTC-4, David House wrote:
>> >> >> >>
>> >> >> >> There is already (|!) which almost does what you want, but in a
>> >> >> >> more
>> >> >> >> logical order.
>> >> >> >>
>> >> >> >> I say "almost" since it does not allow you to build up a
>> >> >> >> partially
>> >> >> >> applied function. But I for one very much dislike Fn.compose in
>> >> >> >> those
>> >> >> >> scenarios. I think it's generally much clearer to write out the
>> >> >> >> lambda, since then one is forced to give a name to the variable.
>> >> >> >> E.g.
>> >> >> >> which is clearer?
>> >> >> >>
>> >> >> >>   List.map events ~f:(Fn.compose to_string fst)
>> >> >> >>   List.map events ~f:(fun (kind, _time) -> to_string kind)
>> >> >> >>
>> >> >> >> The latter code is much more annotated and, to me, clearer as a
>> >> >> >> result.
>> >> >> >>
>> >> >> >> I know that sometimes writing names is pretty unnecessary,
>> >> >> >> because
>> >> >> >> it's already clear what the output of a function will be. And in
>> >> >> >> that
>> >> >> >> case, adding names can just clutter the code and decrease the
>> >> >> >> information density, making it harder to read. But one can just
>> >> >> >> use
>> >> >> >> (|!), which as I said makes things appear in a more logical
>> >> >> >> order.
>> >> >> >>
>> >> >> >> Finally, there is a significant cost for any new infix operator.
>> >> >> >> If
>> >> >> >> that thing is not used all the time, it is very obscure and makes
>> >> >> >> code
>> >> >> >> quite opaque.
>> >> >> >>
>> >> >> >> On Fri, Aug 31, 2012 at 4:48 PM, Vladimir Brankov
>> >> >> >> <bran... at gmail.com>
>> >> >> >> wrote:
>> >> >> >> > As far as I can tell, the only way to compose functions is
>> >> >> >> > Fn.compose.
>> >> >> >> > Why
>> >> >> >> > not having an operator as well?  It's easier to say:
>> >> >> >> >
>> >> >> >> >     f1 |- f2 |- f3
>> >> >> >> >
>> >> >> >> > than
>> >> >> >> >
>> >> >> >> >     compose (compose f1 f2) f3
>> >> >> >> >
>> >> >> >> > Also, I see that Batteries has some other interesting function
>> >> >> >> > composition
>> >> >> >> > operators.  I don't have any use for it now, but we may want to
>> >> >> >> > think
>> >> >> >> > about
>> >> >> >> > it.
>> >> >> >> >
>> >> >> >> >
>> >> >> >> >
>> >> >> >> >
>> >> >> >> >
>> >> >> >> > http://batteries.forge.ocamlcore.org/doc.preview:batteries-beta1/html/api/Standard.html
>
>


From 5764c029b688c1c0d24a2e97cd764f at gmail.com  Wed Sep  5 10:19:37 2012
From: 5764c029b688c1c0d24a2e97cd764f at gmail.com (Matej Kosik)
Date: Wed, 05 Sep 2012 10:19:37 +0100
Subject: Compose function operator
In-Reply-To: <CAK=fH+jzc59ccPkpkxrU+oG0_1qUsO_jiQ5rOZchn-Jr+VpN9w@mail.gmail.com>
References: <84233b57-4b25-4712-81eb-e30ec98d54cc@googlegroups.com> <CAK=fH+jzc59ccPkpkxrU+oG0_1qUsO_jiQ5rOZchn-Jr+VpN9w@mail.gmail.com>
Message-ID: <50471929.3090909@gmail.com>


On 31/08/12 17:01, David House wrote:
> There is already (|!) which almost does what you want, but in a more
> logical order.
> 
> I say "almost" since it does not allow you to build up a partially
> applied function. But I for one very much dislike Fn.compose in those
> scenarios. I think it's generally much clearer to write out the
> lambda, since then one is forced to give a name to the variable. E.g.
> which is clearer?
> 
>   List.map events ~f:(Fn.compose to_string fst)
>   List.map events ~f:(fun (kind, _time) -> to_string kind)
> 
> The latter code is much more annotated and, to me, clearer as a result.
> 
> I know that sometimes writing names is pretty unnecessary, because
> it's already clear what the output of a function will be. And in that
> case, adding names can just clutter the code and decrease the
> information density, making it harder to read. But one can just use
> (|!), which as I said makes things appear in a more logical order.

AFAIK, Batteries provide two relevant infix operators:

	|-

	-|

One of them is obviously redundant.

<speculation>
Both are kept probably because it is hard to decide which one to drop.
By dropping one, you can annoy some set of people.
By dropping the other one, you can annoy another set of people.
</speculation>

But function composition is an important technique for compressing
source code at micro-level. Even in mathematics, you have "o" operator
so introducing infix operator for function composition does not seem to
be a culturally alien thing. I got used to it. Sometimes really, code
verbosity is just verbosity, not clarity.

> 
> Finally, there is a significant cost for any new infix operator. If
> that thing is not used all the time, it is very obscure and makes code
> quite opaque.
> 
> On Fri, Aug 31, 2012 at 4:48 PM, Vladimir Brankov <brankovv at gmail.com> wrote:
>> As far as I can tell, the only way to compose functions is Fn.compose.  Why
>> not having an operator as well?  It's easier to say:
>>
>>     f1 |- f2 |- f3
>>
>> than
>>
>>     compose (compose f1 f2) f3
>>
>> Also, I see that Batteries has some other interesting function composition
>> operators.  I don't have any use for it now, but we may want to think about
>> it.
>>
>> http://batteries.forge.ocamlcore.org/doc.preview:batteries-beta1/html/api/Standard.html



From francois.berenger.working at gmail.com  Wed Sep  5 05:33:17 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Wed, 5 Sep 2012 13:33:17 +0900
Subject: Compose function operator
In-Reply-To: <CACLX4jS0h2vNAaDF07=HTUqUhvwpmpXXrYPT8Ki9qk7APOG91w@mail.gmail.com>
References: <84233b57-4b25-4712-81eb-e30ec98d54cc@googlegroups.com>
	<CAK=fH+jzc59ccPkpkxrU+oG0_1qUsO_jiQ5rOZchn-Jr+VpN9w@mail.gmail.com>
	<fde573cc-4432-45a4-a408-7c41407b6248@googlegroups.com>
	<CADy1MasMTjjQXcn-oS27pDZS4T6ok0KCcQTCvnqozH6SSzATmw@mail.gmail.com>
	<e601804a-5f75-48e9-976e-dc7397de251b@googlegroups.com>
	<CACLX4jTU=Og-fnDpgAEzEFv1pPh3TKFhKJajLncxs=2DRwzZSg@mail.gmail.com>
	<bf1d9287-072a-4112-9d37-f96dfcb50cb4@googlegroups.com>
	<CACLX4jTVzyF6MjfxpTEOTdvDEvLDbsT7tBYyt4v8LiHZKroQmw@mail.gmail.com>
	<CALScVY=5Pm8VP6XV191QovyAskQ_nH2LVbBw5QxvJ6XyRQvAPA@mail.gmail.com>
	<CACLX4jS0h2vNAaDF07=HTUqUhvwpmpXXrYPT8Ki9qk7APOG91w@mail.gmail.com>
Message-ID: <CAMQaOgPx-fGR3Z9Z6g56zdLkQtGzSehuJk4vuw18nHuPk5g8iQ@mail.gmail.com>


<<pipe>> is a little too verbose I think.
But Sebastian's examples looks cool and readable.

On Wed, Sep 5, 2012 at 1:54 AM, Yaron Minsky <yminsky at janestreet.com> wrote:
> Ah, cute!  This is like Haskell's backtick syntax for converting a
> prefix operator into an infix one, yes?  The main downside I see of
> the particular notation is it looks a hell of a lot like quotations...
>
> On Tue, Sep 4, 2012 at 12:40 PM, Sebastien Mondet
> <sebastien.mondet at gmail.com> wrote:
>>
>> Hi
>>
>> I agree that infix operators kill readability very very fast.
>>
>>
>> But, this good old trick could be a compromise (?):
>>
>> Define these two:
>>
>>   let (<<) f x = x f;;
>>   let (>>) x f = x f;;
>>
>> And then create ?infix functions? which may be much more readable:
>>
>>   let compose f g = fun x -> f (g x);;
>>   let pipe x f = f x;;
>>   let group f x = f x;;  (* Haskell's dollar... but readable *)
>>
>>
>> The operator precedence makes things look nice:
>>
>>   let f = float <<compose>> (+) 42 << compose >> ( * ) 2;;
>>
>> # f 1;;
>> - : float = 44.
>> # 1 <<pipe>> f;;
>> - : float = 44.
>> # 1 <<pipe>> f <<pipe>> (+.) 3.;;
>> - : float = 47.
>> # float <<group>> (+) 4 3;;
>> - : float = 7.
>>
>> etc.
>>
>>
>> Cheers
>> Sebastien
>>
>>
>>
>>
>>
>> On Tue, Sep 4, 2012 at 11:25 AM, Yaron Minsky <yminsky at janestreet.com>
>> wrote:
>>>
>>> API design is as much about what to exclude as what to include.
>>> Throwing in every operator that other languages have doesn't seem like
>>> a sound design principle.
>>>
>>> On Tue, Sep 4, 2012 at 9:26 AM, Vladimir Brankov <brankovv at gmail.com>
>>> wrote:
>>> > I think that not having operators which are standard in Haskell, F# and
>>> > Batteries is a brave decision.  Being harder to read can come from not
>>> > being
>>> > used to.  It would be interesting to hear arguments and experiences from
>>> > where the operators are available.
>>> >
>>> >
>>> > On Friday, August 31, 2012 5:44:29 PM UTC-4, Yaron Minsky wrote:
>>> >>
>>> >> We've talked about this one a lot internally over the years, and have
>>> >> settled on not adding a compose operator.  Our experience has been
>>> >> that code using the compose operator tends to be harder to read, and
>>> >> House's point about the cognitive load of infix operators is well
>>> >> taken.
>>> >>
>>> >> y
>>> >>
>>> >> On Fri, Aug 31, 2012 at 4:20 PM, Vladimir Brankov <bran... at gmail.com>
>>> >> wrote:
>>> >> > What about this case:
>>> >> >
>>> >> >     List.iter l ~f:(fun t -> to_string t |! lowercase)
>>> >> >
>>> >> > as opposed to
>>> >> >
>>> >> >     List.iter l ~f:(lowercase |- to_string)
>>> >> >
>>> >> > I suppose you would argue that the first one is preferred.  That
>>> >> > raises
>>> >> > a
>>> >> > question - who decides whether a feature gets included or rejected?
>>> >> > I
>>> >> > suppose that none of us can claim to know what the majority of the
>>> >> > users
>>> >> > would or wouldn't want.  What's the procedure for new features?
>>> >> >
>>> >> > On Friday, August 31, 2012 4:04:17 PM UTC-4, David House wrote:
>>> >> >>
>>> >> >> Don't you mean:
>>> >> >>
>>> >> >>   let name = lowercase |- to_string
>>> >> >>
>>> >> >> Functional composition is normally written such that the function on
>>> >> >> the right is applied first.
>>> >> >>
>>> >> >> This strikes me as less clear than your example with |!, because of
>>> >> >> the weird ordering.
>>> >> >>
>>> >> >> But even without the ordering constraint, if |- were as clear or
>>> >> >> only
>>> >> >> a little clearer than |!, we should still not include it, because |!
>>> >> >> already exists (and is more general), and because of that cost of
>>> >> >> every new infix operator that I mentioned before.
>>> >> >>
>>> >> >> On 31 August 2012 21:00, Vladimir Brankov <bran... at gmail.com> wrote:
>>> >> >> > Composition would not hurt in this case:
>>> >> >> >
>>> >> >> >     let name = to_string |- lowercase
>>> >> >> >
>>> >> >> > as opposed to
>>> >> >> >
>>> >> >> >     let name t = to_string t |! lowercase
>>> >> >> >
>>> >> >> > IMHO both are slightly clearer than:
>>> >> >> >
>>> >> >> >     let name t = lowercase (to_string t)
>>> >> >> >
>>> >> >> > This is a small example, imagine if we have a few stacked
>>> >> >> > functions.
>>> >> >> >
>>> >> >> > On Friday, August 31, 2012 12:01:12 PM UTC-4, David House wrote:
>>> >> >> >>
>>> >> >> >> There is already (|!) which almost does what you want, but in a
>>> >> >> >> more
>>> >> >> >> logical order.
>>> >> >> >>
>>> >> >> >> I say "almost" since it does not allow you to build up a
>>> >> >> >> partially
>>> >> >> >> applied function. But I for one very much dislike Fn.compose in
>>> >> >> >> those
>>> >> >> >> scenarios. I think it's generally much clearer to write out the
>>> >> >> >> lambda, since then one is forced to give a name to the variable.
>>> >> >> >> E.g.
>>> >> >> >> which is clearer?
>>> >> >> >>
>>> >> >> >>   List.map events ~f:(Fn.compose to_string fst)
>>> >> >> >>   List.map events ~f:(fun (kind, _time) -> to_string kind)
>>> >> >> >>
>>> >> >> >> The latter code is much more annotated and, to me, clearer as a
>>> >> >> >> result.
>>> >> >> >>
>>> >> >> >> I know that sometimes writing names is pretty unnecessary,
>>> >> >> >> because
>>> >> >> >> it's already clear what the output of a function will be. And in
>>> >> >> >> that
>>> >> >> >> case, adding names can just clutter the code and decrease the
>>> >> >> >> information density, making it harder to read. But one can just
>>> >> >> >> use
>>> >> >> >> (|!), which as I said makes things appear in a more logical
>>> >> >> >> order.
>>> >> >> >>
>>> >> >> >> Finally, there is a significant cost for any new infix operator.
>>> >> >> >> If
>>> >> >> >> that thing is not used all the time, it is very obscure and makes
>>> >> >> >> code
>>> >> >> >> quite opaque.
>>> >> >> >>
>>> >> >> >> On Fri, Aug 31, 2012 at 4:48 PM, Vladimir Brankov
>>> >> >> >> <bran... at gmail.com>
>>> >> >> >> wrote:
>>> >> >> >> > As far as I can tell, the only way to compose functions is
>>> >> >> >> > Fn.compose.
>>> >> >> >> > Why
>>> >> >> >> > not having an operator as well?  It's easier to say:
>>> >> >> >> >
>>> >> >> >> >     f1 |- f2 |- f3
>>> >> >> >> >
>>> >> >> >> > than
>>> >> >> >> >
>>> >> >> >> >     compose (compose f1 f2) f3
>>> >> >> >> >
>>> >> >> >> > Also, I see that Batteries has some other interesting function
>>> >> >> >> > composition
>>> >> >> >> > operators.  I don't have any use for it now, but we may want to
>>> >> >> >> > think
>>> >> >> >> > about
>>> >> >> >> > it.
>>> >> >> >> >
>>> >> >> >> >
>>> >> >> >> >
>>> >> >> >> >
>>> >> >> >> >
>>> >> >> >> > http://batteries.forge.ocamlcore.org/doc.preview:batteries-beta1/html/api/Standard.html
>>
>>


From anil at recoil.org  Thu Sep  6 00:29:51 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 6 Sep 2012 00:29:51 +0100
Subject: Lwt/Async abstraction for HTTP library
In-Reply-To: <CAK=fH+iho4Nzuvbi63yKc9nJRzyUakB9tPGHFkAmUg5N4pZf0A@mail.gmail.com>
References: <C83A6D18-3331-4311-8874-AD50F5640E37@recoil.org>
 <CACLX4jS3Vw0boWAk-a+0DG7ALy4qxMuMiW6DYJ=EhLTrdm8JQA@mail.gmail.com>
 <20120821021103.GR24660@dark.recoil.org>
 <CAK=fH+iho4Nzuvbi63yKc9nJRzyUakB9tPGHFkAmUg5N4pZf0A@mail.gmail.com>
Message-ID: <20120905232951.GA17109@dark.recoil.org>


On Thu, Aug 23, 2012 at 09:01:52AM +0100, David House wrote:
> On Tue, Aug 21, 2012 at 3:11 AM, Anil Madhavapeddy <anil at recoil.org> wrote:
> > So my question is what to do with:
> >
> >   (* TODO: how to run write () as a background task? *)
> >   let _ = write () in
> >   rd
> >
> > Does write() need to be registered with something to be a "proper"
> > background task for accounting purposes, or to run a cleanup function if
> > the Reader pipe terminates early?
> 
> As Yaron points out, it is more idiomatic to say [whenever (write
> ())], or in the newer version of async, [don't_wait_for (write ())].
> For example, the stuff below "TODO" in Client.read_response might be
> written:
> 
> if close then don't_wait_for (
>   Pipe.closed body_rd
>   >>= fun () ->
>   Reader.close ic
>   >>= fun () ->
>   Writer.close oc)
> 
> There is no need to register background processes with the scheduler.
> Your code is already correct in the case of early termination by the
> consumer: one of the [Pipe.write_when_ready] calls will terminate with
> `Closed, and your loop will exit.
> 
> P.s. I see in your code that you open Deferred. Why is this? All of
> the infix operators, plus [return] and a few others, are already in
> the scope of Async.Std, so there is no need to go opening anything
> else.
> 

David, thanks for all these hints.  I was opening Deferred due to missing
the Async.Std, so I've reverted all that now.

> Also, two more stylistic points:
> 
> 1. If the code on the right-hand side of a bind does not return a
> deferred, it is common to use >>| instead of >>=, and then delete all
> the "return"s on the right-hand side. E.g. in read_response.
> 
> 2. All code between two binds is guaranteed to execute atomically,
> without being interleaved with any other code. This is a very nice
> feature of async, and really simplifies thinking about concurrent
> code. Because of this, it is idiomatic to put all of your binds
> flush-left, so that they stick out visually. (This is not quite
> universal in our code base, but is certainly to be encouraged.) You
> can see that in my snippet above.

Ack.  I've been tidying up http://github.com/avsm/ocaml-cohttp to work
across Async, Lwt_unix and Mirage via functors. The result is a reasonably
good HTTP/1.1 (w/ pipelining) client/server for all these threading
systems.

Many of my other thoughts on Async shortcomings seem to be addressed by
the upcoming new release (such as Async equivalents of Core modules such
as Option.  I'll play around with them shortly.

I'm just going to finish up SSL bindings for Async to get it to
feature-parity with the Lwt version, and then port the Github API bindings
(http://github.com/avsm/ocaml-github).  It's quite useful having two
different threading libraries to really force a good structure between
protocol modules.

Most of these will be packaged up in OPAM by the end of the week, for our
upcoming CUFP tutorial next week.

-- 
Anil Madhavapeddy                                 http://anil.recoil.org


From anil at recoil.org  Thu Sep  6 22:35:58 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 6 Sep 2012 14:35:58 -0700
Subject: type_conv/ocaml4 release
In-Reply-To: <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org> <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
Message-ID: <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>


On 8 Jul 2012, at 19:02, Markus Mottl <markus.mottl at gmail.com> wrote:

> On Sun, Jul 8, 2012 at 5:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> Also, is it necessary to have warnings-are-errors enabled in the released tarballs? It makes it awkward to test out new compiler versions, which usually introduce new ones every release.
> 
> I agree with Anil that warnings-as-errors should not be enabled in
> releases, only during development work.


The latest pre-release Core tarballs also fail to compile under Homebrew/MacOS X (OCaml-4.00) due to warnings-as-errors still being activated on release tarballs.  Have you considered disabling this on release tarballs?

-anil



From anil at recoil.org  Thu Sep  6 23:25:05 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 6 Sep 2012 15:25:05 -0700
Subject: type_conv/ocaml4 release
In-Reply-To: <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org> <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com> <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org> <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
Message-ID: <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>

The warnings are due to unused variables, mostly (such as linux_ext.ml and the Epoll module having variables in there like 'let none = 0' which are unused).  It's hard to see how to fix these without conditional compilation, or just skipping the Linux_ext module entirely).

The warn_error=false flag in the environment sounds great, but isn't currently present in the tarballs.  It would be very easy to set in most packaging systems, so that's a good alternative to turning it off by default too.

I'm trying a MacOS X 3.12.1 compile now to see how that goes...

-anil

On 6 Sep 2012, at 15:21, Yury Sulsky <yury.sulsky at gmail.com> wrote:

> Thanks Anil, I'll fix the packages to disable the warnings-as-errors. In the meantime, you should be able to build with "warn_error=false" in your environment.
> Aside from that, what warnings are you encountering?
> 
> On Thu, Sep 6, 2012 at 5:35 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> On 8 Jul 2012, at 19:02, Markus Mottl <markus.mottl at gmail.com> wrote:
> 
> > On Sun, Jul 8, 2012 at 5:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> >> Also, is it necessary to have warnings-are-errors enabled in the released tarballs? It makes it awkward to test out new compiler versions, which usually introduce new ones every release.
> >
> > I agree with Anil that warnings-as-errors should not be enabled in
> > releases, only during development work.
> 
> 
> The latest pre-release Core tarballs also fail to compile under Homebrew/MacOS X (OCaml-4.00) due to warnings-as-errors still being activated on release tarballs.  Have you considered disabling this on release tarballs?
> 
> -anil
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120906/b4f53b40/attachment-0001.html>

From anil at recoil.org  Thu Sep  6 23:26:41 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 6 Sep 2012 15:26:41 -0700
Subject: type_conv/ocaml4 release
In-Reply-To: <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org> <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com> <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org> <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com> <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
Message-ID: <A27D704F-2338-46B6-8FF1-92C5FF1F9A81@recoil.org>


Linux/Debian gives me a ~30000 line backtrace in the Async build, using separate tarballs. If you have OPAM-0.5, you can try:

$ opam remote -add core-dev git://github.com/avsm/opam-core-pre0
$ opam install async

File "lib/async.cmx", line 1, characters 0-1:
Error: The implementation (obtained by packing)
      does not match the interface lib/async.mli:
      Modules do not match:
        sig
          module Backpatched :

 <25,000 lines of signature snipped>

      Values do not match:
        val to_host_and_port :
          string ->
          int -> Async_extra.Import.Socket.Address.Inet.t where_to_connect
      is not included in
        val to_host_and_port :
          string ->
          int -> Async_extra.Import.Socket.Address.Inet.t where_to_connect

Anyone else see this? Async_core,_extra,_unix seem to install ok on Debian, it's just the final pack that's failing on ocaml-3.12.1. 

-anil


On 6 Sep 2012, at 15:25, Anil Madhavapeddy <anil at recoil.org> wrote:

> The warnings are due to unused variables, mostly (such as linux_ext.ml and the Epoll module having variables in there like 'let none = 0' which are unused).  It's hard to see how to fix these without conditional compilation, or just skipping the Linux_ext module entirely).
> 
> The warn_error=false flag in the environment sounds great, but isn't currently present in the tarballs.  It would be very easy to set in most packaging systems, so that's a good alternative to turning it off by default too.
> 
> I'm trying a MacOS X 3.12.1 compile now to see how that goes...
> 
> -anil
> 
> On 6 Sep 2012, at 15:21, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> 
>> Thanks Anil, I'll fix the packages to disable the warnings-as-errors. In the meantime, you should be able to build with "warn_error=false" in your environment.
>> Aside from that, what warnings are you encountering?
>> 
>> On Thu, Sep 6, 2012 at 5:35 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> On 8 Jul 2012, at 19:02, Markus Mottl <markus.mottl at gmail.com> wrote:
>> 
>> > On Sun, Jul 8, 2012 at 5:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> >> Also, is it necessary to have warnings-are-errors enabled in the released tarballs? It makes it awkward to test out new compiler versions, which usually introduce new ones every release.
>> >
>> > I agree with Anil that warnings-as-errors should not be enabled in
>> > releases, only during development work.
>> 
>> 
>> The latest pre-release Core tarballs also fail to compile under Homebrew/MacOS X (OCaml-4.00) due to warnings-as-errors still being activated on release tarballs.  Have you considered disabling this on release tarballs?
>> 
>> -anil
>> 
>> 
> 



From anil at recoil.org  Thu Sep  6 23:36:52 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 6 Sep 2012 15:36:52 -0700
Subject: type_conv/ocaml4 release
In-Reply-To: <A27D704F-2338-46B6-8FF1-92C5FF1F9A81@recoil.org>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org> <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com> <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org> <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com> <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org> <A27D704F-2338-46B6-8FF1-92C5FF1F9A81@recoil.org>
Message-ID: <023B1A10-0B4D-433D-A037-A5F666D27696@recoil.org>


3.12.1/MacOS X Core compilation fails with yet another error. I've not had a chance to chase this one down either, but it's done via a fresh 3.12.1 install using `opam switch 3.12.1`.

+ mv open_stubs.o lib/open_stubs.o
+ ocamlfind ocamlc -ccopt -pipe -ccopt -g -ccopt -fPIC -ccopt -O2 -ccopt -fomit-frame-pointer -ccopt -fsigned-char -ccopt -Wall -ccopt -pedantic -ccopt -Wextra -ccopt -Wunused -ccopt -Wno-long-long -c lib/signal_stubs.c
+ mv signal_stubs.o lib/signal_stubs.o
+ ocamlfind ocamlc -ccopt -pipe -ccopt -g -ccopt -fPIC -ccopt -O2 -ccopt -fomit-frame-pointer -ccopt -fsigned-char -ccopt -Wall -ccopt -pedantic -ccopt -Wextra -ccopt -Wunused -ccopt -Wno-long-long -c lib/unix_stubs.c
+ + ocamlfind ocamlc -ccopt -pipe -ccopt -g -ccopt -fPIC -ccopt -O2 -ccopt -fomit-frame-pointer -ccopt -fsigned-char -ccopt -Wall -ccopt -pedantic -ccopt -Wextra -ccopt -Wunused -ccopt -Wno-long-long -c lib/unix_stubs.c
+ lib/unix_stubs.c: In function ?core_unix_stat_64?:
+ lib/unix_stubs.c:393: warning: ?stat64? is deprecated (declared at /usr/include/sys/stat.h:466)
+ lib/unix_stubs.c: In function ?core_unix_lstat_64?:
+ lib/unix_stubs.c:407: warning: ?lstat64? is deprecated (declared at /usr/include/sys/stat.h:465)
+ lib/unix_stubs.c: In function ?core_unix_fstat_64?:
+ lib/unix_stubs.c:419: warning: ?fstat64? is deprecated (declared at /usr/include/sys/stat.h:464)
+ lib/unix_stubs.c:595:2: warning: #warning is a GCC extension
+ lib/unix_stubs.c:595:2: warning: #warning "_POSIX_SYNCHRONIZED_IO undefined or <= 0; aliasing unix_fdatasync to unix_fsync"
+ lib/unix_stubs.c:869:2: warning: #warning is a GCC extension
+ lib/unix_stubs.c:869:2: warning: #warning "posix timers not present; clock functions undefined"
+ lib/unix_stubs.c:1069:2: warning: #warning is a GCC extension
+ lib/unix_stubs.c:1069:2: warning: #warning "POSIX TMO not present; unix_mutex_timedlock undefined"
+ lib/unix_stubs.c:1419:2: warning: #warning is a GCC extension
+ lib/unix_stubs.c:1419:2: warning: #warning "_POSIX_PRIORITY_SCHEDULING not present; sched_setscheduler undefined"
+ mv unix_stubs.o lib/unix_stubs.o
+ /Users/avsm/.opam/3.12.1/bin/ocamlmklib -o lib/core_stubs lib/backtrace_stubs.o lib/bigstring_marshal_stubs.o lib/bigstring_stubs.o lib/crc_stubs.o lib/linux_ext_stubs.o lib/misc.o lib/ocaml_utils_stubs.o lib/open_stubs.o lib/signal_stubs.o lib/unix_stubs.o
+ + /Users/avsm/.opam/3.12.1/bin/ocamlmklib -o lib/core_stubs lib/backtrace_stubs.o lib/bigstring_marshal_stubs.o lib/bigstring_stubs.o lib/crc_stubs.o lib/linux_ext_stubs.o lib/misc.o lib/ocaml_utils_stubs.o lib/open_stubs.o lib/signal_stubs.o lib/unix_stubs.o
+ ld: warning: -read_only_relocs cannot be used with x86_64
+ /usr/bin/ranlib: file: lib/libcore_stubs.a(backtrace_stubs.o) has no symbols
+ /usr/bin/ranlib: file: lib/libcore_stubs.a(linux_ext_stubs.o) has no symbols
+ ranlib: file: lib/libcore_stubs.a(backtrace_stubs.o) has no symbols
+ ranlib: file: lib/libcore_stubs.a(linux_ext_stubs.o) has no symbols
+ ocamlfind ocamldep -package variantslib.syntax -package variantslib -package unix -package threads -package sexplib.syntax -package sexplib -package res -package pa_pipebang -package pa_ounit -package fieldslib.syntax -package fieldslib -package comparelib.syntax -package bin_prot.syntax -package bin_prot -package bigarray -syntax camlp4o -modules lib/array_permute.ml > lib/array_permute.ml.depends
+ + ocamlfind ocamldep -package variantslib.syntax -package variantslib -package unix -package threads -package sexplib.syntax -package sexplib -package res -package pa_pipebang -package pa_ounit -package fieldslib.syntax -package fieldslib -package comparelib.syntax -package bin_prot.syntax -package bin_prot -package bigarray -syntax camlp4o -modules lib/array_permute.ml > lib/array_permute.ml.depends
+ Camlp4: Uncaught exception: DynLoader.Error ("/Users/avsm/.opam/3.12.1/lib/ocaml/bigarray.cma", "error loading shared library: /usr/local/lib/ocaml/stublibs/dllbigarray.so: dlopen(/usr/local/lib/ocaml/stublibs/dllbigarray.so, 138): Symbol not found: _caml_hash_mix_double\n  Referenced from: /usr/local/lib/ocaml/stublibs/dllbigarray.so\n  Expected in: flat namespace\n in /usr/local/lib/ocaml/stublibs/dllbigarray.so")
+ 
+ Preprocessing error on file lib/array_permute.ml
+ Command exited with code 2.

caml_hash_mix_double should be exported in dllbigarray already, but I'll have to look into this one later.

-anil

On 6 Sep 2012, at 15:26, Anil Madhavapeddy <anil at recoil.org> wrote:

> Linux/Debian gives me a ~30000 line backtrace in the Async build, using separate tarballs. If you have OPAM-0.5, you can try:
> 
> $ opam remote -add core-dev git://github.com/avsm/opam-core-pre0
> $ opam install async
> 
> File "lib/async.cmx", line 1, characters 0-1:
> Error: The implementation (obtained by packing)
>      does not match the interface lib/async.mli:
>      Modules do not match:
>        sig
>          module Backpatched :
> 
> <25,000 lines of signature snipped>
> 
>      Values do not match:
>        val to_host_and_port :
>          string ->
>          int -> Async_extra.Import.Socket.Address.Inet.t where_to_connect
>      is not included in
>        val to_host_and_port :
>          string ->
>          int -> Async_extra.Import.Socket.Address.Inet.t where_to_connect
> 
> Anyone else see this? Async_core,_extra,_unix seem to install ok on Debian, it's just the final pack that's failing on ocaml-3.12.1. 
> 
> -anil
> 
> 
> On 6 Sep 2012, at 15:25, Anil Madhavapeddy <anil at recoil.org> wrote:
> 
>> The warnings are due to unused variables, mostly (such as linux_ext.ml and the Epoll module having variables in there like 'let none = 0' which are unused).  It's hard to see how to fix these without conditional compilation, or just skipping the Linux_ext module entirely).
>> 
>> The warn_error=false flag in the environment sounds great, but isn't currently present in the tarballs.  It would be very easy to set in most packaging systems, so that's a good alternative to turning it off by default too.
>> 
>> I'm trying a MacOS X 3.12.1 compile now to see how that goes...
>> 
>> -anil
>> 
>> On 6 Sep 2012, at 15:21, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>> 
>>> Thanks Anil, I'll fix the packages to disable the warnings-as-errors. In the meantime, you should be able to build with "warn_error=false" in your environment.
>>> Aside from that, what warnings are you encountering?
>>> 
>>> On Thu, Sep 6, 2012 at 5:35 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>> On 8 Jul 2012, at 19:02, Markus Mottl <markus.mottl at gmail.com> wrote:
>>> 
>>>> On Sun, Jul 8, 2012 at 5:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>>>> Also, is it necessary to have warnings-are-errors enabled in the released tarballs? It makes it awkward to test out new compiler versions, which usually introduce new ones every release.
>>>> 
>>>> I agree with Anil that warnings-as-errors should not be enabled in
>>>> releases, only during development work.
>>> 
>>> 
>>> The latest pre-release Core tarballs also fail to compile under Homebrew/MacOS X (OCaml-4.00) due to warnings-as-errors still being activated on release tarballs.  Have you considered disabling this on release tarballs?
>>> 
>>> -anil
>>> 
>>> 
>> 
> 



From anil at recoil.org  Thu Sep  6 23:37:49 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 6 Sep 2012 15:37:49 -0700
Subject: type_conv/ocaml4 release
In-Reply-To: <CAEDxudzdxYz4biWFb8Vap=wp6tohNix8dbMVaJxO2c9RbS22gg@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org> <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com> <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org> <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com> <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org> <CAEDxudzdxYz4biWFb8Vap=wp6tohNix8dbMVaJxO2c9RbS22gg@mail.gmail.com>
Message-ID: <8E2C8BCD-962D-40E7-B26D-2F77D22DFB0B@recoil.org>

On 6 Sep 2012, at 15:36, Yury Sulsky <yury.sulsky at gmail.com> wrote:

> On Thu, Sep 6, 2012 at 6:25 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> The warnings are due to unused variables, mostly (such as linux_ext.ml and the Epoll module having variables in there like 'let none = 0' which are unused).  It's hard to see how to fix these without conditional compilation, or just skipping the Linux_ext module entirely).
> 
> Thanks, I don't know how I missed that one. The fix there is to just remove line 669 in linux_ext.ml (that "none" value actually isn't used).

Oh! A warning that actually is an error ;-)

-anil
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120906/60e156a6/attachment-0001.html>

From anil at recoil.org  Thu Sep  6 23:54:37 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 6 Sep 2012 15:54:37 -0700
Subject: type_conv/ocaml4 release
In-Reply-To: <CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org> <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com> <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org> <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com> <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org> <CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com>
Message-ID: <8AD494F3-8932-4E57-ABCA-58366E8553C1@recoil.org>

On 6 Sep 2012, at 15:42, Markus Mottl <markus.mottl at gmail.com> wrote:

> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
> The warnings are due to unused variables,
> 
> You might also want to apply my Bitbucket patch queue for ocaml-core.  The resulting tree should build fine on Mac OS X, fixes a couple of bugs, and adds some useful features.

I'm a bit confused by all the patch queues up on Bitbucket (forgive me if this has been covered before on the list!)

Is this the correct one?
https://bitbucket.org/yminsky/ocaml-core-submissions

The pre-release tarballs aren't on Bitbucket yet, and the repository-splitting script has to be run by Yury, so it's got to be applied manually too I think.  I only use the individual Core tarballs since other packages depend on them (mainly type_conv).

-anil
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120906/9dece0c8/attachment-0001.html>

From francois.berenger.working at gmail.com  Thu Sep  6 08:04:23 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 6 Sep 2012 16:04:23 +0900
Subject: Compose function operator
In-Reply-To: <CAMQaOgPx-fGR3Z9Z6g56zdLkQtGzSehuJk4vuw18nHuPk5g8iQ@mail.gmail.com>
References: <84233b57-4b25-4712-81eb-e30ec98d54cc@googlegroups.com>
	<CAK=fH+jzc59ccPkpkxrU+oG0_1qUsO_jiQ5rOZchn-Jr+VpN9w@mail.gmail.com>
	<fde573cc-4432-45a4-a408-7c41407b6248@googlegroups.com>
	<CADy1MasMTjjQXcn-oS27pDZS4T6ok0KCcQTCvnqozH6SSzATmw@mail.gmail.com>
	<e601804a-5f75-48e9-976e-dc7397de251b@googlegroups.com>
	<CACLX4jTU=Og-fnDpgAEzEFv1pPh3TKFhKJajLncxs=2DRwzZSg@mail.gmail.com>
	<bf1d9287-072a-4112-9d37-f96dfcb50cb4@googlegroups.com>
	<CACLX4jTVzyF6MjfxpTEOTdvDEvLDbsT7tBYyt4v8LiHZKroQmw@mail.gmail.com>
	<CALScVY=5Pm8VP6XV191QovyAskQ_nH2LVbBw5QxvJ6XyRQvAPA@mail.gmail.com>
	<CACLX4jS0h2vNAaDF07=HTUqUhvwpmpXXrYPT8Ki9qk7APOG91w@mail.gmail.com>
	<CAMQaOgPx-fGR3Z9Z6g56zdLkQtGzSehuJk4vuw18nHuPk5g8iQ@mail.gmail.com>
Message-ID: <CAMQaOgOFDuQPXGdtiQWCbN9_q5G+JV+uk40mNJxGeAfd0REwtg@mail.gmail.com>


On Wed, Sep 5, 2012 at 1:33 PM, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> <<pipe>> is a little too verbose I think.
> But Sebastian's examples looks cool and readable.

I think the notation is . in Haskell: i.e. (f . g) x = f (g x).
It's not very far from the math notation which is a big dot
if I remember correctly.


From anil at recoil.org  Fri Sep  7 00:12:06 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 6 Sep 2012 16:12:06 -0700
Subject: type_conv/ocaml4 release
In-Reply-To: <CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org> <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com> <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org> <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com> <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org> <CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com> <CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com> <CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com>
Message-ID: <D4B1E5DF-2B3B-4A21-B574-BE9975118919@recoil.org>

Spot on... looks like OPAM might be leaking an environment variable that is pointing to the wrong DLL stubs directory after a compiler switch.  Should be easy to fix.

Sorry about that; I'll clean up the 25 different OCaml installations I have and do a more fresh build as soon as I get a chance!

-anil

On 6 Sep 2012, at 16:09, Yury Sulsky <yury.sulsky at gmail.com> wrote:

> Ah, okay. Anil, it looks like there might be some mixup in your install. The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere in ocaml-3.12.
> Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS after all, which is why I didn't catch that unused value warning. I'll install and test with 4.00 on a Mac tomorrow.
> 
> On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> Hi Markus,
> 
> A few of your sexplib changes didn't make it into this release, and I'll take a look at your patch queue to see what else we're missing. But I've been building and testing on Mac OS X. I'll see if I can recreate Anil's missing symbol problem (I haven't been testing with 3.12.1)
> 
> 
> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com> wrote:
> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
> The warnings are due to unused variables,
> 
> You might also want to apply my Bitbucket patch queue for ocaml-core.  The resulting tree should build fine on Mac OS X, fixes a couple of bugs, and adds some useful features.
> 
> Regards,
> Markus
> 
> 
> -- 
> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120906/6b89b0b9/attachment-0001.html>

From yury.sulsky at gmail.com  Thu Sep  6 23:21:00 2012
From: yury.sulsky at gmail.com (Yury Sulsky)
Date: Thu, 6 Sep 2012 18:21:00 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
Message-ID: <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>

Thanks Anil, I'll fix the packages to disable the warnings-as-errors. In
the meantime, you should be able to build with "warn_error=false" in your
environment.
Aside from that, what warnings are you encountering?

On Thu, Sep 6, 2012 at 5:35 PM, Anil Madhavapeddy <anil at recoil.org> wrote:

> On 8 Jul 2012, at 19:02, Markus Mottl <markus.mottl at gmail.com> wrote:
>
> > On Sun, Jul 8, 2012 at 5:12 PM, Anil Madhavapeddy <anil at recoil.org>
> wrote:
> >> Also, is it necessary to have warnings-are-errors enabled in the
> released tarballs? It makes it awkward to test out new compiler versions,
> which usually introduce new ones every release.
> >
> > I agree with Anil that warnings-as-errors should not be enabled in
> > releases, only during development work.
>
>
> The latest pre-release Core tarballs also fail to compile under
> Homebrew/MacOS X (OCaml-4.00) due to warnings-as-errors still being
> activated on release tarballs.  Have you considered disabling this on
> release tarballs?
>
> -anil
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120906/0595d12d/attachment-0001.html>

From yury.sulsky at gmail.com  Thu Sep  6 23:23:02 2012
From: yury.sulsky at gmail.com (Yury Sulsky)
Date: Thu, 6 Sep 2012 18:23:02 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
Message-ID: <CAEDxudx0iwC2axXXqT6xnuTLeUyvMcKSt_1iui=62_XdE9cNaA@mail.gmail.com>

Ah, scratch that warn_error=false bit. Sorry, I just need to regenerate the
packages.

On Thu, Sep 6, 2012 at 6:21 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:

> Thanks Anil, I'll fix the packages to disable the warnings-as-errors. In
> the meantime, you should be able to build with "warn_error=false" in your
> environment.
> Aside from that, what warnings are you encountering?
>
>
> On Thu, Sep 6, 2012 at 5:35 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>
>> On 8 Jul 2012, at 19:02, Markus Mottl <markus.mottl at gmail.com> wrote:
>>
>> > On Sun, Jul 8, 2012 at 5:12 PM, Anil Madhavapeddy <anil at recoil.org>
>> wrote:
>> >> Also, is it necessary to have warnings-are-errors enabled in the
>> released tarballs? It makes it awkward to test out new compiler versions,
>> which usually introduce new ones every release.
>> >
>> > I agree with Anil that warnings-as-errors should not be enabled in
>> > releases, only during development work.
>>
>>
>> The latest pre-release Core tarballs also fail to compile under
>> Homebrew/MacOS X (OCaml-4.00) due to warnings-as-errors still being
>> activated on release tarballs.  Have you considered disabling this on
>> release tarballs?
>>
>> -anil
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120906/ee8230ab/attachment-0001.html>

From yury.sulsky at gmail.com  Thu Sep  6 23:34:24 2012
From: yury.sulsky at gmail.com (Yury Sulsky)
Date: Thu, 6 Sep 2012 18:34:24 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <A27D704F-2338-46B6-8FF1-92C5FF1F9A81@recoil.org>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
	<98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
	<A27D704F-2338-46B6-8FF1-92C5FF1F9A81@recoil.org>
Message-ID: <CAEDxudw0AzufT4mJXFOnRZTwJrBx-DudTNpjixkD88y1g2nfVQ@mail.gmail.com>

There's a horrible hack to get around this in the build-and-install script
to disable the creation of async.mli during the link step. Does anyone
understand why packing Async with a cmi causes this error?

On Thu, Sep 6, 2012 at 6:26 PM, Anil Madhavapeddy <anil at recoil.org> wrote:

> Linux/Debian gives me a ~30000 line backtrace in the Async build, using
> separate tarballs. If you have OPAM-0.5, you can try:
>
> $ opam remote -add core-dev git://github.com/avsm/opam-core-pre0
> $ opam install async
>
> File "lib/async.cmx", line 1, characters 0-1:
> Error: The implementation (obtained by packing)
>       does not match the interface lib/async.mli:
>       Modules do not match:
>         sig
>           module Backpatched :
>
>  <25,000 lines of signature snipped>
>
>       Values do not match:
>         val to_host_and_port :
>           string ->
>           int -> Async_extra.Import.Socket.Address.Inet.t where_to_connect
>       is not included in
>         val to_host_and_port :
>           string ->
>           int -> Async_extra.Import.Socket.Address.Inet.t where_to_connect
>
> Anyone else see this? Async_core,_extra,_unix seem to install ok on
> Debian, it's just the final pack that's failing on ocaml-3.12.1.
>
> -anil
>
>
> On 6 Sep 2012, at 15:25, Anil Madhavapeddy <anil at recoil.org> wrote:
>
> > The warnings are due to unused variables, mostly (such as linux_ext.mland the Epoll module having variables in there like 'let none = 0' which
> are unused).  It's hard to see how to fix these without conditional
> compilation, or just skipping the Linux_ext module entirely).
> >
> > The warn_error=false flag in the environment sounds great, but isn't
> currently present in the tarballs.  It would be very easy to set in most
> packaging systems, so that's a good alternative to turning it off by
> default too.
> >
> > I'm trying a MacOS X 3.12.1 compile now to see how that goes...
> >
> > -anil
> >
> > On 6 Sep 2012, at 15:21, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> >
> >> Thanks Anil, I'll fix the packages to disable the warnings-as-errors.
> In the meantime, you should be able to build with "warn_error=false" in
> your environment.
> >> Aside from that, what warnings are you encountering?
> >>
> >> On Thu, Sep 6, 2012 at 5:35 PM, Anil Madhavapeddy <anil at recoil.org>
> wrote:
> >> On 8 Jul 2012, at 19:02, Markus Mottl <markus.mottl at gmail.com> wrote:
> >>
> >> > On Sun, Jul 8, 2012 at 5:12 PM, Anil Madhavapeddy <anil at recoil.org>
> wrote:
> >> >> Also, is it necessary to have warnings-are-errors enabled in the
> released tarballs? It makes it awkward to test out new compiler versions,
> which usually introduce new ones every release.
> >> >
> >> > I agree with Anil that warnings-as-errors should not be enabled in
> >> > releases, only during development work.
> >>
> >>
> >> The latest pre-release Core tarballs also fail to compile under
> Homebrew/MacOS X (OCaml-4.00) due to warnings-as-errors still being
> activated on release tarballs.  Have you considered disabling this on
> release tarballs?
> >>
> >> -anil
> >>
> >>
> >
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120906/5017a881/attachment-0001.html>

From yminsky at janestreet.com  Thu Sep  6 23:35:31 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 6 Sep 2012 18:35:31 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <CAEDxudw0AzufT4mJXFOnRZTwJrBx-DudTNpjixkD88y1g2nfVQ@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
	<98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
	<A27D704F-2338-46B6-8FF1-92C5FF1F9A81@recoil.org>
	<CAEDxudw0AzufT4mJXFOnRZTwJrBx-DudTNpjixkD88y1g2nfVQ@mail.gmail.com>
Message-ID: <CACLX4jR67XzOR2X5zH2g4KqPuV_CJK-jGuTvZp-+C+j3q0=rGw@mail.gmail.com>


Looping in Nick, Valentin and Sweeks.  I think they've probably seen
some of these issues before.

y

On Thu, Sep 6, 2012 at 6:34 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> There's a horrible hack to get around this in the build-and-install script
> to disable the creation of async.mli during the link step. Does anyone
> understand why packing Async with a cmi causes this error?
>
>
> On Thu, Sep 6, 2012 at 6:26 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>
>> Linux/Debian gives me a ~30000 line backtrace in the Async build, using
>> separate tarballs. If you have OPAM-0.5, you can try:
>>
>> $ opam remote -add core-dev git://github.com/avsm/opam-core-pre0
>> $ opam install async
>>
>> File "lib/async.cmx", line 1, characters 0-1:
>> Error: The implementation (obtained by packing)
>>       does not match the interface lib/async.mli:
>>       Modules do not match:
>>         sig
>>           module Backpatched :
>>
>>  <25,000 lines of signature snipped>
>>
>>       Values do not match:
>>         val to_host_and_port :
>>           string ->
>>           int -> Async_extra.Import.Socket.Address.Inet.t where_to_connect
>>       is not included in
>>         val to_host_and_port :
>>           string ->
>>           int -> Async_extra.Import.Socket.Address.Inet.t where_to_connect
>>
>> Anyone else see this? Async_core,_extra,_unix seem to install ok on
>> Debian, it's just the final pack that's failing on ocaml-3.12.1.
>>
>> -anil
>>
>>
>> On 6 Sep 2012, at 15:25, Anil Madhavapeddy <anil at recoil.org> wrote:
>>
>> > The warnings are due to unused variables, mostly (such as linux_ext.ml
>> > and the Epoll module having variables in there like 'let none = 0' which are
>> > unused).  It's hard to see how to fix these without conditional compilation,
>> > or just skipping the Linux_ext module entirely).
>> >
>> > The warn_error=false flag in the environment sounds great, but isn't
>> > currently present in the tarballs.  It would be very easy to set in most
>> > packaging systems, so that's a good alternative to turning it off by default
>> > too.
>> >
>> > I'm trying a MacOS X 3.12.1 compile now to see how that goes...
>> >
>> > -anil
>> >
>> > On 6 Sep 2012, at 15:21, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>> >
>> >> Thanks Anil, I'll fix the packages to disable the warnings-as-errors.
>> >> In the meantime, you should be able to build with "warn_error=false" in your
>> >> environment.
>> >> Aside from that, what warnings are you encountering?
>> >>
>> >> On Thu, Sep 6, 2012 at 5:35 PM, Anil Madhavapeddy <anil at recoil.org>
>> >> wrote:
>> >> On 8 Jul 2012, at 19:02, Markus Mottl <markus.mottl at gmail.com> wrote:
>> >>
>> >> > On Sun, Jul 8, 2012 at 5:12 PM, Anil Madhavapeddy <anil at recoil.org>
>> >> > wrote:
>> >> >> Also, is it necessary to have warnings-are-errors enabled in the
>> >> >> released tarballs? It makes it awkward to test out new compiler versions,
>> >> >> which usually introduce new ones every release.
>> >> >
>> >> > I agree with Anil that warnings-as-errors should not be enabled in
>> >> > releases, only during development work.
>> >>
>> >>
>> >> The latest pre-release Core tarballs also fail to compile under
>> >> Homebrew/MacOS X (OCaml-4.00) due to warnings-as-errors still being
>> >> activated on release tarballs.  Have you considered disabling this on
>> >> release tarballs?
>> >>
>> >> -anil
>> >>
>> >>
>> >
>>
>


From yury.sulsky at gmail.com  Thu Sep  6 23:36:46 2012
From: yury.sulsky at gmail.com (Yury Sulsky)
Date: Thu, 6 Sep 2012 18:36:46 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
	<98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
Message-ID: <CAEDxudzdxYz4biWFb8Vap=wp6tohNix8dbMVaJxO2c9RbS22gg@mail.gmail.com>

On Thu, Sep 6, 2012 at 6:25 PM, Anil Madhavapeddy <anil at recoil.org> wrote:

> The warnings are due to unused variables, mostly (such as linux_ext.mland the Epoll module having variables in there like 'let none = 0' which
> are unused).  It's hard to see how to fix these without conditional
> compilation, or just skipping the Linux_ext module entirely).
>

Thanks, I don't know how I missed that one. The fix there is to just remove
line 669 in linux_ext.ml (that "none" value actually isn't used).


>
> The warn_error=false flag in the environment sounds great, but isn't
> currently present in the tarballs.  It would be very easy to set in most
> packaging systems, so that's a good alternative to turning it off by
> default too.
>
> I'm trying a MacOS X 3.12.1 compile now to see how that goes...
>
> -anil
>
> On 6 Sep 2012, at 15:21, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>
> Thanks Anil, I'll fix the packages to disable the warnings-as-errors. In
> the meantime, you should be able to build with "warn_error=false" in your
> environment.
> Aside from that, what warnings are you encountering?
>
> On Thu, Sep 6, 2012 at 5:35 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>
>> On 8 Jul 2012, at 19:02, Markus Mottl <markus.mottl at gmail.com> wrote:
>>
>> > On Sun, Jul 8, 2012 at 5:12 PM, Anil Madhavapeddy <anil at recoil.org>
>> wrote:
>> >> Also, is it necessary to have warnings-are-errors enabled in the
>> released tarballs? It makes it awkward to test out new compiler versions,
>> which usually introduce new ones every release.
>> >
>> > I agree with Anil that warnings-as-errors should not be enabled in
>> > releases, only during development work.
>>
>>
>> The latest pre-release Core tarballs also fail to compile under
>> Homebrew/MacOS X (OCaml-4.00) due to warnings-as-errors still being
>> activated on release tarballs.  Have you considered disabling this on
>> release tarballs?
>>
>> -anil
>>
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120906/3b047eba/attachment-0001.html>

From markus.mottl at gmail.com  Thu Sep  6 23:42:24 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Thu, 6 Sep 2012 18:42:24 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
	<98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
Message-ID: <CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com>

On Thursday, September 6, 2012, Anil Madhavapeddy wrote:

> The warnings are due to unused variables,
>

You might also want to apply my Bitbucket patch queue for ocaml-core.  The
resulting tree should build fine on Mac OS X, fixes a couple of bugs, and
adds some useful features.

Regards,
Markus

>

-- 
Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120906/90ba8734/attachment-0001.html>

From yury.sulsky at gmail.com  Thu Sep  6 23:55:02 2012
From: yury.sulsky at gmail.com (Yury Sulsky)
Date: Thu, 6 Sep 2012 18:55:02 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
	<98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
	<CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com>
Message-ID: <CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com>

Hi Markus,

A few of your sexplib changes didn't make it into this release, and I'll
take a look at your patch queue to see what else we're missing. But I've
been building and testing on Mac OS X. I'll see if I can recreate Anil's
missing symbol problem (I haven't been testing with 3.12.1)

On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com> wrote:

> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
>
>> The warnings are due to unused variables,
>>
>
> You might also want to apply my Bitbucket patch queue for ocaml-core.  The
> resulting tree should build fine on Mac OS X, fixes a couple of bugs, and
> adds some useful features.
>
> Regards,
> Markus
>
>>
>
> --
> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120906/a983a8ab/attachment-0001.html>

From yury.sulsky at gmail.com  Fri Sep  7 00:09:56 2012
From: yury.sulsky at gmail.com (Yury Sulsky)
Date: Thu, 6 Sep 2012 19:09:56 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
	<98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
	<CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com>
	<CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com>
Message-ID: <CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com>

Ah, okay. Anil, it looks like there might be some mixup in your install.
The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere in
ocaml-3.12.
Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS
after all, which is why I didn't catch that unused value warning. I'll
install and test with 4.00 on a Mac tomorrow.

On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:

> Hi Markus,
>
> A few of your sexplib changes didn't make it into this release, and I'll
> take a look at your patch queue to see what else we're missing. But I've
> been building and testing on Mac OS X. I'll see if I can recreate Anil's
> missing symbol problem (I haven't been testing with 3.12.1)
>
>
> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com>wrote:
>
>> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
>>
>>> The warnings are due to unused variables,
>>>
>>
>> You might also want to apply my Bitbucket patch queue for ocaml-core.
>>  The resulting tree should build fine on Mac OS X, fixes a couple of bugs,
>> and adds some useful features.
>>
>> Regards,
>> Markus
>>
>>>
>>
>> --
>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120906/c7eab775/attachment-0001.html>

From francois.berenger.working at gmail.com  Fri Sep  7 05:38:58 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Thu, 6 Sep 2012 21:38:58 -0700 (PDT)
Subject: when starting a new project with Async...
Message-ID: <2fcb89fb-c641-49d0-b3c7-36dfb3d073b4@googlegroups.com>

Hello,

I will use Async, should I better use core also instead of the
standard Pervasives module?

Previously, I used batteries, but I'm OK to switch to something more
fail-safe for this new project.

Also, please don't forget the logger in the next release of core! :)

Regards,
F.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120906/5d28044b/attachment-0001.html>

From markus.mottl at gmail.com  Fri Sep  7 02:55:29 2012
From: markus.mottl at gmail.com (Markus Mottl)
Date: Thu, 6 Sep 2012 21:55:29 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <8AD494F3-8932-4E57-ABCA-58366E8553C1@recoil.org>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
	<98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
	<CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com>
	<8AD494F3-8932-4E57-ABCA-58366E8553C1@recoil.org>
Message-ID: <CAP_800qyqMe-NPR=N+Wg4gJhmGmASPQJnU6oAv5wqakCELDtvg@mail.gmail.com>


On Thu, Sep 6, 2012 at 6:54 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> I'm a bit confused by all the patch queues up on Bitbucket (forgive me if
> this has been covered before on the list!)
>
> Is this the correct one?
> https://bitbucket.org/yminsky/ocaml-core-submissions

The above is the queue of patches accepted by Jane Street.  You can
get my fork, which has a lot of patches that have not yet been
accepted, from:

  https://bitbucket.org/mmottl/ocaml-core-submissions

You may want to read up on Bitbucket patch queues if you want to learn
how to merge and apply them:

  http://ches.nausicaamedia.com/articles/technogeekery/using-mercurial-queues-and-bitbucket-org

Regards,
Markus

-- 
Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com


From dmhouse at gmail.com  Fri Sep  7 05:48:00 2012
From: dmhouse at gmail.com (David House)
Date: Fri, 7 Sep 2012 05:48:00 +0100
Subject: when starting a new project with Async...
In-Reply-To: <2fcb89fb-c641-49d0-b3c7-36dfb3d073b4@googlegroups.com>
References: <2fcb89fb-c641-49d0-b3c7-36dfb3d073b4@googlegroups.com>
Message-ID: <CADy1MauCO9EJxGYTX4y-8JXdiH9K_8eoe86hdy41thQetr=Ptw@mail.gmail.com>


Yes, Async is built on top of core, and it is basically required to
use core when using async.

On 7 September 2012 05:38, Francois Berenger
<francois.berenger.working at gmail.com> wrote:
> Hello,
>
> I will use Async, should I better use core also instead of the
> standard Pervasives module?
>
> Previously, I used batteries, but I'm OK to switch to something more
> fail-safe for this new project.
>
> Also, please don't forget the logger in the next release of core! :)
>
> Regards,
> F.
>


From vgatien-baron at janestreet.com  Fri Sep  7 11:01:02 2012
From: vgatien-baron at janestreet.com (Valentin Gatien-Baron)
Date: Fri, 7 Sep 2012 11:01:02 +0100
Subject: type_conv/ocaml4 release
In-Reply-To: <CACLX4jR67XzOR2X5zH2g4KqPuV_CJK-jGuTvZp-+C+j3q0=rGw@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
	<98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
	<A27D704F-2338-46B6-8FF1-92C5FF1F9A81@recoil.org>
	<CAEDxudw0AzufT4mJXFOnRZTwJrBx-DudTNpjixkD88y1g2nfVQ@mail.gmail.com>
	<CACLX4jR67XzOR2X5zH2g4KqPuV_CJK-jGuTvZp-+C+j3q0=rGw@mail.gmail.com>
Message-ID: <CAFd54qPM1kAeFQqQgdYx0SfOB-PHTZkcMVT14pgDwp1FfdJ0BA@mail.gmail.com>

It is hard to say why async doesn't build if we don't even know what
commands were executed.

>From the look of it, I would blame ocamlbuild for doing something fishy.
When packing and when there is no mli for the pack, It touches the mli,
calls the compiler and then deletes the mli. I don't see how that's solving
anything, the code doesn't say it and there is actually a FIXME right at
that place, although nothing says what needs to be fixed. It is also the
only place in ocamlbuild where it is creates mlis this way.

On Thu, Sep 6, 2012 at 11:35 PM, Yaron Minsky <yminsky at janestreet.com>wrote:

> Looping in Nick, Valentin and Sweeks.  I think they've probably seen
> some of these issues before.
>
> y
>
> On Thu, Sep 6, 2012 at 6:34 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> > There's a horrible hack to get around this in the build-and-install
> script
> > to disable the creation of async.mli during the link step. Does anyone
> > understand why packing Async with a cmi causes this error?
> >
> >
> > On Thu, Sep 6, 2012 at 6:26 PM, Anil Madhavapeddy <anil at recoil.org>
> wrote:
> >>
> >> Linux/Debian gives me a ~30000 line backtrace in the Async build, using
> >> separate tarballs. If you have OPAM-0.5, you can try:
> >>
> >> $ opam remote -add core-dev git://github.com/avsm/opam-core-pre0
> >> $ opam install async
> >>
> >> File "lib/async.cmx", line 1, characters 0-1:
> >> Error: The implementation (obtained by packing)
> >>       does not match the interface lib/async.mli:
> >>       Modules do not match:
> >>         sig
> >>           module Backpatched :
> >>
> >>  <25,000 lines of signature snipped>
> >>
> >>       Values do not match:
> >>         val to_host_and_port :
> >>           string ->
> >>           int -> Async_extra.Import.Socket.Address.Inet.t
> where_to_connect
> >>       is not included in
> >>         val to_host_and_port :
> >>           string ->
> >>           int -> Async_extra.Import.Socket.Address.Inet.t
> where_to_connect
> >>
> >> Anyone else see this? Async_core,_extra,_unix seem to install ok on
> >> Debian, it's just the final pack that's failing on ocaml-3.12.1.
> >>
> >> -anil
> >>
> >>
> >> On 6 Sep 2012, at 15:25, Anil Madhavapeddy <anil at recoil.org> wrote:
> >>
> >> > The warnings are due to unused variables, mostly (such as
> linux_ext.ml
> >> > and the Epoll module having variables in there like 'let none = 0'
> which are
> >> > unused).  It's hard to see how to fix these without conditional
> compilation,
> >> > or just skipping the Linux_ext module entirely).
> >> >
> >> > The warn_error=false flag in the environment sounds great, but isn't
> >> > currently present in the tarballs.  It would be very easy to set in
> most
> >> > packaging systems, so that's a good alternative to turning it off by
> default
> >> > too.
> >> >
> >> > I'm trying a MacOS X 3.12.1 compile now to see how that goes...
> >> >
> >> > -anil
> >> >
> >> > On 6 Sep 2012, at 15:21, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> >> >
> >> >> Thanks Anil, I'll fix the packages to disable the warnings-as-errors.
> >> >> In the meantime, you should be able to build with "warn_error=false"
> in your
> >> >> environment.
> >> >> Aside from that, what warnings are you encountering?
> >> >>
> >> >> On Thu, Sep 6, 2012 at 5:35 PM, Anil Madhavapeddy <anil at recoil.org>
> >> >> wrote:
> >> >> On 8 Jul 2012, at 19:02, Markus Mottl <markus.mottl at gmail.com>
> wrote:
> >> >>
> >> >> > On Sun, Jul 8, 2012 at 5:12 PM, Anil Madhavapeddy <anil at recoil.org
> >
> >> >> > wrote:
> >> >> >> Also, is it necessary to have warnings-are-errors enabled in the
> >> >> >> released tarballs? It makes it awkward to test out new compiler
> versions,
> >> >> >> which usually introduce new ones every release.
> >> >> >
> >> >> > I agree with Anil that warnings-as-errors should not be enabled in
> >> >> > releases, only during development work.
> >> >>
> >> >>
> >> >> The latest pre-release Core tarballs also fail to compile under
> >> >> Homebrew/MacOS X (OCaml-4.00) due to warnings-as-errors still being
> >> >> activated on release tarballs.  Have you considered disabling this on
> >> >> release tarballs?
> >> >>
> >> >> -anil
> >> >>
> >> >>
> >> >
> >>
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120907/f8f7a0f1/attachment-0001.html>

From nicolas at braud-santoni.eu  Fri Sep  7 11:20:14 2012
From: nicolas at braud-santoni.eu (Nicolas Braud-Santoni)
Date: Fri, 7 Sep 2012 12:20:14 +0200
Subject: Compose function operator
In-Reply-To: <CAMQaOgOFDuQPXGdtiQWCbN9_q5G+JV+uk40mNJxGeAfd0REwtg@mail.gmail.com>
References: <84233b57-4b25-4712-81eb-e30ec98d54cc@googlegroups.com>
	<CAK=fH+jzc59ccPkpkxrU+oG0_1qUsO_jiQ5rOZchn-Jr+VpN9w@mail.gmail.com>
	<fde573cc-4432-45a4-a408-7c41407b6248@googlegroups.com>
	<CADy1MasMTjjQXcn-oS27pDZS4T6ok0KCcQTCvnqozH6SSzATmw@mail.gmail.com>
	<e601804a-5f75-48e9-976e-dc7397de251b@googlegroups.com>
	<CACLX4jTU=Og-fnDpgAEzEFv1pPh3TKFhKJajLncxs=2DRwzZSg@mail.gmail.com>
	<bf1d9287-072a-4112-9d37-f96dfcb50cb4@googlegroups.com>
	<CACLX4jTVzyF6MjfxpTEOTdvDEvLDbsT7tBYyt4v8LiHZKroQmw@mail.gmail.com>
	<CALScVY=5Pm8VP6XV191QovyAskQ_nH2LVbBw5QxvJ6XyRQvAPA@mail.gmail.com>
	<CACLX4jS0h2vNAaDF07=HTUqUhvwpmpXXrYPT8Ki9qk7APOG91w@mail.gmail.com>
	<CAMQaOgPx-fGR3Z9Z6g56zdLkQtGzSehuJk4vuw18nHuPk5g8iQ@mail.gmail.com>
	<CAMQaOgOFDuQPXGdtiQWCbN9_q5G+JV+uk40mNJxGeAfd0REwtg@mail.gmail.com>
Message-ID: <CA+qp_4r6H0TaBECP4NrqbeKgttgAyB1JrBL6P_=LB3Rdt5cecg@mail.gmail.com>


Exactly.

As far as I know, the dot notation was chosen for this reason.

2012/9/6 Francois Berenger <francois.berenger.working at gmail.com>:
> On Wed, Sep 5, 2012 at 1:33 PM, Francois Berenger
> <francois.berenger.working at gmail.com> wrote:
>> <<pipe>> is a little too verbose I think.
>> But Sebastian's examples looks cool and readable.
>
> I think the notation is . in Haskell: i.e. (f . g) x = f (g x).
> It's not very far from the math notation which is a big dot
> if I remember correctly.


From anil at recoil.org  Sat Sep  8 01:43:01 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Fri, 7 Sep 2012 17:43:01 -0700
Subject: type_conv/ocaml4 release
In-Reply-To: <CAEDxudx=hh98khJRNgjCD=QYOxw7xY9kPWCXAqUWpMnJg+Kr3Q@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org> <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com> <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org> <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com> <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org> <CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com> <CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com> <CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com> <D4B1E5DF-2B3B-4A21-B574-BE9975118919@recoil.org> <CAEDxudx=hh98khJRNgjCD=QYOxw7xY9kPWCXAqUWpMnJg+Kr3Q@mail.gmail.com>
Message-ID: <4367EABA-A450-4A7E-A25D-95F45B7A66CB@recoil.org>

Trying it now. I've pushed updates to the avsm/opam-core-pre0 and am compiling them now.

Is there a hard requirement on ocaml-4.00.0 now? bin_prot's myocamlbuild:

+ + /usr/bin/ocamlopt.opt -I /usr/lib/ocaml/ocamlbuild unix.cmxa /usr/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa myocamlbuild.ml /usr/lib/ocaml/ocamlbuild/ocamlbuild.cmx -o myocamlbuild
+ File "myocamlbuild.ml", line 506, characters 24-50:
+ Error: Unbound value Filename.get_temp_dir_name

...which only appeared in ocaml-4.00.0, so 3.12.1 compilation fails (Debian/wheezy).

-anil

On 7 Sep 2012, at 17:13, Yury Sulsky <yury.sulsky at gmail.com> wrote:

> Hi Anil,
> 
> I've just uploaded new packages to https://ocaml.janestreet.com/ocaml-core/108.07.00-pre1/. I've moved the async hack down into base/async/setup.ml, so it should work when building async individually.
> 
> Could you take a look and see if they work for you?
> 
> Thanks,
> Yury
> 
> On Thu, Sep 6, 2012 at 7:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> Spot on... looks like OPAM might be leaking an environment variable that is pointing to the wrong DLL stubs directory after a compiler switch.  Should be easy to fix.
> 
> Sorry about that; I'll clean up the 25 different OCaml installations I have and do a more fresh build as soon as I get a chance!
> 
> -anil
> 
> 
> On 6 Sep 2012, at 16:09, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> 
>> Ah, okay. Anil, it looks like there might be some mixup in your install. The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere in ocaml-3.12.
>> Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS after all, which is why I didn't catch that unused value warning. I'll install and test with 4.00 on a Mac tomorrow.
>> 
>> On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>> Hi Markus,
>> 
>> A few of your sexplib changes didn't make it into this release, and I'll take a look at your patch queue to see what else we're missing. But I've been building and testing on Mac OS X. I'll see if I can recreate Anil's missing symbol problem (I haven't been testing with 3.12.1)
>> 
>> 
>> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com> wrote:
>> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
>> The warnings are due to unused variables,
>> 
>> You might also want to apply my Bitbucket patch queue for ocaml-core.  The resulting tree should build fine on Mac OS X, fixes a couple of bugs, and adds some useful features.
>> 
>> Regards,
>> Markus
>> 
>> 
>> -- 
>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>> 
>> 
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120907/f892688a/attachment-0001.html>

From avsm2 at cl.cam.ac.uk  Sat Sep  8 02:19:09 2012
From: avsm2 at cl.cam.ac.uk (Anil Madhavapeddy)
Date: Fri, 7 Sep 2012 18:19:09 -0700
Subject: type_conv/ocaml4 release
In-Reply-To: <4367EABA-A450-4A7E-A25D-95F45B7A66CB@recoil.org>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org> <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com> <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org> <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com> <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org> <CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com> <CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com> <CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com> <D4B1E5DF-2B3B-4A21-B574-BE9975118919@recoil.org> <CAEDxudx=hh98khJRNgjCD=QYOxw7xY9kPWCXAqUWpMnJg+Kr3Q@mail.gmail.com> <4367EABA-A450-4A7E-A25D-95F45B7A66CB@recoil.org>
Message-ID: <1BCF4DD2-39CA-4F47-9FFB-CB485B0CE1A4@cl.cam.ac.uk>

Stream of notes here:

- Compiles on the Mac, hurrah!  Compiling my little HTTP library against it, and I notice:

Async_core:
(** [write_when_ready writer ~f] waits until there is space available in the pipe, and
    then calls [f write], where [write] can be used by [f] to write a single value into
    the pipe at a time.  [with_write] guarantees that the pipe is open when it calls [f],
    and hence that the writes will succeed, unless [f] itself closes the pipe. *)

- Pipe.with_writer is now gone, but there is still a reference to it in the ocamldoc above in the renamed function.

- Similarly, Deferred.whenever is now gone, but there is a reference that should be renamed to Deferred.dont_wait_for:
  async_core/async_stream.mli:(** [iter t ~f] = [whenever (iter' t ~f:(fun a -> f a; Deferred.unit))] *)

- The new name Deferred.don't_wait_for seems really awkward with the apostrophe in it.  Why not just call it 'do_not_wait_for' or 'dont_wait_for' ?  Its quite rare to have function names with special characters, and the apostrophe is easy to mistake for a type variable when scanning through code.  It may be too much hassle to change it now though...

- The unconditional use of GADTs in async_extra answers my earlier question about ocaml-4 being a requirement. I'll add a constraint to the OPAM packages.

- I like the new TCP.Where_to_listen use of GADTs. It's a much more self-documenting interface than before!

Cohttp only requires a small diff to compile with the new version. I'll test it over the weekend as I write tutorial notes.

-anil



On 7 Sep 2012, at 17:43, Anil Madhavapeddy <anil at recoil.org> wrote:

> Trying it now. I've pushed updates to the avsm/opam-core-pre0 and am compiling them now.
> 
> Is there a hard requirement on ocaml-4.00.0 now? bin_prot's myocamlbuild:
> 
> + + /usr/bin/ocamlopt.opt -I /usr/lib/ocaml/ocamlbuild unix.cmxa /usr/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa myocamlbuild.ml /usr/lib/ocaml/ocamlbuild/ocamlbuild.cmx -o myocamlbuild
> + File "myocamlbuild.ml", line 506, characters 24-50:
> + Error: Unbound value Filename.get_temp_dir_name
> 
> ...which only appeared in ocaml-4.00.0, so 3.12.1 compilation fails (Debian/wheezy).
> 
> -anil
> 
> On 7 Sep 2012, at 17:13, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> 
>> Hi Anil,
>> 
>> I've just uploaded new packages to https://ocaml.janestreet.com/ocaml-core/108.07.00-pre1/. I've moved the async hack down into base/async/setup.ml, so it should work when building async individually.
>> 
>> Could you take a look and see if they work for you?
>> 
>> Thanks,
>> Yury
>> 
>> On Thu, Sep 6, 2012 at 7:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> Spot on... looks like OPAM might be leaking an environment variable that is pointing to the wrong DLL stubs directory after a compiler switch.  Should be easy to fix.
>> 
>> Sorry about that; I'll clean up the 25 different OCaml installations I have and do a more fresh build as soon as I get a chance!
>> 
>> -anil
>> 
>> 
>> On 6 Sep 2012, at 16:09, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>> 
>>> Ah, okay. Anil, it looks like there might be some mixup in your install. The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere in ocaml-3.12.
>>> Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS after all, which is why I didn't catch that unused value warning. I'll install and test with 4.00 on a Mac tomorrow.
>>> 
>>> On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>> Hi Markus,
>>> 
>>> A few of your sexplib changes didn't make it into this release, and I'll take a look at your patch queue to see what else we're missing. But I've been building and testing on Mac OS X. I'll see if I can recreate Anil's missing symbol problem (I haven't been testing with 3.12.1)
>>> 
>>> 
>>> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com> wrote:
>>> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
>>> The warnings are due to unused variables,
>>> 
>>> You might also want to apply my Bitbucket patch queue for ocaml-core.  The resulting tree should build fine on Mac OS X, fixes a couple of bugs, and adds some useful features.
>>> 
>>> Regards,
>>> Markus
>>> 
>>> 
>>> -- 
>>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>>> 
>>> 
>> 
>> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120907/753d1ecd/attachment-0001.html>

From avsm2 at cl.cam.ac.uk  Sat Sep  8 02:57:40 2012
From: avsm2 at cl.cam.ac.uk (Anil Madhavapeddy)
Date: Fri, 7 Sep 2012 18:57:40 -0700
Subject: type_conv/ocaml4 release
In-Reply-To: <4367EABA-A450-4A7E-A25D-95F45B7A66CB@recoil.org>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org> <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com> <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org> <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com> <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org> <CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com> <CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com> <CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com> <D4B1E5DF-2B3B-4A21-B574-BE9975118919@recoil.org> <CAEDxudx=hh98khJRNgjCD=QYOxw7xY9kPWCXAqUWpMnJg+Kr3Q@mail.gmail.com> <4367EABA-A450-4A7E-A25D-95F45B7A66CB@recoil.org>
Message-ID: <2E5B8BFF-346D-482F-ADCA-EFAC4C9AA667@cl.cam.ac.uk>

Stream of notes here:

- Compiles on the Mac, hurrah!  Compiling my little HTTP library against it, and I notice:

Async_core:
(** [write_when_ready writer ~f] waits until there is space available in the pipe, and
    then calls [f write], where [write] can be used by [f] to write a single value into
    the pipe at a time.  [with_write] guarantees that the pipe is open when it calls [f],
    and hence that the writes will succeed, unless [f] itself closes the pipe. *)

- Pipe.with_writer is now gone, but there is still a reference to it in the ocamldoc above in the renamed function.

- Similarly, Deferred.whenever is now gone, but there is a reference that should be renamed to Deferred.dont_wait_for:
  async_core/async_stream.mli:(** [iter t ~f] = [whenever (iter' t ~f:(fun a -> f a; Deferred.unit))] *)

- The new name Deferred.don't_wait_for seems really awkward with the apostrophe in it.  Why not just call it 'do_not_wait_for' or 'dont_wait_for' ?  Its quite rare to have function names with special characters, and the apostrophe is easy to mistake for a type variable when scanning through code.  It may be too much hassle to change it now though...

- The unconditional use of GADTs in async_extra answers my earlier question about ocaml-4 being a requirement. I'll add a constraint to the OPAM packages.

- I like the new TCP.Where_to_listen use of GADTs. It's a much more self-documenting interface than before!

Cohttp only requires a small diff to compile with the new version. I'll test it over the weekend as I write tutorial notes.

-anil



On 7 Sep 2012, at 17:43, Anil Madhavapeddy <anil at recoil.org> wrote:

> Trying it now. I've pushed updates to the avsm/opam-core-pre0 and am compiling them now.
> 
> Is there a hard requirement on ocaml-4.00.0 now? bin_prot's myocamlbuild:
> 
> + + /usr/bin/ocamlopt.opt -I /usr/lib/ocaml/ocamlbuild unix.cmxa /usr/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa myocamlbuild.ml /usr/lib/ocaml/ocamlbuild/ocamlbuild.cmx -o myocamlbuild
> + File "myocamlbuild.ml", line 506, characters 24-50:
> + Error: Unbound value Filename.get_temp_dir_name
> 
> ...which only appeared in ocaml-4.00.0, so 3.12.1 compilation fails (Debian/wheezy).
> 
> -anil
> 
> On 7 Sep 2012, at 17:13, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> 
>> Hi Anil,
>> 
>> I've just uploaded new packages to https://ocaml.janestreet.com/ocaml-core/108.07.00-pre1/. I've moved the async hack down into base/async/setup.ml, so it should work when building async individually.
>> 
>> Could you take a look and see if they work for you?
>> 
>> Thanks,
>> Yury
>> 
>> On Thu, Sep 6, 2012 at 7:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> Spot on... looks like OPAM might be leaking an environment variable that is pointing to the wrong DLL stubs directory after a compiler switch.  Should be easy to fix.
>> 
>> Sorry about that; I'll clean up the 25 different OCaml installations I have and do a more fresh build as soon as I get a chance!
>> 
>> -anil
>> 
>> 
>> On 6 Sep 2012, at 16:09, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>> 
>>> Ah, okay. Anil, it looks like there might be some mixup in your install. The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere in ocaml-3.12.
>>> Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS after all, which is why I didn't catch that unused value warning. I'll install and test with 4.00 on a Mac tomorrow.
>>> 
>>> On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>> Hi Markus,
>>> 
>>> A few of your sexplib changes didn't make it into this release, and I'll take a look at your patch queue to see what else we're missing. But I've been building and testing on Mac OS X. I'll see if I can recreate Anil's missing symbol problem (I haven't been testing with 3.12.1)
>>> 
>>> 
>>> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com> wrote:
>>> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
>>> The warnings are due to unused variables,
>>> 
>>> You might also want to apply my Bitbucket patch queue for ocaml-core.  The resulting tree should build fine on Mac OS X, fixes a couple of bugs, and adds some useful features.
>>> 
>>> Regards,
>>> Markus
>>> 
>>> 
>>> -- 
>>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>>> 
>>> 
>> 
>> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120907/e36da9e9/attachment-0001.html>

From yury.sulsky at gmail.com  Sat Sep  8 01:13:32 2012
From: yury.sulsky at gmail.com (Yury Sulsky)
Date: Fri, 7 Sep 2012 20:13:32 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <D4B1E5DF-2B3B-4A21-B574-BE9975118919@recoil.org>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
	<98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
	<CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com>
	<CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com>
	<CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com>
	<D4B1E5DF-2B3B-4A21-B574-BE9975118919@recoil.org>
Message-ID: <CAEDxudx=hh98khJRNgjCD=QYOxw7xY9kPWCXAqUWpMnJg+Kr3Q@mail.gmail.com>

Hi Anil,

I've just uploaded new packages to
https://ocaml.janestreet.com/ocaml-core/108.07.00-pre1/. I've moved the
async hack down into base/async/setup.ml, so it should work when building
async individually.

Could you take a look and see if they work for you?

Thanks,
Yury

On Thu, Sep 6, 2012 at 7:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:

> Spot on... looks like OPAM might be leaking an environment variable that
> is pointing to the wrong DLL stubs directory after a compiler switch.
>  Should be easy to fix.
>
> Sorry about that; I'll clean up the 25 different OCaml installations I
> have and do a more fresh build as soon as I get a chance!
>
> -anil
>
>
> On 6 Sep 2012, at 16:09, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>
> Ah, okay. Anil, it looks like there might be some mixup in your install.
> The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere in
> ocaml-3.12.
> Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS
> after all, which is why I didn't catch that unused value warning. I'll
> install and test with 4.00 on a Mac tomorrow.
>
> On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>
>> Hi Markus,
>>
>> A few of your sexplib changes didn't make it into this release, and I'll
>> take a look at your patch queue to see what else we're missing. But I've
>> been building and testing on Mac OS X. I'll see if I can recreate Anil's
>> missing symbol problem (I haven't been testing with 3.12.1)
>>
>>
>> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com>wrote:
>>
>>> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
>>>
>>>> The warnings are due to unused variables,
>>>>
>>>
>>> You might also want to apply my Bitbucket patch queue for ocaml-core.
>>>  The resulting tree should build fine on Mac OS X, fixes a couple of bugs,
>>> and adds some useful features.
>>>
>>> Regards,
>>> Markus
>>>
>>>>
>>>
>>> --
>>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>>>
>>
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120907/0ccd2af4/attachment-0001.html>

From yminsky at janestreet.com  Sat Sep  8 02:24:49 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Fri, 7 Sep 2012 21:24:49 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <4367EABA-A450-4A7E-A25D-95F45B7A66CB@recoil.org>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
	<98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
	<CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com>
	<CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com>
	<CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com>
	<D4B1E5DF-2B3B-4A21-B574-BE9975118919@recoil.org>
	<CAEDxudx=hh98khJRNgjCD=QYOxw7xY9kPWCXAqUWpMnJg+Kr3Q@mail.gmail.com>
	<4367EABA-A450-4A7E-A25D-95F45B7A66CB@recoil.org>
Message-ID: <CACLX4jSwBE=C+YpDgdZWQhVgTTF7877S9Vw2m5Uz9t7oR4R+3w@mail.gmail.com>


Doesn't seem like there should be.  We're only using 4.0
experimentally internally, so we definitely support 3.12.1 in our
internal tree.  Yury made some small modifications for the external
tarball, so maybe there's an issue there.

y

On Fri, Sep 7, 2012 at 8:43 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> Trying it now. I've pushed updates to the avsm/opam-core-pre0 and am
> compiling them now.
>
> Is there a hard requirement on ocaml-4.00.0 now? bin_prot's myocamlbuild:
>
> + + /usr/bin/ocamlopt.opt -I /usr/lib/ocaml/ocamlbuild unix.cmxa
> /usr/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa myocamlbuild.ml
> /usr/lib/ocaml/ocamlbuild/ocamlbuild.cmx -o myocamlbuild
> + File "myocamlbuild.ml", line 506, characters 24-50:
> + Error: Unbound value Filename.get_temp_dir_name
>
> ...which only appeared in ocaml-4.00.0, so 3.12.1 compilation fails
> (Debian/wheezy).
>
> -anil
>
> On 7 Sep 2012, at 17:13, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>
> Hi Anil,
>
> I've just uploaded new packages to
> https://ocaml.janestreet.com/ocaml-core/108.07.00-pre1/. I've moved the
> async hack down into base/async/setup.ml, so it should work when building
> async individually.
>
> Could you take a look and see if they work for you?
>
> Thanks,
> Yury
>
> On Thu, Sep 6, 2012 at 7:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>
>> Spot on... looks like OPAM might be leaking an environment variable that
>> is pointing to the wrong DLL stubs directory after a compiler switch.
>> Should be easy to fix.
>>
>> Sorry about that; I'll clean up the 25 different OCaml installations I
>> have and do a more fresh build as soon as I get a chance!
>>
>> -anil
>>
>>
>> On 6 Sep 2012, at 16:09, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>
>> Ah, okay. Anil, it looks like there might be some mixup in your install.
>> The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere in
>> ocaml-3.12.
>> Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS
>> after all, which is why I didn't catch that unused value warning. I'll
>> install and test with 4.00 on a Mac tomorrow.
>>
>> On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>>
>>> Hi Markus,
>>>
>>> A few of your sexplib changes didn't make it into this release, and I'll
>>> take a look at your patch queue to see what else we're missing. But I've
>>> been building and testing on Mac OS X. I'll see if I can recreate Anil's
>>> missing symbol problem (I haven't been testing with 3.12.1)
>>>
>>>
>>> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com>
>>> wrote:
>>>>
>>>> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
>>>>>
>>>>> The warnings are due to unused variables,
>>>>
>>>>
>>>> You might also want to apply my Bitbucket patch queue for ocaml-core.
>>>> The resulting tree should build fine on Mac OS X, fixes a couple of bugs,
>>>> and adds some useful features.
>>>>
>>>> Regards,
>>>> Markus
>>>>
>>>>
>>>>
>>>> --
>>>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>>>
>>>
>>
>>
>
>


From yury.sulsky at gmail.com  Sat Sep  8 04:48:26 2012
From: yury.sulsky at gmail.com (Yury Sulsky)
Date: Fri, 7 Sep 2012 23:48:26 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <CACLX4jSwBE=C+YpDgdZWQhVgTTF7877S9Vw2m5Uz9t7oR4R+3w@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
 <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
 <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org> <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
 <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org> <CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com>
 <CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com>
 <CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com>
 <D4B1E5DF-2B3B-4A21-B574-BE9975118919@recoil.org> <CAEDxudx=hh98khJRNgjCD=QYOxw7xY9kPWCXAqUWpMnJg+Kr3Q@mail.gmail.com>
 <4367EABA-A450-4A7E-A25D-95F45B7A66CB@recoil.org> <CACLX4jSwBE=C+YpDgdZWQhVgTTF7877S9Vw2m5Uz9t7oR4R+3w@mail.gmail.com>
Message-ID: <-1174972042362450028@unknownmsgid>


Yes, sorry that's my fault. Ill fix the packages tomorrow, but in the
meantime I think you can just globally replace
[Filename.get_temp_dir_name ()] with [Filename.temp_dir_name] in
*/{myocamlbuild,setup}.ml

Yury

On Sep 7, 2012, at 9:24 PM, Yaron Minsky <yminsky at janestreet.com> wrote:

> Doesn't seem like there should be.  We're only using 4.0
> experimentally internally, so we definitely support 3.12.1 in our
> internal tree.  Yury made some small modifications for the external
> tarball, so maybe there's an issue there.
>
> y
>
> On Fri, Sep 7, 2012 at 8:43 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> Trying it now. I've pushed updates to the avsm/opam-core-pre0 and am
>> compiling them now.
>>
>> Is there a hard requirement on ocaml-4.00.0 now? bin_prot's myocamlbuild:
>>
>> + + /usr/bin/ocamlopt.opt -I /usr/lib/ocaml/ocamlbuild unix.cmxa
>> /usr/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa myocamlbuild.ml
>> /usr/lib/ocaml/ocamlbuild/ocamlbuild.cmx -o myocamlbuild
>> + File "myocamlbuild.ml", line 506, characters 24-50:
>> + Error: Unbound value Filename.get_temp_dir_name
>>
>> ...which only appeared in ocaml-4.00.0, so 3.12.1 compilation fails
>> (Debian/wheezy).
>>
>> -anil
>>
>> On 7 Sep 2012, at 17:13, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>
>> Hi Anil,
>>
>> I've just uploaded new packages to
>> https://ocaml.janestreet.com/ocaml-core/108.07.00-pre1/. I've moved the
>> async hack down into base/async/setup.ml, so it should work when building
>> async individually.
>>
>> Could you take a look and see if they work for you?
>>
>> Thanks,
>> Yury
>>
>> On Thu, Sep 6, 2012 at 7:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>>
>>> Spot on... looks like OPAM might be leaking an environment variable that
>>> is pointing to the wrong DLL stubs directory after a compiler switch.
>>> Should be easy to fix.
>>>
>>> Sorry about that; I'll clean up the 25 different OCaml installations I
>>> have and do a more fresh build as soon as I get a chance!
>>>
>>> -anil
>>>
>>>
>>> On 6 Sep 2012, at 16:09, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>>
>>> Ah, okay. Anil, it looks like there might be some mixup in your install.
>>> The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere in
>>> ocaml-3.12.
>>> Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS
>>> after all, which is why I didn't catch that unused value warning. I'll
>>> install and test with 4.00 on a Mac tomorrow.
>>>
>>> On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>>>
>>>> Hi Markus,
>>>>
>>>> A few of your sexplib changes didn't make it into this release, and I'll
>>>> take a look at your patch queue to see what else we're missing. But I've
>>>> been building and testing on Mac OS X. I'll see if I can recreate Anil's
>>>> missing symbol problem (I haven't been testing with 3.12.1)
>>>>
>>>>
>>>> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com>
>>>> wrote:
>>>>>
>>>>> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
>>>>>>
>>>>>> The warnings are due to unused variables,
>>>>>
>>>>>
>>>>> You might also want to apply my Bitbucket patch queue for ocaml-core.
>>>>> The resulting tree should build fine on Mac OS X, fixes a couple of bugs,
>>>>> and adds some useful features.
>>>>>
>>>>> Regards,
>>>>> Markus
>>>>>
>>>>>
>>>>>
>>>>> --
>>>>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>>>>
>>>>
>>>
>>>
>>
>>


From avsm2 at cl.cam.ac.uk  Sat Sep  8 19:41:31 2012
From: avsm2 at cl.cam.ac.uk (Anil Madhavapeddy)
Date: Sat, 8 Sep 2012 11:41:31 -0700
Subject: Fwd: type_conv/ocaml4 release
References: <2E5B8BFF-346D-482F-ADCA-EFAC4C9AA667@cl.cam.ac.uk>
Message-ID: <33FEC878-4E05-4F25-BA1A-DB02D76A83E2@cl.cam.ac.uk>

Did this email make it through to the list? I never received it back, but other replies have come through.
-anil

Begin forwarded message:

> From: Anil Madhavapeddy <avsm2 at cl.cam.ac.uk>
> Subject: Re: type_conv/ocaml4 release
> Date: 7 September 2012 18:57:40 PDT
> To: ocaml-core at googlegroups.com
> 
> Stream of notes here:
> 
> - Compiles on the Mac, hurrah!  Compiling my little HTTP library against it, and I notice:
> 
> Async_core:
> (** [write_when_ready writer ~f] waits until there is space available in the pipe, and
>     then calls [f write], where [write] can be used by [f] to write a single value into
>     the pipe at a time.  [with_write] guarantees that the pipe is open when it calls [f],
>     and hence that the writes will succeed, unless [f] itself closes the pipe. *)
> 
> - Pipe.with_writer is now gone, but there is still a reference to it in the ocamldoc above in the renamed function.
> 
> - Similarly, Deferred.whenever is now gone, but there is a reference that should be renamed to Deferred.dont_wait_for:
>   async_core/async_stream.mli:(** [iter t ~f] = [whenever (iter' t ~f:(fun a -> f a; Deferred.unit))] *)
> 
> - The new name Deferred.don't_wait_for seems really awkward with the apostrophe in it.  Why not just call it 'do_not_wait_for' or 'dont_wait_for' ?  Its quite rare to have function names with special characters, and the apostrophe is easy to mistake for a type variable when scanning through code.  It may be too much hassle to change it now though...
> 
> - The unconditional use of GADTs in async_extra answers my earlier question about ocaml-4 being a requirement. I'll add a constraint to the OPAM packages.
> 
> - I like the new TCP.Where_to_listen use of GADTs. It's a much more self-documenting interface than before!
> 
> Cohttp only requires a small diff to compile with the new version. I'll test it over the weekend as I write tutorial notes.
> 
> -anil
> 
> 
> 
> On 7 Sep 2012, at 17:43, Anil Madhavapeddy <anil at recoil.org> wrote:
> 
>> Trying it now. I've pushed updates to the avsm/opam-core-pre0 and am compiling them now.
>> 
>> Is there a hard requirement on ocaml-4.00.0 now? bin_prot's myocamlbuild:
>> 
>> + + /usr/bin/ocamlopt.opt -I /usr/lib/ocaml/ocamlbuild unix.cmxa /usr/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa myocamlbuild.ml /usr/lib/ocaml/ocamlbuild/ocamlbuild.cmx -o myocamlbuild
>> + File "myocamlbuild.ml", line 506, characters 24-50:
>> + Error: Unbound value Filename.get_temp_dir_name
>> 
>> ...which only appeared in ocaml-4.00.0, so 3.12.1 compilation fails (Debian/wheezy).
>> 
>> -anil
>> 
>> On 7 Sep 2012, at 17:13, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>> 
>>> Hi Anil,
>>> 
>>> I've just uploaded new packages to https://ocaml.janestreet.com/ocaml-core/108.07.00-pre1/. I've moved the async hack down into base/async/setup.ml, so it should work when building async individually.
>>> 
>>> Could you take a look and see if they work for you?
>>> 
>>> Thanks,
>>> Yury
>>> 
>>> On Thu, Sep 6, 2012 at 7:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>> Spot on... looks like OPAM might be leaking an environment variable that is pointing to the wrong DLL stubs directory after a compiler switch.  Should be easy to fix.
>>> 
>>> Sorry about that; I'll clean up the 25 different OCaml installations I have and do a more fresh build as soon as I get a chance!
>>> 
>>> -anil
>>> 
>>> 
>>> On 6 Sep 2012, at 16:09, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>> 
>>>> Ah, okay. Anil, it looks like there might be some mixup in your install. The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere in ocaml-3.12.
>>>> Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS after all, which is why I didn't catch that unused value warning. I'll install and test with 4.00 on a Mac tomorrow.
>>>> 
>>>> On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>>> Hi Markus,
>>>> 
>>>> A few of your sexplib changes didn't make it into this release, and I'll take a look at your patch queue to see what else we're missing. But I've been building and testing on Mac OS X. I'll see if I can recreate Anil's missing symbol problem (I haven't been testing with 3.12.1)
>>>> 
>>>> 
>>>> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com> wrote:
>>>> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
>>>> The warnings are due to unused variables,
>>>> 
>>>> You might also want to apply my Bitbucket patch queue for ocaml-core.  The resulting tree should build fine on Mac OS X, fixes a couple of bugs, and adds some useful features.
>>>> 
>>>> Regards,
>>>> Markus
>>>> 
>>>> 
>>>> -- 
>>>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>>>> 
>>>> 
>>> 
>>> 
>> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120908/c1742125/attachment-0001.html>

From anil at recoil.org  Sat Sep  8 20:04:16 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Sat, 8 Sep 2012 12:04:16 -0700
Subject: type_conv/ocaml4 release
In-Reply-To: <CADKNfh++8af17hCoZyUbwVKazVOD+aSxETTRFrWnOmF=xYc=ng@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org> <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com> <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org> <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com> <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org> <CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com> <CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com> <CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com> <D4B1E5DF-2B3B-4A21-B574-BE9975118919@recoil.org> <CAEDxudx=hh98khJRNgjCD=QYOxw7xY9kPWCXAqUWpMnJg+Kr3Q@mail.gmail.com> <4367EABA-A450-4A7E-A25D-95F45B7A66CB@recoil.org> <1BCF4DD2-39CA-4F47-9FFB-CB485B0CE1A4@cl.cam.ac.uk> <CADKNfh++8af17hCoZyUbwVKazVOD+aSxETTRFrWnOmF=xYc=ng@mail.gmail.com>
Message-ID: <D3746CDE-0086-45C3-8798-715DDA56B787@recoil.org>


On 8 Sep 2012, at 11:55, Yaron Minsky <yminsky at gmail.com> wrote:

>> 
>> - The unconditional use of GADTs in async_extra answers my earlier
>>  question about ocaml-4 being a requirement. I'll add a constraint
>>  to the OPAM packages.
> 
> Where specifically?  As I said, our internal tree doesn't use GADTs,
> since everything must compile against 3.12.1 to get through our
> compile daemon.
> 
>> - I like the new TCP.Where_to_listen use of GADTs. It's a much more
>>  self-documenting interface than before!
> 
> The version I'm looking at doesn't require GADTs, so again, I'm
> confused.

Sorry, ignore this chunk. My brain read the constraint clause as a
new GADT use, whereas it's been in OCaml for ages.  Coding on Caltrain...

-anil


From yminsky at gmail.com  Sat Sep  8 19:45:52 2012
From: yminsky at gmail.com (Yaron Minsky)
Date: Sat, 8 Sep 2012 14:45:52 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <33FEC878-4E05-4F25-BA1A-DB02D76A83E2@cl.cam.ac.uk>
References: <2E5B8BFF-346D-482F-ADCA-EFAC4C9AA667@cl.cam.ac.uk>
	<33FEC878-4E05-4F25-BA1A-DB02D76A83E2@cl.cam.ac.uk>
Message-ID: <CADKNfhLoS7dLkLbUznLd4m1rXdYLuGARKFXYopfdtmwQqQEB+A@mail.gmail.com>


It got blocked, and I missed the notification.  Fixed!

On Sat, Sep 8, 2012 at 2:41 PM, Anil Madhavapeddy <avsm2 at cl.cam.ac.uk> wrote:
> Did this email make it through to the list? I never received it back, but
> other replies have come through.
> -anil
>
> Begin forwarded message:
>
> From: Anil Madhavapeddy <avsm2 at cl.cam.ac.uk>
> Subject: Re: type_conv/ocaml4 release
> Date: 7 September 2012 18:57:40 PDT
> To: ocaml-core at googlegroups.com
>
> Stream of notes here:
>
> - Compiles on the Mac, hurrah!  Compiling my little HTTP library against it,
> and I notice:
>
> Async_core:
> (** [write_when_ready writer ~f] waits until there is space available in the
> pipe, and
>     then calls [f write], where [write] can be used by [f] to write a single
> value into
>     the pipe at a time.  [with_write] guarantees that the pipe is open when
> it calls [f],
>     and hence that the writes will succeed, unless [f] itself closes the
> pipe. *)
>
> - Pipe.with_writer is now gone, but there is still a reference to it in the
> ocamldoc above in the renamed function.
>
> - Similarly, Deferred.whenever is now gone, but there is a reference that
> should be renamed to Deferred.dont_wait_for:
>   async_core/async_stream.mli:(** [iter t ~f] = [whenever (iter' t ~f:(fun a
> -> f a; Deferred.unit))] *)
>
> - The new name Deferred.don't_wait_for seems really awkward with the
> apostrophe in it.  Why not just call it 'do_not_wait_for' or 'dont_wait_for'
> ?  Its quite rare to have function names with special characters, and the
> apostrophe is easy to mistake for a type variable when scanning through
> code.  It may be too much hassle to change it now though...
>
> - The unconditional use of GADTs in async_extra answers my earlier question
> about ocaml-4 being a requirement. I'll add a constraint to the OPAM
> packages.
>
> - I like the new TCP.Where_to_listen use of GADTs. It's a much more
> self-documenting interface than before!
>
> Cohttp only requires a small diff to compile with the new version. I'll test
> it over the weekend as I write tutorial notes.
>
> -anil
>
>
>
> On 7 Sep 2012, at 17:43, Anil Madhavapeddy <anil at recoil.org> wrote:
>
> Trying it now. I've pushed updates to the avsm/opam-core-pre0 and am
> compiling them now.
>
> Is there a hard requirement on ocaml-4.00.0 now? bin_prot's myocamlbuild:
>
> + + /usr/bin/ocamlopt.opt -I /usr/lib/ocaml/ocamlbuild unix.cmxa
> /usr/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa myocamlbuild.ml
> /usr/lib/ocaml/ocamlbuild/ocamlbuild.cmx -o myocamlbuild
> + File "myocamlbuild.ml", line 506, characters 24-50:
> + Error: Unbound value Filename.get_temp_dir_name
>
> ...which only appeared in ocaml-4.00.0, so 3.12.1 compilation fails
> (Debian/wheezy).
>
> -anil
>
> On 7 Sep 2012, at 17:13, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>
> Hi Anil,
>
> I've just uploaded new packages to
> https://ocaml.janestreet.com/ocaml-core/108.07.00-pre1/. I've moved the
> async hack down into base/async/setup.ml, so it should work when building
> async individually.
>
> Could you take a look and see if they work for you?
>
> Thanks,
> Yury
>
> On Thu, Sep 6, 2012 at 7:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>
>> Spot on... looks like OPAM might be leaking an environment variable that
>> is pointing to the wrong DLL stubs directory after a compiler switch.
>> Should be easy to fix.
>>
>> Sorry about that; I'll clean up the 25 different OCaml installations I
>> have and do a more fresh build as soon as I get a chance!
>>
>> -anil
>>
>>
>> On 6 Sep 2012, at 16:09, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>
>> Ah, okay. Anil, it looks like there might be some mixup in your install.
>> The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere in
>> ocaml-3.12.
>> Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS
>> after all, which is why I didn't catch that unused value warning. I'll
>> install and test with 4.00 on a Mac tomorrow.
>>
>> On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>>
>>> Hi Markus,
>>>
>>> A few of your sexplib changes didn't make it into this release, and I'll
>>> take a look at your patch queue to see what else we're missing. But I've
>>> been building and testing on Mac OS X. I'll see if I can recreate Anil's
>>> missing symbol problem (I haven't been testing with 3.12.1)
>>>
>>>
>>> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com>
>>> wrote:
>>>>
>>>> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
>>>>>
>>>>> The warnings are due to unused variables,
>>>>
>>>>
>>>> You might also want to apply my Bitbucket patch queue for ocaml-core.
>>>> The resulting tree should build fine on Mac OS X, fixes a couple of bugs,
>>>> and adds some useful features.
>>>>
>>>> Regards,
>>>> Markus
>>>>
>>>>
>>>>
>>>> --
>>>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>>>
>>>
>>
>>
>
>
>
>


From yminsky at gmail.com  Sat Sep  8 19:55:42 2012
From: yminsky at gmail.com (Yaron Minsky)
Date: Sat, 8 Sep 2012 14:55:42 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <1BCF4DD2-39CA-4F47-9FFB-CB485B0CE1A4@cl.cam.ac.uk>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
	<98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
	<CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com>
	<CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com>
	<CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com>
	<D4B1E5DF-2B3B-4A21-B574-BE9975118919@recoil.org>
	<CAEDxudx=hh98khJRNgjCD=QYOxw7xY9kPWCXAqUWpMnJg+Kr3Q@mail.gmail.com>
	<4367EABA-A450-4A7E-A25D-95F45B7A66CB@recoil.org>
	<1BCF4DD2-39CA-4F47-9FFB-CB485B0CE1A4@cl.cam.ac.uk>
Message-ID: <CADKNfh++8af17hCoZyUbwVKazVOD+aSxETTRFrWnOmF=xYc=ng@mail.gmail.com>


On Fri, Sep 7, 2012 at 9:19 PM, Anil Madhavapeddy <avsm2 at cl.cam.ac.uk> wrote:
> Stream of notes here:
>
> - Compiles on the Mac, hurrah!  Compiling my little HTTP library against it,
>   and I notice:

Great.

> Async_core:
> (** [write_when_ready writer ~f] waits until there is space available in the
>     pipe, and then calls [f write], where [write] can be used by [f]
>     to write a single value into the pipe at a time.  [with_write]
>     guarantees that the pipe is open when it calls [f], and hence
>     that the writes will succeed, unless [f] itself closes the
>     pipe. *)
>
> - Pipe.with_writer is now gone, but there is still a reference to it
>   in the ocamldoc above in the renamed function.

Thanks.  Will fix!

> - Similarly, Deferred.whenever is now gone, but there is a reference that
>   should be renamed to Deferred.dont_wait_for:
>   async_core/async_stream.mli:(** [iter t ~f] = [whenever (iter' t ~f:(fun a
>                                    -> f a; Deferred.unit))] *)

Will fix!

> - The new name Deferred.don't_wait_for seems really awkward with the
>   apostrophe in it.  Why not just call it 'do_not_wait_for' or
>   'dont_wait_for' ?  Its quite rare to have function names with
>   special characters, and the apostrophe is easy to mistake for a
>   type variable when scanning through code.  It may be too much
>   hassle to change it now though...

Yeah, we had a bunch of unsatisfactory names to choose between, and
I'm somewhat regret changing it, but it's far too much pain to change
it again now.  I agree the apostrophe is not ideal, but I was for it
before I was against it...

> - The unconditional use of GADTs in async_extra answers my earlier
>   question about ocaml-4 being a requirement. I'll add a constraint
>   to the OPAM packages.

Where specifically?  As I said, our internal tree doesn't use GADTs,
since everything must compile against 3.12.1 to get through our
compile daemon.

> - I like the new TCP.Where_to_listen use of GADTs. It's a much more
>   self-documenting interface than before!

The version I'm looking at doesn't require GADTs, so again, I'm
confused.

> Cohttp only requires a small diff to compile with the new
> version. I'll test it over the weekend as I write tutorial notes.
>
> -anil
>
>
>
> On 7 Sep 2012, at 17:43, Anil Madhavapeddy <anil at recoil.org> wrote:
>
> Trying it now. I've pushed updates to the avsm/opam-core-pre0 and am
> compiling them now.
>
> Is there a hard requirement on ocaml-4.00.0 now? bin_prot's myocamlbuild:
>
> + + /usr/bin/ocamlopt.opt -I /usr/lib/ocaml/ocamlbuild unix.cmxa
> /usr/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa myocamlbuild.ml
> /usr/lib/ocaml/ocamlbuild/ocamlbuild.cmx -o myocamlbuild
> + File "myocamlbuild.ml", line 506, characters 24-50:
> + Error: Unbound value Filename.get_temp_dir_name
>
> ...which only appeared in ocaml-4.00.0, so 3.12.1 compilation fails
> (Debian/wheezy).
>
> -anil
>
> On 7 Sep 2012, at 17:13, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>
> Hi Anil,
>
> I've just uploaded new packages to
> https://ocaml.janestreet.com/ocaml-core/108.07.00-pre1/. I've moved the
> async hack down into base/async/setup.ml, so it should work when building
> async individually.
>
> Could you take a look and see if they work for you?
>
> Thanks,
> Yury
>
> On Thu, Sep 6, 2012 at 7:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>
>> Spot on... looks like OPAM might be leaking an environment variable that
>> is pointing to the wrong DLL stubs directory after a compiler switch.
>> Should be easy to fix.
>>
>> Sorry about that; I'll clean up the 25 different OCaml installations I
>> have and do a more fresh build as soon as I get a chance!
>>
>> -anil
>>
>>
>> On 6 Sep 2012, at 16:09, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>
>> Ah, okay. Anil, it looks like there might be some mixup in your install.
>> The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere in
>> ocaml-3.12.
>> Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS
>> after all, which is why I didn't catch that unused value warning. I'll
>> install and test with 4.00 on a Mac tomorrow.
>>
>> On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
>>>
>>> Hi Markus,
>>>
>>> A few of your sexplib changes didn't make it into this release, and I'll
>>> take a look at your patch queue to see what else we're missing. But I've
>>> been building and testing on Mac OS X. I'll see if I can recreate Anil's
>>> missing symbol problem (I haven't been testing with 3.12.1)
>>>
>>>
>>> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com>
>>> wrote:
>>>>
>>>> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
>>>>>
>>>>> The warnings are due to unused variables,
>>>>
>>>>
>>>> You might also want to apply my Bitbucket patch queue for ocaml-core.
>>>> The resulting tree should build fine on Mac OS X, fixes a couple of bugs,
>>>> and adds some useful features.
>>>>
>>>> Regards,
>>>> Markus
>>>>
>>>>
>>>>
>>>> --
>>>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>>>
>>>
>>
>>
>
>
>


From yury.sulsky at gmail.com  Sun Sep  9 17:00:11 2012
From: yury.sulsky at gmail.com (Yury Sulsky)
Date: Sun, 9 Sep 2012 12:00:11 -0400
Subject: type_conv/ocaml4 release
In-Reply-To: <-1174972042362450028@unknownmsgid>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org>
	<CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com>
	<8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org>
	<CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com>
	<98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org>
	<CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com>
	<CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com>
	<CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com>
	<D4B1E5DF-2B3B-4A21-B574-BE9975118919@recoil.org>
	<CAEDxudx=hh98khJRNgjCD=QYOxw7xY9kPWCXAqUWpMnJg+Kr3Q@mail.gmail.com>
	<4367EABA-A450-4A7E-A25D-95F45B7A66CB@recoil.org>
	<CACLX4jSwBE=C+YpDgdZWQhVgTTF7877S9Vw2m5Uz9t7oR4R+3w@mail.gmail.com>
	<-1174972042362450028@unknownmsgid>
Message-ID: <CAEDxudwny91WbBd4rkxWe1VcwfB8VUzc4NMb-TZRLxtkKdkCoQ@mail.gmail.com>

Hi Anil, I just wanted to let you know that the updated packages are up
now. Since the only change is that they compile with 3.12 now, I just
replaced the existing 108.07.00-pre1 tarballs.

Yury

On Fri, Sep 7, 2012 at 11:48 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:

> Yes, sorry that's my fault. Ill fix the packages tomorrow, but in the
> meantime I think you can just globally replace
> [Filename.get_temp_dir_name ()] with [Filename.temp_dir_name] in
> */{myocamlbuild,setup}.ml
>
> Yury
>
> On Sep 7, 2012, at 9:24 PM, Yaron Minsky <yminsky at janestreet.com> wrote:
>
> > Doesn't seem like there should be.  We're only using 4.0
> > experimentally internally, so we definitely support 3.12.1 in our
> > internal tree.  Yury made some small modifications for the external
> > tarball, so maybe there's an issue there.
> >
> > y
> >
> > On Fri, Sep 7, 2012 at 8:43 PM, Anil Madhavapeddy <anil at recoil.org>
> wrote:
> >> Trying it now. I've pushed updates to the avsm/opam-core-pre0 and am
> >> compiling them now.
> >>
> >> Is there a hard requirement on ocaml-4.00.0 now? bin_prot's
> myocamlbuild:
> >>
> >> + + /usr/bin/ocamlopt.opt -I /usr/lib/ocaml/ocamlbuild unix.cmxa
> >> /usr/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa myocamlbuild.ml
> >> /usr/lib/ocaml/ocamlbuild/ocamlbuild.cmx -o myocamlbuild
> >> + File "myocamlbuild.ml", line 506, characters 24-50:
> >> + Error: Unbound value Filename.get_temp_dir_name
> >>
> >> ...which only appeared in ocaml-4.00.0, so 3.12.1 compilation fails
> >> (Debian/wheezy).
> >>
> >> -anil
> >>
> >> On 7 Sep 2012, at 17:13, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> >>
> >> Hi Anil,
> >>
> >> I've just uploaded new packages to
> >> https://ocaml.janestreet.com/ocaml-core/108.07.00-pre1/. I've moved the
> >> async hack down into base/async/setup.ml, so it should work when
> building
> >> async individually.
> >>
> >> Could you take a look and see if they work for you?
> >>
> >> Thanks,
> >> Yury
> >>
> >> On Thu, Sep 6, 2012 at 7:12 PM, Anil Madhavapeddy <anil at recoil.org>
> wrote:
> >>>
> >>> Spot on... looks like OPAM might be leaking an environment variable
> that
> >>> is pointing to the wrong DLL stubs directory after a compiler switch.
> >>> Should be easy to fix.
> >>>
> >>> Sorry about that; I'll clean up the 25 different OCaml installations I
> >>> have and do a more fresh build as soon as I get a chance!
> >>>
> >>> -anil
> >>>
> >>>
> >>> On 6 Sep 2012, at 16:09, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> >>>
> >>> Ah, okay. Anil, it looks like there might be some mixup in your
> install.
> >>> The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere
> in
> >>> ocaml-3.12.
> >>> Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS
> >>> after all, which is why I didn't catch that unused value warning. I'll
> >>> install and test with 4.00 on a Mac tomorrow.
> >>>
> >>> On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com>
> wrote:
> >>>>
> >>>> Hi Markus,
> >>>>
> >>>> A few of your sexplib changes didn't make it into this release, and
> I'll
> >>>> take a look at your patch queue to see what else we're missing. But
> I've
> >>>> been building and testing on Mac OS X. I'll see if I can recreate
> Anil's
> >>>> missing symbol problem (I haven't been testing with 3.12.1)
> >>>>
> >>>>
> >>>> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com>
> >>>> wrote:
> >>>>>
> >>>>> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
> >>>>>>
> >>>>>> The warnings are due to unused variables,
> >>>>>
> >>>>>
> >>>>> You might also want to apply my Bitbucket patch queue for ocaml-core.
> >>>>> The resulting tree should build fine on Mac OS X, fixes a couple of
> bugs,
> >>>>> and adds some useful features.
> >>>>>
> >>>>> Regards,
> >>>>> Markus
> >>>>>
> >>>>>
> >>>>>
> >>>>> --
> >>>>> Markus Mottl        http://www.ocaml.info
> markus.mottl at gmail.com
> >>>>
> >>>>
> >>>
> >>>
> >>
> >>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120909/568901ea/attachment-0001.html>

From anil at recoil.org  Sun Sep  9 23:59:55 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Sun, 9 Sep 2012 15:59:55 -0700
Subject: type_conv/ocaml4 release
In-Reply-To: <CAEDxudwny91WbBd4rkxWe1VcwfB8VUzc4NMb-TZRLxtkKdkCoQ@mail.gmail.com>
References: <1EF0B8CE-34C2-43BC-A88D-4119833BC828@recoil.org> <CAP_800qE1n138t0OKWE9EJmqWJfEUWV4P1Ad21Fn1G_MkXeTag@mail.gmail.com> <8DCC8976-D2D0-46EF-B33D-20666AE6F66B@recoil.org> <CAEDxudxHJPtYmGhh=Ddo8N9OX9KApTj_xwGYSdBOLcTuJBGZHg@mail.gmail.com> <98525A71-18C5-4676-8F8C-8770CFC8DBB9@recoil.org> <CAP_800q2U0cJYjt1WLzNoMn50M_fV9Xdh7bG00hGiTxogVrqAw@mail.gmail.com> <CAEDxudySMvq-xaXWBEXDgVfgJKpOkgZup_RLisLPk-SH43wJpg@mail.gmail.com> <CAEDxudzP074N3MVYcSjpYV3rftSrJv3bJ4teNQNB0F47XS4DhQ@mail.gmail.com> <D4B1E5DF-2B3B-4A21-B574-BE9975118919@recoil.org> <CAEDxudx=hh98khJRNgjCD=QYOxw7xY9kPWCXAqUWpMnJg+Kr3Q@mail.gmail.com> <4367EABA-A450-4A7E-A25D-95F45B7A66CB@recoil.org> <CACLX4jSwBE=C+YpDgdZWQhVgTTF7877S9Vw2m5Uz9t7oR4R+3w@mail.gmail.com> <-1174972042362450028@unknownmsgid> <CAEDxudwny91WbBd4rkxWe1VcwfB8VUzc4NMb-TZRLxtkKdkCoQ@mail.gmail.com>
Message-ID: <09320B80-BE21-4855-8602-11FEF24CE45F@recoil.org>

Thanks Yury; I've pushed an update to my avsm/opam-core-pre0 repo and am testing now.

For future releases, it would be useful not to ever modify distribution tarballs once released, as the file checksums are recorded separately in the various upstream packaging systems.

-anil

On 9 Sep 2012, at 09:00, Yury Sulsky <yury.sulsky at gmail.com> wrote:

> Hi Anil, I just wanted to let you know that the updated packages are up now. Since the only change is that they compile with 3.12 now, I just replaced the existing 108.07.00-pre1 tarballs.
> 
> Yury
> 
> On Fri, Sep 7, 2012 at 11:48 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> Yes, sorry that's my fault. Ill fix the packages tomorrow, but in the
> meantime I think you can just globally replace
> [Filename.get_temp_dir_name ()] with [Filename.temp_dir_name] in
> */{myocamlbuild,setup}.ml
> 
> Yury
> 
> On Sep 7, 2012, at 9:24 PM, Yaron Minsky <yminsky at janestreet.com> wrote:
> 
> > Doesn't seem like there should be.  We're only using 4.0
> > experimentally internally, so we definitely support 3.12.1 in our
> > internal tree.  Yury made some small modifications for the external
> > tarball, so maybe there's an issue there.
> >
> > y
> >
> > On Fri, Sep 7, 2012 at 8:43 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> >> Trying it now. I've pushed updates to the avsm/opam-core-pre0 and am
> >> compiling them now.
> >>
> >> Is there a hard requirement on ocaml-4.00.0 now? bin_prot's myocamlbuild:
> >>
> >> + + /usr/bin/ocamlopt.opt -I /usr/lib/ocaml/ocamlbuild unix.cmxa
> >> /usr/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa myocamlbuild.ml
> >> /usr/lib/ocaml/ocamlbuild/ocamlbuild.cmx -o myocamlbuild
> >> + File "myocamlbuild.ml", line 506, characters 24-50:
> >> + Error: Unbound value Filename.get_temp_dir_name
> >>
> >> ...which only appeared in ocaml-4.00.0, so 3.12.1 compilation fails
> >> (Debian/wheezy).
> >>
> >> -anil
> >>
> >> On 7 Sep 2012, at 17:13, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> >>
> >> Hi Anil,
> >>
> >> I've just uploaded new packages to
> >> https://ocaml.janestreet.com/ocaml-core/108.07.00-pre1/. I've moved the
> >> async hack down into base/async/setup.ml, so it should work when building
> >> async individually.
> >>
> >> Could you take a look and see if they work for you?
> >>
> >> Thanks,
> >> Yury
> >>
> >> On Thu, Sep 6, 2012 at 7:12 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> >>>
> >>> Spot on... looks like OPAM might be leaking an environment variable that
> >>> is pointing to the wrong DLL stubs directory after a compiler switch.
> >>> Should be easy to fix.
> >>>
> >>> Sorry about that; I'll clean up the 25 different OCaml installations I
> >>> have and do a more fresh build as soon as I get a chance!
> >>>
> >>> -anil
> >>>
> >>>
> >>> On 6 Sep 2012, at 16:09, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> >>>
> >>> Ah, okay. Anil, it looks like there might be some mixup in your install.
> >>> The string "caml_hash_mix_double" only appears ocaml-4.00, but nowhere in
> >>> ocaml-3.12.
> >>> Also, I was confused. It turned out I was testing with 3.12.1 on Mac OS
> >>> after all, which is why I didn't catch that unused value warning. I'll
> >>> install and test with 4.00 on a Mac tomorrow.
> >>>
> >>> On Thu, Sep 6, 2012 at 6:55 PM, Yury Sulsky <yury.sulsky at gmail.com> wrote:
> >>>>
> >>>> Hi Markus,
> >>>>
> >>>> A few of your sexplib changes didn't make it into this release, and I'll
> >>>> take a look at your patch queue to see what else we're missing. But I've
> >>>> been building and testing on Mac OS X. I'll see if I can recreate Anil's
> >>>> missing symbol problem (I haven't been testing with 3.12.1)
> >>>>
> >>>>
> >>>> On Thu, Sep 6, 2012 at 6:42 PM, Markus Mottl <markus.mottl at gmail.com>
> >>>> wrote:
> >>>>>
> >>>>> On Thursday, September 6, 2012, Anil Madhavapeddy wrote:
> >>>>>>
> >>>>>> The warnings are due to unused variables,
> >>>>>
> >>>>>
> >>>>> You might also want to apply my Bitbucket patch queue for ocaml-core.
> >>>>> The resulting tree should build fine on Mac OS X, fixes a couple of bugs,
> >>>>> and adds some useful features.
> >>>>>
> >>>>> Regards,
> >>>>> Markus
> >>>>>
> >>>>>
> >>>>>
> >>>>> --
> >>>>> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
> >>>>
> >>>>
> >>>
> >>>
> >>
> >>
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120909/a0900080/attachment-0001.html>

From dmhouse at gmail.com  Sun Sep  9 21:02:25 2012
From: dmhouse at gmail.com (David House)
Date: Sun, 9 Sep 2012 21:02:25 +0100
Subject: Core on a Mac
In-Reply-To: <CACLX4jR9rC5BNAqdsd5KENHYRf5XzgYn-fk5hb_BEcLC+59V_A@mail.gmail.com>
References: <CADy1MavvzhL3+Q2WPV+4u1xcDmNcEUSCTvUMUu=A8SXPb96Nxg@mail.gmail.com>
	<027F8960-82EA-432D-884E-4E900389088F@recoil.org>
	<CAMu2m2LezwGjxo9v6ZV2JPdN58L6oPeRWno7K_5OA2e88pPpjQ@mail.gmail.com>
	<96D17667-DE37-4116-85FB-583F61D1B7C7@recoil.org>
	<CACLX4jR9rC5BNAqdsd5KENHYRf5XzgYn-fk5hb_BEcLC+59V_A@mail.gmail.com>
Message-ID: <CADy1MasFR2gojfU2KkJhKre0K5K7mXMmuX-sAVUODbssp_xxtA@mail.gmail.com>


Thanks guys. I finally got round to trying this out a few days ago,
and the opam route worked with basically no hitches.


On 3 September 2012 21:58, Yaron Minsky <yminsky at janestreet.com> wrote:
> I've also been using opam, and it's been awesome.  It's improving
> quickly, it has lots of useful features, and it does a good job of
> picking the versions to install.  (It uses a SAT-solver for picking a
> compatible set of version numbers.)  It's still young, but given that
> it's already pretty stable.
>
> y
>
> On Fri, Aug 31, 2012 at 6:18 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> The Homebrew OCaml includes 10.8-specific fixes [1] too, which cause
>> sporadic crashes otherwise with exception backtraces in particular.  And
>> once OPAM is bootstrapped, it supports multiple local development
>> environments via `opam switch`.  This is assuming its solver isn't going off
>> and upgrading everything, which Thomas has mostly fixed now :)
>>
>> [1] http://caml.inria.fr/mantis/view.php?id=5700
>>
>> -a
>>
>> On 31 Aug 2012, at 15:14, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
>>
>> I install core from the release tarball on my OS X 10.7.4 Mac without
>> problems. It's on top of a base installation of ocaml, findlib, etc. from
>> godi.
>>
>> On Fri, Aug 31, 2012 at 5:51 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>>
>>> On 31 Aug 2012, at 14:48, David House <dmhouse at gmail.com> wrote:
>>>
>>> > I'm interested in getting core working on my Mac. Has anyone tried
>>> > this, and how well does it work?
>>>
>>>
>>> - Install Homebrew from http://github.com/mxcl/homebrew
>>> - $ brew install ocaml
>>> - $ brew tap mirage/ocaml      # hook in custom ocaml packages
>>> - $ brew install opam --HEAD   # get the very latest OPAM
>>> - $ opam install core async
>>> - $ eval `opam config -env`    # import the right PATH
>>>
>>> Some of these steps will disappear in a bit (e.g. the tap is only
>>> required until a more stable OPAM appears, which will hopefully be
>>> before ICFP in a couple of weeks).
>>>
>>> Note that Homebrew just updated to ocaml-4.00.0, so hopefully Core
>>> works with it too.
>>>
>>> -anil
>>
>>
>>


From seanmcl at gmail.com  Thu Sep 13 22:41:57 2012
From: seanmcl at gmail.com (Sean McLaughlin)
Date: Thu, 13 Sep 2012 17:41:57 -0400
Subject: ocaml-core doesn't build with opam installed ocaml
Message-ID: <CAO4dZbdMoPZmKqdv1Bdw0rrt2mHpns3Fe6=UkX3TW-CRG8HxBQ@mail.gmail.com>

Hi,

I tried to build core today using my opam-installed ocaml compiler.  It
failed due to the error-enabled warnings.
It seems like we should try to get this to work out of the box, in case
users want to work on core.

Best,

Sean

$ hg clone https://seanmcl at bitbucket.org/yminsky/ocaml-coreocaml-core-yminsky
requesting all changes
adding changesets
adding manifests
adding file changes
added 140 changesets with 2188 changes to 1172 files
updating to branch default
cd ocaml-core
899 files updated, 0 files merged, 0 files removed, 0 files unresolved
$ cd ocaml-core-yminsky/
/usr/local/src/ocaml-core-yminsky
$ ./build-and-install
=> base/type_conv
   * uninstalling
   * configuring
   * compiling
ocaml setup.ml -build
/home/seanmcl/.opam/4.00.0/bin/ocamlopt.opt -I
/home/seanmcl/.opam/4.00.0/lib/ocaml/ocamlbuild unix.cmxa
/home/seanmcl/.opam/4.00.0/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa
myocamlbuild.ml/home/seanmcl/.opam/4.00.0/lib/ocaml/ocamlbuild/ocamlbuild.cmx
-o
myocamlbuild
ocamlfind ocamldep -package camlp4.quotations -package camlp4.extend
-modules lib/pa_type_conv.mli > lib/pa_type_conv.mli.depends
ocamlfind ocamlc -c -g -w @Aemr-28 -strict-sequence -package
camlp4.quotations -package camlp4.extend -I lib -o lib/pa_type_conv.cmi
lib/pa_type_conv.mli
ocamlfind ocamldep -package camlp4.quotations -package camlp4.extend
-syntax camlp4o -modules lib/pa_type_conv.ml > lib/pa_type_conv.ml.depends
ocamlfind ocamlc -c -g -w @Aemr-28 -strict-sequence -package
camlp4.quotations -package camlp4.extend -syntax camlp4o -I lib -o
lib/pa_type_conv.cmo lib/pa_type_conv.ml
+ ocamlfind ocamlc -c -g -w @Aemr-28 -strict-sequence -package
camlp4.quotations -package camlp4.extend -syntax camlp4o -I lib -o
lib/pa_type_conv.cmo lib/pa_type_conv.ml
 File "lib/pa_type_conv.ml", line 275, characters 19-1267:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(TyTypePol (_, _, _)|TyAnP _|TyAnM _)
File "lib/pa_type_conv.ml", line 4, characters 0-11:
Warning 33: unused open Lexing.
File "lib/pa_type_conv.ml", line 12, characters 4-8:
Warning 32: unused value both.
File "lib/pa_type_conv.ml", line 1:
Error: Error-enabled warnings (3 occurrences)
Command exited with code 2.
E: Failure("Command '/home/seanmcl/.opam/4.00.0/bin/ocamlbuild
lib/pa_type_conv.cma -tag debug' terminated with error code 10")
make: *** [build] Error 1
*** ERROR: Couldn't compile type_conv
EXIT STATUS 1
/usr/local/src/ocaml-core-yminsky
$
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120913/dcd8be4e/attachment-0001.html>

From yury.sulsky at gmail.com  Thu Sep 13 23:13:45 2012
From: yury.sulsky at gmail.com (Yury Sulsky)
Date: Thu, 13 Sep 2012 18:13:45 -0400
Subject: ocaml-core doesn't build with opam installed ocaml
In-Reply-To: <CAO4dZbdMoPZmKqdv1Bdw0rrt2mHpns3Fe6=UkX3TW-CRG8HxBQ@mail.gmail.com>
References: <CAO4dZbdMoPZmKqdv1Bdw0rrt2mHpns3Fe6=UkX3TW-CRG8HxBQ@mail.gmail.com>
Message-ID: <CAEDxudwxHH2GqULNG=bXPXgWPcMCkj_tWEHAoRTRmScP+n_M=w@mail.gmail.com>

Hi Sean, the released packages are more up-to-date than the bitbucket tree
right now. The tree will get updated with the next release, 108.08.

Yury

On Thu, Sep 13, 2012 at 5:41 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:

> Hi,
>
> I tried to build core today using my opam-installed ocaml compiler.  It
> failed due to the error-enabled warnings.
> It seems like we should try to get this to work out of the box, in case
> users want to work on core.
>
> Best,
>
> Sean
>
> $ hg clone https://seanmcl at bitbucket.org/yminsky/ocaml-coreocaml-core-yminsky
> requesting all changes
> adding changesets
> adding manifests
> adding file changes
> added 140 changesets with 2188 changes to 1172 files
> updating to branch default
> cd ocaml-core
> 899 files updated, 0 files merged, 0 files removed, 0 files unresolved
> $ cd ocaml-core-yminsky/
> /usr/local/src/ocaml-core-yminsky
> $ ./build-and-install
> => base/type_conv
>    * uninstalling
>    * configuring
>    * compiling
> ocaml setup.ml -build
> /home/seanmcl/.opam/4.00.0/bin/ocamlopt.opt -I
> /home/seanmcl/.opam/4.00.0/lib/ocaml/ocamlbuild unix.cmxa
> /home/seanmcl/.opam/4.00.0/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa
> myocamlbuild.ml/home/seanmcl/.opam/4.00.0/lib/ocaml/ocamlbuild/ocamlbuild.cmx -o
> myocamlbuild
> ocamlfind ocamldep -package camlp4.quotations -package camlp4.extend
> -modules lib/pa_type_conv.mli > lib/pa_type_conv.mli.depends
> ocamlfind ocamlc -c -g -w @Aemr-28 -strict-sequence -package
> camlp4.quotations -package camlp4.extend -I lib -o lib/pa_type_conv.cmi
> lib/pa_type_conv.mli
> ocamlfind ocamldep -package camlp4.quotations -package camlp4.extend
> -syntax camlp4o -modules lib/pa_type_conv.ml > lib/pa_type_conv.ml.depends
> ocamlfind ocamlc -c -g -w @Aemr-28 -strict-sequence -package
> camlp4.quotations -package camlp4.extend -syntax camlp4o -I lib -o
> lib/pa_type_conv.cmo lib/pa_type_conv.ml
> + ocamlfind ocamlc -c -g -w @Aemr-28 -strict-sequence -package
> camlp4.quotations -package camlp4.extend -syntax camlp4o -I lib -o
> lib/pa_type_conv.cmo lib/pa_type_conv.ml
>  File "lib/pa_type_conv.ml", line 275, characters 19-1267:
> Warning 8: this pattern-matching is not exhaustive.
> Here is an example of a value that is not matched:
> (TyTypePol (_, _, _)|TyAnP _|TyAnM _)
> File "lib/pa_type_conv.ml", line 4, characters 0-11:
> Warning 33: unused open Lexing.
> File "lib/pa_type_conv.ml", line 12, characters 4-8:
> Warning 32: unused value both.
> File "lib/pa_type_conv.ml", line 1:
> Error: Error-enabled warnings (3 occurrences)
> Command exited with code 2.
> E: Failure("Command '/home/seanmcl/.opam/4.00.0/bin/ocamlbuild
> lib/pa_type_conv.cma -tag debug' terminated with error code 10")
> make: *** [build] Error 1
> *** ERROR: Couldn't compile type_conv
> EXIT STATUS 1
> /usr/local/src/ocaml-core-yminsky
> $
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120913/2a6d3159/attachment-0001.html>

From seanmcl at gmail.com  Sat Sep 15 21:12:28 2012
From: seanmcl at gmail.com (Sean McLaughlin)
Date: Sat, 15 Sep 2012 16:12:28 -0400
Subject: core + opam
Message-ID: <CAO4dZbeCX+iDqozMsD1ZBEPF0KCARzyHaoBYgcOxj1kZoR2a1w@mail.gmail.com>

Hi,

I'm experiencing problems compiling core with opam.  This seems to be due
to the way opam separates the compiled stub files
(in .opam/4.00.0/lib/stublibs/dllbin_prot_stubs.so) from the libraries
themselves (.opam/4.00.0/lib/bin_prot/*.cmx).  I'm not sure if we should
fix this on the Jane Street side in the build system, or if opam's ocaml
should know about this directory during linking.

The failure occurs for me on both on OSX and Linux.  Could this be a
problem with my install of opam?  Has anyone else got this to work?  Before
JS releases a tarball, do you try to compile with opam?

Best,

Sean

+ ocamlfind ocamldep -package variantslib.syntax -package variantslib
-package unix -package threads -package sexplib.syntax -package sexplib
-package res -package pa_pipebang -package pa_ounit -package
fieldslib.syntax -package fieldslib -package comparelib.syntax -package
bin_prot.syntax -package bin_prot -package bigarray -syntax camlp4o
-modules lib/array_permute.ml > lib/array_permute.ml.depends
Camlp4: Uncaught exception: DynLoader.Error
("/Users/seanmcl/.opam/4.00.0/lib/bin_prot/bin_prot.cma", "error loading
shared library: dllbin_prot_stubs.so: dlopen(dllbin_prot_stubs.so, 138):
image not found")
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120915/cfdb13ae/attachment-0001.html>

From seanmcl at gmail.com  Sat Sep 15 21:14:54 2012
From: seanmcl at gmail.com (Sean McLaughlin)
Date: Sat, 15 Sep 2012 16:14:54 -0400
Subject: core + opam
In-Reply-To: <CAO4dZbeCX+iDqozMsD1ZBEPF0KCARzyHaoBYgcOxj1kZoR2a1w@mail.gmail.com>
References: <CAO4dZbeCX+iDqozMsD1ZBEPF0KCARzyHaoBYgcOxj1kZoR2a1w@mail.gmail.com>
Message-ID: <CAO4dZbc+wuGrM3iURHtTgLQGx63N+rLnHa9E9KrHQYNt=iRbnA@mail.gmail.com>

I forgot to mention I'm trying

https://ocaml.janestreet.com/ocaml-core/108.07.00-pre1/core-suite-
108.07.00-pre1.tar.gz

On Sat, Sep 15, 2012 at 4:12 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:

> Hi,
>
> I'm experiencing problems compiling core with opam.  This seems to be due
> to the way opam separates the compiled stub files
> (in .opam/4.00.0/lib/stublibs/dllbin_prot_stubs.so) from the libraries
> themselves (.opam/4.00.0/lib/bin_prot/*.cmx).  I'm not sure if we should
> fix this on the Jane Street side in the build system, or if opam's ocaml
> should know about this directory during linking.
>
> The failure occurs for me on both on OSX and Linux.  Could this be a
> problem with my install of opam?  Has anyone else got this to work?  Before
> JS releases a tarball, do you try to compile with opam?
>
> Best,
>
> Sean
>
> + ocamlfind ocamldep -package variantslib.syntax -package variantslib
> -package unix -package threads -package sexplib.syntax -package sexplib
> -package res -package pa_pipebang -package pa_ounit -package
> fieldslib.syntax -package fieldslib -package comparelib.syntax -package
> bin_prot.syntax -package bin_prot -package bigarray -syntax camlp4o
> -modules lib/array_permute.ml > lib/array_permute.ml.depends
> Camlp4: Uncaught exception: DynLoader.Error
> ("/Users/seanmcl/.opam/4.00.0/lib/bin_prot/bin_prot.cma", "error loading
> shared library: dllbin_prot_stubs.so: dlopen(dllbin_prot_stubs.so, 138):
> image not found")
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120915/c4b56f19/attachment-0001.html>

From seanmcl at gmail.com  Sat Sep 15 21:53:33 2012
From: seanmcl at gmail.com (Sean McLaughlin)
Date: Sat, 15 Sep 2012 16:53:33 -0400
Subject: core + opam (Resolved)
Message-ID: <CAO4dZberb0Br57QQTkfefGvwoaqktM5L=UXzb_0CrtmCSRNeBQ@mail.gmail.com>

I didn't realize you need to call

  eval `opam config -env`

before every compilation.  This fixed the problem.  Sorry for the noise.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120915/da1cf1ac/attachment-0001.html>

From yminsky at janestreet.com  Sun Sep 16 02:44:26 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Sun, 16 Sep 2012 03:44:26 +0200
Subject: core + opam (Resolved)
In-Reply-To: <CAO4dZberb0Br57QQTkfefGvwoaqktM5L=UXzb_0CrtmCSRNeBQ@mail.gmail.com>
References: <CAO4dZberb0Br57QQTkfefGvwoaqktM5L=UXzb_0CrtmCSRNeBQ@mail.gmail.com>
Message-ID: <CACLX4jRps6DqhoBhtDCb8go5tC=+=FRL4HFKcZxt_AsHuddrpA@mail.gmail.com>


No problem.  You should really just put that into your bashrc...

y

On Sat, Sep 15, 2012 at 10:53 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:
>
> I didn't realize you need to call
>
>   eval `opam config -env`
>
> before every compilation.  This fixed the problem.  Sorry for the noise.


From dmhouse at gmail.com  Sun Sep 16 19:18:50 2012
From: dmhouse at gmail.com (David House)
Date: Sun, 16 Sep 2012 19:18:50 +0100
Subject: core + opam (Resolved)
In-Reply-To: <CACLX4jRps6DqhoBhtDCb8go5tC=+=FRL4HFKcZxt_AsHuddrpA@mail.gmail.com>
References: <CAO4dZberb0Br57QQTkfefGvwoaqktM5L=UXzb_0CrtmCSRNeBQ@mail.gmail.com>
	<CACLX4jRps6DqhoBhtDCb8go5tC=+=FRL4HFKcZxt_AsHuddrpA@mail.gmail.com>
Message-ID: <CADy1MasJNGekOYRzRs=1f-NK5uswUacFLfZf4zpr_j-Gm+kTVg@mail.gmail.com>


I also think opam could offer to do this for you.


On 16 September 2012 02:44, Yaron Minsky <yminsky at janestreet.com> wrote:
> No problem.  You should really just put that into your bashrc...
>
> y
>
> On Sat, Sep 15, 2012 at 10:53 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:
>>
>> I didn't realize you need to call
>>
>>   eval `opam config -env`
>>
>> before every compilation.  This fixed the problem.  Sorry for the noise.


From anil at recoil.org  Sun Sep 16 19:21:35 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Sun, 16 Sep 2012 19:21:35 +0100
Subject: core + opam (Resolved)
In-Reply-To: <CADy1MasJNGekOYRzRs=1f-NK5uswUacFLfZf4zpr_j-Gm+kTVg@mail.gmail.com>
References: <CAO4dZberb0Br57QQTkfefGvwoaqktM5L=UXzb_0CrtmCSRNeBQ@mail.gmail.com> <CACLX4jRps6DqhoBhtDCb8go5tC=+=FRL4HFKcZxt_AsHuddrpA@mail.gmail.com> <CADy1MasJNGekOYRzRs=1f-NK5uswUacFLfZf4zpr_j-Gm+kTVg@mail.gmail.com>
Message-ID: <1D777330-10CC-4565-9DE7-77FEF7AB8E7D@recoil.org>


OPAM can't do the shell eval automatically.

However, there is a bug here anyway.  All of the shells invoked by OPAM
(including the builds of the packages) should have the correct environment
variables set, so it's very odd that CAML_LD_LIBRARY_PATH appears to be
incorrect.  You shouldn't need to run the eval for opam invocations: only for
using the OCaml environment outside of OPAM.

What OPAM version are you using?

-a

On 16 Sep 2012, at 19:18, David House <dmhouse at gmail.com> wrote:

> I also think opam could offer to do this for you.
> 
> 
> On 16 September 2012 02:44, Yaron Minsky <yminsky at janestreet.com> wrote:
>> No problem.  You should really just put that into your bashrc...
>> 
>> y
>> 
>> On Sat, Sep 15, 2012 at 10:53 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:
>>> 
>>> I didn't realize you need to call
>>> 
>>>  eval `opam config -env`
>>> 
>>> before every compilation.  This fixed the problem.  Sorry for the noise.
> 



From dmhouse at gmail.com  Sun Sep 16 19:30:38 2012
From: dmhouse at gmail.com (David House)
Date: Sun, 16 Sep 2012 19:30:38 +0100
Subject: core + opam (Resolved)
In-Reply-To: <1D777330-10CC-4565-9DE7-77FEF7AB8E7D@recoil.org>
References: <CAO4dZberb0Br57QQTkfefGvwoaqktM5L=UXzb_0CrtmCSRNeBQ@mail.gmail.com>
	<CACLX4jRps6DqhoBhtDCb8go5tC=+=FRL4HFKcZxt_AsHuddrpA@mail.gmail.com>
	<CADy1MasJNGekOYRzRs=1f-NK5uswUacFLfZf4zpr_j-Gm+kTVg@mail.gmail.com>
	<1D777330-10CC-4565-9DE7-77FEF7AB8E7D@recoil.org>
Message-ID: <CADy1MauvQzoWAY2QywoGDCvkN1GEhccwi_X-hY5EQZ-KJiqozg@mail.gmail.com>


On 16 September 2012 19:21, Anil Madhavapeddy <anil at recoil.org> wrote:
> OPAM can't do the shell eval automatically.

I mean, it could offer to edit your bashrc for you. Every little helps... :)


From anil at recoil.org  Sun Sep 16 19:51:10 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Sun, 16 Sep 2012 19:51:10 +0100
Subject: core + opam (Resolved)
In-Reply-To: <CADy1MauvQzoWAY2QywoGDCvkN1GEhccwi_X-hY5EQZ-KJiqozg@mail.gmail.com>
References: <CAO4dZberb0Br57QQTkfefGvwoaqktM5L=UXzb_0CrtmCSRNeBQ@mail.gmail.com> <CACLX4jRps6DqhoBhtDCb8go5tC=+=FRL4HFKcZxt_AsHuddrpA@mail.gmail.com> <CADy1MasJNGekOYRzRs=1f-NK5uswUacFLfZf4zpr_j-Gm+kTVg@mail.gmail.com> <1D777330-10CC-4565-9DE7-77FEF7AB8E7D@recoil.org> <CADy1MauvQzoWAY2QywoGDCvkN1GEhccwi_X-hY5EQZ-KJiqozg@mail.gmail.com>
Message-ID: <29E1FA6E-605A-46C0-92F3-EDFBFC9495FC@recoil.org>


On 16 Sep 2012, at 19:30, David House <dmhouse at gmail.com> wrote:

> On 16 September 2012 19:21, Anil Madhavapeddy <anil at recoil.org> wrote:
>> OPAM can't do the shell eval automatically.
> 
> I mean, it could offer to edit your bashrc for you. Every little helps... :)
> 

You should see my bashrc. No machine could edit that :-)

This is indeed a good thing for opam init to suggest (and remove the "would you like to install crucial base packages  that will cause odd errors if you select N") prompt that it currently offers.

On github as https://github.com/OCamlPro/opam/issues/151

-a



From thomas.gazagnaire at gmail.com  Mon Sep 17 08:45:54 2012
From: thomas.gazagnaire at gmail.com (Thomas Gazagnaire)
Date: Mon, 17 Sep 2012 09:45:54 +0200
Subject: core + opam
In-Reply-To: <CAO4dZbeCX+iDqozMsD1ZBEPF0KCARzyHaoBYgcOxj1kZoR2a1w@mail.gmail.com>
References: <CAO4dZbeCX+iDqozMsD1ZBEPF0KCARzyHaoBYgcOxj1kZoR2a1w@mail.gmail.com>
Message-ID: <E29DFC4C-C041-4542-8B79-1352E9694B2B@ocamlpro.com>


Hi Sean,

are you compiling core packaged with opam (ie. opam install core) or you are compiling the archive manually ? In the first case, opam should automatically set-up the OCAML_LD_LIBRARY_PATH correctly; in the second case, you should call 'eval `opam config -env`' to update your env variables before compiling (or add it to your .bashrc as suggested by Yaron).

--
Thomas

On Sep 15, 2012, at 10:12 PM, Sean McLaughlin wrote:

> Hi,
> 
> I'm experiencing problems compiling core with opam.  This seems to be due to the way opam separates the compiled stub files (in .opam/4.00.0/lib/stublibs/dllbin_prot_stubs.so) from the libraries themselves (.opam/4.00.0/lib/bin_prot/*.cmx).  I'm not sure if we should fix this on the Jane Street side in the build system, or if opam's ocaml should know about this directory during linking.  
> 
> The failure occurs for me on both on OSX and Linux.  Could this be a problem with my install of opam?  Has anyone else got this to work?  Before JS releases a tarball, do you try to compile with opam?
> 
> Best,
> 
> Sean
> 
> + ocamlfind ocamldep -package variantslib.syntax -package variantslib -package unix -package threads -package sexplib.syntax -package sexplib -package res -package pa_pipebang -package pa_ounit -package fieldslib.syntax -package fieldslib -package comparelib.syntax -package bin_prot.syntax -package bin_prot -package bigarray -syntax camlp4o -modules lib/array_permute.ml > lib/array_permute.ml.depends
> Camlp4: Uncaught exception: DynLoader.Error ("/Users/seanmcl/.opam/4.00.0/lib/bin_prot/bin_prot.cma", "error loading shared library: dllbin_prot_stubs.so: dlopen(dllbin_prot_stubs.so, 138): image not found")
> 
> 



From seanmcl at gmail.com  Mon Sep 17 19:40:55 2012
From: seanmcl at gmail.com (Sean McLaughlin)
Date: Mon, 17 Sep 2012 14:40:55 -0400
Subject: opam 'remove' not working
Message-ID: <CAO4dZbc+N-jbt-u-Eu4nNb25wUbd7VNH6fFsz7HJo40N=pBb1A@mail.gmail.com>

Hi,

I'm trying to work on core, and am having some trouble with opam.  I
downloaded the latest tarball

  ocaml-core-108.07.00

and everything compiled fine.  Then I edited some code in

  ocaml-core-108.07.00/core-108.07.00/lib

and ran

  /usr/local/src/ocaml-core-108.07.00/core-108.07.00
  $ ocaml setup.ml -build

which completed fine. Then I tried to install, but got the following error

$ ocaml setup.ml -install
ocamlfind: Package core is already installed
 - (file /Users/seanmcl/.opam/4.00.0/lib/core/META already exists)
E: Failure("Command ''/Users/seanmcl/.opam/4.00.0/bin/ocamlfind' install
core lib/META _build/top/core_install_printers.cmx
_build/top/core_install_printers.cmi _build/top/core_top.cmxs
_build/top/core_top.a _build/top/core_top.cmxa _build/top/core_top.cma top/
core_install_printers.ml _build/lib/core.cmxs _build/lib/core.a
_build/lib/core.cmxa _build/lib/core.cma _build/lib/core.cmi
_build/lib/dllcore_stubs.so _build/lib/libcore_stubs.a lib/zone.mli
lib/word_size.mli lib/with_return.mli lib/weekday.mli lib/unpack_buffer.mli
lib/univ_map.mli lib/univ.mli lib/unit.mli
lib/unique_id_intf.mllib/unique_id.mli lib/union_find.mli
lib/tuple.mli lib/timer.mli lib/
time_internal.ml lib/time.mli lib/thread_safe_queue.mli
lib/t.mllib/sys_open_patch.mli lib/
substring_intf.ml lib/substring.mli lib/string_id.mli lib/stringable.ml lib/
std_internal.ml lib/std.ml lib/staged.mli
lib/stable_unit_test_intf.mllib/stable_unit_test.mli lib/
stable_internal.ml lib/stable_containers.mli lib/stable.ml lib/squeue.mli
lib/span.mli lib/space_safe_tuple.mli lib/source_code_position.mli
lib/signal.mli lib/sexpable.ml lib/set_once.mli
lib/robustly_comparable.mllib/result.mli lib/ref.mli
lib/quickcheck.mli lib/pretty_printer.mli lib/
polymorphic_compare_intf.ml lib/polymorphic_compare.mli
lib/piecewise_linear.mli lib/pid.mli lib/out_channel.mli lib/or_error.mli
lib/ordered_collection_common.mli lib/option.mli lib/only_in_test.mli
lib/ofday_unit_tests_v1.mli lib/ofday.mli lib/no_polymorphic_compare.mli
lib/nano_mutex.mli lib/mutex0.ml lib/month.mli lib/monad.ml lib/memo.mli
lib/make_substring.ml lib/lock_file.mli lib/linux_ext.mli lib/int_set.mli
lib/int_replace_polymorphic_compare.mli lib/int_intf.ml
lib/interval_intf.mllib/interval.mli lib/
interfaces.ml lib/int_conversions.ml lib/intable.ml
lib/inline_tests.mllib/info.mli lib/in_channel.mli
lib/identifiable.mli lib/host_and_port.mli
lib/heap.mli lib/hash_set_intf.ml lib/hash_set.mli lib/hash_queue.ml lib/
hash_heap.ml lib/hashable.ml lib/fqueue.mli lib/force_once.mli lib/fn.mli
lib/float_robust_compare.mli lib/float_intf.ml
lib/floatable.mllib/float.mli lib/exn.mli lib/error.mli
lib/doubly_linked.mli
lib/dequeue.mli lib/date.mli lib/daemon.mli lib/crc.mli lib/core_unix.mli
lib/core_thread.mli lib/core_sys.mli lib/core_string.mli lib/core_stack.mli
lib/core_sexp.mli lib/core_set_unit_tests.mli
lib/core_set_intf.mllib/core_set.mli lib/core_random.mli
lib/core_queue.mli lib/core_printf.mli
lib/core_printexc.mli lib/core_nativeint.mli lib/core_mutex.mli
lib/core_map_unit_tests.mli lib/core_map_intf.ml lib/core_map.mli
lib/core_list.mli lib/core_lazy.mli lib/core_int64.mli lib/core_int63.mli
lib/core_int32.mli lib/core_int.mli
lib/core_hashtbl_intf.mllib/core_hashtbl.mli lib/core_gc.mli
lib/core_filename.mli lib/
core_field.ml lib/core_condition.mli lib/core_char.mli
lib/core_bin_prot.mllib/core_array.mli lib/core_arg.mli lib/
container.ml lib/constrained_float.ml lib/comparator.mli lib/comparable.mllib/
commutative_group.ml lib/common0.ml lib/common.mli lib/command.mli lib/
caml.ml lib/byte_units.mli lib/bucket.ml lib/bounded_int_table.mli
lib/bool.mli lib/blang.mli lib/binary_packing.mli
lib/binable0.mllib/binable.mli lib/bigsubstring.mli
lib/bigstring_marshal.mli
lib/bigstring.mli lib/bigbuffer.mli lib/bag.mli lib/backtrace.mli
lib/avltree.mli lib/array_permute.ml' terminated with error code 2")
EXIT STATUS 1

I tried doing

  opam remove core

which completed without error.  But the files are not removed from

  .opam/4.00.0/lib/core

and the -install step still complains that there's an existing META file
and refuses to install itself.

Please let me know what I'm doing wrong.

Thanks,

Sean

Is there an opam mailing list yet so I don't spam the wrong ocamlpro guys?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120917/dae2eb43/attachment-0001.html>

From seanmcl at gmail.com  Mon Sep 17 19:43:41 2012
From: seanmcl at gmail.com (Sean McLaughlin)
Date: Mon, 17 Sep 2012 14:43:41 -0400
Subject: opam 'remove' not working
In-Reply-To: <CAO4dZbc+N-jbt-u-Eu4nNb25wUbd7VNH6fFsz7HJo40N=pBb1A@mail.gmail.com>
References: <CAO4dZbc+N-jbt-u-Eu4nNb25wUbd7VNH6fFsz7HJo40N=pBb1A@mail.gmail.com>
Message-ID: <CAO4dZbeJb=YFMkC+SCuDp6euTbCHN_FOUfdhTGg9c7L0vMLEFw@mail.gmail.com>

PS: I know it's 'opam remove' that is not working, because even after doing

  opam remove core

I can do

$ ocaml
...
# #require "core";;

and it loads the old cma file.



On Mon, Sep 17, 2012 at 2:40 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:

> Hi,
>
> I'm trying to work on core, and am having some trouble with opam.  I
> downloaded the latest tarball
>
>   ocaml-core-108.07.00
>
> and everything compiled fine.  Then I edited some code in
>
>   ocaml-core-108.07.00/core-108.07.00/lib
>
> and ran
>
>   /usr/local/src/ocaml-core-108.07.00/core-108.07.00
>   $ ocaml setup.ml -build
>
> which completed fine. Then I tried to install, but got the following error
>
> $ ocaml setup.ml -install
> ocamlfind: Package core is already installed
>  - (file /Users/seanmcl/.opam/4.00.0/lib/core/META already exists)
> E: Failure("Command ''/Users/seanmcl/.opam/4.00.0/bin/ocamlfind' install
> core lib/META _build/top/core_install_printers.cmx
> _build/top/core_install_printers.cmi _build/top/core_top.cmxs
> _build/top/core_top.a _build/top/core_top.cmxa _build/top/core_top.cma top/
> core_install_printers.ml _build/lib/core.cmxs _build/lib/core.a
> _build/lib/core.cmxa _build/lib/core.cma _build/lib/core.cmi
> _build/lib/dllcore_stubs.so _build/lib/libcore_stubs.a lib/zone.mli
> lib/word_size.mli lib/with_return.mli lib/weekday.mli lib/unpack_buffer.mli
> lib/univ_map.mli lib/univ.mli lib/unit.mli lib/unique_id_intf.mllib/unique_id.mli lib/union_find.mli lib/tuple.mli lib/timer.mli lib/
> time_internal.ml lib/time.mli lib/thread_safe_queue.mli lib/t.mllib/sys_open_patch.mli lib/
> substring_intf.ml lib/substring.mli lib/string_id.mli lib/stringable.mllib/
> std_internal.ml lib/std.ml lib/staged.mli lib/stable_unit_test_intf.mllib/stable_unit_test.mli lib/
> stable_internal.ml lib/stable_containers.mli lib/stable.ml lib/squeue.mli
> lib/span.mli lib/space_safe_tuple.mli lib/source_code_position.mli
> lib/signal.mli lib/sexpable.ml lib/set_once.mli lib/robustly_comparable.mllib/result.mli lib/ref.mli lib/quickcheck.mli lib/pretty_printer.mli lib/
> polymorphic_compare_intf.ml lib/polymorphic_compare.mli
> lib/piecewise_linear.mli lib/pid.mli lib/out_channel.mli lib/or_error.mli
> lib/ordered_collection_common.mli lib/option.mli lib/only_in_test.mli
> lib/ofday_unit_tests_v1.mli lib/ofday.mli lib/no_polymorphic_compare.mli
> lib/nano_mutex.mli lib/mutex0.ml lib/month.mli lib/monad.ml lib/memo.mli
> lib/make_substring.ml lib/lock_file.mli lib/linux_ext.mli lib/int_set.mli
> lib/int_replace_polymorphic_compare.mli lib/int_intf.ml lib/
> interval_intf.ml lib/interval.mli lib/interfaces.ml lib/int_conversions.mllib/
> intable.ml lib/inline_tests.ml lib/info.mli lib/in_channel.mli
> lib/identifiable.mli lib/host_and_port.mli lib/heap.mli lib/
> hash_set_intf.ml lib/hash_set.mli lib/hash_queue.ml lib/hash_heap.ml lib/
> hashable.ml lib/fqueue.mli lib/force_once.mli lib/fn.mli
> lib/float_robust_compare.mli lib/float_intf.ml lib/floatable.mllib/float.mli lib/exn.mli lib/error.mli lib/doubly_linked.mli
> lib/dequeue.mli lib/date.mli lib/daemon.mli lib/crc.mli lib/core_unix.mli
> lib/core_thread.mli lib/core_sys.mli lib/core_string.mli lib/core_stack.mli
> lib/core_sexp.mli lib/core_set_unit_tests.mli lib/core_set_intf.mllib/core_set.mli lib/core_random.mli lib/core_queue.mli lib/core_printf.mli
> lib/core_printexc.mli lib/core_nativeint.mli lib/core_mutex.mli
> lib/core_map_unit_tests.mli lib/core_map_intf.ml lib/core_map.mli
> lib/core_list.mli lib/core_lazy.mli lib/core_int64.mli lib/core_int63.mli
> lib/core_int32.mli lib/core_int.mli lib/core_hashtbl_intf.mllib/core_hashtbl.mli lib/core_gc.mli lib/core_filename.mli lib/
> core_field.ml lib/core_condition.mli lib/core_char.mli lib/
> core_bin_prot.ml lib/core_array.mli lib/core_arg.mli lib/container.ml lib/
> constrained_float.ml lib/comparator.mli lib/comparable.ml lib/
> commutative_group.ml lib/common0.ml lib/common.mli lib/command.mli lib/
> caml.ml lib/byte_units.mli lib/bucket.ml lib/bounded_int_table.mli
> lib/bool.mli lib/blang.mli lib/binary_packing.mli lib/binable0.mllib/binable.mli lib/bigsubstring.mli lib/bigstring_marshal.mli
> lib/bigstring.mli lib/bigbuffer.mli lib/bag.mli lib/backtrace.mli
> lib/avltree.mli lib/array_permute.ml' terminated with error code 2")
> EXIT STATUS 1
>
> I tried doing
>
>   opam remove core
>
> which completed without error.  But the files are not removed from
>
>   .opam/4.00.0/lib/core
>
> and the -install step still complains that there's an existing META file
> and refuses to install itself.
>
> Please let me know what I'm doing wrong.
>
> Thanks,
>
> Sean
>
> Is there an opam mailing list yet so I don't spam the wrong ocamlpro guys?
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120917/4152f108/attachment-0001.html>

From anil at recoil.org  Mon Sep 17 21:41:39 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Mon, 17 Sep 2012 16:41:39 -0400
Subject: opam 'remove' not working
In-Reply-To: <CAO4dZbeJb=YFMkC+SCuDp6euTbCHN_FOUfdhTGg9c7L0vMLEFw@mail.gmail.com>
References: <CAO4dZbc+N-jbt-u-Eu4nNb25wUbd7VNH6fFsz7HJo40N=pBb1A@mail.gmail.com> <CAO4dZbeJb=YFMkC+SCuDp6euTbCHN_FOUfdhTGg9c7L0vMLEFw@mail.gmail.com>
Message-ID: <536A9684-E72C-4D56-B774-B27CD80E7E7B@recoil.org>

Alas, if for any reason OPAM gets out of sync with OCamlfind, you need to manually rectify it.

Ocamlfind refuses to install over an existing installation...

This shouldn't happen in normal practise, but of course, packaging bugs happen.

-anil

On 17 Sep 2012, at 14:43, Sean McLaughlin <seanmcl at gmail.com> wrote:

> PS: I know it's 'opam remove' that is not working, because even after doing 
> 
>   opam remove core
> 
> I can do
> 
> $ ocaml
> ...
> # #require "core";;
> 
> and it loads the old cma file.
> 
> 
> 
> On Mon, Sep 17, 2012 at 2:40 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:
> Hi,
> 
> I'm trying to work on core, and am having some trouble with opam.  I downloaded the latest tarball 
> 
>   ocaml-core-108.07.00
> 
> and everything compiled fine.  Then I edited some code in 
> 
>   ocaml-core-108.07.00/core-108.07.00/lib
> 
> and ran 
> 
>   /usr/local/src/ocaml-core-108.07.00/core-108.07.00
>   $ ocaml setup.ml -build
> 
> which completed fine. Then I tried to install, but got the following error
> 
> $ ocaml setup.ml -install
> ocamlfind: Package core is already installed
>  - (file /Users/seanmcl/.opam/4.00.0/lib/core/META already exists)
> E: Failure("Command ''/Users/seanmcl/.opam/4.00.0/bin/ocamlfind' install core lib/META _build/top/core_install_printers.cmx _build/top/core_install_printers.cmi _build/top/core_top.cmxs _build/top/core_top.a _build/top/core_top.cmxa _build/top/core_top.cma top/core_install_printers.ml _build/lib/core.cmxs _build/lib/core.a _build/lib/core.cmxa _build/lib/core.cma _build/lib/core.cmi _build/lib/dllcore_stubs.so _build/lib/libcore_stubs.a lib/zone.mli lib/word_size.mli lib/with_return.mli lib/weekday.mli lib/unpack_buffer.mli lib/univ_map.mli lib/univ.mli lib/unit.mli lib/unique_id_intf.ml lib/unique_id.mli lib/union_find.mli lib/tuple.mli lib/timer.mli lib/time_internal.ml lib/time.mli lib/thread_safe_queue.mli lib/t.ml lib/sys_open_patch.mli lib/substring_intf.ml lib/substring.mli lib/string_id.mli lib/stringable.ml lib/std_internal.ml lib/std.ml lib/staged.mli lib/stable_unit_test_intf.ml lib/stable_unit_test.mli lib/stable_internal.ml lib/stable_containers.mli lib/stable.ml lib/squeue.mli lib/span.mli lib/space_safe_tuple.mli lib/source_code_position.mli lib/signal.mli lib/sexpable.ml lib/set_once.mli lib/robustly_comparable.ml lib/result.mli lib/ref.mli lib/quickcheck.mli lib/pretty_printer.mli lib/polymorphic_compare_intf.ml lib/polymorphic_compare.mli lib/piecewise_linear.mli lib/pid.mli lib/out_channel.mli lib/or_error.mli lib/ordered_collection_common.mli lib/option.mli lib/only_in_test.mli lib/ofday_unit_tests_v1.mli lib/ofday.mli lib/no_polymorphic_compare.mli lib/nano_mutex.mli lib/mutex0.ml lib/month.mli lib/monad.ml lib/memo.mli lib/make_substring.ml lib/lock_file.mli lib/linux_ext.mli lib/int_set.mli lib/int_replace_polymorphic_compare.mli lib/int_intf.ml lib/interval_intf.ml lib/interval.mli lib/interfaces.ml lib/int_conversions.ml lib/intable.ml lib/inline_tests.ml lib/info.mli lib/in_channel.mli lib/identifiable.mli lib/host_and_port.mli lib/heap.mli lib/hash_set_intf.ml lib/hash_set.mli lib/hash_queue.ml lib/hash_heap.ml lib/hashable.ml lib/fqueue.mli lib/force_once.mli lib/fn.mli lib/float_robust_compare.mli lib/float_intf.ml lib/floatable.ml lib/float.mli lib/exn.mli lib/error.mli lib/doubly_linked.mli lib/dequeue.mli lib/date.mli lib/daemon.mli lib/crc.mli lib/core_unix.mli lib/core_thread.mli lib/core_sys.mli lib/core_string.mli lib/core_stack.mli lib/core_sexp.mli lib/core_set_unit_tests.mli lib/core_set_intf.ml lib/core_set.mli lib/core_random.mli lib/core_queue.mli lib/core_printf.mli lib/core_printexc.mli lib/core_nativeint.mli lib/core_mutex.mli lib/core_map_unit_tests.mli lib/core_map_intf.ml lib/core_map.mli lib/core_list.mli lib/core_lazy.mli lib/core_int64.mli lib/core_int63.mli lib/core_int32.mli lib/core_int.mli lib/core_hashtbl_intf.ml lib/core_hashtbl.mli lib/core_gc.mli lib/core_filename.mli lib/core_field.ml lib/core_condition.mli lib/core_char.mli lib/core_bin_prot.ml lib/core_array.mli lib/core_arg.mli lib/container.ml lib/constrained_float.ml lib/comparator.mli lib/comparable.ml lib/commutative_group.ml lib/common0.ml lib/common.mli lib/command.mli lib/caml.ml lib/byte_units.mli lib/bucket.ml lib/bounded_int_table.mli lib/bool.mli lib/blang.mli lib/binary_packing.mli lib/binable0.ml lib/binable.mli lib/bigsubstring.mli lib/bigstring_marshal.mli lib/bigstring.mli lib/bigbuffer.mli lib/bag.mli lib/backtrace.mli lib/avltree.mli lib/array_permute.ml' terminated with error code 2")
> EXIT STATUS 1
> 
> I tried doing 
> 
>   opam remove core 
> 
> which completed without error.  But the files are not removed from 
> 
>   .opam/4.00.0/lib/core
> 
> and the -install step still complains that there's an existing META file and refuses to install itself.  
> 
> Please let me know what I'm doing wrong.
> 
> Thanks,
> 
> Sean
> 
> Is there an opam mailing list yet so I don't spam the wrong ocamlpro guys?
>    
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120917/356613d8/attachment-0001.html>

From thomas.gazagnaire at gmail.com  Mon Sep 17 21:47:44 2012
From: thomas.gazagnaire at gmail.com (Thomas Gazagnaire)
Date: Mon, 17 Sep 2012 22:47:44 +0200
Subject: opam 'remove' not working
In-Reply-To: <536A9684-E72C-4D56-B774-B27CD80E7E7B@recoil.org>
References: <CAO4dZbc+N-jbt-u-Eu4nNb25wUbd7VNH6fFsz7HJo40N=pBb1A@mail.gmail.com> <CAO4dZbeJb=YFMkC+SCuDp6euTbCHN_FOUfdhTGg9c7L0vMLEFw@mail.gmail.com> <536A9684-E72C-4D56-B774-B27CD80E7E7B@recoil.org>
Message-ID: <D39C31F4-935D-4B07-AA0E-82063E16B2FC@ocamlpro.com>


> Alas, if for any reason OPAM gets out of sync with OCamlfind, you need to manually rectify it.
> 
> Ocamlfind refuses to install over an existing installation...
> 
> This shouldn't happen in normal practise, but of course, packaging bugs happen.

exactly. One way to solve your problem is to tell ocamlfind that indeed core needs to be uninstalled (ie. ocamlfind remove core). But I guess opam should double-check that a package files are properly indeed really removed when you try to run 'opam remove <foo>'.  I'm tracking this issue in https://github.com/OCamlPro/opam/issues/162, feel free to comment if you have any idea.

--
Thomas


> 
> -anil
> 
> On 17 Sep 2012, at 14:43, Sean McLaughlin <seanmcl at gmail.com> wrote:
> 
>> PS: I know it's 'opam remove' that is not working, because even after doing 
>> 
>>   opam remove core
>> 
>> I can do
>> 
>> $ ocaml
>> ...
>> # #require "core";;
>> 
>> and it loads the old cma file.
>> 
>> 
>> 
>> On Mon, Sep 17, 2012 at 2:40 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:
>> Hi,
>> 
>> I'm trying to work on core, and am having some trouble with opam.  I downloaded the latest tarball 
>> 
>>   ocaml-core-108.07.00
>> 
>> and everything compiled fine.  Then I edited some code in 
>> 
>>   ocaml-core-108.07.00/core-108.07.00/lib
>> 
>> and ran 
>> 
>>   /usr/local/src/ocaml-core-108.07.00/core-108.07.00
>>   $ ocaml setup.ml -build
>> 
>> which completed fine. Then I tried to install, but got the following error
>> 
>> $ ocaml setup.ml -install
>> ocamlfind: Package core is already installed
>>  - (file /Users/seanmcl/.opam/4.00.0/lib/core/META already exists)
>> E: Failure("Command ''/Users/seanmcl/.opam/4.00.0/bin/ocamlfind' install core lib/META _build/top/core_install_printers.cmx _build/top/core_install_printers.cmi _build/top/core_top.cmxs _build/top/core_top.a _build/top/core_top.cmxa _build/top/core_top.cma top/core_install_printers.ml _build/lib/core.cmxs _build/lib/core.a _build/lib/core.cmxa _build/lib/core.cma _build/lib/core.cmi _build/lib/dllcore_stubs.so _build/lib/libcore_stubs.a lib/zone.mli lib/word_size.mli lib/with_return.mli lib/weekday.mli lib/unpack_buffer.mli lib/univ_map.mli lib/univ.mli lib/unit.mli lib/unique_id_intf.ml lib/unique_id.mli lib/union_find.mli lib/tuple.mli lib/timer.mli lib/time_internal.ml lib/time.mli lib/thread_safe_queue.mli lib/t.ml lib/sys_open_patch.mli lib/substring_intf.ml lib/substring.mli lib/string_id.mli lib/stringable.ml lib/std_internal.ml lib/std.ml lib/staged.mli lib/stable_unit_test_intf.ml lib/stable_unit_test.mli lib/stable_internal.ml lib/stable_containers.mli lib/stable.ml lib/squeue.mli lib/span.mli lib/space_safe_tuple.mli lib/source_code_position.mli lib/signal.mli lib/sexpable.ml lib/set_once.mli lib/robustly_comparable.ml lib/result.mli lib/ref.mli lib/quickcheck.mli lib/pretty_printer.mli lib/polymorphic_compare_intf.ml lib/polymorphic_compare.mli lib/piecewise_linear.mli lib/pid.mli lib/out_channel.mli lib/or_error.mli lib/ordered_collection_common.mli lib/option.mli lib/only_in_test.mli lib/ofday_unit_tests_v1.mli lib/ofday.mli lib/no_polymorphic_compare.mli lib/nano_mutex.mli lib/mutex0.ml lib/month.mli lib/monad.ml lib/memo.mli lib/make_substring.ml lib/lock_file.mli lib/linux_ext.mli lib/int_set.mli lib/int_replace_polymorphic_compare.mli lib/int_intf.ml lib/interval_intf.ml lib/interval.mli lib/interfaces.ml lib/int_conversions.ml lib/intable.ml lib/inline_tests.ml lib/info.mli lib/in_channel.mli lib/identifiable.mli lib/host_and_port.mli lib/heap.mli lib/hash_set_intf.ml lib/hash_set.mli lib/hash_queue.ml lib/hash_heap.ml lib/hashable.ml lib/fqueue.mli lib/force_once.mli lib/fn.mli lib/float_robust_compare.mli lib/float_intf.ml lib/floatable.ml lib/float.mli lib/exn.mli lib/error.mli lib/doubly_linked.mli lib/dequeue.mli lib/date.mli lib/daemon.mli lib/crc.mli lib/core_unix.mli lib/core_thread.mli lib/core_sys.mli lib/core_string.mli lib/core_stack.mli lib/core_sexp.mli lib/core_set_unit_tests.mli lib/core_set_intf.ml lib/core_set.mli lib/core_random.mli lib/core_queue.mli lib/core_printf.mli lib/core_printexc.mli lib/core_nativeint.mli lib/core_mutex.mli lib/core_map_unit_tests.mli lib/core_map_intf.ml lib/core_map.mli lib/core_list.mli lib/core_lazy.mli lib/core_int64.mli lib/core_int63.mli lib/core_int32.mli lib/core_int.mli lib/core_hashtbl_intf.ml lib/core_hashtbl.mli lib/core_gc.mli lib/core_filename.mli lib/core_field.ml lib/core_condition.mli lib/core_char.mli lib/core_bin_prot.ml lib/core_array.mli lib/core_arg.mli lib/container.ml lib/constrained_float.ml lib/comparator.mli lib/comparable.ml lib/commutative_group.ml lib/common0.ml lib/common.mli lib/command.mli lib/caml.ml lib/byte_units.mli lib/bucket.ml lib/bounded_int_table.mli lib/bool.mli lib/blang.mli lib/binary_packing.mli lib/binable0.ml lib/binable.mli lib/bigsubstring.mli lib/bigstring_marshal.mli lib/bigstring.mli lib/bigbuffer.mli lib/bag.mli lib/backtrace.mli lib/avltree.mli lib/array_permute.ml' terminated with error code 2")
>> EXIT STATUS 1
>> 
>> I tried doing 
>> 
>>   opam remove core 
>> 
>> which completed without error.  But the files are not removed from 
>> 
>>   .opam/4.00.0/lib/core
>> 
>> and the -install step still complains that there's an existing META file and refuses to install itself.  
>> 
>> Please let me know what I'm doing wrong.
>> 
>> Thanks,
>> 
>> Sean
>> 
>> Is there an opam mailing list yet so I don't spam the wrong ocamlpro guys?
>>    
>> 
>> 
> 



From fabrice.le_fessant at ocamlpro.com  Mon Sep 17 21:52:45 2012
From: fabrice.le_fessant at ocamlpro.com (Fabrice Le Fessant)
Date: Mon, 17 Sep 2012 22:52:45 +0200
Subject: opam 'remove' not working
In-Reply-To: <D39C31F4-935D-4B07-AA0E-82063E16B2FC@ocamlpro.com>
References: <CAO4dZbc+N-jbt-u-Eu4nNb25wUbd7VNH6fFsz7HJo40N=pBb1A@mail.gmail.com> <CAO4dZbeJb=YFMkC+SCuDp6euTbCHN_FOUfdhTGg9c7L0vMLEFw@mail.gmail.com> <536A9684-E72C-4D56-B774-B27CD80E7E7B@recoil.org> <D39C31F4-935D-4B07-AA0E-82063E16B2FC@ocamlpro.com>
Message-ID: <50578D9D.6040407@ocamlpro.com>

On 09/17/2012 10:47 PM, Thomas Gazagnaire wrote:
>> Alas, if for any reason OPAM gets out of sync with OCamlfind, you need to manually rectify it.
>>
>> Ocamlfind refuses to install over an existing installation...
>>
>> This shouldn't happen in normal practise, but of course, packaging bugs happen.
>
> exactly. One way to solve your problem is to tell ocamlfind that indeed core needs to be uninstalled (ie. ocamlfind remove core). But I guess opam should double-check that a package files are properly indeed really removed when you try to run 'opam remove <foo>'.  I'm tracking this issue in https://github.com/OCamlPro/opam/issues/162, feel free to comment if you have any idea.

In the original specification, a package was supposed to contain a list 
of files to install, that would be copied by opam, instead of using 
ocamlfind to install these files. With such a list, opam would also be 
able to remove the files, instead of using ocamlfind to uninstall it.

This was removed from the current specification, because it would slow 
down the creation of packages, but now that we have many of them, we 
should probably re-add this behavior to the specification.

--Fabrice
-------------- next part --------------
A non-text attachment was scrubbed...
Name: fabrice_le_fessant.vcf
Type: text/x-vcard
Size: 438 bytes
Desc: not available
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120917/def29978/attachment-0001.vcf>

From thomas.gazagnaire at gmail.com  Tue Sep 18 11:12:37 2012
From: thomas.gazagnaire at gmail.com (Thomas Gazagnaire)
Date: Tue, 18 Sep 2012 12:12:37 +0200
Subject: opam 'remove' not working
In-Reply-To: <50578D9D.6040407@ocamlpro.com>
References: <CAO4dZbc+N-jbt-u-Eu4nNb25wUbd7VNH6fFsz7HJo40N=pBb1A@mail.gmail.com> <CAO4dZbeJb=YFMkC+SCuDp6euTbCHN_FOUfdhTGg9c7L0vMLEFw@mail.gmail.com> <536A9684-E72C-4D56-B774-B27CD80E7E7B@recoil.org> <D39C31F4-935D-4B07-AA0E-82063E16B2FC@ocamlpro.com> <50578D9D.6040407@ocamlpro.com>
Message-ID: <E5EE710F-FEA4-4B3C-9BC9-10EE78D7CE91@gmail.com>


> In the original specification, a package was supposed to contain a list of files to install, that would be copied by opam, instead of using ocamlfind to install these files. With such a list, opam would also be able to remove the files, instead of using ocamlfind to uninstall it.

Unfortunately, having a .install will not solve all the issue. For instance, it will break if a user manually install a package using ocamlfind (which seems to be what happened in this case).

> This was removed from the current specification, because it would slow down the creation of packages, but now that we have many of them, we should probably re-add this behavior to the specification.

Actually, it is still working in the current version of opam (ie. you can add either add a .install file or call 'make install'). After having packaged a good collection of package, I can say it much more practical to call 'make install' that to enumerate all the files to copy :-)

--
Thomas

From sylvain at le-gall.net  Tue Sep 18 11:24:02 2012
From: sylvain at le-gall.net (Sylvain Le Gall)
Date: Tue, 18 Sep 2012 12:24:02 +0200
Subject: opam 'remove' not working
In-Reply-To: <E5EE710F-FEA4-4B3C-9BC9-10EE78D7CE91@gmail.com>
References: <CAO4dZbc+N-jbt-u-Eu4nNb25wUbd7VNH6fFsz7HJo40N=pBb1A@mail.gmail.com>
	<CAO4dZbeJb=YFMkC+SCuDp6euTbCHN_FOUfdhTGg9c7L0vMLEFw@mail.gmail.com>
	<536A9684-E72C-4D56-B774-B27CD80E7E7B@recoil.org>
	<D39C31F4-935D-4B07-AA0E-82063E16B2FC@ocamlpro.com>
	<50578D9D.6040407@ocamlpro.com>
	<E5EE710F-FEA4-4B3C-9BC9-10EE78D7CE91@gmail.com>
Message-ID: <CAOCAUGOugmW=iBQSZCgonyrZgOMPLH5aBqXcRSL3_bAf-0KvWQ@mail.gmail.com>


For packages using oasis, you can look at setup.log that will list
files installed.

Although if it is possible to automate the generation of .install for
opam, it would probably make sense to have a subcommand in setup.ml
that will list all files installed.

E.g. after "ocaml setup.ml -install",
$> ocaml setup.ml -list-installed
foo/bin/myexe
$OCAMLFIND/lib.cma
$OCAMLFIND/lib.cmxa
$OCAMLFIND/lib.cmi
...

What is your opinion on that ?


2012/9/18 Thomas Gazagnaire <thomas.gazagnaire at gmail.com>:
>> In the original specification, a package was supposed to contain a list of files to install, that would be copied by opam, instead of using ocamlfind to install these files. With such a list, opam would also be able to remove the files, instead of using ocamlfind to uninstall it.
>
> Unfortunately, having a .install will not solve all the issue. For instance, it will break if a user manually install a package using ocamlfind (which seems to be what happened in this case).
>
>> This was removed from the current specification, because it would slow down the creation of packages, but now that we have many of them, we should probably re-add this behavior to the specification.
>
> Actually, it is still working in the current version of opam (ie. you can add either add a .install file or call 'make install'). After having packaged a good collection of package, I can say it much more practical to call 'make install' that to enumerate all the files to copy :-)
>
> --
> Thomas


From rudi.grinberg at gmail.com  Thu Sep 20 07:52:00 2012
From: rudi.grinberg at gmail.com (Rudi Grinberg)
Date: Thu, 20 Sep 2012 02:52:00 -0400
Subject: Missing comments?
Message-ID: <CADU9VHtWcTqMUAjHv=R2K45xCLr=kwQKDCJ9YePp+BLry6XvvA@mail.gmail.com>


The dummies guide to async says: "Start by looking at
async/lib/std.ml, which has comments that should guide you through
reading the rest of it."

However, looking at:
https://bitbucket.org/yminsky/ocaml-core/raw/8808e3a2571f/base/async/lib/std.ml
 I don't see anything.

Is this the wrong file? I can't find the comments anywhere else either.


From dhouse at janestreet.com  Thu Sep 20 08:22:18 2012
From: dhouse at janestreet.com (David House)
Date: Thu, 20 Sep 2012 08:22:18 +0100
Subject: Missing comments?
In-Reply-To: <CADU9VHtWcTqMUAjHv=R2K45xCLr=kwQKDCJ9YePp+BLry6XvvA@mail.gmail.com>
References: <CADU9VHtWcTqMUAjHv=R2K45xCLr=kwQKDCJ9YePp+BLry6XvvA@mail.gmail.com>
Message-ID: <CAK=fH+iGBK+nBRFxF0ioX=ACWPHkykcwxuTayh=qhmOFn9A4dw@mail.gmail.com>


Sigh, this is out of date. This was probably written before we split
async into three parts: the core, the unix-dependent bits, and
"extra", everything else.

So one might imagine that reading each of
async/{core,unix,extra}/std.ml might be a good idea. But it turns out
they're basically commentless.

I didn't realise quite how bad the state of our documentation was --
I'll try to find some time to work on it.

There is some stuff in examples/, but sadly some of that is out of
date as well. It's not worthless though, especially if you consider a
couple of points that might help modernise the code:

1. Prefer pipes over streams -- they have different semantics, but
Pipe's are nicer, and it can be pretty easy to make mistakes with
Streams.

2. Prefer >>= over upon/>>>. There is a pretty simple translation:

foo
>>> fun a ->
bar
>>> fun b ->
baz
>>> fun c ->
quux

->

foo
>>= fun a ->
bar
>>= fun b ->
baz
>>| fun c ->
quux

This gives the whole block a deferred result type. For library
functions, this is only really a good thing, since your callers can
bind on the result, or can throw it away with [whenever] if they don't
want to wait for your function to finish (whenever is soon to be
renamed don't_wait_for).

For blocks at the top-level of your code, there isn't as much benefit
(you don't have any callers), but it's still nice to do it for
consistency.

[A bit more background for the interested:

It used to be the case that recursive loops written with bind, e.g.:

  let loop () =
    if predicate then Deferred.unit else
      Clock.after (sec 1.)
      >>= fun () ->
      loop ()

would take space proportional to the depth of recursion. So one would
have to write using upon, where

  let loop () =
    if predicate then () else
      Clock.after (sec 1.)
      >>> fun () ->
      loop ()

and you had no way of telling when the loop was done -- if you wanted
to do that, you had to create the deferred explicitly:

  Deferred.create (fun ivar ->
    let loop () =
      if predicate then Ivar.fill ivar () else
        Clock.after (sec 1.)
        >>> fun () ->
        loop ()))

But this is no longer necessary, and the bind loop should be
considered the best style in almost all circumstances. The reason is a
really neat trick, but this email is already too long -- I'll try to
write a blog post about it.
]

On Thu, Sep 20, 2012 at 7:52 AM, Rudi Grinberg <rudi.grinberg at gmail.com> wrote:
> The dummies guide to async says: "Start by looking at
> async/lib/std.ml, which has comments that should guide you through
> reading the rest of it."
>
> However, looking at:
> https://bitbucket.org/yminsky/ocaml-core/raw/8808e3a2571f/base/async/lib/std.ml
>  I don't see anything.
>
> Is this the wrong file? I can't find the comments anywhere else either.


From rudi.grinberg at gmail.com  Thu Sep 20 22:46:14 2012
From: rudi.grinberg at gmail.com (Rudi Grinberg)
Date: Thu, 20 Sep 2012 17:46:14 -0400
Subject: Missing comments?
In-Reply-To: <CAK=fH+iGBK+nBRFxF0ioX=ACWPHkykcwxuTayh=qhmOFn9A4dw@mail.gmail.com>
References: <CADU9VHtWcTqMUAjHv=R2K45xCLr=kwQKDCJ9YePp+BLry6XvvA@mail.gmail.com>
	<CAK=fH+iGBK+nBRFxF0ioX=ACWPHkykcwxuTayh=qhmOFn9A4dw@mail.gmail.com>
Message-ID: <CADU9VHtXQXxLRYhHAs9=2_J10Fav6XoUgBwxkwALD_8dCZvcog@mail.gmail.com>


Thanks for the quick and informative reply David. The examples seems
very useful for now and the examples that I've tried
seem to compile and work as well. So it's not totally outdated. A blog
post about Async would be very welcome!

On Thu, Sep 20, 2012 at 3:22 AM, David House <dhouse at janestreet.com> wrote:
> Sigh, this is out of date. This was probably written before we split
> async into three parts: the core, the unix-dependent bits, and
> "extra", everything else.
>
> So one might imagine that reading each of
> async/{core,unix,extra}/std.ml might be a good idea. But it turns out
> they're basically commentless.
>
> I didn't realise quite how bad the state of our documentation was --
> I'll try to find some time to work on it.
>
> There is some stuff in examples/, but sadly some of that is out of
> date as well. It's not worthless though, especially if you consider a
> couple of points that might help modernise the code:
>
> 1. Prefer pipes over streams -- they have different semantics, but
> Pipe's are nicer, and it can be pretty easy to make mistakes with
> Streams.
>
> 2. Prefer >>= over upon/>>>. There is a pretty simple translation:
>
> foo
>>>> fun a ->
> bar
>>>> fun b ->
> baz
>>>> fun c ->
> quux
>
> ->
>
> foo
>>>= fun a ->
> bar
>>>= fun b ->
> baz
>>>| fun c ->
> quux
>
> This gives the whole block a deferred result type. For library
> functions, this is only really a good thing, since your callers can
> bind on the result, or can throw it away with [whenever] if they don't
> want to wait for your function to finish (whenever is soon to be
> renamed don't_wait_for).
>
> For blocks at the top-level of your code, there isn't as much benefit
> (you don't have any callers), but it's still nice to do it for
> consistency.
>
> [A bit more background for the interested:
>
> It used to be the case that recursive loops written with bind, e.g.:
>
>   let loop () =
>     if predicate then Deferred.unit else
>       Clock.after (sec 1.)
>       >>= fun () ->
>       loop ()
>
> would take space proportional to the depth of recursion. So one would
> have to write using upon, where
>
>   let loop () =
>     if predicate then () else
>       Clock.after (sec 1.)
>       >>> fun () ->
>       loop ()
>
> and you had no way of telling when the loop was done -- if you wanted
> to do that, you had to create the deferred explicitly:
>
>   Deferred.create (fun ivar ->
>     let loop () =
>       if predicate then Ivar.fill ivar () else
>         Clock.after (sec 1.)
>         >>> fun () ->
>         loop ()))
>
> But this is no longer necessary, and the bind loop should be
> considered the best style in almost all circumstances. The reason is a
> really neat trick, but this email is already too long -- I'll try to
> write a blog post about it.
> ]
>
> On Thu, Sep 20, 2012 at 7:52 AM, Rudi Grinberg <rudi.grinberg at gmail.com> wrote:
>> The dummies guide to async says: "Start by looking at
>> async/lib/std.ml, which has comments that should guide you through
>> reading the rest of it."
>>
>> However, looking at:
>> https://bitbucket.org/yminsky/ocaml-core/raw/8808e3a2571f/base/async/lib/std.ml
>>  I don't see anything.
>>
>> Is this the wrong file? I can't find the comments anywhere else either.


From seanmcl at gmail.com  Sun Sep 23 13:01:32 2012
From: seanmcl at gmail.com (Sean McLaughlin)
Date: Sun, 23 Sep 2012 08:01:32 -0400
Subject: scripting with ocaml and core
Message-ID: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com>

Hi,

I'm interested in doing some shell scripting in ocaml with core for some
regression testing.  It takes awhile (~4 seconds) for core to load into the
toplevel.  (Simple example at end of email.)  I figured I could make a
custom toplevel that linked all the code in, but I can't seem to improve it
much (~3 seconds).  I suspect I'm calling ocamlmktop incorrectly though,
because I can't see what would be taking all that time.  Here's what I used:

ocamlfind ocamlmktop -o core-ocaml -thread -package
core,core_extended,findlib -linkpkg

which I concocted after reading

http://projects.camlcity.org/projects/dl/findlib-1.2.1/doc/guide-html/x227.html

Has anyone successfully used core with the toplevel and not had this big
performance hit?

Thanks,

Sean


(* test.ml *)

#directory "/Users/seanmcl/.opam/4.00.0/lib/toplevel";;
#directory "/Users/seanmcl/.opam/4.00.0/lib/stublibs";;

#use "topfind";;
#camlp4o;;
#thread;;
#require "pcre";;
#require "core";;
#require "core_extended";;

open Core.Std

let _ = Printf.printf "Hello, world!\n"
;;

exit 0
(* end test.ml *)

$ time ocaml test.ml
Hello, world!

real 0m4.254s

$ time ./core-ocaml test.ml
Hello, world!

real 0m3.430s
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120923/fb5367ea/attachment-0001.html>

From yminsky at janestreet.com  Sun Sep 23 13:10:08 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Sun, 23 Sep 2012 08:10:08 -0400
Subject: scripting with ocaml and core
In-Reply-To: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com>
References: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com>
Message-ID: <CACLX4jSSV13bY_J0pswjS=HQ24C+ZawNwEf7hj3dxaVQewgCbw@mail.gmail.com>

I don't know how to make this faster either, unfortunately.  How long does
it take if you don't include core_extended?  We should move Shell from
core_extended to Core, which should allow one to avoid most of
Core_extended.

I think this kind of thing should get better when namespaces show up in
OCaml, so that we can load just parts of Core and still have a coherent set
of naming conventions.

y

On Sun, Sep 23, 2012 at 8:01 AM, Sean McLaughlin <seanmcl at gmail.com> wrote:

> Hi,
>
> I'm interested in doing some shell scripting in ocaml with core for some
> regression testing.  It takes awhile (~4 seconds) for core to load into the
> toplevel.  (Simple example at end of email.)  I figured I could make a
> custom toplevel that linked all the code in, but I can't seem to improve it
> much (~3 seconds).  I suspect I'm calling ocamlmktop incorrectly though,
> because I can't see what would be taking all that time.  Here's what I used:
>
> ocamlfind ocamlmktop -o core-ocaml -thread -package
> core,core_extended,findlib -linkpkg
>
> which I concocted after reading
>
>
> http://projects.camlcity.org/projects/dl/findlib-1.2.1/doc/guide-html/x227.html
>
> Has anyone successfully used core with the toplevel and not had this big
> performance hit?
>
> Thanks,
>
> Sean
>
>
> (* test.ml *)
>
> #directory "/Users/seanmcl/.opam/4.00.0/lib/toplevel";;
> #directory "/Users/seanmcl/.opam/4.00.0/lib/stublibs";;
>
> #use "topfind";;
> #camlp4o;;
> #thread;;
> #require "pcre";;
> #require "core";;
> #require "core_extended";;
>
> open Core.Std
>
> let _ = Printf.printf "Hello, world!\n"
> ;;
>
> exit 0
> (* end test.ml *)
>
> $ time ocaml test.ml
> Hello, world!
>
> real 0m4.254s
>
> $ time ./core-ocaml test.ml
> Hello, world!
>
> real 0m3.430s
>
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120923/9ffdf14c/attachment-0001.html>

From seanmcl at gmail.com  Sun Sep 23 13:31:25 2012
From: seanmcl at gmail.com (Sean McLaughlin)
Date: Sun, 23 Sep 2012 08:31:25 -0400
Subject: scripting with ocaml and core
In-Reply-To: <CACLX4jSSV13bY_J0pswjS=HQ24C+ZawNwEf7hj3dxaVQewgCbw@mail.gmail.com>
References: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com>
 <CACLX4jSSV13bY_J0pswjS=HQ24C+ZawNwEf7hj3dxaVQewgCbw@mail.gmail.com>
Message-ID: <CAO4dZbfToja39pT0s1B+9fW=xZGrSNBdw0OS+v7U1Huy7J5FOQ@mail.gmail.com>

Not loading core_extended is surprisingly not helping much.

3.5s with
3.0s without

It's actually the call to

    open Core.std

that takes most of the time.  Without that, I have

1.0s with no special toplevel
0.7s with the linked toplevel



On Sun, Sep 23, 2012 at 8:10 AM, Yaron Minsky <yminsky at janestreet.com>wrote:

> I don't know how to make this faster either, unfortunately.  How long does
> it take if you don't include core_extended?  We should move Shell from
> core_extended to Core, which should allow one to avoid most of
> Core_extended.
>
> I think this kind of thing should get better when namespaces show up in
> OCaml, so that we can load just parts of Core and still have a coherent set
> of naming conventions.
>
> y
>
>
> On Sun, Sep 23, 2012 at 8:01 AM, Sean McLaughlin <seanmcl at gmail.com>wrote:
>
>> Hi,
>>
>> I'm interested in doing some shell scripting in ocaml with core for some
>> regression testing.  It takes awhile (~4 seconds) for core to load into the
>> toplevel.  (Simple example at end of email.)  I figured I could make a
>> custom toplevel that linked all the code in, but I can't seem to improve it
>> much (~3 seconds).  I suspect I'm calling ocamlmktop incorrectly though,
>> because I can't see what would be taking all that time.  Here's what I used:
>>
>> ocamlfind ocamlmktop -o core-ocaml -thread -package
>> core,core_extended,findlib -linkpkg
>>
>> which I concocted after reading
>>
>>
>> http://projects.camlcity.org/projects/dl/findlib-1.2.1/doc/guide-html/x227.html
>>
>> Has anyone successfully used core with the toplevel and not had this big
>> performance hit?
>>
>> Thanks,
>>
>> Sean
>>
>>
>> (* test.ml *)
>>
>> #directory "/Users/seanmcl/.opam/4.00.0/lib/toplevel";;
>> #directory "/Users/seanmcl/.opam/4.00.0/lib/stublibs";;
>>
>> #use "topfind";;
>> #camlp4o;;
>> #thread;;
>> #require "pcre";;
>> #require "core";;
>> #require "core_extended";;
>>
>> open Core.Std
>>
>> let _ = Printf.printf "Hello, world!\n"
>> ;;
>>
>> exit 0
>> (* end test.ml *)
>>
>> $ time ocaml test.ml
>> Hello, world!
>>
>> real 0m4.254s
>>
>> $ time ./core-ocaml test.ml
>> Hello, world!
>>
>> real 0m3.430s
>>
>>
>>
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120923/e9adeada/attachment-0001.html>

From yminsky at janestreet.com  Sun Sep 23 18:36:44 2012
From: yminsky at janestreet.com (Yaron Minsky)
Date: Sun, 23 Sep 2012 13:36:44 -0400
Subject: scripting with ocaml and core
In-Reply-To: <CAO4dZbfToja39pT0s1B+9fW=xZGrSNBdw0OS+v7U1Huy7J5FOQ@mail.gmail.com>
References: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com>
	<CACLX4jSSV13bY_J0pswjS=HQ24C+ZawNwEf7hj3dxaVQewgCbw@mail.gmail.com>
	<CAO4dZbfToja39pT0s1B+9fW=xZGrSNBdw0OS+v7U1Huy7J5FOQ@mail.gmail.com>
Message-ID: <CACLX4jRHmrxbjqsO7sMge_2ATQ+sxdi4fnZCrut3n9j_rfOKOQ@mail.gmail.com>

I've seen more or less the same thing.  Manipulating the name space seems
to be quite expensive.  To be fair, Core.Std is a pretty massive module.
 Does anyone who knows more about how the toplevel actually works have any
thoughts on what might be going on, and if it can be made more efficient?

y

On Sun, Sep 23, 2012 at 8:31 AM, Sean McLaughlin <seanmcl at gmail.com> wrote:

> Not loading core_extended is surprisingly not helping much.
>
> 3.5s with
> 3.0s without
>
> It's actually the call to
>
>     open Core.std
>
> that takes most of the time.  Without that, I have
>
> 1.0s with no special toplevel
> 0.7s with the linked toplevel
>
>
>
>
> On Sun, Sep 23, 2012 at 8:10 AM, Yaron Minsky <yminsky at janestreet.com>wrote:
>
>> I don't know how to make this faster either, unfortunately.  How long
>> does it take if you don't include core_extended?  We should move Shell from
>> core_extended to Core, which should allow one to avoid most of
>> Core_extended.
>>
>> I think this kind of thing should get better when namespaces show up in
>> OCaml, so that we can load just parts of Core and still have a coherent set
>> of naming conventions.
>>
>> y
>>
>>
>> On Sun, Sep 23, 2012 at 8:01 AM, Sean McLaughlin <seanmcl at gmail.com>wrote:
>>
>>> Hi,
>>>
>>> I'm interested in doing some shell scripting in ocaml with core for some
>>> regression testing.  It takes awhile (~4 seconds) for core to load into the
>>> toplevel.  (Simple example at end of email.)  I figured I could make a
>>> custom toplevel that linked all the code in, but I can't seem to improve it
>>> much (~3 seconds).  I suspect I'm calling ocamlmktop incorrectly though,
>>> because I can't see what would be taking all that time.  Here's what I used:
>>>
>>> ocamlfind ocamlmktop -o core-ocaml -thread -package
>>> core,core_extended,findlib -linkpkg
>>>
>>> which I concocted after reading
>>>
>>>
>>> http://projects.camlcity.org/projects/dl/findlib-1.2.1/doc/guide-html/x227.html
>>>
>>> Has anyone successfully used core with the toplevel and not had this big
>>> performance hit?
>>>
>>> Thanks,
>>>
>>> Sean
>>>
>>>
>>> (* test.ml *)
>>>
>>> #directory "/Users/seanmcl/.opam/4.00.0/lib/toplevel";;
>>> #directory "/Users/seanmcl/.opam/4.00.0/lib/stublibs";;
>>>
>>> #use "topfind";;
>>> #camlp4o;;
>>> #thread;;
>>> #require "pcre";;
>>> #require "core";;
>>> #require "core_extended";;
>>>
>>> open Core.Std
>>>
>>> let _ = Printf.printf "Hello, world!\n"
>>> ;;
>>>
>>> exit 0
>>> (* end test.ml *)
>>>
>>> $ time ocaml test.ml
>>> Hello, world!
>>>
>>> real 0m4.254s
>>>
>>> $ time ./core-ocaml test.ml
>>> Hello, world!
>>>
>>> real 0m3.430s
>>>
>>>
>>>
>>>
>>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120923/f4b9dd01/attachment-0001.html>

From anil at recoil.org  Mon Sep 24 02:57:57 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Sun, 23 Sep 2012 21:57:57 -0400
Subject: scripting with ocaml and core
In-Reply-To: <CACLX4jRHmrxbjqsO7sMge_2ATQ+sxdi4fnZCrut3n9j_rfOKOQ@mail.gmail.com>
References: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com> <CACLX4jSSV13bY_J0pswjS=HQ24C+ZawNwEf7hj3dxaVQewgCbw@mail.gmail.com> <CAO4dZbfToja39pT0s1B+9fW=xZGrSNBdw0OS+v7U1Huy7J5FOQ@mail.gmail.com> <CACLX4jRHmrxbjqsO7sMge_2ATQ+sxdi4fnZCrut3n9j_rfOKOQ@mail.gmail.com>
Message-ID: <A6CD9DEE-D02A-472F-94C0-E1CB6EBBB999@recoil.org>

Switching to the native toplevel would no doubt help a lot. 

I took a quick look at ocamlnat in 4.00.0, and it has bitrotted slightly.  Attached patch (+make ocamlnat) gets ocaml-trunk/ocamlnat building again, but then I ran into a slew of OPAM bugs and the fact that most packages don't install .cmxs files.  Patch against ocaml-trunk attached anyway, and I'll submit it upstream when cleaned up; it'll be nice to have ocamlnat working out of OPAM soon as a compiler switch.

Jeremie, have you ever tried utop as native code?


-anil

On 23 Sep 2012, at 13:36, Yaron Minsky <yminsky at janestreet.com> wrote:

> I've seen more or less the same thing.  Manipulating the name space seems to be quite expensive.  To be fair, Core.Std is a pretty massive module.  Does anyone who knows more about how the toplevel actually works have any thoughts on what might be going on, and if it can be made more efficient?
> 
> y
> 
> On Sun, Sep 23, 2012 at 8:31 AM, Sean McLaughlin <seanmcl at gmail.com> wrote:
> Not loading core_extended is surprisingly not helping much.  
> 
> 3.5s with 
> 3.0s without
> 
> It's actually the call to 
> 
>     open Core.std
> 
> that takes most of the time.  Without that, I have
> 
> 1.0s with no special toplevel
> 0.7s with the linked toplevel
> 
> 
> 
> 
> On Sun, Sep 23, 2012 at 8:10 AM, Yaron Minsky <yminsky at janestreet.com> wrote:
> I don't know how to make this faster either, unfortunately.  How long does it take if you don't include core_extended?  We should move Shell from core_extended to Core, which should allow one to avoid most of Core_extended.
> 
> I think this kind of thing should get better when namespaces show up in OCaml, so that we can load just parts of Core and still have a coherent set of naming conventions.
> 
> y
> 
> 
> On Sun, Sep 23, 2012 at 8:01 AM, Sean McLaughlin <seanmcl at gmail.com> wrote:
> Hi,
> 
> I'm interested in doing some shell scripting in ocaml with core for some regression testing.  It takes awhile (~4 seconds) for core to load into the toplevel.  (Simple example at end of email.)  I figured I could make a custom toplevel that linked all the code in, but I can't seem to improve it much (~3 seconds).  I suspect I'm calling ocamlmktop incorrectly though, because I can't see what would be taking all that time.  Here's what I used:
> 
> ocamlfind ocamlmktop -o core-ocaml -thread -package core,core_extended,findlib -linkpkg
> 
> which I concocted after reading
> 
> http://projects.camlcity.org/projects/dl/findlib-1.2.1/doc/guide-html/x227.html
> 
> Has anyone successfully used core with the toplevel and not had this big performance hit?
> 
> Thanks,
> 
> Sean
> 
> 
> (* test.ml *)
> 
> #directory "/Users/seanmcl/.opam/4.00.0/lib/toplevel";;
> #directory "/Users/seanmcl/.opam/4.00.0/lib/stublibs";;
> 
> #use "topfind";;
> #camlp4o;;
> #thread;;
> #require "pcre";;
> #require "core";;
> #require "core_extended";;
> 
> open Core.Std
> 
> let _ = Printf.printf "Hello, world!\n"
> ;;
> 
> exit 0
> (* end test.ml *)
> 
> $ time ocaml test.ml
> Hello, world!
> 
> real	0m4.254s
> 
> $ time ./core-ocaml test.ml
> Hello, world!
> 
> real	0m3.430s
> 
> 
> 
> 
> 
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120923/a48eedf2/attachment-0002.html>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120923/a48eedf2/attachment-0003.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: ocamlnat-trunk.diff
Type: application/octet-stream
Size: 5680 bytes
Desc: not available
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120923/a48eedf2/attachment-0001.obj>

From jeremie at dimino.org  Mon Sep 24 07:26:06 2012
From: jeremie at dimino.org (=?UTF-8?B?SsOpcsOpbWll?= Dimino)
Date: Mon, 24 Sep 2012 08:26:06 +0200
Subject: scripting with ocaml and core
In-Reply-To: <A6CD9DEE-D02A-472F-94C0-E1CB6EBBB999@recoil.org>
References: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com>
	<CACLX4jSSV13bY_J0pswjS=HQ24C+ZawNwEf7hj3dxaVQewgCbw@mail.gmail.com>
	<CAO4dZbfToja39pT0s1B+9fW=xZGrSNBdw0OS+v7U1Huy7J5FOQ@mail.gmail.com>
	<CACLX4jRHmrxbjqsO7sMge_2ATQ+sxdi4fnZCrut3n9j_rfOKOQ@mail.gmail.com>
	<A6CD9DEE-D02A-472F-94C0-E1CB6EBBB999@recoil.org>
Message-ID: <20120924082606.133392d8@locris.home>

Le Sun, 23 Sep 2012 21:57:57 -0400,
Anil Madhavapeddy <anil at recoil.org> a ?crit :

> Jeremie, have you ever tried utop as native code?

No, but it should work with the attached patch and the latest version
of findlib.

-- 
J?r?mie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: utop-nat.diff
Type: text/x-patch
Size: 2417 bytes
Desc: not available
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120924/313c6976/attachment-0001.bin>

From jeremie at dimino.org  Mon Sep 24 08:51:21 2012
From: jeremie at dimino.org (=?UTF-8?B?SsOpcsOpbWll?= Dimino)
Date: Mon, 24 Sep 2012 09:51:21 +0200
Subject: scripting with ocaml and core
In-Reply-To: <CACLX4jRHmrxbjqsO7sMge_2ATQ+sxdi4fnZCrut3n9j_rfOKOQ@mail.gmail.com>
References: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com>
	<CACLX4jSSV13bY_J0pswjS=HQ24C+ZawNwEf7hj3dxaVQewgCbw@mail.gmail.com>
	<CAO4dZbfToja39pT0s1B+9fW=xZGrSNBdw0OS+v7U1Huy7J5FOQ@mail.gmail.com>
	<CACLX4jRHmrxbjqsO7sMge_2ATQ+sxdi4fnZCrut3n9j_rfOKOQ@mail.gmail.com>
Message-ID: <20120924095121.1649cfcc@caladan.esterel-technologies.com>


Le Sun, 23 Sep 2012 13:36:44 -0400,
Yaron Minsky <yminsky at janestreet.com> a ?crit :

> I've seen more or less the same thing.  Manipulating the name space
> seems to be quite expensive.  To be fair, Core.Std is a pretty
> massive module. Does anyone who knows more about how the toplevel
> actually works have any thoughts on what might be going on, and if it
> can be made more efficient?

I think it is opening the module in the environment that is slow
(Typemod.type_open). It is not really related to the toplevel. On my
computer, compiling a file containing only "open Core.Std" takes the
same amount of time as doing it in the toplevel. Compilation using
ocamlc.opt instead of ocamlc is only 2 times faster:

  $ touch empty.ml
  $ time ocaml -I /home/dim/findlib/core empty.ml

  real	0m0.009s
  user	0m0.008s
  sys	0m0.000s
  $ time ocamlc -I /home/dim/findlib/core -c empty.ml

  real	0m0.007s
  user	0m0.000s
  sys	0m0.004s
  $ time ocamlc.opt -I /home/dim/findlib/core -c empty.ml

  real	0m0.003s
  user	0m0.000s
  sys	0m0.000s
  $ echo "open Core.Std" > open_core_std.ml
  $ time ocaml -I /home/dim/findlib/core open_core_std.ml

  real	0m0.384s
  user	0m0.352s
  sys	0m0.028s
  $ time ocamlc -I /home/dim/findlib/core -c open_core_std.ml

  real	0m0.400s
  user	0m0.372s
  sys	0m0.008s
  $ time ocamlc.opt -I /home/dim/findlib/core -c open_core_std.ml

  real	0m0.190s
  user	0m0.172s
  sys	0m0.016s

-- 
J?r?mie


From dhouse at janestreet.com  Mon Sep 24 09:51:34 2012
From: dhouse at janestreet.com (David House)
Date: Mon, 24 Sep 2012 09:51:34 +0100
Subject: scripting with ocaml and core
In-Reply-To: <20120924095121.1649cfcc@caladan.esterel-technologies.com>
References: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com>
	<CACLX4jSSV13bY_J0pswjS=HQ24C+ZawNwEf7hj3dxaVQewgCbw@mail.gmail.com>
	<CAO4dZbfToja39pT0s1B+9fW=xZGrSNBdw0OS+v7U1Huy7J5FOQ@mail.gmail.com>
	<CACLX4jRHmrxbjqsO7sMge_2ATQ+sxdi4fnZCrut3n9j_rfOKOQ@mail.gmail.com>
	<20120924095121.1649cfcc@caladan.esterel-technologies.com>
Message-ID: <CAK=fH+j+CMCO1zsj7Wpj6gMO8S9=tCa+0gaqvO1kS_FL7mrd8A@mail.gmail.com>


Well, hang on. The last example took 0.2s. This seems a lot more
acceptable than the times reported ~2.5s by Sean.

Is your computer an order of magnitude faster than Sean's? What else
is going on here?

On Mon, Sep 24, 2012 at 8:51 AM, J?r?mie Dimino <jeremie at dimino.org> wrote:
> Le Sun, 23 Sep 2012 13:36:44 -0400,
> Yaron Minsky <yminsky at janestreet.com> a ?crit :
>
>> I've seen more or less the same thing.  Manipulating the name space
>> seems to be quite expensive.  To be fair, Core.Std is a pretty
>> massive module. Does anyone who knows more about how the toplevel
>> actually works have any thoughts on what might be going on, and if it
>> can be made more efficient?
>
> I think it is opening the module in the environment that is slow
> (Typemod.type_open). It is not really related to the toplevel. On my
> computer, compiling a file containing only "open Core.Std" takes the
> same amount of time as doing it in the toplevel. Compilation using
> ocamlc.opt instead of ocamlc is only 2 times faster:
>
>   $ touch empty.ml
>   $ time ocaml -I /home/dim/findlib/core empty.ml
>
>   real  0m0.009s
>   user  0m0.008s
>   sys   0m0.000s
>   $ time ocamlc -I /home/dim/findlib/core -c empty.ml
>
>   real  0m0.007s
>   user  0m0.000s
>   sys   0m0.004s
>   $ time ocamlc.opt -I /home/dim/findlib/core -c empty.ml
>
>   real  0m0.003s
>   user  0m0.000s
>   sys   0m0.000s
>   $ echo "open Core.Std" > open_core_std.ml
>   $ time ocaml -I /home/dim/findlib/core open_core_std.ml
>
>   real  0m0.384s
>   user  0m0.352s
>   sys   0m0.028s
>   $ time ocamlc -I /home/dim/findlib/core -c open_core_std.ml
>
>   real  0m0.400s
>   user  0m0.372s
>   sys   0m0.008s
>   $ time ocamlc.opt -I /home/dim/findlib/core -c open_core_std.ml
>
>   real  0m0.190s
>   user  0m0.172s
>   sys   0m0.016s
>
> --
> J?r?mie


From francois.berenger.working at gmail.com  Mon Sep 24 02:06:49 2012
From: francois.berenger.working at gmail.com (Francois Berenger)
Date: Mon, 24 Sep 2012 10:06:49 +0900
Subject: scripting with ocaml and core
In-Reply-To: <CACLX4jRHmrxbjqsO7sMge_2ATQ+sxdi4fnZCrut3n9j_rfOKOQ@mail.gmail.com>
References: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com>
	<CACLX4jSSV13bY_J0pswjS=HQ24C+ZawNwEf7hj3dxaVQewgCbw@mail.gmail.com>
	<CAO4dZbfToja39pT0s1B+9fW=xZGrSNBdw0OS+v7U1Huy7J5FOQ@mail.gmail.com>
	<CACLX4jRHmrxbjqsO7sMge_2ATQ+sxdi4fnZCrut3n9j_rfOKOQ@mail.gmail.com>
Message-ID: <CAMQaOgP1rp-GDDX==CL5j3mxjEoO+SroYZthjk+nKV+m+rdCSA@mail.gmail.com>


On Mon, Sep 24, 2012 at 2:36 AM, Yaron Minsky <yminsky at janestreet.com> wrote:
> I've seen more or less the same thing.  Manipulating the name space seems to
> be quite expensive.  To be fair, Core.Std is a pretty massive module.  Does
> anyone who knows more about how the toplevel actually works have any
> thoughts on what might be going on, and if it can be made more efficient?

How about using ocamlscript?

Once the .exe is compiled, I guess there is no more loading time.

> y
>
>
> On Sun, Sep 23, 2012 at 8:31 AM, Sean McLaughlin <seanmcl at gmail.com> wrote:
>>
>> Not loading core_extended is surprisingly not helping much.
>>
>> 3.5s with
>> 3.0s without
>>
>> It's actually the call to
>>
>>     open Core.std
>>
>> that takes most of the time.  Without that, I have
>>
>> 1.0s with no special toplevel
>> 0.7s with the linked toplevel
>>
>>
>>
>>
>> On Sun, Sep 23, 2012 at 8:10 AM, Yaron Minsky <yminsky at janestreet.com>
>> wrote:
>>>
>>> I don't know how to make this faster either, unfortunately.  How long
>>> does it take if you don't include core_extended?  We should move Shell from
>>> core_extended to Core, which should allow one to avoid most of
>>> Core_extended.
>>>
>>> I think this kind of thing should get better when namespaces show up in
>>> OCaml, so that we can load just parts of Core and still have a coherent set
>>> of naming conventions.
>>>
>>> y
>>>
>>>
>>> On Sun, Sep 23, 2012 at 8:01 AM, Sean McLaughlin <seanmcl at gmail.com>
>>> wrote:
>>>>
>>>> Hi,
>>>>
>>>> I'm interested in doing some shell scripting in ocaml with core for some
>>>> regression testing.  It takes awhile (~4 seconds) for core to load into the
>>>> toplevel.  (Simple example at end of email.)  I figured I could make a
>>>> custom toplevel that linked all the code in, but I can't seem to improve it
>>>> much (~3 seconds).  I suspect I'm calling ocamlmktop incorrectly though,
>>>> because I can't see what would be taking all that time.  Here's what I used:
>>>>
>>>> ocamlfind ocamlmktop -o core-ocaml -thread -package
>>>> core,core_extended,findlib -linkpkg
>>>>
>>>> which I concocted after reading
>>>>
>>>>
>>>> http://projects.camlcity.org/projects/dl/findlib-1.2.1/doc/guide-html/x227.html
>>>>
>>>> Has anyone successfully used core with the toplevel and not had this big
>>>> performance hit?
>>>>
>>>> Thanks,
>>>>
>>>> Sean
>>>>
>>>>
>>>> (* test.ml *)
>>>>
>>>> #directory "/Users/seanmcl/.opam/4.00.0/lib/toplevel";;
>>>> #directory "/Users/seanmcl/.opam/4.00.0/lib/stublibs";;
>>>>
>>>> #use "topfind";;
>>>> #camlp4o;;
>>>> #thread;;
>>>> #require "pcre";;
>>>> #require "core";;
>>>> #require "core_extended";;
>>>>
>>>> open Core.Std
>>>>
>>>> let _ = Printf.printf "Hello, world!\n"
>>>> ;;
>>>>
>>>> exit 0
>>>> (* end test.ml *)
>>>>
>>>> $ time ocaml test.ml
>>>> Hello, world!
>>>>
>>>> real 0m4.254s
>>>>
>>>> $ time ./core-ocaml test.ml
>>>> Hello, world!
>>>>
>>>> real 0m3.430s
>>>>
>>>>
>>>>
>>>>
>>>
>>
>


From sylvain at le-gall.net  Mon Sep 24 10:03:47 2012
From: sylvain at le-gall.net (Sylvain Le Gall)
Date: Mon, 24 Sep 2012 11:03:47 +0200
Subject: scripting with ocaml and core
In-Reply-To: <CAK=fH+j+CMCO1zsj7Wpj6gMO8S9=tCa+0gaqvO1kS_FL7mrd8A@mail.gmail.com>
References: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com>
	<CACLX4jSSV13bY_J0pswjS=HQ24C+ZawNwEf7hj3dxaVQewgCbw@mail.gmail.com>
	<CAO4dZbfToja39pT0s1B+9fW=xZGrSNBdw0OS+v7U1Huy7J5FOQ@mail.gmail.com>
	<CACLX4jRHmrxbjqsO7sMge_2ATQ+sxdi4fnZCrut3n9j_rfOKOQ@mail.gmail.com>
	<20120924095121.1649cfcc@caladan.esterel-technologies.com>
	<CAK=fH+j+CMCO1zsj7Wpj6gMO8S9=tCa+0gaqvO1kS_FL7mrd8A@mail.gmail.com>
Message-ID: <CAOCAUGM-GwQNLOvXk+x2zdkDgZF_mmcatoEKpY70Hm-qdWOOOA@mail.gmail.com>


+Gerd

2012/9/24 David House <dhouse at janestreet.com>:
> Well, hang on. The last example took 0.2s. This seems a lot more
> acceptable than the times reported ~2.5s by Sean.
>
> Is your computer an order of magnitude faster than Sean's? What else
> is going on here?

Maybe it is related to findlib ?

I had a look at findlib code and I think we can do some cleanup to
gain a significant boost (which will in turn boost general compilation
as well). Maybe we can have a "optimization day" on findlib with Gerd
?

>
> On Mon, Sep 24, 2012 at 8:51 AM, J?r?mie Dimino <jeremie at dimino.org> wrote:
>> Le Sun, 23 Sep 2012 13:36:44 -0400,
>> Yaron Minsky <yminsky at janestreet.com> a ?crit :
>>
>>> I've seen more or less the same thing.  Manipulating the name space
>>> seems to be quite expensive.  To be fair, Core.Std is a pretty
>>> massive module. Does anyone who knows more about how the toplevel
>>> actually works have any thoughts on what might be going on, and if it
>>> can be made more efficient?
>>
>> I think it is opening the module in the environment that is slow
>> (Typemod.type_open). It is not really related to the toplevel. On my
>> computer, compiling a file containing only "open Core.Std" takes the
>> same amount of time as doing it in the toplevel. Compilation using
>> ocamlc.opt instead of ocamlc is only 2 times faster:
>>
>>   $ touch empty.ml
>>   $ time ocaml -I /home/dim/findlib/core empty.ml
>>
>>   real  0m0.009s
>>   user  0m0.008s
>>   sys   0m0.000s
>>   $ time ocamlc -I /home/dim/findlib/core -c empty.ml
>>
>>   real  0m0.007s
>>   user  0m0.000s
>>   sys   0m0.004s
>>   $ time ocamlc.opt -I /home/dim/findlib/core -c empty.ml
>>
>>   real  0m0.003s
>>   user  0m0.000s
>>   sys   0m0.000s
>>   $ echo "open Core.Std" > open_core_std.ml
>>   $ time ocaml -I /home/dim/findlib/core open_core_std.ml
>>
>>   real  0m0.384s
>>   user  0m0.352s
>>   sys   0m0.028s
>>   $ time ocamlc -I /home/dim/findlib/core -c open_core_std.ml
>>
>>   real  0m0.400s
>>   user  0m0.372s
>>   sys   0m0.008s
>>   $ time ocamlc.opt -I /home/dim/findlib/core -c open_core_std.ml
>>
>>   real  0m0.190s
>>   user  0m0.172s
>>   sys   0m0.016s
>>
>> --
>> J?r?mie


From sylvain at le-gall.net  Mon Sep 24 10:05:32 2012
From: sylvain at le-gall.net (Sylvain Le Gall)
Date: Mon, 24 Sep 2012 11:05:32 +0200
Subject: scripting with ocaml and core
In-Reply-To: <A6CD9DEE-D02A-472F-94C0-E1CB6EBBB999@recoil.org>
References: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com>
	<CACLX4jSSV13bY_J0pswjS=HQ24C+ZawNwEf7hj3dxaVQewgCbw@mail.gmail.com>
	<CAO4dZbfToja39pT0s1B+9fW=xZGrSNBdw0OS+v7U1Huy7J5FOQ@mail.gmail.com>
	<CACLX4jRHmrxbjqsO7sMge_2ATQ+sxdi4fnZCrut3n9j_rfOKOQ@mail.gmail.com>
	<A6CD9DEE-D02A-472F-94C0-E1CB6EBBB999@recoil.org>
Message-ID: <CAOCAUGMg-Fz2aCQYQe=iN1uiu83qK_=y1RF-ueFj41rBaA1DqA@mail.gmail.com>


Hi,

2012/9/24 Anil Madhavapeddy <anil at recoil.org>:
> Switching to the native toplevel would no doubt help a lot.
>
> I took a quick look at ocamlnat in 4.00.0, and it has bitrotted slightly.
> Attached patch (+make ocamlnat) gets ocaml-trunk/ocamlnat building again,
> but then I ran into a slew of OPAM bugs and the fact that most packages
> don't install .cmxs files.

Note that by default packages using OASIS 0.3.0 with the default
ocamlbuild rules will generate .cmxs!

>
> -anil
>
> On 23 Sep 2012, at 13:36, Yaron Minsky <yminsky at janestreet.com> wrote:
>
> I've seen more or less the same thing.  Manipulating the name space seems to
> be quite expensive.  To be fair, Core.Std is a pretty massive module.  Does
> anyone who knows more about how the toplevel actually works have any
> thoughts on what might be going on, and if it can be made more efficient?
>
> y
>
> On Sun, Sep 23, 2012 at 8:31 AM, Sean McLaughlin <seanmcl at gmail.com> wrote:
>>
>> Not loading core_extended is surprisingly not helping much.
>>
>> 3.5s with
>> 3.0s without
>>
>> It's actually the call to
>>
>>     open Core.std
>>
>> that takes most of the time.  Without that, I have
>>
>> 1.0s with no special toplevel
>> 0.7s with the linked toplevel
>>
>>
>>
>>
>> On Sun, Sep 23, 2012 at 8:10 AM, Yaron Minsky <yminsky at janestreet.com>
>> wrote:
>>>
>>> I don't know how to make this faster either, unfortunately.  How long
>>> does it take if you don't include core_extended?  We should move Shell from
>>> core_extended to Core, which should allow one to avoid most of
>>> Core_extended.
>>>
>>> I think this kind of thing should get better when namespaces show up in
>>> OCaml, so that we can load just parts of Core and still have a coherent set
>>> of naming conventions.
>>>
>>> y
>>>
>>>
>>> On Sun, Sep 23, 2012 at 8:01 AM, Sean McLaughlin <seanmcl at gmail.com>
>>> wrote:
>>>>
>>>> Hi,
>>>>
>>>> I'm interested in doing some shell scripting in ocaml with core for some
>>>> regression testing.  It takes awhile (~4 seconds) for core to load into the
>>>> toplevel.  (Simple example at end of email.)  I figured I could make a
>>>> custom toplevel that linked all the code in, but I can't seem to improve it
>>>> much (~3 seconds).  I suspect I'm calling ocamlmktop incorrectly though,
>>>> because I can't see what would be taking all that time.  Here's what I used:
>>>>
>>>> ocamlfind ocamlmktop -o core-ocaml -thread -package
>>>> core,core_extended,findlib -linkpkg
>>>>
>>>> which I concocted after reading
>>>>
>>>>
>>>> http://projects.camlcity.org/projects/dl/findlib-1.2.1/doc/guide-html/x227.html
>>>>
>>>> Has anyone successfully used core with the toplevel and not had this big
>>>> performance hit?
>>>>
>>>> Thanks,
>>>>
>>>> Sean
>>>>
>>>>
>>>> (* test.ml *)
>>>>
>>>> #directory "/Users/seanmcl/.opam/4.00.0/lib/toplevel";;
>>>> #directory "/Users/seanmcl/.opam/4.00.0/lib/stublibs";;
>>>>
>>>> #use "topfind";;
>>>> #camlp4o;;
>>>> #thread;;
>>>> #require "pcre";;
>>>> #require "core";;
>>>> #require "core_extended";;
>>>>
>>>> open Core.Std
>>>>
>>>> let _ = Printf.printf "Hello, world!\n"
>>>> ;;
>>>>
>>>> exit 0
>>>> (* end test.ml *)
>>>>
>>>> $ time ocaml test.ml
>>>> Hello, world!
>>>>
>>>> real 0m4.254s
>>>>
>>>> $ time ./core-ocaml test.ml
>>>> Hello, world!
>>>>
>>>> real 0m3.430s
>>>>
>>>>
>>>>
>>>>
>>>
>>
>
>
>


From jeremie at dimino.org  Mon Sep 24 10:25:21 2012
From: jeremie at dimino.org (=?UTF-8?B?SsOpcsOpbWll?= Dimino)
Date: Mon, 24 Sep 2012 11:25:21 +0200
Subject: scripting with ocaml and core
In-Reply-To: <CAK=fH+j+CMCO1zsj7Wpj6gMO8S9=tCa+0gaqvO1kS_FL7mrd8A@mail.gmail.com>
References: <CAO4dZbc2vtihEW8ViBU1KPT3SvK-Rh=UP5C4FErY_Ye00meG8Q@mail.gmail.com>
	<CACLX4jSSV13bY_J0pswjS=HQ24C+ZawNwEf7hj3dxaVQewgCbw@mail.gmail.com>
	<CAO4dZbfToja39pT0s1B+9fW=xZGrSNBdw0OS+v7U1Huy7J5FOQ@mail.gmail.com>
	<CACLX4jRHmrxbjqsO7sMge_2ATQ+sxdi4fnZCrut3n9j_rfOKOQ@mail.gmail.com>
	<20120924095121.1649cfcc@caladan.esterel-technologies.com>
	<CAK=fH+j+CMCO1zsj7Wpj6gMO8S9=tCa+0gaqvO1kS_FL7mrd8A@mail.gmail.com>
Message-ID: <20120924112521.2fce03a6@caladan.esterel-technologies.com>


Le Mon, 24 Sep 2012 09:51:34 +0100,
David House <dhouse at janestreet.com> a ?crit :

> Is your computer an order of magnitude faster than Sean's?

Maybe, mine is a Core i5-2400 desktop computer. Here is what I get
with Sean's test.ml file:

$ time ocaml test.ml
Hello, world!

real	0m0.507s
user	0m0.484s
sys	0m0.020s

Also i did the test with ocaml 3.12.1, not with 4.00.

-- 
J?r?mie


From info at gerd-stolpmann.de  Mon Sep 24 12:12:46 2012
From: info at gerd-stolpmann.de (Gerd Stolpmann)
Date: Mon, 24 Sep 2012 13:12:46 +0200
Subject: AW: scripting with ocaml and core
In-Reply-To: <CAOCAUGM-GwQNLOvXk+x2zdkDgZF_mmcatoEKpY70Hm-qdWOOOA@mail.gmail.com>
	(from sylvain@le-gall.net on Mon Sep 24 11:03:47 2012)
Message-ID: <1348485166.11634.1@samsung>


Am 24.09.2012 11:03:47 schrieb(en) Sylvain Le Gall:
> +Gerd
> 
> 2012/9/24 David House <dhouse at janestreet.com>:
> > Well, hang on. The last example took 0.2s. This seems a lot more
> > acceptable than the times reported ~2.5s by Sean.
> >
> > Is your computer an order of magnitude faster than Sean's? What else
> > is going on here?
> 
> Maybe it is related to findlib ?
> 
> I had a look at findlib code and I think we can do some cleanup to
> gain a significant boost (which will in turn boost general compilation
> as well). Maybe we can have a "optimization day" on findlib with Gerd
> ?

I don't think you can do here much. All algorithms in findlib are  
linear (esp. the topological sorting of the packages), and I've never  
seen any bigger problems with the implementation, even for really large  
projects.

My guess about the long opening time: It's loading all of Core, not  
only Core.Std. It's a downside of packing modules.

Gerd

> >
> > On Mon, Sep 24, 2012 at 8:51 AM, J?r?mie Dimino  
> <jeremie at dimino.org> wrote:
> >> Le Sun, 23 Sep 2012 13:36:44 -0400,
> >> Yaron Minsky <yminsky at janestreet.com> a ?crit :
> >>
> >>> I've seen more or less the same thing.  Manipulating the name  
> space
> >>> seems to be quite expensive.  To be fair, Core.Std is a pretty
> >>> massive module. Does anyone who knows more about how the toplevel
> >>> actually works have any thoughts on what might be going on, and  
> if it
> >>> can be made more efficient?
> >>
> >> I think it is opening the module in the environment that is slow
> >> (Typemod.type_open). It is not really related to the toplevel. On  
> my
> >> computer, compiling a file containing only "open Core.Std" takes  
> the
> >> same amount of time as doing it in the toplevel. Compilation using
> >> ocamlc.opt instead of ocamlc is only 2 times faster:
> >>
> >>   $ touch empty.ml
> >>   $ time ocaml -I /home/dim/findlib/core empty.ml
> >>
> >>   real  0m0.009s
> >>   user  0m0.008s
> >>   sys   0m0.000s
> >>   $ time ocamlc -I /home/dim/findlib/core -c empty.ml
> >>
> >>   real  0m0.007s
> >>   user  0m0.000s
> >>   sys   0m0.004s
> >>   $ time ocamlc.opt -I /home/dim/findlib/core -c empty.ml
> >>
> >>   real  0m0.003s
> >>   user  0m0.000s
> >>   sys   0m0.000s
> >>   $ echo "open Core.Std" > open_core_std.ml
> >>   $ time ocaml -I /home/dim/findlib/core open_core_std.ml
> >>
> >>   real  0m0.384s
> >>   user  0m0.352s
> >>   sys   0m0.028s
> >>   $ time ocamlc -I /home/dim/findlib/core -c open_core_std.ml
> >>
> >>   real  0m0.400s
> >>   user  0m0.372s
> >>   sys   0m0.008s
> >>   $ time ocamlc.opt -I /home/dim/findlib/core -c open_core_std.ml
> >>
> >>   real  0m0.190s
> >>   user  0m0.172s
> >>   sys   0m0.016s
> >>
> >> --
> >> J?r?mie
> 
> 



-- 
------------------------------------------------------------
Gerd Stolpmann, Darmstadt, Germany    gerd at gerd-stolpmann.de
Creator of GODI and camlcity.org.
Contact details:        http://www.camlcity.org/contact.html
Company homepage:       http://www.gerd-stolpmann.de
------------------------------------------------------------

From nathan.mishralinger at gmail.com  Sat Sep 29 04:27:26 2012
From: nathan.mishralinger at gmail.com (Nathan Mishra Linger)
Date: Fri, 28 Sep 2012 23:27:26 -0400
Subject: problem with `opam init`
Message-ID: <CAJO0BX0B8ENnZWxiXWXih-QY5K7vRwc=v7b+aEjBM25uqG-y3w@mail.gmail.com>


I tried to get opam running on my Ubuntu laptop.  After downloading
the 0.6.0 tarball from the OcamlPro tutorial page
(http://opam.ocamlpro.com/doc/Tutorial.html) and building and
installing it without incident, my first opam command fell over:

nathanml at panther:~$ opam init
File /home/nathanml/.opam/opam/benchmark.1.1.opam: Bad format!
Expecting list or list-list, got list({option(list({string("rm")
string("setup.ml")}),{string("%{ocaml-version}%") symbol(=)
string("4.00.0")}) option(list({string("oasis")
string("setup")}),{string("%{ocaml-version}%") symbol(=)
string("4.00.0")}) list({string("ocaml") string("setup.ml")
string("-configure") string("--prefix") string("%{prefix}%")})
list({string("ocaml") string("setup.ml") string("-build")})
list({string("ocaml") string("setup.ml") string("-install")})})
  'opam init' failed

I can't find the file mentioned here after this command runs (in fact
I still don't even have a $HOME/.opam), so I'm not sure how to get
past this problem.


From anil at recoil.org  Sat Sep 29 07:56:05 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Fri, 28 Sep 2012 23:56:05 -0700
Subject: problem with `opam init`
In-Reply-To: <CAJO0BX0B8ENnZWxiXWXih-QY5K7vRwc=v7b+aEjBM25uqG-y3w@mail.gmail.com>
References: <CAJO0BX0B8ENnZWxiXWXih-QY5K7vRwc=v7b+aEjBM25uqG-y3w@mail.gmail.com>
Message-ID: <A77D3D49-83A4-4A01-B40F-098A4668EC5C@recoil.org>


Could you try it with a more recent version, such as 0.7.2?
https://github.com/OCamlPro/opam/tarball/0.7.2

I suspect the repository version may have moved beyond 0.6.0 as things are
rapidly being fixed (or it could be something else).  Hopefully this aspect
will stabilise soon, before it goes into a public beta.

-anil

On 28 Sep 2012, at 20:27, Nathan Mishra Linger <nathan.mishralinger at gmail.com> wrote:

> I tried to get opam running on my Ubuntu laptop.  After downloading
> the 0.6.0 tarball from the OcamlPro tutorial page
> (http://opam.ocamlpro.com/doc/Tutorial.html) and building and
> installing it without incident, my first opam command fell over:
> 
> nathanml at panther:~$ opam init
> File /home/nathanml/.opam/opam/benchmark.1.1.opam: Bad format!
> Expecting list or list-list, got list({option(list({string("rm")
> string("setup.ml")}),{string("%{ocaml-version}%") symbol(=)
> string("4.00.0")}) option(list({string("oasis")
> string("setup")}),{string("%{ocaml-version}%") symbol(=)
> string("4.00.0")}) list({string("ocaml") string("setup.ml")
> string("-configure") string("--prefix") string("%{prefix}%")})
> list({string("ocaml") string("setup.ml") string("-build")})
> list({string("ocaml") string("setup.ml") string("-install")})})
>  'opam init' failed
> 
> I can't find the file mentioned here after this command runs (in fact
> I still don't even have a $HOME/.opam), so I'm not sure how to get
> past this problem.
> 



From anil at recoil.org  Sun Sep 30 05:32:54 2012
From: anil at recoil.org (Anil Madhavapeddy)
Date: Sat, 29 Sep 2012 21:32:54 -0700
Subject: type_conv-108.07 breakage
Message-ID: <67F9CDEC-3CCB-49ED-9C0A-E0F23D0B3C10@recoil.org>


I've been porting some of our syntax extensions to the new type_conv (from 108.00.02 -> 108.07), and the Dyntype extension is broken because of some extra bits that are generated:

For a simple:

# type t = int with value;;

This diff happens between the output of 108.00.02 and 108.07.00:

--- simple-108.00.02.ml	2012-09-29 21:29:42.000000000 -0700
+++ _build/simple_value_test.ml	2012-09-29 21:30:04.000000000 -0700
@@ -22,6 +22,12 @@
           then Dyntype.Value.Rec ((("t", __id__), __x__))
           else Dyntype.Value.Ext ((("t", (gen_t_id ~id_seed __x3__)), __x__))
   
+let _ = t
+and _ = t
+and _ = t
+and _ = ref
+and _ = value_of_t
+  
 let (t_of_value : Dyntype.Value.t -> t) =
   let module Deps =
     struct
@@ -73,4 +79,8 @@
              raise (Deps.Runtime_error (("Var/Rec/Ext", __x__))))
     in t_of_value_aux { Deps.t = []; }
   
+let _ = t
+and _ = t
+and _ = t_of_value
+  

These are unbound, and so compilation breaks... what are they for?

-anil

From nathan.mishralinger at gmail.com  Sun Sep 30 03:19:53 2012
From: nathan.mishralinger at gmail.com (Nathan Mishra Linger)
Date: Sat, 29 Sep 2012 22:19:53 -0400
Subject: problem with `opam init`
In-Reply-To: <A77D3D49-83A4-4A01-B40F-098A4668EC5C@recoil.org>
References: <CAJO0BX0B8ENnZWxiXWXih-QY5K7vRwc=v7b+aEjBM25uqG-y3w@mail.gmail.com>
	<A77D3D49-83A4-4A01-B40F-098A4668EC5C@recoil.org>
Message-ID: <CAJO0BX0QRiiZmuY_ehMh7wYFJcL0S6w+TwHHWw4LDVbu_GB-+Q@mail.gmail.com>


Thanks for this suggestion.  It worked! :)

Now I've advanced to being stuck on
https://bitbucket.org/yminsky/ocaml-core/issue/3/exception-failure-could-not-configure-core
instead. :(

On Sat, Sep 29, 2012 at 2:56 AM, Anil Madhavapeddy <anil at recoil.org> wrote:
> Could you try it with a more recent version, such as 0.7.2?
> https://github.com/OCamlPro/opam/tarball/0.7.2
>
> I suspect the repository version may have moved beyond 0.6.0 as things are
> rapidly being fixed (or it could be something else).  Hopefully this aspect
> will stabilise soon, before it goes into a public beta.
>
> -anil
>
> On 28 Sep 2012, at 20:27, Nathan Mishra Linger <nathan.mishralinger at gmail.com> wrote:
>
>> I tried to get opam running on my Ubuntu laptop.  After downloading
>> the 0.6.0 tarball from the OcamlPro tutorial page
>> (http://opam.ocamlpro.com/doc/Tutorial.html) and building and
>> installing it without incident, my first opam command fell over:
>>
>> nathanml at panther:~$ opam init
>> File /home/nathanml/.opam/opam/benchmark.1.1.opam: Bad format!
>> Expecting list or list-list, got list({option(list({string("rm")
>> string("setup.ml")}),{string("%{ocaml-version}%") symbol(=)
>> string("4.00.0")}) option(list({string("oasis")
>> string("setup")}),{string("%{ocaml-version}%") symbol(=)
>> string("4.00.0")}) list({string("ocaml") string("setup.ml")
>> string("-configure") string("--prefix") string("%{prefix}%")})
>> list({string("ocaml") string("setup.ml") string("-build")})
>> list({string("ocaml") string("setup.ml") string("-install")})})
>>  'opam init' failed
>>
>> I can't find the file mentioned here after this command runs (in fact
>> I still don't even have a $HOME/.opam), so I'm not sure how to get
>> past this problem.
>>
>


From yury.sulsky at gmail.com  Sun Sep 30 13:46:37 2012
From: yury.sulsky at gmail.com (Yury Sulsky)
Date: Sun, 30 Sep 2012 08:46:37 -0400
Subject: type_conv-108.07 breakage
In-Reply-To: <67F9CDEC-3CCB-49ED-9C0A-E0F23D0B3C10@recoil.org>
References: <67F9CDEC-3CCB-49ED-9C0A-E0F23D0B3C10@recoil.org>
Message-ID: <CAEDxudy2bk4m+an-5gUYNE-Zt16VTUwGRi_efyhmMG_3zxjQuA@mail.gmail.com>

Hi Anil,

I'll take a look at the dyntype extension to see how type_conv is broken,
but the point of these assignments is to avoid ocaml 4's unused value
warnings by from generated code. Apparently, type_conv thinks that values
called "t", "ref", "t_of_value", and "value_of_t" have been generated by
this extension.

On Sun, Sep 30, 2012 at 12:32 AM, Anil Madhavapeddy <anil at recoil.org> wrote:

> I've been porting some of our syntax extensions to the new type_conv (from
> 108.00.02 -> 108.07), and the Dyntype extension is broken because of some
> extra bits that are generated:
>
> For a simple:
>
> # type t = int with value;;
>
> This diff happens between the output of 108.00.02 and 108.07.00:
>
> --- simple-108.00.02.ml 2012-09-29 21:29:42.000000000 -0700
> +++ _build/simple_value_test.ml 2012-09-29 21:30:04.000000000 -0700
> @@ -22,6 +22,12 @@
>            then Dyntype.Value.Rec ((("t", __id__), __x__))
>            else Dyntype.Value.Ext ((("t", (gen_t_id ~id_seed __x3__)),
> __x__))
>
> +let _ = t
> +and _ = t
> +and _ = t
> +and _ = ref
> +and _ = value_of_t
> +
>  let (t_of_value : Dyntype.Value.t -> t) =
>    let module Deps =
>      struct
> @@ -73,4 +79,8 @@
>               raise (Deps.Runtime_error (("Var/Rec/Ext", __x__))))
>      in t_of_value_aux { Deps.t = []; }
>
> +let _ = t
> +and _ = t
> +and _ = t_of_value
> +
>
> These are unbound, and so compilation breaks... what are they for?
>
> -anil
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20120930/de51f5e2/attachment-0001.html>

