From artemkin at gmail.com  Fri Feb  1 11:21:52 2013
From: artemkin at gmail.com (Stanislav Artemkin)
Date: Fri, 1 Feb 2013 03:21:52 -0800 (PST)
Subject: Core library 109.07.00 doesn't compile on 4.00.1+short-types
Message-ID: <3fabcc65-f636-4e24-ad35-099d78faf268@googlegroups.com>

I can't compile new Core on 4.00.1+short-types.

It seems something wrong with pipe operator. I replaced %revapply with 
classic implementation and it compiled successfully..

==== ERROR [while installing core.109.07.00] ====
# command         make
# path            /home/stas/.opam/4.00.1+short-types/build/core.109.07.00
# exit-code       2
# env-file       
 /home/stas/.opam/4.00.1+short-types/build/core.109.07.00/core-d4902a.env
# stdout-file     
/home/stas/.opam/4.00.1+short-types/build/core.109.07.00/core-d4902a.out
# stderr-file     
/home/stas/.opam/4.00.1+short-types/build/core.109.07.00/core-d4902a.err
### stdout ###
...[truncated]
ocamlfind ocamlopt -c -g -w Aemr-28 -strict-sequence -package 
variantslib.syntax -package variantslib -package unix -package threads 
-package sexplib.syntax -package sexplib -package res -package pa_pipebang 
-package pa_ounit -package fieldslib.syntax -package fieldslib -package 
comparelib.syntax -package bin_prot.syntax -package bin_prot -package 
bigarray -syntax camlp4o -thread -for-pack Core -I lib -o 
lib/core_filename.cmx lib/core_filename.ml
ocamlfind ocamlopt -c -g -w Aemr-28 -strict-sequence -package 
variantslib.syntax -package variantslib -package unix -package threads 
-package sexplib.syntax -package sexplib -package res -package pa_pipebang 
-package pa_ounit -package fieldslib.syntax -package fieldslib -package 
comparelib.syntax -package bin_prot.syntax -package bin_prot -package 
bigarray -syntax camlp4o -thread -for-pack Core -I lib -o lib/float.cmx 
lib/float.ml
ocamlfind ocamlopt -c -g -w Aemr-28 -strict-sequence -package 
variantslib.syntax -package variantslib -package unix -package threads 
-package sexplib.syntax -package sexplib -package res -package pa_pipebang 
-package pa_ounit -package fieldslib.syntax -package fieldslib -package 
comparelib.syntax -package bin_prot.syntax -package bin_prot -package 
bigarray -syntax camlp4o -thread -for-pack Core -I lib -o lib/common.cmx 
lib/common.ml
+ ocamlfind ocamlopt -c -g -w Aemr-28 -strict-sequence -package 
variantslib.syntax -package variantslib -package unix -package threads 
-package sexplib.syntax -package sexplib -package res -package pa_pipebang 
-package pa_ounit -package fieldslib.syntax -package fieldslib -package 
comparelib.syntax -package bin_prot.syntax -package bin_prot -package 
bigarray -syntax camlp4o -thread -for-pack Core -I lib -o lib/common.cmx 
lib/common.ml
/tmp/camlasm8bd373.s: Assembler messages:
/tmp/camlasm8bd373.s:2171: Error: junk `revapply (%rip)' after expression
/tmp/camlasm8bd373.s:2171: Error: missing or invalid immediate expression 
`25revapply at GOTPCREL(%rip)'
File "lib/common.ml", line 1:
Error: Assembler error, input left in file /tmp/camlasm8bd373.s
Command exited with code 2.
### stderr ###
E: Failure("Command ''/home/stas/.opam/4.00.1+short-types/bin/ocamlbuild' 
lib/libcore_stubs.a lib/dllcore_stubs.so lib/core.cma lib/core.cmxa 
lib/core.a lib/core.cmxs top/core_top.cma top/core_top.cmxa top/core_top.a 
top/core_top.cmxs -tag debug' terminated with error code 10")
make: *** [build] Error 1

'opam install core' failed.



-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20130201/c79d17c9/attachment.html>

From jdimino at janestreet.com  Fri Feb  1 22:48:15 2013
From: jdimino at janestreet.com (Jeremie Dimino)
Date: Fri, 1 Feb 2013 17:48:15 -0500
Subject: Core library 109.07.00 doesn't compile on 4.00.1+short-types
In-Reply-To: <3fabcc65-f636-4e24-ad35-099d78faf268@googlegroups.com>
References: <3fabcc65-f636-4e24-ad35-099d78faf268@googlegroups.com>
Message-ID: <CANhEzE4dxZpSgCPbZJvrzWOuczqC8_3R7mMhRpp3K=02wsysAg@mail.gmail.com>


On Fri, Feb 1, 2013 at 6:21 AM, Stanislav Artemkin <artemkin at gmail.com> wrote:
> I can't compile new Core on 4.00.1+short-types.
>
> It seems something wrong with pipe operator. I replaced %revapply with
> classic implementation and it compiled successfully..

Indeed. I'm not sure what is the error. I don't think it is a bug in
core since it builds with 4.00.1. Note that it works fine with
4.01.0dev+short-paths.

-- 
Jeremie

-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.




From anil at recoil.org  Sun Feb  3 11:32:10 2013
From: anil at recoil.org (Anil Madhavapeddy)
Date: Sun, 3 Feb 2013 11:32:10 +0000
Subject: Core library 109.07.00 doesn't compile on 4.00.1+short-types
In-Reply-To: <CANhEzE4dxZpSgCPbZJvrzWOuczqC8_3R7mMhRpp3K=02wsysAg@mail.gmail.com>
References: <3fabcc65-f636-4e24-ad35-099d78faf268@googlegroups.com> <CANhEzE4dxZpSgCPbZJvrzWOuczqC8_3R7mMhRpp3K=02wsysAg@mail.gmail.com>
Message-ID: <6E15C04F-587A-4D59-B853-1EDB263E971A@recoil.org>


On 1 Feb 2013, at 22:48, Jeremie Dimino <jdimino at janestreet.com> wrote:

> On Fri, Feb 1, 2013 at 6:21 AM, Stanislav Artemkin <artemkin at gmail.com> wrote:
>> I can't compile new Core on 4.00.1+short-types.
>> 
>> It seems something wrong with pipe operator. I replaced %revapply with
>> classic implementation and it compiled successfully..
> 
> Indeed. I'm not sure what is the error. I don't think it is a bug in
> core since it builds with 4.00.1. Note that it works fine with
> 4.01.0dev+short-paths.

%revapply was broken in 4.00.1, and so there should be a version check on
its use until then.  It's fixed in 4.00.2dev and 4.01.0dev I believe.

http://caml.inria.fr/mantis/view.php?id=5735

-anil

-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.




From sweeks at janestreet.com  Tue Feb  5 18:17:31 2013
From: sweeks at janestreet.com (Stephen Weeks)
Date: Tue, 5 Feb 2013 13:17:31 -0500
Subject: Tcp.where_to_connect
In-Reply-To: <73B079E9-220C-4F43-BD7F-ED5FCF10BB99@recoil.org>
References: <73B079E9-220C-4F43-BD7F-ED5FCF10BB99@recoil.org>
Message-ID: <CAPYVAiK3Cojf72PeRXR7_+MOGMXx_pjUGKnux8h8YA8ng99P-g@mail.gmail.com>


Will [Socket.get{peer,sock}name] work for you?

On Tue, Feb 5, 2013 at 1:02 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> Is there any way to retrieve the Socket.Address.t after connecting using the Tcp.to_host_and_port function in Async_extra?
>
> I'm passing in a hostname and port, and need to stash the resulting IP endpoint after the connection is established, for logging purposes.
>
> -anil

-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.




From yminsky at janestreet.com  Tue Feb  5 18:18:21 2013
From: yminsky at janestreet.com (Yaron Minsky)
Date: Tue, 5 Feb 2013 13:18:21 -0500
Subject: Tcp.where_to_connect
In-Reply-To: <73B079E9-220C-4F43-BD7F-ED5FCF10BB99@recoil.org>
References: <73B079E9-220C-4F43-BD7F-ED5FCF10BB99@recoil.org>
Message-ID: <CACLX4jRD=LBUU1syFguLNos8GSGjK=6vmTaVJNQMTp5dBsKu_w@mail.gmail.com>


I don't see one exposed, but it seems like one could add something
with a signature like this:

val get_address : 'a where_to_connect -> 'a Deferred.t

Seems like a small enough change.  I think right now you can reuse the
where_to_connect, but you can't actually extract the address proper.

What do you want it for?

I think we'd be happy to accept a pull request for this change.

y



On Tue, Feb 5, 2013 at 1:02 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> Is there any way to retrieve the Socket.Address.t after connecting using the Tcp.to_host_and_port function in Async_extra?
>
> I'm passing in a hostname and port, and need to stash the resulting IP endpoint after the connection is established, for logging purposes.
>
> -anil
>
> --
> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
> For more options, visit https://groups.google.com/groups/opt_out.
>
>

-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.




From yminsky at janestreet.com  Tue Feb  5 19:09:30 2013
From: yminsky at janestreet.com (Yaron Minsky)
Date: Tue, 5 Feb 2013 14:09:30 -0500
Subject: Tcp.where_to_connect
In-Reply-To: <EE42769E-61FB-4092-98DF-D3313F6A33A5@recoil.org>
References: <73B079E9-220C-4F43-BD7F-ED5FCF10BB99@recoil.org>
	<CACLX4jRD=LBUU1syFguLNos8GSGjK=6vmTaVJNQMTp5dBsKu_w@mail.gmail.com>
	<EE42769E-61FB-4092-98DF-D3313F6A33A5@recoil.org>
Message-ID: <CACLX4jQjyR3a4SymbTg2G2M5sNEiPm8m61_5Oo3cX5hdDjnWVg@mail.gmail.com>


Couldn't we just change the address from a closure to a Lazy.t?  Then
you can ask for it how ever many times you want, but it gets computed
just once.  I suppose I could imagine weird cases where that would
bite you, if you reuse one of these over and over for a long period...

y

On Tue, Feb 5, 2013 at 2:04 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> Exposing get_address () like that would require the name resolution
> to be done twice.  There's no guarantee I'd get the same IP address
> back the second time around if the DNS server is serving multiple RRs.
>
> type 'addr where_to_connect =
>   { socket_type : 'addr Socket.Type.t;
>     address : unit -> 'addr Deferred.t;
>   }
>
> The reasoning behind address being a closure is probably to force
> name resolution to happen on every connect.  This leaves the only
> way to retrieve the destination IP address by modifying the
> type of Tcp.connect in a backwards incompatible way (to add the
> dest IP to the tuple).
>
> The other alternative is to have an optional callback function to
> ['a with_connect_options'] such as
>
> ?dest_socket:(Socket.Address.t -> [`Ok | `Reject])
>
> which would give the connecting function a chance to interrupt the
> connection establishment if it doesn't like the results of name
> resolution.  This defaults to `Ok of course.
>
> Does the latter sound sensible?  I can cook up the pull request if
> so.  I suspect the former is too invasive.
>
> -anil
>
> On 5 Feb 2013, at 18:18, Yaron Minsky <yminsky at janestreet.com> wrote:
>
>> I don't see one exposed, but it seems like one could add something
>> with a signature like this:
>>
>> val get_address : 'a where_to_connect -> 'a Deferred.t
>>
>> Seems like a small enough change.  I think right now you can reuse the
>> where_to_connect, but you can't actually extract the address proper.
>>
>> What do you want it for?
>>
>> I think we'd be happy to accept a pull request for this change.
>>
>> y
>>
>>
>>
>> On Tue, Feb 5, 2013 at 1:02 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>> Is there any way to retrieve the Socket.Address.t after connecting using the Tcp.to_host_and_port function in Async_extra?
>>>
>>> I'm passing in a hostname and port, and need to stash the resulting IP endpoint after the connection is established, for logging purposes.
>>>
>>> -anil
>>>
>>> --
>>> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
>>> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
>>> For more options, visit https://groups.google.com/groups/opt_out.
>>>
>>>
>>
>> --
>> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
>> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
>> For more options, visit https://groups.google.com/groups/opt_out.
>>
>>
>
> --
> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
> For more options, visit https://groups.google.com/groups/opt_out.
>
>

-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.




From yminsky at janestreet.com  Tue Feb  5 19:28:04 2013
From: yminsky at janestreet.com (Yaron Minsky)
Date: Tue, 5 Feb 2013 14:28:04 -0500
Subject: Tcp.where_to_connect
In-Reply-To: <CACLX4jQjyR3a4SymbTg2G2M5sNEiPm8m61_5Oo3cX5hdDjnWVg@mail.gmail.com>
References: <73B079E9-220C-4F43-BD7F-ED5FCF10BB99@recoil.org>
	<CACLX4jRD=LBUU1syFguLNos8GSGjK=6vmTaVJNQMTp5dBsKu_w@mail.gmail.com>
	<EE42769E-61FB-4092-98DF-D3313F6A33A5@recoil.org>
	<CACLX4jQjyR3a4SymbTg2G2M5sNEiPm8m61_5Oo3cX5hdDjnWVg@mail.gmail.com>
Message-ID: <CACLX4jQTepENzRHv7da2gqaVFH654V7Z7KVUeuaAq0oe5oLpdg@mail.gmail.com>


Though we should figure out why Sweeks' get_address isn't sufficient...

y

On Tue, Feb 5, 2013 at 2:09 PM, Yaron Minsky <yminsky at janestreet.com> wrote:
> Couldn't we just change the address from a closure to a Lazy.t?  Then
> you can ask for it how ever many times you want, but it gets computed
> just once.  I suppose I could imagine weird cases where that would
> bite you, if you reuse one of these over and over for a long period...
>
> y
>
> On Tue, Feb 5, 2013 at 2:04 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> Exposing get_address () like that would require the name resolution
>> to be done twice.  There's no guarantee I'd get the same IP address
>> back the second time around if the DNS server is serving multiple RRs.
>>
>> type 'addr where_to_connect =
>>   { socket_type : 'addr Socket.Type.t;
>>     address : unit -> 'addr Deferred.t;
>>   }
>>
>> The reasoning behind address being a closure is probably to force
>> name resolution to happen on every connect.  This leaves the only
>> way to retrieve the destination IP address by modifying the
>> type of Tcp.connect in a backwards incompatible way (to add the
>> dest IP to the tuple).
>>
>> The other alternative is to have an optional callback function to
>> ['a with_connect_options'] such as
>>
>> ?dest_socket:(Socket.Address.t -> [`Ok | `Reject])
>>
>> which would give the connecting function a chance to interrupt the
>> connection establishment if it doesn't like the results of name
>> resolution.  This defaults to `Ok of course.
>>
>> Does the latter sound sensible?  I can cook up the pull request if
>> so.  I suspect the former is too invasive.
>>
>> -anil
>>
>> On 5 Feb 2013, at 18:18, Yaron Minsky <yminsky at janestreet.com> wrote:
>>
>>> I don't see one exposed, but it seems like one could add something
>>> with a signature like this:
>>>
>>> val get_address : 'a where_to_connect -> 'a Deferred.t
>>>
>>> Seems like a small enough change.  I think right now you can reuse the
>>> where_to_connect, but you can't actually extract the address proper.
>>>
>>> What do you want it for?
>>>
>>> I think we'd be happy to accept a pull request for this change.
>>>
>>> y
>>>
>>>
>>>
>>> On Tue, Feb 5, 2013 at 1:02 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>>> Is there any way to retrieve the Socket.Address.t after connecting using the Tcp.to_host_and_port function in Async_extra?
>>>>
>>>> I'm passing in a hostname and port, and need to stash the resulting IP endpoint after the connection is established, for logging purposes.
>>>>
>>>> -anil
>>>>
>>>> --
>>>> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
>>>> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
>>>> For more options, visit https://groups.google.com/groups/opt_out.
>>>>
>>>>
>>>
>>> --
>>> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
>>> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
>>> For more options, visit https://groups.google.com/groups/opt_out.
>>>
>>>
>>
>> --
>> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
>> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
>> For more options, visit https://groups.google.com/groups/opt_out.
>>
>>

-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.




From anil at recoil.org  Tue Feb  5 18:02:34 2013
From: anil at recoil.org (Anil Madhavapeddy)
Date: Tue, 5 Feb 2013 18:02:34 +0000
Subject: Tcp.where_to_connect
Message-ID: <73B079E9-220C-4F43-BD7F-ED5FCF10BB99@recoil.org>


Is there any way to retrieve the Socket.Address.t after connecting using the Tcp.to_host_and_port function in Async_extra?

I'm passing in a hostname and port, and need to stash the resulting IP endpoint after the connection is established, for logging purposes.

-anil

-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.




From anil at recoil.org  Tue Feb  5 19:04:20 2013
From: anil at recoil.org (Anil Madhavapeddy)
Date: Tue, 5 Feb 2013 19:04:20 +0000
Subject: Tcp.where_to_connect
In-Reply-To: <CACLX4jRD=LBUU1syFguLNos8GSGjK=6vmTaVJNQMTp5dBsKu_w@mail.gmail.com>
References: <73B079E9-220C-4F43-BD7F-ED5FCF10BB99@recoil.org> <CACLX4jRD=LBUU1syFguLNos8GSGjK=6vmTaVJNQMTp5dBsKu_w@mail.gmail.com>
Message-ID: <EE42769E-61FB-4092-98DF-D3313F6A33A5@recoil.org>


Exposing get_address () like that would require the name resolution
to be done twice.  There's no guarantee I'd get the same IP address
back the second time around if the DNS server is serving multiple RRs.

type 'addr where_to_connect =
  { socket_type : 'addr Socket.Type.t;
    address : unit -> 'addr Deferred.t;
  }

The reasoning behind address being a closure is probably to force
name resolution to happen on every connect.  This leaves the only
way to retrieve the destination IP address by modifying the
type of Tcp.connect in a backwards incompatible way (to add the
dest IP to the tuple).

The other alternative is to have an optional callback function to
['a with_connect_options'] such as

?dest_socket:(Socket.Address.t -> [`Ok | `Reject])

which would give the connecting function a chance to interrupt the
connection establishment if it doesn't like the results of name
resolution.  This defaults to `Ok of course.

Does the latter sound sensible?  I can cook up the pull request if
so.  I suspect the former is too invasive.

-anil

On 5 Feb 2013, at 18:18, Yaron Minsky <yminsky at janestreet.com> wrote:

> I don't see one exposed, but it seems like one could add something
> with a signature like this:
> 
> val get_address : 'a where_to_connect -> 'a Deferred.t
> 
> Seems like a small enough change.  I think right now you can reuse the
> where_to_connect, but you can't actually extract the address proper.
> 
> What do you want it for?
> 
> I think we'd be happy to accept a pull request for this change.
> 
> y
> 
> 
> 
> On Tue, Feb 5, 2013 at 1:02 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> Is there any way to retrieve the Socket.Address.t after connecting using the Tcp.to_host_and_port function in Async_extra?
>> 
>> I'm passing in a hostname and port, and need to stash the resulting IP endpoint after the connection is established, for logging purposes.
>> 
>> -anil
>> 
>> --
>> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
>> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
>> For more options, visit https://groups.google.com/groups/opt_out.
>> 
>> 
> 
> -- 
> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
> For more options, visit https://groups.google.com/groups/opt_out.
> 
> 

-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.




From anil at recoil.org  Tue Feb  5 19:46:19 2013
From: anil at recoil.org (Anil Madhavapeddy)
Date: Tue, 5 Feb 2013 19:46:19 +0000
Subject: Tcp.where_to_connect
In-Reply-To: <CACLX4jQjyR3a4SymbTg2G2M5sNEiPm8m61_5Oo3cX5hdDjnWVg@mail.gmail.com>
References: <73B079E9-220C-4F43-BD7F-ED5FCF10BB99@recoil.org> <CACLX4jRD=LBUU1syFguLNos8GSGjK=6vmTaVJNQMTp5dBsKu_w@mail.gmail.com> <EE42769E-61FB-4092-98DF-D3313F6A33A5@recoil.org> <CACLX4jQjyR3a4SymbTg2G2M5sNEiPm8m61_5Oo3cX5hdDjnWVg@mail.gmail.com>
Message-ID: <29507244-DD99-4D71-AD10-0B7F2EE96BE1@recoil.org>


That would prevent multiple uses of the [where_to_connect] from
re-resolving the DNS name, which would be very dangerous if you're
depending on that behaviour for load balancing (or fault tolerance,
if retrying failed connections).  The current behaviour seems
entirely correct.

Sweeks made the excellent suggestion of using Socket.getpeername,
which I'd looked at but got a little lost in the types:

The Fd.t which you get from an Async_unix.Reader is different from
the Socket.t I need to call getpeername on. The Async.Std.Unix module
is different from Core.Std.Unix (quite reasonably), but this still
surprising: Unix.getpeername is present if Core.Std is open, but
disappears when when you open Async.Std (into the Socket module).

This snippet below does successfully retrieve a peername from a
Async_unix.Reader [rd]:

Socket.getpeername (Socket.of_fd (Reader.fd rd) Socket.Type.tcp) in

...so no patches are required.  Didn't mean to doubt your interface
design, Stephen :-)

-anil

On 5 Feb 2013, at 19:09, Yaron Minsky <yminsky at janestreet.com> wrote:

> Couldn't we just change the address from a closure to a Lazy.t?  Then
> you can ask for it how ever many times you want, but it gets computed
> just once.  I suppose I could imagine weird cases where that would
> bite you, if you reuse one of these over and over for a long period...
> 
> y
> 
> On Tue, Feb 5, 2013 at 2:04 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> Exposing get_address () like that would require the name resolution
>> to be done twice.  There's no guarantee I'd get the same IP address
>> back the second time around if the DNS server is serving multiple RRs.
>> 
>> type 'addr where_to_connect =
>>  { socket_type : 'addr Socket.Type.t;
>>    address : unit -> 'addr Deferred.t;
>>  }
>> 
>> The reasoning behind address being a closure is probably to force
>> name resolution to happen on every connect.  This leaves the only
>> way to retrieve the destination IP address by modifying the
>> type of Tcp.connect in a backwards incompatible way (to add the
>> dest IP to the tuple).
>> 
>> The other alternative is to have an optional callback function to
>> ['a with_connect_options'] such as
>> 
>> ?dest_socket:(Socket.Address.t -> [`Ok | `Reject])
>> 
>> which would give the connecting function a chance to interrupt the
>> connection establishment if it doesn't like the results of name
>> resolution.  This defaults to `Ok of course.
>> 
>> Does the latter sound sensible?  I can cook up the pull request if
>> so.  I suspect the former is too invasive.
>> 
>> -anil
>> 
>> On 5 Feb 2013, at 18:18, Yaron Minsky <yminsky at janestreet.com> wrote:
>> 
>>> I don't see one exposed, but it seems like one could add something
>>> with a signature like this:
>>> 
>>> val get_address : 'a where_to_connect -> 'a Deferred.t
>>> 
>>> Seems like a small enough change.  I think right now you can reuse the
>>> where_to_connect, but you can't actually extract the address proper.
>>> 
>>> What do you want it for?
>>> 
>>> I think we'd be happy to accept a pull request for this change.
>>> 
>>> y
>>> 
>>> 
>>> 
>>> On Tue, Feb 5, 2013 at 1:02 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>>> Is there any way to retrieve the Socket.Address.t after connecting using the Tcp.to_host_and_port function in Async_extra?
>>>> 
>>>> I'm passing in a hostname and port, and need to stash the resulting IP endpoint after the connection is established, for logging purposes.
>>>> 
>>>> -anil
>>>> 
>>>> --
>>>> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
>>>> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
>>>> For more options, visit https://groups.google.com/groups/opt_out.
>>>> 
>>>> 
>>> 
>>> --
>>> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
>>> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
>>> For more options, visit https://groups.google.com/groups/opt_out.
>>> 
>>> 
>> 
>> --
>> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
>> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
>> For more options, visit https://groups.google.com/groups/opt_out.
>> 
>> 
> 
> -- 
> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
> For more options, visit https://groups.google.com/groups/opt_out.
> 
> 

-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.




From sweeks at janestreet.com  Wed Feb  6 04:20:02 2013
From: sweeks at janestreet.com (Stephen Weeks)
Date: Tue, 5 Feb 2013 23:20:02 -0500
Subject: Tcp.where_to_connect
In-Reply-To: <29507244-DD99-4D71-AD10-0B7F2EE96BE1@recoil.org>
References: <73B079E9-220C-4F43-BD7F-ED5FCF10BB99@recoil.org>
	<CACLX4jRD=LBUU1syFguLNos8GSGjK=6vmTaVJNQMTp5dBsKu_w@mail.gmail.com>
	<EE42769E-61FB-4092-98DF-D3313F6A33A5@recoil.org>
	<CACLX4jQjyR3a4SymbTg2G2M5sNEiPm8m61_5Oo3cX5hdDjnWVg@mail.gmail.com>
	<29507244-DD99-4D71-AD10-0B7F2EE96BE1@recoil.org>
Message-ID: <CAPYVAiL21SQ02-cNfweU6p+DMrew8NSzqZom3eMNP9NNcZzAiA@mail.gmail.com>


> This snippet below does successfully retrieve a peername from a
> Async_unix.Reader [rd]:
>
> Socket.getpeername (Socket.of_fd (Reader.fd rd) Socket.Type.tcp) in

Yeah.  That's mildly unpleasant, having to reconstruct the [Socket.t].

If you call [connect_sock] rather than [connect], you would then have
the socket and not need to reconstruct it.  But then you would have to
duplicate [reader_writer_of_sock], which isn't exposed.

I'm inclined to change the type of [connect] to expose the created
socket:

  val connect :
    ('addr where_to_connect
      -> (([ `Active ], 'addr) Socket.t * Reader.t * Writer.t) Deferred.t
    ) with_connect_options

That's a trivial change, and it would be easy to update existing uses.

-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.




From sweeks at janestreet.com  Wed Feb  6 21:24:28 2013
From: sweeks at janestreet.com (Stephen Weeks)
Date: Wed, 6 Feb 2013 16:24:28 -0500
Subject: Tcp.where_to_connect
In-Reply-To: <F6739C49-260F-44EB-AE10-56BB5FE87FD6@recoil.org>
References: <73B079E9-220C-4F43-BD7F-ED5FCF10BB99@recoil.org>
	<CACLX4jRD=LBUU1syFguLNos8GSGjK=6vmTaVJNQMTp5dBsKu_w@mail.gmail.com>
	<EE42769E-61FB-4092-98DF-D3313F6A33A5@recoil.org>
	<CACLX4jQjyR3a4SymbTg2G2M5sNEiPm8m61_5Oo3cX5hdDjnWVg@mail.gmail.com>
	<29507244-DD99-4D71-AD10-0B7F2EE96BE1@recoil.org>
	<CAPYVAiL21SQ02-cNfweU6p+DMrew8NSzqZom3eMNP9NNcZzAiA@mail.gmail.com>
	<F6739C49-260F-44EB-AE10-56BB5FE87FD6@recoil.org>
Message-ID: <CAPYVAiLE1nnch37-eQVUQf_jzJ+JHsksBww5C+Ghrmgf29Fxag@mail.gmail.com>


>> I'm inclined to change the type of [connect] to expose the created
>> socket:
>>
>>  val connect :
>>    ('addr where_to_connect
>>      -> (([ `Active ], 'addr) Socket.t * Reader.t * Writer.t) Deferred.t
>>    ) with_connect_options
>
> This would be useful.  It's mildly irritating to have to invoke a syscall
> to retrieve the name resolution result that just happened, though.
>
> Any reason not to just pass the Socket.Address.t instead of the Socket.t
> (which can be retrieved via the Reader/Writer, whereas the address can't
> directly be without the syscall).

I'd rather return the socket, so that one doesn't have to reconstruct
it.  We could easily add a function to extract the address from a
socket:

  val Socket.address
    : ([< `Bound | `Passive | `Active ], 'addr) t -> 'addr

-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.




From anil at recoil.org  Wed Feb  6 21:10:54 2013
From: anil at recoil.org (Anil Madhavapeddy)
Date: Wed, 6 Feb 2013 21:10:54 +0000
Subject: Tcp.where_to_connect
In-Reply-To: <CAPYVAiL21SQ02-cNfweU6p+DMrew8NSzqZom3eMNP9NNcZzAiA@mail.gmail.com>
References: <73B079E9-220C-4F43-BD7F-ED5FCF10BB99@recoil.org> <CACLX4jRD=LBUU1syFguLNos8GSGjK=6vmTaVJNQMTp5dBsKu_w@mail.gmail.com> <EE42769E-61FB-4092-98DF-D3313F6A33A5@recoil.org> <CACLX4jQjyR3a4SymbTg2G2M5sNEiPm8m61_5Oo3cX5hdDjnWVg@mail.gmail.com> <29507244-DD99-4D71-AD10-0B7F2EE96BE1@recoil.org> <CAPYVAiL21SQ02-cNfweU6p+DMrew8NSzqZom3eMNP9NNcZzAiA@mail.gmail.com>
Message-ID: <F6739C49-260F-44EB-AE10-56BB5FE87FD6@recoil.org>


On 6 Feb 2013, at 04:20, Stephen Weeks <sweeks at janestreet.com> wrote:

>> This snippet below does successfully retrieve a peername from a
>> Async_unix.Reader [rd]:
>> 
>> Socket.getpeername (Socket.of_fd (Reader.fd rd) Socket.Type.tcp) in
> 
> Yeah.  That's mildly unpleasant, having to reconstruct the [Socket.t].
> 
> If you call [connect_sock] rather than [connect], you would then have
> the socket and not need to reconstruct it.  But then you would have to
> duplicate [reader_writer_of_sock], which isn't exposed.
> 
> I'm inclined to change the type of [connect] to expose the created
> socket:
> 
>  val connect :
>    ('addr where_to_connect
>      -> (([ `Active ], 'addr) Socket.t * Reader.t * Writer.t) Deferred.t
>    ) with_connect_options

This would be useful.  It's mildly irritating to have to invoke a syscall
to retrieve the name resolution result that just happened, though.

Any reason not to just pass the Socket.Address.t instead of the Socket.t
(which can be retrieved via the Reader/Writer, whereas the address can't
directly be without the syscall).

-anil


-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.




From artemkin at gmail.com  Fri Feb  1 11:21:52 2013
From: artemkin at gmail.com (Stanislav Artemkin)
Date: Fri, 1 Feb 2013 03:21:52 -0800 (PST)
Subject: Core library 109.07.00 doesn't compile on 4.00.1+short-types
Message-ID: <3fabcc65-f636-4e24-ad35-099d78faf268@googlegroups.com>

I can't compile new Core on 4.00.1+short-types.

It seems something wrong with pipe operator. I replaced %revapply with 
classic implementation and it compiled successfully..

==== ERROR [while installing core.109.07.00] ====
# command         make
# path            /home/stas/.opam/4.00.1+short-types/build/core.109.07.00
# exit-code       2
# env-file       
 /home/stas/.opam/4.00.1+short-types/build/core.109.07.00/core-d4902a.env
# stdout-file     
/home/stas/.opam/4.00.1+short-types/build/core.109.07.00/core-d4902a.out
# stderr-file     
/home/stas/.opam/4.00.1+short-types/build/core.109.07.00/core-d4902a.err
### stdout ###
...[truncated]
ocamlfind ocamlopt -c -g -w Aemr-28 -strict-sequence -package 
variantslib.syntax -package variantslib -package unix -package threads 
-package sexplib.syntax -package sexplib -package res -package pa_pipebang 
-package pa_ounit -package fieldslib.syntax -package fieldslib -package 
comparelib.syntax -package bin_prot.syntax -package bin_prot -package 
bigarray -syntax camlp4o -thread -for-pack Core -I lib -o 
lib/core_filename.cmx lib/core_filename.ml
ocamlfind ocamlopt -c -g -w Aemr-28 -strict-sequence -package 
variantslib.syntax -package variantslib -package unix -package threads 
-package sexplib.syntax -package sexplib -package res -package pa_pipebang 
-package pa_ounit -package fieldslib.syntax -package fieldslib -package 
comparelib.syntax -package bin_prot.syntax -package bin_prot -package 
bigarray -syntax camlp4o -thread -for-pack Core -I lib -o lib/float.cmx 
lib/float.ml
ocamlfind ocamlopt -c -g -w Aemr-28 -strict-sequence -package 
variantslib.syntax -package variantslib -package unix -package threads 
-package sexplib.syntax -package sexplib -package res -package pa_pipebang 
-package pa_ounit -package fieldslib.syntax -package fieldslib -package 
comparelib.syntax -package bin_prot.syntax -package bin_prot -package 
bigarray -syntax camlp4o -thread -for-pack Core -I lib -o lib/common.cmx 
lib/common.ml
+ ocamlfind ocamlopt -c -g -w Aemr-28 -strict-sequence -package 
variantslib.syntax -package variantslib -package unix -package threads 
-package sexplib.syntax -package sexplib -package res -package pa_pipebang 
-package pa_ounit -package fieldslib.syntax -package fieldslib -package 
comparelib.syntax -package bin_prot.syntax -package bin_prot -package 
bigarray -syntax camlp4o -thread -for-pack Core -I lib -o lib/common.cmx 
lib/common.ml
/tmp/camlasm8bd373.s: Assembler messages:
/tmp/camlasm8bd373.s:2171: Error: junk `revapply (%rip)' after expression
/tmp/camlasm8bd373.s:2171: Error: missing or invalid immediate expression 
`25revapply at GOTPCREL(%rip)'
File "lib/common.ml", line 1:
Error: Assembler error, input left in file /tmp/camlasm8bd373.s
Command exited with code 2.
### stderr ###
E: Failure("Command ''/home/stas/.opam/4.00.1+short-types/bin/ocamlbuild' 
lib/libcore_stubs.a lib/dllcore_stubs.so lib/core.cma lib/core.cmxa 
lib/core.a lib/core.cmxs top/core_top.cma top/core_top.cmxa top/core_top.a 
top/core_top.cmxs -tag debug' terminated with error code 10")
make: *** [build] Error 1

'opam install core' failed.



-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20130201/c79d17c9/attachment-0001.html>

From jdimino at janestreet.com  Fri Feb  1 22:48:15 2013
From: jdimino at janestreet.com (Jeremie Dimino)
Date: Fri, 1 Feb 2013 17:48:15 -0500
Subject: Core library 109.07.00 doesn't compile on 4.00.1+short-types
In-Reply-To: <3fabcc65-f636-4e24-ad35-099d78faf268@googlegroups.com>
References: <3fabcc65-f636-4e24-ad35-099d78faf268@googlegroups.com>
Message-ID: <CANhEzE4dxZpSgCPbZJvrzWOuczqC8_3R7mMhRpp3K=02wsysAg@mail.gmail.com>


On Fri, Feb 1, 2013 at 6:21 AM, Stanislav Artemkin <artemkin at gmail.com> wrote:
> I can't compile new Core on 4.00.1+short-types.
>
> It seems something wrong with pipe operator. I replaced %revapply with
> classic implementation and it compiled successfully..

Indeed. I'm not sure what is the error. I don't think it is a bug in
core since it builds with 4.00.1. Note that it works fine with
4.01.0dev+short-paths.

-- 
Jeremie

-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.




From anil at recoil.org  Sun Feb  3 11:32:10 2013
From: anil at recoil.org (Anil Madhavapeddy)
Date: Sun, 3 Feb 2013 11:32:10 +0000
Subject: Core library 109.07.00 doesn't compile on 4.00.1+short-types
In-Reply-To: <CANhEzE4dxZpSgCPbZJvrzWOuczqC8_3R7mMhRpp3K=02wsysAg@mail.gmail.com>
References: <3fabcc65-f636-4e24-ad35-099d78faf268@googlegroups.com> <CANhEzE4dxZpSgCPbZJvrzWOuczqC8_3R7mMhRpp3K=02wsysAg@mail.gmail.com>
Message-ID: <6E15C04F-587A-4D59-B853-1EDB263E971A@recoil.org>


On 1 Feb 2013, at 22:48, Jeremie Dimino <jdimino at janestreet.com> wrote:

> On Fri, Feb 1, 2013 at 6:21 AM, Stanislav Artemkin <artemkin at gmail.com> wrote:
>> I can't compile new Core on 4.00.1+short-types.
>> 
>> It seems something wrong with pipe operator. I replaced %revapply with
>> classic implementation and it compiled successfully..
> 
> Indeed. I'm not sure what is the error. I don't think it is a bug in
> core since it builds with 4.00.1. Note that it works fine with
> 4.01.0dev+short-paths.

%revapply was broken in 4.00.1, and so there should be a version check on
its use until then.  It's fixed in 4.00.2dev and 4.01.0dev I believe.

http://caml.inria.fr/mantis/view.php?id=5735

-anil

-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.




From sweeks at janestreet.com  Tue Feb  5 18:17:31 2013
From: sweeks at janestreet.com (Stephen Weeks)
Date: Tue, 5 Feb 2013 13:17:31 -0500
Subject: Tcp.where_to_connect
In-Reply-To: <73B079E9-220C-4F43-BD7F-ED5FCF10BB99@recoil.org>
References: <73B079E9-220C-4F43-BD7F-ED5FCF10BB99@recoil.org>
Message-ID: <CAPYVAiK3Cojf72PeRXR7_+MOGMXx_pjUGKnux8h8YA8ng99P-g@mail.gmail.com>


Will [Socket.get{peer,sock}name] work for you?

On Tue, Feb 5, 2013 at 1:02 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> Is there any way to retrieve the Socket.Address.t after connecting using the Tcp.to_host_and_port function in Async_extra?
>
> I'm passing in a hostname and port, and need to stash the resulting IP endpoint after the connection is established, for logging purposes.
>
> -anil

-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.




From yminsky at janestreet.com  Tue Feb  5 18:18:21 2013
From: yminsky at janestreet.com (Yaron Minsky)
Date: Tue, 5 Feb 2013 13:18:21 -0500
Subject: Tcp.where_to_connect
In-Reply-To: <73B079E9-220C-4F43-BD7F-ED5FCF10BB99@recoil.org>
References: <73B079E9-220C-4F43-BD7F-ED5FCF10BB99@recoil.org>
Message-ID: <CACLX4jRD=LBUU1syFguLNos8GSGjK=6vmTaVJNQMTp5dBsKu_w@mail.gmail.com>


I don't see one exposed, but it seems like one could add something
with a signature like this:

val get_address : 'a where_to_connect -> 'a Deferred.t

Seems like a small enough change.  I think right now you can reuse the
where_to_connect, but you can't actually extract the address proper.

What do you want it for?

I think we'd be happy to accept a pull request for this change.

y



On Tue, Feb 5, 2013 at 1:02 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> Is there any way to retrieve the Socket.Address.t after connecting using the Tcp.to_host_and_port function in Async_extra?
>
> I'm passing in a hostname and port, and need to stash the resulting IP endpoint after the connection is established, for logging purposes.
>
> -anil
>
> --
> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
> For more options, visit https://groups.google.com/groups/opt_out.
>
>

-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.




From yminsky at janestreet.com  Tue Feb  5 19:09:30 2013
From: yminsky at janestreet.com (Yaron Minsky)
Date: Tue, 5 Feb 2013 14:09:30 -0500
Subject: Tcp.where_to_connect
In-Reply-To: <EE42769E-61FB-4092-98DF-D3313F6A33A5@recoil.org>
References: <73B079E9-220C-4F43-BD7F-ED5FCF10BB99@recoil.org>
	<CACLX4jRD=LBUU1syFguLNos8GSGjK=6vmTaVJNQMTp5dBsKu_w@mail.gmail.com>
	<EE42769E-61FB-4092-98DF-D3313F6A33A5@recoil.org>
Message-ID: <CACLX4jQjyR3a4SymbTg2G2M5sNEiPm8m61_5Oo3cX5hdDjnWVg@mail.gmail.com>


Couldn't we just change the address from a closure to a Lazy.t?  Then
you can ask for it how ever many times you want, but it gets computed
just once.  I suppose I could imagine weird cases where that would
bite you, if you reuse one of these over and over for a long period...

y

On Tue, Feb 5, 2013 at 2:04 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
> Exposing get_address () like that would require the name resolution
> to be done twice.  There's no guarantee I'd get the same IP address
> back the second time around if the DNS server is serving multiple RRs.
>
> type 'addr where_to_connect =
>   { socket_type : 'addr Socket.Type.t;
>     address : unit -> 'addr Deferred.t;
>   }
>
> The reasoning behind address being a closure is probably to force
> name resolution to happen on every connect.  This leaves the only
> way to retrieve the destination IP address by modifying the
> type of Tcp.connect in a backwards incompatible way (to add the
> dest IP to the tuple).
>
> The other alternative is to have an optional callback function to
> ['a with_connect_options'] such as
>
> ?dest_socket:(Socket.Address.t -> [`Ok | `Reject])
>
> which would give the connecting function a chance to interrupt the
> connection establishment if it doesn't like the results of name
> resolution.  This defaults to `Ok of course.
>
> Does the latter sound sensible?  I can cook up the pull request if
> so.  I suspect the former is too invasive.
>
> -anil
>
> On 5 Feb 2013, at 18:18, Yaron Minsky <yminsky at janestreet.com> wrote:
>
>> I don't see one exposed, but it seems like one could add something
>> with a signature like this:
>>
>> val get_address : 'a where_to_connect -> 'a Deferred.t
>>
>> Seems like a small enough change.  I think right now you can reuse the
>> where_to_connect, but you can't actually extract the address proper.
>>
>> What do you want it for?
>>
>> I think we'd be happy to accept a pull request for this change.
>>
>> y
>>
>>
>>
>> On Tue, Feb 5, 2013 at 1:02 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>> Is there any way to retrieve the Socket.Address.t after connecting using the Tcp.to_host_and_port function in Async_extra?
>>>
>>> I'm passing in a hostname and port, and need to stash the resulting IP endpoint after the connection is established, for logging purposes.
>>>
>>> -anil
>>>
>>> --
>>> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
>>> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
>>> For more options, visit https://groups.google.com/groups/opt_out.
>>>
>>>
>>
>> --
>> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
>> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
>> For more options, visit https://groups.google.com/groups/opt_out.
>>
>>
>
> --
> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
> For more options, visit https://groups.google.com/groups/opt_out.
>
>

-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.




From yminsky at janestreet.com  Tue Feb  5 19:28:04 2013
From: yminsky at janestreet.com (Yaron Minsky)
Date: Tue, 5 Feb 2013 14:28:04 -0500
Subject: Tcp.where_to_connect
In-Reply-To: <CACLX4jQjyR3a4SymbTg2G2M5sNEiPm8m61_5Oo3cX5hdDjnWVg@mail.gmail.com>
References: <73B079E9-220C-4F43-BD7F-ED5FCF10BB99@recoil.org>
	<CACLX4jRD=LBUU1syFguLNos8GSGjK=6vmTaVJNQMTp5dBsKu_w@mail.gmail.com>
	<EE42769E-61FB-4092-98DF-D3313F6A33A5@recoil.org>
	<CACLX4jQjyR3a4SymbTg2G2M5sNEiPm8m61_5Oo3cX5hdDjnWVg@mail.gmail.com>
Message-ID: <CACLX4jQTepENzRHv7da2gqaVFH654V7Z7KVUeuaAq0oe5oLpdg@mail.gmail.com>


Though we should figure out why Sweeks' get_address isn't sufficient...

y

On Tue, Feb 5, 2013 at 2:09 PM, Yaron Minsky <yminsky at janestreet.com> wrote:
> Couldn't we just change the address from a closure to a Lazy.t?  Then
> you can ask for it how ever many times you want, but it gets computed
> just once.  I suppose I could imagine weird cases where that would
> bite you, if you reuse one of these over and over for a long period...
>
> y
>
> On Tue, Feb 5, 2013 at 2:04 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> Exposing get_address () like that would require the name resolution
>> to be done twice.  There's no guarantee I'd get the same IP address
>> back the second time around if the DNS server is serving multiple RRs.
>>
>> type 'addr where_to_connect =
>>   { socket_type : 'addr Socket.Type.t;
>>     address : unit -> 'addr Deferred.t;
>>   }
>>
>> The reasoning behind address being a closure is probably to force
>> name resolution to happen on every connect.  This leaves the only
>> way to retrieve the destination IP address by modifying the
>> type of Tcp.connect in a backwards incompatible way (to add the
>> dest IP to the tuple).
>>
>> The other alternative is to have an optional callback function to
>> ['a with_connect_options'] such as
>>
>> ?dest_socket:(Socket.Address.t -> [`Ok | `Reject])
>>
>> which would give the connecting function a chance to interrupt the
>> connection establishment if it doesn't like the results of name
>> resolution.  This defaults to `Ok of course.
>>
>> Does the latter sound sensible?  I can cook up the pull request if
>> so.  I suspect the former is too invasive.
>>
>> -anil
>>
>> On 5 Feb 2013, at 18:18, Yaron Minsky <yminsky at janestreet.com> wrote:
>>
>>> I don't see one exposed, but it seems like one could add something
>>> with a signature like this:
>>>
>>> val get_address : 'a where_to_connect -> 'a Deferred.t
>>>
>>> Seems like a small enough change.  I think right now you can reuse the
>>> where_to_connect, but you can't actually extract the address proper.
>>>
>>> What do you want it for?
>>>
>>> I think we'd be happy to accept a pull request for this change.
>>>
>>> y
>>>
>>>
>>>
>>> On Tue, Feb 5, 2013 at 1:02 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>>> Is there any way to retrieve the Socket.Address.t after connecting using the Tcp.to_host_and_port function in Async_extra?
>>>>
>>>> I'm passing in a hostname and port, and need to stash the resulting IP endpoint after the connection is established, for logging purposes.
>>>>
>>>> -anil
>>>>
>>>> --
>>>> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
>>>> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
>>>> For more options, visit https://groups.google.com/groups/opt_out.
>>>>
>>>>
>>>
>>> --
>>> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
>>> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
>>> For more options, visit https://groups.google.com/groups/opt_out.
>>>
>>>
>>
>> --
>> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
>> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
>> For more options, visit https://groups.google.com/groups/opt_out.
>>
>>

-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.




From anil at recoil.org  Tue Feb  5 18:02:34 2013
From: anil at recoil.org (Anil Madhavapeddy)
Date: Tue, 5 Feb 2013 18:02:34 +0000
Subject: Tcp.where_to_connect
Message-ID: <73B079E9-220C-4F43-BD7F-ED5FCF10BB99@recoil.org>


Is there any way to retrieve the Socket.Address.t after connecting using the Tcp.to_host_and_port function in Async_extra?

I'm passing in a hostname and port, and need to stash the resulting IP endpoint after the connection is established, for logging purposes.

-anil

-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.




From anil at recoil.org  Tue Feb  5 19:04:20 2013
From: anil at recoil.org (Anil Madhavapeddy)
Date: Tue, 5 Feb 2013 19:04:20 +0000
Subject: Tcp.where_to_connect
In-Reply-To: <CACLX4jRD=LBUU1syFguLNos8GSGjK=6vmTaVJNQMTp5dBsKu_w@mail.gmail.com>
References: <73B079E9-220C-4F43-BD7F-ED5FCF10BB99@recoil.org> <CACLX4jRD=LBUU1syFguLNos8GSGjK=6vmTaVJNQMTp5dBsKu_w@mail.gmail.com>
Message-ID: <EE42769E-61FB-4092-98DF-D3313F6A33A5@recoil.org>


Exposing get_address () like that would require the name resolution
to be done twice.  There's no guarantee I'd get the same IP address
back the second time around if the DNS server is serving multiple RRs.

type 'addr where_to_connect =
  { socket_type : 'addr Socket.Type.t;
    address : unit -> 'addr Deferred.t;
  }

The reasoning behind address being a closure is probably to force
name resolution to happen on every connect.  This leaves the only
way to retrieve the destination IP address by modifying the
type of Tcp.connect in a backwards incompatible way (to add the
dest IP to the tuple).

The other alternative is to have an optional callback function to
['a with_connect_options'] such as

?dest_socket:(Socket.Address.t -> [`Ok | `Reject])

which would give the connecting function a chance to interrupt the
connection establishment if it doesn't like the results of name
resolution.  This defaults to `Ok of course.

Does the latter sound sensible?  I can cook up the pull request if
so.  I suspect the former is too invasive.

-anil

On 5 Feb 2013, at 18:18, Yaron Minsky <yminsky at janestreet.com> wrote:

> I don't see one exposed, but it seems like one could add something
> with a signature like this:
> 
> val get_address : 'a where_to_connect -> 'a Deferred.t
> 
> Seems like a small enough change.  I think right now you can reuse the
> where_to_connect, but you can't actually extract the address proper.
> 
> What do you want it for?
> 
> I think we'd be happy to accept a pull request for this change.
> 
> y
> 
> 
> 
> On Tue, Feb 5, 2013 at 1:02 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> Is there any way to retrieve the Socket.Address.t after connecting using the Tcp.to_host_and_port function in Async_extra?
>> 
>> I'm passing in a hostname and port, and need to stash the resulting IP endpoint after the connection is established, for logging purposes.
>> 
>> -anil
>> 
>> --
>> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
>> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
>> For more options, visit https://groups.google.com/groups/opt_out.
>> 
>> 
> 
> -- 
> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
> For more options, visit https://groups.google.com/groups/opt_out.
> 
> 

-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.




From anil at recoil.org  Tue Feb  5 19:46:19 2013
From: anil at recoil.org (Anil Madhavapeddy)
Date: Tue, 5 Feb 2013 19:46:19 +0000
Subject: Tcp.where_to_connect
In-Reply-To: <CACLX4jQjyR3a4SymbTg2G2M5sNEiPm8m61_5Oo3cX5hdDjnWVg@mail.gmail.com>
References: <73B079E9-220C-4F43-BD7F-ED5FCF10BB99@recoil.org> <CACLX4jRD=LBUU1syFguLNos8GSGjK=6vmTaVJNQMTp5dBsKu_w@mail.gmail.com> <EE42769E-61FB-4092-98DF-D3313F6A33A5@recoil.org> <CACLX4jQjyR3a4SymbTg2G2M5sNEiPm8m61_5Oo3cX5hdDjnWVg@mail.gmail.com>
Message-ID: <29507244-DD99-4D71-AD10-0B7F2EE96BE1@recoil.org>


That would prevent multiple uses of the [where_to_connect] from
re-resolving the DNS name, which would be very dangerous if you're
depending on that behaviour for load balancing (or fault tolerance,
if retrying failed connections).  The current behaviour seems
entirely correct.

Sweeks made the excellent suggestion of using Socket.getpeername,
which I'd looked at but got a little lost in the types:

The Fd.t which you get from an Async_unix.Reader is different from
the Socket.t I need to call getpeername on. The Async.Std.Unix module
is different from Core.Std.Unix (quite reasonably), but this still
surprising: Unix.getpeername is present if Core.Std is open, but
disappears when when you open Async.Std (into the Socket module).

This snippet below does successfully retrieve a peername from a
Async_unix.Reader [rd]:

Socket.getpeername (Socket.of_fd (Reader.fd rd) Socket.Type.tcp) in

...so no patches are required.  Didn't mean to doubt your interface
design, Stephen :-)

-anil

On 5 Feb 2013, at 19:09, Yaron Minsky <yminsky at janestreet.com> wrote:

> Couldn't we just change the address from a closure to a Lazy.t?  Then
> you can ask for it how ever many times you want, but it gets computed
> just once.  I suppose I could imagine weird cases where that would
> bite you, if you reuse one of these over and over for a long period...
> 
> y
> 
> On Tue, Feb 5, 2013 at 2:04 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>> Exposing get_address () like that would require the name resolution
>> to be done twice.  There's no guarantee I'd get the same IP address
>> back the second time around if the DNS server is serving multiple RRs.
>> 
>> type 'addr where_to_connect =
>>  { socket_type : 'addr Socket.Type.t;
>>    address : unit -> 'addr Deferred.t;
>>  }
>> 
>> The reasoning behind address being a closure is probably to force
>> name resolution to happen on every connect.  This leaves the only
>> way to retrieve the destination IP address by modifying the
>> type of Tcp.connect in a backwards incompatible way (to add the
>> dest IP to the tuple).
>> 
>> The other alternative is to have an optional callback function to
>> ['a with_connect_options'] such as
>> 
>> ?dest_socket:(Socket.Address.t -> [`Ok | `Reject])
>> 
>> which would give the connecting function a chance to interrupt the
>> connection establishment if it doesn't like the results of name
>> resolution.  This defaults to `Ok of course.
>> 
>> Does the latter sound sensible?  I can cook up the pull request if
>> so.  I suspect the former is too invasive.
>> 
>> -anil
>> 
>> On 5 Feb 2013, at 18:18, Yaron Minsky <yminsky at janestreet.com> wrote:
>> 
>>> I don't see one exposed, but it seems like one could add something
>>> with a signature like this:
>>> 
>>> val get_address : 'a where_to_connect -> 'a Deferred.t
>>> 
>>> Seems like a small enough change.  I think right now you can reuse the
>>> where_to_connect, but you can't actually extract the address proper.
>>> 
>>> What do you want it for?
>>> 
>>> I think we'd be happy to accept a pull request for this change.
>>> 
>>> y
>>> 
>>> 
>>> 
>>> On Tue, Feb 5, 2013 at 1:02 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>>> Is there any way to retrieve the Socket.Address.t after connecting using the Tcp.to_host_and_port function in Async_extra?
>>>> 
>>>> I'm passing in a hostname and port, and need to stash the resulting IP endpoint after the connection is established, for logging purposes.
>>>> 
>>>> -anil
>>>> 
>>>> --
>>>> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
>>>> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
>>>> For more options, visit https://groups.google.com/groups/opt_out.
>>>> 
>>>> 
>>> 
>>> --
>>> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
>>> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
>>> For more options, visit https://groups.google.com/groups/opt_out.
>>> 
>>> 
>> 
>> --
>> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
>> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
>> For more options, visit https://groups.google.com/groups/opt_out.
>> 
>> 
> 
> -- 
> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
> For more options, visit https://groups.google.com/groups/opt_out.
> 
> 

-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.




From sweeks at janestreet.com  Wed Feb  6 04:20:02 2013
From: sweeks at janestreet.com (Stephen Weeks)
Date: Tue, 5 Feb 2013 23:20:02 -0500
Subject: Tcp.where_to_connect
In-Reply-To: <29507244-DD99-4D71-AD10-0B7F2EE96BE1@recoil.org>
References: <73B079E9-220C-4F43-BD7F-ED5FCF10BB99@recoil.org>
	<CACLX4jRD=LBUU1syFguLNos8GSGjK=6vmTaVJNQMTp5dBsKu_w@mail.gmail.com>
	<EE42769E-61FB-4092-98DF-D3313F6A33A5@recoil.org>
	<CACLX4jQjyR3a4SymbTg2G2M5sNEiPm8m61_5Oo3cX5hdDjnWVg@mail.gmail.com>
	<29507244-DD99-4D71-AD10-0B7F2EE96BE1@recoil.org>
Message-ID: <CAPYVAiL21SQ02-cNfweU6p+DMrew8NSzqZom3eMNP9NNcZzAiA@mail.gmail.com>


> This snippet below does successfully retrieve a peername from a
> Async_unix.Reader [rd]:
>
> Socket.getpeername (Socket.of_fd (Reader.fd rd) Socket.Type.tcp) in

Yeah.  That's mildly unpleasant, having to reconstruct the [Socket.t].

If you call [connect_sock] rather than [connect], you would then have
the socket and not need to reconstruct it.  But then you would have to
duplicate [reader_writer_of_sock], which isn't exposed.

I'm inclined to change the type of [connect] to expose the created
socket:

  val connect :
    ('addr where_to_connect
      -> (([ `Active ], 'addr) Socket.t * Reader.t * Writer.t) Deferred.t
    ) with_connect_options

That's a trivial change, and it would be easy to update existing uses.

-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.




From sweeks at janestreet.com  Wed Feb  6 21:24:28 2013
From: sweeks at janestreet.com (Stephen Weeks)
Date: Wed, 6 Feb 2013 16:24:28 -0500
Subject: Tcp.where_to_connect
In-Reply-To: <F6739C49-260F-44EB-AE10-56BB5FE87FD6@recoil.org>
References: <73B079E9-220C-4F43-BD7F-ED5FCF10BB99@recoil.org>
	<CACLX4jRD=LBUU1syFguLNos8GSGjK=6vmTaVJNQMTp5dBsKu_w@mail.gmail.com>
	<EE42769E-61FB-4092-98DF-D3313F6A33A5@recoil.org>
	<CACLX4jQjyR3a4SymbTg2G2M5sNEiPm8m61_5Oo3cX5hdDjnWVg@mail.gmail.com>
	<29507244-DD99-4D71-AD10-0B7F2EE96BE1@recoil.org>
	<CAPYVAiL21SQ02-cNfweU6p+DMrew8NSzqZom3eMNP9NNcZzAiA@mail.gmail.com>
	<F6739C49-260F-44EB-AE10-56BB5FE87FD6@recoil.org>
Message-ID: <CAPYVAiLE1nnch37-eQVUQf_jzJ+JHsksBww5C+Ghrmgf29Fxag@mail.gmail.com>


>> I'm inclined to change the type of [connect] to expose the created
>> socket:
>>
>>  val connect :
>>    ('addr where_to_connect
>>      -> (([ `Active ], 'addr) Socket.t * Reader.t * Writer.t) Deferred.t
>>    ) with_connect_options
>
> This would be useful.  It's mildly irritating to have to invoke a syscall
> to retrieve the name resolution result that just happened, though.
>
> Any reason not to just pass the Socket.Address.t instead of the Socket.t
> (which can be retrieved via the Reader/Writer, whereas the address can't
> directly be without the syscall).

I'd rather return the socket, so that one doesn't have to reconstruct
it.  We could easily add a function to extract the address from a
socket:

  val Socket.address
    : ([< `Bound | `Passive | `Active ], 'addr) t -> 'addr

-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.




From anil at recoil.org  Wed Feb  6 21:10:54 2013
From: anil at recoil.org (Anil Madhavapeddy)
Date: Wed, 6 Feb 2013 21:10:54 +0000
Subject: Tcp.where_to_connect
In-Reply-To: <CAPYVAiL21SQ02-cNfweU6p+DMrew8NSzqZom3eMNP9NNcZzAiA@mail.gmail.com>
References: <73B079E9-220C-4F43-BD7F-ED5FCF10BB99@recoil.org> <CACLX4jRD=LBUU1syFguLNos8GSGjK=6vmTaVJNQMTp5dBsKu_w@mail.gmail.com> <EE42769E-61FB-4092-98DF-D3313F6A33A5@recoil.org> <CACLX4jQjyR3a4SymbTg2G2M5sNEiPm8m61_5Oo3cX5hdDjnWVg@mail.gmail.com> <29507244-DD99-4D71-AD10-0B7F2EE96BE1@recoil.org> <CAPYVAiL21SQ02-cNfweU6p+DMrew8NSzqZom3eMNP9NNcZzAiA@mail.gmail.com>
Message-ID: <F6739C49-260F-44EB-AE10-56BB5FE87FD6@recoil.org>


On 6 Feb 2013, at 04:20, Stephen Weeks <sweeks at janestreet.com> wrote:

>> This snippet below does successfully retrieve a peername from a
>> Async_unix.Reader [rd]:
>> 
>> Socket.getpeername (Socket.of_fd (Reader.fd rd) Socket.Type.tcp) in
> 
> Yeah.  That's mildly unpleasant, having to reconstruct the [Socket.t].
> 
> If you call [connect_sock] rather than [connect], you would then have
> the socket and not need to reconstruct it.  But then you would have to
> duplicate [reader_writer_of_sock], which isn't exposed.
> 
> I'm inclined to change the type of [connect] to expose the created
> socket:
> 
>  val connect :
>    ('addr where_to_connect
>      -> (([ `Active ], 'addr) Socket.t * Reader.t * Writer.t) Deferred.t
>    ) with_connect_options

This would be useful.  It's mildly irritating to have to invoke a syscall
to retrieve the name resolution result that just happened, though.

Any reason not to just pass the Socket.Address.t instead of the Socket.t
(which can be retrieved via the Reader/Writer, whereas the address can't
directly be without the syscall).

-anil


-- 
You received this message because you are subscribed to the Google Groups "ocaml-core" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe at googlegroups.com.
For more options, visit https://groups.google.com/groups/opt_out.




