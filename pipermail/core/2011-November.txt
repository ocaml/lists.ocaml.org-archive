From yminsky at gmail.com  Tue Nov  1 01:12:08 2011
From: yminsky at gmail.com (Yaron Minsky)
Date: Mon, 31 Oct 2011 21:12:08 -0400
Subject: ocaml-core - Google Groups: Message Pending [{IIK-oq-Cu-H1LCoCeWIwALbbsGLyV9UF0}]
In-Reply-To: <pending-20111031174535.GM25160@janestreet.com>
References: <pending-20111031174535.GM25160@janestreet.com>
Message-ID: <CADKNfhJnnGuaDmpLQQ=pwK8ha1i3TRJYXyqX70c=i9zXugUifA@mail.gmail.com>

On Mon, Oct 31, 2011 at 1:45 PM, ocaml-core <
ocaml-core+msgappr at googlegroups.com> wrote:

>   A message has been sent to the ocaml-core<http://groups.google.com/group/ocaml-core?hl=en_US>group and is awaiting approval. We've included this message for your review.
>
> The message requires moderation because the user does not have permission
> to post.
>
> You can approve or reject<http://groups.google.com/group/ocaml-core/pendmsg?hl=en_US>this message or you can approve this message by replying to this email.
>  [image: Visit Google Groups]
>
> Start <https://groups.google.com/groups/create?hl=en_US&src=email> your
> own group, visit <http://groups.google.com/support/?hl=en_US&src=email>the help center, or
> report <https://groups.google.com/groups/abuse?hl=en_US&src=email> abuse.
>
>
> ---------- Forwarded message ----------
> From: Nathan Linger <nlinger at janestreet.com>
> To: ocaml-core at googlegroups.com
> Date: Mon, 31 Oct 2011 13:45:35 -0400
> Subject: Re: Making Async play better with others
>
> On 10/31/11 16:37, Anil Madhavapeddy wrote:
> > On 31 Oct 2011, at 15:06, Yaron Minsky wrote:
> >
> > > On 31/10/11 14:29, Anil Madhavapeddy wrote:
> > >> You could combine most of these by basing Async on top of libuv,
> > >> which is a superset of libev (the event library that Lwt uses to
> > >> abstract network I/O).
> > >>
> > >> https://github.com/joyent/libuv
> > >>
> > >> Crucially, libuv has good support for the Windows AIO model, and is
> > >> also what node.js uses to drive its event loop (so has widespread
> > >> usage).
> > >>
> > >> At first glance at Core, it looks like many of the Linux-specific
> > >> bits like high-res timers and thread scheduling are also covered by
> > >> it.
> > >
> > > How much do you know about the performance and quality of libuv?  I'm
> > > always nervous about shimming yet another layer between us and the
> > > bare metal.
> >
> > Nothing beyond flicking through the source code and occasionally being
> > cursed with using node.js (which works pretty well until you get to
> > the Javascript level :)
> >
> > It's pretty much the only game in town when it comes to cross-platform
> > C-based asynchronous programming libraries however (as far as I know).
>
> Isn't libevent[1] the same sort of thing?  I believe it is the C-based
> asynchronous programming library underlying memcached[2], which in turn
> is used by several high-profile web applications -- their website lists
> Wikipedia, WordPress.com, Flickr, Twitter, Typepad, Youtube, LiveJournal,
> Digg, Craigslist, and a handful of others I didn't recognize.
>
> I dusted off the ocaml bindings for libevent[3] at home last year and
> found them pretty usable for the small experiments I did (implementing a
> monadic interface for CML-style concurrent programming).  Their website[1]
> claims "Libevent should compile on Linux, *BSD, Mac OS X, Solaris,
> Windows, and more."
>
> [1] http://libevent.org/
> [2] http://www.memcached.org/
> [3] http://mmzeeman.home.xs4all.nl/ocaml/
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111031/2b07e248/attachment.html>

From yminsky at gmail.com  Tue Nov  1 02:06:16 2011
From: yminsky at gmail.com (Yaron Minsky)
Date: Mon, 31 Oct 2011 22:06:16 -0400
Subject: Making Async play better with others
In-Reply-To: <20111031174535.GM25160@janestreet.com>
References: <20111031142540.GZ26614@janestreet.com>
	<3DDCF997-C2CC-4D68-B7CA-AD810B8BF21D@recoil.org>
	<20111031150640.GF26614@janestreet.com>
	<40CAC937-937D-499A-A84F-976B8FBDC5D6@recoil.org>
	<20111031174535.GM25160@janestreet.com>
Message-ID: <CADKNfhLxK+xeyqUCbWRtv-QETJQArhQHuW6nstkp8R8nUaqLhA@mail.gmail.com>

There's also libev, which seems to be aimed as a simplified and cleaned-up
version of libevent.  But its support for Windows seems pretty minimal.

y

On Mon, Oct 31, 2011 at 1:45 PM, Nathan Linger <nlinger at janestreet.com>wrote:

>
> On 10/31/11 16:37, Anil Madhavapeddy wrote:
> > On 31 Oct 2011, at 15:06, Yaron Minsky wrote:
> >
> > > On 31/10/11 14:29, Anil Madhavapeddy wrote:
> > >> You could combine most of these by basing Async on top of libuv,
> > >> which is a superset of libev (the event library that Lwt uses to
> > >> abstract network I/O).
> > >>
> > >> https://github.com/joyent/libuv
> > >>
> > >> Crucially, libuv has good support for the Windows AIO model, and is
> > >> also what node.js uses to drive its event loop (so has widespread
> > >> usage).
> > >>
> > >> At first glance at Core, it looks like many of the Linux-specific
> > >> bits like high-res timers and thread scheduling are also covered by
> > >> it.
> > >
> > > How much do you know about the performance and quality of libuv?  I'm
> > > always nervous about shimming yet another layer between us and the
> > > bare metal.
> >
> > Nothing beyond flicking through the source code and occasionally being
> > cursed with using node.js (which works pretty well until you get to
> > the Javascript level :)
> >
> > It's pretty much the only game in town when it comes to cross-platform
> > C-based asynchronous programming libraries however (as far as I know).
>
> Isn't libevent[1] the same sort of thing?  I believe it is the C-based
> asynchronous programming library underlying memcached[2], which in turn
> is used by several high-profile web applications -- their website lists
> Wikipedia, WordPress.com, Flickr, Twitter, Typepad, Youtube, LiveJournal,
> Digg, Craigslist, and a handful of others I didn't recognize.
>
> I dusted off the ocaml bindings for libevent[3] at home last year and
> found them pretty usable for the small experiments I did (implementing a
> monadic interface for CML-style concurrent programming).  Their website[1]
> claims "Libevent should compile on Linux, *BSD, Mac OS X, Solaris,
> Windows, and more."
>
> [1] http://libevent.org/
> [2] http://www.memcached.org/
> [3] http://mmzeeman.home.xs4all.nl/ocaml/
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111031/efda4b69/attachment.html>

From dastapov at gmail.com  Tue Nov  1 10:24:04 2011
From: dastapov at gmail.com (Dmitry Astapov)
Date: Tue, 1 Nov 2011 03:24:04 -0700 (PDT)
Subject: Making Async play better with others
In-Reply-To: <20111031150640.GF26614@janestreet.com>
References: <20111031142540.GZ26614@janestreet.com> <3DDCF997-C2CC-4D68-B7CA-AD810B8BF21D@recoil.org>
 <20111031150640.GF26614@janestreet.com>
Message-ID: <f23a65f9-6de0-4147-b42a-25e90ad5fd96@l12g2000vby.googlegroups.com>


I read quite a lot about libev, which seems to be an ancestor of libuv
while I hunted for bugs in the code which had direct bindings for
epoll and kqueue. And in my experience, libev handles so many bugs and
quirky situations in underlying polling mechanisms that one must be
really, really condfident that he is rejecting libev (or any other
wrapper) for a good reason (that is, that he would do the same job
better).

Just search for EVBACKEND_EPOLL and EVBACKEND_KQUEUE here
http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod and then look at
the relevant parts of ev_epoll.c or ev_kqueue.c and think if you want
to have a walk through this particular minefield :)

On Oct 31, 3:06?pm, Yaron Minsky <ymin... at janestreet.com> wrote:
> On 31/10/11 14:29, Anil Madhavapeddy wrote:
>
> > You could combine most of these by basing Async on top of libuv,
> > which is a superset of libev (the event library that Lwt uses to
> > abstract network I/O).
>
> >https://github.com/joyent/libuv
>
> > Crucially, libuv has good support for the Windows AIO model, and is
> > also what node.js uses to drive its event loop (so has widespread
> > usage).
>
> > At first glance at Core, it looks like many of the Linux-specific
> > bits like high-res timers and thread scheduling are also covered by
> > it.
>
> How much do you know about the performance and quality of libuv? ?I'm
> always nervous about shimming yet another layer between us and the
> bare metal.
>
> y
>
>
>
> > Anil
>
> > On 31 Oct 2011, at 14:25, Yaron Minsky wrote:
>
> > > I'm wondering if anyone has opinions on what we should do to make
> > > Async more widely applicable. ?Here are some issues that jump to mind.
>
> > > - Porting to windows. ?People have proposed using libuv to do that.
> > > - Porting to non-Linux UNIX's: Right now, we depend on Core's
> > > ?Linux_ext module. ?I think the dependency is not deep, so
> > > ?conditional compilation might be a way to fix that.
> > > - Support for other polling mechanisms: like epoll and friends. ?Right
> > > ?now, it's all select. ?A pluggable engine mechanism like the one Lwt
> > > ?has could make sense here.
> > > - Interoperability with Lwt: ?It would be nice to make Async and Lwt
> > > ?libraries play together. ?Jeremie Dimino suggested that the best
> > > ?thing here might be to build a library for Lwt on top of Async.
> > > ?That seems plausible enough, but an engine in the other direction
> > > ?might be good too.
>
> > > I'm curious if people have opinions as to how to best handle these.
> > > I'm in particular wondering about conditional compilation as a
> > > solution. ?It seems messy, but I'm not sure what would be a better
> > > approach. ?One thing you could imagine is using first-class modules,
> > > where you stored a system-dependent module that provided the
> > > OS-specific functionality. ?But there's some performance compromise
> > > there (probably too small to matter compared to a system-call,
> > > though), and I'm not sure it comes out cleaner.
>
> > > y
>
> > > --
> > > Yaron Minsky
>
> --
> Yaron Minsky


From dastapov at gmail.com  Tue Nov  1 10:25:59 2011
From: dastapov at gmail.com (Dmitry Astapov)
Date: Tue, 1 Nov 2011 03:25:59 -0700 (PDT)
Subject: Making Async play better with others
In-Reply-To: <20111031174535.GM25160@janestreet.com>
References: <20111031142540.GZ26614@janestreet.com> <3DDCF997-C2CC-4D68-B7CA-AD810B8BF21D@recoil.org>
 <20111031150640.GF26614@janestreet.com> <40CAC937-937D-499A-A84F-976B8FBDC5D6@recoil.org>
 <20111031174535.GM25160@janestreet.com>
Message-ID: <c1b74545-452a-48c8-af0e-6baa5e7d412a@r2g2000vbj.googlegroups.com>


libev seems to be faster: http://libev.schmorp.de/bench.html

On Oct 31, 5:45?pm, Nathan Linger <nlin... at janestreet.com> wrote:
> On 10/31/11 16:37, Anil Madhavapeddy wrote:
>
>
>
> > On 31 Oct 2011, at 15:06, Yaron Minsky wrote:
>
> > > On 31/10/11 14:29, Anil Madhavapeddy wrote:
> > >> You could combine most of these by basing Async on top of libuv,
> > >> which is a superset of libev (the event library that Lwt uses to
> > >> abstract network I/O).
>
> > >>https://github.com/joyent/libuv
>
> > >> Crucially, libuv has good support for the Windows AIO model, and is
> > >> also what node.js uses to drive its event loop (so has widespread
> > >> usage).
>
> > >> At first glance at Core, it looks like many of the Linux-specific
> > >> bits like high-res timers and thread scheduling are also covered by
> > >> it.
>
> > > How much do you know about the performance and quality of libuv? ?I'm
> > > always nervous about shimming yet another layer between us and the
> > > bare metal.
>
> > Nothing beyond flicking through the source code and occasionally being
> > cursed with using node.js (which works pretty well until you get to
> > the Javascript level :)
>
> > It's pretty much the only game in town when it comes to cross-platform
> > C-based asynchronous programming libraries however (as far as I know).
>
> Isn't libevent[1] the same sort of thing? ?I believe it is the C-based
> asynchronous programming library underlying memcached[2], which in turn
> is used by several high-profile web applications -- their website lists
> Wikipedia, WordPress.com, Flickr, Twitter, Typepad, Youtube, LiveJournal,
> Digg, Craigslist, and a handful of others I didn't recognize.
>
> I dusted off the ocaml bindings for libevent[3] at home last year and
> found them pretty usable for the small experiments I did (implementing a
> monadic interface for CML-style concurrent programming). ?Their website[1]
> claims "Libevent should compile on Linux, *BSD, Mac OS X, Solaris,
> Windows, and more."
>
> [1]http://libevent.org/
> [2]http://www.memcached.org/
> [3]http://mmzeeman.home.xs4all.nl/ocaml/


From yminsky at gmail.com  Tue Nov  1 09:56:30 2011
From: yminsky at gmail.com (Yaron Minsky)
Date: Tue, 1 Nov 2011 05:56:30 -0400
Subject: Making Async play better with others
In-Reply-To: <20111101092046.GL23606@dark.recoil.org>
References: <20111031142540.GZ26614@janestreet.com>
	<3DDCF997-C2CC-4D68-B7CA-AD810B8BF21D@recoil.org>
	<20111031150640.GF26614@janestreet.com>
	<40CAC937-937D-499A-A84F-976B8FBDC5D6@recoil.org>
	<20111031174535.GM25160@janestreet.com>
	<20111101092046.GL23606@dark.recoil.org>
Message-ID: <CADKNfhJRRN0vuBNeB=1DbWrve5Y8t+uTa1vhwBVeBtVmZHjtAA@mail.gmail.com>

On Tue, Nov 1, 2011 at 5:20 AM, Anil Madhavapeddy <anil at recoil.org> wrote:

> On Mon, Oct 31, 2011 at 01:45:35PM -0400, Nathan Linger wrote:
> > > It's pretty much the only game in town when it comes to cross-platform
> > > C-based asynchronous programming libraries however (as far as I know).
> >
> > Isn't libevent[1] the same sort of thing?  I believe it is the C-based
> > asynchronous programming library underlying memcached[2], which in turn
> > is used by several high-profile web applications -- their website lists
> > Wikipedia, WordPress.com, Flickr, Twitter, Typepad, Youtube, LiveJournal,
> > Digg, Craigslist, and a handful of others I didn't recognize.
>
> Yeah, but only for network I/O.  POSIX unfortunately demands threads for
> doing efficient file I/O, which libuv also seems to handle as more of a
> full-service library.


True, although libuv also seems a lot less tried-and-tested.  Also, doesn't
libevent do more than just network I/O now that it has support for IOCP?
 From a quick look around, it looks like IOCP support hit in libevent
version 2.  That said, I'm not terribly confident of any of this...


> > I dusted off the ocaml bindings for libevent[3] at home last year and
> > found them pretty usable for the small experiments I did (implementing a
> > monadic interface for CML-style concurrent programming).  Their
> website[1]
> > claims "Libevent should compile on Linux, *BSD, Mac OS X, Solaris,
> > Windows, and more."
>
> libev and libevent are pretty closely matched feature-wise. The author of
> libev has also done libeio ( http://software.schmorp.de/pkg/libeio.html )
> to handle POSIX I/O, but Windows support is lacking.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111101/d0ea3920/attachment.html>

From yminsky at gmail.com  Tue Nov  1 10:30:16 2011
From: yminsky at gmail.com (Yaron Minsky)
Date: Tue, 1 Nov 2011 06:30:16 -0400
Subject: Making Async play better with others
In-Reply-To: <f23a65f9-6de0-4147-b42a-25e90ad5fd96@l12g2000vby.googlegroups.com>
References: <20111031142540.GZ26614@janestreet.com>
	<3DDCF997-C2CC-4D68-B7CA-AD810B8BF21D@recoil.org>
	<20111031150640.GF26614@janestreet.com>
	<f23a65f9-6de0-4147-b42a-25e90ad5fd96@l12g2000vby.googlegroups.com>
Message-ID: <CADKNfhLJPqxwZUBt4U2JRRHeeGKhuBom2KTvEX9sXVLkLLoNug@mail.gmail.com>

I agree that you want to use one of those libraries if you're programming
against epoll and kqueue.  I'm less sure that you should use them in
preference to select (which, from both some experiments I think Markus
Mottl ran, and other things I've heard is faster for moderate numbers of
file descriptors) is less clear.

But even once you agree you need one of these libraries, it's till not
clear to me how to pick amongst libev, libuv and libevent.  libevent seems
like the most mature, libev is claimed (by the author anyway) to be more
efficient, and libuv seems to treat Windows as a first-class citizen.  This
is to some degree why I like the idea of a pluggable engine, which would
prevent us from needing to commit to a single answer.

y

On Tue, Nov 1, 2011 at 6:24 AM, Dmitry Astapov <dastapov at gmail.com> wrote:

> I read quite a lot about libev, which seems to be an ancestor of libuv
> while I hunted for bugs in the code which had direct bindings for
> epoll and kqueue. And in my experience, libev handles so many bugs and
> quirky situations in underlying polling mechanisms that one must be
> really, really condfident that he is rejecting libev (or any other
> wrapper) for a good reason (that is, that he would do the same job
> better).
>
> Just search for EVBACKEND_EPOLL and EVBACKEND_KQUEUE here
> http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod and then look at
> the relevant parts of ev_epoll.c or ev_kqueue.c and think if you want
> to have a walk through this particular minefield :)
>
> On Oct 31, 3:06 pm, Yaron Minsky <ymin... at janestreet.com> wrote:
> > On 31/10/11 14:29, Anil Madhavapeddy wrote:
> >
> > > You could combine most of these by basing Async on top of libuv,
> > > which is a superset of libev (the event library that Lwt uses to
> > > abstract network I/O).
> >
> > >https://github.com/joyent/libuv
> >
> > > Crucially, libuv has good support for the Windows AIO model, and is
> > > also what node.js uses to drive its event loop (so has widespread
> > > usage).
> >
> > > At first glance at Core, it looks like many of the Linux-specific
> > > bits like high-res timers and thread scheduling are also covered by
> > > it.
> >
> > How much do you know about the performance and quality of libuv?  I'm
> > always nervous about shimming yet another layer between us and the
> > bare metal.
> >
> > y
> >
> >
> >
> > > Anil
> >
> > > On 31 Oct 2011, at 14:25, Yaron Minsky wrote:
> >
> > > > I'm wondering if anyone has opinions on what we should do to make
> > > > Async more widely applicable.  Here are some issues that jump to
> mind.
> >
> > > > - Porting to windows.  People have proposed using libuv to do that.
> > > > - Porting to non-Linux UNIX's: Right now, we depend on Core's
> > > >  Linux_ext module.  I think the dependency is not deep, so
> > > >  conditional compilation might be a way to fix that.
> > > > - Support for other polling mechanisms: like epoll and friends.
>  Right
> > > >  now, it's all select.  A pluggable engine mechanism like the one Lwt
> > > >  has could make sense here.
> > > > - Interoperability with Lwt:  It would be nice to make Async and Lwt
> > > >  libraries play together.  Jeremie Dimino suggested that the best
> > > >  thing here might be to build a library for Lwt on top of Async.
> > > >  That seems plausible enough, but an engine in the other direction
> > > >  might be good too.
> >
> > > > I'm curious if people have opinions as to how to best handle these.
> > > > I'm in particular wondering about conditional compilation as a
> > > > solution.  It seems messy, but I'm not sure what would be a better
> > > > approach.  One thing you could imagine is using first-class modules,
> > > > where you stored a system-dependent module that provided the
> > > > OS-specific functionality.  But there's some performance compromise
> > > > there (probably too small to matter compared to a system-call,
> > > > though), and I'm not sure it comes out cleaner.
> >
> > > > y
> >
> > > > --
> > > > Yaron Minsky
> >
> > --
> > Yaron Minsky
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111101/d1f7f667/attachment.html>

From yminsky at gmail.com  Tue Nov  1 10:32:44 2011
From: yminsky at gmail.com (Yaron Minsky)
Date: Tue, 1 Nov 2011 06:32:44 -0400
Subject: Making Async play better with others
In-Reply-To: <CADKNfhLJPqxwZUBt4U2JRRHeeGKhuBom2KTvEX9sXVLkLLoNug@mail.gmail.com>
References: <20111031142540.GZ26614@janestreet.com>
	<3DDCF997-C2CC-4D68-B7CA-AD810B8BF21D@recoil.org>
	<20111031150640.GF26614@janestreet.com>
	<f23a65f9-6de0-4147-b42a-25e90ad5fd96@l12g2000vby.googlegroups.com>
	<CADKNfhLJPqxwZUBt4U2JRRHeeGKhuBom2KTvEX9sXVLkLLoNug@mail.gmail.com>
Message-ID: <CADKNfhKUdL7j3kJKYPMRGuacpXRGriNZaQoHOOoJNNgx1h744A@mail.gmail.com>

Poking around a bit more, it looks like libuv uses libev (rather than
forking/reimplementing), which makes libuv sound more interesting...

y

On Tue, Nov 1, 2011 at 6:30 AM, Yaron Minsky <yminsky at gmail.com> wrote:

> I agree that you want to use one of those libraries if you're programming
> against epoll and kqueue.  I'm less sure that you should use them in
> preference to select (which, from both some experiments I think Markus
> Mottl ran, and other things I've heard is faster for moderate numbers of
> file descriptors) is less clear.
>
> But even once you agree you need one of these libraries, it's till not
> clear to me how to pick amongst libev, libuv and libevent.  libevent seems
> like the most mature, libev is claimed (by the author anyway) to be more
> efficient, and libuv seems to treat Windows as a first-class citizen.  This
> is to some degree why I like the idea of a pluggable engine, which would
> prevent us from needing to commit to a single answer.
>
> y
>
>
> On Tue, Nov 1, 2011 at 6:24 AM, Dmitry Astapov <dastapov at gmail.com> wrote:
>
>> I read quite a lot about libev, which seems to be an ancestor of libuv
>> while I hunted for bugs in the code which had direct bindings for
>> epoll and kqueue. And in my experience, libev handles so many bugs and
>> quirky situations in underlying polling mechanisms that one must be
>> really, really condfident that he is rejecting libev (or any other
>> wrapper) for a good reason (that is, that he would do the same job
>> better).
>>
>> Just search for EVBACKEND_EPOLL and EVBACKEND_KQUEUE here
>> http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod and then look at
>> the relevant parts of ev_epoll.c or ev_kqueue.c and think if you want
>> to have a walk through this particular minefield :)
>>
>> On Oct 31, 3:06 pm, Yaron Minsky <ymin... at janestreet.com> wrote:
>> > On 31/10/11 14:29, Anil Madhavapeddy wrote:
>> >
>> > > You could combine most of these by basing Async on top of libuv,
>> > > which is a superset of libev (the event library that Lwt uses to
>> > > abstract network I/O).
>> >
>> > >https://github.com/joyent/libuv
>> >
>> > > Crucially, libuv has good support for the Windows AIO model, and is
>> > > also what node.js uses to drive its event loop (so has widespread
>> > > usage).
>> >
>> > > At first glance at Core, it looks like many of the Linux-specific
>> > > bits like high-res timers and thread scheduling are also covered by
>> > > it.
>> >
>> > How much do you know about the performance and quality of libuv?  I'm
>> > always nervous about shimming yet another layer between us and the
>> > bare metal.
>> >
>> > y
>> >
>> >
>> >
>> > > Anil
>> >
>> > > On 31 Oct 2011, at 14:25, Yaron Minsky wrote:
>> >
>> > > > I'm wondering if anyone has opinions on what we should do to make
>> > > > Async more widely applicable.  Here are some issues that jump to
>> mind.
>> >
>> > > > - Porting to windows.  People have proposed using libuv to do that.
>> > > > - Porting to non-Linux UNIX's: Right now, we depend on Core's
>> > > >  Linux_ext module.  I think the dependency is not deep, so
>> > > >  conditional compilation might be a way to fix that.
>> > > > - Support for other polling mechanisms: like epoll and friends.
>>  Right
>> > > >  now, it's all select.  A pluggable engine mechanism like the one
>> Lwt
>> > > >  has could make sense here.
>> > > > - Interoperability with Lwt:  It would be nice to make Async and Lwt
>> > > >  libraries play together.  Jeremie Dimino suggested that the best
>> > > >  thing here might be to build a library for Lwt on top of Async.
>> > > >  That seems plausible enough, but an engine in the other direction
>> > > >  might be good too.
>> >
>> > > > I'm curious if people have opinions as to how to best handle these.
>> > > > I'm in particular wondering about conditional compilation as a
>> > > > solution.  It seems messy, but I'm not sure what would be a better
>> > > > approach.  One thing you could imagine is using first-class modules,
>> > > > where you stored a system-dependent module that provided the
>> > > > OS-specific functionality.  But there's some performance compromise
>> > > > there (probably too small to matter compared to a system-call,
>> > > > though), and I'm not sure it comes out cleaner.
>> >
>> > > > y
>> >
>> > > > --
>> > > > Yaron Minsky
>> >
>> > --
>> > Yaron Minsky
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111101/7120d75e/attachment.html>

From anil at recoil.org  Tue Nov  1 09:20:46 2011
From: anil at recoil.org (Anil Madhavapeddy)
Date: Tue, 1 Nov 2011 09:20:46 +0000
Subject: Making Async play better with others
In-Reply-To: <20111031174535.GM25160@janestreet.com>
References: <20111031142540.GZ26614@janestreet.com>
 <3DDCF997-C2CC-4D68-B7CA-AD810B8BF21D@recoil.org>
 <20111031150640.GF26614@janestreet.com>
 <40CAC937-937D-499A-A84F-976B8FBDC5D6@recoil.org>
 <20111031174535.GM25160@janestreet.com>
Message-ID: <20111101092046.GL23606@dark.recoil.org>


On Mon, Oct 31, 2011 at 01:45:35PM -0400, Nathan Linger wrote:
> > It's pretty much the only game in town when it comes to cross-platform
> > C-based asynchronous programming libraries however (as far as I know).
> 
> Isn't libevent[1] the same sort of thing?  I believe it is the C-based
> asynchronous programming library underlying memcached[2], which in turn
> is used by several high-profile web applications -- their website lists
> Wikipedia, WordPress.com, Flickr, Twitter, Typepad, Youtube, LiveJournal,
> Digg, Craigslist, and a handful of others I didn't recognize.

Yeah, but only for network I/O.  POSIX unfortunately demands threads for
doing efficient file I/O, which libuv also seems to handle as more of a
full-service library.

> I dusted off the ocaml bindings for libevent[3] at home last year and
> found them pretty usable for the small experiments I did (implementing a
> monadic interface for CML-style concurrent programming).  Their website[1]
> claims "Libevent should compile on Linux, *BSD, Mac OS X, Solaris,
> Windows, and more."

libev and libevent are pretty closely matched feature-wise. The author of
libev has also done libeio ( http://software.schmorp.de/pkg/libeio.html )
to handle POSIX I/O, but Windows support is lacking.

-- 
Anil Madhavapeddy                                 http://anil.recoil.org


From feinberg at gmail.com  Wed Nov  2 22:13:23 2011
From: feinberg at gmail.com (Alex Feinberg)
Date: Wed, 2 Nov 2011 15:13:23 -0700
Subject: Making Async play better with others
In-Reply-To: <CADKNfhKUdL7j3kJKYPMRGuacpXRGriNZaQoHOOoJNNgx1h744A@mail.gmail.com>
References: <20111031142540.GZ26614@janestreet.com>
	<3DDCF997-C2CC-4D68-B7CA-AD810B8BF21D@recoil.org>
	<20111031150640.GF26614@janestreet.com>
	<f23a65f9-6de0-4147-b42a-25e90ad5fd96@l12g2000vby.googlegroups.com>
	<CADKNfhLJPqxwZUBt4U2JRRHeeGKhuBom2KTvEX9sXVLkLLoNug@mail.gmail.com>
	<CADKNfhKUdL7j3kJKYPMRGuacpXRGriNZaQoHOOoJNNgx1h744A@mail.gmail.com>
Message-ID: <CAKYjr2ApDOzFU5Lwmqv1d=3zqn7SydpwXM4oGuShhZYNsKcaTQ@mail.gmail.com>


libevent2 is also worth investigating. The "libevent book" explains it
very well:

http://www.wangafu.net/~nickm/libevent-book/

It adds thread safety and, as a result of additional work on the
Windows/IOCP port, a great deal of bugfixes as compared to libevent1.

Thanks,
- Alex

On Tue, Nov 1, 2011 at 3:32 AM, Yaron Minsky <yminsky at gmail.com> wrote:
> Poking around a bit more, it looks like libuv uses libev (rather than
> forking/reimplementing), which makes libuv sound more interesting...
> y
>
> On Tue, Nov 1, 2011 at 6:30 AM, Yaron Minsky <yminsky at gmail.com> wrote:
>>
>> I agree that you want to use one of those libraries if you're programming
>> against epoll and kqueue. ?I'm less sure that you should use them in
>> preference to select (which, from both some experiments I think Markus Mottl
>> ran, and other things I've heard is faster for moderate numbers of file
>> descriptors) is less clear.
>> But even once you agree you need one of these libraries, it's till not
>> clear to me how to pick amongst libev, libuv and libevent. ?libevent seems
>> like the most mature, libev is claimed (by the author anyway) to be more
>> efficient, and libuv seems to treat Windows as a first-class citizen. ?This
>> is to some degree why I like the idea of a pluggable engine, which would
>> prevent us from needing to commit to a single answer.
>> y
>>
>> On Tue, Nov 1, 2011 at 6:24 AM, Dmitry Astapov <dastapov at gmail.com> wrote:
>>>
>>> I read quite a lot about libev, which seems to be an ancestor of libuv
>>> while I hunted for bugs in the code which had direct bindings for
>>> epoll and kqueue. And in my experience, libev handles so many bugs and
>>> quirky situations in underlying polling mechanisms that one must be
>>> really, really condfident that he is rejecting libev (or any other
>>> wrapper) for a good reason (that is, that he would do the same job
>>> better).
>>>
>>> Just search for EVBACKEND_EPOLL and EVBACKEND_KQUEUE here
>>> http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod and then look at
>>> the relevant parts of ev_epoll.c or ev_kqueue.c and think if you want
>>> to have a walk through this particular minefield :)
>>>
>>> On Oct 31, 3:06?pm, Yaron Minsky <ymin... at janestreet.com> wrote:
>>> > On 31/10/11 14:29, Anil Madhavapeddy wrote:
>>> >
>>> > > You could combine most of these by basing Async on top of libuv,
>>> > > which is a superset of libev (the event library that Lwt uses to
>>> > > abstract network I/O).
>>> >
>>> > >https://github.com/joyent/libuv
>>> >
>>> > > Crucially, libuv has good support for the Windows AIO model, and is
>>> > > also what node.js uses to drive its event loop (so has widespread
>>> > > usage).
>>> >
>>> > > At first glance at Core, it looks like many of the Linux-specific
>>> > > bits like high-res timers and thread scheduling are also covered by
>>> > > it.
>>> >
>>> > How much do you know about the performance and quality of libuv? ?I'm
>>> > always nervous about shimming yet another layer between us and the
>>> > bare metal.
>>> >
>>> > y
>>> >
>>> >
>>> >
>>> > > Anil
>>> >
>>> > > On 31 Oct 2011, at 14:25, Yaron Minsky wrote:
>>> >
>>> > > > I'm wondering if anyone has opinions on what we should do to make
>>> > > > Async more widely applicable. ?Here are some issues that jump to
>>> > > > mind.
>>> >
>>> > > > - Porting to windows. ?People have proposed using libuv to do that.
>>> > > > - Porting to non-Linux UNIX's: Right now, we depend on Core's
>>> > > > ?Linux_ext module. ?I think the dependency is not deep, so
>>> > > > ?conditional compilation might be a way to fix that.
>>> > > > - Support for other polling mechanisms: like epoll and friends.
>>> > > > ?Right
>>> > > > ?now, it's all select. ?A pluggable engine mechanism like the one
>>> > > > Lwt
>>> > > > ?has could make sense here.
>>> > > > - Interoperability with Lwt: ?It would be nice to make Async and
>>> > > > Lwt
>>> > > > ?libraries play together. ?Jeremie Dimino suggested that the best
>>> > > > ?thing here might be to build a library for Lwt on top of Async.
>>> > > > ?That seems plausible enough, but an engine in the other direction
>>> > > > ?might be good too.
>>> >
>>> > > > I'm curious if people have opinions as to how to best handle these.
>>> > > > I'm in particular wondering about conditional compilation as a
>>> > > > solution. ?It seems messy, but I'm not sure what would be a better
>>> > > > approach. ?One thing you could imagine is using first-class
>>> > > > modules,
>>> > > > where you stored a system-dependent module that provided the
>>> > > > OS-specific functionality. ?But there's some performance compromise
>>> > > > there (probably too small to matter compared to a system-call,
>>> > > > though), and I'm not sure it comes out cleaner.
>>> >
>>> > > > y
>>> >
>>> > > > --
>>> > > > Yaron Minsky
>>> >
>>> > --
>>> > Yaron Minsky
>
>


From yminsky at janestreet.com  Thu Nov  3 01:44:17 2011
From: yminsky at janestreet.com (Yaron Minsky)
Date: Wed, 2 Nov 2011 21:44:17 -0400
Subject: Making Async play better with others
In-Reply-To: <B3E29DB8-D8F3-487C-A6D7-8D44CA5186AB@recoil.org>
References: <20111031142540.GZ26614@janestreet.com>
 <3DDCF997-C2CC-4D68-B7CA-AD810B8BF21D@recoil.org>
 <20111031150640.GF26614@janestreet.com>
 <f23a65f9-6de0-4147-b42a-25e90ad5fd96@l12g2000vby.googlegroups.com>
 <CADKNfhLJPqxwZUBt4U2JRRHeeGKhuBom2KTvEX9sXVLkLLoNug@mail.gmail.com>
 <CADKNfhKUdL7j3kJKYPMRGuacpXRGriNZaQoHOOoJNNgx1h744A@mail.gmail.com>
 <B3E29DB8-D8F3-487C-A6D7-8D44CA5186AB@recoil.org>
Message-ID: <20111103014417.GC15646@janestreet.com>


On 02/11/11 22:24, Anil Madhavapeddy wrote:
> A pluggable engine will give you the lowest common denominator
> and/or a poorly tested set of alternatives (most users will just one
> the default one). There are observable differences between the
> backends (e.g. select returns immediately if you pass in a block
> device fd, whereas epoll can often wedge forever and never return).
> 
> The reason I like libuv is because its most aligned with the Core
> "full service" feature set, whereas the rest are mostly just network
> I/O.  Node.js is very similar in terms of its runtime architecture
> to Core+Async (C non-blocking runtime, language VM activations).
> Letting that community deal with platform portability would save a
> lot of time.
>  
> I've written servers in both libevent and libev, and they are both
> pretty good for network AIO. The scalability differences between
> them won't matter for 99% of users.

That's not a crazy idea.  As I said, it's a little hard to imagine
that we'd want to run our own apps through libuv, but I could imagine
it as an alternate backend.

I agree that a general-purpose pluggable engine sounds like it would
cause trouble.  But maybe we can get to supporting two backends.

y


-- 
Yaron Minsky


From anil at recoil.org  Wed Nov  2 22:24:33 2011
From: anil at recoil.org (Anil Madhavapeddy)
Date: Wed, 2 Nov 2011 22:24:33 +0000
Subject: Making Async play better with others
In-Reply-To: <CADKNfhKUdL7j3kJKYPMRGuacpXRGriNZaQoHOOoJNNgx1h744A@mail.gmail.com>
References: <20111031142540.GZ26614@janestreet.com> <3DDCF997-C2CC-4D68-B7CA-AD810B8BF21D@recoil.org> <20111031150640.GF26614@janestreet.com> <f23a65f9-6de0-4147-b42a-25e90ad5fd96@l12g2000vby.googlegroups.com> <CADKNfhLJPqxwZUBt4U2JRRHeeGKhuBom2KTvEX9sXVLkLLoNug@mail.gmail.com> <CADKNfhKUdL7j3kJKYPMRGuacpXRGriNZaQoHOOoJNNgx1h744A@mail.gmail.com>
Message-ID: <B3E29DB8-D8F3-487C-A6D7-8D44CA5186AB@recoil.org>

A pluggable engine will give you the lowest common denominator and/or a poorly tested set of alternatives (most users will just one the default one). There are observable differences between the backends (e.g. select returns immediately if you pass in a block device fd, whereas epoll can often wedge forever and never return).

The reason I like libuv is because its most aligned with the Core "full service" feature set, whereas the rest are mostly just network I/O.  Node.js is very similar in terms of its runtime architecture to Core+Async (C non-blocking runtime, language VM activations).  Letting that community deal with platform portability would save a lot of time.
 
I've written servers in both libevent and libev, and they are both pretty good for network AIO. The scalability differences between them won't matter for 99% of users.

Anil

On 1 Nov 2011, at 10:32, Yaron Minsky wrote:

> Poking around a bit more, it looks like libuv uses libev (rather than forking/reimplementing), which makes libuv sound more interesting...
> 
> y
> 
> On Tue, Nov 1, 2011 at 6:30 AM, Yaron Minsky <yminsky at gmail.com> wrote:
> I agree that you want to use one of those libraries if you're programming against epoll and kqueue.  I'm less sure that you should use them in preference to select (which, from both some experiments I think Markus Mottl ran, and other things I've heard is faster for moderate numbers of file descriptors) is less clear.
> 
> But even once you agree you need one of these libraries, it's till not clear to me how to pick amongst libev, libuv and libevent.  libevent seems like the most mature, libev is claimed (by the author anyway) to be more efficient, and libuv seems to treat Windows as a first-class citizen.  This is to some degree why I like the idea of a pluggable engine, which would prevent us from needing to commit to a single answer.
> 
> y
> 
> 
> On Tue, Nov 1, 2011 at 6:24 AM, Dmitry Astapov <dastapov at gmail.com> wrote:
> I read quite a lot about libev, which seems to be an ancestor of libuv
> while I hunted for bugs in the code which had direct bindings for
> epoll and kqueue. And in my experience, libev handles so many bugs and
> quirky situations in underlying polling mechanisms that one must be
> really, really condfident that he is rejecting libev (or any other
> wrapper) for a good reason (that is, that he would do the same job
> better).
> 
> Just search for EVBACKEND_EPOLL and EVBACKEND_KQUEUE here
> http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod and then look at
> the relevant parts of ev_epoll.c or ev_kqueue.c and think if you want
> to have a walk through this particular minefield :)
> 
> On Oct 31, 3:06 pm, Yaron Minsky <ymin... at janestreet.com> wrote:
> > On 31/10/11 14:29, Anil Madhavapeddy wrote:
> >
> > > You could combine most of these by basing Async on top of libuv,
> > > which is a superset of libev (the event library that Lwt uses to
> > > abstract network I/O).
> >
> > >https://github.com/joyent/libuv
> >
> > > Crucially, libuv has good support for the Windows AIO model, and is
> > > also what node.js uses to drive its event loop (so has widespread
> > > usage).
> >
> > > At first glance at Core, it looks like many of the Linux-specific
> > > bits like high-res timers and thread scheduling are also covered by
> > > it.
> >
> > How much do you know about the performance and quality of libuv?  I'm
> > always nervous about shimming yet another layer between us and the
> > bare metal.
> >
> > y
> >
> >
> >
> > > Anil
> >
> > > On 31 Oct 2011, at 14:25, Yaron Minsky wrote:
> >
> > > > I'm wondering if anyone has opinions on what we should do to make
> > > > Async more widely applicable.  Here are some issues that jump to mind.
> >
> > > > - Porting to windows.  People have proposed using libuv to do that.
> > > > - Porting to non-Linux UNIX's: Right now, we depend on Core's
> > > >  Linux_ext module.  I think the dependency is not deep, so
> > > >  conditional compilation might be a way to fix that.
> > > > - Support for other polling mechanisms: like epoll and friends.  Right
> > > >  now, it's all select.  A pluggable engine mechanism like the one Lwt
> > > >  has could make sense here.
> > > > - Interoperability with Lwt:  It would be nice to make Async and Lwt
> > > >  libraries play together.  Jeremie Dimino suggested that the best
> > > >  thing here might be to build a library for Lwt on top of Async.
> > > >  That seems plausible enough, but an engine in the other direction
> > > >  might be good too.
> >
> > > > I'm curious if people have opinions as to how to best handle these.
> > > > I'm in particular wondering about conditional compilation as a
> > > > solution.  It seems messy, but I'm not sure what would be a better
> > > > approach.  One thing you could imagine is using first-class modules,
> > > > where you stored a system-dependent module that provided the
> > > > OS-specific functionality.  But there's some performance compromise
> > > > there (probably too small to matter compared to a system-call,
> > > > though), and I'm not sure it comes out cleaner.
> >
> > > > y
> >
> > > > --
> > > > Yaron Minsky
> >
> > --
> > Yaron Minsky
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111102/58990559/attachment.html>

From ocaml-core at googlegroups.com  Fri Nov  4 03:34:41 2011
From: ocaml-core at googlegroups.com (ocaml-core at googlegroups.com)
Date: Fri, 04 Nov 2011 03:34:41 +0000
Subject: Moderator's spam report for ocaml-core@googlegroups.com
Message-ID: <0016e6d64709ac701304b0e062f5@google.com>


This message is being sent to you because you are a moderator of the group ocaml-core.

The following suspicious messages were sent to your group, but are being held in your moderation queue because they are classified as likely spam messages.

If you take no action, all the messages below will be discarded automatically as spam.

However, if you see any messages that are not spam below, you may approve them individually by going to:

http://groups.google.com/group/ocaml-core/pendmsg

Please do not mark this notification as spam; this is a service for group moderators. If you do not wish to receive these notifications in the future, you may change your preferences by going to:

http://groups.google.com/group/ocaml-core/manage_post


------- 1 of 1  -------
Subject: SAVE MY LIFE!!
>From: Ms Michelle Marcel <am4758966 at yahoo.com.ph>
Date: Nov 03 12:18AM +0800

SAVE MY LIFE!! 

  ?

  Quite frankly, I 
know it may have sounded pretty strange for you on why I Chose to 
contact you as you are a complete stranger to me and I must tell you 
this, I contacted you for the simple reason that we do not know

Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=8111488030256193679


For more information about this message, please visit:
http://groups.google.com/support/bin/answer.py?hl=en&answer=165806



From anil at recoil.org  Fri Nov  4 09:41:47 2011
From: anil at recoil.org (Anil Madhavapeddy)
Date: Fri, 4 Nov 2011 09:41:47 +0000
Subject: Making Async play better with others
In-Reply-To: <20111103014417.GC15646@janestreet.com>
References: <20111031142540.GZ26614@janestreet.com>
 <3DDCF997-C2CC-4D68-B7CA-AD810B8BF21D@recoil.org>
 <20111031150640.GF26614@janestreet.com>
 <f23a65f9-6de0-4147-b42a-25e90ad5fd96@l12g2000vby.googlegroups.com>
 <CADKNfhLJPqxwZUBt4U2JRRHeeGKhuBom2KTvEX9sXVLkLLoNug@mail.gmail.com>
 <CADKNfhKUdL7j3kJKYPMRGuacpXRGriNZaQoHOOoJNNgx1h744A@mail.gmail.com>
 <B3E29DB8-D8F3-487C-A6D7-8D44CA5186AB@recoil.org>
 <20111103014417.GC15646@janestreet.com>
Message-ID: <20111104094147.GC10177@dark.recoil.org>


On Wed, Nov 02, 2011 at 09:44:17PM -0400, Yaron Minsky wrote:
> On 02/11/11 22:24, Anil Madhavapeddy wrote:
> > A pluggable engine will give you the lowest common denominator
> > and/or a poorly tested set of alternatives (most users will just one
> > the default one). There are observable differences between the
> > backends (e.g. select returns immediately if you pass in a block
> > device fd, whereas epoll can often wedge forever and never return).
> > 
> > The reason I like libuv is because its most aligned with the Core
> > "full service" feature set, whereas the rest are mostly just network
> > I/O.  Node.js is very similar in terms of its runtime architecture
> > to Core+Async (C non-blocking runtime, language VM activations).
> > Letting that community deal with platform portability would save a
> > lot of time.
> >  
> > I've written servers in both libevent and libev, and they are both
> > pretty good for network AIO. The scalability differences between
> > them won't matter for 99% of users.
> 
> That's not a crazy idea.  As I said, it's a little hard to imagine
> that we'd want to run our own apps through libuv, but I could imagine
> it as an alternate backend.

Yeah, two backends would work if they both have users (Jane Street for the
direct one, and the "community" for the libuv one). I imagine they would
converge as confidence grows (or not) in one or the other.

> I agree that a general-purpose pluggable engine sounds like it would
> cause trouble.  But maybe we can get to supporting two backends.

Agreed. It would certainly make the various *BSD and Windows ports much
more tractable.

-- 
Anil Madhavapeddy                                 http://anil.recoil.org


From ocaml-core at googlegroups.com  Tue Nov  8 02:47:22 2011
From: ocaml-core at googlegroups.com (ocaml-core at googlegroups.com)
Date: Tue, 08 Nov 2011 02:47:22 +0000
Subject: Moderator's spam report for ocaml-core@googlegroups.com
Message-ID: <00504502c89ad1e07804b1303059@google.com>


This message is being sent to you because you are a moderator of the group ocaml-core.

The following suspicious messages were sent to your group, but are being held in your moderation queue because they are classified as likely spam messages.

If you take no action, all the messages below will be discarded automatically as spam.

However, if you see any messages that are not spam below, you may approve them individually by going to:

http://groups.google.com/group/ocaml-core/pendmsg

Please do not mark this notification as spam; this is a service for group moderators. If you do not wish to receive these notifications in the future, you may change your preferences by going to:

http://groups.google.com/group/ocaml-core/manage_post


------- 1 of 3  -------
Subject: Gajotres world of web development
>From: info at gajotres.com
Date: Nov 04 08:42PM +0100

Create a sticky sidebar or box - jscript magic In my last post, I described Fail Tracker?s simple repository model for abstracting LINQ to NHibernate, which is used for all data access in Fail Tracker. One reason I chose to implement an abstraction

Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=4039981735140556634

------- 2 of 3  -------
Subject: Please I Need Your Help
>From: edith Okono <okonoedith at yahoo.com.ph>
Date: Nov 05 03:58AM +0800

>From Edith Okono Please I Need Your Help.



Dearest One,



I am Edith Okono, 21 years old from Ivory Coast . The only Daughter of Mrs Grace Okono . I have 9.5 million USD which was made by my mother before she died in Oct 2009 which is left

Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=3441051738231376644

------- 3 of 3  -------
Subject: Gajotres world of web development
>From: info at gajotres.com
Date: Nov 05 02:19PM +0100

Create a sticky sidebar or box - jscript magic In my last post, I described Fail Tracker?s simple repository model for abstracting LINQ to NHibernate, which is used for all data access in Fail Tracker. One reason I chose to implement an abstraction

Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=1381870197074736034


For more information about this message, please visit:
http://groups.google.com/support/bin/answer.py?hl=en&answer=165806



From agarwal1975 at gmail.com  Wed Nov  9 17:11:32 2011
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Wed, 9 Nov 2011 12:11:32 -0500
Subject: bin-prot compile error related to libc version
Message-ID: <CAMu2m2JwNzRTVt5UUJmMSsP_aRH2Lz=25hWicgsFNBAv5owQ0w@mail.gmail.com>

When compiling bin-prot via godi, I get the error below. We have libc
version 2.5, which seems not to support the missing functions. Is this
dependency removed in any branch? (Also, let me know if there is a better
mailing list to use for bin-prot.)

I: Running command '/home/aa144/local/godi/bin/ocamlbuild
syntax/pa_bin_prot.cma lib/libbin_prot.a lib/dllbin_prot.so
lib/bin_prot.cma lib/bin_prot.cmxa lib/bin_prot.a lib_test/example.byte
-tag debug'
Finished, 1 target (0 cached) in 00:00:00.
+ ocamlfind ocamlc -ccopt -pipe -ccopt -g -ccopt -fPIC -ccopt -O2 -ccopt
-fomit-frame-pointer -ccopt -fsigned-char -ccopt -Wall -ccopt -pedantic
-ccopt -Wextra -ccopt -Wunused -ccopt -Werror -ccopt -Wno-long-long -c
lib/write_stubs.c
cc1: warnings being treated as errors
lib/write_stubs.c: In function 'do_write_int16':
lib/write_stubs.c:76: warning: implicit declaration of function 'htole16'
lib/write_stubs.c: In function 'do_write_int32':
lib/write_stubs.c:90: warning: implicit declaration of function 'htole32'
lib/write_stubs.c: In function 'do_write_int64':
lib/write_stubs.c:105: warning: implicit declaration of function 'htole64'
lib/write_stubs.c: In function 'write_network16_int_stub':
lib/write_stubs.c:557: warning: implicit declaration of function 'htobe16'
lib/write_stubs.c: In function 'write_network32_int_stub':
lib/write_stubs.c:567: warning: implicit declaration of function 'htobe32'
lib/write_stubs.c: In function 'write_network64_int_stub':
lib/write_stubs.c:588: warning: implicit declaration of function 'htobe64'
Command exited with code 2.
Compilation unsuccessful after building 8 targets (0 cached) in 00:00:01.
E: Command '/home/aa144/local/godi/bin/ocamlbuild syntax/pa_bin_prot.cma
lib/libbin_prot.a lib/dllbin_prot.so lib/bin_prot.cma lib/bin_prot.cmxa
lib/bin_prot.a lib_test/example.byte -tag debug' terminated with error code
10
make[7]: *** [all] Error 1
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111109/f050c998/attachment.html>

From yminsky at gmail.com  Thu Nov 10 02:12:52 2011
From: yminsky at gmail.com (Yaron Minsky)
Date: Wed, 9 Nov 2011 21:12:52 -0500
Subject: bin-prot compile error related to libc version
In-Reply-To: <CAMu2m2JwNzRTVt5UUJmMSsP_aRH2Lz=25hWicgsFNBAv5owQ0w@mail.gmail.com>
References: <CAMu2m2JwNzRTVt5UUJmMSsP_aRH2Lz=25hWicgsFNBAv5owQ0w@mail.gmail.com>
Message-ID: <CADKNfhLhvs6OT7Oq4KWj1HSbmi-jp9F+W4Gc5qwuFRsK2_ofJg@mail.gmail.com>

Just to be clear, what platform are you running on, and what version of
bin-prot and type-conv are you using?

On Wed, Nov 9, 2011 at 12:11 PM, Ashish Agarwal <agarwal1975 at gmail.com>wrote:

> When compiling bin-prot via godi, I get the error below. We have libc
> version 2.5, which seems not to support the missing functions. Is this
> dependency removed in any branch? (Also, let me know if there is a better
> mailing list to use for bin-prot.)
>
> I: Running command '/home/aa144/local/godi/bin/ocamlbuild
> syntax/pa_bin_prot.cma lib/libbin_prot.a lib/dllbin_prot.so
> lib/bin_prot.cma lib/bin_prot.cmxa lib/bin_prot.a lib_test/example.byte
> -tag debug'
> Finished, 1 target (0 cached) in 00:00:00.
> + ocamlfind ocamlc -ccopt -pipe -ccopt -g -ccopt -fPIC -ccopt -O2 -ccopt
> -fomit-frame-pointer -ccopt -fsigned-char -ccopt -Wall -ccopt -pedantic
> -ccopt -Wextra -ccopt -Wunused -ccopt -Werror -ccopt -Wno-long-long -c
> lib/write_stubs.c
> cc1: warnings being treated as errors
> lib/write_stubs.c: In function 'do_write_int16':
> lib/write_stubs.c:76: warning: implicit declaration of function 'htole16'
> lib/write_stubs.c: In function 'do_write_int32':
> lib/write_stubs.c:90: warning: implicit declaration of function 'htole32'
> lib/write_stubs.c: In function 'do_write_int64':
> lib/write_stubs.c:105: warning: implicit declaration of function 'htole64'
> lib/write_stubs.c: In function 'write_network16_int_stub':
> lib/write_stubs.c:557: warning: implicit declaration of function 'htobe16'
> lib/write_stubs.c: In function 'write_network32_int_stub':
> lib/write_stubs.c:567: warning: implicit declaration of function 'htobe32'
> lib/write_stubs.c: In function 'write_network64_int_stub':
> lib/write_stubs.c:588: warning: implicit declaration of function 'htobe64'
> Command exited with code 2.
> Compilation unsuccessful after building 8 targets (0 cached) in 00:00:01.
> E: Command '/home/aa144/local/godi/bin/ocamlbuild syntax/pa_bin_prot.cma
> lib/libbin_prot.a lib/dllbin_prot.so lib/bin_prot.cma lib/bin_prot.cmxa
> lib/bin_prot.a lib_test/example.byte -tag debug' terminated with error code
> 10
> make[7]: *** [all] Error 1
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111109/ecb5625c/attachment.html>

From agarwal1975 at gmail.com  Thu Nov 10 13:53:13 2011
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Thu, 10 Nov 2011 08:53:13 -0500
Subject: bin-prot compile error related to libc version
In-Reply-To: <CADKNfhLhvs6OT7Oq4KWj1HSbmi-jp9F+W4Gc5qwuFRsK2_ofJg@mail.gmail.com>
References: <CAMu2m2JwNzRTVt5UUJmMSsP_aRH2Lz=25hWicgsFNBAv5owQ0w@mail.gmail.com>
 <CADKNfhLhvs6OT7Oq4KWj1HSbmi-jp9F+W4Gc5qwuFRsK2_ofJg@mail.gmail.com>
Message-ID: <CAMu2m2JTMsv0+M8zLorOiY-5m1tuWZ9P0LFGj9ycf2YU6tgZ8w@mail.gmail.com>

Platforms: CentOS 5.5, RHEL 5.1, and RHEL 5.3
bin-prot version 2.0.6
typ-conv version: 3.0.4

However, version numbers on both jane street and Markus's websites are
lower than this, so I'm unclear where the godi versions are coming from.

$ godi_list | grep prot
godi-bin-prot                  inst:-          src:2.0.6godi1

$ godi_list | grep conv
godi-type-conv                 inst:-          src:3.0.4godi1


On Wed, Nov 9, 2011 at 9:12 PM, Yaron Minsky <yminsky at gmail.com> wrote:

> Just to be clear, what platform are you running on, and what version of
> bin-prot and type-conv are you using?
>
>
> On Wed, Nov 9, 2011 at 12:11 PM, Ashish Agarwal <agarwal1975 at gmail.com>wrote:
>
>> When compiling bin-prot via godi, I get the error below. We have libc
>> version 2.5, which seems not to support the missing functions. Is this
>> dependency removed in any branch? (Also, let me know if there is a better
>> mailing list to use for bin-prot.)
>>
>> I: Running command '/home/aa144/local/godi/bin/ocamlbuild
>> syntax/pa_bin_prot.cma lib/libbin_prot.a lib/dllbin_prot.so
>> lib/bin_prot.cma lib/bin_prot.cmxa lib/bin_prot.a lib_test/example.byte
>> -tag debug'
>> Finished, 1 target (0 cached) in 00:00:00.
>> + ocamlfind ocamlc -ccopt -pipe -ccopt -g -ccopt -fPIC -ccopt -O2 -ccopt
>> -fomit-frame-pointer -ccopt -fsigned-char -ccopt -Wall -ccopt -pedantic
>> -ccopt -Wextra -ccopt -Wunused -ccopt -Werror -ccopt -Wno-long-long -c
>> lib/write_stubs.c
>> cc1: warnings being treated as errors
>> lib/write_stubs.c: In function 'do_write_int16':
>> lib/write_stubs.c:76: warning: implicit declaration of function 'htole16'
>> lib/write_stubs.c: In function 'do_write_int32':
>> lib/write_stubs.c:90: warning: implicit declaration of function 'htole32'
>> lib/write_stubs.c: In function 'do_write_int64':
>> lib/write_stubs.c:105: warning: implicit declaration of function 'htole64'
>> lib/write_stubs.c: In function 'write_network16_int_stub':
>> lib/write_stubs.c:557: warning: implicit declaration of function 'htobe16'
>> lib/write_stubs.c: In function 'write_network32_int_stub':
>> lib/write_stubs.c:567: warning: implicit declaration of function 'htobe32'
>> lib/write_stubs.c: In function 'write_network64_int_stub':
>> lib/write_stubs.c:588: warning: implicit declaration of function 'htobe64'
>> Command exited with code 2.
>> Compilation unsuccessful after building 8 targets (0 cached) in 00:00:01.
>> E: Command '/home/aa144/local/godi/bin/ocamlbuild syntax/pa_bin_prot.cma
>> lib/libbin_prot.a lib/dllbin_prot.so lib/bin_prot.cma lib/bin_prot.cmxa
>> lib/bin_prot.a lib_test/example.byte -tag debug' terminated with error code
>> 10
>> make[7]: *** [all] Error 1
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111110/e72fc10a/attachment.html>

From yminsky at janestreet.com  Thu Nov 10 15:48:07 2011
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 10 Nov 2011 10:48:07 -0500
Subject: bin-prot compile error related to libc version
In-Reply-To: <CAMu2m2JTMsv0+M8zLorOiY-5m1tuWZ9P0LFGj9ycf2YU6tgZ8w@mail.gmail.com>
References: <CAMu2m2JwNzRTVt5UUJmMSsP_aRH2Lz=25hWicgsFNBAv5owQ0w@mail.gmail.com>
 <CADKNfhLhvs6OT7Oq4KWj1HSbmi-jp9F+W4Gc5qwuFRsK2_ofJg@mail.gmail.com>
 <CAMu2m2JTMsv0+M8zLorOiY-5m1tuWZ9P0LFGj9ycf2YU6tgZ8w@mail.gmail.com>
Message-ID: <20111110154807.GE23802@janestreet.com>


Looping Markus in.

Have you tried to setup the released tarballs from the website?  I
wonder if they have this problem too.

Anyone know offhand who put together the Godi packages?  I agree that
those version numbers confuse me.  I know there was some
cross-platform compatibility work that was done for Debian that was
working its way upstream, but I'm not sure of the state of play.

Markus, do you know what's going on here?

y

On 10/11/11 08:53, Ashish Agarwal wrote:
> Platforms: CentOS 5.5, RHEL 5.1, and RHEL 5.3
> bin-prot version 2.0.6
> typ-conv version: 3.0.4
> 
> However, version numbers on both jane street and Markus's websites are
> lower than this, so I'm unclear where the godi versions are coming from.
> 
> $ godi_list | grep prot
> godi-bin-prot                  inst:-          src:2.0.6godi1
> 
> $ godi_list | grep conv
> godi-type-conv                 inst:-          src:3.0.4godi1
> 
> 
> On Wed, Nov 9, 2011 at 9:12 PM, Yaron Minsky <yminsky at gmail.com> wrote:
> 
> > Just to be clear, what platform are you running on, and what version of
> > bin-prot and type-conv are you using?
> >
> >
> > On Wed, Nov 9, 2011 at 12:11 PM, Ashish Agarwal <agarwal1975 at gmail.com>wrote:
> >
> >> When compiling bin-prot via godi, I get the error below. We have libc
> >> version 2.5, which seems not to support the missing functions. Is this
> >> dependency removed in any branch? (Also, let me know if there is a better
> >> mailing list to use for bin-prot.)
> >>
> >> I: Running command '/home/aa144/local/godi/bin/ocamlbuild
> >> syntax/pa_bin_prot.cma lib/libbin_prot.a lib/dllbin_prot.so
> >> lib/bin_prot.cma lib/bin_prot.cmxa lib/bin_prot.a lib_test/example.byte
> >> -tag debug'
> >> Finished, 1 target (0 cached) in 00:00:00.
> >> + ocamlfind ocamlc -ccopt -pipe -ccopt -g -ccopt -fPIC -ccopt -O2 -ccopt
> >> -fomit-frame-pointer -ccopt -fsigned-char -ccopt -Wall -ccopt -pedantic
> >> -ccopt -Wextra -ccopt -Wunused -ccopt -Werror -ccopt -Wno-long-long -c
> >> lib/write_stubs.c
> >> cc1: warnings being treated as errors
> >> lib/write_stubs.c: In function 'do_write_int16':
> >> lib/write_stubs.c:76: warning: implicit declaration of function 'htole16'
> >> lib/write_stubs.c: In function 'do_write_int32':
> >> lib/write_stubs.c:90: warning: implicit declaration of function 'htole32'
> >> lib/write_stubs.c: In function 'do_write_int64':
> >> lib/write_stubs.c:105: warning: implicit declaration of function 'htole64'
> >> lib/write_stubs.c: In function 'write_network16_int_stub':
> >> lib/write_stubs.c:557: warning: implicit declaration of function 'htobe16'
> >> lib/write_stubs.c: In function 'write_network32_int_stub':
> >> lib/write_stubs.c:567: warning: implicit declaration of function 'htobe32'
> >> lib/write_stubs.c: In function 'write_network64_int_stub':
> >> lib/write_stubs.c:588: warning: implicit declaration of function 'htobe64'
> >> Command exited with code 2.
> >> Compilation unsuccessful after building 8 targets (0 cached) in 00:00:01.
> >> E: Command '/home/aa144/local/godi/bin/ocamlbuild syntax/pa_bin_prot.cma
> >> lib/libbin_prot.a lib/dllbin_prot.so lib/bin_prot.cma lib/bin_prot.cmxa
> >> lib/bin_prot.a lib_test/example.byte -tag debug' terminated with error code
> >> 10
> >> make[7]: *** [all] Error 1
> >>
> >>
> >

-- 
Yaron Minsky


From markus.mottl at gmail.com  Thu Nov 10 19:36:22 2011
From: markus.mottl at gmail.com (Markus Mottl)
Date: Thu, 10 Nov 2011 14:36:22 -0500
Subject: bin-prot compile error related to libc version
In-Reply-To: <20111110154807.GE23802@janestreet.com>
References: <CAMu2m2JwNzRTVt5UUJmMSsP_aRH2Lz=25hWicgsFNBAv5owQ0w@mail.gmail.com>
	<CADKNfhLhvs6OT7Oq4KWj1HSbmi-jp9F+W4Gc5qwuFRsK2_ofJg@mail.gmail.com>
	<CAMu2m2JTMsv0+M8zLorOiY-5m1tuWZ9P0LFGj9ycf2YU6tgZ8w@mail.gmail.com>
	<20111110154807.GE23802@janestreet.com>
Message-ID: <CAP_800rvAnUuL3LoyFiZEMkuQLQ4=+Kk861dLem_w4ccP_SS8Q@mail.gmail.com>


Hi,

the "official" packages are now on OCaml Forge.  This was the agreed
upon repository where Till and I created the final release.  The idea
was to eventually drop our separate download sites and use OCaml Forge
only.  Godi uses the OCaml Forge packages.

Concerning the error above: indeed, glibc 2.5 does not support these
functions yet, they were apparently introduced with glibc 2.9 in 2009
only.

I have updated bin-prot by defining the required macros if they are
undefined.  The new distribution is online, both at OCaml Forge and in
Godi.  Please let me know if there are still any build errors or if
the test suite fails.  I cannot easily test old platforms myself.

Regards,
Markus

On Thu, Nov 10, 2011 at 10:48, Yaron Minsky <yminsky at janestreet.com> wrote:
> Looping Markus in.
>
> Have you tried to setup the released tarballs from the website? ?I
> wonder if they have this problem too.
>
> Anyone know offhand who put together the Godi packages? ?I agree that
> those version numbers confuse me. ?I know there was some
> cross-platform compatibility work that was done for Debian that was
> working its way upstream, but I'm not sure of the state of play.
>
> Markus, do you know what's going on here?
>
> y
>
> On 10/11/11 08:53, Ashish Agarwal wrote:
>> Platforms: CentOS 5.5, RHEL 5.1, and RHEL 5.3
>> bin-prot version 2.0.6
>> typ-conv version: 3.0.4
>>
>> However, version numbers on both jane street and Markus's websites are
>> lower than this, so I'm unclear where the godi versions are coming from.
>>
>> $ godi_list | grep prot
>> godi-bin-prot ? ? ? ? ? ? ? ? ?inst:- ? ? ? ? ?src:2.0.6godi1
>>
>> $ godi_list | grep conv
>> godi-type-conv ? ? ? ? ? ? ? ? inst:- ? ? ? ? ?src:3.0.4godi1
>>
>>
>> On Wed, Nov 9, 2011 at 9:12 PM, Yaron Minsky <yminsky at gmail.com> wrote:
>>
>> > Just to be clear, what platform are you running on, and what version of
>> > bin-prot and type-conv are you using?
>> >
>> >
>> > On Wed, Nov 9, 2011 at 12:11 PM, Ashish Agarwal <agarwal1975 at gmail.com>wrote:
>> >
>> >> When compiling bin-prot via godi, I get the error below. We have libc
>> >> version 2.5, which seems not to support the missing functions. Is this
>> >> dependency removed in any branch? (Also, let me know if there is a better
>> >> mailing list to use for bin-prot.)
>> >>
>> >> I: Running command '/home/aa144/local/godi/bin/ocamlbuild
>> >> syntax/pa_bin_prot.cma lib/libbin_prot.a lib/dllbin_prot.so
>> >> lib/bin_prot.cma lib/bin_prot.cmxa lib/bin_prot.a lib_test/example.byte
>> >> -tag debug'
>> >> Finished, 1 target (0 cached) in 00:00:00.
>> >> + ocamlfind ocamlc -ccopt -pipe -ccopt -g -ccopt -fPIC -ccopt -O2 -ccopt
>> >> -fomit-frame-pointer -ccopt -fsigned-char -ccopt -Wall -ccopt -pedantic
>> >> -ccopt -Wextra -ccopt -Wunused -ccopt -Werror -ccopt -Wno-long-long -c
>> >> lib/write_stubs.c
>> >> cc1: warnings being treated as errors
>> >> lib/write_stubs.c: In function 'do_write_int16':
>> >> lib/write_stubs.c:76: warning: implicit declaration of function 'htole16'
>> >> lib/write_stubs.c: In function 'do_write_int32':
>> >> lib/write_stubs.c:90: warning: implicit declaration of function 'htole32'
>> >> lib/write_stubs.c: In function 'do_write_int64':
>> >> lib/write_stubs.c:105: warning: implicit declaration of function 'htole64'
>> >> lib/write_stubs.c: In function 'write_network16_int_stub':
>> >> lib/write_stubs.c:557: warning: implicit declaration of function 'htobe16'
>> >> lib/write_stubs.c: In function 'write_network32_int_stub':
>> >> lib/write_stubs.c:567: warning: implicit declaration of function 'htobe32'
>> >> lib/write_stubs.c: In function 'write_network64_int_stub':
>> >> lib/write_stubs.c:588: warning: implicit declaration of function 'htobe64'
>> >> Command exited with code 2.
>> >> Compilation unsuccessful after building 8 targets (0 cached) in 00:00:01.
>> >> E: Command '/home/aa144/local/godi/bin/ocamlbuild syntax/pa_bin_prot.cma
>> >> lib/libbin_prot.a lib/dllbin_prot.so lib/bin_prot.cma lib/bin_prot.cmxa
>> >> lib/bin_prot.a lib_test/example.byte -tag debug' terminated with error code
>> >> 10
>> >> make[7]: *** [all] Error 1
>> >>
>> >>
>> >
>
> --
> Yaron Minsky
>



-- 
Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From yminsky at janestreet.com  Thu Nov 10 19:46:56 2011
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 10 Nov 2011 14:46:56 -0500
Subject: bin-prot compile error related to libc version
In-Reply-To: <CAP_800rvAnUuL3LoyFiZEMkuQLQ4=+Kk861dLem_w4ccP_SS8Q@mail.gmail.com>
References: <CAMu2m2JwNzRTVt5UUJmMSsP_aRH2Lz=25hWicgsFNBAv5owQ0w@mail.gmail.com>
 <CADKNfhLhvs6OT7Oq4KWj1HSbmi-jp9F+W4Gc5qwuFRsK2_ofJg@mail.gmail.com>
 <CAMu2m2JTMsv0+M8zLorOiY-5m1tuWZ9P0LFGj9ycf2YU6tgZ8w@mail.gmail.com>
 <20111110154807.GE23802@janestreet.com>
 <CAP_800rvAnUuL3LoyFiZEMkuQLQ4=+Kk861dLem_w4ccP_SS8Q@mail.gmail.com>
Message-ID: <20111110194656.GL23802@janestreet.com>


Thanks Markus.  I was tricked by the fact that your website doesn't
point to the ocamlforge site.

We need to do a better job of integrating.  I'm hoping we'll have our
internal processes cleaned up soon, and that will make it easier to
sync-up.

y

On 10/11/11 14:36, Markus Mottl wrote:
> Hi,
> 
> the "official" packages are now on OCaml Forge.  This was the agreed
> upon repository where Till and I created the final release.  The idea
> was to eventually drop our separate download sites and use OCaml Forge
> only.  Godi uses the OCaml Forge packages.
> 
> Concerning the error above: indeed, glibc 2.5 does not support these
> functions yet, they were apparently introduced with glibc 2.9 in 2009
> only.
> 
> I have updated bin-prot by defining the required macros if they are
> undefined.  The new distribution is online, both at OCaml Forge and in
> Godi.  Please let me know if there are still any build errors or if
> the test suite fails.  I cannot easily test old platforms myself.
> 
> Regards,
> Markus
> 
> On Thu, Nov 10, 2011 at 10:48, Yaron Minsky <yminsky at janestreet.com> wrote:
> > Looping Markus in.
> >
> > Have you tried to setup the released tarballs from the website? ?I
> > wonder if they have this problem too.
> >
> > Anyone know offhand who put together the Godi packages? ?I agree that
> > those version numbers confuse me. ?I know there was some
> > cross-platform compatibility work that was done for Debian that was
> > working its way upstream, but I'm not sure of the state of play.
> >
> > Markus, do you know what's going on here?
> >
> > y
> >
> > On 10/11/11 08:53, Ashish Agarwal wrote:
> >> Platforms: CentOS 5.5, RHEL 5.1, and RHEL 5.3
> >> bin-prot version 2.0.6
> >> typ-conv version: 3.0.4
> >>
> >> However, version numbers on both jane street and Markus's websites are
> >> lower than this, so I'm unclear where the godi versions are coming from.
> >>
> >> $ godi_list | grep prot
> >> godi-bin-prot ? ? ? ? ? ? ? ? ?inst:- ? ? ? ? ?src:2.0.6godi1
> >>
> >> $ godi_list | grep conv
> >> godi-type-conv ? ? ? ? ? ? ? ? inst:- ? ? ? ? ?src:3.0.4godi1
> >>
> >>
> >> On Wed, Nov 9, 2011 at 9:12 PM, Yaron Minsky <yminsky at gmail.com> wrote:
> >>
> >> > Just to be clear, what platform are you running on, and what version of
> >> > bin-prot and type-conv are you using?
> >> >
> >> >
> >> > On Wed, Nov 9, 2011 at 12:11 PM, Ashish Agarwal <agarwal1975 at gmail.com>wrote:
> >> >
> >> >> When compiling bin-prot via godi, I get the error below. We have libc
> >> >> version 2.5, which seems not to support the missing functions. Is this
> >> >> dependency removed in any branch? (Also, let me know if there is a better
> >> >> mailing list to use for bin-prot.)
> >> >>
> >> >> I: Running command '/home/aa144/local/godi/bin/ocamlbuild
> >> >> syntax/pa_bin_prot.cma lib/libbin_prot.a lib/dllbin_prot.so
> >> >> lib/bin_prot.cma lib/bin_prot.cmxa lib/bin_prot.a lib_test/example.byte
> >> >> -tag debug'
> >> >> Finished, 1 target (0 cached) in 00:00:00.
> >> >> + ocamlfind ocamlc -ccopt -pipe -ccopt -g -ccopt -fPIC -ccopt -O2 -ccopt
> >> >> -fomit-frame-pointer -ccopt -fsigned-char -ccopt -Wall -ccopt -pedantic
> >> >> -ccopt -Wextra -ccopt -Wunused -ccopt -Werror -ccopt -Wno-long-long -c
> >> >> lib/write_stubs.c
> >> >> cc1: warnings being treated as errors
> >> >> lib/write_stubs.c: In function 'do_write_int16':
> >> >> lib/write_stubs.c:76: warning: implicit declaration of function 'htole16'
> >> >> lib/write_stubs.c: In function 'do_write_int32':
> >> >> lib/write_stubs.c:90: warning: implicit declaration of function 'htole32'
> >> >> lib/write_stubs.c: In function 'do_write_int64':
> >> >> lib/write_stubs.c:105: warning: implicit declaration of function 'htole64'
> >> >> lib/write_stubs.c: In function 'write_network16_int_stub':
> >> >> lib/write_stubs.c:557: warning: implicit declaration of function 'htobe16'
> >> >> lib/write_stubs.c: In function 'write_network32_int_stub':
> >> >> lib/write_stubs.c:567: warning: implicit declaration of function 'htobe32'
> >> >> lib/write_stubs.c: In function 'write_network64_int_stub':
> >> >> lib/write_stubs.c:588: warning: implicit declaration of function 'htobe64'
> >> >> Command exited with code 2.
> >> >> Compilation unsuccessful after building 8 targets (0 cached) in 00:00:01.
> >> >> E: Command '/home/aa144/local/godi/bin/ocamlbuild syntax/pa_bin_prot.cma
> >> >> lib/libbin_prot.a lib/dllbin_prot.so lib/bin_prot.cma lib/bin_prot.cmxa
> >> >> lib/bin_prot.a lib_test/example.byte -tag debug' terminated with error code
> >> >> 10
> >> >> make[7]: *** [all] Error 1
> >> >>
> >> >>
> >> >
> >
> > --
> > Yaron Minsky
> >
> 
> 
> 
> -- 
> Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com

-- 
Yaron Minsky


From agarwal1975 at gmail.com  Thu Nov 10 20:29:59 2011
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Thu, 10 Nov 2011 15:29:59 -0500
Subject: bin-prot compile error related to libc version
In-Reply-To: <20111110194656.GL23802@janestreet.com>
References: <CAMu2m2JwNzRTVt5UUJmMSsP_aRH2Lz=25hWicgsFNBAv5owQ0w@mail.gmail.com>
 <CADKNfhLhvs6OT7Oq4KWj1HSbmi-jp9F+W4Gc5qwuFRsK2_ofJg@mail.gmail.com>
 <CAMu2m2JTMsv0+M8zLorOiY-5m1tuWZ9P0LFGj9ycf2YU6tgZ8w@mail.gmail.com>
 <20111110154807.GE23802@janestreet.com> <CAP_800rvAnUuL3LoyFiZEMkuQLQ4=+Kk861dLem_w4ccP_SS8Q@mail.gmail.com>
 <20111110194656.GL23802@janestreet.com>
Message-ID: <CAMu2m2JJuhauH-Qa5=OBZnitVyG=LkeXbioqVzafY2dG2OHqnA@mail.gmail.com>

Thanks for the quick updates! I successfully compiled on all of our
clusters.

On Thu, Nov 10, 2011 at 2:46 PM, Yaron Minsky <yminsky at janestreet.com>wrote:

> Thanks Markus.  I was tricked by the fact that your website doesn't
> point to the ocamlforge site.
>
> We need to do a better job of integrating.  I'm hoping we'll have our
> internal processes cleaned up soon, and that will make it easier to
> sync-up.
>
> y
>
> On 10/11/11 14:36, Markus Mottl wrote:
> > Hi,
> >
> > the "official" packages are now on OCaml Forge.  This was the agreed
> > upon repository where Till and I created the final release.  The idea
> > was to eventually drop our separate download sites and use OCaml Forge
> > only.  Godi uses the OCaml Forge packages.
> >
> > Concerning the error above: indeed, glibc 2.5 does not support these
> > functions yet, they were apparently introduced with glibc 2.9 in 2009
> > only.
> >
> > I have updated bin-prot by defining the required macros if they are
> > undefined.  The new distribution is online, both at OCaml Forge and in
> > Godi.  Please let me know if there are still any build errors or if
> > the test suite fails.  I cannot easily test old platforms myself.
> >
> > Regards,
> > Markus
> >
> > On Thu, Nov 10, 2011 at 10:48, Yaron Minsky <yminsky at janestreet.com>
> wrote:
> > > Looping Markus in.
> > >
> > > Have you tried to setup the released tarballs from the website?  I
> > > wonder if they have this problem too.
> > >
> > > Anyone know offhand who put together the Godi packages?  I agree that
> > > those version numbers confuse me.  I know there was some
> > > cross-platform compatibility work that was done for Debian that was
> > > working its way upstream, but I'm not sure of the state of play.
> > >
> > > Markus, do you know what's going on here?
> > >
> > > y
> > >
> > > On 10/11/11 08:53, Ashish Agarwal wrote:
> > >> Platforms: CentOS 5.5, RHEL 5.1, and RHEL 5.3
> > >> bin-prot version 2.0.6
> > >> typ-conv version: 3.0.4
> > >>
> > >> However, version numbers on both jane street and Markus's websites are
> > >> lower than this, so I'm unclear where the godi versions are coming
> from.
> > >>
> > >> $ godi_list | grep prot
> > >> godi-bin-prot                  inst:-          src:2.0.6godi1
> > >>
> > >> $ godi_list | grep conv
> > >> godi-type-conv                 inst:-          src:3.0.4godi1
> > >>
> > >>
> > >> On Wed, Nov 9, 2011 at 9:12 PM, Yaron Minsky <yminsky at gmail.com>
> wrote:
> > >>
> > >> > Just to be clear, what platform are you running on, and what
> version of
> > >> > bin-prot and type-conv are you using?
> > >> >
> > >> >
> > >> > On Wed, Nov 9, 2011 at 12:11 PM, Ashish Agarwal <
> agarwal1975 at gmail.com>wrote:
> > >> >
> > >> >> When compiling bin-prot via godi, I get the error below. We have
> libc
> > >> >> version 2.5, which seems not to support the missing functions. Is
> this
> > >> >> dependency removed in any branch? (Also, let me know if there is a
> better
> > >> >> mailing list to use for bin-prot.)
> > >> >>
> > >> >> I: Running command '/home/aa144/local/godi/bin/ocamlbuild
> > >> >> syntax/pa_bin_prot.cma lib/libbin_prot.a lib/dllbin_prot.so
> > >> >> lib/bin_prot.cma lib/bin_prot.cmxa lib/bin_prot.a
> lib_test/example.byte
> > >> >> -tag debug'
> > >> >> Finished, 1 target (0 cached) in 00:00:00.
> > >> >> + ocamlfind ocamlc -ccopt -pipe -ccopt -g -ccopt -fPIC -ccopt -O2
> -ccopt
> > >> >> -fomit-frame-pointer -ccopt -fsigned-char -ccopt -Wall -ccopt
> -pedantic
> > >> >> -ccopt -Wextra -ccopt -Wunused -ccopt -Werror -ccopt
> -Wno-long-long -c
> > >> >> lib/write_stubs.c
> > >> >> cc1: warnings being treated as errors
> > >> >> lib/write_stubs.c: In function 'do_write_int16':
> > >> >> lib/write_stubs.c:76: warning: implicit declaration of function
> 'htole16'
> > >> >> lib/write_stubs.c: In function 'do_write_int32':
> > >> >> lib/write_stubs.c:90: warning: implicit declaration of function
> 'htole32'
> > >> >> lib/write_stubs.c: In function 'do_write_int64':
> > >> >> lib/write_stubs.c:105: warning: implicit declaration of function
> 'htole64'
> > >> >> lib/write_stubs.c: In function 'write_network16_int_stub':
> > >> >> lib/write_stubs.c:557: warning: implicit declaration of function
> 'htobe16'
> > >> >> lib/write_stubs.c: In function 'write_network32_int_stub':
> > >> >> lib/write_stubs.c:567: warning: implicit declaration of function
> 'htobe32'
> > >> >> lib/write_stubs.c: In function 'write_network64_int_stub':
> > >> >> lib/write_stubs.c:588: warning: implicit declaration of function
> 'htobe64'
> > >> >> Command exited with code 2.
> > >> >> Compilation unsuccessful after building 8 targets (0 cached) in
> 00:00:01.
> > >> >> E: Command '/home/aa144/local/godi/bin/ocamlbuild
> syntax/pa_bin_prot.cma
> > >> >> lib/libbin_prot.a lib/dllbin_prot.so lib/bin_prot.cma
> lib/bin_prot.cmxa
> > >> >> lib/bin_prot.a lib_test/example.byte -tag debug' terminated with
> error code
> > >> >> 10
> > >> >> make[7]: *** [all] Error 1
> > >> >>
> > >> >>
> > >> >
> > >
> > > --
> > > Yaron Minsky
> > >
> >
> >
> >
> > --
> > Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>
> --
> Yaron Minsky
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111110/ffd4ef09/attachment.html>

From yminsky at gmail.com  Fri Nov 11 00:11:04 2011
From: yminsky at gmail.com (Yaron Minsky)
Date: Thu, 10 Nov 2011 19:11:04 -0500
Subject: ocaml-core - Google Groups: Message Pending [{IOyIp92l7aziaioCd2UwAf9YhCToNZdN0}]
In-Reply-To: <pending-CAP_800rvAnUuL3LoyFiZEMkuQLQ4=+Kk861dLem_w4ccP_SS8Q@mail.gmail.com>
References: <pending-CAP_800rvAnUuL3LoyFiZEMkuQLQ4=+Kk861dLem_w4ccP_SS8Q@mail.gmail.com>
Message-ID: <CADKNfhKNPv3PKnBhX2AQd5Vvtu_HkZtxHoMsx5jL3-68sKT=Yg@mail.gmail.com>

On Nov 10, 2011 2:36 PM, "ocaml-core" <ocaml-core+msgappr at googlegroups.com>
wrote:

>   A message has been sent to the ocaml-core<http://groups.google.com/group/ocaml-core?hl=en_US>group and is awaiting approval. We've included this message for your review.
>
> The message requires moderation because the user does not have permission
> to post.
>
> You can approve or reject<http://groups.google.com/group/ocaml-core/pendmsg?hl=en_US>this message or you can approve this message by replying to this email.
>  [image: Visit Google Groups]
>
> Start <https://groups.google.com/groups/create?hl=en_US&src=email> your
> own group, visit <http://groups.google.com/support/?hl=en_US&src=email>the help center, or
> report <https://groups.google.com/groups/abuse?hl=en_US&src=email> abuse.
>
>
> ---------- Forwarded message ----------
> From: Markus Mottl <markus.mottl at gmail.com>
> To: Yaron Minsky <yminsky at janestreet.com>
> Date: Thu, 10 Nov 2011 14:36:22 -0500
> Subject: Re: bin-prot compile error related to libc version
> Hi,
>
> the "official" packages are now on OCaml Forge.  This was the agreed
> upon repository where Till and I created the final release.  The idea
> was to eventually drop our separate download sites and use OCaml Forge
> only.  Godi uses the OCaml Forge packages.
>
> Concerning the error above: indeed, glibc 2.5 does not support these
> functions yet, they were apparently introduced with glibc 2.9 in 2009
> only.
>
> I have updated bin-prot by defining the required macros if they are
> undefined.  The new distribution is online, both at OCaml Forge and in
> Godi.  Please let me know if there are still any build errors or if
> the test suite fails.  I cannot easily test old platforms myself.
>
> Regards,
> Markus
>
> On Thu, Nov 10, 2011 at 10:48, Yaron Minsky <yminsky at janestreet.com>
> wrote:
> > Looping Markus in.
> >
> > Have you tried to setup the released tarballs from the website?  I
> > wonder if they have this problem too.
> >
> > Anyone know offhand who put together the Godi packages?  I agree that
> > those version numbers confuse me.  I know there was some
> > cross-platform compatibility work that was done for Debian that was
> > working its way upstream, but I'm not sure of the state of play.
> >
> > Markus, do you know what's going on here?
> >
> > y
> >
> > On 10/11/11 08:53, Ashish Agarwal wrote:
> >> Platforms: CentOS 5.5, RHEL 5.1, and RHEL 5.3
> >> bin-prot version 2.0.6
> >> typ-conv version: 3.0.4
> >>
> >> However, version numbers on both jane street and Markus's websites are
> >> lower than this, so I'm unclear where the godi versions are coming from.
> >>
> >> $ godi_list | grep prot
> >> godi-bin-prot                  inst:-          src:2.0.6godi1
> >>
> >> $ godi_list | grep conv
> >> godi-type-conv                 inst:-          src:3.0.4godi1
> >>
> >>
> >> On Wed, Nov 9, 2011 at 9:12 PM, Yaron Minsky <yminsky at gmail.com> wrote:
> >>
> >> > Just to be clear, what platform are you running on, and what version
> of
> >> > bin-prot and type-conv are you using?
> >> >
> >> >
> >> > On Wed, Nov 9, 2011 at 12:11 PM, Ashish Agarwal <
> agarwal1975 at gmail.com>wrote:
> >> >
> >> >> When compiling bin-prot via godi, I get the error below. We have libc
> >> >> version 2.5, which seems not to support the missing functions. Is
> this
> >> >> dependency removed in any branch? (Also, let me know if there is a
> better
> >> >> mailing list to use for bin-prot.)
> >> >>
> >> >> I: Running command '/home/aa144/local/godi/bin/ocamlbuild
> >> >> syntax/pa_bin_prot.cma lib/libbin_prot.a lib/dllbin_prot.so
> >> >> lib/bin_prot.cma lib/bin_prot.cmxa lib/bin_prot.a
> lib_test/example.byte
> >> >> -tag debug'
> >> >> Finished, 1 target (0 cached) in 00:00:00.
> >> >> + ocamlfind ocamlc -ccopt -pipe -ccopt -g -ccopt -fPIC -ccopt -O2
> -ccopt
> >> >> -fomit-frame-pointer -ccopt -fsigned-char -ccopt -Wall -ccopt
> -pedantic
> >> >> -ccopt -Wextra -ccopt -Wunused -ccopt -Werror -ccopt -Wno-long-long
> -c
> >> >> lib/write_stubs.c
> >> >> cc1: warnings being treated as errors
> >> >> lib/write_stubs.c: In function 'do_write_int16':
> >> >> lib/write_stubs.c:76: warning: implicit declaration of function
> 'htole16'
> >> >> lib/write_stubs.c: In function 'do_write_int32':
> >> >> lib/write_stubs.c:90: warning: implicit declaration of function
> 'htole32'
> >> >> lib/write_stubs.c: In function 'do_write_int64':
> >> >> lib/write_stubs.c:105: warning: implicit declaration of function
> 'htole64'
> >> >> lib/write_stubs.c: In function 'write_network16_int_stub':
> >> >> lib/write_stubs.c:557: warning: implicit declaration of function
> 'htobe16'
> >> >> lib/write_stubs.c: In function 'write_network32_int_stub':
> >> >> lib/write_stubs.c:567: warning: implicit declaration of function
> 'htobe32'
> >> >> lib/write_stubs.c: In function 'write_network64_int_stub':
> >> >> lib/write_stubs.c:588: warning: implicit declaration of function
> 'htobe64'
> >> >> Command exited with code 2.
> >> >> Compilation unsuccessful after building 8 targets (0 cached) in
> 00:00:01.
> >> >> E: Command '/home/aa144/local/godi/bin/ocamlbuild
> syntax/pa_bin_prot.cma
> >> >> lib/libbin_prot.a lib/dllbin_prot.so lib/bin_prot.cma
> lib/bin_prot.cmxa
> >> >> lib/bin_prot.a lib_test/example.byte -tag debug' terminated with
> error code
> >> >> 10
> >> >> make[7]: *** [all] Error 1
> >> >>
> >> >>
> >> >
> >
> > --
> > Yaron Minsky
> >
>
>
>
> --
> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111110/d01c926a/attachment.html>

From ocaml-core+msgappr at googlegroups.com  Thu Nov 10 19:36:24 2011
From: ocaml-core+msgappr at googlegroups.com (ocaml-core)
Date: Thu, 10 Nov 2011 19:36:24 +0000
Subject: ocaml-core - Google Groups: Message Pending [{IOyIp92l7aziaioCd2UwAf9YhCToNZdN0}]
Message-ID: <pending-CAP_800rvAnUuL3LoyFiZEMkuQLQ4=+Kk861dLem_w4ccP_SS8Q@mail.gmail.com>


A message has been sent to the ocaml-core group and is awaiting approval. We've included this message for your review.

The message requires moderation because the user does not have permission to post.

You can approve or reject this message online at:
http://groups.google.com/group/ocaml-core/pendmsg?hl=en_US

or

You can approve this message by replying to this email.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111110/94405144/attachment.html>
-------------- next part --------------
An embedded message was scrubbed...
From: unknown sender
Subject: Re: bin-prot compile error related to libc version
Date: Thu, 10 Nov 2011 14:36:22 -0500
Size: 6838
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111110/94405144/attachment.mht>

From seanmcl at gmail.com  Sat Nov 12 17:10:33 2011
From: seanmcl at gmail.com (Sean McLaughlin)
Date: Sat, 12 Nov 2011 12:10:33 -0500
Subject: ocamlspotter support in core
Message-ID: <CAO4dZbfnSQNhmXOxc1gy23Bhs1=QK_D0fRhei8uuKP8LsLRJvA@mail.gmail.com>


The default make setup doesn't build spot files.  Perhaps we can
include the -annot option as a default compiler flag, which doesn't
seem to hurt if you're not using an ocamlspotter version of ocaml, but
makes it possible to jump to function definitions in core from user
programs.


From yminsky at gmail.com  Sat Nov 12 18:22:15 2011
From: yminsky at gmail.com (Yaron Minsky)
Date: Sat, 12 Nov 2011 13:22:15 -0500
Subject: ocamlspotter support in core
In-Reply-To: <CAO4dZbfnSQNhmXOxc1gy23Bhs1=QK_D0fRhei8uuKP8LsLRJvA@mail.gmail.com>
References: <CAO4dZbfnSQNhmXOxc1gy23Bhs1=QK_D0fRhei8uuKP8LsLRJvA@mail.gmail.com>
Message-ID: <CADKNfhLD1b9yw3K3d5qsJ1KY9jn=7yTRU=ashUf7SpO7qdu6fw@mail.gmail.com>

Well, you can't create spot files without a patched version of the
compiler, which seems unreasonable to expect.  You could imagine making the
configure script discover if you have an ocamlspotter-capable compiler
available, but I don't really know oasis well enough to do that myself.

The -annot flag gives you some help (you can figure out the types of
expressions), but not quite as much as ocamlspotter does.  I'm hoping we'll
get something ocamlspotter-ish into the compiler proper by 3.13...

y

On Sat, Nov 12, 2011 at 12:10 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:

> The default make setup doesn't build spot files.  Perhaps we can
> include the -annot option as a default compiler flag, which doesn't
> seem to hurt if you're not using an ocamlspotter version of ocaml, but
> makes it possible to jump to function definitions in core from user
> programs.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111112/438f6d58/attachment.html>

From seanmcl at gmail.com  Sun Nov 13 00:25:13 2011
From: seanmcl at gmail.com (Sean McLaughlin)
Date: Sat, 12 Nov 2011 19:25:13 -0500
Subject: ocamlspotter support in core
In-Reply-To: <CADKNfhLD1b9yw3K3d5qsJ1KY9jn=7yTRU=ashUf7SpO7qdu6fw@mail.gmail.com>
References: <CAO4dZbfnSQNhmXOxc1gy23Bhs1=QK_D0fRhei8uuKP8LsLRJvA@mail.gmail.com>
	<CADKNfhLD1b9yw3K3d5qsJ1KY9jn=7yTRU=ashUf7SpO7qdu6fw@mail.gmail.com>
Message-ID: <CAO4dZbceJDJ7ecm8rd=MAwunF4g8eDdDAYjNboX4v2r076FtZg@mail.gmail.com>


To generate .spot files, all you need is the -annot flag to
ocaml{c,opt}.  It seems harmless
to enable this flag by default.  Doesn't it?  I'm not sure of the full
implications.

On Sat, Nov 12, 2011 at 1:22 PM, Yaron Minsky <yminsky at gmail.com> wrote:
> Well, you can't create spot files without a patched version of the compiler,
> which seems unreasonable to expect. ?You could imagine making the configure
> script discover if you have an ocamlspotter-capable compiler available, but
> I don't really know oasis well enough to do that myself.
> The -annot flag gives you some help (you can figure out the types of
> expressions), but not quite as much as ocamlspotter does. ?I'm hoping we'll
> get something ocamlspotter-ish into the compiler proper by 3.13...
> y
>
> On Sat, Nov 12, 2011 at 12:10 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:
>>
>> The default make setup doesn't build spot files. ?Perhaps we can
>> include the -annot option as a default compiler flag, which doesn't
>> seem to hurt if you're not using an ocamlspotter version of ocaml, but
>> makes it possible to jump to function definitions in core from user
>> programs.
>
>


From seanmcl at gmail.com  Sun Nov 13 00:30:01 2011
From: seanmcl at gmail.com (Sean McLaughlin)
Date: Sat, 12 Nov 2011 19:30:01 -0500
Subject: ocamlspotter support in core
In-Reply-To: <CAO4dZbceJDJ7ecm8rd=MAwunF4g8eDdDAYjNboX4v2r076FtZg@mail.gmail.com>
References: <CAO4dZbfnSQNhmXOxc1gy23Bhs1=QK_D0fRhei8uuKP8LsLRJvA@mail.gmail.com>
	<CADKNfhLD1b9yw3K3d5qsJ1KY9jn=7yTRU=ashUf7SpO7qdu6fw@mail.gmail.com>
	<CAO4dZbceJDJ7ecm8rd=MAwunF4g8eDdDAYjNboX4v2r076FtZg@mail.gmail.com>
Message-ID: <CAO4dZbe0tW073rrzt5OM9JTovJE=AznWWzzRvUwkUYZLykb5Hw@mail.gmail.com>


To clarify, if you're not using an ocamlspot-modified ocaml compiler,
it would just generate the (presumably unused) .annot files.

On Sat, Nov 12, 2011 at 7:25 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:
> To generate .spot files, all you need is the -annot flag to
> ocaml{c,opt}. ?It seems harmless
> to enable this flag by default. ?Doesn't it? ?I'm not sure of the full
> implications.
>
> On Sat, Nov 12, 2011 at 1:22 PM, Yaron Minsky <yminsky at gmail.com> wrote:
>> Well, you can't create spot files without a patched version of the compiler,
>> which seems unreasonable to expect. ?You could imagine making the configure
>> script discover if you have an ocamlspotter-capable compiler available, but
>> I don't really know oasis well enough to do that myself.
>> The -annot flag gives you some help (you can figure out the types of
>> expressions), but not quite as much as ocamlspotter does. ?I'm hoping we'll
>> get something ocamlspotter-ish into the compiler proper by 3.13...
>> y
>>
>> On Sat, Nov 12, 2011 at 12:10 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:
>>>
>>> The default make setup doesn't build spot files. ?Perhaps we can
>>> include the -annot option as a default compiler flag, which doesn't
>>> seem to hurt if you're not using an ocamlspotter version of ocaml, but
>>> makes it possible to jump to function definitions in core from user
>>> programs.
>>
>>
>


From jun.furuse at gmail.com  Sun Nov 13 01:52:28 2011
From: jun.furuse at gmail.com (Jun Furuse)
Date: Sun, 13 Nov 2011 10:52:28 +0900
Subject: ocamlspotter support in core
In-Reply-To: <CADKNfhLD1b9yw3K3d5qsJ1KY9jn=7yTRU=ashUf7SpO7qdu6fw@mail.gmail.com>
References: <CAO4dZbfnSQNhmXOxc1gy23Bhs1=QK_D0fRhei8uuKP8LsLRJvA@mail.gmail.com>
	<CADKNfhLD1b9yw3K3d5qsJ1KY9jn=7yTRU=ashUf7SpO7qdu6fw@mail.gmail.com>
Message-ID: <CAAoLEWt2ioOD9MdPVLjhyoDv6tC2JyE6y5_90qmkjBmFipux-Q@mail.gmail.com>


Hi,

I have worked a bit for the ocamlspot integration into OCamlPro's
binannot branch,
and it is somehow working.

The problem is : the branch has big diffs. I think it is unlikely we
can have it in 3.13...

Jun

On Sun, Nov 13, 2011 at 3:22 AM, Yaron Minsky <yminsky at gmail.com> wrote:
> Well, you can't create spot files without a patched version of the compiler,
> which seems unreasonable to expect. ?You could imagine making the configure
> script discover if you have an ocamlspotter-capable compiler available, but
> I don't really know oasis well enough to do that myself.
> The -annot flag gives you some help (you can figure out the types of
> expressions), but not quite as much as ocamlspotter does. ?I'm hoping we'll
> get something ocamlspotter-ish into the compiler proper by 3.13...
> y
>
> On Sat, Nov 12, 2011 at 12:10 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:
>>
>> The default make setup doesn't build spot files. ?Perhaps we can
>> include the -annot option as a default compiler flag, which doesn't
>> seem to hurt if you're not using an ocamlspotter version of ocaml, but
>> makes it possible to jump to function definitions in core from user
>> programs.
>
>


From jun.furuse at gmail.com  Sun Nov 13 02:06:51 2011
From: jun.furuse at gmail.com (Jun Furuse)
Date: Sun, 13 Nov 2011 11:06:51 +0900
Subject: ocamlspotter support in core
In-Reply-To: <CAO4dZbceJDJ7ecm8rd=MAwunF4g8eDdDAYjNboX4v2r076FtZg@mail.gmail.com>
References: <CAO4dZbfnSQNhmXOxc1gy23Bhs1=QK_D0fRhei8uuKP8LsLRJvA@mail.gmail.com>
	<CADKNfhLD1b9yw3K3d5qsJ1KY9jn=7yTRU=ashUf7SpO7qdu6fw@mail.gmail.com>
	<CAO4dZbceJDJ7ecm8rd=MAwunF4g8eDdDAYjNboX4v2r076FtZg@mail.gmail.com>
Message-ID: <CAAoLEWtziJAfaTi9KGKVZtUWK2yHntu_P632NowbiKgWfoDQ_A@mail.gmail.com>


Hi,

It is now rather off-topic and non related with core, but

If you set OCAML_ANNOT environment variable with something non-empty,
the patched compiler creates .annot/.spot/.spit files automatically
even w/o -annot option. Thus I compile OCaml library packages with
annot/spot/spit files even if the build scripts are not with -annot.

Installation of spot/spit files of such packages untouching the build
scripts is bit more tricky. I have written a small tool automatically
finds those in source directories and copy into ocamlfind destdirs. It
is not documented at all but you can try it:

  https://bitbucket.org/camlspotter/spotinstall  (It requires
https://bitbucket.org/camlspotter/spotlib)

Jun


On Sun, Nov 13, 2011 at 9:25 AM, Sean McLaughlin <seanmcl at gmail.com> wrote:
> To generate .spot files, all you need is the -annot flag to
> ocaml{c,opt}. ?It seems harmless
> to enable this flag by default. ?Doesn't it? ?I'm not sure of the full
> implications.
>
> On Sat, Nov 12, 2011 at 1:22 PM, Yaron Minsky <yminsky at gmail.com> wrote:
>> Well, you can't create spot files without a patched version of the compiler,
>> which seems unreasonable to expect. ?You could imagine making the configure
>> script discover if you have an ocamlspotter-capable compiler available, but
>> I don't really know oasis well enough to do that myself.
>> The -annot flag gives you some help (you can figure out the types of
>> expressions), but not quite as much as ocamlspotter does. ?I'm hoping we'll
>> get something ocamlspotter-ish into the compiler proper by 3.13...
>> y
>>
>> On Sat, Nov 12, 2011 at 12:10 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:
>>>
>>> The default make setup doesn't build spot files. ?Perhaps we can
>>> include the -annot option as a default compiler flag, which doesn't
>>> seem to hurt if you're not using an ocamlspotter version of ocaml, but
>>> makes it possible to jump to function definitions in core from user
>>> programs.
>>
>>
>


From yminsky at gmail.com  Thu Nov 17 15:23:14 2011
From: yminsky at gmail.com (Yaron Minsky)
Date: Thu, 17 Nov 2011 10:23:14 -0500
Subject: Mis-detection of -lrt
In-Reply-To: <4EC50E29.1040803@glondu.net>
References: <4EC50E29.1040803@glondu.net>
Message-ID: <CADKNfhJ5rFVikg44j5JFDkRNog8OeTfAULUJBiEvhy5LypfioQ@mail.gmail.com>

Thanks!   We'll take a look and integrate upstream. It might take us a bit,
but this process will get smoother when we get our transition to github
done.
On Nov 17, 2011 8:37 AM, "St?phane Glondu" <steph at glondu.net> wrote:

> Hello,
>
> I've just upgraded Core from version 0.6.0 to 107.01 in Debian, and it
> failed on mips, powerpc, s390, hurd and kfreebsd ports, because of
> "-lrt" missing [1].
>
> A quick look at Core sources reveals that this flag is supposed to be
> there by itself on Linux, and it is indeed on x86, arm and ia64 ports,
> but somehow the detection fails everywhere else.
>
> Anyway, I guess checking for Linux is not enough and it is needed
> wherever glibc is used. For the moment, I applied a rather crude patch
> to the Debian package (attached). It causes "-lrt" to be supplied twice
> sometimes, but it at least compiles (and tests pass) everywhere (except
> hurd) [2].
>
> [1] https://buildd.debian.org/status/logs.php?pkg=janest-core&ver=107.01-4
> [2] https://buildd.debian.org/status/logs.php?pkg=janest-core&ver=107.01-5
>
>
> Cheers,
>
> --
> St?phane
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111117/314062c3/attachment.html>

From steph at glondu.net  Thu Nov 17 13:37:45 2011
From: steph at glondu.net (=?ISO-8859-1?Q?St=E9phane_Glondu?=)
Date: Thu, 17 Nov 2011 14:37:45 +0100
Subject: Mis-detection of -lrt
Message-ID: <4EC50E29.1040803@glondu.net>

Hello,

I've just upgraded Core from version 0.6.0 to 107.01 in Debian, and it
failed on mips, powerpc, s390, hurd and kfreebsd ports, because of
"-lrt" missing [1].

A quick look at Core sources reveals that this flag is supposed to be
there by itself on Linux, and it is indeed on x86, arm and ia64 ports,
but somehow the detection fails everywhere else.

Anyway, I guess checking for Linux is not enough and it is needed
wherever glibc is used. For the moment, I applied a rather crude patch
to the Debian package (attached). It causes "-lrt" to be supplied twice
sometimes, but it at least compiles (and tests pass) everywhere (except
hurd) [2].

[1] https://buildd.debian.org/status/logs.php?pkg=janest-core&ver=107.01-4
[2] https://buildd.debian.org/status/logs.php?pkg=janest-core&ver=107.01-5


Cheers,

-- 
St?phane
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0001-Force-linking-with-lrt.patch
Type: text/x-patch
Size: 1243 bytes
Desc: not available
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111117/723ebc76/attachment.bin>

From ocaml-core at googlegroups.com  Fri Nov 18 03:04:42 2011
From: ocaml-core at googlegroups.com (ocaml-core at googlegroups.com)
Date: Fri, 18 Nov 2011 03:04:42 +0000
Subject: Moderator's spam report for ocaml-core@googlegroups.com
Message-ID: <00504502e06037adad04b1f999e9@google.com>


This message is being sent to you because you are a moderator of the group ocaml-core.

The following suspicious messages were sent to your group, but are being held in your moderation queue because they are classified as likely spam messages.

If you take no action, all the messages below will be discarded automatically as spam.

However, if you see any messages that are not spam below, you may approve them individually by going to:

http://groups.google.com/group/ocaml-core/pendmsg

Please do not mark this notification as spam; this is a service for group moderators. If you do not wish to receive these notifications in the future, you may change your preferences by going to:

http://groups.google.com/group/ocaml-core/manage_post


------- 1 of 1  -------
Subject: Hello
>From: Penda ouma <pendaouma at adinet.com.uy>
Date: Nov 16 02:30PM +0800

?
?
Good Morning,
I am Mrs. Penda Ouma, I am 70 years old, my late husband and I use to live at 11 Al Shatt Street, Tripoli, Tarabulus, Libya. I am married to late Mr. Abi Samson Ouma who was an oil merchant in Libya until his death.


Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=4710704799687651097


For more information about this message, please visit:
http://groups.google.com/support/bin/answer.py?hl=en&answer=165806



From kakadu.hafanana at gmail.com  Fri Nov 18 19:50:48 2011
From: kakadu.hafanana at gmail.com (Kakadu)
Date: Fri, 18 Nov 2011 11:50:48 -0800 (PST)
Subject: Mis-detection of -lrt
In-Reply-To: <4EC50E29.1040803@glondu.net>
References: <4EC50E29.1040803@glondu.net>
Message-ID: <b39432e0-8269-4919-8b03-77b42e953a9c@l24g2000yqm.googlegroups.com>


Updating core's packages in Debian repository are the great news!
I've a little library depend on core and people don't want to look at
it, contribute  because compiling core takes long time. Others said
that they have never seen any useful library depend on core.

It is a pity that I don't have now power to understand debuild now (

Kakadu

On Nov 17, 5:37?pm, St?phane Glondu <st... at glondu.net> wrote:
> Hello,
>
> I've just upgraded Core from version 0.6.0 to 107.01 in Debian, and it
> failed on mips, powerpc, s390, hurd and kfreebsd ports, because of
> "-lrt" missing [1].
>
> A quick look at Core sources reveals that this flag is supposed to be
> there by itself on Linux, and it is indeed on x86, arm and ia64 ports,
> but somehow the detection fails everywhere else.
>
> Anyway, I guess checking for Linux is not enough and it is needed
> wherever glibc is used. For the moment, I applied a rather crude patch
> to the Debian package (attached). It causes "-lrt" to be supplied twice
> sometimes, but it at least compiles (and tests pass) everywhere (except
> hurd) [2].
>
> [1]https://buildd.debian.org/status/logs.php?pkg=janest-core&ver=107.01-4
> [2]https://buildd.debian.org/status/logs.php?pkg=janest-core&ver=107.01-5
>
> Cheers,
>
> --
> St???phane
>
> ?0001-Force-linking-with-lrt.patch
> 1KViewDownload


From markus.mottl at gmail.com  Mon Nov 21 16:53:23 2011
From: markus.mottl at gmail.com (Markus)
Date: Mon, 21 Nov 2011 08:53:23 -0800 (PST)
Subject: Making Async play better with others
In-Reply-To: <20111031142540.GZ26614@janestreet.com>
References: <20111031142540.GZ26614@janestreet.com>
Message-ID: <531e4eac-1d50-4432-8073-7b78ad7d80b0@o9g2000vbc.googlegroups.com>


Concerning Async portability to non-Linux platforms, I think there are
a few trivial API issues, not just there but also in Core, which can
be fixed quickly.  E.g. Core.Bigstring_marshal is excluded on non-
Linux platforms even though there is only a single (and not super-
important) function in there that uses Linux-specific I/O.  Since the
Async writer accesses this module, Async cannot compile on non-Linux
platforms.

I suggest moving all functions that require Linux-specific
functionality to "Linux"-submodules within their current modules, both
in Core and Async.  These sub-modules should be compiled
conditionally.  This is an easy and clean way to propagate Linux-
functionality through all libraries.

The Core/Async issues could probably be solved within 2-3 hours
including making Godi packages, but would be considerably easier to
deal with if there were a public VC repository for both.  Async is
still lacking one.  Since the move to github is apparently taking it's
time, I'd be willing to add Async to OCaml Forge for the while being
and make the required patches to both Core and Async.

Please let me know if Jane Street is willing to merge the patched
versions of Core and Async on OCaml Forge.  Otherwise I'll hold off
until Jane Street creates a public repository where contributions can
be made to avoid unnecessary forking or losing work.

Cheers,
Markus

On Oct 31, 9:25?am, Yaron Minsky <ymin... at janestreet.com> wrote:
> I'm wondering if anyone has opinions on what we should do to make
> Async more widely applicable. ?Here are some issues that jump to mind.
>
> - Porting to windows. ?People have proposed using libuv to do that.
> - Porting to non-Linux UNIX's: Right now, we depend on Core's
> ? Linux_ext module. ?I think the dependency is not deep, so
> ? conditional compilation might be a way to fix that.
> - Support for other polling mechanisms: like epoll and friends. ?Right
> ? now, it's all select. ?A pluggable engine mechanism like the one Lwt
> ? has could make sense here.
> - Interoperability with Lwt: ?It would be nice to make Async and Lwt
> ? libraries play together. ?Jeremie Dimino suggested that the best
> ? thing here might be to build a library for Lwt on top of Async.
> ? That seems plausible enough, but an engine in the other direction
> ? might be good too.
>
> I'm curious if people have opinions as to how to best handle these.
> I'm in particular wondering about conditional compilation as a
> solution. ?It seems messy, but I'm not sure what would be a better
> approach. ?One thing you could imagine is using first-class modules,
> where you stored a system-dependent module that provided the
> OS-specific functionality. ?But there's some performance compromise
> there (probably too small to matter compared to a system-call,
> though), and I'm not sure it comes out cleaner.
>
> y
>
> --
> Yaron Minsky


From yminsky at janestreet.com  Tue Nov 22 00:44:27 2011
From: yminsky at janestreet.com (Yaron Minsky)
Date: Mon, 21 Nov 2011 19:44:27 -0500
Subject: Making Async play better with others
In-Reply-To: <531e4eac-1d50-4432-8073-7b78ad7d80b0@o9g2000vbc.googlegroups.com>
References: <20111031142540.GZ26614@janestreet.com>
 <531e4eac-1d50-4432-8073-7b78ad7d80b0@o9g2000vbc.googlegroups.com>
Message-ID: <20111122004427.GU7522@janestreet.com>


Yury is hoping to get a proper bridging system for ferrying patches
back and forth to github done very soon, say, in another week.  If we
can't get it done, we'll try something simpler as an intermediate
step.

In any case, we'd be very happy to accept portability patches!
Stephen, what do you think about Markus' proposal for how to organize
it?  It's worth noting that this patch might conflict with a patch
that Stephen has done internally that reorganizes much of Async's
internals to separate out a small core that is independent of all
OS-specific code.

So, in short, give us another week!

y

On 21/11/11 08:53, Markus wrote:
> Concerning Async portability to non-Linux platforms, I think there are
> a few trivial API issues, not just there but also in Core, which can
> be fixed quickly.  E.g. Core.Bigstring_marshal is excluded on non-
> Linux platforms even though there is only a single (and not super-
> important) function in there that uses Linux-specific I/O.  Since the
> Async writer accesses this module, Async cannot compile on non-Linux
> platforms.
> 
> I suggest moving all functions that require Linux-specific
> functionality to "Linux"-submodules within their current modules, both
> in Core and Async.  These sub-modules should be compiled
> conditionally.  This is an easy and clean way to propagate Linux-
> functionality through all libraries.
> 
> The Core/Async issues could probably be solved within 2-3 hours
> including making Godi packages, but would be considerably easier to
> deal with if there were a public VC repository for both.  Async is
> still lacking one.  Since the move to github is apparently taking it's
> time, I'd be willing to add Async to OCaml Forge for the while being
> and make the required patches to both Core and Async.
> 
> Please let me know if Jane Street is willing to merge the patched
> versions of Core and Async on OCaml Forge.  Otherwise I'll hold off
> until Jane Street creates a public repository where contributions can
> be made to avoid unnecessary forking or losing work.
> 
> Cheers,
> Markus
> 
> On Oct 31, 9:25?am, Yaron Minsky <ymin... at janestreet.com> wrote:
> > I'm wondering if anyone has opinions on what we should do to make
> > Async more widely applicable. ?Here are some issues that jump to mind.
> >
> > - Porting to windows. ?People have proposed using libuv to do that.
> > - Porting to non-Linux UNIX's: Right now, we depend on Core's
> > ? Linux_ext module. ?I think the dependency is not deep, so
> > ? conditional compilation might be a way to fix that.
> > - Support for other polling mechanisms: like epoll and friends. ?Right
> > ? now, it's all select. ?A pluggable engine mechanism like the one Lwt
> > ? has could make sense here.
> > - Interoperability with Lwt: ?It would be nice to make Async and Lwt
> > ? libraries play together. ?Jeremie Dimino suggested that the best
> > ? thing here might be to build a library for Lwt on top of Async.
> > ? That seems plausible enough, but an engine in the other direction
> > ? might be good too.
> >
> > I'm curious if people have opinions as to how to best handle these.
> > I'm in particular wondering about conditional compilation as a
> > solution. ?It seems messy, but I'm not sure what would be a better
> > approach. ?One thing you could imagine is using first-class modules,
> > where you stored a system-dependent module that provided the
> > OS-specific functionality. ?But there's some performance compromise
> > there (probably too small to matter compared to a system-call,
> > though), and I'm not sure it comes out cleaner.
> >
> > y
> >
> > --
> > Yaron Minsky

-- 
Yaron Minsky


From markus.mottl at gmail.com  Tue Nov 22 01:05:32 2011
From: markus.mottl at gmail.com (Markus Mottl)
Date: Mon, 21 Nov 2011 20:05:32 -0500
Subject: Making Async play better with others
In-Reply-To: <20111122004427.GU7522@janestreet.com>
References: <20111031142540.GZ26614@janestreet.com>
	<531e4eac-1d50-4432-8073-7b78ad7d80b0@o9g2000vbc.googlegroups.com>
	<20111122004427.GU7522@janestreet.com>
Message-ID: <CAP_800p5WEHYow9TdmyyKbZmSpFg3C=WorT9W_PfLsaxByrhtQ@mail.gmail.com>


On Mon, Nov 21, 2011 at 19:44, Yaron Minsky <yminsky at janestreet.com> wrote:
> Yury is hoping to get a proper bridging system for ferrying patches
> back and forth to github done very soon, say, in another week. ?If we
> can't get it done, we'll try something simpler as an intermediate
> step.

Sounds good, my kids will keep me busy enough in the meanwhile.

> In any case, we'd be very happy to accept portability patches!
> Stephen, what do you think about Markus' proposal for how to organize
> it? ?It's worth noting that this patch might conflict with a patch
> that Stephen has done internally that reorganizes much of Async's
> internals to separate out a small core that is independent of all
> OS-specific code.

I'd surely prefer using that version.  In case it would take too long
to wait for the integration, I could apply the trivial changes.  I
managed to build async on Mac OS X using the preprocessor with them.
Merging a few lines later doesn't sound like too much of a challenge.

Regards,
Markus

-- 
Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From sweeks at janestreet.com  Tue Nov 22 03:22:25 2011
From: sweeks at janestreet.com (Stephen Weeks)
Date: Mon, 21 Nov 2011 22:22:25 -0500
Subject: Making Async play better with others
In-Reply-To: <20111122004427.GU7522@janestreet.com>
References: <20111031142540.GZ26614@janestreet.com>
	<531e4eac-1d50-4432-8073-7b78ad7d80b0@o9g2000vbc.googlegroups.com>
	<20111122004427.GU7522@janestreet.com>
Message-ID: <20171.5489.911070.607515@nyc-qws-r31.delacy.com>



> Stephen, what do you think about Markus' proposal for how to organize
> it?

I am highly skeptical of the approach of propagating Linux submodules and
conditional compilation throughout the codebase.  I think it would be preferable
to design a platform-agnostic interface at the OCaml/C boundary, implemented on
the C side using platform-specific C files with minimal conditional compilation
at the C level and no conditional compilation at the OCaml level.  Platforms
that are unable to implement particular aspects of the interfaces should provide
functions that raise exceptions.  Then all OCaml code compiles everywhere, and
it one gets on each platform the maximum ability to run what is actually
implemented.


From yminsky at gmail.com  Tue Nov 22 03:35:36 2011
From: yminsky at gmail.com (Yaron Minsky)
Date: Mon, 21 Nov 2011 22:35:36 -0500
Subject: Making Async play better with others
In-Reply-To: <20171.5489.911070.607515@nyc-qws-r31.delacy.com>
References: <20111031142540.GZ26614@janestreet.com>
	<531e4eac-1d50-4432-8073-7b78ad7d80b0@o9g2000vbc.googlegroups.com>
	<20111122004427.GU7522@janestreet.com>
	<20171.5489.911070.607515@nyc-qws-r31.delacy.com>
Message-ID: <CADKNfhJ+tOuGKrKHNvpr0woe0NAk7wLYzEGMn9qk5M_JRT3FQA@mail.gmail.com>

So I guess that would mean ripping the Linux_ext module out of Core, right?

While I agree about keeping conditional code localized and small, I don't
quite see why the right answer is to have zero tolerance for conditional
compilation of OCaml.  Imagine that you have different APIs on different
platforms that require non-trivially different logic.  Now you're wedded to
the idea of having non-trivial code that compiles conditionally.  The only
question is, will you write that code in C or in OCaml?  Given that choice,
I usually choose OCaml...

Another way of dealing with some of these things is with runtime-tests that
key-off of the platform, potentially using first-class modules.  i.e., you
could have a value of the type:

val os : [ `Windows of (module Windows_specific_API)
         | `Linux   of (module Linux_specific_API)
         | `BSD     of (module BSD_specific_API)
         | `Posix   of (module Posix_specific_API) ]

The obvious downside is that it's a bit slower to dispatch your code, but
if you're doing a system call, maybe that doesn't matter.  And it has the
nice property that all of your OCaml code is type-checked all the time.
 You would just need some conditional compilation that chose the value of
`os` at compile-time.  The upside is that it gives you a way of writing
cross-platform programs that take advantage of the extra functionality when
it's present.

y

On Mon, Nov 21, 2011 at 10:22 PM, Stephen Weeks <sweeks at janestreet.com>wrote:

>
> > Stephen, what do you think about Markus' proposal for how to organize
> > it?
>
> I am highly skeptical of the approach of propagating Linux submodules and
> conditional compilation throughout the codebase.  I think it would be
> preferable
> to design a platform-agnostic interface at the OCaml/C boundary,
> implemented on
> the C side using platform-specific C files with minimal conditional
> compilation
> at the C level and no conditional compilation at the OCaml level.
>  Platforms
> that are unable to implement particular aspects of the interfaces should
> provide
> functions that raise exceptions.  Then all OCaml code compiles everywhere,
> and
> it one gets on each platform the maximum ability to run what is actually
> implemented.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111121/5aad5d68/attachment.html>

From ocaml-core at googlegroups.com  Tue Nov 22 02:31:09 2011
From: ocaml-core at googlegroups.com (ocaml-core at googlegroups.com)
Date: Tue, 22 Nov 2011 02:31:09 +0000
Subject: Moderator's spam report for ocaml-core@googlegroups.com
Message-ID: <0016e6dee8dd9df84b04b2499845@google.com>


This message is being sent to you because you are a moderator of the group ocaml-core.

The following suspicious messages were sent to your group, but are being held in your moderation queue because they are classified as likely spam messages.

If you take no action, all the messages below will be discarded automatically as spam.

However, if you see any messages that are not spam below, you may approve them individually by going to:

http://groups.google.com/group/ocaml-core/pendmsg

Please do not mark this notification as spam; this is a service for group moderators. If you do not wish to receive these notifications in the future, you may change your preferences by going to:

http://groups.google.com/group/ocaml-core/manage_post


------- 1 of 2  -------
Subject: Hello Dear
>From: "Miss Grace John"<market at caesw.com>
Date: Nov 20 04:59AM +0100

Hello Dear,

With profound respect and humble submission, I beg to state the following few lines for your kind consideration, I hope you will spare some of your valuable minutes to read the following appeal with sympathetic mind. I must confess

Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=7237764601010923131

------- 2 of 2  -------
Subject: YOU EMAIL WAS SELECTED
>From: ICC Cricket World Cup 2011 Award Promo. <icccricket1 at london.com>
Date: Nov 21 05:01PM -0200

2011 ICC INTERNATIONAL WORLD CRICKET LOTTERY

UK Ltd Bel grave House 76,
Buckingham Palace Road,
London SW1W 9TQ, 
United Kingdom.

GOVERNMENT ACCREDITED LICENSED!!!
REGISTERED UNDER THE DATA PROTECTION ACT (Registration no: 0201GFRM-7)

Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=6616373214598839933


For more information about this message, please visit:
http://groups.google.com/support/bin/answer.py?hl=en&answer=165806



From ocaml-core+msgappr at googlegroups.com  Tue Nov 22 03:22:27 2011
From: ocaml-core+msgappr at googlegroups.com (ocaml-core)
Date: Tue, 22 Nov 2011 03:22:27 +0000
Subject: ocaml-core - Google Groups: Message Pending [{ILXP0rr1vY2bOioCcWEwAVAlRsKK9eh40}]
Message-ID: <pending-20171.5489.911070.607515@nyc-qws-r31.delacy.com>


A message has been sent to the ocaml-core group and is awaiting approval. We've included this message for your review.

The message requires moderation because the user does not have permission to post.

You can approve or reject this message online at:
http://groups.google.com/group/ocaml-core/pendmsg?hl=en_US

or

You can approve this message by replying to this email.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111122/4efa77f2/attachment.html>
-------------- next part --------------
An embedded message was scrubbed...
From: unknown sender
Subject: Re: Making Async play better with others
Date: Mon, 21 Nov 2011 22:22:25 -0500
Size: 3126
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111122/4efa77f2/attachment.mht>

From anil at recoil.org  Tue Nov 22 12:58:12 2011
From: anil at recoil.org (Anil Madhavapeddy)
Date: Tue, 22 Nov 2011 12:58:12 +0000
Subject: Making Async play better with others
In-Reply-To: <CADKNfhJ+tOuGKrKHNvpr0woe0NAk7wLYzEGMn9qk5M_JRT3FQA@mail.gmail.com>
References: <20111031142540.GZ26614@janestreet.com>
 <531e4eac-1d50-4432-8073-7b78ad7d80b0@o9g2000vbc.googlegroups.com>
 <20111122004427.GU7522@janestreet.com>
 <20171.5489.911070.607515@nyc-qws-r31.delacy.com>
 <CADKNfhJ+tOuGKrKHNvpr0woe0NAk7wLYzEGMn9qk5M_JRT3FQA@mail.gmail.com>
Message-ID: <20111122125812.GA14444@dark.recoil.org>


On Mon, Nov 21, 2011 at 10:35:36PM -0500, Yaron Minsky wrote:
> So I guess that would mean ripping the Linux_ext module out of Core, right?
> 
> While I agree about keeping conditional code localized and small, I don't
> quite see why the right answer is to have zero tolerance for conditional
> compilation of OCaml.  Imagine that you have different APIs on different
> platforms that require non-trivially different logic.  Now you're wedded to
> the idea of having non-trivial code that compiles conditionally.  The only
> question is, will you write that code in C or in OCaml?  Given that choice,
> I usually choose OCaml...

Ideally, there should be no platform-specific tests at all, but rather
feature-specific ones. The Core C bindings are pretty good about this, as
they already do #ifdef checks (e.g. CLOCK_PROCESS_CPUTIME_ID or HAS_IPV6).

Why not just build standalone OCaml modules which always implement the
same signature, but internally do some preprocessing for a particular
platform?  For instance, TCP_CORK is directly exposed at the moment, and
is quite Linux-specific.  Is this used for sendfile() or something else at
the moment?  The OCaml module (Async.Tcp_file?) should probably be a
sendfile()-like interface, and internally implement it in the FreeBSD
(where it is called TCP_NOPUSH) or Linux style.  Other platforms like
OpenBSD simply lack the flag, and would fallback to a portable but slower
read/write implementation that always works, but with the same semantics.

I like the fact that the OCaml Thread or Dynlink module simply isn't
present if the platform doesn't support threads, rather than there being a
dummy module that calls an exception whenever you invoke it.  It would be
particularly unhelped to find random exceptions being raised all over the
place just because some code used a small Linux-specific feature.

> Another way of dealing with some of these things is with runtime-tests that
> key-off of the platform, potentially using first-class modules.  i.e., you
> could have a value of the type:
> 
> val os : [ `Windows of (module Windows_specific_API)
>          | `Linux   of (module Linux_specific_API)
>          | `BSD     of (module BSD_specific_API)
>          | `Posix   of (module Posix_specific_API) ]

It would be great to have this to test for *features* at runtime, but is
there any use of knowing what OS you are running under? It just makes it
more difficult to port it to new platforms.

It gets even more messy when you consider that some features (Dynlink or 
high-res clocks) may only work reliably on mainstream architectures and
not so well on MIPS or Sparc64.  I'd prefer something like:

val clock: [ `Realtime of (module Realtime_clock)
           | `Posix of (module Posix_clock)
           ]

So the programmer would explicitly choose to upgrade to a better clock, at
the cost of some portability, but by default would get a Posix_clock.

Anil


From yminsky at gmail.com  Thu Nov 24 01:27:17 2011
From: yminsky at gmail.com (Yaron Minsky)
Date: Wed, 23 Nov 2011 20:27:17 -0500
Subject: ocaml-core - Google Groups: Message Pending [{ILXP0rr1vY2bOioCcWEwAVAlRsKK9eh40}]
In-Reply-To: <pending-20171.5489.911070.607515@nyc-qws-r31.delacy.com>
References: <pending-20171.5489.911070.607515@nyc-qws-r31.delacy.com>
Message-ID: <CADKNfhLyya_K6iCwORo4-TGXC5ouzQVQVa=fwP4zZ_cEvfG9YA@mail.gmail.com>

On Mon, Nov 21, 2011 at 10:22 PM, ocaml-core <
ocaml-core+msgappr at googlegroups.com> wrote:

>   A message has been sent to the ocaml-core<http://groups.google.com/group/ocaml-core?hl=en_US>group and is awaiting approval. We've included this message for your review.
>
> The message requires moderation because the user does not have permission
> to post.
>
> You can approve or reject<http://groups.google.com/group/ocaml-core/pendmsg?hl=en_US>this message or you can approve this message by replying to this email.
>  [image: Visit Google Groups]
>
> Start <https://groups.google.com/groups/create?hl=en_US&src=email> your
> own group, visit <http://groups.google.com/support/?hl=en_US&src=email>the help center, or
> report <https://groups.google.com/groups/abuse?hl=en_US&src=email> abuse.
>
>
> ---------- Forwarded message ----------
> From: Stephen Weeks <sweeks at janestreet.com>
> To: Yaron Minsky <yminsky at janestreet.com>
> Date: Mon, 21 Nov 2011 22:22:25 -0500
> Subject: Re: Making Async play better with others
>
> > Stephen, what do you think about Markus' proposal for how to organize
> > it?
>
> I am highly skeptical of the approach of propagating Linux submodules and
> conditional compilation throughout the codebase.  I think it would be
> preferable
> to design a platform-agnostic interface at the OCaml/C boundary,
> implemented on
> the C side using platform-specific C files with minimal conditional
> compilation
> at the C level and no conditional compilation at the OCaml level.
>  Platforms
> that are unable to implement particular aspects of the interfaces should
> provide
> functions that raise exceptions.  Then all OCaml code compiles everywhere,
> and
> it one gets on each platform the maximum ability to run what is actually
> implemented.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111123/9eea3cce/attachment.html>

From yminsky at gmail.com  Tue Nov  1 01:12:08 2011
From: yminsky at gmail.com (Yaron Minsky)
Date: Mon, 31 Oct 2011 21:12:08 -0400
Subject: ocaml-core - Google Groups: Message Pending [{IIK-oq-Cu-H1LCoCeWIwALbbsGLyV9UF0}]
In-Reply-To: <pending-20111031174535.GM25160@janestreet.com>
References: <pending-20111031174535.GM25160@janestreet.com>
Message-ID: <CADKNfhJnnGuaDmpLQQ=pwK8ha1i3TRJYXyqX70c=i9zXugUifA@mail.gmail.com>

On Mon, Oct 31, 2011 at 1:45 PM, ocaml-core <
ocaml-core+msgappr at googlegroups.com> wrote:

>   A message has been sent to the ocaml-core<http://groups.google.com/group/ocaml-core?hl=en_US>group and is awaiting approval. We've included this message for your review.
>
> The message requires moderation because the user does not have permission
> to post.
>
> You can approve or reject<http://groups.google.com/group/ocaml-core/pendmsg?hl=en_US>this message or you can approve this message by replying to this email.
>  [image: Visit Google Groups]
>
> Start <https://groups.google.com/groups/create?hl=en_US&src=email> your
> own group, visit <http://groups.google.com/support/?hl=en_US&src=email>the help center, or
> report <https://groups.google.com/groups/abuse?hl=en_US&src=email> abuse.
>
>
> ---------- Forwarded message ----------
> From: Nathan Linger <nlinger at janestreet.com>
> To: ocaml-core at googlegroups.com
> Date: Mon, 31 Oct 2011 13:45:35 -0400
> Subject: Re: Making Async play better with others
>
> On 10/31/11 16:37, Anil Madhavapeddy wrote:
> > On 31 Oct 2011, at 15:06, Yaron Minsky wrote:
> >
> > > On 31/10/11 14:29, Anil Madhavapeddy wrote:
> > >> You could combine most of these by basing Async on top of libuv,
> > >> which is a superset of libev (the event library that Lwt uses to
> > >> abstract network I/O).
> > >>
> > >> https://github.com/joyent/libuv
> > >>
> > >> Crucially, libuv has good support for the Windows AIO model, and is
> > >> also what node.js uses to drive its event loop (so has widespread
> > >> usage).
> > >>
> > >> At first glance at Core, it looks like many of the Linux-specific
> > >> bits like high-res timers and thread scheduling are also covered by
> > >> it.
> > >
> > > How much do you know about the performance and quality of libuv?  I'm
> > > always nervous about shimming yet another layer between us and the
> > > bare metal.
> >
> > Nothing beyond flicking through the source code and occasionally being
> > cursed with using node.js (which works pretty well until you get to
> > the Javascript level :)
> >
> > It's pretty much the only game in town when it comes to cross-platform
> > C-based asynchronous programming libraries however (as far as I know).
>
> Isn't libevent[1] the same sort of thing?  I believe it is the C-based
> asynchronous programming library underlying memcached[2], which in turn
> is used by several high-profile web applications -- their website lists
> Wikipedia, WordPress.com, Flickr, Twitter, Typepad, Youtube, LiveJournal,
> Digg, Craigslist, and a handful of others I didn't recognize.
>
> I dusted off the ocaml bindings for libevent[3] at home last year and
> found them pretty usable for the small experiments I did (implementing a
> monadic interface for CML-style concurrent programming).  Their website[1]
> claims "Libevent should compile on Linux, *BSD, Mac OS X, Solaris,
> Windows, and more."
>
> [1] http://libevent.org/
> [2] http://www.memcached.org/
> [3] http://mmzeeman.home.xs4all.nl/ocaml/
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111031/2b07e248/attachment-0001.html>

From yminsky at gmail.com  Tue Nov  1 02:06:16 2011
From: yminsky at gmail.com (Yaron Minsky)
Date: Mon, 31 Oct 2011 22:06:16 -0400
Subject: Making Async play better with others
In-Reply-To: <20111031174535.GM25160@janestreet.com>
References: <20111031142540.GZ26614@janestreet.com>
	<3DDCF997-C2CC-4D68-B7CA-AD810B8BF21D@recoil.org>
	<20111031150640.GF26614@janestreet.com>
	<40CAC937-937D-499A-A84F-976B8FBDC5D6@recoil.org>
	<20111031174535.GM25160@janestreet.com>
Message-ID: <CADKNfhLxK+xeyqUCbWRtv-QETJQArhQHuW6nstkp8R8nUaqLhA@mail.gmail.com>

There's also libev, which seems to be aimed as a simplified and cleaned-up
version of libevent.  But its support for Windows seems pretty minimal.

y

On Mon, Oct 31, 2011 at 1:45 PM, Nathan Linger <nlinger at janestreet.com>wrote:

>
> On 10/31/11 16:37, Anil Madhavapeddy wrote:
> > On 31 Oct 2011, at 15:06, Yaron Minsky wrote:
> >
> > > On 31/10/11 14:29, Anil Madhavapeddy wrote:
> > >> You could combine most of these by basing Async on top of libuv,
> > >> which is a superset of libev (the event library that Lwt uses to
> > >> abstract network I/O).
> > >>
> > >> https://github.com/joyent/libuv
> > >>
> > >> Crucially, libuv has good support for the Windows AIO model, and is
> > >> also what node.js uses to drive its event loop (so has widespread
> > >> usage).
> > >>
> > >> At first glance at Core, it looks like many of the Linux-specific
> > >> bits like high-res timers and thread scheduling are also covered by
> > >> it.
> > >
> > > How much do you know about the performance and quality of libuv?  I'm
> > > always nervous about shimming yet another layer between us and the
> > > bare metal.
> >
> > Nothing beyond flicking through the source code and occasionally being
> > cursed with using node.js (which works pretty well until you get to
> > the Javascript level :)
> >
> > It's pretty much the only game in town when it comes to cross-platform
> > C-based asynchronous programming libraries however (as far as I know).
>
> Isn't libevent[1] the same sort of thing?  I believe it is the C-based
> asynchronous programming library underlying memcached[2], which in turn
> is used by several high-profile web applications -- their website lists
> Wikipedia, WordPress.com, Flickr, Twitter, Typepad, Youtube, LiveJournal,
> Digg, Craigslist, and a handful of others I didn't recognize.
>
> I dusted off the ocaml bindings for libevent[3] at home last year and
> found them pretty usable for the small experiments I did (implementing a
> monadic interface for CML-style concurrent programming).  Their website[1]
> claims "Libevent should compile on Linux, *BSD, Mac OS X, Solaris,
> Windows, and more."
>
> [1] http://libevent.org/
> [2] http://www.memcached.org/
> [3] http://mmzeeman.home.xs4all.nl/ocaml/
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111031/efda4b69/attachment-0001.html>

From dastapov at gmail.com  Tue Nov  1 10:24:04 2011
From: dastapov at gmail.com (Dmitry Astapov)
Date: Tue, 1 Nov 2011 03:24:04 -0700 (PDT)
Subject: Making Async play better with others
In-Reply-To: <20111031150640.GF26614@janestreet.com>
References: <20111031142540.GZ26614@janestreet.com> <3DDCF997-C2CC-4D68-B7CA-AD810B8BF21D@recoil.org>
 <20111031150640.GF26614@janestreet.com>
Message-ID: <f23a65f9-6de0-4147-b42a-25e90ad5fd96@l12g2000vby.googlegroups.com>


I read quite a lot about libev, which seems to be an ancestor of libuv
while I hunted for bugs in the code which had direct bindings for
epoll and kqueue. And in my experience, libev handles so many bugs and
quirky situations in underlying polling mechanisms that one must be
really, really condfident that he is rejecting libev (or any other
wrapper) for a good reason (that is, that he would do the same job
better).

Just search for EVBACKEND_EPOLL and EVBACKEND_KQUEUE here
http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod and then look at
the relevant parts of ev_epoll.c or ev_kqueue.c and think if you want
to have a walk through this particular minefield :)

On Oct 31, 3:06?pm, Yaron Minsky <ymin... at janestreet.com> wrote:
> On 31/10/11 14:29, Anil Madhavapeddy wrote:
>
> > You could combine most of these by basing Async on top of libuv,
> > which is a superset of libev (the event library that Lwt uses to
> > abstract network I/O).
>
> >https://github.com/joyent/libuv
>
> > Crucially, libuv has good support for the Windows AIO model, and is
> > also what node.js uses to drive its event loop (so has widespread
> > usage).
>
> > At first glance at Core, it looks like many of the Linux-specific
> > bits like high-res timers and thread scheduling are also covered by
> > it.
>
> How much do you know about the performance and quality of libuv? ?I'm
> always nervous about shimming yet another layer between us and the
> bare metal.
>
> y
>
>
>
> > Anil
>
> > On 31 Oct 2011, at 14:25, Yaron Minsky wrote:
>
> > > I'm wondering if anyone has opinions on what we should do to make
> > > Async more widely applicable. ?Here are some issues that jump to mind.
>
> > > - Porting to windows. ?People have proposed using libuv to do that.
> > > - Porting to non-Linux UNIX's: Right now, we depend on Core's
> > > ?Linux_ext module. ?I think the dependency is not deep, so
> > > ?conditional compilation might be a way to fix that.
> > > - Support for other polling mechanisms: like epoll and friends. ?Right
> > > ?now, it's all select. ?A pluggable engine mechanism like the one Lwt
> > > ?has could make sense here.
> > > - Interoperability with Lwt: ?It would be nice to make Async and Lwt
> > > ?libraries play together. ?Jeremie Dimino suggested that the best
> > > ?thing here might be to build a library for Lwt on top of Async.
> > > ?That seems plausible enough, but an engine in the other direction
> > > ?might be good too.
>
> > > I'm curious if people have opinions as to how to best handle these.
> > > I'm in particular wondering about conditional compilation as a
> > > solution. ?It seems messy, but I'm not sure what would be a better
> > > approach. ?One thing you could imagine is using first-class modules,
> > > where you stored a system-dependent module that provided the
> > > OS-specific functionality. ?But there's some performance compromise
> > > there (probably too small to matter compared to a system-call,
> > > though), and I'm not sure it comes out cleaner.
>
> > > y
>
> > > --
> > > Yaron Minsky
>
> --
> Yaron Minsky


From dastapov at gmail.com  Tue Nov  1 10:25:59 2011
From: dastapov at gmail.com (Dmitry Astapov)
Date: Tue, 1 Nov 2011 03:25:59 -0700 (PDT)
Subject: Making Async play better with others
In-Reply-To: <20111031174535.GM25160@janestreet.com>
References: <20111031142540.GZ26614@janestreet.com> <3DDCF997-C2CC-4D68-B7CA-AD810B8BF21D@recoil.org>
 <20111031150640.GF26614@janestreet.com> <40CAC937-937D-499A-A84F-976B8FBDC5D6@recoil.org>
 <20111031174535.GM25160@janestreet.com>
Message-ID: <c1b74545-452a-48c8-af0e-6baa5e7d412a@r2g2000vbj.googlegroups.com>


libev seems to be faster: http://libev.schmorp.de/bench.html

On Oct 31, 5:45?pm, Nathan Linger <nlin... at janestreet.com> wrote:
> On 10/31/11 16:37, Anil Madhavapeddy wrote:
>
>
>
> > On 31 Oct 2011, at 15:06, Yaron Minsky wrote:
>
> > > On 31/10/11 14:29, Anil Madhavapeddy wrote:
> > >> You could combine most of these by basing Async on top of libuv,
> > >> which is a superset of libev (the event library that Lwt uses to
> > >> abstract network I/O).
>
> > >>https://github.com/joyent/libuv
>
> > >> Crucially, libuv has good support for the Windows AIO model, and is
> > >> also what node.js uses to drive its event loop (so has widespread
> > >> usage).
>
> > >> At first glance at Core, it looks like many of the Linux-specific
> > >> bits like high-res timers and thread scheduling are also covered by
> > >> it.
>
> > > How much do you know about the performance and quality of libuv? ?I'm
> > > always nervous about shimming yet another layer between us and the
> > > bare metal.
>
> > Nothing beyond flicking through the source code and occasionally being
> > cursed with using node.js (which works pretty well until you get to
> > the Javascript level :)
>
> > It's pretty much the only game in town when it comes to cross-platform
> > C-based asynchronous programming libraries however (as far as I know).
>
> Isn't libevent[1] the same sort of thing? ?I believe it is the C-based
> asynchronous programming library underlying memcached[2], which in turn
> is used by several high-profile web applications -- their website lists
> Wikipedia, WordPress.com, Flickr, Twitter, Typepad, Youtube, LiveJournal,
> Digg, Craigslist, and a handful of others I didn't recognize.
>
> I dusted off the ocaml bindings for libevent[3] at home last year and
> found them pretty usable for the small experiments I did (implementing a
> monadic interface for CML-style concurrent programming). ?Their website[1]
> claims "Libevent should compile on Linux, *BSD, Mac OS X, Solaris,
> Windows, and more."
>
> [1]http://libevent.org/
> [2]http://www.memcached.org/
> [3]http://mmzeeman.home.xs4all.nl/ocaml/


From yminsky at gmail.com  Tue Nov  1 09:56:30 2011
From: yminsky at gmail.com (Yaron Minsky)
Date: Tue, 1 Nov 2011 05:56:30 -0400
Subject: Making Async play better with others
In-Reply-To: <20111101092046.GL23606@dark.recoil.org>
References: <20111031142540.GZ26614@janestreet.com>
	<3DDCF997-C2CC-4D68-B7CA-AD810B8BF21D@recoil.org>
	<20111031150640.GF26614@janestreet.com>
	<40CAC937-937D-499A-A84F-976B8FBDC5D6@recoil.org>
	<20111031174535.GM25160@janestreet.com>
	<20111101092046.GL23606@dark.recoil.org>
Message-ID: <CADKNfhJRRN0vuBNeB=1DbWrve5Y8t+uTa1vhwBVeBtVmZHjtAA@mail.gmail.com>

On Tue, Nov 1, 2011 at 5:20 AM, Anil Madhavapeddy <anil at recoil.org> wrote:

> On Mon, Oct 31, 2011 at 01:45:35PM -0400, Nathan Linger wrote:
> > > It's pretty much the only game in town when it comes to cross-platform
> > > C-based asynchronous programming libraries however (as far as I know).
> >
> > Isn't libevent[1] the same sort of thing?  I believe it is the C-based
> > asynchronous programming library underlying memcached[2], which in turn
> > is used by several high-profile web applications -- their website lists
> > Wikipedia, WordPress.com, Flickr, Twitter, Typepad, Youtube, LiveJournal,
> > Digg, Craigslist, and a handful of others I didn't recognize.
>
> Yeah, but only for network I/O.  POSIX unfortunately demands threads for
> doing efficient file I/O, which libuv also seems to handle as more of a
> full-service library.


True, although libuv also seems a lot less tried-and-tested.  Also, doesn't
libevent do more than just network I/O now that it has support for IOCP?
 From a quick look around, it looks like IOCP support hit in libevent
version 2.  That said, I'm not terribly confident of any of this...


> > I dusted off the ocaml bindings for libevent[3] at home last year and
> > found them pretty usable for the small experiments I did (implementing a
> > monadic interface for CML-style concurrent programming).  Their
> website[1]
> > claims "Libevent should compile on Linux, *BSD, Mac OS X, Solaris,
> > Windows, and more."
>
> libev and libevent are pretty closely matched feature-wise. The author of
> libev has also done libeio ( http://software.schmorp.de/pkg/libeio.html )
> to handle POSIX I/O, but Windows support is lacking.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111101/d0ea3920/attachment-0001.html>

From yminsky at gmail.com  Tue Nov  1 10:30:16 2011
From: yminsky at gmail.com (Yaron Minsky)
Date: Tue, 1 Nov 2011 06:30:16 -0400
Subject: Making Async play better with others
In-Reply-To: <f23a65f9-6de0-4147-b42a-25e90ad5fd96@l12g2000vby.googlegroups.com>
References: <20111031142540.GZ26614@janestreet.com>
	<3DDCF997-C2CC-4D68-B7CA-AD810B8BF21D@recoil.org>
	<20111031150640.GF26614@janestreet.com>
	<f23a65f9-6de0-4147-b42a-25e90ad5fd96@l12g2000vby.googlegroups.com>
Message-ID: <CADKNfhLJPqxwZUBt4U2JRRHeeGKhuBom2KTvEX9sXVLkLLoNug@mail.gmail.com>

I agree that you want to use one of those libraries if you're programming
against epoll and kqueue.  I'm less sure that you should use them in
preference to select (which, from both some experiments I think Markus
Mottl ran, and other things I've heard is faster for moderate numbers of
file descriptors) is less clear.

But even once you agree you need one of these libraries, it's till not
clear to me how to pick amongst libev, libuv and libevent.  libevent seems
like the most mature, libev is claimed (by the author anyway) to be more
efficient, and libuv seems to treat Windows as a first-class citizen.  This
is to some degree why I like the idea of a pluggable engine, which would
prevent us from needing to commit to a single answer.

y

On Tue, Nov 1, 2011 at 6:24 AM, Dmitry Astapov <dastapov at gmail.com> wrote:

> I read quite a lot about libev, which seems to be an ancestor of libuv
> while I hunted for bugs in the code which had direct bindings for
> epoll and kqueue. And in my experience, libev handles so many bugs and
> quirky situations in underlying polling mechanisms that one must be
> really, really condfident that he is rejecting libev (or any other
> wrapper) for a good reason (that is, that he would do the same job
> better).
>
> Just search for EVBACKEND_EPOLL and EVBACKEND_KQUEUE here
> http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod and then look at
> the relevant parts of ev_epoll.c or ev_kqueue.c and think if you want
> to have a walk through this particular minefield :)
>
> On Oct 31, 3:06 pm, Yaron Minsky <ymin... at janestreet.com> wrote:
> > On 31/10/11 14:29, Anil Madhavapeddy wrote:
> >
> > > You could combine most of these by basing Async on top of libuv,
> > > which is a superset of libev (the event library that Lwt uses to
> > > abstract network I/O).
> >
> > >https://github.com/joyent/libuv
> >
> > > Crucially, libuv has good support for the Windows AIO model, and is
> > > also what node.js uses to drive its event loop (so has widespread
> > > usage).
> >
> > > At first glance at Core, it looks like many of the Linux-specific
> > > bits like high-res timers and thread scheduling are also covered by
> > > it.
> >
> > How much do you know about the performance and quality of libuv?  I'm
> > always nervous about shimming yet another layer between us and the
> > bare metal.
> >
> > y
> >
> >
> >
> > > Anil
> >
> > > On 31 Oct 2011, at 14:25, Yaron Minsky wrote:
> >
> > > > I'm wondering if anyone has opinions on what we should do to make
> > > > Async more widely applicable.  Here are some issues that jump to
> mind.
> >
> > > > - Porting to windows.  People have proposed using libuv to do that.
> > > > - Porting to non-Linux UNIX's: Right now, we depend on Core's
> > > >  Linux_ext module.  I think the dependency is not deep, so
> > > >  conditional compilation might be a way to fix that.
> > > > - Support for other polling mechanisms: like epoll and friends.
>  Right
> > > >  now, it's all select.  A pluggable engine mechanism like the one Lwt
> > > >  has could make sense here.
> > > > - Interoperability with Lwt:  It would be nice to make Async and Lwt
> > > >  libraries play together.  Jeremie Dimino suggested that the best
> > > >  thing here might be to build a library for Lwt on top of Async.
> > > >  That seems plausible enough, but an engine in the other direction
> > > >  might be good too.
> >
> > > > I'm curious if people have opinions as to how to best handle these.
> > > > I'm in particular wondering about conditional compilation as a
> > > > solution.  It seems messy, but I'm not sure what would be a better
> > > > approach.  One thing you could imagine is using first-class modules,
> > > > where you stored a system-dependent module that provided the
> > > > OS-specific functionality.  But there's some performance compromise
> > > > there (probably too small to matter compared to a system-call,
> > > > though), and I'm not sure it comes out cleaner.
> >
> > > > y
> >
> > > > --
> > > > Yaron Minsky
> >
> > --
> > Yaron Minsky
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111101/d1f7f667/attachment-0001.html>

From yminsky at gmail.com  Tue Nov  1 10:32:44 2011
From: yminsky at gmail.com (Yaron Minsky)
Date: Tue, 1 Nov 2011 06:32:44 -0400
Subject: Making Async play better with others
In-Reply-To: <CADKNfhLJPqxwZUBt4U2JRRHeeGKhuBom2KTvEX9sXVLkLLoNug@mail.gmail.com>
References: <20111031142540.GZ26614@janestreet.com>
	<3DDCF997-C2CC-4D68-B7CA-AD810B8BF21D@recoil.org>
	<20111031150640.GF26614@janestreet.com>
	<f23a65f9-6de0-4147-b42a-25e90ad5fd96@l12g2000vby.googlegroups.com>
	<CADKNfhLJPqxwZUBt4U2JRRHeeGKhuBom2KTvEX9sXVLkLLoNug@mail.gmail.com>
Message-ID: <CADKNfhKUdL7j3kJKYPMRGuacpXRGriNZaQoHOOoJNNgx1h744A@mail.gmail.com>

Poking around a bit more, it looks like libuv uses libev (rather than
forking/reimplementing), which makes libuv sound more interesting...

y

On Tue, Nov 1, 2011 at 6:30 AM, Yaron Minsky <yminsky at gmail.com> wrote:

> I agree that you want to use one of those libraries if you're programming
> against epoll and kqueue.  I'm less sure that you should use them in
> preference to select (which, from both some experiments I think Markus
> Mottl ran, and other things I've heard is faster for moderate numbers of
> file descriptors) is less clear.
>
> But even once you agree you need one of these libraries, it's till not
> clear to me how to pick amongst libev, libuv and libevent.  libevent seems
> like the most mature, libev is claimed (by the author anyway) to be more
> efficient, and libuv seems to treat Windows as a first-class citizen.  This
> is to some degree why I like the idea of a pluggable engine, which would
> prevent us from needing to commit to a single answer.
>
> y
>
>
> On Tue, Nov 1, 2011 at 6:24 AM, Dmitry Astapov <dastapov at gmail.com> wrote:
>
>> I read quite a lot about libev, which seems to be an ancestor of libuv
>> while I hunted for bugs in the code which had direct bindings for
>> epoll and kqueue. And in my experience, libev handles so many bugs and
>> quirky situations in underlying polling mechanisms that one must be
>> really, really condfident that he is rejecting libev (or any other
>> wrapper) for a good reason (that is, that he would do the same job
>> better).
>>
>> Just search for EVBACKEND_EPOLL and EVBACKEND_KQUEUE here
>> http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod and then look at
>> the relevant parts of ev_epoll.c or ev_kqueue.c and think if you want
>> to have a walk through this particular minefield :)
>>
>> On Oct 31, 3:06 pm, Yaron Minsky <ymin... at janestreet.com> wrote:
>> > On 31/10/11 14:29, Anil Madhavapeddy wrote:
>> >
>> > > You could combine most of these by basing Async on top of libuv,
>> > > which is a superset of libev (the event library that Lwt uses to
>> > > abstract network I/O).
>> >
>> > >https://github.com/joyent/libuv
>> >
>> > > Crucially, libuv has good support for the Windows AIO model, and is
>> > > also what node.js uses to drive its event loop (so has widespread
>> > > usage).
>> >
>> > > At first glance at Core, it looks like many of the Linux-specific
>> > > bits like high-res timers and thread scheduling are also covered by
>> > > it.
>> >
>> > How much do you know about the performance and quality of libuv?  I'm
>> > always nervous about shimming yet another layer between us and the
>> > bare metal.
>> >
>> > y
>> >
>> >
>> >
>> > > Anil
>> >
>> > > On 31 Oct 2011, at 14:25, Yaron Minsky wrote:
>> >
>> > > > I'm wondering if anyone has opinions on what we should do to make
>> > > > Async more widely applicable.  Here are some issues that jump to
>> mind.
>> >
>> > > > - Porting to windows.  People have proposed using libuv to do that.
>> > > > - Porting to non-Linux UNIX's: Right now, we depend on Core's
>> > > >  Linux_ext module.  I think the dependency is not deep, so
>> > > >  conditional compilation might be a way to fix that.
>> > > > - Support for other polling mechanisms: like epoll and friends.
>>  Right
>> > > >  now, it's all select.  A pluggable engine mechanism like the one
>> Lwt
>> > > >  has could make sense here.
>> > > > - Interoperability with Lwt:  It would be nice to make Async and Lwt
>> > > >  libraries play together.  Jeremie Dimino suggested that the best
>> > > >  thing here might be to build a library for Lwt on top of Async.
>> > > >  That seems plausible enough, but an engine in the other direction
>> > > >  might be good too.
>> >
>> > > > I'm curious if people have opinions as to how to best handle these.
>> > > > I'm in particular wondering about conditional compilation as a
>> > > > solution.  It seems messy, but I'm not sure what would be a better
>> > > > approach.  One thing you could imagine is using first-class modules,
>> > > > where you stored a system-dependent module that provided the
>> > > > OS-specific functionality.  But there's some performance compromise
>> > > > there (probably too small to matter compared to a system-call,
>> > > > though), and I'm not sure it comes out cleaner.
>> >
>> > > > y
>> >
>> > > > --
>> > > > Yaron Minsky
>> >
>> > --
>> > Yaron Minsky
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111101/7120d75e/attachment-0001.html>

From anil at recoil.org  Tue Nov  1 09:20:46 2011
From: anil at recoil.org (Anil Madhavapeddy)
Date: Tue, 1 Nov 2011 09:20:46 +0000
Subject: Making Async play better with others
In-Reply-To: <20111031174535.GM25160@janestreet.com>
References: <20111031142540.GZ26614@janestreet.com>
 <3DDCF997-C2CC-4D68-B7CA-AD810B8BF21D@recoil.org>
 <20111031150640.GF26614@janestreet.com>
 <40CAC937-937D-499A-A84F-976B8FBDC5D6@recoil.org>
 <20111031174535.GM25160@janestreet.com>
Message-ID: <20111101092046.GL23606@dark.recoil.org>


On Mon, Oct 31, 2011 at 01:45:35PM -0400, Nathan Linger wrote:
> > It's pretty much the only game in town when it comes to cross-platform
> > C-based asynchronous programming libraries however (as far as I know).
> 
> Isn't libevent[1] the same sort of thing?  I believe it is the C-based
> asynchronous programming library underlying memcached[2], which in turn
> is used by several high-profile web applications -- their website lists
> Wikipedia, WordPress.com, Flickr, Twitter, Typepad, Youtube, LiveJournal,
> Digg, Craigslist, and a handful of others I didn't recognize.

Yeah, but only for network I/O.  POSIX unfortunately demands threads for
doing efficient file I/O, which libuv also seems to handle as more of a
full-service library.

> I dusted off the ocaml bindings for libevent[3] at home last year and
> found them pretty usable for the small experiments I did (implementing a
> monadic interface for CML-style concurrent programming).  Their website[1]
> claims "Libevent should compile on Linux, *BSD, Mac OS X, Solaris,
> Windows, and more."

libev and libevent are pretty closely matched feature-wise. The author of
libev has also done libeio ( http://software.schmorp.de/pkg/libeio.html )
to handle POSIX I/O, but Windows support is lacking.

-- 
Anil Madhavapeddy                                 http://anil.recoil.org


From feinberg at gmail.com  Wed Nov  2 22:13:23 2011
From: feinberg at gmail.com (Alex Feinberg)
Date: Wed, 2 Nov 2011 15:13:23 -0700
Subject: Making Async play better with others
In-Reply-To: <CADKNfhKUdL7j3kJKYPMRGuacpXRGriNZaQoHOOoJNNgx1h744A@mail.gmail.com>
References: <20111031142540.GZ26614@janestreet.com>
	<3DDCF997-C2CC-4D68-B7CA-AD810B8BF21D@recoil.org>
	<20111031150640.GF26614@janestreet.com>
	<f23a65f9-6de0-4147-b42a-25e90ad5fd96@l12g2000vby.googlegroups.com>
	<CADKNfhLJPqxwZUBt4U2JRRHeeGKhuBom2KTvEX9sXVLkLLoNug@mail.gmail.com>
	<CADKNfhKUdL7j3kJKYPMRGuacpXRGriNZaQoHOOoJNNgx1h744A@mail.gmail.com>
Message-ID: <CAKYjr2ApDOzFU5Lwmqv1d=3zqn7SydpwXM4oGuShhZYNsKcaTQ@mail.gmail.com>


libevent2 is also worth investigating. The "libevent book" explains it
very well:

http://www.wangafu.net/~nickm/libevent-book/

It adds thread safety and, as a result of additional work on the
Windows/IOCP port, a great deal of bugfixes as compared to libevent1.

Thanks,
- Alex

On Tue, Nov 1, 2011 at 3:32 AM, Yaron Minsky <yminsky at gmail.com> wrote:
> Poking around a bit more, it looks like libuv uses libev (rather than
> forking/reimplementing), which makes libuv sound more interesting...
> y
>
> On Tue, Nov 1, 2011 at 6:30 AM, Yaron Minsky <yminsky at gmail.com> wrote:
>>
>> I agree that you want to use one of those libraries if you're programming
>> against epoll and kqueue. ?I'm less sure that you should use them in
>> preference to select (which, from both some experiments I think Markus Mottl
>> ran, and other things I've heard is faster for moderate numbers of file
>> descriptors) is less clear.
>> But even once you agree you need one of these libraries, it's till not
>> clear to me how to pick amongst libev, libuv and libevent. ?libevent seems
>> like the most mature, libev is claimed (by the author anyway) to be more
>> efficient, and libuv seems to treat Windows as a first-class citizen. ?This
>> is to some degree why I like the idea of a pluggable engine, which would
>> prevent us from needing to commit to a single answer.
>> y
>>
>> On Tue, Nov 1, 2011 at 6:24 AM, Dmitry Astapov <dastapov at gmail.com> wrote:
>>>
>>> I read quite a lot about libev, which seems to be an ancestor of libuv
>>> while I hunted for bugs in the code which had direct bindings for
>>> epoll and kqueue. And in my experience, libev handles so many bugs and
>>> quirky situations in underlying polling mechanisms that one must be
>>> really, really condfident that he is rejecting libev (or any other
>>> wrapper) for a good reason (that is, that he would do the same job
>>> better).
>>>
>>> Just search for EVBACKEND_EPOLL and EVBACKEND_KQUEUE here
>>> http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod and then look at
>>> the relevant parts of ev_epoll.c or ev_kqueue.c and think if you want
>>> to have a walk through this particular minefield :)
>>>
>>> On Oct 31, 3:06?pm, Yaron Minsky <ymin... at janestreet.com> wrote:
>>> > On 31/10/11 14:29, Anil Madhavapeddy wrote:
>>> >
>>> > > You could combine most of these by basing Async on top of libuv,
>>> > > which is a superset of libev (the event library that Lwt uses to
>>> > > abstract network I/O).
>>> >
>>> > >https://github.com/joyent/libuv
>>> >
>>> > > Crucially, libuv has good support for the Windows AIO model, and is
>>> > > also what node.js uses to drive its event loop (so has widespread
>>> > > usage).
>>> >
>>> > > At first glance at Core, it looks like many of the Linux-specific
>>> > > bits like high-res timers and thread scheduling are also covered by
>>> > > it.
>>> >
>>> > How much do you know about the performance and quality of libuv? ?I'm
>>> > always nervous about shimming yet another layer between us and the
>>> > bare metal.
>>> >
>>> > y
>>> >
>>> >
>>> >
>>> > > Anil
>>> >
>>> > > On 31 Oct 2011, at 14:25, Yaron Minsky wrote:
>>> >
>>> > > > I'm wondering if anyone has opinions on what we should do to make
>>> > > > Async more widely applicable. ?Here are some issues that jump to
>>> > > > mind.
>>> >
>>> > > > - Porting to windows. ?People have proposed using libuv to do that.
>>> > > > - Porting to non-Linux UNIX's: Right now, we depend on Core's
>>> > > > ?Linux_ext module. ?I think the dependency is not deep, so
>>> > > > ?conditional compilation might be a way to fix that.
>>> > > > - Support for other polling mechanisms: like epoll and friends.
>>> > > > ?Right
>>> > > > ?now, it's all select. ?A pluggable engine mechanism like the one
>>> > > > Lwt
>>> > > > ?has could make sense here.
>>> > > > - Interoperability with Lwt: ?It would be nice to make Async and
>>> > > > Lwt
>>> > > > ?libraries play together. ?Jeremie Dimino suggested that the best
>>> > > > ?thing here might be to build a library for Lwt on top of Async.
>>> > > > ?That seems plausible enough, but an engine in the other direction
>>> > > > ?might be good too.
>>> >
>>> > > > I'm curious if people have opinions as to how to best handle these.
>>> > > > I'm in particular wondering about conditional compilation as a
>>> > > > solution. ?It seems messy, but I'm not sure what would be a better
>>> > > > approach. ?One thing you could imagine is using first-class
>>> > > > modules,
>>> > > > where you stored a system-dependent module that provided the
>>> > > > OS-specific functionality. ?But there's some performance compromise
>>> > > > there (probably too small to matter compared to a system-call,
>>> > > > though), and I'm not sure it comes out cleaner.
>>> >
>>> > > > y
>>> >
>>> > > > --
>>> > > > Yaron Minsky
>>> >
>>> > --
>>> > Yaron Minsky
>
>


From yminsky at janestreet.com  Thu Nov  3 01:44:17 2011
From: yminsky at janestreet.com (Yaron Minsky)
Date: Wed, 2 Nov 2011 21:44:17 -0400
Subject: Making Async play better with others
In-Reply-To: <B3E29DB8-D8F3-487C-A6D7-8D44CA5186AB@recoil.org>
References: <20111031142540.GZ26614@janestreet.com>
 <3DDCF997-C2CC-4D68-B7CA-AD810B8BF21D@recoil.org>
 <20111031150640.GF26614@janestreet.com>
 <f23a65f9-6de0-4147-b42a-25e90ad5fd96@l12g2000vby.googlegroups.com>
 <CADKNfhLJPqxwZUBt4U2JRRHeeGKhuBom2KTvEX9sXVLkLLoNug@mail.gmail.com>
 <CADKNfhKUdL7j3kJKYPMRGuacpXRGriNZaQoHOOoJNNgx1h744A@mail.gmail.com>
 <B3E29DB8-D8F3-487C-A6D7-8D44CA5186AB@recoil.org>
Message-ID: <20111103014417.GC15646@janestreet.com>


On 02/11/11 22:24, Anil Madhavapeddy wrote:
> A pluggable engine will give you the lowest common denominator
> and/or a poorly tested set of alternatives (most users will just one
> the default one). There are observable differences between the
> backends (e.g. select returns immediately if you pass in a block
> device fd, whereas epoll can often wedge forever and never return).
> 
> The reason I like libuv is because its most aligned with the Core
> "full service" feature set, whereas the rest are mostly just network
> I/O.  Node.js is very similar in terms of its runtime architecture
> to Core+Async (C non-blocking runtime, language VM activations).
> Letting that community deal with platform portability would save a
> lot of time.
>  
> I've written servers in both libevent and libev, and they are both
> pretty good for network AIO. The scalability differences between
> them won't matter for 99% of users.

That's not a crazy idea.  As I said, it's a little hard to imagine
that we'd want to run our own apps through libuv, but I could imagine
it as an alternate backend.

I agree that a general-purpose pluggable engine sounds like it would
cause trouble.  But maybe we can get to supporting two backends.

y


-- 
Yaron Minsky


From anil at recoil.org  Wed Nov  2 22:24:33 2011
From: anil at recoil.org (Anil Madhavapeddy)
Date: Wed, 2 Nov 2011 22:24:33 +0000
Subject: Making Async play better with others
In-Reply-To: <CADKNfhKUdL7j3kJKYPMRGuacpXRGriNZaQoHOOoJNNgx1h744A@mail.gmail.com>
References: <20111031142540.GZ26614@janestreet.com> <3DDCF997-C2CC-4D68-B7CA-AD810B8BF21D@recoil.org> <20111031150640.GF26614@janestreet.com> <f23a65f9-6de0-4147-b42a-25e90ad5fd96@l12g2000vby.googlegroups.com> <CADKNfhLJPqxwZUBt4U2JRRHeeGKhuBom2KTvEX9sXVLkLLoNug@mail.gmail.com> <CADKNfhKUdL7j3kJKYPMRGuacpXRGriNZaQoHOOoJNNgx1h744A@mail.gmail.com>
Message-ID: <B3E29DB8-D8F3-487C-A6D7-8D44CA5186AB@recoil.org>

A pluggable engine will give you the lowest common denominator and/or a poorly tested set of alternatives (most users will just one the default one). There are observable differences between the backends (e.g. select returns immediately if you pass in a block device fd, whereas epoll can often wedge forever and never return).

The reason I like libuv is because its most aligned with the Core "full service" feature set, whereas the rest are mostly just network I/O.  Node.js is very similar in terms of its runtime architecture to Core+Async (C non-blocking runtime, language VM activations).  Letting that community deal with platform portability would save a lot of time.
 
I've written servers in both libevent and libev, and they are both pretty good for network AIO. The scalability differences between them won't matter for 99% of users.

Anil

On 1 Nov 2011, at 10:32, Yaron Minsky wrote:

> Poking around a bit more, it looks like libuv uses libev (rather than forking/reimplementing), which makes libuv sound more interesting...
> 
> y
> 
> On Tue, Nov 1, 2011 at 6:30 AM, Yaron Minsky <yminsky at gmail.com> wrote:
> I agree that you want to use one of those libraries if you're programming against epoll and kqueue.  I'm less sure that you should use them in preference to select (which, from both some experiments I think Markus Mottl ran, and other things I've heard is faster for moderate numbers of file descriptors) is less clear.
> 
> But even once you agree you need one of these libraries, it's till not clear to me how to pick amongst libev, libuv and libevent.  libevent seems like the most mature, libev is claimed (by the author anyway) to be more efficient, and libuv seems to treat Windows as a first-class citizen.  This is to some degree why I like the idea of a pluggable engine, which would prevent us from needing to commit to a single answer.
> 
> y
> 
> 
> On Tue, Nov 1, 2011 at 6:24 AM, Dmitry Astapov <dastapov at gmail.com> wrote:
> I read quite a lot about libev, which seems to be an ancestor of libuv
> while I hunted for bugs in the code which had direct bindings for
> epoll and kqueue. And in my experience, libev handles so many bugs and
> quirky situations in underlying polling mechanisms that one must be
> really, really condfident that he is rejecting libev (or any other
> wrapper) for a good reason (that is, that he would do the same job
> better).
> 
> Just search for EVBACKEND_EPOLL and EVBACKEND_KQUEUE here
> http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod and then look at
> the relevant parts of ev_epoll.c or ev_kqueue.c and think if you want
> to have a walk through this particular minefield :)
> 
> On Oct 31, 3:06 pm, Yaron Minsky <ymin... at janestreet.com> wrote:
> > On 31/10/11 14:29, Anil Madhavapeddy wrote:
> >
> > > You could combine most of these by basing Async on top of libuv,
> > > which is a superset of libev (the event library that Lwt uses to
> > > abstract network I/O).
> >
> > >https://github.com/joyent/libuv
> >
> > > Crucially, libuv has good support for the Windows AIO model, and is
> > > also what node.js uses to drive its event loop (so has widespread
> > > usage).
> >
> > > At first glance at Core, it looks like many of the Linux-specific
> > > bits like high-res timers and thread scheduling are also covered by
> > > it.
> >
> > How much do you know about the performance and quality of libuv?  I'm
> > always nervous about shimming yet another layer between us and the
> > bare metal.
> >
> > y
> >
> >
> >
> > > Anil
> >
> > > On 31 Oct 2011, at 14:25, Yaron Minsky wrote:
> >
> > > > I'm wondering if anyone has opinions on what we should do to make
> > > > Async more widely applicable.  Here are some issues that jump to mind.
> >
> > > > - Porting to windows.  People have proposed using libuv to do that.
> > > > - Porting to non-Linux UNIX's: Right now, we depend on Core's
> > > >  Linux_ext module.  I think the dependency is not deep, so
> > > >  conditional compilation might be a way to fix that.
> > > > - Support for other polling mechanisms: like epoll and friends.  Right
> > > >  now, it's all select.  A pluggable engine mechanism like the one Lwt
> > > >  has could make sense here.
> > > > - Interoperability with Lwt:  It would be nice to make Async and Lwt
> > > >  libraries play together.  Jeremie Dimino suggested that the best
> > > >  thing here might be to build a library for Lwt on top of Async.
> > > >  That seems plausible enough, but an engine in the other direction
> > > >  might be good too.
> >
> > > > I'm curious if people have opinions as to how to best handle these.
> > > > I'm in particular wondering about conditional compilation as a
> > > > solution.  It seems messy, but I'm not sure what would be a better
> > > > approach.  One thing you could imagine is using first-class modules,
> > > > where you stored a system-dependent module that provided the
> > > > OS-specific functionality.  But there's some performance compromise
> > > > there (probably too small to matter compared to a system-call,
> > > > though), and I'm not sure it comes out cleaner.
> >
> > > > y
> >
> > > > --
> > > > Yaron Minsky
> >
> > --
> > Yaron Minsky
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111102/58990559/attachment-0001.html>

From ocaml-core at googlegroups.com  Fri Nov  4 03:34:41 2011
From: ocaml-core at googlegroups.com (ocaml-core at googlegroups.com)
Date: Fri, 04 Nov 2011 03:34:41 +0000
Subject: Moderator's spam report for ocaml-core@googlegroups.com
Message-ID: <0016e6d64709ac701304b0e062f5@google.com>


This message is being sent to you because you are a moderator of the group ocaml-core.

The following suspicious messages were sent to your group, but are being held in your moderation queue because they are classified as likely spam messages.

If you take no action, all the messages below will be discarded automatically as spam.

However, if you see any messages that are not spam below, you may approve them individually by going to:

http://groups.google.com/group/ocaml-core/pendmsg

Please do not mark this notification as spam; this is a service for group moderators. If you do not wish to receive these notifications in the future, you may change your preferences by going to:

http://groups.google.com/group/ocaml-core/manage_post


------- 1 of 1  -------
Subject: SAVE MY LIFE!!
>From: Ms Michelle Marcel <am4758966 at yahoo.com.ph>
Date: Nov 03 12:18AM +0800

SAVE MY LIFE!! 

  ?

  Quite frankly, I 
know it may have sounded pretty strange for you on why I Chose to 
contact you as you are a complete stranger to me and I must tell you 
this, I contacted you for the simple reason that we do not know

Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=8111488030256193679


For more information about this message, please visit:
http://groups.google.com/support/bin/answer.py?hl=en&answer=165806



From anil at recoil.org  Fri Nov  4 09:41:47 2011
From: anil at recoil.org (Anil Madhavapeddy)
Date: Fri, 4 Nov 2011 09:41:47 +0000
Subject: Making Async play better with others
In-Reply-To: <20111103014417.GC15646@janestreet.com>
References: <20111031142540.GZ26614@janestreet.com>
 <3DDCF997-C2CC-4D68-B7CA-AD810B8BF21D@recoil.org>
 <20111031150640.GF26614@janestreet.com>
 <f23a65f9-6de0-4147-b42a-25e90ad5fd96@l12g2000vby.googlegroups.com>
 <CADKNfhLJPqxwZUBt4U2JRRHeeGKhuBom2KTvEX9sXVLkLLoNug@mail.gmail.com>
 <CADKNfhKUdL7j3kJKYPMRGuacpXRGriNZaQoHOOoJNNgx1h744A@mail.gmail.com>
 <B3E29DB8-D8F3-487C-A6D7-8D44CA5186AB@recoil.org>
 <20111103014417.GC15646@janestreet.com>
Message-ID: <20111104094147.GC10177@dark.recoil.org>


On Wed, Nov 02, 2011 at 09:44:17PM -0400, Yaron Minsky wrote:
> On 02/11/11 22:24, Anil Madhavapeddy wrote:
> > A pluggable engine will give you the lowest common denominator
> > and/or a poorly tested set of alternatives (most users will just one
> > the default one). There are observable differences between the
> > backends (e.g. select returns immediately if you pass in a block
> > device fd, whereas epoll can often wedge forever and never return).
> > 
> > The reason I like libuv is because its most aligned with the Core
> > "full service" feature set, whereas the rest are mostly just network
> > I/O.  Node.js is very similar in terms of its runtime architecture
> > to Core+Async (C non-blocking runtime, language VM activations).
> > Letting that community deal with platform portability would save a
> > lot of time.
> >  
> > I've written servers in both libevent and libev, and they are both
> > pretty good for network AIO. The scalability differences between
> > them won't matter for 99% of users.
> 
> That's not a crazy idea.  As I said, it's a little hard to imagine
> that we'd want to run our own apps through libuv, but I could imagine
> it as an alternate backend.

Yeah, two backends would work if they both have users (Jane Street for the
direct one, and the "community" for the libuv one). I imagine they would
converge as confidence grows (or not) in one or the other.

> I agree that a general-purpose pluggable engine sounds like it would
> cause trouble.  But maybe we can get to supporting two backends.

Agreed. It would certainly make the various *BSD and Windows ports much
more tractable.

-- 
Anil Madhavapeddy                                 http://anil.recoil.org


From ocaml-core at googlegroups.com  Tue Nov  8 02:47:22 2011
From: ocaml-core at googlegroups.com (ocaml-core at googlegroups.com)
Date: Tue, 08 Nov 2011 02:47:22 +0000
Subject: Moderator's spam report for ocaml-core@googlegroups.com
Message-ID: <00504502c89ad1e07804b1303059@google.com>


This message is being sent to you because you are a moderator of the group ocaml-core.

The following suspicious messages were sent to your group, but are being held in your moderation queue because they are classified as likely spam messages.

If you take no action, all the messages below will be discarded automatically as spam.

However, if you see any messages that are not spam below, you may approve them individually by going to:

http://groups.google.com/group/ocaml-core/pendmsg

Please do not mark this notification as spam; this is a service for group moderators. If you do not wish to receive these notifications in the future, you may change your preferences by going to:

http://groups.google.com/group/ocaml-core/manage_post


------- 1 of 3  -------
Subject: Gajotres world of web development
>From: info at gajotres.com
Date: Nov 04 08:42PM +0100

Create a sticky sidebar or box - jscript magic In my last post, I described Fail Tracker?s simple repository model for abstracting LINQ to NHibernate, which is used for all data access in Fail Tracker. One reason I chose to implement an abstraction

Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=4039981735140556634

------- 2 of 3  -------
Subject: Please I Need Your Help
>From: edith Okono <okonoedith at yahoo.com.ph>
Date: Nov 05 03:58AM +0800

>From Edith Okono Please I Need Your Help.



Dearest One,



I am Edith Okono, 21 years old from Ivory Coast . The only Daughter of Mrs Grace Okono . I have 9.5 million USD which was made by my mother before she died in Oct 2009 which is left

Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=3441051738231376644

------- 3 of 3  -------
Subject: Gajotres world of web development
>From: info at gajotres.com
Date: Nov 05 02:19PM +0100

Create a sticky sidebar or box - jscript magic In my last post, I described Fail Tracker?s simple repository model for abstracting LINQ to NHibernate, which is used for all data access in Fail Tracker. One reason I chose to implement an abstraction

Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=1381870197074736034


For more information about this message, please visit:
http://groups.google.com/support/bin/answer.py?hl=en&answer=165806



From agarwal1975 at gmail.com  Wed Nov  9 17:11:32 2011
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Wed, 9 Nov 2011 12:11:32 -0500
Subject: bin-prot compile error related to libc version
Message-ID: <CAMu2m2JwNzRTVt5UUJmMSsP_aRH2Lz=25hWicgsFNBAv5owQ0w@mail.gmail.com>

When compiling bin-prot via godi, I get the error below. We have libc
version 2.5, which seems not to support the missing functions. Is this
dependency removed in any branch? (Also, let me know if there is a better
mailing list to use for bin-prot.)

I: Running command '/home/aa144/local/godi/bin/ocamlbuild
syntax/pa_bin_prot.cma lib/libbin_prot.a lib/dllbin_prot.so
lib/bin_prot.cma lib/bin_prot.cmxa lib/bin_prot.a lib_test/example.byte
-tag debug'
Finished, 1 target (0 cached) in 00:00:00.
+ ocamlfind ocamlc -ccopt -pipe -ccopt -g -ccopt -fPIC -ccopt -O2 -ccopt
-fomit-frame-pointer -ccopt -fsigned-char -ccopt -Wall -ccopt -pedantic
-ccopt -Wextra -ccopt -Wunused -ccopt -Werror -ccopt -Wno-long-long -c
lib/write_stubs.c
cc1: warnings being treated as errors
lib/write_stubs.c: In function 'do_write_int16':
lib/write_stubs.c:76: warning: implicit declaration of function 'htole16'
lib/write_stubs.c: In function 'do_write_int32':
lib/write_stubs.c:90: warning: implicit declaration of function 'htole32'
lib/write_stubs.c: In function 'do_write_int64':
lib/write_stubs.c:105: warning: implicit declaration of function 'htole64'
lib/write_stubs.c: In function 'write_network16_int_stub':
lib/write_stubs.c:557: warning: implicit declaration of function 'htobe16'
lib/write_stubs.c: In function 'write_network32_int_stub':
lib/write_stubs.c:567: warning: implicit declaration of function 'htobe32'
lib/write_stubs.c: In function 'write_network64_int_stub':
lib/write_stubs.c:588: warning: implicit declaration of function 'htobe64'
Command exited with code 2.
Compilation unsuccessful after building 8 targets (0 cached) in 00:00:01.
E: Command '/home/aa144/local/godi/bin/ocamlbuild syntax/pa_bin_prot.cma
lib/libbin_prot.a lib/dllbin_prot.so lib/bin_prot.cma lib/bin_prot.cmxa
lib/bin_prot.a lib_test/example.byte -tag debug' terminated with error code
10
make[7]: *** [all] Error 1
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111109/f050c998/attachment-0001.html>

From yminsky at gmail.com  Thu Nov 10 02:12:52 2011
From: yminsky at gmail.com (Yaron Minsky)
Date: Wed, 9 Nov 2011 21:12:52 -0500
Subject: bin-prot compile error related to libc version
In-Reply-To: <CAMu2m2JwNzRTVt5UUJmMSsP_aRH2Lz=25hWicgsFNBAv5owQ0w@mail.gmail.com>
References: <CAMu2m2JwNzRTVt5UUJmMSsP_aRH2Lz=25hWicgsFNBAv5owQ0w@mail.gmail.com>
Message-ID: <CADKNfhLhvs6OT7Oq4KWj1HSbmi-jp9F+W4Gc5qwuFRsK2_ofJg@mail.gmail.com>

Just to be clear, what platform are you running on, and what version of
bin-prot and type-conv are you using?

On Wed, Nov 9, 2011 at 12:11 PM, Ashish Agarwal <agarwal1975 at gmail.com>wrote:

> When compiling bin-prot via godi, I get the error below. We have libc
> version 2.5, which seems not to support the missing functions. Is this
> dependency removed in any branch? (Also, let me know if there is a better
> mailing list to use for bin-prot.)
>
> I: Running command '/home/aa144/local/godi/bin/ocamlbuild
> syntax/pa_bin_prot.cma lib/libbin_prot.a lib/dllbin_prot.so
> lib/bin_prot.cma lib/bin_prot.cmxa lib/bin_prot.a lib_test/example.byte
> -tag debug'
> Finished, 1 target (0 cached) in 00:00:00.
> + ocamlfind ocamlc -ccopt -pipe -ccopt -g -ccopt -fPIC -ccopt -O2 -ccopt
> -fomit-frame-pointer -ccopt -fsigned-char -ccopt -Wall -ccopt -pedantic
> -ccopt -Wextra -ccopt -Wunused -ccopt -Werror -ccopt -Wno-long-long -c
> lib/write_stubs.c
> cc1: warnings being treated as errors
> lib/write_stubs.c: In function 'do_write_int16':
> lib/write_stubs.c:76: warning: implicit declaration of function 'htole16'
> lib/write_stubs.c: In function 'do_write_int32':
> lib/write_stubs.c:90: warning: implicit declaration of function 'htole32'
> lib/write_stubs.c: In function 'do_write_int64':
> lib/write_stubs.c:105: warning: implicit declaration of function 'htole64'
> lib/write_stubs.c: In function 'write_network16_int_stub':
> lib/write_stubs.c:557: warning: implicit declaration of function 'htobe16'
> lib/write_stubs.c: In function 'write_network32_int_stub':
> lib/write_stubs.c:567: warning: implicit declaration of function 'htobe32'
> lib/write_stubs.c: In function 'write_network64_int_stub':
> lib/write_stubs.c:588: warning: implicit declaration of function 'htobe64'
> Command exited with code 2.
> Compilation unsuccessful after building 8 targets (0 cached) in 00:00:01.
> E: Command '/home/aa144/local/godi/bin/ocamlbuild syntax/pa_bin_prot.cma
> lib/libbin_prot.a lib/dllbin_prot.so lib/bin_prot.cma lib/bin_prot.cmxa
> lib/bin_prot.a lib_test/example.byte -tag debug' terminated with error code
> 10
> make[7]: *** [all] Error 1
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111109/ecb5625c/attachment-0001.html>

From agarwal1975 at gmail.com  Thu Nov 10 13:53:13 2011
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Thu, 10 Nov 2011 08:53:13 -0500
Subject: bin-prot compile error related to libc version
In-Reply-To: <CADKNfhLhvs6OT7Oq4KWj1HSbmi-jp9F+W4Gc5qwuFRsK2_ofJg@mail.gmail.com>
References: <CAMu2m2JwNzRTVt5UUJmMSsP_aRH2Lz=25hWicgsFNBAv5owQ0w@mail.gmail.com>
 <CADKNfhLhvs6OT7Oq4KWj1HSbmi-jp9F+W4Gc5qwuFRsK2_ofJg@mail.gmail.com>
Message-ID: <CAMu2m2JTMsv0+M8zLorOiY-5m1tuWZ9P0LFGj9ycf2YU6tgZ8w@mail.gmail.com>

Platforms: CentOS 5.5, RHEL 5.1, and RHEL 5.3
bin-prot version 2.0.6
typ-conv version: 3.0.4

However, version numbers on both jane street and Markus's websites are
lower than this, so I'm unclear where the godi versions are coming from.

$ godi_list | grep prot
godi-bin-prot                  inst:-          src:2.0.6godi1

$ godi_list | grep conv
godi-type-conv                 inst:-          src:3.0.4godi1


On Wed, Nov 9, 2011 at 9:12 PM, Yaron Minsky <yminsky at gmail.com> wrote:

> Just to be clear, what platform are you running on, and what version of
> bin-prot and type-conv are you using?
>
>
> On Wed, Nov 9, 2011 at 12:11 PM, Ashish Agarwal <agarwal1975 at gmail.com>wrote:
>
>> When compiling bin-prot via godi, I get the error below. We have libc
>> version 2.5, which seems not to support the missing functions. Is this
>> dependency removed in any branch? (Also, let me know if there is a better
>> mailing list to use for bin-prot.)
>>
>> I: Running command '/home/aa144/local/godi/bin/ocamlbuild
>> syntax/pa_bin_prot.cma lib/libbin_prot.a lib/dllbin_prot.so
>> lib/bin_prot.cma lib/bin_prot.cmxa lib/bin_prot.a lib_test/example.byte
>> -tag debug'
>> Finished, 1 target (0 cached) in 00:00:00.
>> + ocamlfind ocamlc -ccopt -pipe -ccopt -g -ccopt -fPIC -ccopt -O2 -ccopt
>> -fomit-frame-pointer -ccopt -fsigned-char -ccopt -Wall -ccopt -pedantic
>> -ccopt -Wextra -ccopt -Wunused -ccopt -Werror -ccopt -Wno-long-long -c
>> lib/write_stubs.c
>> cc1: warnings being treated as errors
>> lib/write_stubs.c: In function 'do_write_int16':
>> lib/write_stubs.c:76: warning: implicit declaration of function 'htole16'
>> lib/write_stubs.c: In function 'do_write_int32':
>> lib/write_stubs.c:90: warning: implicit declaration of function 'htole32'
>> lib/write_stubs.c: In function 'do_write_int64':
>> lib/write_stubs.c:105: warning: implicit declaration of function 'htole64'
>> lib/write_stubs.c: In function 'write_network16_int_stub':
>> lib/write_stubs.c:557: warning: implicit declaration of function 'htobe16'
>> lib/write_stubs.c: In function 'write_network32_int_stub':
>> lib/write_stubs.c:567: warning: implicit declaration of function 'htobe32'
>> lib/write_stubs.c: In function 'write_network64_int_stub':
>> lib/write_stubs.c:588: warning: implicit declaration of function 'htobe64'
>> Command exited with code 2.
>> Compilation unsuccessful after building 8 targets (0 cached) in 00:00:01.
>> E: Command '/home/aa144/local/godi/bin/ocamlbuild syntax/pa_bin_prot.cma
>> lib/libbin_prot.a lib/dllbin_prot.so lib/bin_prot.cma lib/bin_prot.cmxa
>> lib/bin_prot.a lib_test/example.byte -tag debug' terminated with error code
>> 10
>> make[7]: *** [all] Error 1
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111110/e72fc10a/attachment-0001.html>

From yminsky at janestreet.com  Thu Nov 10 15:48:07 2011
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 10 Nov 2011 10:48:07 -0500
Subject: bin-prot compile error related to libc version
In-Reply-To: <CAMu2m2JTMsv0+M8zLorOiY-5m1tuWZ9P0LFGj9ycf2YU6tgZ8w@mail.gmail.com>
References: <CAMu2m2JwNzRTVt5UUJmMSsP_aRH2Lz=25hWicgsFNBAv5owQ0w@mail.gmail.com>
 <CADKNfhLhvs6OT7Oq4KWj1HSbmi-jp9F+W4Gc5qwuFRsK2_ofJg@mail.gmail.com>
 <CAMu2m2JTMsv0+M8zLorOiY-5m1tuWZ9P0LFGj9ycf2YU6tgZ8w@mail.gmail.com>
Message-ID: <20111110154807.GE23802@janestreet.com>


Looping Markus in.

Have you tried to setup the released tarballs from the website?  I
wonder if they have this problem too.

Anyone know offhand who put together the Godi packages?  I agree that
those version numbers confuse me.  I know there was some
cross-platform compatibility work that was done for Debian that was
working its way upstream, but I'm not sure of the state of play.

Markus, do you know what's going on here?

y

On 10/11/11 08:53, Ashish Agarwal wrote:
> Platforms: CentOS 5.5, RHEL 5.1, and RHEL 5.3
> bin-prot version 2.0.6
> typ-conv version: 3.0.4
> 
> However, version numbers on both jane street and Markus's websites are
> lower than this, so I'm unclear where the godi versions are coming from.
> 
> $ godi_list | grep prot
> godi-bin-prot                  inst:-          src:2.0.6godi1
> 
> $ godi_list | grep conv
> godi-type-conv                 inst:-          src:3.0.4godi1
> 
> 
> On Wed, Nov 9, 2011 at 9:12 PM, Yaron Minsky <yminsky at gmail.com> wrote:
> 
> > Just to be clear, what platform are you running on, and what version of
> > bin-prot and type-conv are you using?
> >
> >
> > On Wed, Nov 9, 2011 at 12:11 PM, Ashish Agarwal <agarwal1975 at gmail.com>wrote:
> >
> >> When compiling bin-prot via godi, I get the error below. We have libc
> >> version 2.5, which seems not to support the missing functions. Is this
> >> dependency removed in any branch? (Also, let me know if there is a better
> >> mailing list to use for bin-prot.)
> >>
> >> I: Running command '/home/aa144/local/godi/bin/ocamlbuild
> >> syntax/pa_bin_prot.cma lib/libbin_prot.a lib/dllbin_prot.so
> >> lib/bin_prot.cma lib/bin_prot.cmxa lib/bin_prot.a lib_test/example.byte
> >> -tag debug'
> >> Finished, 1 target (0 cached) in 00:00:00.
> >> + ocamlfind ocamlc -ccopt -pipe -ccopt -g -ccopt -fPIC -ccopt -O2 -ccopt
> >> -fomit-frame-pointer -ccopt -fsigned-char -ccopt -Wall -ccopt -pedantic
> >> -ccopt -Wextra -ccopt -Wunused -ccopt -Werror -ccopt -Wno-long-long -c
> >> lib/write_stubs.c
> >> cc1: warnings being treated as errors
> >> lib/write_stubs.c: In function 'do_write_int16':
> >> lib/write_stubs.c:76: warning: implicit declaration of function 'htole16'
> >> lib/write_stubs.c: In function 'do_write_int32':
> >> lib/write_stubs.c:90: warning: implicit declaration of function 'htole32'
> >> lib/write_stubs.c: In function 'do_write_int64':
> >> lib/write_stubs.c:105: warning: implicit declaration of function 'htole64'
> >> lib/write_stubs.c: In function 'write_network16_int_stub':
> >> lib/write_stubs.c:557: warning: implicit declaration of function 'htobe16'
> >> lib/write_stubs.c: In function 'write_network32_int_stub':
> >> lib/write_stubs.c:567: warning: implicit declaration of function 'htobe32'
> >> lib/write_stubs.c: In function 'write_network64_int_stub':
> >> lib/write_stubs.c:588: warning: implicit declaration of function 'htobe64'
> >> Command exited with code 2.
> >> Compilation unsuccessful after building 8 targets (0 cached) in 00:00:01.
> >> E: Command '/home/aa144/local/godi/bin/ocamlbuild syntax/pa_bin_prot.cma
> >> lib/libbin_prot.a lib/dllbin_prot.so lib/bin_prot.cma lib/bin_prot.cmxa
> >> lib/bin_prot.a lib_test/example.byte -tag debug' terminated with error code
> >> 10
> >> make[7]: *** [all] Error 1
> >>
> >>
> >

-- 
Yaron Minsky


From markus.mottl at gmail.com  Thu Nov 10 19:36:22 2011
From: markus.mottl at gmail.com (Markus Mottl)
Date: Thu, 10 Nov 2011 14:36:22 -0500
Subject: bin-prot compile error related to libc version
In-Reply-To: <20111110154807.GE23802@janestreet.com>
References: <CAMu2m2JwNzRTVt5UUJmMSsP_aRH2Lz=25hWicgsFNBAv5owQ0w@mail.gmail.com>
	<CADKNfhLhvs6OT7Oq4KWj1HSbmi-jp9F+W4Gc5qwuFRsK2_ofJg@mail.gmail.com>
	<CAMu2m2JTMsv0+M8zLorOiY-5m1tuWZ9P0LFGj9ycf2YU6tgZ8w@mail.gmail.com>
	<20111110154807.GE23802@janestreet.com>
Message-ID: <CAP_800rvAnUuL3LoyFiZEMkuQLQ4=+Kk861dLem_w4ccP_SS8Q@mail.gmail.com>


Hi,

the "official" packages are now on OCaml Forge.  This was the agreed
upon repository where Till and I created the final release.  The idea
was to eventually drop our separate download sites and use OCaml Forge
only.  Godi uses the OCaml Forge packages.

Concerning the error above: indeed, glibc 2.5 does not support these
functions yet, they were apparently introduced with glibc 2.9 in 2009
only.

I have updated bin-prot by defining the required macros if they are
undefined.  The new distribution is online, both at OCaml Forge and in
Godi.  Please let me know if there are still any build errors or if
the test suite fails.  I cannot easily test old platforms myself.

Regards,
Markus

On Thu, Nov 10, 2011 at 10:48, Yaron Minsky <yminsky at janestreet.com> wrote:
> Looping Markus in.
>
> Have you tried to setup the released tarballs from the website? ?I
> wonder if they have this problem too.
>
> Anyone know offhand who put together the Godi packages? ?I agree that
> those version numbers confuse me. ?I know there was some
> cross-platform compatibility work that was done for Debian that was
> working its way upstream, but I'm not sure of the state of play.
>
> Markus, do you know what's going on here?
>
> y
>
> On 10/11/11 08:53, Ashish Agarwal wrote:
>> Platforms: CentOS 5.5, RHEL 5.1, and RHEL 5.3
>> bin-prot version 2.0.6
>> typ-conv version: 3.0.4
>>
>> However, version numbers on both jane street and Markus's websites are
>> lower than this, so I'm unclear where the godi versions are coming from.
>>
>> $ godi_list | grep prot
>> godi-bin-prot ? ? ? ? ? ? ? ? ?inst:- ? ? ? ? ?src:2.0.6godi1
>>
>> $ godi_list | grep conv
>> godi-type-conv ? ? ? ? ? ? ? ? inst:- ? ? ? ? ?src:3.0.4godi1
>>
>>
>> On Wed, Nov 9, 2011 at 9:12 PM, Yaron Minsky <yminsky at gmail.com> wrote:
>>
>> > Just to be clear, what platform are you running on, and what version of
>> > bin-prot and type-conv are you using?
>> >
>> >
>> > On Wed, Nov 9, 2011 at 12:11 PM, Ashish Agarwal <agarwal1975 at gmail.com>wrote:
>> >
>> >> When compiling bin-prot via godi, I get the error below. We have libc
>> >> version 2.5, which seems not to support the missing functions. Is this
>> >> dependency removed in any branch? (Also, let me know if there is a better
>> >> mailing list to use for bin-prot.)
>> >>
>> >> I: Running command '/home/aa144/local/godi/bin/ocamlbuild
>> >> syntax/pa_bin_prot.cma lib/libbin_prot.a lib/dllbin_prot.so
>> >> lib/bin_prot.cma lib/bin_prot.cmxa lib/bin_prot.a lib_test/example.byte
>> >> -tag debug'
>> >> Finished, 1 target (0 cached) in 00:00:00.
>> >> + ocamlfind ocamlc -ccopt -pipe -ccopt -g -ccopt -fPIC -ccopt -O2 -ccopt
>> >> -fomit-frame-pointer -ccopt -fsigned-char -ccopt -Wall -ccopt -pedantic
>> >> -ccopt -Wextra -ccopt -Wunused -ccopt -Werror -ccopt -Wno-long-long -c
>> >> lib/write_stubs.c
>> >> cc1: warnings being treated as errors
>> >> lib/write_stubs.c: In function 'do_write_int16':
>> >> lib/write_stubs.c:76: warning: implicit declaration of function 'htole16'
>> >> lib/write_stubs.c: In function 'do_write_int32':
>> >> lib/write_stubs.c:90: warning: implicit declaration of function 'htole32'
>> >> lib/write_stubs.c: In function 'do_write_int64':
>> >> lib/write_stubs.c:105: warning: implicit declaration of function 'htole64'
>> >> lib/write_stubs.c: In function 'write_network16_int_stub':
>> >> lib/write_stubs.c:557: warning: implicit declaration of function 'htobe16'
>> >> lib/write_stubs.c: In function 'write_network32_int_stub':
>> >> lib/write_stubs.c:567: warning: implicit declaration of function 'htobe32'
>> >> lib/write_stubs.c: In function 'write_network64_int_stub':
>> >> lib/write_stubs.c:588: warning: implicit declaration of function 'htobe64'
>> >> Command exited with code 2.
>> >> Compilation unsuccessful after building 8 targets (0 cached) in 00:00:01.
>> >> E: Command '/home/aa144/local/godi/bin/ocamlbuild syntax/pa_bin_prot.cma
>> >> lib/libbin_prot.a lib/dllbin_prot.so lib/bin_prot.cma lib/bin_prot.cmxa
>> >> lib/bin_prot.a lib_test/example.byte -tag debug' terminated with error code
>> >> 10
>> >> make[7]: *** [all] Error 1
>> >>
>> >>
>> >
>
> --
> Yaron Minsky
>



-- 
Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From yminsky at janestreet.com  Thu Nov 10 19:46:56 2011
From: yminsky at janestreet.com (Yaron Minsky)
Date: Thu, 10 Nov 2011 14:46:56 -0500
Subject: bin-prot compile error related to libc version
In-Reply-To: <CAP_800rvAnUuL3LoyFiZEMkuQLQ4=+Kk861dLem_w4ccP_SS8Q@mail.gmail.com>
References: <CAMu2m2JwNzRTVt5UUJmMSsP_aRH2Lz=25hWicgsFNBAv5owQ0w@mail.gmail.com>
 <CADKNfhLhvs6OT7Oq4KWj1HSbmi-jp9F+W4Gc5qwuFRsK2_ofJg@mail.gmail.com>
 <CAMu2m2JTMsv0+M8zLorOiY-5m1tuWZ9P0LFGj9ycf2YU6tgZ8w@mail.gmail.com>
 <20111110154807.GE23802@janestreet.com>
 <CAP_800rvAnUuL3LoyFiZEMkuQLQ4=+Kk861dLem_w4ccP_SS8Q@mail.gmail.com>
Message-ID: <20111110194656.GL23802@janestreet.com>


Thanks Markus.  I was tricked by the fact that your website doesn't
point to the ocamlforge site.

We need to do a better job of integrating.  I'm hoping we'll have our
internal processes cleaned up soon, and that will make it easier to
sync-up.

y

On 10/11/11 14:36, Markus Mottl wrote:
> Hi,
> 
> the "official" packages are now on OCaml Forge.  This was the agreed
> upon repository where Till and I created the final release.  The idea
> was to eventually drop our separate download sites and use OCaml Forge
> only.  Godi uses the OCaml Forge packages.
> 
> Concerning the error above: indeed, glibc 2.5 does not support these
> functions yet, they were apparently introduced with glibc 2.9 in 2009
> only.
> 
> I have updated bin-prot by defining the required macros if they are
> undefined.  The new distribution is online, both at OCaml Forge and in
> Godi.  Please let me know if there are still any build errors or if
> the test suite fails.  I cannot easily test old platforms myself.
> 
> Regards,
> Markus
> 
> On Thu, Nov 10, 2011 at 10:48, Yaron Minsky <yminsky at janestreet.com> wrote:
> > Looping Markus in.
> >
> > Have you tried to setup the released tarballs from the website? ?I
> > wonder if they have this problem too.
> >
> > Anyone know offhand who put together the Godi packages? ?I agree that
> > those version numbers confuse me. ?I know there was some
> > cross-platform compatibility work that was done for Debian that was
> > working its way upstream, but I'm not sure of the state of play.
> >
> > Markus, do you know what's going on here?
> >
> > y
> >
> > On 10/11/11 08:53, Ashish Agarwal wrote:
> >> Platforms: CentOS 5.5, RHEL 5.1, and RHEL 5.3
> >> bin-prot version 2.0.6
> >> typ-conv version: 3.0.4
> >>
> >> However, version numbers on both jane street and Markus's websites are
> >> lower than this, so I'm unclear where the godi versions are coming from.
> >>
> >> $ godi_list | grep prot
> >> godi-bin-prot ? ? ? ? ? ? ? ? ?inst:- ? ? ? ? ?src:2.0.6godi1
> >>
> >> $ godi_list | grep conv
> >> godi-type-conv ? ? ? ? ? ? ? ? inst:- ? ? ? ? ?src:3.0.4godi1
> >>
> >>
> >> On Wed, Nov 9, 2011 at 9:12 PM, Yaron Minsky <yminsky at gmail.com> wrote:
> >>
> >> > Just to be clear, what platform are you running on, and what version of
> >> > bin-prot and type-conv are you using?
> >> >
> >> >
> >> > On Wed, Nov 9, 2011 at 12:11 PM, Ashish Agarwal <agarwal1975 at gmail.com>wrote:
> >> >
> >> >> When compiling bin-prot via godi, I get the error below. We have libc
> >> >> version 2.5, which seems not to support the missing functions. Is this
> >> >> dependency removed in any branch? (Also, let me know if there is a better
> >> >> mailing list to use for bin-prot.)
> >> >>
> >> >> I: Running command '/home/aa144/local/godi/bin/ocamlbuild
> >> >> syntax/pa_bin_prot.cma lib/libbin_prot.a lib/dllbin_prot.so
> >> >> lib/bin_prot.cma lib/bin_prot.cmxa lib/bin_prot.a lib_test/example.byte
> >> >> -tag debug'
> >> >> Finished, 1 target (0 cached) in 00:00:00.
> >> >> + ocamlfind ocamlc -ccopt -pipe -ccopt -g -ccopt -fPIC -ccopt -O2 -ccopt
> >> >> -fomit-frame-pointer -ccopt -fsigned-char -ccopt -Wall -ccopt -pedantic
> >> >> -ccopt -Wextra -ccopt -Wunused -ccopt -Werror -ccopt -Wno-long-long -c
> >> >> lib/write_stubs.c
> >> >> cc1: warnings being treated as errors
> >> >> lib/write_stubs.c: In function 'do_write_int16':
> >> >> lib/write_stubs.c:76: warning: implicit declaration of function 'htole16'
> >> >> lib/write_stubs.c: In function 'do_write_int32':
> >> >> lib/write_stubs.c:90: warning: implicit declaration of function 'htole32'
> >> >> lib/write_stubs.c: In function 'do_write_int64':
> >> >> lib/write_stubs.c:105: warning: implicit declaration of function 'htole64'
> >> >> lib/write_stubs.c: In function 'write_network16_int_stub':
> >> >> lib/write_stubs.c:557: warning: implicit declaration of function 'htobe16'
> >> >> lib/write_stubs.c: In function 'write_network32_int_stub':
> >> >> lib/write_stubs.c:567: warning: implicit declaration of function 'htobe32'
> >> >> lib/write_stubs.c: In function 'write_network64_int_stub':
> >> >> lib/write_stubs.c:588: warning: implicit declaration of function 'htobe64'
> >> >> Command exited with code 2.
> >> >> Compilation unsuccessful after building 8 targets (0 cached) in 00:00:01.
> >> >> E: Command '/home/aa144/local/godi/bin/ocamlbuild syntax/pa_bin_prot.cma
> >> >> lib/libbin_prot.a lib/dllbin_prot.so lib/bin_prot.cma lib/bin_prot.cmxa
> >> >> lib/bin_prot.a lib_test/example.byte -tag debug' terminated with error code
> >> >> 10
> >> >> make[7]: *** [all] Error 1
> >> >>
> >> >>
> >> >
> >
> > --
> > Yaron Minsky
> >
> 
> 
> 
> -- 
> Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com

-- 
Yaron Minsky


From agarwal1975 at gmail.com  Thu Nov 10 20:29:59 2011
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Thu, 10 Nov 2011 15:29:59 -0500
Subject: bin-prot compile error related to libc version
In-Reply-To: <20111110194656.GL23802@janestreet.com>
References: <CAMu2m2JwNzRTVt5UUJmMSsP_aRH2Lz=25hWicgsFNBAv5owQ0w@mail.gmail.com>
 <CADKNfhLhvs6OT7Oq4KWj1HSbmi-jp9F+W4Gc5qwuFRsK2_ofJg@mail.gmail.com>
 <CAMu2m2JTMsv0+M8zLorOiY-5m1tuWZ9P0LFGj9ycf2YU6tgZ8w@mail.gmail.com>
 <20111110154807.GE23802@janestreet.com> <CAP_800rvAnUuL3LoyFiZEMkuQLQ4=+Kk861dLem_w4ccP_SS8Q@mail.gmail.com>
 <20111110194656.GL23802@janestreet.com>
Message-ID: <CAMu2m2JJuhauH-Qa5=OBZnitVyG=LkeXbioqVzafY2dG2OHqnA@mail.gmail.com>

Thanks for the quick updates! I successfully compiled on all of our
clusters.

On Thu, Nov 10, 2011 at 2:46 PM, Yaron Minsky <yminsky at janestreet.com>wrote:

> Thanks Markus.  I was tricked by the fact that your website doesn't
> point to the ocamlforge site.
>
> We need to do a better job of integrating.  I'm hoping we'll have our
> internal processes cleaned up soon, and that will make it easier to
> sync-up.
>
> y
>
> On 10/11/11 14:36, Markus Mottl wrote:
> > Hi,
> >
> > the "official" packages are now on OCaml Forge.  This was the agreed
> > upon repository where Till and I created the final release.  The idea
> > was to eventually drop our separate download sites and use OCaml Forge
> > only.  Godi uses the OCaml Forge packages.
> >
> > Concerning the error above: indeed, glibc 2.5 does not support these
> > functions yet, they were apparently introduced with glibc 2.9 in 2009
> > only.
> >
> > I have updated bin-prot by defining the required macros if they are
> > undefined.  The new distribution is online, both at OCaml Forge and in
> > Godi.  Please let me know if there are still any build errors or if
> > the test suite fails.  I cannot easily test old platforms myself.
> >
> > Regards,
> > Markus
> >
> > On Thu, Nov 10, 2011 at 10:48, Yaron Minsky <yminsky at janestreet.com>
> wrote:
> > > Looping Markus in.
> > >
> > > Have you tried to setup the released tarballs from the website?  I
> > > wonder if they have this problem too.
> > >
> > > Anyone know offhand who put together the Godi packages?  I agree that
> > > those version numbers confuse me.  I know there was some
> > > cross-platform compatibility work that was done for Debian that was
> > > working its way upstream, but I'm not sure of the state of play.
> > >
> > > Markus, do you know what's going on here?
> > >
> > > y
> > >
> > > On 10/11/11 08:53, Ashish Agarwal wrote:
> > >> Platforms: CentOS 5.5, RHEL 5.1, and RHEL 5.3
> > >> bin-prot version 2.0.6
> > >> typ-conv version: 3.0.4
> > >>
> > >> However, version numbers on both jane street and Markus's websites are
> > >> lower than this, so I'm unclear where the godi versions are coming
> from.
> > >>
> > >> $ godi_list | grep prot
> > >> godi-bin-prot                  inst:-          src:2.0.6godi1
> > >>
> > >> $ godi_list | grep conv
> > >> godi-type-conv                 inst:-          src:3.0.4godi1
> > >>
> > >>
> > >> On Wed, Nov 9, 2011 at 9:12 PM, Yaron Minsky <yminsky at gmail.com>
> wrote:
> > >>
> > >> > Just to be clear, what platform are you running on, and what
> version of
> > >> > bin-prot and type-conv are you using?
> > >> >
> > >> >
> > >> > On Wed, Nov 9, 2011 at 12:11 PM, Ashish Agarwal <
> agarwal1975 at gmail.com>wrote:
> > >> >
> > >> >> When compiling bin-prot via godi, I get the error below. We have
> libc
> > >> >> version 2.5, which seems not to support the missing functions. Is
> this
> > >> >> dependency removed in any branch? (Also, let me know if there is a
> better
> > >> >> mailing list to use for bin-prot.)
> > >> >>
> > >> >> I: Running command '/home/aa144/local/godi/bin/ocamlbuild
> > >> >> syntax/pa_bin_prot.cma lib/libbin_prot.a lib/dllbin_prot.so
> > >> >> lib/bin_prot.cma lib/bin_prot.cmxa lib/bin_prot.a
> lib_test/example.byte
> > >> >> -tag debug'
> > >> >> Finished, 1 target (0 cached) in 00:00:00.
> > >> >> + ocamlfind ocamlc -ccopt -pipe -ccopt -g -ccopt -fPIC -ccopt -O2
> -ccopt
> > >> >> -fomit-frame-pointer -ccopt -fsigned-char -ccopt -Wall -ccopt
> -pedantic
> > >> >> -ccopt -Wextra -ccopt -Wunused -ccopt -Werror -ccopt
> -Wno-long-long -c
> > >> >> lib/write_stubs.c
> > >> >> cc1: warnings being treated as errors
> > >> >> lib/write_stubs.c: In function 'do_write_int16':
> > >> >> lib/write_stubs.c:76: warning: implicit declaration of function
> 'htole16'
> > >> >> lib/write_stubs.c: In function 'do_write_int32':
> > >> >> lib/write_stubs.c:90: warning: implicit declaration of function
> 'htole32'
> > >> >> lib/write_stubs.c: In function 'do_write_int64':
> > >> >> lib/write_stubs.c:105: warning: implicit declaration of function
> 'htole64'
> > >> >> lib/write_stubs.c: In function 'write_network16_int_stub':
> > >> >> lib/write_stubs.c:557: warning: implicit declaration of function
> 'htobe16'
> > >> >> lib/write_stubs.c: In function 'write_network32_int_stub':
> > >> >> lib/write_stubs.c:567: warning: implicit declaration of function
> 'htobe32'
> > >> >> lib/write_stubs.c: In function 'write_network64_int_stub':
> > >> >> lib/write_stubs.c:588: warning: implicit declaration of function
> 'htobe64'
> > >> >> Command exited with code 2.
> > >> >> Compilation unsuccessful after building 8 targets (0 cached) in
> 00:00:01.
> > >> >> E: Command '/home/aa144/local/godi/bin/ocamlbuild
> syntax/pa_bin_prot.cma
> > >> >> lib/libbin_prot.a lib/dllbin_prot.so lib/bin_prot.cma
> lib/bin_prot.cmxa
> > >> >> lib/bin_prot.a lib_test/example.byte -tag debug' terminated with
> error code
> > >> >> 10
> > >> >> make[7]: *** [all] Error 1
> > >> >>
> > >> >>
> > >> >
> > >
> > > --
> > > Yaron Minsky
> > >
> >
> >
> >
> > --
> > Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>
> --
> Yaron Minsky
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111110/ffd4ef09/attachment-0001.html>

From yminsky at gmail.com  Fri Nov 11 00:11:04 2011
From: yminsky at gmail.com (Yaron Minsky)
Date: Thu, 10 Nov 2011 19:11:04 -0500
Subject: ocaml-core - Google Groups: Message Pending [{IOyIp92l7aziaioCd2UwAf9YhCToNZdN0}]
In-Reply-To: <pending-CAP_800rvAnUuL3LoyFiZEMkuQLQ4=+Kk861dLem_w4ccP_SS8Q@mail.gmail.com>
References: <pending-CAP_800rvAnUuL3LoyFiZEMkuQLQ4=+Kk861dLem_w4ccP_SS8Q@mail.gmail.com>
Message-ID: <CADKNfhKNPv3PKnBhX2AQd5Vvtu_HkZtxHoMsx5jL3-68sKT=Yg@mail.gmail.com>

On Nov 10, 2011 2:36 PM, "ocaml-core" <ocaml-core+msgappr at googlegroups.com>
wrote:

>   A message has been sent to the ocaml-core<http://groups.google.com/group/ocaml-core?hl=en_US>group and is awaiting approval. We've included this message for your review.
>
> The message requires moderation because the user does not have permission
> to post.
>
> You can approve or reject<http://groups.google.com/group/ocaml-core/pendmsg?hl=en_US>this message or you can approve this message by replying to this email.
>  [image: Visit Google Groups]
>
> Start <https://groups.google.com/groups/create?hl=en_US&src=email> your
> own group, visit <http://groups.google.com/support/?hl=en_US&src=email>the help center, or
> report <https://groups.google.com/groups/abuse?hl=en_US&src=email> abuse.
>
>
> ---------- Forwarded message ----------
> From: Markus Mottl <markus.mottl at gmail.com>
> To: Yaron Minsky <yminsky at janestreet.com>
> Date: Thu, 10 Nov 2011 14:36:22 -0500
> Subject: Re: bin-prot compile error related to libc version
> Hi,
>
> the "official" packages are now on OCaml Forge.  This was the agreed
> upon repository where Till and I created the final release.  The idea
> was to eventually drop our separate download sites and use OCaml Forge
> only.  Godi uses the OCaml Forge packages.
>
> Concerning the error above: indeed, glibc 2.5 does not support these
> functions yet, they were apparently introduced with glibc 2.9 in 2009
> only.
>
> I have updated bin-prot by defining the required macros if they are
> undefined.  The new distribution is online, both at OCaml Forge and in
> Godi.  Please let me know if there are still any build errors or if
> the test suite fails.  I cannot easily test old platforms myself.
>
> Regards,
> Markus
>
> On Thu, Nov 10, 2011 at 10:48, Yaron Minsky <yminsky at janestreet.com>
> wrote:
> > Looping Markus in.
> >
> > Have you tried to setup the released tarballs from the website?  I
> > wonder if they have this problem too.
> >
> > Anyone know offhand who put together the Godi packages?  I agree that
> > those version numbers confuse me.  I know there was some
> > cross-platform compatibility work that was done for Debian that was
> > working its way upstream, but I'm not sure of the state of play.
> >
> > Markus, do you know what's going on here?
> >
> > y
> >
> > On 10/11/11 08:53, Ashish Agarwal wrote:
> >> Platforms: CentOS 5.5, RHEL 5.1, and RHEL 5.3
> >> bin-prot version 2.0.6
> >> typ-conv version: 3.0.4
> >>
> >> However, version numbers on both jane street and Markus's websites are
> >> lower than this, so I'm unclear where the godi versions are coming from.
> >>
> >> $ godi_list | grep prot
> >> godi-bin-prot                  inst:-          src:2.0.6godi1
> >>
> >> $ godi_list | grep conv
> >> godi-type-conv                 inst:-          src:3.0.4godi1
> >>
> >>
> >> On Wed, Nov 9, 2011 at 9:12 PM, Yaron Minsky <yminsky at gmail.com> wrote:
> >>
> >> > Just to be clear, what platform are you running on, and what version
> of
> >> > bin-prot and type-conv are you using?
> >> >
> >> >
> >> > On Wed, Nov 9, 2011 at 12:11 PM, Ashish Agarwal <
> agarwal1975 at gmail.com>wrote:
> >> >
> >> >> When compiling bin-prot via godi, I get the error below. We have libc
> >> >> version 2.5, which seems not to support the missing functions. Is
> this
> >> >> dependency removed in any branch? (Also, let me know if there is a
> better
> >> >> mailing list to use for bin-prot.)
> >> >>
> >> >> I: Running command '/home/aa144/local/godi/bin/ocamlbuild
> >> >> syntax/pa_bin_prot.cma lib/libbin_prot.a lib/dllbin_prot.so
> >> >> lib/bin_prot.cma lib/bin_prot.cmxa lib/bin_prot.a
> lib_test/example.byte
> >> >> -tag debug'
> >> >> Finished, 1 target (0 cached) in 00:00:00.
> >> >> + ocamlfind ocamlc -ccopt -pipe -ccopt -g -ccopt -fPIC -ccopt -O2
> -ccopt
> >> >> -fomit-frame-pointer -ccopt -fsigned-char -ccopt -Wall -ccopt
> -pedantic
> >> >> -ccopt -Wextra -ccopt -Wunused -ccopt -Werror -ccopt -Wno-long-long
> -c
> >> >> lib/write_stubs.c
> >> >> cc1: warnings being treated as errors
> >> >> lib/write_stubs.c: In function 'do_write_int16':
> >> >> lib/write_stubs.c:76: warning: implicit declaration of function
> 'htole16'
> >> >> lib/write_stubs.c: In function 'do_write_int32':
> >> >> lib/write_stubs.c:90: warning: implicit declaration of function
> 'htole32'
> >> >> lib/write_stubs.c: In function 'do_write_int64':
> >> >> lib/write_stubs.c:105: warning: implicit declaration of function
> 'htole64'
> >> >> lib/write_stubs.c: In function 'write_network16_int_stub':
> >> >> lib/write_stubs.c:557: warning: implicit declaration of function
> 'htobe16'
> >> >> lib/write_stubs.c: In function 'write_network32_int_stub':
> >> >> lib/write_stubs.c:567: warning: implicit declaration of function
> 'htobe32'
> >> >> lib/write_stubs.c: In function 'write_network64_int_stub':
> >> >> lib/write_stubs.c:588: warning: implicit declaration of function
> 'htobe64'
> >> >> Command exited with code 2.
> >> >> Compilation unsuccessful after building 8 targets (0 cached) in
> 00:00:01.
> >> >> E: Command '/home/aa144/local/godi/bin/ocamlbuild
> syntax/pa_bin_prot.cma
> >> >> lib/libbin_prot.a lib/dllbin_prot.so lib/bin_prot.cma
> lib/bin_prot.cmxa
> >> >> lib/bin_prot.a lib_test/example.byte -tag debug' terminated with
> error code
> >> >> 10
> >> >> make[7]: *** [all] Error 1
> >> >>
> >> >>
> >> >
> >
> > --
> > Yaron Minsky
> >
>
>
>
> --
> Markus Mottl        http://www.ocaml.info        markus.mottl at gmail.com
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111110/d01c926a/attachment-0001.html>

From ocaml-core+msgappr at googlegroups.com  Thu Nov 10 19:36:24 2011
From: ocaml-core+msgappr at googlegroups.com (ocaml-core)
Date: Thu, 10 Nov 2011 19:36:24 +0000
Subject: ocaml-core - Google Groups: Message Pending [{IOyIp92l7aziaioCd2UwAf9YhCToNZdN0}]
Message-ID: <pending-CAP_800rvAnUuL3LoyFiZEMkuQLQ4=+Kk861dLem_w4ccP_SS8Q@mail.gmail.com>


A message has been sent to the ocaml-core group and is awaiting approval. We've included this message for your review.

The message requires moderation because the user does not have permission to post.

You can approve or reject this message online at:
http://groups.google.com/group/ocaml-core/pendmsg?hl=en_US

or

You can approve this message by replying to this email.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111110/94405144/attachment-0001.html>
-------------- next part --------------
An embedded message was scrubbed...
From: unknown sender
Subject: Re: bin-prot compile error related to libc version
Date: Thu, 10 Nov 2011 14:36:22 -0500
Size: 6838
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111110/94405144/attachment-0001.mht>

From seanmcl at gmail.com  Sat Nov 12 17:10:33 2011
From: seanmcl at gmail.com (Sean McLaughlin)
Date: Sat, 12 Nov 2011 12:10:33 -0500
Subject: ocamlspotter support in core
Message-ID: <CAO4dZbfnSQNhmXOxc1gy23Bhs1=QK_D0fRhei8uuKP8LsLRJvA@mail.gmail.com>


The default make setup doesn't build spot files.  Perhaps we can
include the -annot option as a default compiler flag, which doesn't
seem to hurt if you're not using an ocamlspotter version of ocaml, but
makes it possible to jump to function definitions in core from user
programs.


From yminsky at gmail.com  Sat Nov 12 18:22:15 2011
From: yminsky at gmail.com (Yaron Minsky)
Date: Sat, 12 Nov 2011 13:22:15 -0500
Subject: ocamlspotter support in core
In-Reply-To: <CAO4dZbfnSQNhmXOxc1gy23Bhs1=QK_D0fRhei8uuKP8LsLRJvA@mail.gmail.com>
References: <CAO4dZbfnSQNhmXOxc1gy23Bhs1=QK_D0fRhei8uuKP8LsLRJvA@mail.gmail.com>
Message-ID: <CADKNfhLD1b9yw3K3d5qsJ1KY9jn=7yTRU=ashUf7SpO7qdu6fw@mail.gmail.com>

Well, you can't create spot files without a patched version of the
compiler, which seems unreasonable to expect.  You could imagine making the
configure script discover if you have an ocamlspotter-capable compiler
available, but I don't really know oasis well enough to do that myself.

The -annot flag gives you some help (you can figure out the types of
expressions), but not quite as much as ocamlspotter does.  I'm hoping we'll
get something ocamlspotter-ish into the compiler proper by 3.13...

y

On Sat, Nov 12, 2011 at 12:10 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:

> The default make setup doesn't build spot files.  Perhaps we can
> include the -annot option as a default compiler flag, which doesn't
> seem to hurt if you're not using an ocamlspotter version of ocaml, but
> makes it possible to jump to function definitions in core from user
> programs.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111112/438f6d58/attachment-0001.html>

From seanmcl at gmail.com  Sun Nov 13 00:25:13 2011
From: seanmcl at gmail.com (Sean McLaughlin)
Date: Sat, 12 Nov 2011 19:25:13 -0500
Subject: ocamlspotter support in core
In-Reply-To: <CADKNfhLD1b9yw3K3d5qsJ1KY9jn=7yTRU=ashUf7SpO7qdu6fw@mail.gmail.com>
References: <CAO4dZbfnSQNhmXOxc1gy23Bhs1=QK_D0fRhei8uuKP8LsLRJvA@mail.gmail.com>
	<CADKNfhLD1b9yw3K3d5qsJ1KY9jn=7yTRU=ashUf7SpO7qdu6fw@mail.gmail.com>
Message-ID: <CAO4dZbceJDJ7ecm8rd=MAwunF4g8eDdDAYjNboX4v2r076FtZg@mail.gmail.com>


To generate .spot files, all you need is the -annot flag to
ocaml{c,opt}.  It seems harmless
to enable this flag by default.  Doesn't it?  I'm not sure of the full
implications.

On Sat, Nov 12, 2011 at 1:22 PM, Yaron Minsky <yminsky at gmail.com> wrote:
> Well, you can't create spot files without a patched version of the compiler,
> which seems unreasonable to expect. ?You could imagine making the configure
> script discover if you have an ocamlspotter-capable compiler available, but
> I don't really know oasis well enough to do that myself.
> The -annot flag gives you some help (you can figure out the types of
> expressions), but not quite as much as ocamlspotter does. ?I'm hoping we'll
> get something ocamlspotter-ish into the compiler proper by 3.13...
> y
>
> On Sat, Nov 12, 2011 at 12:10 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:
>>
>> The default make setup doesn't build spot files. ?Perhaps we can
>> include the -annot option as a default compiler flag, which doesn't
>> seem to hurt if you're not using an ocamlspotter version of ocaml, but
>> makes it possible to jump to function definitions in core from user
>> programs.
>
>


From seanmcl at gmail.com  Sun Nov 13 00:30:01 2011
From: seanmcl at gmail.com (Sean McLaughlin)
Date: Sat, 12 Nov 2011 19:30:01 -0500
Subject: ocamlspotter support in core
In-Reply-To: <CAO4dZbceJDJ7ecm8rd=MAwunF4g8eDdDAYjNboX4v2r076FtZg@mail.gmail.com>
References: <CAO4dZbfnSQNhmXOxc1gy23Bhs1=QK_D0fRhei8uuKP8LsLRJvA@mail.gmail.com>
	<CADKNfhLD1b9yw3K3d5qsJ1KY9jn=7yTRU=ashUf7SpO7qdu6fw@mail.gmail.com>
	<CAO4dZbceJDJ7ecm8rd=MAwunF4g8eDdDAYjNboX4v2r076FtZg@mail.gmail.com>
Message-ID: <CAO4dZbe0tW073rrzt5OM9JTovJE=AznWWzzRvUwkUYZLykb5Hw@mail.gmail.com>


To clarify, if you're not using an ocamlspot-modified ocaml compiler,
it would just generate the (presumably unused) .annot files.

On Sat, Nov 12, 2011 at 7:25 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:
> To generate .spot files, all you need is the -annot flag to
> ocaml{c,opt}. ?It seems harmless
> to enable this flag by default. ?Doesn't it? ?I'm not sure of the full
> implications.
>
> On Sat, Nov 12, 2011 at 1:22 PM, Yaron Minsky <yminsky at gmail.com> wrote:
>> Well, you can't create spot files without a patched version of the compiler,
>> which seems unreasonable to expect. ?You could imagine making the configure
>> script discover if you have an ocamlspotter-capable compiler available, but
>> I don't really know oasis well enough to do that myself.
>> The -annot flag gives you some help (you can figure out the types of
>> expressions), but not quite as much as ocamlspotter does. ?I'm hoping we'll
>> get something ocamlspotter-ish into the compiler proper by 3.13...
>> y
>>
>> On Sat, Nov 12, 2011 at 12:10 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:
>>>
>>> The default make setup doesn't build spot files. ?Perhaps we can
>>> include the -annot option as a default compiler flag, which doesn't
>>> seem to hurt if you're not using an ocamlspotter version of ocaml, but
>>> makes it possible to jump to function definitions in core from user
>>> programs.
>>
>>
>


From jun.furuse at gmail.com  Sun Nov 13 01:52:28 2011
From: jun.furuse at gmail.com (Jun Furuse)
Date: Sun, 13 Nov 2011 10:52:28 +0900
Subject: ocamlspotter support in core
In-Reply-To: <CADKNfhLD1b9yw3K3d5qsJ1KY9jn=7yTRU=ashUf7SpO7qdu6fw@mail.gmail.com>
References: <CAO4dZbfnSQNhmXOxc1gy23Bhs1=QK_D0fRhei8uuKP8LsLRJvA@mail.gmail.com>
	<CADKNfhLD1b9yw3K3d5qsJ1KY9jn=7yTRU=ashUf7SpO7qdu6fw@mail.gmail.com>
Message-ID: <CAAoLEWt2ioOD9MdPVLjhyoDv6tC2JyE6y5_90qmkjBmFipux-Q@mail.gmail.com>


Hi,

I have worked a bit for the ocamlspot integration into OCamlPro's
binannot branch,
and it is somehow working.

The problem is : the branch has big diffs. I think it is unlikely we
can have it in 3.13...

Jun

On Sun, Nov 13, 2011 at 3:22 AM, Yaron Minsky <yminsky at gmail.com> wrote:
> Well, you can't create spot files without a patched version of the compiler,
> which seems unreasonable to expect. ?You could imagine making the configure
> script discover if you have an ocamlspotter-capable compiler available, but
> I don't really know oasis well enough to do that myself.
> The -annot flag gives you some help (you can figure out the types of
> expressions), but not quite as much as ocamlspotter does. ?I'm hoping we'll
> get something ocamlspotter-ish into the compiler proper by 3.13...
> y
>
> On Sat, Nov 12, 2011 at 12:10 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:
>>
>> The default make setup doesn't build spot files. ?Perhaps we can
>> include the -annot option as a default compiler flag, which doesn't
>> seem to hurt if you're not using an ocamlspotter version of ocaml, but
>> makes it possible to jump to function definitions in core from user
>> programs.
>
>


From jun.furuse at gmail.com  Sun Nov 13 02:06:51 2011
From: jun.furuse at gmail.com (Jun Furuse)
Date: Sun, 13 Nov 2011 11:06:51 +0900
Subject: ocamlspotter support in core
In-Reply-To: <CAO4dZbceJDJ7ecm8rd=MAwunF4g8eDdDAYjNboX4v2r076FtZg@mail.gmail.com>
References: <CAO4dZbfnSQNhmXOxc1gy23Bhs1=QK_D0fRhei8uuKP8LsLRJvA@mail.gmail.com>
	<CADKNfhLD1b9yw3K3d5qsJ1KY9jn=7yTRU=ashUf7SpO7qdu6fw@mail.gmail.com>
	<CAO4dZbceJDJ7ecm8rd=MAwunF4g8eDdDAYjNboX4v2r076FtZg@mail.gmail.com>
Message-ID: <CAAoLEWtziJAfaTi9KGKVZtUWK2yHntu_P632NowbiKgWfoDQ_A@mail.gmail.com>


Hi,

It is now rather off-topic and non related with core, but

If you set OCAML_ANNOT environment variable with something non-empty,
the patched compiler creates .annot/.spot/.spit files automatically
even w/o -annot option. Thus I compile OCaml library packages with
annot/spot/spit files even if the build scripts are not with -annot.

Installation of spot/spit files of such packages untouching the build
scripts is bit more tricky. I have written a small tool automatically
finds those in source directories and copy into ocamlfind destdirs. It
is not documented at all but you can try it:

  https://bitbucket.org/camlspotter/spotinstall  (It requires
https://bitbucket.org/camlspotter/spotlib)

Jun


On Sun, Nov 13, 2011 at 9:25 AM, Sean McLaughlin <seanmcl at gmail.com> wrote:
> To generate .spot files, all you need is the -annot flag to
> ocaml{c,opt}. ?It seems harmless
> to enable this flag by default. ?Doesn't it? ?I'm not sure of the full
> implications.
>
> On Sat, Nov 12, 2011 at 1:22 PM, Yaron Minsky <yminsky at gmail.com> wrote:
>> Well, you can't create spot files without a patched version of the compiler,
>> which seems unreasonable to expect. ?You could imagine making the configure
>> script discover if you have an ocamlspotter-capable compiler available, but
>> I don't really know oasis well enough to do that myself.
>> The -annot flag gives you some help (you can figure out the types of
>> expressions), but not quite as much as ocamlspotter does. ?I'm hoping we'll
>> get something ocamlspotter-ish into the compiler proper by 3.13...
>> y
>>
>> On Sat, Nov 12, 2011 at 12:10 PM, Sean McLaughlin <seanmcl at gmail.com> wrote:
>>>
>>> The default make setup doesn't build spot files. ?Perhaps we can
>>> include the -annot option as a default compiler flag, which doesn't
>>> seem to hurt if you're not using an ocamlspotter version of ocaml, but
>>> makes it possible to jump to function definitions in core from user
>>> programs.
>>
>>
>


From yminsky at gmail.com  Thu Nov 17 15:23:14 2011
From: yminsky at gmail.com (Yaron Minsky)
Date: Thu, 17 Nov 2011 10:23:14 -0500
Subject: Mis-detection of -lrt
In-Reply-To: <4EC50E29.1040803@glondu.net>
References: <4EC50E29.1040803@glondu.net>
Message-ID: <CADKNfhJ5rFVikg44j5JFDkRNog8OeTfAULUJBiEvhy5LypfioQ@mail.gmail.com>

Thanks!   We'll take a look and integrate upstream. It might take us a bit,
but this process will get smoother when we get our transition to github
done.
On Nov 17, 2011 8:37 AM, "St?phane Glondu" <steph at glondu.net> wrote:

> Hello,
>
> I've just upgraded Core from version 0.6.0 to 107.01 in Debian, and it
> failed on mips, powerpc, s390, hurd and kfreebsd ports, because of
> "-lrt" missing [1].
>
> A quick look at Core sources reveals that this flag is supposed to be
> there by itself on Linux, and it is indeed on x86, arm and ia64 ports,
> but somehow the detection fails everywhere else.
>
> Anyway, I guess checking for Linux is not enough and it is needed
> wherever glibc is used. For the moment, I applied a rather crude patch
> to the Debian package (attached). It causes "-lrt" to be supplied twice
> sometimes, but it at least compiles (and tests pass) everywhere (except
> hurd) [2].
>
> [1] https://buildd.debian.org/status/logs.php?pkg=janest-core&ver=107.01-4
> [2] https://buildd.debian.org/status/logs.php?pkg=janest-core&ver=107.01-5
>
>
> Cheers,
>
> --
> St?phane
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111117/314062c3/attachment-0001.html>

From steph at glondu.net  Thu Nov 17 13:37:45 2011
From: steph at glondu.net (=?ISO-8859-1?Q?St=E9phane_Glondu?=)
Date: Thu, 17 Nov 2011 14:37:45 +0100
Subject: Mis-detection of -lrt
Message-ID: <4EC50E29.1040803@glondu.net>

Hello,

I've just upgraded Core from version 0.6.0 to 107.01 in Debian, and it
failed on mips, powerpc, s390, hurd and kfreebsd ports, because of
"-lrt" missing [1].

A quick look at Core sources reveals that this flag is supposed to be
there by itself on Linux, and it is indeed on x86, arm and ia64 ports,
but somehow the detection fails everywhere else.

Anyway, I guess checking for Linux is not enough and it is needed
wherever glibc is used. For the moment, I applied a rather crude patch
to the Debian package (attached). It causes "-lrt" to be supplied twice
sometimes, but it at least compiles (and tests pass) everywhere (except
hurd) [2].

[1] https://buildd.debian.org/status/logs.php?pkg=janest-core&ver=107.01-4
[2] https://buildd.debian.org/status/logs.php?pkg=janest-core&ver=107.01-5


Cheers,

-- 
St?phane
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0001-Force-linking-with-lrt.patch
Type: text/x-patch
Size: 1243 bytes
Desc: not available
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111117/723ebc76/attachment-0001.bin>

From ocaml-core at googlegroups.com  Fri Nov 18 03:04:42 2011
From: ocaml-core at googlegroups.com (ocaml-core at googlegroups.com)
Date: Fri, 18 Nov 2011 03:04:42 +0000
Subject: Moderator's spam report for ocaml-core@googlegroups.com
Message-ID: <00504502e06037adad04b1f999e9@google.com>


This message is being sent to you because you are a moderator of the group ocaml-core.

The following suspicious messages were sent to your group, but are being held in your moderation queue because they are classified as likely spam messages.

If you take no action, all the messages below will be discarded automatically as spam.

However, if you see any messages that are not spam below, you may approve them individually by going to:

http://groups.google.com/group/ocaml-core/pendmsg

Please do not mark this notification as spam; this is a service for group moderators. If you do not wish to receive these notifications in the future, you may change your preferences by going to:

http://groups.google.com/group/ocaml-core/manage_post


------- 1 of 1  -------
Subject: Hello
>From: Penda ouma <pendaouma at adinet.com.uy>
Date: Nov 16 02:30PM +0800

?
?
Good Morning,
I am Mrs. Penda Ouma, I am 70 years old, my late husband and I use to live at 11 Al Shatt Street, Tripoli, Tarabulus, Libya. I am married to late Mr. Abi Samson Ouma who was an oil merchant in Libya until his death.


Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=4710704799687651097


For more information about this message, please visit:
http://groups.google.com/support/bin/answer.py?hl=en&answer=165806



From kakadu.hafanana at gmail.com  Fri Nov 18 19:50:48 2011
From: kakadu.hafanana at gmail.com (Kakadu)
Date: Fri, 18 Nov 2011 11:50:48 -0800 (PST)
Subject: Mis-detection of -lrt
In-Reply-To: <4EC50E29.1040803@glondu.net>
References: <4EC50E29.1040803@glondu.net>
Message-ID: <b39432e0-8269-4919-8b03-77b42e953a9c@l24g2000yqm.googlegroups.com>


Updating core's packages in Debian repository are the great news!
I've a little library depend on core and people don't want to look at
it, contribute  because compiling core takes long time. Others said
that they have never seen any useful library depend on core.

It is a pity that I don't have now power to understand debuild now (

Kakadu

On Nov 17, 5:37?pm, St?phane Glondu <st... at glondu.net> wrote:
> Hello,
>
> I've just upgraded Core from version 0.6.0 to 107.01 in Debian, and it
> failed on mips, powerpc, s390, hurd and kfreebsd ports, because of
> "-lrt" missing [1].
>
> A quick look at Core sources reveals that this flag is supposed to be
> there by itself on Linux, and it is indeed on x86, arm and ia64 ports,
> but somehow the detection fails everywhere else.
>
> Anyway, I guess checking for Linux is not enough and it is needed
> wherever glibc is used. For the moment, I applied a rather crude patch
> to the Debian package (attached). It causes "-lrt" to be supplied twice
> sometimes, but it at least compiles (and tests pass) everywhere (except
> hurd) [2].
>
> [1]https://buildd.debian.org/status/logs.php?pkg=janest-core&ver=107.01-4
> [2]https://buildd.debian.org/status/logs.php?pkg=janest-core&ver=107.01-5
>
> Cheers,
>
> --
> St???phane
>
> ?0001-Force-linking-with-lrt.patch
> 1KViewDownload


From markus.mottl at gmail.com  Mon Nov 21 16:53:23 2011
From: markus.mottl at gmail.com (Markus)
Date: Mon, 21 Nov 2011 08:53:23 -0800 (PST)
Subject: Making Async play better with others
In-Reply-To: <20111031142540.GZ26614@janestreet.com>
References: <20111031142540.GZ26614@janestreet.com>
Message-ID: <531e4eac-1d50-4432-8073-7b78ad7d80b0@o9g2000vbc.googlegroups.com>


Concerning Async portability to non-Linux platforms, I think there are
a few trivial API issues, not just there but also in Core, which can
be fixed quickly.  E.g. Core.Bigstring_marshal is excluded on non-
Linux platforms even though there is only a single (and not super-
important) function in there that uses Linux-specific I/O.  Since the
Async writer accesses this module, Async cannot compile on non-Linux
platforms.

I suggest moving all functions that require Linux-specific
functionality to "Linux"-submodules within their current modules, both
in Core and Async.  These sub-modules should be compiled
conditionally.  This is an easy and clean way to propagate Linux-
functionality through all libraries.

The Core/Async issues could probably be solved within 2-3 hours
including making Godi packages, but would be considerably easier to
deal with if there were a public VC repository for both.  Async is
still lacking one.  Since the move to github is apparently taking it's
time, I'd be willing to add Async to OCaml Forge for the while being
and make the required patches to both Core and Async.

Please let me know if Jane Street is willing to merge the patched
versions of Core and Async on OCaml Forge.  Otherwise I'll hold off
until Jane Street creates a public repository where contributions can
be made to avoid unnecessary forking or losing work.

Cheers,
Markus

On Oct 31, 9:25?am, Yaron Minsky <ymin... at janestreet.com> wrote:
> I'm wondering if anyone has opinions on what we should do to make
> Async more widely applicable. ?Here are some issues that jump to mind.
>
> - Porting to windows. ?People have proposed using libuv to do that.
> - Porting to non-Linux UNIX's: Right now, we depend on Core's
> ? Linux_ext module. ?I think the dependency is not deep, so
> ? conditional compilation might be a way to fix that.
> - Support for other polling mechanisms: like epoll and friends. ?Right
> ? now, it's all select. ?A pluggable engine mechanism like the one Lwt
> ? has could make sense here.
> - Interoperability with Lwt: ?It would be nice to make Async and Lwt
> ? libraries play together. ?Jeremie Dimino suggested that the best
> ? thing here might be to build a library for Lwt on top of Async.
> ? That seems plausible enough, but an engine in the other direction
> ? might be good too.
>
> I'm curious if people have opinions as to how to best handle these.
> I'm in particular wondering about conditional compilation as a
> solution. ?It seems messy, but I'm not sure what would be a better
> approach. ?One thing you could imagine is using first-class modules,
> where you stored a system-dependent module that provided the
> OS-specific functionality. ?But there's some performance compromise
> there (probably too small to matter compared to a system-call,
> though), and I'm not sure it comes out cleaner.
>
> y
>
> --
> Yaron Minsky


From yminsky at janestreet.com  Tue Nov 22 00:44:27 2011
From: yminsky at janestreet.com (Yaron Minsky)
Date: Mon, 21 Nov 2011 19:44:27 -0500
Subject: Making Async play better with others
In-Reply-To: <531e4eac-1d50-4432-8073-7b78ad7d80b0@o9g2000vbc.googlegroups.com>
References: <20111031142540.GZ26614@janestreet.com>
 <531e4eac-1d50-4432-8073-7b78ad7d80b0@o9g2000vbc.googlegroups.com>
Message-ID: <20111122004427.GU7522@janestreet.com>


Yury is hoping to get a proper bridging system for ferrying patches
back and forth to github done very soon, say, in another week.  If we
can't get it done, we'll try something simpler as an intermediate
step.

In any case, we'd be very happy to accept portability patches!
Stephen, what do you think about Markus' proposal for how to organize
it?  It's worth noting that this patch might conflict with a patch
that Stephen has done internally that reorganizes much of Async's
internals to separate out a small core that is independent of all
OS-specific code.

So, in short, give us another week!

y

On 21/11/11 08:53, Markus wrote:
> Concerning Async portability to non-Linux platforms, I think there are
> a few trivial API issues, not just there but also in Core, which can
> be fixed quickly.  E.g. Core.Bigstring_marshal is excluded on non-
> Linux platforms even though there is only a single (and not super-
> important) function in there that uses Linux-specific I/O.  Since the
> Async writer accesses this module, Async cannot compile on non-Linux
> platforms.
> 
> I suggest moving all functions that require Linux-specific
> functionality to "Linux"-submodules within their current modules, both
> in Core and Async.  These sub-modules should be compiled
> conditionally.  This is an easy and clean way to propagate Linux-
> functionality through all libraries.
> 
> The Core/Async issues could probably be solved within 2-3 hours
> including making Godi packages, but would be considerably easier to
> deal with if there were a public VC repository for both.  Async is
> still lacking one.  Since the move to github is apparently taking it's
> time, I'd be willing to add Async to OCaml Forge for the while being
> and make the required patches to both Core and Async.
> 
> Please let me know if Jane Street is willing to merge the patched
> versions of Core and Async on OCaml Forge.  Otherwise I'll hold off
> until Jane Street creates a public repository where contributions can
> be made to avoid unnecessary forking or losing work.
> 
> Cheers,
> Markus
> 
> On Oct 31, 9:25?am, Yaron Minsky <ymin... at janestreet.com> wrote:
> > I'm wondering if anyone has opinions on what we should do to make
> > Async more widely applicable. ?Here are some issues that jump to mind.
> >
> > - Porting to windows. ?People have proposed using libuv to do that.
> > - Porting to non-Linux UNIX's: Right now, we depend on Core's
> > ? Linux_ext module. ?I think the dependency is not deep, so
> > ? conditional compilation might be a way to fix that.
> > - Support for other polling mechanisms: like epoll and friends. ?Right
> > ? now, it's all select. ?A pluggable engine mechanism like the one Lwt
> > ? has could make sense here.
> > - Interoperability with Lwt: ?It would be nice to make Async and Lwt
> > ? libraries play together. ?Jeremie Dimino suggested that the best
> > ? thing here might be to build a library for Lwt on top of Async.
> > ? That seems plausible enough, but an engine in the other direction
> > ? might be good too.
> >
> > I'm curious if people have opinions as to how to best handle these.
> > I'm in particular wondering about conditional compilation as a
> > solution. ?It seems messy, but I'm not sure what would be a better
> > approach. ?One thing you could imagine is using first-class modules,
> > where you stored a system-dependent module that provided the
> > OS-specific functionality. ?But there's some performance compromise
> > there (probably too small to matter compared to a system-call,
> > though), and I'm not sure it comes out cleaner.
> >
> > y
> >
> > --
> > Yaron Minsky

-- 
Yaron Minsky


From markus.mottl at gmail.com  Tue Nov 22 01:05:32 2011
From: markus.mottl at gmail.com (Markus Mottl)
Date: Mon, 21 Nov 2011 20:05:32 -0500
Subject: Making Async play better with others
In-Reply-To: <20111122004427.GU7522@janestreet.com>
References: <20111031142540.GZ26614@janestreet.com>
	<531e4eac-1d50-4432-8073-7b78ad7d80b0@o9g2000vbc.googlegroups.com>
	<20111122004427.GU7522@janestreet.com>
Message-ID: <CAP_800p5WEHYow9TdmyyKbZmSpFg3C=WorT9W_PfLsaxByrhtQ@mail.gmail.com>


On Mon, Nov 21, 2011 at 19:44, Yaron Minsky <yminsky at janestreet.com> wrote:
> Yury is hoping to get a proper bridging system for ferrying patches
> back and forth to github done very soon, say, in another week. ?If we
> can't get it done, we'll try something simpler as an intermediate
> step.

Sounds good, my kids will keep me busy enough in the meanwhile.

> In any case, we'd be very happy to accept portability patches!
> Stephen, what do you think about Markus' proposal for how to organize
> it? ?It's worth noting that this patch might conflict with a patch
> that Stephen has done internally that reorganizes much of Async's
> internals to separate out a small core that is independent of all
> OS-specific code.

I'd surely prefer using that version.  In case it would take too long
to wait for the integration, I could apply the trivial changes.  I
managed to build async on Mac OS X using the preprocessor with them.
Merging a few lines later doesn't sound like too much of a challenge.

Regards,
Markus

-- 
Markus Mottl? ? ? ? http://www.ocaml.info? ? ? ? markus.mottl at gmail.com


From sweeks at janestreet.com  Tue Nov 22 03:22:25 2011
From: sweeks at janestreet.com (Stephen Weeks)
Date: Mon, 21 Nov 2011 22:22:25 -0500
Subject: Making Async play better with others
In-Reply-To: <20111122004427.GU7522@janestreet.com>
References: <20111031142540.GZ26614@janestreet.com>
	<531e4eac-1d50-4432-8073-7b78ad7d80b0@o9g2000vbc.googlegroups.com>
	<20111122004427.GU7522@janestreet.com>
Message-ID: <20171.5489.911070.607515@nyc-qws-r31.delacy.com>



> Stephen, what do you think about Markus' proposal for how to organize
> it?

I am highly skeptical of the approach of propagating Linux submodules and
conditional compilation throughout the codebase.  I think it would be preferable
to design a platform-agnostic interface at the OCaml/C boundary, implemented on
the C side using platform-specific C files with minimal conditional compilation
at the C level and no conditional compilation at the OCaml level.  Platforms
that are unable to implement particular aspects of the interfaces should provide
functions that raise exceptions.  Then all OCaml code compiles everywhere, and
it one gets on each platform the maximum ability to run what is actually
implemented.


From yminsky at gmail.com  Tue Nov 22 03:35:36 2011
From: yminsky at gmail.com (Yaron Minsky)
Date: Mon, 21 Nov 2011 22:35:36 -0500
Subject: Making Async play better with others
In-Reply-To: <20171.5489.911070.607515@nyc-qws-r31.delacy.com>
References: <20111031142540.GZ26614@janestreet.com>
	<531e4eac-1d50-4432-8073-7b78ad7d80b0@o9g2000vbc.googlegroups.com>
	<20111122004427.GU7522@janestreet.com>
	<20171.5489.911070.607515@nyc-qws-r31.delacy.com>
Message-ID: <CADKNfhJ+tOuGKrKHNvpr0woe0NAk7wLYzEGMn9qk5M_JRT3FQA@mail.gmail.com>

So I guess that would mean ripping the Linux_ext module out of Core, right?

While I agree about keeping conditional code localized and small, I don't
quite see why the right answer is to have zero tolerance for conditional
compilation of OCaml.  Imagine that you have different APIs on different
platforms that require non-trivially different logic.  Now you're wedded to
the idea of having non-trivial code that compiles conditionally.  The only
question is, will you write that code in C or in OCaml?  Given that choice,
I usually choose OCaml...

Another way of dealing with some of these things is with runtime-tests that
key-off of the platform, potentially using first-class modules.  i.e., you
could have a value of the type:

val os : [ `Windows of (module Windows_specific_API)
         | `Linux   of (module Linux_specific_API)
         | `BSD     of (module BSD_specific_API)
         | `Posix   of (module Posix_specific_API) ]

The obvious downside is that it's a bit slower to dispatch your code, but
if you're doing a system call, maybe that doesn't matter.  And it has the
nice property that all of your OCaml code is type-checked all the time.
 You would just need some conditional compilation that chose the value of
`os` at compile-time.  The upside is that it gives you a way of writing
cross-platform programs that take advantage of the extra functionality when
it's present.

y

On Mon, Nov 21, 2011 at 10:22 PM, Stephen Weeks <sweeks at janestreet.com>wrote:

>
> > Stephen, what do you think about Markus' proposal for how to organize
> > it?
>
> I am highly skeptical of the approach of propagating Linux submodules and
> conditional compilation throughout the codebase.  I think it would be
> preferable
> to design a platform-agnostic interface at the OCaml/C boundary,
> implemented on
> the C side using platform-specific C files with minimal conditional
> compilation
> at the C level and no conditional compilation at the OCaml level.
>  Platforms
> that are unable to implement particular aspects of the interfaces should
> provide
> functions that raise exceptions.  Then all OCaml code compiles everywhere,
> and
> it one gets on each platform the maximum ability to run what is actually
> implemented.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111121/5aad5d68/attachment-0001.html>

From ocaml-core at googlegroups.com  Tue Nov 22 02:31:09 2011
From: ocaml-core at googlegroups.com (ocaml-core at googlegroups.com)
Date: Tue, 22 Nov 2011 02:31:09 +0000
Subject: Moderator's spam report for ocaml-core@googlegroups.com
Message-ID: <0016e6dee8dd9df84b04b2499845@google.com>


This message is being sent to you because you are a moderator of the group ocaml-core.

The following suspicious messages were sent to your group, but are being held in your moderation queue because they are classified as likely spam messages.

If you take no action, all the messages below will be discarded automatically as spam.

However, if you see any messages that are not spam below, you may approve them individually by going to:

http://groups.google.com/group/ocaml-core/pendmsg

Please do not mark this notification as spam; this is a service for group moderators. If you do not wish to receive these notifications in the future, you may change your preferences by going to:

http://groups.google.com/group/ocaml-core/manage_post


------- 1 of 2  -------
Subject: Hello Dear
>From: "Miss Grace John"<market at caesw.com>
Date: Nov 20 04:59AM +0100

Hello Dear,

With profound respect and humble submission, I beg to state the following few lines for your kind consideration, I hope you will spare some of your valuable minutes to read the following appeal with sympathetic mind. I must confess

Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=7237764601010923131

------- 2 of 2  -------
Subject: YOU EMAIL WAS SELECTED
>From: ICC Cricket World Cup 2011 Award Promo. <icccricket1 at london.com>
Date: Nov 21 05:01PM -0200

2011 ICC INTERNATIONAL WORLD CRICKET LOTTERY

UK Ltd Bel grave House 76,
Buckingham Palace Road,
London SW1W 9TQ, 
United Kingdom.

GOVERNMENT ACCREDITED LICENSED!!!
REGISTERED UNDER THE DATA PROTECTION ACT (Registration no: 0201GFRM-7)

Approve: http://groups.google.com/group/ocaml-core/pendmsg?view=full&pending_id=6616373214598839933


For more information about this message, please visit:
http://groups.google.com/support/bin/answer.py?hl=en&answer=165806



From ocaml-core+msgappr at googlegroups.com  Tue Nov 22 03:22:27 2011
From: ocaml-core+msgappr at googlegroups.com (ocaml-core)
Date: Tue, 22 Nov 2011 03:22:27 +0000
Subject: ocaml-core - Google Groups: Message Pending [{ILXP0rr1vY2bOioCcWEwAVAlRsKK9eh40}]
Message-ID: <pending-20171.5489.911070.607515@nyc-qws-r31.delacy.com>


A message has been sent to the ocaml-core group and is awaiting approval. We've included this message for your review.

The message requires moderation because the user does not have permission to post.

You can approve or reject this message online at:
http://groups.google.com/group/ocaml-core/pendmsg?hl=en_US

or

You can approve this message by replying to this email.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111122/4efa77f2/attachment-0001.html>
-------------- next part --------------
An embedded message was scrubbed...
From: unknown sender
Subject: Re: Making Async play better with others
Date: Mon, 21 Nov 2011 22:22:25 -0500
Size: 3126
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111122/4efa77f2/attachment-0001.mht>

From anil at recoil.org  Tue Nov 22 12:58:12 2011
From: anil at recoil.org (Anil Madhavapeddy)
Date: Tue, 22 Nov 2011 12:58:12 +0000
Subject: Making Async play better with others
In-Reply-To: <CADKNfhJ+tOuGKrKHNvpr0woe0NAk7wLYzEGMn9qk5M_JRT3FQA@mail.gmail.com>
References: <20111031142540.GZ26614@janestreet.com>
 <531e4eac-1d50-4432-8073-7b78ad7d80b0@o9g2000vbc.googlegroups.com>
 <20111122004427.GU7522@janestreet.com>
 <20171.5489.911070.607515@nyc-qws-r31.delacy.com>
 <CADKNfhJ+tOuGKrKHNvpr0woe0NAk7wLYzEGMn9qk5M_JRT3FQA@mail.gmail.com>
Message-ID: <20111122125812.GA14444@dark.recoil.org>


On Mon, Nov 21, 2011 at 10:35:36PM -0500, Yaron Minsky wrote:
> So I guess that would mean ripping the Linux_ext module out of Core, right?
> 
> While I agree about keeping conditional code localized and small, I don't
> quite see why the right answer is to have zero tolerance for conditional
> compilation of OCaml.  Imagine that you have different APIs on different
> platforms that require non-trivially different logic.  Now you're wedded to
> the idea of having non-trivial code that compiles conditionally.  The only
> question is, will you write that code in C or in OCaml?  Given that choice,
> I usually choose OCaml...

Ideally, there should be no platform-specific tests at all, but rather
feature-specific ones. The Core C bindings are pretty good about this, as
they already do #ifdef checks (e.g. CLOCK_PROCESS_CPUTIME_ID or HAS_IPV6).

Why not just build standalone OCaml modules which always implement the
same signature, but internally do some preprocessing for a particular
platform?  For instance, TCP_CORK is directly exposed at the moment, and
is quite Linux-specific.  Is this used for sendfile() or something else at
the moment?  The OCaml module (Async.Tcp_file?) should probably be a
sendfile()-like interface, and internally implement it in the FreeBSD
(where it is called TCP_NOPUSH) or Linux style.  Other platforms like
OpenBSD simply lack the flag, and would fallback to a portable but slower
read/write implementation that always works, but with the same semantics.

I like the fact that the OCaml Thread or Dynlink module simply isn't
present if the platform doesn't support threads, rather than there being a
dummy module that calls an exception whenever you invoke it.  It would be
particularly unhelped to find random exceptions being raised all over the
place just because some code used a small Linux-specific feature.

> Another way of dealing with some of these things is with runtime-tests that
> key-off of the platform, potentially using first-class modules.  i.e., you
> could have a value of the type:
> 
> val os : [ `Windows of (module Windows_specific_API)
>          | `Linux   of (module Linux_specific_API)
>          | `BSD     of (module BSD_specific_API)
>          | `Posix   of (module Posix_specific_API) ]

It would be great to have this to test for *features* at runtime, but is
there any use of knowing what OS you are running under? It just makes it
more difficult to port it to new platforms.

It gets even more messy when you consider that some features (Dynlink or 
high-res clocks) may only work reliably on mainstream architectures and
not so well on MIPS or Sparc64.  I'd prefer something like:

val clock: [ `Realtime of (module Realtime_clock)
           | `Posix of (module Posix_clock)
           ]

So the programmer would explicitly choose to upgrade to a better clock, at
the cost of some portability, but by default would get a Posix_clock.

Anil


From yminsky at gmail.com  Thu Nov 24 01:27:17 2011
From: yminsky at gmail.com (Yaron Minsky)
Date: Wed, 23 Nov 2011 20:27:17 -0500
Subject: ocaml-core - Google Groups: Message Pending [{ILXP0rr1vY2bOioCcWEwAVAlRsKK9eh40}]
In-Reply-To: <pending-20171.5489.911070.607515@nyc-qws-r31.delacy.com>
References: <pending-20171.5489.911070.607515@nyc-qws-r31.delacy.com>
Message-ID: <CADKNfhLyya_K6iCwORo4-TGXC5ouzQVQVa=fwP4zZ_cEvfG9YA@mail.gmail.com>

On Mon, Nov 21, 2011 at 10:22 PM, ocaml-core <
ocaml-core+msgappr at googlegroups.com> wrote:

>   A message has been sent to the ocaml-core<http://groups.google.com/group/ocaml-core?hl=en_US>group and is awaiting approval. We've included this message for your review.
>
> The message requires moderation because the user does not have permission
> to post.
>
> You can approve or reject<http://groups.google.com/group/ocaml-core/pendmsg?hl=en_US>this message or you can approve this message by replying to this email.
>  [image: Visit Google Groups]
>
> Start <https://groups.google.com/groups/create?hl=en_US&src=email> your
> own group, visit <http://groups.google.com/support/?hl=en_US&src=email>the help center, or
> report <https://groups.google.com/groups/abuse?hl=en_US&src=email> abuse.
>
>
> ---------- Forwarded message ----------
> From: Stephen Weeks <sweeks at janestreet.com>
> To: Yaron Minsky <yminsky at janestreet.com>
> Date: Mon, 21 Nov 2011 22:22:25 -0500
> Subject: Re: Making Async play better with others
>
> > Stephen, what do you think about Markus' proposal for how to organize
> > it?
>
> I am highly skeptical of the approach of propagating Linux submodules and
> conditional compilation throughout the codebase.  I think it would be
> preferable
> to design a platform-agnostic interface at the OCaml/C boundary,
> implemented on
> the C side using platform-specific C files with minimal conditional
> compilation
> at the C level and no conditional compilation at the OCaml level.
>  Platforms
> that are unable to implement particular aspects of the interfaces should
> provide
> functions that raise exceptions.  Then all OCaml code compiles everywhere,
> and
> it one gets on each platform the maximum ability to run what is actually
> implemented.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/core/attachments/20111123/9eea3cce/attachment-0001.html>

