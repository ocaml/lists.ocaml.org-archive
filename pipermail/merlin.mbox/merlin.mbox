From sweeks at janestreet.com  Sat Aug 24 01:48:23 2013
From: sweeks at janestreet.com (Stephen Weeks)
Date: Fri, 23 Aug 2013 19:48:23 -0400
Subject: [Merlin-discuss] further integration of merlin at Jane Street
Message-ID: <CAPYVAiJAqhBM8-6qWLV2VSJ6-FaH6TFvcCWG=tyZ3DY86NRJmw@mail.gmail.com>

Here are some thoughts on further integrating merlin into the Jane
Street environment.  I preface this by saying I don't understand the
current merlin/emacs integration, so feel free to elucidate me.

To state what I think is a goal:

  A programmer should be able to go to any position in any OCaml
  source file on their machine, press a button, and autocomplete at
  that point (or be told that autocompletion isn't possible because
  the necessary libraries haven't been compiled).

The first thing I think this implies is that we need to keep a merlin
installed for each ocaml that we install (i.e. /janelibs/ocaml-*/).
This is needed so that the merlin is compatible with the source and
object files for the project.  The merlin editor integration can
determine the correct merlin to run by looking at the .omake-ocaml-bin
at the root of the repo as generated by the build system.  Presumably
our deployment of merlin would put "ocamlmerlin" and related
executables in the same bin as ocamlc, ocamlopt, etc., or in some
fixed directory relative to that bin.

Next, we need merlin to understand the libraries that are in scope in
a given directory.  I think this is a fairly straightforward matter of
having jenga output a .merlin for each directory that contains OCaml
files.  That .merlin would be complete, i.e. not require any recursion
up the directory tree.  The contents of the .merlin would be the
OCAML_LIBRARIES plus the libraries as recursively required by
OCAML_INTERFACES (i.e. whatever the build system is already making
available when compiling source files in that directory).

Next, I speculate that for performance reasons, we need a merlin
server to cache information so that it can quickly reconstruct the
environment at a given program point.  It might cache:

  * the environment for each library
  * the environment that is the union of libraries imported for a
    directory
  * even more, perhaps the imported libraries plus all of the files in
    a directory

A natural architecture for this is to have a merlin server process for
each project (i.e. per jengaroot).  When one first visits a project,
the merlin process would be created.  As one queries for
autocompletion in files in the project, that merlin process answers
the queries, using and updating its cache.

To support multiple simultaneous projects, one needs to manage a set
of merlin processes (with possibly different merlin versions).  It is
unclear whether the process management should be written separately
for each editor, or whether we should write a "meta-merlin" in OCaml
that presents a unified command-line interface that could then be used
by any editor.  At Jane Street, we need to support emacs and vim, so
there is at least some advantage to a meta-merlin written in OCaml.
But if the process management is simple enough in each editor, then
perhaps an OCaml meta-merlin isn't worth it.

We already have an analog of meta-merlin at Jane Street -- it's called
omake-server, which manages a collection of per-project build
processes.  I chatted with Pete about the possibility of implementing
meta-merlin.  Roughly, we think that having ocaml-server has worked
out well, although there are a number of ways in which the
implementation is too complicated.  So, if we write meta-merlin, we'd
like to start with a new codebase, with heavy involvement from Pete to
avoid some of the design mistakes of omake-server.


That's probably enough for now.  Hopefully people who understand the
merlin architecture can speak up so we can all understand it clearly,
and we can then decide how to proceed to get a merlin that works
smoothly for all Jane Street devs.

From fbour at janestreet.com  Tue Aug 27 12:01:13 2013
From: fbour at janestreet.com (Frederic Bour)
Date: Tue, 27 Aug 2013 11:01:13 +0100
Subject: [Merlin-discuss] further integration of merlin at Jane Street
In-Reply-To: <CAPYVAiJAqhBM8-6qWLV2VSJ6-FaH6TFvcCWG=tyZ3DY86NRJmw@mail.gmail.com>
References: <CAPYVAiJAqhBM8-6qWLV2VSJ6-FaH6TFvcCWG=tyZ3DY86NRJmw@mail.gmail.com>
Message-ID: <CAK2=ngA_kE_7QMFYscXqKZ3n2Jhbh_rJvViv5qstxmmX+FzDqg@mail.gmail.com>

> Here are some thoughts on further integrating merlin into the Jane
> Street environment.  I preface this by saying I don't understand the
> current merlin/emacs integration, so feel free to elucidate me.

More documentation should be coming soon.

> To state what I think is a goal:
>
>   A programmer should be able to go to any position in any OCaml
>   source file on their machine, press a button, and autocomplete at
>   that point (or be told that autocompletion isn't possible because
>   the necessary libraries haven't been compiled).
>
> The first thing I think this implies is that we need to keep a merlin
> installed for each ocaml that we install (i.e. /janelibs/ocaml-*/).
> This is needed so that the merlin is compatible with the source and
> object files for the project.  The merlin editor integration can
> determine the correct merlin to run by looking at the .omake-ocaml-bin
> at the root of the repo as generated by the build system.  Presumably
> our deployment of merlin would put "ocamlmerlin" and related
> executables in the same bin as ocamlc, ocamlopt, etc., or in some
> fixed directory relative to that bin.
>

Having one merlin per ocaml version seems to be the way to go.

We have been discussing this issue on
[https://github.com/def-lkb/merlin/issues/44]: we could support
different versions, by always using the latest typer, converting
cmi/cmt files, and relying on backward compatibility.

But this approach is likely to be fragile, at least at the beginning,
and adds a transformation pass that may need further caching.

To select the right merlin binary, we could make the build system
generate a symlink to the executable at the same time it produces the
".merlin" file.

> Next, we need merlin to understand the libraries that are in scope in
> a given directory.  I think this is a fairly straightforward matter of
> having jenga output a .merlin for each directory that contains OCaml
> files.  That .merlin would be complete, i.e. not require any recursion
> up the directory tree.  The contents of the .merlin would be the
> OCAML_LIBRARIES plus the libraries as recursively required by
> OCAML_INTERFACES (i.e. whatever the build system is already making
> available when compiling source files in that directory).

Yes.

> Next, I speculate that for performance reasons, we need a merlin
> server to cache information so that it can quickly reconstruct the
> environment at a given program point.  It might cache:
>
>   * the environment for each library
>   * the environment that is the union of libraries imported for a
>     directory
>   * even more, perhaps the imported libraries plus all of the files in
>     a directory
>
> A natural architecture for this is to have a merlin server process for
> each project (i.e. per jengaroot).  When one first visits a project,
> the merlin process would be created.  As one queries for
> autocompletion in files in the project, that merlin process answers
> the queries, using and updating its cache.

Did you observe slowdown for some workload?

In the current version, cmi files are cached when first read
(inheriting the behavior of ocaml compiler), and when receiving a
"SIGUSR1" merlin reload all cmi files having newer mtime. This signal
is sent to merlin by the build-system when a build finishes.
This is fast enough that it don't feel slow at all for my particular
workflow (this is subjective of course).

The slowest thing is retyping the current buffer, where most of the
time is spent on "open Core.Std". This has been optimized in the
experimental branch, which we plan to merge soon.

> To support multiple simultaneous projects, one needs to manage a set
> of merlin processes (with possibly different merlin versions).  It is
> unclear whether the process management should be written separately
> for each editor, or whether we should write a "meta-merlin" in OCaml
> that presents a unified command-line interface that could then be used
> by any editor.  At Jane Street, we need to support emacs and vim, so
> there is at least some advantage to a meta-merlin written in OCaml.
> But if the process management is simple enough in each editor, then
> perhaps an OCaml meta-merlin isn't worth it.
>
> We already have an analog of meta-merlin at Jane Street -- it's called
> omake-server, which manages a collection of per-project build
> processes.  I chatted with Pete about the possibility of implementing
> meta-merlin.  Roughly, we think that having ocaml-server has worked
> out well, although there are a number of ways in which the
> implementation is too complicated.  So, if we write meta-merlin, we'd
> like to start with a new codebase, with heavy involvement from Pete to
> avoid some of the design mistakes of omake-server.
>
>
> That's probably enough for now.  Hopefully people who understand the
> merlin architecture can speak up so we can all understand it clearly,
> and we can then decide how to proceed to get a merlin that works
> smoothly for all Jane Street devs.

The current implementation can make use of multiple processes (managed
by the editor). But the setup you suggest seems much more complicated,
I hardly see the benefits.
Is this only for performance reasons?


Fr?d?ric

From thomas.refis at gmail.com  Tue Nov 19 12:06:25 2013
From: thomas.refis at gmail.com (Thomas Refis)
Date: Tue, 19 Nov 2013 12:06:25 +0100
Subject: [Merlin-discuss] Merlin's configuration
Message-ID: <CAJ_epFNhw7LJ3ip3LtVYT9JpqnAMWz3PwN7hvs-aA5j-W-fJHg@mail.gmail.com>

Hi!

There have been some changes recently on merlin's configuration, and
we're also considering some more heavy changes on the syntax for the
.merlin file.  We'd like to have people's input on this.

   * * *

First we've added two new "directives": CMT and CMI, these are
refinements of the "B" directive, which was used to add directories to
the build path. The need for this is primarily felt at JaneStreet.

At janestreet, there is one big repository including, among others,
core and async.  Every source directory is also a build directory but
the cmi for packed modules are afterwards copied to a particular lib/
directory at the root of this repo.
You then have two options to set-up your build path in merlin: add
only lib/, or add every source directory.
The first option is unsatisfactory since you won't have access to cmt
files (that implies no fancy source browsing), but the second is also
problematic.  Indeed there is a lot of module name conflicts, and
there's no predictable way to tell which one will be choosen. That
results in the frequent presence of the error message "Module Foo and
Bar make inconsistent assumptions over interface Baz".

With the new directives, one can now add lib/ to the "CMI" dirs (i.e.
the buildpath) and every other directory to the "CMT" dirs.

On simpler setups, one can of course still simply use "B".

NB: This is not on the opam package yet, only on the git repository.
We should however make a new release soon (in the next two weeks I'd
say).

   * * *

We are considering moving to a more expressive syntax for the .merlin
files, the goal is to be more precise about which files/directories
require which packages/compiler flags and which do not.
There is two different paths we can follow here:

  The first one is to adopt the syntax ocamlbuild uses in its _tags
file. This should be precise enough to express everything one would
ever need. Also it has the advantage of being a syntax everyone
already knows, and one can also imagine that at some point in the
future, merlin would be able to understand (at least partially) _tags
files whenever there is no .merlin.

  The second one, a bit more ambitious, consist of finding a way to
delegate the work to external tools. That is: merlin would call an
(arbitrary) external process, giving it the path of the file currently
under edition. And that process would then output merlin's
configuration.
That way, people could first have the configuration file in their
language of choice, or call a tool to generate a configuration from an
_tags, _oasis, ?, but would also be able to have merlin integrated in
their build process. For example people using a build system running
in "daemon" mode (jenga, OMake) could then feed it the path of the
file being edited, and would then receive a list of the dependencies
of that file, as well as compiler flags required.

We would like to know if you think either of this approach is useful,
or interesting... or not.

   * * *

That's about it.

Cheers,

Frederic and Thomas.

From sylvain at le-gall.net  Tue Nov 19 12:26:30 2013
From: sylvain at le-gall.net (Sylvain Le Gall)
Date: Tue, 19 Nov 2013 12:26:30 +0100
Subject: [Merlin-discuss] Merlin's configuration
In-Reply-To: <CAJ_epFNhw7LJ3ip3LtVYT9JpqnAMWz3PwN7hvs-aA5j-W-fJHg@mail.gmail.com>
References: <CAJ_epFNhw7LJ3ip3LtVYT9JpqnAMWz3PwN7hvs-aA5j-W-fJHg@mail.gmail.com>
Message-ID: <CAOCAUGOi1vSQQfVyp=QXF8VDse_h+wtt=hhT6PwOJEJiZBG0fw@mail.gmail.com>

Hello,

I will be more than happy to help you on the second point to integrate
an external process that can ask directly oasis to generate a
configuration. I can help you on this project and even help you write
the extension.

Regards
Sylvain



2013/11/19 Thomas Refis <thomas.refis at gmail.com>:
> Hi!
>
> There have been some changes recently on merlin's configuration, and
> we're also considering some more heavy changes on the syntax for the
> .merlin file.  We'd like to have people's input on this.
>
>    * * *
>
> First we've added two new "directives": CMT and CMI, these are
> refinements of the "B" directive, which was used to add directories to
> the build path. The need for this is primarily felt at JaneStreet.
>
> At janestreet, there is one big repository including, among others,
> core and async.  Every source directory is also a build directory but
> the cmi for packed modules are afterwards copied to a particular lib/
> directory at the root of this repo.
> You then have two options to set-up your build path in merlin: add
> only lib/, or add every source directory.
> The first option is unsatisfactory since you won't have access to cmt
> files (that implies no fancy source browsing), but the second is also
> problematic.  Indeed there is a lot of module name conflicts, and
> there's no predictable way to tell which one will be choosen. That
> results in the frequent presence of the error message "Module Foo and
> Bar make inconsistent assumptions over interface Baz".
>
> With the new directives, one can now add lib/ to the "CMI" dirs (i.e.
> the buildpath) and every other directory to the "CMT" dirs.
>
> On simpler setups, one can of course still simply use "B".
>
> NB: This is not on the opam package yet, only on the git repository.
> We should however make a new release soon (in the next two weeks I'd
> say).
>
>    * * *
>
> We are considering moving to a more expressive syntax for the .merlin
> files, the goal is to be more precise about which files/directories
> require which packages/compiler flags and which do not.
> There is two different paths we can follow here:
>
>   The first one is to adopt the syntax ocamlbuild uses in its _tags
> file. This should be precise enough to express everything one would
> ever need. Also it has the advantage of being a syntax everyone
> already knows, and one can also imagine that at some point in the
> future, merlin would be able to understand (at least partially) _tags
> files whenever there is no .merlin.
>
>   The second one, a bit more ambitious, consist of finding a way to
> delegate the work to external tools. That is: merlin would call an
> (arbitrary) external process, giving it the path of the file currently
> under edition. And that process would then output merlin's
> configuration.
> That way, people could first have the configuration file in their
> language of choice, or call a tool to generate a configuration from an
> _tags, _oasis, ?, but would also be able to have merlin integrated in
> their build process. For example people using a build system running
> in "daemon" mode (jenga, OMake) could then feed it the path of the
> file being edited, and would then receive a list of the dependencies
> of that file, as well as compiler flags required.
>
> We would like to know if you think either of this approach is useful,
> or interesting... or not.
>
>    * * *
>
> That's about it.
>
> Cheers,
>
> Frederic and Thomas.
> _______________________________________________
> Merlin-discuss mailing list
> Merlin-discuss at lists.forge.ocamlcore.org
> https://lists.ocamlcore.org/cgi-bin/listinfo/merlin-discuss

From gabriel.scherer at gmail.com  Tue Nov 19 16:57:01 2013
From: gabriel.scherer at gmail.com (Gabriel Scherer)
Date: Tue, 19 Nov 2013 16:57:01 +0100
Subject: [Merlin-discuss] Merlin's configuration
In-Reply-To: <CAOCAUGOi1vSQQfVyp=QXF8VDse_h+wtt=hhT6PwOJEJiZBG0fw@mail.gmail.com>
References: <CAJ_epFNhw7LJ3ip3LtVYT9JpqnAMWz3PwN7hvs-aA5j-W-fJHg@mail.gmail.com>
	<CAOCAUGOi1vSQQfVyp=QXF8VDse_h+wtt=hhT6PwOJEJiZBG0fw@mail.gmail.com>
Message-ID: <CAPFanBF+b+6XHw1Sxe3uvFPrgF2RN_YJUkRrSONzk7jSayfJFg@mail.gmail.com>

Re. the second point, I think trying to reimplement the build system's
job in Merlin is a dead end. You must defer to the existing build
system(s) to provide you this information.

ocamlbuild has a -show-tags option that does a fair bit of what you
want (but maybe not all: it reads _tags but does not provide as much
information as computed dynamically by the actual compilation rules;
and it returns an unspecified ocamlbuild pretty-printing format that
was planned for humans, not tools, to read). More can be implemented.

.merlin has always been a bit of a hack, duplicating information that
was already known by the build logic (plus possibly some
merlin-specific configuration that has its place). We should be
working with tool authors to *reduce* it, not extend it.

On Tue, Nov 19, 2013 at 12:26 PM, Sylvain Le Gall <sylvain at le-gall.net> wrote:
> Hello,
>
> I will be more than happy to help you on the second point to integrate
> an external process that can ask directly oasis to generate a
> configuration. I can help you on this project and even help you write
> the extension.
>
> Regards
> Sylvain
>
>
>
> 2013/11/19 Thomas Refis <thomas.refis at gmail.com>:
>> Hi!
>>
>> There have been some changes recently on merlin's configuration, and
>> we're also considering some more heavy changes on the syntax for the
>> .merlin file.  We'd like to have people's input on this.
>>
>>    * * *
>>
>> First we've added two new "directives": CMT and CMI, these are
>> refinements of the "B" directive, which was used to add directories to
>> the build path. The need for this is primarily felt at JaneStreet.
>>
>> At janestreet, there is one big repository including, among others,
>> core and async.  Every source directory is also a build directory but
>> the cmi for packed modules are afterwards copied to a particular lib/
>> directory at the root of this repo.
>> You then have two options to set-up your build path in merlin: add
>> only lib/, or add every source directory.
>> The first option is unsatisfactory since you won't have access to cmt
>> files (that implies no fancy source browsing), but the second is also
>> problematic.  Indeed there is a lot of module name conflicts, and
>> there's no predictable way to tell which one will be choosen. That
>> results in the frequent presence of the error message "Module Foo and
>> Bar make inconsistent assumptions over interface Baz".
>>
>> With the new directives, one can now add lib/ to the "CMI" dirs (i.e.
>> the buildpath) and every other directory to the "CMT" dirs.
>>
>> On simpler setups, one can of course still simply use "B".
>>
>> NB: This is not on the opam package yet, only on the git repository.
>> We should however make a new release soon (in the next two weeks I'd
>> say).
>>
>>    * * *
>>
>> We are considering moving to a more expressive syntax for the .merlin
>> files, the goal is to be more precise about which files/directories
>> require which packages/compiler flags and which do not.
>> There is two different paths we can follow here:
>>
>>   The first one is to adopt the syntax ocamlbuild uses in its _tags
>> file. This should be precise enough to express everything one would
>> ever need. Also it has the advantage of being a syntax everyone
>> already knows, and one can also imagine that at some point in the
>> future, merlin would be able to understand (at least partially) _tags
>> files whenever there is no .merlin.
>>
>>   The second one, a bit more ambitious, consist of finding a way to
>> delegate the work to external tools. That is: merlin would call an
>> (arbitrary) external process, giving it the path of the file currently
>> under edition. And that process would then output merlin's
>> configuration.
>> That way, people could first have the configuration file in their
>> language of choice, or call a tool to generate a configuration from an
>> _tags, _oasis, ?, but would also be able to have merlin integrated in
>> their build process. For example people using a build system running
>> in "daemon" mode (jenga, OMake) could then feed it the path of the
>> file being edited, and would then receive a list of the dependencies
>> of that file, as well as compiler flags required.
>>
>> We would like to know if you think either of this approach is useful,
>> or interesting... or not.
>>
>>    * * *
>>
>> That's about it.
>>
>> Cheers,
>>
>> Frederic and Thomas.
>> _______________________________________________
>> Merlin-discuss mailing list
>> Merlin-discuss at lists.forge.ocamlcore.org
>> https://lists.ocamlcore.org/cgi-bin/listinfo/merlin-discuss
> _______________________________________________
> Merlin-discuss mailing list
> Merlin-discuss at lists.forge.ocamlcore.org
> https://lists.ocamlcore.org/cgi-bin/listinfo/merlin-discuss

From sylvain at le-gall.net  Tue Nov 19 17:26:58 2013
From: sylvain at le-gall.net (Sylvain Le Gall)
Date: Tue, 19 Nov 2013 17:26:58 +0100
Subject: [Merlin-discuss] Merlin's configuration
In-Reply-To: <CAPFanBF+b+6XHw1Sxe3uvFPrgF2RN_YJUkRrSONzk7jSayfJFg@mail.gmail.com>
References: <CAJ_epFNhw7LJ3ip3LtVYT9JpqnAMWz3PwN7hvs-aA5j-W-fJHg@mail.gmail.com>
	<CAOCAUGOi1vSQQfVyp=QXF8VDse_h+wtt=hhT6PwOJEJiZBG0fw@mail.gmail.com>
	<CAPFanBF+b+6XHw1Sxe3uvFPrgF2RN_YJUkRrSONzk7jSayfJFg@mail.gmail.com>
Message-ID: <CAOCAUGO55TjRdMwSsvQGDegR80YPb7yxEfbmhK305w3Z5MUJMA@mail.gmail.com>

In OASIS we have a function that automatically generates _tags from
_oasis, generating a somehow similar tool-readable output in a plugin
will be super easy for OASIS.

We can also fine tune a lot for Merlin. We can implement new fields to
embed most of the configuration needed. If we get it right -- and if
you want -- I think it may be possible to replace .merlin by a few
fields in _oasis and reuse information from this file.

2013/11/19 Gabriel Scherer <gabriel.scherer at gmail.com>:
> Re. the second point, I think trying to reimplement the build system's
> job in Merlin is a dead end. You must defer to the existing build
> system(s) to provide you this information.
>
> ocamlbuild has a -show-tags option that does a fair bit of what you
> want (but maybe not all: it reads _tags but does not provide as much
> information as computed dynamically by the actual compilation rules;
> and it returns an unspecified ocamlbuild pretty-printing format that
> was planned for humans, not tools, to read). More can be implemented.
>
> .merlin has always been a bit of a hack, duplicating information that
> was already known by the build logic (plus possibly some
> merlin-specific configuration that has its place). We should be
> working with tool authors to *reduce* it, not extend it.
>
> On Tue, Nov 19, 2013 at 12:26 PM, Sylvain Le Gall <sylvain at le-gall.net> wrote:
>> Hello,
>>
>> I will be more than happy to help you on the second point to integrate
>> an external process that can ask directly oasis to generate a
>> configuration. I can help you on this project and even help you write
>> the extension.
>>
>> Regards
>> Sylvain
>>
>>
>>
>> 2013/11/19 Thomas Refis <thomas.refis at gmail.com>:
>>> Hi!
>>>
>>> There have been some changes recently on merlin's configuration, and
>>> we're also considering some more heavy changes on the syntax for the
>>> .merlin file.  We'd like to have people's input on this.
>>>
>>>    * * *
>>>
>>> First we've added two new "directives": CMT and CMI, these are
>>> refinements of the "B" directive, which was used to add directories to
>>> the build path. The need for this is primarily felt at JaneStreet.
>>>
>>> At janestreet, there is one big repository including, among others,
>>> core and async.  Every source directory is also a build directory but
>>> the cmi for packed modules are afterwards copied to a particular lib/
>>> directory at the root of this repo.
>>> You then have two options to set-up your build path in merlin: add
>>> only lib/, or add every source directory.
>>> The first option is unsatisfactory since you won't have access to cmt
>>> files (that implies no fancy source browsing), but the second is also
>>> problematic.  Indeed there is a lot of module name conflicts, and
>>> there's no predictable way to tell which one will be choosen. That
>>> results in the frequent presence of the error message "Module Foo and
>>> Bar make inconsistent assumptions over interface Baz".
>>>
>>> With the new directives, one can now add lib/ to the "CMI" dirs (i.e.
>>> the buildpath) and every other directory to the "CMT" dirs.
>>>
>>> On simpler setups, one can of course still simply use "B".
>>>
>>> NB: This is not on the opam package yet, only on the git repository.
>>> We should however make a new release soon (in the next two weeks I'd
>>> say).
>>>
>>>    * * *
>>>
>>> We are considering moving to a more expressive syntax for the .merlin
>>> files, the goal is to be more precise about which files/directories
>>> require which packages/compiler flags and which do not.
>>> There is two different paths we can follow here:
>>>
>>>   The first one is to adopt the syntax ocamlbuild uses in its _tags
>>> file. This should be precise enough to express everything one would
>>> ever need. Also it has the advantage of being a syntax everyone
>>> already knows, and one can also imagine that at some point in the
>>> future, merlin would be able to understand (at least partially) _tags
>>> files whenever there is no .merlin.
>>>
>>>   The second one, a bit more ambitious, consist of finding a way to
>>> delegate the work to external tools. That is: merlin would call an
>>> (arbitrary) external process, giving it the path of the file currently
>>> under edition. And that process would then output merlin's
>>> configuration.
>>> That way, people could first have the configuration file in their
>>> language of choice, or call a tool to generate a configuration from an
>>> _tags, _oasis, ?, but would also be able to have merlin integrated in
>>> their build process. For example people using a build system running
>>> in "daemon" mode (jenga, OMake) could then feed it the path of the
>>> file being edited, and would then receive a list of the dependencies
>>> of that file, as well as compiler flags required.
>>>
>>> We would like to know if you think either of this approach is useful,
>>> or interesting... or not.
>>>
>>>    * * *
>>>
>>> That's about it.
>>>
>>> Cheers,
>>>
>>> Frederic and Thomas.
>>> _______________________________________________
>>> Merlin-discuss mailing list
>>> Merlin-discuss at lists.forge.ocamlcore.org
>>> https://lists.ocamlcore.org/cgi-bin/listinfo/merlin-discuss
>> _______________________________________________
>> Merlin-discuss mailing list
>> Merlin-discuss at lists.forge.ocamlcore.org
>> https://lists.ocamlcore.org/cgi-bin/listinfo/merlin-discuss

From rjames at janestreet.com  Tue Nov 19 21:39:58 2013
From: rjames at janestreet.com (Roshan James)
Date: Tue, 19 Nov 2013 15:39:58 -0500
Subject: [Merlin-discuss] Merlin's configuration
In-Reply-To: <CAOCAUGO55TjRdMwSsvQGDegR80YPb7yxEfbmhK305w3Z5MUJMA@mail.gmail.com>
References: <CAJ_epFNhw7LJ3ip3LtVYT9JpqnAMWz3PwN7hvs-aA5j-W-fJHg@mail.gmail.com>
	<CAOCAUGOi1vSQQfVyp=QXF8VDse_h+wtt=hhT6PwOJEJiZBG0fw@mail.gmail.com>
	<CAPFanBF+b+6XHw1Sxe3uvFPrgF2RN_YJUkRrSONzk7jSayfJFg@mail.gmail.com>
	<CAOCAUGO55TjRdMwSsvQGDegR80YPb7yxEfbmhK305w3Z5MUJMA@mail.gmail.com>
Message-ID: <CAN_VbetnEV9VJXZsqU7qbZa-321jR87B5qiJx=04_3kzzOo9Dw@mail.gmail.com>

A running merlin instance can compute, for each .ml file that one
visits:

  1. the type environment in scope at the top of the file
  2. the preprocessors used on the file
  3. the location of the .cmt files for modules in the environment

Merlin accomplishes this via .merlin files, which give this
information at the granularity of a directory (all files in a
directory have the same toplevel environment).

We propose:

  A. There should be a way to state this information per file.
  B. The merlin command should use the same syntax as an ocamlopt
     call for expressing the information.
  C. The information from the command-line in B also be used to
     determine other aspects of type checking, e.g. warnings.
  D. An auxiliary file (.merlin) be used for expressing only things
     that the ocamlopt call doesn't express, e.g. (3).
  E. A running merlin process should accept a command that updates
     this information.
  F. A running merlin process should accept a command that tells it
     when a .cmt or .cmi changes, and should update its internal
     cache.

The thinking behind using an ocamlopt call as the mechanism of
expression is that it is already present in all build systems,
and is thus very likely to reflect what the build system is
actually doing. Here is an example:

ocamlopt.opt -I +camlp4 -thread -w @a-4-7-29 -strict-sequence
-bin-annot -inline 20 -nodynlink -g
-pp 'camlp4o ../../lib/pa_type_conv/pa_type_conv.cmo
../../lib/pa_sexp_conv/pa_sexp_conv.cmo
../../lib/pa_bin_prot/pa_bin_prot.cmo
../../lib/pa_fields_conv/pa_fields_conv.cmo
../../lib/pa_variants_conv/pa_variants_conv.cmo
../../lib/pa_compare/pa_compare.cmo ../../lib/pa_pipebang/pa_pipebang.cmo
../../lib/pa_here/pa_here.cmo
../../lib/pa_custom_printf/pa_custom_printf.cmo
../../lib/pa_test/pa_test.cmo ../../lib/pa_enumerate/pa_enumerate.cmo
../../lib/pa_ounit/pa_ounit.cmo -pa-ounit-lib bins'
-I ../../lib/pa_ounit_lib -I ../../lib/bin_prot -I ../../lib/fieldslib
-I ../../lib/sexplib -I ../../lib/variantslib -I ../../lib/core_kernel
-I ../../lib/core -I ../../lib/textutils -I ../../lib/async_core
-I ../../lib/async_extra -I ../../lib/async_unix -I ../../lib/pcre
-I ../../lib/core_extended -I ../../lib/async -I ../../lib/async_extended
-I ../../lib/varg -I ../../lib/sh -I ../../lib/jane_extended -c z.ml

In more detail:

(1) This command specifies the exact namespace visible to each
.ml file. From each include path one can collect the relevant
.cmi files to construct the namespace visible to the file being
compiled.

(2) Any additional compiler flags relevant to compiling the .ml
files should be available here. For example, it would be valuable
for us if merlin flagged the right warnings are errors.

(3) Every build system already knows how to generate such
compilation commands. Merlin should be able to parse this
relatively easily given its roots in the ocaml toplevel.
Further, merlin can ignore switches it doesn't understand for now
and silently add more support in the future without needing
everyone to change their build scripts.

(4) The missing information in the compilation command includes
where to find the .cmt files of each library and the mapping of
preprocessors to merlin's EXT specifications. These can be
communicated in a .merlin file. For example:

EXT binprot  ../../lib/pa_bin_prot/pa_bin_prot.cmo
EXT sexp     ../../lib/pa_bin_prot/pa_bin_prot.cmo
EXT here ../../lib/pa_here/pa_here.cmo
CMT core_kernel ../../base/core/kernel/lib

i.e. if a call to camlopt mentions core_kernel, then merlin can
use this mapping to find the [.cmt] files.  This mapping can be
specified either in each local directory or once at the root of
the repo.

(5) How should the compilation command be communicated to merlin?
There are at least three approaches that one can think of, of
which we think the third has several advantages:

(i) Write things into files: As you proposed, we can write out
such compilation commands into a file. If any .ml specific
customization is required, it will be captured in this format. If
all the files of a dir are compiled the same way, one need
specify only one compilation command with some glob patterns.

(ii) Have merlin ask the build system: As you proposed, we can
specify a command that merlin calls, that returns the info in (i)
to merlin.

(iii) Have the build system notify merlin: Merlin can provide a
command that the build system calls to communicate the ocamlopt
compilation command to the current running instance of
merlin. This has the advantage that merlin gets updates whenever
the build system needs to recompile files. Further, merlin can be
notified of successful build completion of each .ml file.

(6) Finally, one property worth thinking about is how to make
merlin provide "best effort" completion: Consider the situation
where one is working on both an exe and a lib that it depends
on. During development there maybe some .ml files in the lib that
compile and some that don't. The ones that don't yet compile
prevent the lib.cmi file from being built/updated. In such cases,
it would be nice if merlin can still provide the latest
completion information for the .ml files of the lib that are
compiling.

Roshan



On Tue, Nov 19, 2013 at 11:26 AM, Sylvain Le Gall <sylvain at le-gall.net>wrote:

> In OASIS we have a function that automatically generates _tags from
> _oasis, generating a somehow similar tool-readable output in a plugin
> will be super easy for OASIS.
>
> We can also fine tune a lot for Merlin. We can implement new fields to
> embed most of the configuration needed. If we get it right -- and if
> you want -- I think it may be possible to replace .merlin by a few
> fields in _oasis and reuse information from this file.
>
> 2013/11/19 Gabriel Scherer <gabriel.scherer at gmail.com>:
> > Re. the second point, I think trying to reimplement the build system's
> > job in Merlin is a dead end. You must defer to the existing build
> > system(s) to provide you this information.
> >
> > ocamlbuild has a -show-tags option that does a fair bit of what you
> > want (but maybe not all: it reads _tags but does not provide as much
> > information as computed dynamically by the actual compilation rules;
> > and it returns an unspecified ocamlbuild pretty-printing format that
> > was planned for humans, not tools, to read). More can be implemented.
> >
> > .merlin has always been a bit of a hack, duplicating information that
> > was already known by the build logic (plus possibly some
> > merlin-specific configuration that has its place). We should be
> > working with tool authors to *reduce* it, not extend it.
> >
> > On Tue, Nov 19, 2013 at 12:26 PM, Sylvain Le Gall <sylvain at le-gall.net>
> wrote:
> >> Hello,
> >>
> >> I will be more than happy to help you on the second point to integrate
> >> an external process that can ask directly oasis to generate a
> >> configuration. I can help you on this project and even help you write
> >> the extension.
> >>
> >> Regards
> >> Sylvain
> >>
> >>
> >>
> >> 2013/11/19 Thomas Refis <thomas.refis at gmail.com>:
> >>> Hi!
> >>>
> >>> There have been some changes recently on merlin's configuration, and
> >>> we're also considering some more heavy changes on the syntax for the
> >>> .merlin file.  We'd like to have people's input on this.
> >>>
> >>>    * * *
> >>>
> >>> First we've added two new "directives": CMT and CMI, these are
> >>> refinements of the "B" directive, which was used to add directories to
> >>> the build path. The need for this is primarily felt at JaneStreet.
> >>>
> >>> At janestreet, there is one big repository including, among others,
> >>> core and async.  Every source directory is also a build directory but
> >>> the cmi for packed modules are afterwards copied to a particular lib/
> >>> directory at the root of this repo.
> >>> You then have two options to set-up your build path in merlin: add
> >>> only lib/, or add every source directory.
> >>> The first option is unsatisfactory since you won't have access to cmt
> >>> files (that implies no fancy source browsing), but the second is also
> >>> problematic.  Indeed there is a lot of module name conflicts, and
> >>> there's no predictable way to tell which one will be choosen. That
> >>> results in the frequent presence of the error message "Module Foo and
> >>> Bar make inconsistent assumptions over interface Baz".
> >>>
> >>> With the new directives, one can now add lib/ to the "CMI" dirs (i.e.
> >>> the buildpath) and every other directory to the "CMT" dirs.
> >>>
> >>> On simpler setups, one can of course still simply use "B".
> >>>
> >>> NB: This is not on the opam package yet, only on the git repository.
> >>> We should however make a new release soon (in the next two weeks I'd
> >>> say).
> >>>
> >>>    * * *
> >>>
> >>> We are considering moving to a more expressive syntax for the .merlin
> >>> files, the goal is to be more precise about which files/directories
> >>> require which packages/compiler flags and which do not.
> >>> There is two different paths we can follow here:
> >>>
> >>>   The first one is to adopt the syntax ocamlbuild uses in its _tags
> >>> file. This should be precise enough to express everything one would
> >>> ever need. Also it has the advantage of being a syntax everyone
> >>> already knows, and one can also imagine that at some point in the
> >>> future, merlin would be able to understand (at least partially) _tags
> >>> files whenever there is no .merlin.
> >>>
> >>>   The second one, a bit more ambitious, consist of finding a way to
> >>> delegate the work to external tools. That is: merlin would call an
> >>> (arbitrary) external process, giving it the path of the file currently
> >>> under edition. And that process would then output merlin's
> >>> configuration.
> >>> That way, people could first have the configuration file in their
> >>> language of choice, or call a tool to generate a configuration from an
> >>> _tags, _oasis, ?, but would also be able to have merlin integrated in
> >>> their build process. For example people using a build system running
> >>> in "daemon" mode (jenga, OMake) could then feed it the path of the
> >>> file being edited, and would then receive a list of the dependencies
> >>> of that file, as well as compiler flags required.
> >>>
> >>> We would like to know if you think either of this approach is useful,
> >>> or interesting... or not.
> >>>
> >>>    * * *
> >>>
> >>> That's about it.
> >>>
> >>> Cheers,
> >>>
> >>> Frederic and Thomas.
> >>> _______________________________________________
> >>> Merlin-discuss mailing list
> >>> Merlin-discuss at lists.forge.ocamlcore.org
> >>> https://lists.ocamlcore.org/cgi-bin/listinfo/merlin-discuss
> >> _______________________________________________
> >> Merlin-discuss mailing list
> >> Merlin-discuss at lists.forge.ocamlcore.org
> >> https://lists.ocamlcore.org/cgi-bin/listinfo/merlin-discuss
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocamlcore.org/pipermail/merlin-discuss/attachments/20131119/f702e79a/attachment-0001.html>

From thomas.refis at gmail.com  Mon Dec  2 19:43:43 2013
From: thomas.refis at gmail.com (Thomas Refis)
Date: Mon, 2 Dec 2013 19:43:43 +0100
Subject: [Merlin-discuss] Merlin's configuration
In-Reply-To: <CAPZv3x9Cw2uc2N5e+6-DteYiQLD3544WascwMjAEugYUwuopnw@mail.gmail.com>
References: <CAJ_epFNhw7LJ3ip3LtVYT9JpqnAMWz3PwN7hvs-aA5j-W-fJHg@mail.gmail.com>
	<CAOCAUGOi1vSQQfVyp=QXF8VDse_h+wtt=hhT6PwOJEJiZBG0fw@mail.gmail.com>
	<CAPFanBF+b+6XHw1Sxe3uvFPrgF2RN_YJUkRrSONzk7jSayfJFg@mail.gmail.com>
	<CAOCAUGO55TjRdMwSsvQGDegR80YPb7yxEfbmhK305w3Z5MUJMA@mail.gmail.com>
	<CAN_VbetnEV9VJXZsqU7qbZa-321jR87B5qiJx=04_3kzzOo9Dw@mail.gmail.com>
	<CAPZv3x9Cw2uc2N5e+6-DteYiQLD3544WascwMjAEugYUwuopnw@mail.gmail.com>
Message-ID: <CAJ_epFOLVWo+LdKJgZ3fmD=UffhC7xZN3DGrWs_tVUcKMVohNg@mail.gmail.com>

Hi,

Thank you everyone for the quick answer, and sorry for the delay of ours.

  * * *

Gabriel said:
> I think trying to reimplement the build system's
> job in Merlin is a dead end. You must defer to the existing build
> system(s) to provide you this information.'

Yes, we think so too. We wanted to make sure others would agree.

  * * *

Sylvain said:
> I will be more than happy to help you on the second point to
> integrate an external process that can ask directly oasis to
> generate a configuration. I can help you on this project and
> even help you write the extension.

Thank you!
We will contact you when we start working on that.

  * * *

Roshan said:
> A. There should be a way to state this information per file.
> B. The merlin command should use the same syntax as an ocamlopt
>    call for expressing the information.
> C. The information from the command-line in B also be used to
>    determine other aspects of type checking, e.g. warnings.
> D. An auxiliary file (.merlin) be used for expressing only things
>    that the ocamlopt call doesn't express, e.g. (3).
> E. A running merlin process should accept a command that updates
>    this information.
> F. A running merlin process should accept a command that tells it
>    when a .cmt or .cmi changes, and should update its internal
>    cache.

A. Yes, that's what we want too, hence this thread.

B. Well, the command does use the same syntax as an ocamlopt call, for
   example you can call merlin like that :

      ocamlmerlin -I<some dir> -I<some other dir> -w +w32

   Except that's not the way you do it, because you (as an user) never
   call merlin, your editor does. And your editor just call merlin and
   then tell him the absolute path of the file currently under
   edition, and it's then to merlin to find the relevant configuration
   for this file (at the moment in the associated .merlin).
   It works that way because you don't want your editor to know the
   logic of your project.

C. You can already do that.

D. Right.

E. It's already the case.

F. It's already the case.

Roshan said:
> The thinking behind using an ocamlopt call as the mechanism of
> expression is that it is already present in all build systems,
> and is thus very likely to reflect what the build system is
> actually doing.
> [...]
> How should the compilation command be communicated to merlin?
> There are at least three approaches that one can think of, of
> which we think the third has several advantages:
> (i) Write things into files: As you proposed, ...
> (ii) Have merlin ask the build system: ...
> (iii) Have the build system notify merlin: ...

Ok so, I'll pass on the first part since (I think) we're more
interested by the global mechanisms than the concrete syntax.

So, one clarification, I think what we propose is closer to (ii) than
to (i) : what we want to store in a (unique) file is the information
merlin needs to retrieve informations from the build system (i.e.
"call 'oasis setup merlin'" or "send this query to jenga on this
port").

I'll comment a bit on (iii), so let me quote it in full :

> Have the build system notify merlin: Merlin can provide a
> command that the build system calls to communicate the ocamlopt
> compilation command to the current running instance of
> merlin. This has the advantage that merlin gets updates whenever
> the build system needs to recompile files. Further, merlin can be
> notified of successful build completion of each .ml file.

That could be an option, we could have merlin "listening" for new
information about the "project state".
But I think there are several drawbacks to this:

1/ what if there are several instance of merlin running?
   You have emacs so you probably have only one instance of emacs
   running, which in turn has only one merlin subprocessed launched.
   Which is fine. But I use vim, I have several vim process launched,
   and with that several instances of merlin.
   It's gonna be a bit of a pain to tell your build system which
   instance of merlin it should be talking too.

2/ The build system has no way to know which file merlin is currently
   handling (except if you provide a way for the build system to ask
   that information to merlin, but then you need a real protocol and
   need to seriously extend the existing build systems), so it would
   feed merlin information about the entire project.
   Which is what we do at the moment, except this information are
   "global", "unprecise" if you want. But we are discussing having
   information on a "per file" basis, so that's gonna be a bit bigger.
   Which is fine for the project I write in my cellar. But that's
   gonna be a whole lot bigger at janestreet for example.
   How much memory does jenga need to stay in polling mode on your
   tree?

3/ OMake and/or jenga can be run in polling mode, which is fine for
   that kind of usage, they can discuss with merlin without user
   interraction. But people using oasis, ocamlbuild, make would need
   to call their build system everytime they launch merlin, and
   everytime the project configuration changes; it's annoying.
   I'd rather have merlin ask the build system by itself.

As for notifying merlin when a successful build completed, there
already is a way to do that.

   * * *

There was one last point to Roshan's mail (the "best effort" behavior)
but that is off-topic. There are certainly things to say on that
topic, but I think it should be on a thread of its own.

Cheers.

From gabriel.scherer at gmail.com  Fri Nov 28 16:46:49 2014
From: gabriel.scherer at gmail.com (Gabriel Scherer)
Date: Fri, 28 Nov 2014 16:46:49 +0100
Subject: [Merlin-discuss] #319: meta-issue about judiciously suggesting
	incorrect completions
Message-ID: <CAPFanBHRsjatQwQecoi4p=X7HAD5x6NgdcHKZqQE2dYuZ_dQgg@mail.gmail.com>

Dear merlin-discuss users,

There is a "meta" thread about Merlin that is happening on github but
may be of interest to the members of this list.
  https://github.com/the-lambda-church/merlin/issues/319

Apologies for not thinking of posting directly there.

From anil@recoil.org  Fri Dec 16 10:38:25 2016
Return-Path: <anil@recoil.org>
X-Original-To: merlin@lists.ocaml.org
Delivered-To: merlin@lists.ocaml.org
Received: from ppsw-43.csi.cam.ac.uk (ppsw-43.csi.cam.ac.uk [131.111.8.143])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 669083C23A
 for <merlin@lists.ocaml.org>; Fri, 16 Dec 2016 10:38:25 +0000 (GMT)
X-Cam-SpamDetails: score -3.1 from SpamAssassin-3.3.2-1774387 
 * -3.1 RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from bark.recoil.org ([5.153.225.51]:37952)
 by ppsw-43.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES256-GCM-SHA384:256)
 id 1cHqTw-00012T-oI (Exim 4.86_36-e07b163) for merlin@lists.ocaml.org
 (return-path <anil@recoil.org>); Fri, 16 Dec 2016 11:15:21 +0000
Received: from bark.recoil.org (localhost [127.0.0.1])
 by bark.recoil.org (OpenSMTPD) with ESMTP id a11e9b6a
 for <merlin@lists.ocaml.org>; Fri, 16 Dec 2016 11:15:20 +0000 (GMT)
DKIM-Signature: v=1; a=rsa-sha1; c=relaxed; d=recoil.org; h=from
 :content-type:content-transfer-encoding:mime-version:subject
 :message-id:date:to; s=selector1; bh=7WypRGHpc3jnX+5vNSHs1O/i+JA
 =; b=QnYyZys2QNnvbd6REwdcul6Hn6oxa5KhTtSUW9sWozyRQOXbZa++bAg9+tZ
 v1ooQ4TzHQiF96P4MYemOknnq1kFA4VTWCDUrXbfOcVJThZKLPWdevWBpcT3jyHc
 shn3bYXVNZk0NgJCa2q5hXOqMhXo2rEB7gpMllcXAVvP+g+Y=
DomainKey-Signature: a=rsa-sha1; c=nofws; d=recoil.org; h=from
 :content-type:content-transfer-encoding:mime-version:subject
 :message-id:date:to; q=dns; s=selector1; b=GC+Gvn6YRut1y6TUl9sgd
 NQtnI/qlTv2hLi9P4s3Mq8I13WGAfOf4bun+ylr2oxvGe2dUOzE2MP6UkD6HTiin
 bomqFuyNs5dv1u/qf2byux25KIUVjmBzZt5v+jorG909DKxl6T/Oq8q6gnfp7sCx
 FpWz4ArZEEWz4vTiBaMd08=
Received: from dock.cam.docker.com (mail.astons-coaches.co.uk [194.72.166.2])
 by bark.recoil.org (OpenSMTPD) with ESMTPSA id fd46018b
 (TLSv1.2:ECDHE-RSA-AES256-GCM-SHA384:256:NO)
 for <merlin@lists.ocaml.org>; Fri, 16 Dec 2016 11:15:20 +0000 (GMT)
From: Anil Madhavapeddy <anil@recoil.org>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Mime-Version: 1.0 (Mac OS X Mail 10.1 \(3251\))
Message-Id: <899C3227-8100-4598-862B-2213FEFB6DDB@recoil.org>
Date: Fri, 16 Dec 2016 11:15:19 +0000
To: merlin@lists.ocaml.org
X-Mailer: Apple Mail (2.3251)
X-Mailman-Approved-At: Fri, 16 Dec 2016 10:43:46 +0000
Subject: [Merlin] Repository moved to ocaml/ org on GitHub
X-BeenThere: merlin@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discussion of the Merlin editor service for OCaml
 <merlin.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/merlin>,
 <mailto:merlin-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/merlin/>
List-Post: <mailto:merlin@lists.ocaml.org>
List-Help: <mailto:merlin-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/merlin>,
 <mailto:merlin-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 16 Dec 2016 10:38:25 -0000

Dear all,

The Merlin source repository has moved to:

https://github.com/ocaml/merlin

There is a redirect in place from the old site, so you should notice any
difference aside from the new URL. If there are any access problems,
please let me know.

regards,
Anil

