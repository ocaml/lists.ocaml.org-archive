From anil at recoil.org  Mon Aug  5 16:50:39 2013
From: anil at recoil.org (Anil Madhavapeddy)
Date: Mon, 5 Aug 2013 16:50:39 +0100
Subject: [opam-devel] Which shell files are updated
Message-ID: <DC5C4768-3E24-4CD6-931A-353FBDB44289@recoil.org>

Thomas, Louis,

This query came up in the RWO installation chapter comments, about which files to update:

https://github.com/ocamllabs/rwo-comments/issues/2129

> Most people - definitely those on Fedora - will want this in ~/.bashrc, 
> not ~/.bash_profile. ~/.bashrc is for interactive shells.

Will OPAM 1.1 deal with this correctly?  I think we want OPAM to be active in
non-interactive shells too, or else any shell scripts that invoke OCaml will fail.

-anil


From thomas at ocamlpro.com  Mon Aug  5 18:01:41 2013
From: thomas at ocamlpro.com (Thomas Gazagnaire)
Date: Mon, 5 Aug 2013 19:01:41 +0200
Subject: [opam-devel] Which shell files are updated
In-Reply-To: <DC5C4768-3E24-4CD6-931A-353FBDB44289@recoil.org>
References: <DC5C4768-3E24-4CD6-931A-353FBDB44289@recoil.org>
Message-ID: <803E956C-75B2-4465-B4A4-3F1F33C0AF90@ocamlpro.com>

See https://github.com/OCamlPro/opam/blob/master/src/core/opamMisc.ml#L436

if .bash_profile exists, this one will be picked-up instead of .bashrc.

(and see http://shreevatsa.wordpress.com/2008/03/30/zshbash-startup-files-loading-order-bashrc-zshrc-etc/ for the bigger picture :p)

On Aug 5, 2013, at 5:50 PM, Anil Madhavapeddy wrote:

> Thomas, Louis,
> 
> This query came up in the RWO installation chapter comments, about which files to update:
> 
> https://github.com/ocamllabs/rwo-comments/issues/2129
> 
>> Most people - definitely those on Fedora - will want this in ~/.bashrc, 
>> not ~/.bash_profile. ~/.bashrc is for interactive shells.
> 
> Will OPAM 1.1 deal with this correctly?  I think we want OPAM to be active in
> non-interactive shells too, or else any shell scripts that invoke OCaml will fail.
> 
> -anil
> 
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel


From anil at recoil.org  Tue Aug  6 15:56:28 2013
From: anil at recoil.org (Anil Madhavapeddy)
Date: Tue, 6 Aug 2013 15:56:28 +0100
Subject: [opam-devel] Which shell files are updated
In-Reply-To: <803E956C-75B2-4465-B4A4-3F1F33C0AF90@ocamlpro.com>
References: <DC5C4768-3E24-4CD6-931A-353FBDB44289@recoil.org>
 <803E956C-75B2-4465-B4A4-3F1F33C0AF90@ocamlpro.com>
Message-ID: <F734BCA4-57D6-48F7-8B50-8435A0BC69F0@recoil.org>

I'm proxying the helpful chap over at:
https://github.com/ocamllabs/rwo-comments/issues/2129#issuecomment-22184157

He points out:

> I agree regarding inclusion in ~/.bash_profile as well, but in this case, OPAM won't work in interactive shells on Fedora unless included in ~/.bashrc. The typical suggested solution for this is to source ~/.bashrc from ~/.bash_profile and make all changes to ~/.bashrc, but if you want to leave those levels of system administration details to the reader, that seems fine.

-anil

On 5 Aug 2013, at 18:01, Thomas Gazagnaire <thomas at ocamlpro.com> wrote:

> See https://github.com/OCamlPro/opam/blob/master/src/core/opamMisc.ml#L436
> 
> if .bash_profile exists, this one will be picked-up instead of .bashrc.
> 
> (and see http://shreevatsa.wordpress.com/2008/03/30/zshbash-startup-files-loading-order-bashrc-zshrc-etc/ for the bigger picture :p)
> 
> On Aug 5, 2013, at 5:50 PM, Anil Madhavapeddy wrote:
> 
>> Thomas, Louis,
>> 
>> This query came up in the RWO installation chapter comments, about which files to update:
>> 
>> https://github.com/ocamllabs/rwo-comments/issues/2129
>> 
>>> Most people - definitely those on Fedora - will want this in ~/.bashrc, 
>>> not ~/.bash_profile. ~/.bashrc is for interactive shells.
>> 
>> Will OPAM 1.1 deal with this correctly?  I think we want OPAM to be active in
>> non-interactive shells too, or else any shell scripts that invoke OCaml will fail.
>> 
>> -anil
>> 
>> _______________________________________________
>> opam-devel mailing list
>> opam-devel at lists.ocaml.org
>> http://lists.ocaml.org/listinfo/opam-devel
> 


From thomas at ocamlpro.com  Wed Aug  7 18:54:19 2013
From: thomas at ocamlpro.com (Thomas Gazagnaire)
Date: Wed, 7 Aug 2013 19:54:19 +0200
Subject: [opam-devel] branch merge
Message-ID: <35CCE1BA-054B-4D41-A455-FE30A6B9A883@ocamlpro.com>

Hi,

Just to let you know that I was sufficiently happy with the state of my new branch to merge it in the main repository.

These patches should fix a lot of instability regarding repository update, dev and pin packages - as this is now well stress-tested by opam-rt. But if you find new regressions, and if you are not happy with the new behavior, please tell me. I plan to fix the last documentation issues during the week, and hope to release 1.1 next week if nothing is reported since then.

One nice new thing with these patches is that you can easily add overlays for your package metadata (but editing ~/.opam/<switch>/overlay/<name>.<package>/{opam,url,descr,files/*}). Using that mechanism, pinned packages and dev packages are not very different anymore, as an pinned package is just a normal package with an URL overlay (and a slightly different version).

I've also cleaned up the file hierarchy in the ~/.opam/ folder, (packages metadata are now in ~/.opam/packages/<name>/<name>.<version>/{opam,url,descr,file/*}) and so a small upgrade script is run the first time you run the new OPAM. If something goes wrong, you can `mkdir ~/.opam/opam` and starts again. If something goes wrong again, please fill a bug report.

Best,
Thomas

From anil at recoil.org  Thu Aug  8 20:36:32 2013
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 8 Aug 2013 20:36:32 +0100
Subject: [opam-devel] OPAM 1.0 is now in Debian Unstable
Message-ID: <34DB9D27-493D-43A2-86BD-B261B5C06B0E@recoil.org>

Thanks to Mehdi Dogguy's hard work, OPAM 1.0 has now been packaged up and accepted into Debian Unstable.  Thanks Mehdi!
http://packages.debian.org/sid/opam

I've also updated the Ubuntu PPA to have the latest unstable snapshots of OCaml and OPAM, for those who prefer the bleeding edge:
https://launchpad.net/~avsm/+archive/ppa-opam-unstable/+packages

-anil

From thomas at ocamlpro.com  Thu Aug  8 20:43:44 2013
From: thomas at ocamlpro.com (Thomas Gazagnaire)
Date: Thu, 8 Aug 2013 21:43:44 +0200
Subject: [opam-devel] passing opam-repository under CC0
Message-ID: <DF5477AE-D02A-4A16-A475-59F3AC7B9471@ocamlpro.com>

Hello all,

I want to clarify the licensing of OPAM metadata to avoid future confusions about that. Ideally I would like to be CC0[1] (eg. almost public domain, but with some legal existence in countries such as France).

So if you have contributed to https://github.com/OCamlPro/opam-repository, please comment on https://github.com/OCamlPro/opam-repository/issues/955 to confirm that you are happy with the change (and if you are not, please discuss the issue here).

I believe than some contributors are not on this list, so if you happen to know some of them, please contact them to tell them to do so. I will try to dig into Github to find email of everyone, but I'm not sure I will be able to do that alone :-)

Best,
Thomas

[1] http://creativecommons.org/publicdomain/zero/1.0/

From agarwal1975 at gmail.com  Tue Aug 13 17:49:21 2013
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Tue, 13 Aug 2013 12:49:21 -0400
Subject: [opam-devel] branch merge
In-Reply-To: <35CCE1BA-054B-4D41-A455-FE30A6B9A883@ocamlpro.com>
References: <35CCE1BA-054B-4D41-A455-FE30A6B9A883@ocamlpro.com>
Message-ID: <CAMu2m2LKvoRe-nvMuLP7faWG5CHjxDc8Vw6kAsjLneeg8eMVvw@mail.gmail.com>

On Wed, Aug 7, 2013 at 1:54 PM, Thomas Gazagnaire <thomas at ocamlpro.com>wrote:

nice new thing ... is that you can easily add overlays for your package
> metadata (but editing
> ~/.opam/<switch>/overlay/<name>.<package>/{opam,url,descr,files/*}).


Is this documented somewhere? Do you mean we can manually add content into
this directory? I notice that pinning a package creates a foo.pinned
directory. Is "pinned" a specially treated version?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20130813/14e3cc61/attachment.html>

From thomas at ocamlpro.com  Tue Aug 13 17:56:24 2013
From: thomas at ocamlpro.com (Thomas Gazagnaire)
Date: Tue, 13 Aug 2013 18:56:24 +0200
Subject: [opam-devel] branch merge
In-Reply-To: <CAMu2m2LKvoRe-nvMuLP7faWG5CHjxDc8Vw6kAsjLneeg8eMVvw@mail.gmail.com>
References: <35CCE1BA-054B-4D41-A455-FE30A6B9A883@ocamlpro.com>
 <CAMu2m2LKvoRe-nvMuLP7faWG5CHjxDc8Vw6kAsjLneeg8eMVvw@mail.gmail.com>
Message-ID: <2B3B6CC6-59A3-46DA-88E0-61DDCC3FB846@ocamlpro.com>

> nice new thing ... is that you can easily add overlays for your package metadata (but editing ~/.opam/<switch>/overlay/<name>.<package>/{opam,url,descr,files/*}).
> 
> Is this documented somewhere? Do you mean we can manually add content into this directory? I notice that pinning a package creates a foo.pinned directory. Is "pinned" a specially treated version?

Not yet documented properly. But yes, you could add files in there manually and it should be picked up correctly. Note that there are still known issues/regressions with pinning that Louis is currently fixing (https://github.com/OCamlPro/opam/pull/751). Pinned packages are a bit special: they MUST have a version number appearing in their OPAM file(otherwise the solver is very confuse) and the MUST have an url overlay file -- apart that, nothing different from other packages.

Things are a bit in flux and we are late for releasing 1.1, but we want to get the pin/update things rock-solid so we'll take the necessary time to make it so.

Best,
Thomas


From agarwal1975 at gmail.com  Tue Aug 13 18:43:31 2013
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Tue, 13 Aug 2013 13:43:31 -0400
Subject: [opam-devel] branch merge
In-Reply-To: <2B3B6CC6-59A3-46DA-88E0-61DDCC3FB846@ocamlpro.com>
References: <35CCE1BA-054B-4D41-A455-FE30A6B9A883@ocamlpro.com>
 <CAMu2m2LKvoRe-nvMuLP7faWG5CHjxDc8Vw6kAsjLneeg8eMVvw@mail.gmail.com>
 <2B3B6CC6-59A3-46DA-88E0-61DDCC3FB846@ocamlpro.com>
Message-ID: <CAMu2m2J6_crYUas-vZF9t1tGJ2kLfHvdPuaTVLuiR0ELogYXHw@mail.gmail.com>

Okay, so I'll just hold off before trying out this feature.

On Tue, Aug 13, 2013 at 12:56 PM, Thomas Gazagnaire <thomas at ocamlpro.com>wrote:

> > nice new thing ... is that you can easily add overlays for your package
> metadata (but editing
> ~/.opam/<switch>/overlay/<name>.<package>/{opam,url,descr,files/*}).
> >
> > Is this documented somewhere? Do you mean we can manually add content
> into this directory? I notice that pinning a package creates a foo.pinned
> directory. Is "pinned" a specially treated version?
>
> Not yet documented properly. But yes, you could add files in there
> manually and it should be picked up correctly. Note that there are still
> known issues/regressions with pinning that Louis is currently fixing (
> https://github.com/OCamlPro/opam/pull/751). Pinned packages are a bit
> special: they MUST have a version number appearing in their OPAM
> file(otherwise the solver is very confuse) and the MUST have an url overlay
> file -- apart that, nothing different from other packages.
>
> Things are a bit in flux and we are late for releasing 1.1, but we want to
> get the pin/update things rock-solid so we'll take the necessary time to
> make it so.
>
> Best,
> Thomas
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20130813/b3e3a01e/attachment.html>

From anil at recoil.org  Mon Aug 26 11:57:40 2013
From: anil at recoil.org (Anil Madhavapeddy)
Date: Mon, 26 Aug 2013 11:57:40 +0100
Subject: [opam-devel] conf- libraries and stub cmas: time for ocaml-discover?
Message-ID: <CF44AB86-41B0-48F1-81AE-C73B95F89E52@recoil.org>

I wanted to follow up on this ticket in OPAM-repository with a slightly wider audience, as it affects a lot of the libraries in the tree.
https://github.com/OCamlPro/opam-repository/pull/1008#issuecomment-23250671

Christophe makes the suggestion of having the stub packages for conf-* libraries expose their cflags/lflags in a standard-ish way that can be used by the OCaml package.

We have a similar problem with an upcoming version of the ctypes library that supports linking to C libraries in several ways:

- Dynamically opening the symbols via dlopen(3) and using libffi to call functions.  No C stubs needed.

- C stub generation that outputs C code that is then compiled and linked in as usual.

- Struct "offset probing" that determines precisely which offset a field name maps to by generating enough C code to compile a test. [1]

Ideally, we would be able to query three types of information from a conf package installation:

- an ML file that has values exposing cflags/lflags as OCaml values.  This can be used by discover.ml scripts (as used in Core or Lwt)

- a CMA file that embeds the dynamic linking flags via cclib, including adding -Wl,--no-as-needed on newer systems like Ubuntu.  This lets a Ctypes using dynamic linking (Ctypes.Foreign) just add a CMA to the link line and have the correct gcc/clang libraries work.

- The final thing is some way to pass the right CFLAGS/LDFLAGS to compile up generated C stubs with the right include/library paths to gcc (either from Ctypes, or via the traditional camlidl/swig outputs).  Presumably this would be a raw shell fragment in a file, as usually output by autoconf.

Overall though, it does seem time to come up with a concrete proposal for how to handle system-specific C library configuration.  If we get this right, it should significantly simplify win32 and cross-compilation too.

I'm thinking of an ocaml-discover package that can encapsulate all this stuff and provide a single place for all this stub logic.  Anyone else have any thoughts that I've missed out above?

[1] https://github.com/ocamllabs/ocaml-ctypes/issues/55

From jonathan.protzenko at gmail.com  Mon Aug 26 13:52:25 2013
From: jonathan.protzenko at gmail.com (Jonathan Protzenko)
Date: Mon, 26 Aug 2013 14:52:25 +0200
Subject: [opam-devel] conf- libraries and stub cmas: time for
	ocaml-discover?
In-Reply-To: <CF44AB86-41B0-48F1-81AE-C73B95F89E52@recoil.org>
References: <CF44AB86-41B0-48F1-81AE-C73B95F89E52@recoil.org>
Message-ID: <521B4F89.7040200@gmail.com>

Hi,

Thanks for looping me in. I never really thought about this, since it's 
pretty far from my usual concerns :-), but that sounds like a fairly 
sensible proposal.

Some questions.
1) Whose responsibility is it to check that the very basic requirements 
are met? (e.g. presence of a gcc-like executable in the PATH). On 
Windows, I'm still making the install of Cygwin as optional, so someone 
would have to check first that we have a toolchain, and provide an 
early, meaningful error message. (I could think of a similar situation 
on Linux, where OPAM is installed via the ppa and somehow ocaml-ffi is 
a binary package or its compilation doesn't need a C compiler.)

I feel like having an ML file that has _values_ exposing cflags/lflags 
precludes an early reporting of errors (?I don't have a compiler in my 
PATH, don't even bother trying to call it!?).

2) Also, beginners on, say, Ubuntu, would have to install the 
build-essential package. Do you have plans for a platform-specific 
advice on how to install proper development packages?

3) I'm not sure about that, but do Lwt / ocaml-ffi use flexdll on 
Windows?

4) I also think that you need to make the gcc name configurable (but 
maybe you mentioned that already). On Windows, it's called 
i686-whatever-gcc, or something.

5) Do you plan to have OCaml distribute this package as part of 
compiler-libs (sounds easier, but possibly a fair bit of discussion 
needed), or rather have the packager distribute it?

Cheers,

~ jonathan

On Mon 26 Aug 2013 12:57:40 PM CEST, Anil Madhavapeddy wrote:
> I wanted to follow up on this ticket in OPAM-repository with a slightly wider audience, as it affects a lot of the libraries in the tree.
> https://github.com/OCamlPro/opam-repository/pull/1008#issuecomment-23250671
>
> Christophe makes the suggestion of having the stub packages for conf-* libraries expose their cflags/lflags in a standard-ish way that can be used by the OCaml package.
>
> We have a similar problem with an upcoming version of the ctypes library that supports linking to C libraries in several ways:
>
> - Dynamically opening the symbols via dlopen(3) and using libffi to call functions.  No C stubs needed.
>
> - C stub generation that outputs C code that is then compiled and linked in as usual.
>
> - Struct "offset probing" that determines precisely which offset a field name maps to by generating enough C code to compile a test. [1]
>
> Ideally, we would be able to query three types of information from a conf package installation:
>
> - an ML file that has values exposing cflags/lflags as OCaml values.  This can be used by discover.ml scripts (as used in Core or Lwt)
>
> - a CMA file that embeds the dynamic linking flags via cclib, including adding -Wl,--no-as-needed on newer systems like Ubuntu.  This lets a Ctypes using dynamic linking (Ctypes.Foreign) just add a CMA to the link line and have the correct gcc/clang libraries work.
>
> - The final thing is some way to pass the right CFLAGS/LDFLAGS to compile up generated C stubs with the right include/library paths to gcc (either from Ctypes, or via the traditional camlidl/swig outputs).  Presumably this would be a raw shell fragment in a file, as usually output by autoconf.
>
> Overall though, it does seem time to come up with a concrete proposal for how to handle system-specific C library configuration.  If we get this right, it should significantly simplify win32 and cross-compilation too.
>
> I'm thinking of an ocaml-discover package that can encapsulate all this stuff and provide a single place for all this stub logic.  Anyone else have any thoughts that I've missed out above?
>
> [1] https://github.com/ocamllabs/ocaml-ctypes/issues/55

From Christophe.Troestler at umons.ac.be  Mon Aug 26 21:03:24 2013
From: Christophe.Troestler at umons.ac.be (Christophe TROESTLER)
Date: Mon, 26 Aug 2013 22:03:24 +0200
Subject: [opam-devel] conf- libraries and stub cmas: time for
	ocaml-discover?
In-Reply-To: <CF44AB86-41B0-48F1-81AE-C73B95F89E52@recoil.org>
References: <CF44AB86-41B0-48F1-81AE-C73B95F89E52@recoil.org>
Message-ID: <20130826.220324.111874034739254535.Christophe.Troestler@umons.ac.be>

On Mon, 26 Aug 2013 11:57:40 +0100, Anil Madhavapeddy wrote:
> 
> [...] Ideally, we would be able to query three types of information
> from a conf package installation:
> 
> - an ML file that has values exposing cflags/lflags as OCaml values.
>   This can be used by discover.ml scripts (as used in Core or Lwt)
> 
> - a CMA file that embeds the dynamic linking flags via cclib, including
>   adding -Wl,--no-as-needed on newer systems like Ubuntu.  This lets a
>   Ctypes using dynamic linking (Ctypes.Foreign) just add a CMA to the
>   link line and have the correct gcc/clang libraries work.
> 
> - The final thing is some way to pass the right CFLAGS/LDFLAGS to
>   compile up generated C stubs with the right include/library paths to
>   gcc (either from Ctypes, or via the traditional camlidl/swig outputs).
>   Presumably this would be a raw shell fragment in a file, as usually
>   output by autoconf.

Sounds good to me.  For the last point, it is also important that
these flags are available in a way that makes adding ocamlbuild rules
using these flags easy.  Maybe, the C compiler and CFLAGS/LDFLAGS can
be duplicated in the first ML file (and then the configure phase ? say
in oasis ? may generate the proper rules).

Best,
C.

From gildor at ocamlcore.org  Mon Aug 26 21:40:37 2013
From: gildor at ocamlcore.org (Sylvain Le Gall)
Date: Mon, 26 Aug 2013 22:40:37 +0200
Subject: [opam-devel] conf- libraries and stub cmas: time for
	ocaml-discover?
In-Reply-To: <20130826.220324.111874034739254535.Christophe.Troestler@umons.ac.be>
References: <CF44AB86-41B0-48F1-81AE-C73B95F89E52@recoil.org>
 <20130826.220324.111874034739254535.Christophe.Troestler@umons.ac.be>
Message-ID: <CAOCAUGOyhvsnHL4MMhpaByrEv-5adKjdhxZLrA4Tkd-2f_k14g@mail.gmail.com>

I was thinking to add build information to the variable you can
substitute in .ab files. These files already allow the embed
$(version) but we can add $(build_information) as well. We just need
to define the right format.

We can also add all this information directly in the META (findlib)
file with a specific key to make it easily accessible through findlib
query API.

Also, on a more general topics, you know that most of these
information are already available in the .cma file ?

$ ocamlobjinfo /usr/lib/ocaml/pcre/pcre.cma
Force custom: no
Extra C object files: -lpcre_stubs -L/usr/lib/x86_64-linux-gnu -lpcre
Extra C options:
Extra dynamically-loaded libraries: dllpcre_stubs.so
Unit name: Pcre
Force link: no

2013/8/26 Christophe TROESTLER <Christophe.Troestler at umons.ac.be>:
> On Mon, 26 Aug 2013 11:57:40 +0100, Anil Madhavapeddy wrote:
>>
>> [...] Ideally, we would be able to query three types of information
>> from a conf package installation:
>>
>> - an ML file that has values exposing cflags/lflags as OCaml values.
>>   This can be used by discover.ml scripts (as used in Core or Lwt)
>>
>> - a CMA file that embeds the dynamic linking flags via cclib, including
>>   adding -Wl,--no-as-needed on newer systems like Ubuntu.  This lets a
>>   Ctypes using dynamic linking (Ctypes.Foreign) just add a CMA to the
>>   link line and have the correct gcc/clang libraries work.
>>
>> - The final thing is some way to pass the right CFLAGS/LDFLAGS to
>>   compile up generated C stubs with the right include/library paths to
>>   gcc (either from Ctypes, or via the traditional camlidl/swig outputs).
>>   Presumably this would be a raw shell fragment in a file, as usually
>>   output by autoconf.
>
> Sounds good to me.  For the last point, it is also important that
> these flags are available in a way that makes adding ocamlbuild rules
> using these flags easy.  Maybe, the C compiler and CFLAGS/LDFLAGS can
> be duplicated in the first ML file (and then the configure phase ? say
> in oasis ? may generate the proper rules).
>
> Best,
> C.

From anil at recoil.org  Thu Aug 29 11:38:22 2013
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 29 Aug 2013 11:38:22 +0100
Subject: [opam-devel] ocamlot back on rackspace now
Message-ID: <DB758CC9-D807-4E32-A53C-C2AF34A82282@recoil.org>

I've restarted OCamlot on the Rackspace VM infrastructure now, so its back up at:
https://ocamlot.recoil.org

I'll have the deployment scripts and such needs to setup new workers committed shortly, but in the meanwhile, if anyone wants to start fixing some of the low hanging triage fruit in x86_64, go right ahead...

(the goal of this particular run is to make sure that there are no horrible regressions in 4.1 vs 4.0, since it's about to become a release candidate).

-anil

