From thomas at gazagnaire.org  Wed Jul  6 09:29:14 2016
From: thomas at gazagnaire.org (Thomas Gazagnaire)
Date: Wed, 6 Jul 2016 10:29:14 +0200
Subject: [opam-devel] deprecating opam 1.2.0
Message-ID: <CAA92228-3FEA-46A7-9CE6-98DA50E99317@gazagnaire.org>

I think it is time to deprecate opam 1.2.0. What do you think?

See https://github.com/ocaml/opam-repository/pull/6888 for a recent issue: it doesn?t understand the `pinned` variable. This could be fixed by adding a rewriting layer between 1.2.2 and 1.2.0 and adding a redirection based on the version number (we already do that for opam 1.1) but that?s a lot of efforts for not much gains. So I?m in favour of simply not supporting 1.2.0 anymore.

If you are still using 1.2.0 please complain now :-)

Thomas

From thomas at gazagnaire.org  Wed Jul  6 09:33:06 2016
From: thomas at gazagnaire.org (Thomas Gazagnaire)
Date: Wed, 6 Jul 2016 10:33:06 +0200
Subject: [opam-devel] switch CI to use Trusty
Message-ID: <31E2E8C2-E342-4103-BBDB-E4FAE0B89EB7@gazagnaire.org>

Hi again,

Since https://github.com/ocaml/opam-repository/pull/6902 we are now using Ubuntu Trusty for the CI of opam-repository. Normally this should be fully transparent but be aware that it might causes some depext errors on the CI which should be fairly easy to fix (as we switched to Trusty to have more up-to-date depexts anyway).

Best,
Thomas

From Fabrice.Le_fessant at inria.fr  Wed Jul  6 09:43:11 2016
From: Fabrice.Le_fessant at inria.fr (Fabrice Le Fessant)
Date: Wed, 06 Jul 2016 08:43:11 +0000
Subject: [opam-devel] deprecating opam 1.2.0
In-Reply-To: <CAA92228-3FEA-46A7-9CE6-98DA50E99317@gazagnaire.org>
References: <CAA92228-3FEA-46A7-9CE6-98DA50E99317@gazagnaire.org>
Message-ID: <CAHvkLrMASAsBFSokp1ycYF6eGM1H=ZmnuG4bp6fhfgrAcfa58g@mail.gmail.com>

Why not set `opam-version` in the package to something greater than 1.2 to
avoid the package from being used there ? Isn't it the goal of that field ?

Deprecating a whole version probably still used by some users sounds quite
overkill just to fix one package.

--Fabrice


On Wed, Jul 6, 2016 at 10:29 AM Thomas Gazagnaire <thomas at gazagnaire.org>
wrote:

> I think it is time to deprecate opam 1.2.0. What do you think?
>
> See https://github.com/ocaml/opam-repository/pull/6888 for a recent
> issue: it doesn?t understand the `pinned` variable. This could be fixed by
> adding a rewriting layer between 1.2.2 and 1.2.0 and adding a redirection
> based on the version number (we already do that for opam 1.1) but that?s a
> lot of efforts for not much gains. So I?m in favour of simply not
> supporting 1.2.0 anymore.
>
> If you are still using 1.2.0 please complain now :-)
>
> Thomas
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20160706/4a20c2df/attachment.html>

From gesbert at antislash.info  Wed Jul  6 11:52:40 2016
From: gesbert at antislash.info (Louis Gesbert)
Date: Wed, 06 Jul 2016 12:52:40 +0200
Subject: [opam-devel] deprecating opam 1.2.0
In-Reply-To: <CAHvkLrMASAsBFSokp1ycYF6eGM1H=ZmnuG4bp6fhfgrAcfa58g@mail.gmail.com>
References: <CAA92228-3FEA-46A7-9CE6-98DA50E99317@gazagnaire.org>
 <CAHvkLrMASAsBFSokp1ycYF6eGM1H=ZmnuG4bp6fhfgrAcfa58g@mail.gmail.com>
Message-ID: <1790151.03FZJgjKjy@agaric>

`opam-version:` describes the file format, and isn't supposed to change between patch versions; 
if encoutering a file with a newer minor version, earlier opam will still try to read it, but will silent warnings about the format (and complain that opam itself should be updated).

`available: opam-version > "1.2.0"` would do what you say, though: disallow package installation on earlier opams.

> - Fabrice Le Fessant, 06/07/2016 08:43 -
> Why not set `opam-version` in the package to something greater than 1.2 to
> avoid the package from being used there ? Isn't it the goal of that field ?
> 
> Deprecating a whole version probably still used by some users sounds quite
> overkill just to fix one package.
> 
> --Fabrice
> 
> 
> On Wed, Jul 6, 2016 at 10:29 AM Thomas Gazagnaire <thomas at gazagnaire.org>
> wrote:
> 
> > I think it is time to deprecate opam 1.2.0. What do you think?
> >
> > See https://github.com/ocaml/opam-repository/pull/6888 for a recent
> > issue: it doesn?t understand the `pinned` variable. This could be fixed by
> > adding a rewriting layer between 1.2.2 and 1.2.0 and adding a redirection
> > based on the version number (we already do that for opam 1.1) but that?s a
> > lot of efforts for not much gains. So I?m in favour of simply not
> > supporting 1.2.0 anymore.
> >
> > If you are still using 1.2.0 please complain now :-)
> >
> > Thomas
> > _______________________________________________
> > opam-devel mailing list
> > opam-devel at lists.ocaml.org
> > http://lists.ocaml.org/listinfo/opam-devel
> >

From Fabrice.Le_fessant at inria.fr  Wed Jul  6 12:47:01 2016
From: Fabrice.Le_fessant at inria.fr (Fabrice Le Fessant)
Date: Wed, 06 Jul 2016 11:47:01 +0000
Subject: [opam-devel] deprecating opam 1.2.0
In-Reply-To: <1790151.03FZJgjKjy@agaric>
References: <CAA92228-3FEA-46A7-9CE6-98DA50E99317@gazagnaire.org>
 <CAHvkLrMASAsBFSokp1ycYF6eGM1H=ZmnuG4bp6fhfgrAcfa58g@mail.gmail.com>
 <1790151.03FZJgjKjy@agaric>
Message-ID: <CAHvkLrPt4_xq+JFs_We9b7SVbmB-3AWJEQF+6B34hiwjQCWqpg@mail.gmail.com>

> `available: opam-version > "1.2.0"` would do what you say, though:
disallow package installation on earlier opams.

Since `to_pkg` will fail to install with `opam 1.2.0`, there is no problem
disallowing it for these versions


On Wed, Jul 6, 2016 at 12:52 PM Louis Gesbert <gesbert at antislash.info>
wrote:

> `opam-version:` describes the file format, and isn't supposed to change
> between patch versions;
> if encoutering a file with a newer minor version, earlier opam will still
> try to read it, but will silent warnings about the format (and complain
> that opam itself should be updated).
>
> `available: opam-version > "1.2.0"` would do what you say, though:
> disallow package installation on earlier opams.
>
> > - Fabrice Le Fessant, 06/07/2016 08:43 -
> > Why not set `opam-version` in the package to something greater than 1.2
> to
> > avoid the package from being used there ? Isn't it the goal of that
> field ?
> >
> > Deprecating a whole version probably still used by some users sounds
> quite
> > overkill just to fix one package.
> >
> > --Fabrice
> >
> >
> > On Wed, Jul 6, 2016 at 10:29 AM Thomas Gazagnaire <thomas at gazagnaire.org
> >
> > wrote:
> >
> > > I think it is time to deprecate opam 1.2.0. What do you think?
> > >
> > > See https://github.com/ocaml/opam-repository/pull/6888 for a recent
> > > issue: it doesn?t understand the `pinned` variable. This could be
> fixed by
> > > adding a rewriting layer between 1.2.2 and 1.2.0 and adding a
> redirection
> > > based on the version number (we already do that for opam 1.1) but
> that?s a
> > > lot of efforts for not much gains. So I?m in favour of simply not
> > > supporting 1.2.0 anymore.
> > >
> > > If you are still using 1.2.0 please complain now :-)
> > >
> > > Thomas
> > > _______________________________________________
> > > opam-devel mailing list
> > > opam-devel at lists.ocaml.org
> > > http://lists.ocaml.org/listinfo/opam-devel
> > >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20160706/41347d8f/attachment.html>

From sylvain+ocaml at le-gall.net  Thu Jul  7 07:50:10 2016
From: sylvain+ocaml at le-gall.net (Sylvain Le Gall)
Date: Thu, 07 Jul 2016 06:50:10 +0000
Subject: [opam-devel] deprecating opam 1.2.0
In-Reply-To: <CAA92228-3FEA-46A7-9CE6-98DA50E99317@gazagnaire.org>
References: <CAA92228-3FEA-46A7-9CE6-98DA50E99317@gazagnaire.org>
Message-ID: <CAOCAUGNWg2JW1Tg-Km5WA6TDYaKsDgAqjkVFdk_=aj+CRb2Gqg@mail.gmail.com>

opam 1.2.0 is the version distributed with Debian Jessie (current stable)
https://packages.debian.org/jessie/opam

Deprecating it, will prevent Debian Stable users to use the "easy to
install" package.

Le mer. 6 juil. 2016 ? 10:29, Thomas Gazagnaire <thomas at gazagnaire.org> a
?crit :

> I think it is time to deprecate opam 1.2.0. What do you think?
>
> See https://github.com/ocaml/opam-repository/pull/6888 for a recent
> issue: it doesn?t understand the `pinned` variable. This could be fixed by
> adding a rewriting layer between 1.2.2 and 1.2.0 and adding a redirection
> based on the version number (we already do that for opam 1.1) but that?s a
> lot of efforts for not much gains. So I?m in favour of simply not
> supporting 1.2.0 anymore.
>
> If you are still using 1.2.0 please complain now :-)
>
> Thomas
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20160707/47c67112/attachment.html>

From anil at recoil.org  Thu Jul  7 11:15:08 2016
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 7 Jul 2016 11:15:08 +0100
Subject: [opam-devel] deprecating opam 1.2.0
In-Reply-To: <CAOCAUGNWg2JW1Tg-Km5WA6TDYaKsDgAqjkVFdk_=aj+CRb2Gqg@mail.gmail.com>
References: <CAA92228-3FEA-46A7-9CE6-98DA50E99317@gazagnaire.org>
 <CAOCAUGNWg2JW1Tg-Km5WA6TDYaKsDgAqjkVFdk_=aj+CRb2Gqg@mail.gmail.com>
Message-ID: <65D2AEDD-123E-4A97-8467-9813AB4E1538@recoil.org>

CCing Stephane Glondu -- would it be possible to request a backport of 1.2.2 to Debian Stable?  It's the last major distro distributing the older version of OPAM, and it's an increasingly difficult maintenance burden for us.

regards,
Anil

> On 7 Jul 2016, at 07:50, Sylvain Le Gall <sylvain+ocaml at le-gall.net> wrote:
> 
> opam 1.2.0 is the version distributed with Debian Jessie (current stable)
> https://packages.debian.org/jessie/opam
> 
> Deprecating it, will prevent Debian Stable users to use the "easy to install" package.
> 
> Le mer. 6 juil. 2016 ? 10:29, Thomas Gazagnaire <thomas at gazagnaire.org> a ?crit :
> I think it is time to deprecate opam 1.2.0. What do you think?
> 
> See https://github.com/ocaml/opam-repository/pull/6888 for a recent issue: it doesn?t understand the `pinned` variable. This could be fixed by adding a rewriting layer between 1.2.2 and 1.2.0 and adding a redirection based on the version number (we already do that for opam 1.1) but that?s a lot of efforts for not much gains. So I?m in favour of simply not supporting 1.2.0 anymore.
> 
> If you are still using 1.2.0 please complain now :-)
> 
> Thomas
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel


From anil at recoil.org  Fri Jul 15 14:56:38 2016
From: anil at recoil.org (Anil Madhavapeddy)
Date: Fri, 15 Jul 2016 14:56:38 +0100
Subject: [opam-devel] deprecating opam 1.2.0
In-Reply-To: <65D2AEDD-123E-4A97-8467-9813AB4E1538@recoil.org>
References: <CAA92228-3FEA-46A7-9CE6-98DA50E99317@gazagnaire.org>
 <CAOCAUGNWg2JW1Tg-Km5WA6TDYaKsDgAqjkVFdk_=aj+CRb2Gqg@mail.gmail.com>
 <65D2AEDD-123E-4A97-8467-9813AB4E1538@recoil.org>
Message-ID: <9381A17C-51E2-4D78-B902-427526DFEB1F@recoil.org>

Also CCing Mehdi to see if we can get a backport of 1.2.2 to Debian Stable.

In the meanwhile, I've created (using my very limited Debian knowledge) a backport container at:
https://github.com/avsm/debian-jessie-backports-opam

that builds all the right Debs for Jessie.

If it's not practical to have an official backport, I will publish these somewhere and leave them automatically rebuilding. They currently backport too much though, since unfortunately there seems to be an ocamlfind > 1.5.1 dependency somewhere in the build chain that pulls in OCaml 4.02.3 for some reason  (not had time to investigate).

-a

> On 7 Jul 2016, at 11:15, Anil Madhavapeddy <anil at recoil.org> wrote:
> 
> CCing Stephane Glondu -- would it be possible to request a backport of 1.2.2 to Debian Stable?  It's the last major distro distributing the older version of OPAM, and it's an increasingly difficult maintenance burden for us.
> 
> regards,
> Anil
> 
>> On 7 Jul 2016, at 07:50, Sylvain Le Gall <sylvain+ocaml at le-gall.net> wrote:
>> 
>> opam 1.2.0 is the version distributed with Debian Jessie (current stable)
>> https://packages.debian.org/jessie/opam
>> 
>> Deprecating it, will prevent Debian Stable users to use the "easy to install" package.
>> 
>> Le mer. 6 juil. 2016 ? 10:29, Thomas Gazagnaire <thomas at gazagnaire.org> a ?crit :
>> I think it is time to deprecate opam 1.2.0. What do you think?
>> 
>> See https://github.com/ocaml/opam-repository/pull/6888 for a recent issue: it doesn?t understand the `pinned` variable. This could be fixed by adding a rewriting layer between 1.2.2 and 1.2.0 and adding a redirection based on the version number (we already do that for opam 1.1) but that?s a lot of efforts for not much gains. So I?m in favour of simply not supporting 1.2.0 anymore.
>> 
>> If you are still using 1.2.0 please complain now :-)
>> 
>> Thomas
>> _______________________________________________
>> opam-devel mailing list
>> opam-devel at lists.ocaml.org
>> http://lists.ocaml.org/listinfo/opam-devel
>> _______________________________________________
>> opam-devel mailing list
>> opam-devel at lists.ocaml.org
>> http://lists.ocaml.org/listinfo/opam-devel
> 
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel


From louis.gesbert at ocamlpro.com  Mon Jul 18 14:34:04 2016
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Mon, 18 Jul 2016 15:34:04 +0200
Subject: [opam-devel] opam 2.0~alpha2 -- an update on opam's current dev
	status
Message-ID: <2837346.ykpIdeTAkt@agaric>

Hi all,

We finally have a solution that I find satisfying to the larger blocker we had 
with opam 2.0 ? inconsistency of the use of `available:` fields based on a 
variable `ocaml-version` that couldn't be known before the `ocaml` package was 
installed. See below if you are interested in the details, I have said a few 
words about it here and there, but a summary is in order.

With this, and after a little bit more testing, I think we should be done with 
the large repository format changes and rewrites, and that alone is a good 
reason to release the too-long-awaited successor of 1.2.2. Adding the many, 
smaller and larger features you're all waiting for (local switches, per-switch 
remotes, etc., etc.) from there should be smoother and can be done 
incrementally.

For all users and testers of 2.0~alpha ? thank you ? the alpha2 changes the 
repository layout a bit, so when I merge and put the new repository rewrite in 
place on https://opam.ocaml.org/2.0~dev, you will need to update your version 
of opam (I don't want to spend time on maintaining repo mirrors at different 
dev versions, not counting the issues that might arise on the older versions).

Also, I think we should release opam 2.0 while the default repository is still 
an automatic rewrite of the 1.2 repository; then, take the time to put a 
reverse rewrite in place (the 1.2?2.0 rewrite is far from trivial, changing 
.comp to opam files, rewriting variables, changing formulas on variables into 
dependencies on packages, so this won't be easy). Once this is done, automatic 
testing follows and enough people have made the move, we can independently 
switch the format of the official opam-repository to 2.0.


---

Now for the technical details. The upcoming dev version creates 4 distinct 
`ocaml` packages:
- `ocaml-system`: an OCaml compiler from the system, outside of opam. There is 
an instance of the package for every OCaml release.
- `ocaml-base-compiler`: the "official" releases of OCaml, compiled from 
source by opam, with the corresponding version
- `ocaml-variants`: a single package for all "other" versions of OCaml, built 
by opam. The package versions have the form `OCAML_VERSION+VARIANT`, e.g. 
`4.02.3+fp`
- `ocaml`: a wrapper package that depends on one of the first three, for each 
OCaml release, mapping the versions in the case of `ocaml-variants`. For 
example, `ocaml.4.03.3` depends on `ocaml-system{=4.02.3} | ocaml-base-
compiler{=4.02.3} | ocaml-variants{>=4.02.3 & <4.02.4~}`. Additionally, the 
package runs an (ocaml) script that detects the specifics of the OCaml 
version, initialising package variables such as `ocaml:native-dynlink`?.

All of the first three are mutually conflicting, which is the reason for 
keeping all variants in a single package?. Any constraints on the OCaml 
version should now be expressed through a dependency to the `ocaml` package 
instead of the `available:` field.

To this point, this leaves us with the matter of the "system" compilers, which 
need to be selected manually. To this end, the following provides a nice 
solution, that doesn't rely on any OCaml-specific mechanism:
- support for "global" (i.e. not per-switch) opam variables, defined in 
~/.opam/config, is added
- ~/.opam/config has a field that allows to initialise those (lazily) from the 
output of a command (if the command fails or doesn't exist, the variable is 
simply left uninitialised)

Based on this, we define, in the configuration file, an `ocaml-sys-version` 
global variable bound to the output of `ocamlc -vnum`. Then we add a 
constraint `available: ocaml-sys-version = _:version` to the `ocaml-system` 
package. This way, only the installable ocaml-system package is visible, and 
additionally, if it changes, existing opam mechanisms will trigger an up/down-
grade to the correct version. Also, still using existing mechanisms, `opam 
switch ocaml-system` will pick the right version, while `opam switch 4.02.3` 
will either pick `ocaml-base-compiler` (if `ocaml-system.4.02.3` is not 
available) or state that the choice is ambiguous and ask to choose between 
`ocaml-system` and `ocaml-base-compiler` otherwise. In case the variable is 
not properly defined, the `ocaml-system` package won't be available, but it 
won't break anything besides.

We also extend the way in which such a variable can be initially defined in 
opam, by supporting an `init` file (e.g. ~/.opamrc or /etc/opamrc) that allows 
to choose, at `opam init` time, many ~/.opam/config options and e.g. the 
initial repositories to use. Opam has a default, built-in init file that binds 
to https://opam.ocaml.org and defines `ocaml-sys-version`, but this is better 
separated from the code, and easier to override, than before. 


Hope this all makes sense, comments welcome. All of this is already working, 
with the proper automatic rewrites, and just needs a little more polish before 
merging into master.

Best,
Louis


? Contrary to before, this never becomes a global variable and can be used in 
commands but never in the `available:` field.
? The `provides:` field would be a more elegant solution to this, but causes 
more problem than it solves; design work to have it in opam has advanced ? 
it's yet desirable for many reasons ? but let's keep matters separate.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 473 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20160718/e7b4ddbc/attachment.sig>

From louis.gesbert at ocamlpro.com  Fri Jul 22 12:31:21 2016
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Fri, 22 Jul 2016 13:31:21 +0200
Subject: [opam-devel] opam 2.0~alpha2 -- an update on opam's current dev
 status
In-Reply-To: <2837346.ykpIdeTAkt@agaric>
References: <2837346.ykpIdeTAkt@agaric>
Message-ID: <17494082.hmG40LNWOa@agaric>

This has now been merged, and the rewritten repository at https://opam.ocaml.org/2.0~dev (to which opam 2 is automatically redirected) is updated accordingly.

This means that anyone testing a 2.0~alpha development version (thanks!) will need to upgrade their opam when they want to do `opam update`. Thanks for your understanding, and enjoy the new version!


> - Louis Gesbert, 18/07/2016 15:34 -
> Hi all,
> 
> We finally have a solution that I find satisfying to the larger blocker we had 
> with opam 2.0 ? inconsistency of the use of `available:` fields based on a 
> variable `ocaml-version` that couldn't be known before the `ocaml` package was 
> installed. See below if you are interested in the details, I have said a few 
> words about it here and there, but a summary is in order.
> 
> With this, and after a little bit more testing, I think we should be done with 
> the large repository format changes and rewrites, and that alone is a good 
> reason to release the too-long-awaited successor of 1.2.2. Adding the many, 
> smaller and larger features you're all waiting for (local switches, per-switch 
> remotes, etc., etc.) from there should be smoother and can be done 
> incrementally.
> 
> For all users and testers of 2.0~alpha ? thank you ? the alpha2 changes the 
> repository layout a bit, so when I merge and put the new repository rewrite in 
> place on https://opam.ocaml.org/2.0~dev, you will need to update your version 
> of opam (I don't want to spend time on maintaining repo mirrors at different 
> dev versions, not counting the issues that might arise on the older versions).
> 
> Also, I think we should release opam 2.0 while the default repository is still 
> an automatic rewrite of the 1.2 repository; then, take the time to put a 
> reverse rewrite in place (the 1.2?2.0 rewrite is far from trivial, changing 
> .comp to opam files, rewriting variables, changing formulas on variables into 
> dependencies on packages, so this won't be easy). Once this is done, automatic 
> testing follows and enough people have made the move, we can independently 
> switch the format of the official opam-repository to 2.0.
> 
> 
> ---
> 
> Now for the technical details. The upcoming dev version creates 4 distinct 
> `ocaml` packages:
> - `ocaml-system`: an OCaml compiler from the system, outside of opam. There is 
> an instance of the package for every OCaml release.
> - `ocaml-base-compiler`: the "official" releases of OCaml, compiled from 
> source by opam, with the corresponding version
> - `ocaml-variants`: a single package for all "other" versions of OCaml, built 
> by opam. The package versions have the form `OCAML_VERSION+VARIANT`, e.g. 
> `4.02.3+fp`
> - `ocaml`: a wrapper package that depends on one of the first three, for each 
> OCaml release, mapping the versions in the case of `ocaml-variants`. For 
> example, `ocaml.4.03.3` depends on `ocaml-system{=4.02.3} | ocaml-base-
> compiler{=4.02.3} | ocaml-variants{>=4.02.3 & <4.02.4~}`. Additionally, the 
> package runs an (ocaml) script that detects the specifics of the OCaml 
> version, initialising package variables such as `ocaml:native-dynlink`?.
> 
> All of the first three are mutually conflicting, which is the reason for 
> keeping all variants in a single package?. Any constraints on the OCaml 
> version should now be expressed through a dependency to the `ocaml` package 
> instead of the `available:` field.
> 
> To this point, this leaves us with the matter of the "system" compilers, which 
> need to be selected manually. To this end, the following provides a nice 
> solution, that doesn't rely on any OCaml-specific mechanism:
> - support for "global" (i.e. not per-switch) opam variables, defined in 
> ~/.opam/config, is added
> - ~/.opam/config has a field that allows to initialise those (lazily) from the 
> output of a command (if the command fails or doesn't exist, the variable is 
> simply left uninitialised)
> 
> Based on this, we define, in the configuration file, an `ocaml-sys-version` 
> global variable bound to the output of `ocamlc -vnum`. Then we add a 
> constraint `available: ocaml-sys-version = _:version` to the `ocaml-system` 
> package. This way, only the installable ocaml-system package is visible, and 
> additionally, if it changes, existing opam mechanisms will trigger an up/down-
> grade to the correct version. Also, still using existing mechanisms, `opam 
> switch ocaml-system` will pick the right version, while `opam switch 4.02.3` 
> will either pick `ocaml-base-compiler` (if `ocaml-system.4.02.3` is not 
> available) or state that the choice is ambiguous and ask to choose between 
> `ocaml-system` and `ocaml-base-compiler` otherwise. In case the variable is 
> not properly defined, the `ocaml-system` package won't be available, but it 
> won't break anything besides.
> 
> We also extend the way in which such a variable can be initially defined in 
> opam, by supporting an `init` file (e.g. ~/.opamrc or /etc/opamrc) that allows 
> to choose, at `opam init` time, many ~/.opam/config options and e.g. the 
> initial repositories to use. Opam has a default, built-in init file that binds 
> to https://opam.ocaml.org and defines `ocaml-sys-version`, but this is better 
> separated from the code, and easier to override, than before. 
> 
> 
> Hope this all makes sense, comments welcome. All of this is already working, 
> with the proper automatic rewrites, and just needs a little more polish before 
> merging into master.
> 
> Best,
> Louis
> 
> 
> ? Contrary to before, this never becomes a global variable and can be used in 
> commands but never in the `available:` field.
> ? The `provides:` field would be a more elegant solution to this, but causes 
> more problem than it solves; design work to have it in opam has advanced ? 
> it's yet desirable for many reasons ? but let's keep matters separate.

From louis.gesbert at ocamlpro.com  Fri Jul 22 15:37:37 2016
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Fri, 22 Jul 2016 16:37:37 +0200
Subject: [opam-devel] opam 2.0~alpha2 -- an update on opam's current dev
 status
In-Reply-To: <17494082.hmG40LNWOa@agaric>
References: <2837346.ykpIdeTAkt@agaric> <17494082.hmG40LNWOa@agaric>
Message-ID: <4653121.YhWphaVzN7@agaric>

Note that you may have issues with opam files from the older version that have availability constraints on `ocaml-version`, e.g. the ones found in package sources when pinning. Indeed, since `ocaml-version` is no longer defined as a variable, the packages will become unavailable.

An easy workaround is to define it manually as a switch variable:

    opam config set ocaml-version $(ocamlc -vnum)

Otherwise, what should be done once 2.0 is mainstream is:
- replace availability constraints with `depends: "ocaml" {version-constraint}`
- replace other uses of `ocaml-version` by `ocaml:version` (i.e. the currently installed version of package "ocaml")

(that's basically what `opam-admin upgrade-format` does)

> - Louis Gesbert, 22/07/2016 13:31 -
> This has now been merged, and the rewritten repository at https://opam.ocaml.org/2.0~dev (to which opam 2 is automatically redirected) is updated accordingly.
> 
> This means that anyone testing a 2.0~alpha development version (thanks!) will need to upgrade their opam when they want to do `opam update`. Thanks for your understanding, and enjoy the new version!
> 
> 
> > - Louis Gesbert, 18/07/2016 15:34 -
> > Hi all,
> > 
> > We finally have a solution that I find satisfying to the larger blocker we had 
> > with opam 2.0 ? inconsistency of the use of `available:` fields based on a 
> > variable `ocaml-version` that couldn't be known before the `ocaml` package was 
> > installed. See below if you are interested in the details, I have said a few 
> > words about it here and there, but a summary is in order.
> > 
> > With this, and after a little bit more testing, I think we should be done with 
> > the large repository format changes and rewrites, and that alone is a good 
> > reason to release the too-long-awaited successor of 1.2.2. Adding the many, 
> > smaller and larger features you're all waiting for (local switches, per-switch 
> > remotes, etc., etc.) from there should be smoother and can be done 
> > incrementally.
> > 
> > For all users and testers of 2.0~alpha ? thank you ? the alpha2 changes the 
> > repository layout a bit, so when I merge and put the new repository rewrite in 
> > place on https://opam.ocaml.org/2.0~dev, you will need to update your version 
> > of opam (I don't want to spend time on maintaining repo mirrors at different 
> > dev versions, not counting the issues that might arise on the older versions).
> > 
> > Also, I think we should release opam 2.0 while the default repository is still 
> > an automatic rewrite of the 1.2 repository; then, take the time to put a 
> > reverse rewrite in place (the 1.2?2.0 rewrite is far from trivial, changing 
> > .comp to opam files, rewriting variables, changing formulas on variables into 
> > dependencies on packages, so this won't be easy). Once this is done, automatic 
> > testing follows and enough people have made the move, we can independently 
> > switch the format of the official opam-repository to 2.0.
> > 
> > 
> > ---
> > 
> > Now for the technical details. The upcoming dev version creates 4 distinct 
> > `ocaml` packages:
> > - `ocaml-system`: an OCaml compiler from the system, outside of opam. There is 
> > an instance of the package for every OCaml release.
> > - `ocaml-base-compiler`: the "official" releases of OCaml, compiled from 
> > source by opam, with the corresponding version
> > - `ocaml-variants`: a single package for all "other" versions of OCaml, built 
> > by opam. The package versions have the form `OCAML_VERSION+VARIANT`, e.g. 
> > `4.02.3+fp`
> > - `ocaml`: a wrapper package that depends on one of the first three, for each 
> > OCaml release, mapping the versions in the case of `ocaml-variants`. For 
> > example, `ocaml.4.03.3` depends on `ocaml-system{=4.02.3} | ocaml-base-
> > compiler{=4.02.3} | ocaml-variants{>=4.02.3 & <4.02.4~}`. Additionally, the 
> > package runs an (ocaml) script that detects the specifics of the OCaml 
> > version, initialising package variables such as `ocaml:native-dynlink`?.
> > 
> > All of the first three are mutually conflicting, which is the reason for 
> > keeping all variants in a single package?. Any constraints on the OCaml 
> > version should now be expressed through a dependency to the `ocaml` package 
> > instead of the `available:` field.
> > 
> > To this point, this leaves us with the matter of the "system" compilers, which 
> > need to be selected manually. To this end, the following provides a nice 
> > solution, that doesn't rely on any OCaml-specific mechanism:
> > - support for "global" (i.e. not per-switch) opam variables, defined in 
> > ~/.opam/config, is added
> > - ~/.opam/config has a field that allows to initialise those (lazily) from the 
> > output of a command (if the command fails or doesn't exist, the variable is 
> > simply left uninitialised)
> > 
> > Based on this, we define, in the configuration file, an `ocaml-sys-version` 
> > global variable bound to the output of `ocamlc -vnum`. Then we add a 
> > constraint `available: ocaml-sys-version = _:version` to the `ocaml-system` 
> > package. This way, only the installable ocaml-system package is visible, and 
> > additionally, if it changes, existing opam mechanisms will trigger an up/down-
> > grade to the correct version. Also, still using existing mechanisms, `opam 
> > switch ocaml-system` will pick the right version, while `opam switch 4.02.3` 
> > will either pick `ocaml-base-compiler` (if `ocaml-system.4.02.3` is not 
> > available) or state that the choice is ambiguous and ask to choose between 
> > `ocaml-system` and `ocaml-base-compiler` otherwise. In case the variable is 
> > not properly defined, the `ocaml-system` package won't be available, but it 
> > won't break anything besides.
> > 
> > We also extend the way in which such a variable can be initially defined in 
> > opam, by supporting an `init` file (e.g. ~/.opamrc or /etc/opamrc) that allows 
> > to choose, at `opam init` time, many ~/.opam/config options and e.g. the 
> > initial repositories to use. Opam has a default, built-in init file that binds 
> > to https://opam.ocaml.org and defines `ocaml-sys-version`, but this is better 
> > separated from the code, and easier to override, than before. 
> > 
> > 
> > Hope this all makes sense, comments welcome. All of this is already working, 
> > with the proper automatic rewrites, and just needs a little more polish before 
> > merging into master.
> > 
> > Best,
> > Louis
> > 
> > 
> > ? Contrary to before, this never becomes a global variable and can be used in 
> > commands but never in the `available:` field.
> > ? The `provides:` field would be a more elegant solution to this, but causes 
> > more problem than it solves; design work to have it in opam has advanced ? 
> > it's yet desirable for many reasons ? but let's keep matters separate.
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
> 

