From louis.gesbert at ocamlpro.com  Tue Mar  3 04:29:15 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Tue, 03 Mar 2015 13:29:15 +0900
Subject: [opam-devel] OPAM 1.2.1, release candidate
Message-ID: <1686064.UycOaqsr7s@agaric>

After quite some polishing over the 1.2.1 betas, it seems we are ready for a nice 1.2.1 release. Now is the time to test it and report any last issues before we get it out !

Release page: https://github.com/ocaml/opam/releases/tag/1.2.1-rc

Thanks !

Louis

From hannes at mehnert.org  Tue Mar 10 18:33:55 2015
From: hannes at mehnert.org (Hannes Mehnert)
Date: Tue, 10 Mar 2015 18:33:55 +0000
Subject: [opam-devel] Package signing (was Re:  OPAM 1.3 roadmap)
In-Reply-To: <2524731.qnNM7Xpy0S@agaric>
References: <1709176.A7TcrPyoj4@agaric>
 <ABCB46D0-899C-443A-9C2C-E1D09E3745C5@recoil.org> <2524731.qnNM7Xpy0S@agaric>
Message-ID: <54FF3913.4030307@mehnert.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA384

Dear all,

let me try to propose package signing for opam (by first briefly
mentioning the current state) - and raise some outstanding questions I
currently have.  This is orthogonal to the sandboxing discussion (I
appreciate if the opam building process uses sandboxing to disallow
access to the file system and socket communication). Sorry for the
length of the mail. The system is very much TUF, but adapted for
opam's requirements.

## Current state

Please correct me if I'm wrong and/or direct me to documentation,
focussing on the 'standard' http repo:
 - the main repository (https://opam.ocaml.org) is downloaded
(core/opamSystem.ml) using either wget, curl or OpamGlobals.curl_command
[arguments passed are --no-check-certificate/--insecure]
  -> how is the sync from github done?
 - this contains of:
  a) packages (consisting of opam and checksum, plus arbitrary scripts)
  b) version
  c) config

Is only index.tar.gz downloaded? Or the full file list?

The file urls.txt contains:
 - package file names, md5, permission
 - archives/packagename+opam, md5, permission

This is generated by repositories/opamHTTP.ml. Where does the archives
information come from?

When a package is installed, the archive is downloaded either from a
mirror (this +opam url) or from the url in the package description.
Why is there repacking done and +opam URLs? Why do the md5 strings of
archives/foo/foo.x+opam.tar.gz and packages/foo/foo.x/url not match?

Thus, currently the opam repository server has to be trusted, and also
the transport layer is not authenticated (thus, a MITM might be in the
way).

On 02/23/2015 01:07, Louis Gesbert wrote:
> # Secure the repository and updates:
> 
> Integrate some implementation of TUF to have signed packages,
> signed metadata and signed timestamps, and allow OPAM to detect
> anything suspicious. This implies: * defining a signing and
> repository update workflow, adding as little burden as possible *
> update opam-admin to apply the signing rules * obviously, update
> opam to check all that * update opam-publish (?) to help contribute
> signed packages, depending on the chosen workflow

## (Unfortunately incomplete) proposal
What is the threat model? I personally would prefer to not have to trust
the repository server.

How to get there? Each package has to be signed by its maintainer.

Maintainer workload:
Instead of generating a md5 sum, a digital signature is generated over
all files which are relevant for the given package. This includes the
opam file (because it can execute (arbitrary?) commands during
building), patches, ... Instead of the md5, this signature is pushed
to the repository.

User experience:
Opam checks the digital signature of the package and refuses
installation on mismatch.

The transport layer between repository and user does not need to be
secured and authenticated at all! While mirrors themselves will
continue to work, repackaging of tarballs won't (unless these are
signed, and in general we try to minimize online systems which have
access to private keys).

## Key management
I use "user" for the person who wants to install a package on their
computer, and "maintainer" for the person who releases and pushes
packages.

Key management is the tricky bit!  Each repository is rooted in a
single key, which is used to sign delegation of packaging roles.  Opam
distributes the public key of its main repository with its source and
binary.  For alternative repositories, these root keys have to be
distributed and verified on a second channel (or cross signed by the
master opam repository!).  The root key is most of the time offline.

Each maintainer has a key.  opam-publish uses this to sign the package
contents.  A maintainer has to get verified out-of-band, and is then
legible to push updates for the single package.  Of course, a
maintainer can lose their key (or it might get stolen).  Therefore,
revocation must be a first-class citizen within the system (and always
delivered with repository updates).  There can also be various levels
- -- claimed/unclaimed/recently claimed (from
http://legacy.python.org/dev/peps/pep-0480/).

A user's opam uses the root key to verify the correct and legible
signature on a package.

A timestamp server signs the entire repository content every hour
(thus a) a user can detect if an attacker tries to present old
packages; and b) mix-and-match attacks are impossible)

## Trust
The time of the users system must be strictly increasing and should be
the same as the repository/timestamp server.

## Open questions
Maintainer M of package X releases a version 1.0.  It is obvious that
package Y, maintained by N, requires from now on a version constraint
< 1.0.  Should M be able to include this constraint update into the
pull request, and sign this?  Or should N intervene?  At the moment,
in opam-repository people != maintainer push such changes (which I
think is good for quick evolution and quick fixes).  Maybe a group of
'core' maintainers who can sign (only such constraint updates!?!)
should be defined (but certainly their keys are more attractive to
steal then).

Which trust model to use?  Verify key via email, web portal, or in
person by already existing maintainers (web of trust)?  Should a user
be able to blacklist and whitelist specific keys?

Is it worth to investigate GnuPG integration (signing git commits?)?
In my opinion it is not.

Can we require maintainers to use opam-publish?  Obviously there'll be
pure command-line ways to achieve the same result.

We should require maintainers to sign their packages (making it very
easy and flawless), otherwise we have a huge set of users who will
just accept everything (signed and unsigned packages) and the actual
security gains are negligable.

## Dependencies
Should opam rely on command-line utilities, as it does atm with
wget/curl?  Or should it prefer to use OCaml libraries which provide
cryptographic functionality (such as hashing and asymmetric operations)?

While I certainly prefer the latter, I'd love to hear from opam
developers what they think about it.


Let me know what you think of it!

hannes
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCQAGBQJU/zkTAAoJELyJZYjffCju8mIQAKrlHiRjsdc1cYu7lHAShRcR
3xYY6W6zuBh5ILyLQyuF146wvvTalf31xsRmKWbeQeAY+rNImzD4vCgYbD1AHhHA
GLM1bK37tXBRnDd2VROCW0RRnTHNPhqCya60JqYXzQpHwZEQnwIoz8/qgoMY8Yru
Yet8g3+axF7LMQ5RGdM1TUBz53EciZihbv6vG3HC10Msg8d1K5dXivAzBVGYRvfM
ByMw86l81RdlEzZgcz9cPsHeeWIIat5v5scVUT/ogbAewmIpPirOMYNLYxayliu5
FDV1kybW45WnpCmBGxQ5d6bbJxQx0atrSGwJjGbKTC2hvICyHq6p8jSrjxwvs1TW
0inm9tFzGFQ4AJkXEIcBJSV1qdOfjKJpUAaGr186fyix+nnlBXT642zz3DJjxnWQ
QIpWfJMMmC8IgsLbdxd41Idl75M6r1b8StuKBuKbWyjd0M7GMsch9oday02at8hf
RXwwIdvxSW0LdCaJoszpV9gb4ulA3NcXE5ZVH0YO347SLc7NlOnNfL68DHgSV23v
fkKgPFDcPeKUxqY49P66f0N7it1I4MgjTiq3aHpNL27JPAoZsOe4/zvQaU6E6T5U
j9HB8cLTXJEhKWVkHkhKpKxHQhV1ugOYGjlG9paz4QHb81lupT2/J0hOkcwSjcms
5NSI8R9zJRKQIh6q/Egf
=G57e
-----END PGP SIGNATURE-----

From louis.gesbert at ocamlpro.com  Wed Mar 11 02:39:22 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Wed, 11 Mar 2015 11:39:22 +0900
Subject: [opam-devel] Package signing (was Re:  OPAM 1.3 roadmap)
In-Reply-To: <54FF3913.4030307@mehnert.org>
References: <1709176.A7TcrPyoj4@agaric> <2524731.qnNM7Xpy0S@agaric>
 <54FF3913.4030307@mehnert.org>
Message-ID: <6257682.bRB5lkC42o@agaric>

Good timing: I already spent some time documenting myself on this and started thinking on the design for a signed OPAM repo -- so we're just getting in sync. I'd very much like to discuss these issues directly some time soon.

# On the current state

the current client-server protocol and repackaging of archives are kind of there by legacy more than by design, and this could be a good opportunity to improve on them -- so we shouldn't let them get in the way. We can break the repository handling for 1.3 and have 1.2 keep working on a backwards compatible mirror, like 1.1 does now (hm, hopefully better ; for that we'll need to keep a compatible (but possibly minimal) `/urls.txt` file on the new repo -- it's always downloaded first -- and have a redirect in the `/repo` file).

I've recently documented the repository format a bit at [1], but here is some more detail:
* The repository updates are handled by the scripts at https://github.com/ocaml/opam.ocaml.org, and rely on opam-admin (src/tools on the opam github repo):
  - The github repository is updated using `git fetch`
  - opam-admin scans changed checksums in url files (using the previously generated urls.txt) and downloads all corresponding package archives from their upstream
  - these archives are uncompressed, the files in the packages' metadata `files/` subdirectory are copied over, and it's repackaged as an `archives/pkgname.version+opam.tar.gz` archive. I don't think this last step is really needed anymore (see #1090).
  - a new `urls.txt` is generated, with checksums of all files on the repo (excluding itself, obviously). So the checksums in there replace those from the packages' url files for matters of checking repackaged `+opam.tar.gz` archives.
  - all metadata (ie all but `+opam.tar.gz` archives) is bundled into an `index.tar.gz` file
  - the doc pages and blog are generated at this stage and added to the directory, too

Once this is done, the newly generated repository directory is swapped with the old one. This doesn't guarantee consistency of sessions for people who would have already downloaded the `urls.txt` file. This is run every hour at *:15.

* The client repository updates proceed as follows (over http only, for rsync, git etc., we just pull the changes and don't need `urls.txt` or `index.tar.gz`):
  - `urls.txt` is downloaded (using http compression if available)
  - if the number of new/missing files (excl. archives) is lower than a threshold, download them individually
  - otherwise, download `index.tar.gz` and uncompress it in place of the previous repository image

It's not a very advanced rsync protocol, just a quick way to handle updates that we started with, and while the repository was quite small.

* And the client package downloads:
  - an `archives/pkg.version+opam.tar.gz` file is looked up from the repository, in case it acts as mirror (this is done also for non HTTP repos).
  - if not found, the upstream archive mentionned in the package's `url` file is download
  - the md5 is checked against the one in the repos' `urls.txt` or the package's `url` file

The http download command is fully customisable (since last week!), but you're right with the defaults: `curl --insecure` if found, `wget --no-check-certificate` otherwise (or if on a mac, since recently as well, to workaround a curl bug). OpamGlobals.curl_command would be added curl command-line arguments, see OPAMFETCH in the new manpage for the new possibilities. 

[1] http://opam.ocaml.org/doc/Manual.html#IndexesandservingoverHTTPS


# Proposal (just random remarks)

Threat model:
* an attacker can compromise the repository
* an attacker can steal individual developper keys

Package signature: this should probably sign over
* the package definition, excluding the url file (everything under `~repo/packages/<pkg>/<pkg>.<version>/`)
* the upstream package archive (and possibly its url and mirrors ?)

Key delegation:
* We can simply delegate to sub-directories of the repository
* OPAM should probably be changed not to accept package definitions anywhere in the hierarchy then (I _think_ `~repo/foo/foo.1/bar.1/` would work as a definition for `bar.1` at the moment, OPAM makes no assumptions on the hierarchy)

Root key:
* TUF propoposes several root keys with a threshold. That could be a nice security since it makes revocation of root keys possible.

claimed/unclaimed/recently claimed maintainer keys (from Python's pep480):
* I think we'll need some kind of 'unclaimed' at least to ensure the progressive migration to signed packages, having all maintainers sign up-front before rolling 1.3 sounds difficult. Then we don't have Pypi's flow of incoming packages, so we may not need as much infrastructure -- having a default delegated maintainer could be enough.

Timestamp server:
* I'd love to see that done by a unikernel that fetches from github, signs, then pushes back to the repository HTTP server. Still needs to get its key from somewhere though.


# open questions

* Allowing non-maintainer updates: I have been wondering about this as well. It's not easy, and modification of dependency constraints can be an attack vector already (adding a dep to a compromised package, or even an unsafe older package version). Sometimes, there is also a trivial packaging bug, and the repository maintainers should be able to fix it if the package maintainer is not responsive enough. We could try and detect 'innocuous' changes, but that sounds like something that can get too complex very quickly and will open more weaknesses. No better solution than letting the modified package get signed by a general repository maintainer, maybe with a time window for the rightful owner to sign it ? I'll think some more about it.

* The way the community works at the moment, verifying keys through mail / github / IRC sounds ok to begin with.

* Signed git commits. I kind of like the idea but don't see how it could get involved in this either.

* opam-publish: I'd like to see it get more widely used. Maybe I should make it more clear that the first step (`opam publish prepare`) only gathers metadata locally and is very generic, while the second (`opam publish submit`) is github specific and bound to opam-repository by default. Anyway, the signing process will be open and should be reproducible by hand, with minimum hassle. But having opam-publish generate, and manage keys would be a definite gain in usability IMO.

* We should require maintainers to sign their packages -> the clients shouldn't accept unsigned packages by default, but there could be "unclaimed" (repository maintainer handled) signatures on the repo to begin with.

* dependencies to command-line utilities: OPAM's parallel command engine relies on parallelism at the sub-process level (we don't want to embed lwt into OPAM); but having our own download handling would certainly help with several issues, also including portability.


# some more

* Would we want to use the TUF specified json format ?

* Last, I'd like your advice and opinion on the algorithms and signing to use. Small elliptic-curve based signature (ed25519) seem to be all the hype now with stuff like signify or minilock. What is the state of what we currently have in native OCaml, and what would you recommend ?


Thanks for giving a hand in this!
Louis



> - Hannes Mehnert, 10/03/2015 18:33 -
> ## Current state
> 
> Please correct me if I'm wrong and/or direct me to documentation,
> focussing on the 'standard' http repo:
>  - the main repository (https://opam.ocaml.org) is downloaded
> (core/opamSystem.ml) using either wget, curl or OpamGlobals.curl_command
> [arguments passed are --no-check-certificate/--insecure]
>   -> how is the sync from github done?
>  - this contains of:
>   a) packages (consisting of opam and checksum, plus arbitrary scripts)
>   b) version
>   c) config
> 
> Is only index.tar.gz downloaded? Or the full file list?
> 
> The file urls.txt contains:
>  - package file names, md5, permission
>  - archives/packagename+opam, md5, permission
> 
> This is generated by repositories/opamHTTP.ml. Where does the archives
> information come from?
> 
> When a package is installed, the archive is downloaded either from a
> mirror (this +opam url) or from the url in the package description.
> Why is there repacking done and +opam URLs? Why do the md5 strings of
> archives/foo/foo.x+opam.tar.gz and packages/foo/foo.x/url not match?
> 
> Thus, currently the opam repository server has to be trusted, and also
> the transport layer is not authenticated (thus, a MITM might be in the
> way).
> 
> On 02/23/2015 01:07, Louis Gesbert wrote:
> > # Secure the repository and updates:
> >
> > Integrate some implementation of TUF to have signed packages,
> > signed metadata and signed timestamps, and allow OPAM to detect
> > anything suspicious. This implies: * defining a signing and
> > repository update workflow, adding as little burden as possible *
> > update opam-admin to apply the signing rules * obviously, update
> > opam to check all that * update opam-publish (?) to help contribute
> > signed packages, depending on the chosen workflow
> 
> ## (Unfortunately incomplete) proposal
> What is the threat model? I personally would prefer to not have to trust
> the repository server.
> 
> How to get there? Each package has to be signed by its maintainer.
> 
> Maintainer workload:
> Instead of generating a md5 sum, a digital signature is generated over
> all files which are relevant for the given package. This includes the
> opam file (because it can execute (arbitrary?) commands during
> building), patches, ... Instead of the md5, this signature is pushed
> to the repository.
> 
> User experience:
> Opam checks the digital signature of the package and refuses
> installation on mismatch.
> 
> The transport layer between repository and user does not need to be
> secured and authenticated at all! While mirrors themselves will
> continue to work, repackaging of tarballs won't (unless these are
> signed, and in general we try to minimize online systems which have
> access to private keys).
> 
> ## Key management
> I use "user" for the person who wants to install a package on their
> computer, and "maintainer" for the person who releases and pushes
> packages.
> 
> Key management is the tricky bit!  Each repository is rooted in a
> single key, which is used to sign delegation of packaging roles.  Opam
> distributes the public key of its main repository with its source and
> binary.  For alternative repositories, these root keys have to be
> distributed and verified on a second channel (or cross signed by the
> master opam repository!).  The root key is most of the time offline.
> 
> Each maintainer has a key.  opam-publish uses this to sign the package
> contents.  A maintainer has to get verified out-of-band, and is then
> legible to push updates for the single package.  Of course, a
> maintainer can lose their key (or it might get stolen).  Therefore,
> revocation must be a first-class citizen within the system (and always
> delivered with repository updates).  There can also be various levels
> -- claimed/unclaimed/recently claimed (from
> http://legacy.python.org/dev/peps/pep-0480/).
> 
> A user's opam uses the root key to verify the correct and legible
> signature on a package.
> 
> A timestamp server signs the entire repository content every hour
> (thus a) a user can detect if an attacker tries to present old
> packages; and b) mix-and-match attacks are impossible)
> 
> ## Trust
> The time of the users system must be strictly increasing and should be
> the same as the repository/timestamp server.
> 
> ## Open questions
> Maintainer M of package X releases a version 1.0.  It is obvious that
> package Y, maintained by N, requires from now on a version constraint
> < 1.0.  Should M be able to include this constraint update into the
> pull request, and sign this?  Or should N intervene?  At the moment,
> in opam-repository people != maintainer push such changes (which I
> think is good for quick evolution and quick fixes).  Maybe a group of
> 'core' maintainers who can sign (only such constraint updates!?!)
> should be defined (but certainly their keys are more attractive to
> steal then).
> 
> Which trust model to use?  Verify key via email, web portal, or in
> person by already existing maintainers (web of trust)?  Should a user
> be able to blacklist and whitelist specific keys?
> 
> Is it worth to investigate GnuPG integration (signing git commits?)?
> In my opinion it is not.
> 
> Can we require maintainers to use opam-publish?  Obviously there'll be
> pure command-line ways to achieve the same result.
> 
> We should require maintainers to sign their packages (making it very
> easy and flawless), otherwise we have a huge set of users who will
> just accept everything (signed and unsigned packages) and the actual
> security gains are negligable.
> 
> ## Dependencies
> Should opam rely on command-line utilities, as it does atm with
> wget/curl?  Or should it prefer to use OCaml libraries which provide
> cryptographic functionality (such as hashing and asymmetric operations)?
> 
> While I certainly prefer the latter, I'd love to hear from opam
> developers what they think about it.
> 
> 
> Let me know what you think of it!
> 
> hannes
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
> 

From daniel.buenzli at erratique.ch  Wed Mar 11 03:49:28 2015
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Wed, 11 Mar 2015 04:49:28 +0100
Subject: [opam-devel] Package signing (was Re: OPAM 1.3 roadmap)
In-Reply-To: <6257682.bRB5lkC42o@agaric>
References: <1709176.A7TcrPyoj4@agaric> <2524731.qnNM7Xpy0S@agaric>
 <54FF3913.4030307@mehnert.org> <6257682.bRB5lkC42o@agaric>
Message-ID: <69D8D4D5640043FF96021F66EC579D3E@erratique.ch>

Le mercredi, 11 mars 2015 ? 03:39, Louis Gesbert a ?crit :
> * the upstream package archive (and possibly its url and mirrors ?)

If we trust the hash function (i.e. not md5) signing the hash of the archive seems sufficient no ? We don't really care where it comes from, we care about the content.  
  
> No better solution than letting the modified package get signed by a general repository maintainer, maybe with a time window for the rightful owner to sign it ? I'll think some more about it.

This seems ok to me and rather an UI issue. E.g. as a repo end-user I'd like to be informed of the fact ("the meta data has been modified by the repo maintainer X") on installs/upgrades. As a package maintainer I'd like to be notified of the change and be able to agree to the change by signing the change after having authenticated it (through a single command line invocation !) at which point the end-user warning should disappear for him on further repo updates.

> Anyway, the signing process will be open and should be reproducible by hand, with minimum hassle.  
Yes.
  
> But having opam-publish generate, and manage keys would be a definite gain in usability IMO.

Or opam itself.  
  
> * We should require maintainers to sign their packages -> the clients shouldn't accept unsigned packages by default, but there could be "unclaimed" (repository maintainer handled) signatures on the repo to begin with.

What about pins ? This is where git signed commit could be interesting.
  
> * Last, I'd like your advice and opinion on the algorithms and signing to use. Small elliptic-curve based signature (ed25519) seem to be all the hype now with stuff like signify or minilock. What is the state of what we currently have in native OCaml, and what would you recommend ?

One note about that, I'm personally not very cryptographically advanced and don't use the gpg stuff but with the years one thing I got to know a bit the ssh key-based authentication infrastructure. I don't know if that's a good idea or not but maybe we could try to hook in that infrastructure as I suspect a lot of devs are familiar with it and it would avoid creating one more of these "be careful" directories. Besides it could provide OS level ssh-agent integration which is quite handy from an UI point view (which is one of my fear in all this, there's already so much publication bureaucracy).  

Best,

Daniel



From louis.gesbert at ocamlpro.com  Wed Mar 11 04:47:48 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Wed, 11 Mar 2015 13:47:48 +0900
Subject: [opam-devel] Package signing (was Re: OPAM 1.3 roadmap)
In-Reply-To: <69D8D4D5640043FF96021F66EC579D3E@erratique.ch>
References: <1709176.A7TcrPyoj4@agaric> <6257682.bRB5lkC42o@agaric>
 <69D8D4D5640043FF96021F66EC579D3E@erratique.ch>
Message-ID: <2097370.S2boEECd66@agaric>

> - Daniel B?nzli, 11/03/2015 04:49 -
> Le mercredi, 11 mars 2015 ? 03:39, Louis Gesbert a ?crit :
> > * the upstream package archive (and possibly its url and mirrors ?)
> 
> If we trust the hash function (i.e. not md5) signing the hash of the archive seems sufficient no ? We don't really care where it comes from, we care about the content.  

An attacker could then divert the download attempts to any url; mostly harmless, I can't imagine leveraging this for a DDos. But it can still prevent you from updating, without knowing the reason.
Another attack mentionned by TUF is feeding an infinite datastream to the download (blocking the update, possibly filling the disk and causing trouble) ; so we should be sure to include the file size somewhere.


> > No better solution than letting the modified package get signed by a general repository maintainer, maybe with a time window for the rightful owner to sign it ? I'll think some more about it.
> 
> This seems ok to me and rather an UI issue. E.g. as a repo end-user I'd like to be informed of the fact ("the meta data has been modified by the repo maintainer X") on installs/upgrades. As a package maintainer I'd like to be notified of the change and be able to agree to the change by signing the change after having authenticated it (through a single command line invocation !) at which point the end-user warning should disappear for him on further repo updates.

That sounds like a fair workflow. There could be automatic maintainer notifications for such cases (by mail, and why not on github, but we shall not depend on it)

> > But having opam-publish generate, and manage keys would be a definite gain in usability IMO.
> 
> Or opam itself.  

Worth considering, but OPAM doesn't do anything related to packaging and publishing at the moment (unless you count package pinning): it could be in the same program but in clearly separated modules.

   
> > * We should require maintainers to sign their packages -> the clients shouldn't accept unsigned packages by default, but there could be "unclaimed" (repository maintainer handled) signatures on the repo to begin with.
> 
> What about pins ? This is where git signed commit could be interesting.

Pinning allows you to specify any source of your choice for a package, and to modify it. Adding signatures there sounds cumbersome -- we may put a warning on pinning to a remote source ("you're leaving OPAM-secured territory") but relying on the underlying security (e.g. git+ssh) sounds OK to me at the moment. I don't grasp where exactly signed commits would articulate.

> > * Last, I'd like your advice and opinion on the algorithms and signing to use. Small elliptic-curve based signature (ed25519) seem to be all the hype now with stuff like signify or minilock. What is the state of what we currently have in native OCaml, and what would you recommend ?
> 
> One note about that, I'm personally not very cryptographically advanced and don't use the gpg stuff but with the years one thing I got to know a bit the ssh key-based authentication infrastructure. I don't know if that's a good idea or not but maybe we could try to hook in that infrastructure as I suspect a lot of devs are familiar with it and it would avoid creating one more of these "be careful" directories. Besides it could provide OS level ssh-agent integration which is quite handy from an UI point view (which is one of my fear in all this, there's already so much publication bureaucracy).  

Not sure if using the same key for signing and e.g. pushing to github over ssh can be an issue or not. On the publication bureaucracy, that's very high in my concerns indeed -- ssh-agent sounds handy indeed, but I'll let Hannes give advice on that. I haven't heard of using the ssh rsa private key for signing, so there might be a reason for that...

Cheers,
Louis

From hannes at mehnert.org  Wed Mar 11 11:53:34 2015
From: hannes at mehnert.org (Hannes Mehnert)
Date: Wed, 11 Mar 2015 11:53:34 +0000
Subject: [opam-devel] Package signing (was Re:  OPAM 1.3 roadmap)
In-Reply-To: <6257682.bRB5lkC42o@agaric>
References: <1709176.A7TcrPyoj4@agaric> <2524731.qnNM7Xpy0S@agaric>
 <54FF3913.4030307@mehnert.org> <6257682.bRB5lkC42o@agaric>
Message-ID: <55002CBE.3050805@mehnert.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA384

On 03/11/2015 02:39, Louis Gesbert wrote:
> # On the current state
> 
> the current client-server protocol and repackaging of archives are
> kind of there by legacy more than by design, and this could be a
> good opportunity to improve on them

great to hear.

> # Proposal (just random remarks)
> 
> Threat model: * an attacker can compromise the repository

what does this mean? as mentioned, I'd prefer to have the repository
being untrusted.

> Package signature: this should probably sign over * the package
> definition, excluding the url file (everything under
> `~repo/packages/<pkg>/<pkg>.<version>/`) * the upstream package
> archive (and possibly its url and mirrors ?)

I'd hash all the files of the package definition, and the tarball, and
keep a list in the file "checksums":
<name>,<size>,[<hash-algorithm>,<hash-value>]+

thus, replacement (or multiple) hash algorithms can be used. the
<checksum> in url is no longer needed.

let's start with SHA-256. signature is made on the SHA-256 hash of
"checksums".

> Key delegation: * We can simply delegate to sub-directories of the
> repository * OPAM should probably be changed not to accept package
> definitions anywhere in the hierarchy then (I _think_
> `~repo/foo/foo.1/bar.1/` would work as a definition for `bar.1` at
> the moment, OPAM makes no assumptions on the hierarchy)

both good points.

> Root key: * TUF propoposes several root keys with a threshold. That
> could be a nice security since it makes revocation of root keys
> possible.

agreed.

> claimed/unclaimed/recently claimed maintainer keys (from Python's
> pep480): * I think we'll need some kind of 'unclaimed' at least to
> ensure the progressive migration to signed packages, having all
> maintainers sign up-front before rolling 1.3 sounds difficult. Then
> we don't have Pypi's flow of incoming packages, so we may not need
> as much infrastructure -- having a default delegated maintainer
> could be enough.

true.

> Timestamp server: * I'd love to see that done by a unikernel that
> fetches from github, signs, then pushes back to the repository HTTP
> server. Still needs to get its key from somewhere though.

in fact, that was my idea as well.

> # open questions
> 
> * Allowing non-maintainer updates: I have been wondering about this
> as well. It's not easy, and modification of dependency constraints
> can be an attack vector already (adding a dep to a compromised
> package, or even an unsafe older package version). Sometimes, there
> is also a trivial packaging bug, and the repository maintainers
> should be able to fix it if the package maintainer is not
> responsive enough. We could try and detect 'innocuous' changes, but
> that sounds like something that can get too complex very quickly
> and will open more weaknesses. No better solution than letting the
> modified package get signed by a general repository maintainer,
> maybe with a time window for the rightful owner to sign it ? I'll
> think some more about it.

sounds good.

> * opam-publish: I'd like to see it get more widely used. Maybe I
> should make it more clear that the first step (`opam publish
> prepare`) only gathers metadata locally and is very generic, while
> the second (`opam publish submit`) is github specific and bound to
> opam-repository by default. Anyway, the signing process will be
> open and should be reproducible by hand, with minimum hassle. But
> having opam-publish generate, and manage keys would be a definite
> gain in usability IMO.

it should prepare "checksums"

> * dependencies to command-line utilities: OPAM's parallel command
> engine relies on parallelism at the sub-process level (we don't
> want to embed lwt into OPAM); but having our own download handling
> would certainly help with several issues, also including
> portability.

and running opam within a unikernel :)

> # some more * Would we want to use the TUF specified json format ?

or sexp, since that's already a first-class citizen!

> * Last, I'd like your advice and opinion on the algorithms and
> signing to use. Small elliptic-curve based signature (ed25519) seem
> to be all the hype now with stuff like signify or minilock. What is
> the state of what we currently have in native OCaml, and what would
> you recommend ?

this whole minilock seems to be a not-yet-though-out-idea (looking
into the thread
https://moderncrypto.org/mail-archive/messaging/2015/001559.html)

what we have
- - cryptokit (RSA/DH/hashes)
- - cryptohash (hashes)
- - ocaml-sha (sha)
- - ocaml-nocrypto (RSA/DH/DSA/hashes)
- - ocaml-sodium (bindings to libsodium/nacl [curve 25519])

what I'd recommend: be agile! use a keytype and keydata field --
initially support both RSA and ED25519 keys (I believe PyPi people did
the same).


hannes
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCQAGBQJVACy+AAoJELyJZYjffCju8ggP+wYwMU7bPLVNYBlS4PyXSPrM
HLEFToldVAREWLciKfrGn2/tcpLiiBFLU5luyKt0i4l5Wtx4icZbS4o+BzKyFJMW
e1TKOmmjrI8DphNRraI/4URIgFHCjRib9PRTtQYaQ3hW89/SnShgkALE9lO+3Fr6
3GOIqIBR5g0LayJ8slUm3c2Fj+cx3OuDYBtMYiNqSkAW1UPheSckOuHcop/DvSAz
x7xnuVqhybi+/+UZQKQnFBACOv6DmNdCj6AB+IE/L0p4EABxc/HodLHX05UPR2ru
Uk/fxHtUph3JkxcuoJuRvjgaQpOVDh7/nFDIWwRnwW0ZZdEkjNE3MluRQy0ZfCNK
Mz0RK2PD7E5LqIVDiZj4tW9bt2EIH9lYeleU9ZPgQDJzuQ3pAscIiAIZxYHORVLV
gihXpUfNKYK7Ps7aYHYlmGQgsqsLK1yJo/LGsLJLYiByB63H1AJIuYh7/20juep0
lqkWcntfuExtvxUOefZheVrdsX5wC06bf4zx6GicMka9r9dqE9Td1p+eqCEVMY4k
C/6XePWfDY5Cjp6Q5X3+XpXKphX6lLo+BsPaaMZPKO6SOF8hrvMYk/Hf7CVJbNHj
mMim/qOIT40D2LVyszbuMgG4lsNt3BSVMKPgp5v4cR3ELYkJ63dyBPNX4sNup8T0
GYVB6WCq7o0cGjDrA870
=xtFb
-----END PGP SIGNATURE-----

From hannes at mehnert.org  Wed Mar 11 11:57:19 2015
From: hannes at mehnert.org (Hannes Mehnert)
Date: Wed, 11 Mar 2015 11:57:19 +0000
Subject: [opam-devel] Package signing (was Re: OPAM 1.3 roadmap)
In-Reply-To: <69D8D4D5640043FF96021F66EC579D3E@erratique.ch>
References: <1709176.A7TcrPyoj4@agaric> <2524731.qnNM7Xpy0S@agaric>
 <54FF3913.4030307@mehnert.org> <6257682.bRB5lkC42o@agaric>
 <69D8D4D5640043FF96021F66EC579D3E@erratique.ch>
Message-ID: <55002D9F.7060307@mehnert.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA384

On 03/11/2015 03:49, Daniel B?nzli wrote:
> Le mercredi, 11 mars 2015 ? 03:39, Louis Gesbert a ?crit :
>> * the upstream package archive (and possibly its url and mirrors
>> ?)
> 
> If we trust the hash function (i.e. not md5) signing the hash of
> the archive seems sufficient no ? We don't really care where it
> comes from, we care about the content.

yes. hash and size should be signed!

>> No better solution than letting the modified package get signed
>> by a general repository maintainer, maybe with a time window for
>> the rightful owner to sign it ? I'll think some more about it.
> 
> This seems ok to me and rather an UI issue. E.g. as a repo end-user
> I'd like to be informed of the fact ("the meta data has been
> modified by the repo maintainer X") on installs/upgrades. As a
> package maintainer I'd like to be notified of the change and be
> able to agree to the change by signing the change after having
> authenticated it (through a single command line invocation !) at
> which point the end-user warning should disappear for him on
> further repo updates.

if we use email as identification, opam can notify the package
maintainer via email, including instructions what to do if
agree/disagree with the change.

>> * We should require maintainers to sign their packages -> the
>> clients shouldn't accept unsigned packages by default, but there
>> could be "unclaimed" (repository maintainer handled) signatures
>> on the repo to begin with.
> 
> What about pins ? This is where git signed commit could be
> interesting.

I'd leave pins to git+ssh for now alone.. using signed commits open
another whole can of worms.

> One note about that, I'm personally not very cryptographically
> advanced and don't use the gpg stuff but with the years one thing I
> got to know a bit the ssh key-based authentication infrastructure.
> I don't know if that's a good idea or not but maybe we could try to
> hook in that infrastructure as I suspect a lot of devs are familiar
> with it and it would avoid creating one more of these "be careful"
> directories. Besides it could provide OS level ssh-agent
> integration which is quite handy from an UI point view (which is
> one of my fear in all this, there's already so much publication
> bureaucracy).

I'm currently eager to propose unencrypted private keys (valid for
maybe a year, thus we get key rollovers) and having revocation baked
in, thus a compromise of a key can be mitigated easily (and no need
for *-agent). Using the same key for encryption and signing is a bad idea.


hannes
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCQAGBQJVAC2fAAoJELyJZYjffCju1JcP/jJzvdxxFoTEvPBD1ippAzzN
+dsiabsF0MsWSiMWWBuRlDcyaNJJ02y0NVWeti2g26Ql+sV3g6/kp7vg4pz5iJNP
gbPE2FsyC/OTdL2HNAtvdOos1OsP5Gd6H8+K9fZBwQRWSvmYjrJPbgLA5chhmeTi
Mu+dnEz4Az2QTcEmfPqgLUGrGQuKLI2QzyWetbBLDpYitrOlAnLp5KP9Vulvecln
Wv2XJxWKjrpFATL/L2gh4pJFEI0G+LA/zC0FXzkEag2XhG9eU6le9VsT+KmvqlFD
xSMZA6xBAr9TBA5QUHo0Qhmko21MtK1QSqWHg97mbypic1AL06STQqdQ0Fu7t9Ro
fleZ1dAYH3PujmaQ8lm+M4Tg4YEAQL0gcIz3+e5qMlekH4gIZ7gsWKKv82iVaZrB
0Wc4leVkVwJ1gQ5Cxkcn2Wb4HwoYX8FZdgoeA5WO4Fs1qKzMxBXXlAwlNpNfcBR7
pKz/w6pE9K70cVXl4FBlMFTCuHhwxuL34eFXJKlrHPiVYbW1ln8sYbkGTUsX/ahR
M1Zle0JjGdc/6dTKENAS3nofC2kQhlUeeu+Dk8PVyf+OSqAybvvVOd3YK9dMEmVx
DJp4CL7FE5Ff+2P/lW6xvCIZFP+6CEQll6dEh5pvay3sINRwpI1e4047a179k1jA
LAJnewFlqZMmWflf0IB9
=VR1/
-----END PGP SIGNATURE-----

From anil at recoil.org  Wed Mar 11 11:57:51 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Wed, 11 Mar 2015 11:57:51 +0000
Subject: [opam-devel] Package signing (was Re:  OPAM 1.3 roadmap)
In-Reply-To: <6257682.bRB5lkC42o@agaric>
References: <1709176.A7TcrPyoj4@agaric> <2524731.qnNM7Xpy0S@agaric>
 <54FF3913.4030307@mehnert.org> <6257682.bRB5lkC42o@agaric>
Message-ID: <5703A309-5079-4046-A36E-4FDD3CB1464F@recoil.org>

On 11 Mar 2015, at 02:39, Louis Gesbert <louis.gesbert at ocamlpro.com> wrote:
> 
> * Allowing non-maintainer updates: I have been wondering about this as well. It's not easy, and modification of dependency constraints can be an attack vector already (adding a dep to a compromised package, or even an unsafe older package version). Sometimes, there is also a trivial packaging bug, and the repository maintainers should be able to fix it if the package maintainer is not responsive enough. We could try and detect 'innocuous' changes, but that sounds like something that can get too complex very quickly and will open more weaknesses. No better solution than letting the modified package get signed by a general repository maintainer, maybe with a time window for the rightful owner to sign it ? I'll think some more about it.

I do think it's important that we retain the ability to do packaging updates without the maintainer signing it.   Most obviously, this would let the tools do mechanised rewrites, as we did for several migrations in the past.

Any such updates would have to be signed with the correct maintainer key, of course.

> 
> * opam-publish: I'd like to see it get more widely used. Maybe I should make it more clear that the first step (`opam publish prepare`) only gathers metadata locally and is very generic, while the second (`opam publish submit`) is github specific and bound to opam-repository by default. Anyway, the signing process will be open and should be reproducible by hand, with minimum hassle. But having opam-publish generate, and manage keys would be a definite gain in usability IMO.
> 

Agreed.  The only reason I'm not using opam-publish right now is that it conflicts with ctypes (due to Dose).  That's fixed in the upcoming Ctypes 0.4...


> * We should require maintainers to sign their packages -> the clients shouldn't accept unsigned packages by default, but there could be "unclaimed" (repository maintainer handled) signatures on the repo to begin with.

Right -- that would be all of them to start with, and the moral equivalent of "contact at ocamlpro.com" :-)

> 
> * dependencies to command-line utilities: OPAM's parallel command engine relies on parallelism at the sub-process level (we don't want to embed lwt into OPAM); but having our own download handling would certainly help with several issues, also including portability.

I have a nice little way to do mirroring of distfiles btw.  An `opam-fetch-url` that checks to see if it has a copy of the distfile URL+checksum in opam-repository/distfiles and just returns that if so, rather than going to the Internet.  It just works with OPAMFETCH in OPAM 1.2.1 without requiring any further modifications.  Yay!

-anil


From daniel.buenzli at erratique.ch  Wed Mar 11 13:36:15 2015
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Wed, 11 Mar 2015 14:36:15 +0100
Subject: [opam-devel] Package signing (was Re: OPAM 1.3 roadmap)
In-Reply-To: <55002D9F.7060307@mehnert.org>
References: <1709176.A7TcrPyoj4@agaric> <2524731.qnNM7Xpy0S@agaric>
 <54FF3913.4030307@mehnert.org> <6257682.bRB5lkC42o@agaric>
 <69D8D4D5640043FF96021F66EC579D3E@erratique.ch>
 <55002D9F.7060307@mehnert.org>
Message-ID: <34C0496BD2434EC1943CAD3106B5F9E4@erratique.ch>



Le mercredi, 11 mars 2015 ? 12:57, Hannes Mehnert a ?crit :

> I'd leave pins to git+ssh for now alone.. using signed commits open
> another whole can of worms.

I considered that for mitigating the lack of https on erratique.ch at some point but the pgp stuff put me off.  I feel a little bit guilty at the moment as I think I must be the sum of all known bad practices regarding distribution tarballs (no checksum, distribution over http).  

Lack of https should be remedied at some point but the bureaucracy involved is too high for me at the moment. I tried with a free one-year StartCom certificate last year on another domain, but their terrible UI, lack of guidance, in conjunction with my hosting company setup made the renewal so painful that I let it expire... Anil, if I remember correctly you did try the gandi.net certificates, is the user experience maybe a little bit better there ? Their single address certificate for three years [1] (so that I don't have to bother for some time) seem reasonably priced and affordable.  

Best,

Daniel  

[1] https://www.gandi.net/ssl/standard#single

From daniel.buenzli at erratique.ch  Wed Mar 11 13:49:06 2015
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Wed, 11 Mar 2015 14:49:06 +0100
Subject: [opam-devel] Package signing (was Re: OPAM 1.3 roadmap)
In-Reply-To: <34C0496BD2434EC1943CAD3106B5F9E4@erratique.ch>
References: <1709176.A7TcrPyoj4@agaric> <2524731.qnNM7Xpy0S@agaric>
 <54FF3913.4030307@mehnert.org> <6257682.bRB5lkC42o@agaric>
 <69D8D4D5640043FF96021F66EC579D3E@erratique.ch>
 <55002D9F.7060307@mehnert.org>
 <34C0496BD2434EC1943CAD3106B5F9E4@erratique.ch>
Message-ID: <9295065307244A0B885915B0F3E31DCF@erratique.ch>

Le mercredi, 11 mars 2015 ? 14:36, Daniel B?nzli a ?crit :
> Their single address certificate for three years [1] (so that I don't have to bother for some time) seem reasonably priced and affordable.

Well they still charge 10 times the price for having a U+002A character signed. Are the algorithms more expensive to compute on that one ? Certification authorities and racket seem bisimilar to me, worse is that they even can't really be trusted.

Daniel




From hannes at mehnert.org  Wed Mar 11 14:46:34 2015
From: hannes at mehnert.org (Hannes Mehnert)
Date: Wed, 11 Mar 2015 14:46:34 +0000
Subject: [opam-devel] Package signing (was Re: OPAM 1.3 roadmap)
In-Reply-To: <34C0496BD2434EC1943CAD3106B5F9E4@erratique.ch>
References: <1709176.A7TcrPyoj4@agaric> <2524731.qnNM7Xpy0S@agaric>
 <54FF3913.4030307@mehnert.org> <6257682.bRB5lkC42o@agaric>
 <69D8D4D5640043FF96021F66EC579D3E@erratique.ch>
 <55002D9F.7060307@mehnert.org>
 <34C0496BD2434EC1943CAD3106B5F9E4@erratique.ch>
Message-ID: <5500554A.60405@mehnert.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA384

On 03/11/2015 13:36, Daniel B?nzli wrote:
> 
> 
> Le mercredi, 11 mars 2015 ? 12:57, Hannes Mehnert a ?crit :
> 
>> I'd leave pins to git+ssh for now alone.. using signed commits
>> open another whole can of worms.
> 
> I considered that for mitigating the lack of https on erratique.ch
> at some point but the pgp stuff put me off.  I feel a little bit
> guilty at the moment as I think I must be the sum of all known bad
> practices regarding distribution tarballs (no checksum,
> distribution over http).
> 
> Lack of https should be remedied at some point but the bureaucracy
> involved is too high for me at the moment. I tried with a free
> one-year StartCom certificate last year on another domain, but
> their terrible UI, lack of guidance, in conjunction with my hosting
> company setup made the renewal so painful that I let it expire...
> Anil, if I remember correctly you did try the gandi.net
> certificates, is the user experience maybe a little bit better
> there ? Their single address certificate for three years [1] (so
> that I don't have to bother for some time) seem reasonably priced
> and affordable.

Daniel,

I'd wait for summer/autumn until https://letsencrypt.org/ people are
ready.  Those commercial CAs sell you snakeoil and it is a waste of money.


Hannes

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCQAGBQJVAFVKAAoJELyJZYjffCjuROYQAKjK7oPoLJRjRdKLCBPNABc1
pAkxLW4dh1hPiOTlgEenQAqZZlMhLs8dKs5Mqm9ylRFa2xTY6PNowUeK2tFiEyBA
QfMVvA/Udouoku5aeMbO4aCfCbqVhbLTMCDJuVtaBHMz99jfry+ul5RFJJg5gr95
hrQF/ObCRKBTeHc6FrPjSCoOdG/0Mdybo7P905i/YJNuGyhBbp281dKArw4cxpZb
ddJOc6oYG95a+11UvzCaaS78lxv4N6LIJBmqUIlBetO8h3G/7cFgrXGp+8ICKD6q
blex4/W3EvQjrWo1NWNUflf36If3avreLB59zZiKL88rqQxWgDK/seCzhp7qEo05
is8EusZjvmtWpgKXgsNWuS73+D/dsY23Zrx0ujn60TlcIocjHBPD2JpaeC8k36qo
StPlO5vDXe1o8E2ebKR7qKOSLO+w7Pic+P5Sv6POVszZHjOvykxa3PcZpA/RaImR
GBncKLj9JHc/pXNnfceEe54qGEN+ohjGL0Z0I1zSJSXin3kAW5XbRZthQ2LIQHtw
RbcdLJYJPunhJO9Ijo08DO9OkhrajQzRfEhOsiYqyeH78bo3wVJOhrtzpVzOUQgF
jgXGVvtgO9pcasvKWCKZQ2yhlnXKKCeeHg87D8v2vK5Z5RBGqXQnohG6LcbRevv8
Id/lHMLws/JgOzrQaMgw
=pNvx
-----END PGP SIGNATURE-----

From daniel.buenzli at erratique.ch  Wed Mar 11 15:32:41 2015
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Wed, 11 Mar 2015 16:32:41 +0100
Subject: [opam-devel] Package signing (was Re: OPAM 1.3 roadmap)
In-Reply-To: <5500554A.60405@mehnert.org>
References: <1709176.A7TcrPyoj4@agaric> <2524731.qnNM7Xpy0S@agaric>
 <54FF3913.4030307@mehnert.org> <6257682.bRB5lkC42o@agaric>
 <69D8D4D5640043FF96021F66EC579D3E@erratique.ch>
 <55002D9F.7060307@mehnert.org>
 <34C0496BD2434EC1943CAD3106B5F9E4@erratique.ch>
 <5500554A.60405@mehnert.org>
Message-ID: <5746AE23D3EC496E9AEC95A931515FAB@erratique.ch>

Le mercredi, 11 mars 2015 ? 15:46, Hannes Mehnert a ?crit :
> I'd wait for summer/autumn until https://letsencrypt.org/ people are
> ready.

Yes. Though I have mixed feelings about this as it is legally based in the US and its potential to centralize a good deal of the certificates used on the internet worries me.  

Daniel



From louis.gesbert at ocamlpro.com  Sat Mar 14 01:04:08 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Sat, 14 Mar 2015 10:04:08 +0900
Subject: [opam-devel] OPAM 1.2.1 / 1.3.0 status update
Message-ID: <3407290.GKFX30QQod@agaric>

Hi,

OPAM 1.2.1 has been in RC for a week, without any worrying issue reported so far (the only fix to date is on `switch reinstall`, which didn't lock the right switch. Not quite a blocker). We'll release early next week unless something shows up !

The discussion on 1.3 seems to have more or less settled on:
1. Signing the repository
2. Sandboxing package builds (at least tracking their installed files, to begin with)
3. Improving Windows documentation and support

I've started working in these directions. Since this'll take a while, I'll maintain a 1.2 branch if backports or updates are necessary.

Cheers,
Louis

From anil at recoil.org  Sun Mar 15 11:17:09 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Sun, 15 Mar 2015 11:17:09 +0000
Subject: [opam-devel] OPAM 1.2.1 / 1.3.0 status update
In-Reply-To: <3407290.GKFX30QQod@agaric>
References: <3407290.GKFX30QQod@agaric>
Message-ID: <45A03525-A8A5-4BCF-9B7F-3878D7F056F4@recoil.org>


> On 14 Mar 2015, at 01:04, Louis Gesbert <louis.gesbert at ocamlpro.com> wrote:
> 
> Hi,
> 
> OPAM 1.2.1 has been in RC for a week, without any worrying issue reported so far (the only fix to date is on `switch reinstall`, which didn't lock the right switch. Not quite a blocker). We'll release early next week unless something shows up !
> 

Green light from me!  To be clear, does the 1.2 branch now reflect the final RC version?  I can build 1.2.1 RPM/Debs from that.

I think we should make a concerted effort to get 1.2.1 upstream into Ubuntu so that it hits the next LTS cycle.  Hopefully it isn't too late for the Debian release cycle too...

> The discussion on 1.3 seems to have more or less settled on:
> 1. Signing the repository
> 2. Sandboxing package builds (at least tracking their installed files, to begin with)
> 3. Improving Windows documentation and support
> 
> I've started working in these directions. Since this'll take a while, I'll maintain a 1.2 branch if backports or updates are necessary.

That looks like an excellent summary of the roadmap discussion.

-anil

From anil at recoil.org  Sun Mar 15 19:38:34 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Sun, 15 Mar 2015 19:38:34 +0000
Subject: [opam-devel] OPAM 1.2.1 / 1.3.0 status update
In-Reply-To: <45A03525-A8A5-4BCF-9B7F-3878D7F056F4@recoil.org>
References: <3407290.GKFX30QQod@agaric>
 <45A03525-A8A5-4BCF-9B7F-3878D7F056F4@recoil.org>
Message-ID: <10A536AD-FE20-46C5-89A3-5CB962F2F48B@recoil.org>

On 15 Mar 2015, at 11:17, Anil Madhavapeddy <anil at recoil.org> wrote:
> 
> 
>> On 14 Mar 2015, at 01:04, Louis Gesbert <louis.gesbert at ocamlpro.com> wrote:
>> 
>> Hi,
>> 
>> OPAM 1.2.1 has been in RC for a week, without any worrying issue reported so far (the only fix to date is on `switch reinstall`, which didn't lock the right switch. Not quite a blocker). We'll release early next week unless something shows up !
>> 
> 
> Green light from me!  To be clear, does the 1.2 branch now reflect the final RC version?  I can build 1.2.1 RPM/Debs from that.
> 

There's just one thing that would be useful, but may not be practical.  I'd really like to run the Travis tests with OPAMSTRICT set so that warnings turn into hard failures.  However, we currently hit this:

[WARNING] Directory /Users/travis/.opam/system/lib/camlp4 is not empty, not
          removing

message all the time, and it's hard to fix I think.  Any thoughts on whether there's a workaround in opam-repository to make this message go away, or whether OPAM 1.2.1 should show it at all?

-anil

From louis.gesbert at ocamlpro.com  Mon Mar 16 00:54:02 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Mon, 16 Mar 2015 09:54:02 +0900
Subject: [opam-devel] OPAM 1.2.1 / 1.3.0 status update
In-Reply-To: <10A536AD-FE20-46C5-89A3-5CB962F2F48B@recoil.org>
References: <3407290.GKFX30QQod@agaric>
 <45A03525-A8A5-4BCF-9B7F-3878D7F056F4@recoil.org>
 <10A536AD-FE20-46C5-89A3-5CB962F2F48B@recoil.org>
Message-ID: <43229659.ZmKLDbN4HJ@agaric>

> Green light from me!  To be clear, does the 1.2 branch now reflect the final RC version?  I can build 1.2.1 RPM/Debs from that.

Yes, I updated it as I pushed the RC2, and your PPAs (2015-03-04) are up-to-date.

> I think we should make a concerted effort to get 1.2.1 upstream into Ubuntu so that it hits the next LTS cycle.  Hopefully it isn't too late for the Debian release cycle too...

Debian: we can see with our friends in the team, but as Jessie is in complete freeze at the moment and 1.2.1 doesn't fix any critical bugs, I wouldn't count on it (https://release.debian.org/jessie/freeze_policy.html)

Ubuntu: Indeed -- (sigh) hopefully we'll get more response than on https://bugs.launchpad.net/ubuntu/+source/opam/+bug/1401346

> There's just one thing that would be useful, but may not be practical.  I'd really like to run the Travis tests with OPAMSTRICT set so that warnings turn into hard failures.  However, we currently hit this:
> 
> [WARNING] Directory /Users/travis/.opam/system/lib/camlp4 is not empty, not
>           removing
> 

May be counter-intuitive, but there is no warnings-as-errors flags, `--strict` only relates to errors in files (failing on first error rather than ignoring the file -- if possible). That may, in this case, be more convenient though !

> message all the time, and it's hard to fix I think.  Any thoughts on whether there's a workaround in opam-repository to make this message go away, or whether OPAM 1.2.1 should show it at all?

I can remove it altogether; what hold me back is that it usually doesn't appear in normal usage, and can provide meaningful information that I don't see how to make available otherwise. Hopefully 1.3.1 will have file tracking, removing the need for this.

From anil at recoil.org  Mon Mar 16 08:28:54 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Mon, 16 Mar 2015 08:28:54 +0000
Subject: [opam-devel] OPAM 1.2.1 / 1.3.0 status update
In-Reply-To: <43229659.ZmKLDbN4HJ@agaric>
References: <3407290.GKFX30QQod@agaric>
 <45A03525-A8A5-4BCF-9B7F-3878D7F056F4@recoil.org>
 <10A536AD-FE20-46C5-89A3-5CB962F2F48B@recoil.org>
 <43229659.ZmKLDbN4HJ@agaric>
Message-ID: <45953353-B4EA-420D-A282-DDD1F9A5CCB3@recoil.org>


> On 16 Mar 2015, at 00:54, Louis Gesbert <louis.gesbert at ocamlpro.com> wrote:
> 
>> Green light from me!  To be clear, does the 1.2 branch now reflect the final RC version?  I can build 1.2.1 RPM/Debs from that.
> 
> Yes, I updated it as I pushed the RC2, and your PPAs (2015-03-04) are up-to-date.
> 
>> I think we should make a concerted effort to get 1.2.1 upstream into Ubuntu so that it hits the next LTS cycle.  Hopefully it isn't too late for the Debian release cycle too...
> 
> Debian: we can see with our friends in the team, but as Jessie is in complete freeze at the moment and 1.2.1 doesn't fix any critical bugs, I wouldn't count on it (https://release.debian.org/jessie/freeze_policy.html)
> 
> Ubuntu: Indeed -- (sigh) hopefully we'll get more response than on https://bugs.launchpad.net/ubuntu/+source/opam/+bug/1401346

I hope they take something not from Debian...  can we get something into Debian unstable that won't make it into Testing at this stage?

> 
>> There's just one thing that would be useful, but may not be practical.  I'd really like to run the Travis tests with OPAMSTRICT set so that warnings turn into hard failures.  However, we currently hit this:
>> 
>> [WARNING] Directory /Users/travis/.opam/system/lib/camlp4 is not empty, not
>>          removing
>> 
> 
> May be counter-intuitive, but there is no warnings-as-errors flags, `--strict` only relates to errors in files (failing on first error rather than ignoring the file -- if possible). That may, in this case, be more convenient though !
> 
>> message all the time, and it's hard to fix I think.  Any thoughts on whether there's a workaround in opam-repository to make this message go away, or whether OPAM 1.2.1 should show it at all?
> 
> I can remove it altogether; what hold me back is that it usually doesn't appear in normal usage, and can provide meaningful information that I don't see how to make available otherwise. Hopefully 1.3.1 will have file tracking, removing the need for this.

That all actually sounds ok without needing any change in the RC then -- how about pushing an OPAMSTRICT=1 to the (allowed-to-fail) 1.2.1 matrix in the current opam-repository?

-anil

From gregoire.henry at ocamlpro.com  Mon Mar 16 08:45:43 2015
From: gregoire.henry at ocamlpro.com (=?iso-8859-1?Q?Gr=E9goire?= Henry)
Date: Mon, 16 Mar 2015 09:45:43 +0100
Subject: [opam-devel] OPAM 1.2.1 / 1.3.0 status update
In-Reply-To: <45953353-B4EA-420D-A282-DDD1F9A5CCB3@recoil.org>
References: <3407290.GKFX30QQod@agaric>
 <45A03525-A8A5-4BCF-9B7F-3878D7F056F4@recoil.org>
 <10A536AD-FE20-46C5-89A3-5CB962F2F48B@recoil.org>
 <43229659.ZmKLDbN4HJ@agaric>
 <45953353-B4EA-420D-A282-DDD1F9A5CCB3@recoil.org>
Message-ID: <20150316084543.GA15248@venema.inria.fr>

> > Debian: we can see with our friends in the team, but as Jessie is
> > in complete freeze at the moment and 1.2.1 doesn't fix any
> > critical bugs, I wouldn't count on it
> > (https://release.debian.org/jessie/freeze_policy.html)
> >
> > Ubuntu: Indeed -- (sigh) hopefully we'll get more response than on
> > https://bugs.launchpad.net/ubuntu/+source/opam/+bug/1401346
>
> I hope they take something not from Debian...  can we get something
> into Debian unstable that won't make it into Testing at this stage?

AFAIK nope. But a new version might go into to the 'experimental' repo.

Gr?goire

From louis.gesbert at ocamlpro.com  Mon Mar 16 08:49:20 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Mon, 16 Mar 2015 17:49:20 +0900
Subject: [opam-devel] OPAM 1.2.1 / 1.3.0 status update
In-Reply-To: <45953353-B4EA-420D-A282-DDD1F9A5CCB3@recoil.org>
References: <3407290.GKFX30QQod@agaric> <43229659.ZmKLDbN4HJ@agaric>
 <45953353-B4EA-420D-A282-DDD1F9A5CCB3@recoil.org>
Message-ID: <1448663.Rkolxhl9AF@agaric>


> That all actually sounds ok without needing any change in the RC then -- how about pushing an OPAMSTRICT=1 to the (allowed-to-fail) 1.2.1 matrix in the current opam-repository?
> 

Yes, we should try that.
I found and fixed another non-critical bug today: `opam config report` doesn't report the solver properly.


From louis.gesbert at ocamlpro.com  Wed Mar 18 03:57:40 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Wed, 18 Mar 2015 12:57:40 +0900
Subject: [opam-devel] 1.2.1 final
Message-ID: <2850767.hr4qG9Wai9@agaric>

Hi all,

1.2.1 is finally out, with no changes from RC2. Enjoy!

Announcement to the platform blog and the caml-list coming soon.

Cheers,
Louis

From talex5 at gmail.com  Wed Mar 18 09:43:54 2015
From: talex5 at gmail.com (Thomas Leonard)
Date: Wed, 18 Mar 2015 09:43:54 +0000
Subject: [opam-devel] 1.2.1 final
In-Reply-To: <2850767.hr4qG9Wai9@agaric>
References: <2850767.hr4qG9Wai9@agaric>
Message-ID: <CAG4opy-rOGT_R=hOvTk1LQARNBhipPzjR+d6oXnODHg9ZUXDLw@mail.gmail.com>

On 18 March 2015 at 03:57, Louis Gesbert <louis.gesbert at ocamlpro.com> wrote:
> Hi all,
>
> 1.2.1 is finally out, with no changes from RC2. Enjoy!
>
> Announcement to the platform blog and the caml-list coming soon.

Great! I've updated the 0install feed (source, plus x86_64, x86_32 and
ARM binaries):

  http://tools.ocaml.org/opam.xml

To switch to the new version immediately, use:

  $ 0install update opam --not-before=1.2.1


-- 
Dr Thomas Leonard        http://0install.net/
GPG: 9242 9807 C985 3C07 44A6  8B9A AE07 8280 59A5 3CC1
GPG: DA98 25AE CAD0 8975 7CDA  BD8E 0713 3F96 CA74 D8BA

From anil at recoil.org  Wed Mar 18 14:37:00 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Wed, 18 Mar 2015 14:37:00 +0000
Subject: [opam-devel] 1.2.1 final
In-Reply-To: <CAG4opy-rOGT_R=hOvTk1LQARNBhipPzjR+d6oXnODHg9ZUXDLw@mail.gmail.com>
References: <2850767.hr4qG9Wai9@agaric>
 <CAG4opy-rOGT_R=hOvTk1LQARNBhipPzjR+d6oXnODHg9ZUXDLw@mail.gmail.com>
Message-ID: <5747E65D-A502-4F9B-8968-E775A85ECDB5@recoil.org>

On 18 Mar 2015, at 09:43, Thomas Leonard <talex5 at gmail.com> wrote:
> 
> On 18 March 2015 at 03:57, Louis Gesbert <louis.gesbert at ocamlpro.com> wrote:
>> Hi all,
>> 
>> 1.2.1 is finally out, with no changes from RC2. Enjoy!
>> 
>> Announcement to the platform blog and the caml-list coming soon.
> 
> Great! I've updated the 0install feed (source, plus x86_64, x86_32 and
> ARM binaries):
> 

I've uploaded OPAM 1.2.1 Debs into the Ubuntu PPAs.  One side effect of this
is that we now no longer publish OPAM 1.2.0 PPAs.  I don't anticipate this
being a huge problem since I don't want to keep maintaining all of the point
revisions.  How about we swap over the OPAM repository tests to have a single
OCaml 4.02.1+OPAM 1.2.0 test, with all the rest being OPAM 1.2.1?

I've also uploaded OpenSUSE Debs and RPMs.  Louis, could you release a
non-RC tarball on GitHub?  Right now the tarball has an -rc2 prefix in
its contents.

-anil


From louis.gesbert at ocamlpro.com  Wed Mar 18 14:58:44 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Wed, 18 Mar 2015 23:58:44 +0900
Subject: [opam-devel] 1.2.1 final
In-Reply-To: <5747E65D-A502-4F9B-8968-E775A85ECDB5@recoil.org>
References: <2850767.hr4qG9Wai9@agaric>
 <CAG4opy-rOGT_R=hOvTk1LQARNBhipPzjR+d6oXnODHg9ZUXDLw@mail.gmail.com>
 <5747E65D-A502-4F9B-8968-E775A85ECDB5@recoil.org>
Message-ID: <5306843.jKpi9KHXLy@agaric>

And -- thanks a lot for the packagings!

> How about we swap over the OPAM repository tests to have a single
> OCaml 4.02.1+OPAM 1.2.0 test, with all the rest being OPAM 1.2.1?

Indeed, it's vital to keep a 1.2.0 test in case packagers introduce syntax that isn't compatible.

From anil at recoil.org  Fri Mar 20 07:43:47 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Fri, 20 Mar 2015 07:43:47 +0000
Subject: [opam-devel] 1.2.1 final
In-Reply-To: <5306843.jKpi9KHXLy@agaric>
References: <2850767.hr4qG9Wai9@agaric>
 <CAG4opy-rOGT_R=hOvTk1LQARNBhipPzjR+d6oXnODHg9ZUXDLw@mail.gmail.com>
 <5747E65D-A502-4F9B-8968-E775A85ECDB5@recoil.org> <5306843.jKpi9KHXLy@agaric>
Message-ID: <3763FB9D-4786-4FBF-B6F8-131CE635386F@recoil.org>

On 18 Mar 2015, at 14:58, Louis Gesbert <louis.gesbert at ocamlpro.com> wrote:
> 
> And -- thanks a lot for the packagings!
> 
>> How about we swap over the OPAM repository tests to have a single
>> OCaml 4.02.1+OPAM 1.2.0 test, with all the rest being OPAM 1.2.1?
> 
> Indeed, it's vital to keep a 1.2.0 test in case packagers introduce syntax that isn't compatible.
> 

Ok, I'll do that today then.  Has anyone created a Homebrew pull request?
It'll be good if the OS packaging is as released as possible before the announcement.

-anil

From edwin+ml-ocaml at etorok.net  Fri Mar 20 23:22:07 2015
From: edwin+ml-ocaml at etorok.net (=?UTF-8?B?VMO2csO2ayBFZHdpbg==?=)
Date: Sat, 21 Mar 2015 01:22:07 +0200
Subject: [opam-devel] opam2{rpm,deb}
In-Reply-To: <5CA7A6A1-3A4A-40DB-A4DE-659750444772@recoil.org>
References: <5508AA94.7060100@etorok.net>
 <01A203A9-C2AD-4032-9133-3204F1D07E89@recoil.org>
 <5509FDC9.1080107@etorok.net>
 <5CA7A6A1-3A4A-40DB-A4DE-659750444772@recoil.org>
Message-ID: <550CAB9F.4040508@etorok.net>

Hi,

[On Anil's suggestion I'm moving the discussion to opam-devel.
TL;DR: I am about to start writing opam2{rpm,deb} for my package and its dependencies. Does anyone else need such a tool or want to help?]

I am about to package my own OCaml application for Fedora and Debian, which indirectly depends on 12 opam packages
(3 of which already review requests on Fedora's bugzilla as they are shared dependencies with opam itself).
I am looking for some automation in preparing spec and Debian templates, for checking their quality, and tracking the packages through their lifecycle,
and to avoid making the same common mistakes for each package.

Since such a tool (opam2rpm/opam2deb) doesn't exist now, I'll describe what my idea/requirements are.
Please let me know what you think and if you have new / different requirements. Perhaps together we can design/create an opam2rpm tool that will be useful for more than just a oneshot conversion.

I am quite new to packaging, have just recently went through packaging another (non-OCaml) application for Fedora so I've
documented a package's (and package maintainer's) states here: https://fedoraproject.org/wiki/Fedora_Package_Lifecycle_notes.
This is still rather incomplete and rough, take it with a grain of salt and consult the official docs when in doubt.

What we have now:
* opam metadata: depexts, conf-* opam packages, build rules, constraints, etc.
* opam-lib
* opam-repository, where some packages implicitly assume a "modern" Linux environment (has native compiler, dynlink, certain tools and C headers, etc.).
For distribution packages all these dependencies will have to be made explicit
* oasis2deb, generates decent starting point for a Debian package, but fails #3

What are my requirements?
#1 (local) opam repository as input, .spec/Debian as output
#2 lint the output (both opam and possibly manually edited spec/Debian), there are already external tools for this
#3 test that the build requirements are complete, i.e. it builds in a minimal environment. there are external tools mock/pbuilder for a clean/official solution,
or docker for an insecure and somewhat faster solution
#4 allow to manually modify the generated .spec and debian/ files and still keep track of changes in opam metadata
#5 allow incremental refinement of the spec/debian rules, don't require everything to be 100% compliant/correct syntax
#6 allow to override opam metadata (could just git clone the opam repo and use that)
#7 opam2rpm and opam2deb should be similar to use (i.e. maybe it should be opam2pkg rpm and opam2pkg deb), and I don't necesarely want to limit this to rpm and deb,
someone is welcome to create an opam2openbsd or opam2brew, etc.
#8 developing the automation tool shouldn't take (significanlty) longer than manually writing the packaging for those 9 packages :)
#9 the goal would also be to make it easier for upstream reviewers to review all these packages, at some point we should consider involving them in the discussion once we have some draft tool
to make sure we generate good quality packages :)

Most (but not all) of the packages I need to write spec files for are based on OASIS, so we could try to load the missing metadata from oasis, or detect that oasis is used
and simplify some steps, however not all packages use it so I think that starting at the opam metadata is still the right way.

What kind of automation is needed for opam2rpm and opam2deb for me:
 * mapping of opam to Fedora/Debian naming conventions (some opam packages have ocaml- already in them, so take care not to duplicate that)
 * generate .spec and debian/ file templates from opam metadata + some overrides. If this was just a one-way/one-time conversion I'd go with
something simple (perhaps like ocaml-mustache), however see below
 * check license name compliance (Fedora and Debian have their standard name lists), and make sure the package actually has a license *file*
 * don't need full roundtrip capability between opam and spec/debian, the tool should serve three purposes only:
  * generate initial templates
  * show a smart diff
  * lint the opam metadata / spec file
 * shouldn't require to update the conversion tool just to support an obscure corner-case that can be fixed more easily by hand in the spec file
 * doesn't have to be perfect or support the full features of spec/debian/opam files. lets start with the minimum requirements and add fields/features as we need them
 * its not a substitute for human review, the final output always has to be tested and reviewed by a human

Implementation thoughts:
 * ocaml module describing spec file an debian rules with a toplevel type t and nested records, with type 'a field
 * some form of conversion to/from a string -> string map
 * a lexer that loads that map from the spec/debian files, and a formatter that generates it (ocamllex + format, or just ocaml-re + printf?)
 * please if we can lets avoid camlp4 for this, I'd suggest ppx_deriving+cconv or just manually writing the parse/generate calls for the record fields
 * validation should be optional
 * fields should be easy to declare (name, of_string, to_string, validate, smart_diff), initially all would be raw strings, more parsing/diffing can be added as needed
 * some way to fill the 't' type from opam metadata
 * certain files may not need all this advanced conversion, and might be easier to generate from a text template with substitutions (ocaml-mustache, or mpp?), and just show a textual diff
(docdiff at character/word level is quite nice)

Automation for tracking a package through its lifecycle (separate tool):
Since packaging an OCaml application can involve packaging/tracking a large number of dependant libraries some tool to track the status of each package (lifecycle)
would be useful. This is not specific to OCaml, I'm surprised that upstream distros don't have this already, but anyway using Fedora terminology I want a single CLI tool that can:
 * query yum repo for stable packages
 * query pkgdb for existence of package in other releases
 * query bodhi for pending/testing packages
 * query koji for builds submitted/completed
 * query for existence of scm (git) repo
 * query bugzilla for package review and find out its state (submitted, under review, approved, waiting for scm repo, scm repo created)
For Debian a similar tool that:
 * query bugs.debian.org for RFP (request for packaging), ITP (intent to package) and its status
 * query NEW queue for uploaded source package
 * query package tracker for buildd status
 * this can also avoid duplicating work, i.e. finding out that someone else is already packaging my package or its dependencies
 * might also be useful for other packages
 * can be done manually by visiting a bunch of webpages in turn and searching on each, but there ought to be some CLI tools to help or at least some (web)API
 * doesn't have to be necesarely written in Ocaml, if we can reuse existing tools and have this just as a shell/python script the better

I wanted to go through the policy docs and write some details here on what is missing from opam metadata, but this mail is long enough and it is late enough already,
that I thought to start the discussion with what I have so far, and discuss the details as we go.

Once we agree on the major design points of this tool I plan on starting with opam2rpm, but if someone else wants to own it I'd be more than happy with that as well.

Anil also suggested to  look at:
On 03/19/2015 10:15 AM, Anil Madhavapeddy wrote:
> This annotated changeset about a recent update from Jon might be useful as well:
> 
> https://github.com/jonludlam/ocaml4021-buildroot/commit/9ef9554c283ea1cda8f64742b73bb63807b791c7#commitcomment-10071274
> 

Best regards,
--Edwin

From sylvain+ocaml at le-gall.net  Sat Mar 21 09:35:05 2015
From: sylvain+ocaml at le-gall.net (Sylvain Le Gall)
Date: Sat, 21 Mar 2015 09:35:05 +0000
Subject: [opam-devel] opam2{rpm,deb}
In-Reply-To: <550CAB9F.4040508@etorok.net>
References: <5508AA94.7060100@etorok.net>
 <01A203A9-C2AD-4032-9133-3204F1D07E89@recoil.org>
 <5509FDC9.1080107@etorok.net>
 <5CA7A6A1-3A4A-40DB-A4DE-659750444772@recoil.org>
 <550CAB9F.4040508@etorok.net>
Message-ID: <CAOCAUGNxfr_gxmeSQiUv9XC55vHMs-gp+xvvPe3-kcRtfL-k9w@mail.gmail.com>

Le sam. 21 mars 2015 ? 00:22, T?r?k Edwin <edwin+ml-ocaml at etorok.net> a
?crit :

> Hi,
>
> [On Anil's suggestion I'm moving the discussion to opam-devel.
> TL;DR: I am about to start writing opam2{rpm,deb} for my package and its
> dependencies. Does anyone else need such a tool or want to help?]
>
> I am about to package my own OCaml application for Fedora and Debian,
> which indirectly depends on 12 opam packages
> (3 of which already review requests on Fedora's bugzilla as they are
> shared dependencies with opam itself).
> I am looking for some automation in preparing spec and Debian templates,
> for checking their quality, and tracking the packages through their
> lifecycle,
> and to avoid making the same common mistakes for each package.
>
> Since such a tool (opam2rpm/opam2deb) doesn't exist now, I'll describe
> what my idea/requirements are.
> Please let me know what you think and if you have new / different
> requirements. Perhaps together we can design/create an opam2rpm tool that
> will be useful for more than just a oneshot conversion.
>
> I am quite new to packaging, have just recently went through packaging
> another (non-OCaml) application for Fedora so I've
> documented a package's (and package maintainer's) states here:
> https://fedoraproject.org/wiki/Fedora_Package_Lifecycle_notes.
> This is still rather incomplete and rough, take it with a grain of salt
> and consult the official docs when in doubt.
>
> What we have now:
> * opam metadata: depexts, conf-* opam packages, build rules, constraints,
> etc.
> * opam-lib
> * opam-repository, where some packages implicitly assume a "modern" Linux
> environment (has native compiler, dynlink, certain tools and C headers,
> etc.).
> For distribution packages all these dependencies will have to be made
> explicit
> * oasis2deb, generates decent starting point for a Debian package, but
> fails #3
>

Not sure to understand how oasis2deb fails #3 (test that build requirement
is complete).

It actually declares build dependencies for the source package, but it
doesn't embed the source of the dependencies (which is by the way forbidden
by Debian policy) but depends on what should be the package to do it. I.e.
it integrates into the target build system.

Example on my dlnasync generated package:

Source: dlnasync
Section: ocaml
Priority: optional
Maintainer: Debian OCaml Maintainers <debian-ocaml-maint at lists.debian.org>
Uploaders:
  Sylvain Le Gall <sylvain at le-gall.net>
Build-Depends:
  ocaml-nox (>= 3.11.1-3~),
  ocaml-findlib,
  ocaml-base-nox,
  libsekred-ocaml-dev (>= 0.2.0),
  libounit-ocaml-dev (>= 2.0.0),
  libocamlnet-ocaml-dev (>= 3.5.1),
  libfileutils-ocaml-dev (>= 0.4.2),
  libbatteries-ocaml-dev,
  libav-tools,
  dh-ocaml (>= 0.9~),
  debhelper (>= 7.0.50~)
Standards-Version: 3.9.1
Homepage: http://forge.ocamlcore.org/projects/dlnasync
Vcs-Git: git://git.debian.org/git/pkg-ocaml-maint/packages/dlnasync.git
Vcs-Browser:
  http://git.debian.org/?p=pkg-ocaml-maint/packages/dlnasync.git

You can see that all build dependencies are here.

I made this decision on purpose. If you want to push this kind of tools to
build packages to be distributed by the normal RPM/Deb scheme of your
distribution, they need to somehow comply with policy.

(I also created tools that DON'T do that but I don't publish them because
they are basic hacks)


>
> What are my requirements?
> #1 (local) opam repository as input, .spec/Debian as output
> #2 lint the output (both opam and possibly manually edited spec/Debian),
> there are already external tools for this
> #3 test that the build requirements are complete, i.e. it builds in a
> minimal environment. there are external tools mock/pbuilder for a
> clean/official solution,
> or docker for an insecure and somewhat faster solution
> #4 allow to manually modify the generated .spec and debian/ files and
> still keep track of changes in opam metadata
> #5 allow incremental refinement of the spec/debian rules, don't require
> everything to be 100% compliant/correct syntax
> #6 allow to override opam metadata (could just git clone the opam repo and
> use that)
> #7 opam2rpm and opam2deb should be similar to use (i.e. maybe it should be
> opam2pkg rpm and opam2pkg deb), and I don't necesarely want to limit this
> to rpm and deb,
> someone is welcome to create an opam2openbsd or opam2brew, etc.
> #8 developing the automation tool shouldn't take (significanlty) longer
> than manually writing the packaging for those 9 packages :)
> #9 the goal would also be to make it easier for upstream reviewers to
> review all these packages, at some point we should consider involving them
> in the discussion once we have some draft tool
> to make sure we generate good quality packages :)
>
> Most (but not all) of the packages I need to write spec files for are
> based on OASIS, so we could try to load the missing metadata from oasis, or
> detect that oasis is used
> and simplify some steps, however not all packages use it so I think that
> starting at the opam metadata is still the right way.
>
> What kind of automation is needed for opam2rpm and opam2deb for me:
>  * mapping of opam to Fedora/Debian naming conventions (some opam packages
> have ocaml- already in them, so take care not to duplicate that)
>  * generate .spec and debian/ file templates from opam metadata + some
> overrides. If this was just a one-way/one-time conversion I'd go with
> something simple (perhaps like ocaml-mustache), however see below
>  * check license name compliance (Fedora and Debian have their standard
> name lists), and make sure the package actually has a license *file*
>  * don't need full roundtrip capability between opam and spec/debian, the
> tool should serve three purposes only:
>   * generate initial templates
>   * show a smart diff
>   * lint the opam metadata / spec file
>  * shouldn't require to update the conversion tool just to support an
> obscure corner-case that can be fixed more easily by hand in the spec file
>  * doesn't have to be perfect or support the full features of
> spec/debian/opam files. lets start with the minimum requirements and add
> fields/features as we need them
>  * its not a substitute for human review, the final output always has to
> be tested and reviewed by a human
>
> Implementation thoughts:
>  * ocaml module describing spec file an debian rules with a toplevel type
> t and nested records, with type 'a field
>  * some form of conversion to/from a string -> string map
>  * a lexer that loads that map from the spec/debian files, and a formatter
> that generates it (ocamllex + format, or just ocaml-re + printf?)
>  * please if we can lets avoid camlp4 for this, I'd suggest
> ppx_deriving+cconv or just manually writing the parse/generate calls for
> the record fields
>  * validation should be optional
>  * fields should be easy to declare (name, of_string, to_string, validate,
> smart_diff), initially all would be raw strings, more parsing/diffing can
> be added as needed
>  * some way to fill the 't' type from opam metadata
>  * certain files may not need all this advanced conversion, and might be
> easier to generate from a text template with substitutions (ocaml-mustache,
> or mpp?), and just show a textual diff
> (docdiff at character/word level is quite nice)
>
> Automation for tracking a package through its lifecycle (separate tool):
> Since packaging an OCaml application can involve packaging/tracking a
> large number of dependant libraries some tool to track the status of each
> package (lifecycle)
> would be useful. This is not specific to OCaml, I'm surprised that
> upstream distros don't have this already, but anyway using Fedora
> terminology I want a single CLI tool that can:
>  * query yum repo for stable packages
>  * query pkgdb for existence of package in other releases
>  * query bodhi for pending/testing packages
>  * query koji for builds submitted/completed
>  * query for existence of scm (git) repo
>  * query bugzilla for package review and find out its state (submitted,
> under review, approved, waiting for scm repo, scm repo created)
> For Debian a similar tool that:
>  * query bugs.debian.org for RFP (request for packaging), ITP (intent to
> package) and its status
>  * query NEW queue for uploaded source package
>  * query package tracker for buildd status
>  * this can also avoid duplicating work, i.e. finding out that someone
> else is already packaging my package or its dependencies
>  * might also be useful for other packages
>  * can be done manually by visiting a bunch of webpages in turn and
> searching on each, but there ought to be some CLI tools to help or at least
> some (web)API
>  * doesn't have to be necesarely written in Ocaml, if we can reuse
> existing tools and have this just as a shell/python script the better
>
> I wanted to go through the policy docs and write some details here on what
> is missing from opam metadata, but this mail is long enough and it is late
> enough already,
> that I thought to start the discussion with what I have so far, and
> discuss the details as we go.
>
> Once we agree on the major design points of this tool I plan on starting
> with opam2rpm, but if someone else wants to own it I'd be more than happy
> with that as well.
>
> Anil also suggested to  look at:
> On 03/19/2015 10:15 AM, Anil Madhavapeddy wrote:
> > This annotated changeset about a recent update from Jon might be useful
> as well:
> >
> > https://github.com/jonludlam/ocaml4021-buildroot/commit/
> 9ef9554c283ea1cda8f64742b73bb63807b791c7#commitcomment-10071274
> >
>
> Best regards,
> --Edwin
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20150321/4ada3599/attachment-0001.html>

From sylvain+ocaml at le-gall.net  Sat Mar 21 09:39:49 2015
From: sylvain+ocaml at le-gall.net (Sylvain Le Gall)
Date: Sat, 21 Mar 2015 09:39:49 +0000
Subject: [opam-devel] opam2{rpm,deb}
In-Reply-To: <CAOCAUGNxfr_gxmeSQiUv9XC55vHMs-gp+xvvPe3-kcRtfL-k9w@mail.gmail.com>
References: <5508AA94.7060100@etorok.net>
 <01A203A9-C2AD-4032-9133-3204F1D07E89@recoil.org>
 <5509FDC9.1080107@etorok.net>
 <5CA7A6A1-3A4A-40DB-A4DE-659750444772@recoil.org>
 <550CAB9F.4040508@etorok.net>
 <CAOCAUGNxfr_gxmeSQiUv9XC55vHMs-gp+xvvPe3-kcRtfL-k9w@mail.gmail.com>
Message-ID: <CAOCAUGMZguS_WuJjsLt7ndznDC=_ZfjA0ZbmWPn-cBgOMpCGUw@mail.gmail.com>

Le sam. 21 mars 2015 ? 10:35, Sylvain Le Gall <sylvain+ocaml at le-gall.net> a
?crit :

>
>
> Le sam. 21 mars 2015 ? 00:22, T?r?k Edwin <edwin+ml-ocaml at etorok.net> a
> ?crit :
>
> Hi,
>>
>> [On Anil's suggestion I'm moving the discussion to opam-devel.
>> TL;DR: I am about to start writing opam2{rpm,deb} for my package and its
>> dependencies. Does anyone else need such a tool or want to help?]
>>
>> I am about to package my own OCaml application for Fedora and Debian,
>> which indirectly depends on 12 opam packages
>> (3 of which already review requests on Fedora's bugzilla as they are
>> shared dependencies with opam itself).
>> I am looking for some automation in preparing spec and Debian templates,
>> for checking their quality, and tracking the packages through their
>> lifecycle,
>> and to avoid making the same common mistakes for each package.
>>
>> Since such a tool (opam2rpm/opam2deb) doesn't exist now, I'll describe
>> what my idea/requirements are.
>> Please let me know what you think and if you have new / different
>> requirements. Perhaps together we can design/create an opam2rpm tool that
>> will be useful for more than just a oneshot conversion.
>>
>> I am quite new to packaging, have just recently went through packaging
>> another (non-OCaml) application for Fedora so I've
>> documented a package's (and package maintainer's) states here:
>> https://fedoraproject.org/wiki/Fedora_Package_Lifecycle_notes.
>> This is still rather incomplete and rough, take it with a grain of salt
>> and consult the official docs when in doubt.
>>
>> What we have now:
>> * opam metadata: depexts, conf-* opam packages, build rules, constraints,
>> etc.
>> * opam-lib
>> * opam-repository, where some packages implicitly assume a "modern" Linux
>> environment (has native compiler, dynlink, certain tools and C headers,
>> etc.).
>> For distribution packages all these dependencies will have to be made
>> explicit
>> * oasis2deb, generates decent starting point for a Debian package, but
>> fails #3
>>
>
> Not sure to understand how oasis2deb fails #3 (test that build requirement
> is complete).
>
> It actually declares build dependencies for the source package, but it
> doesn't embed the source of the dependencies (which is by the way forbidden
> by Debian policy) but depends on what should be the package to do it. I.e.
> it integrates into the target build system.
>
>
Sentence got mixed in my head:
 It actually declares build dependencies for the source package, but it
doesn't embed the source of the dependencies. This is, by the way,
forbidden by Debian policy. So it depends on what the expected
build-depends package should be (it tries to derive it from the findlib
package name). The overall generated package integrates into the target
build system.



> Example on my dlnasync generated package:
>
> Source: dlnasync
> Section: ocaml
> Priority: optional
> Maintainer: Debian OCaml Maintainers <debian-ocaml-maint at lists.debian.org>
> Uploaders:
>   Sylvain Le Gall <sylvain at le-gall.net>
> Build-Depends:
>   ocaml-nox (>= 3.11.1-3~),
>   ocaml-findlib,
>   ocaml-base-nox,
>   libsekred-ocaml-dev (>= 0.2.0),
>   libounit-ocaml-dev (>= 2.0.0),
>   libocamlnet-ocaml-dev (>= 3.5.1),
>   libfileutils-ocaml-dev (>= 0.4.2),
>   libbatteries-ocaml-dev,
>   libav-tools,
>   dh-ocaml (>= 0.9~),
>   debhelper (>= 7.0.50~)
> Standards-Version: 3.9.1
> Homepage: http://forge.ocamlcore.org/projects/dlnasync
> Vcs-Git: git://git.debian.org/git/pkg-ocaml-maint/packages/dlnasync.git
> Vcs-Browser:
>   http://git.debian.org/?p=pkg-ocaml-maint/packages/dlnasync.git
>
> You can see that all build dependencies are here.
>
> I made this decision on purpose. If you want to push this kind of tools to
> build packages to be distributed by the normal RPM/Deb scheme of your
> distribution, they need to somehow comply with policy.
>
> (I also created tools that DON'T do that but I don't publish them because
> they are basic hacks)
>
>
>>
>> What are my requirements?
>> #1 (local) opam repository as input, .spec/Debian as output
>> #2 lint the output (both opam and possibly manually edited spec/Debian),
>> there are already external tools for this
>> #3 test that the build requirements are complete, i.e. it builds in a
>> minimal environment. there are external tools mock/pbuilder for a
>> clean/official solution,
>> or docker for an insecure and somewhat faster solution
>> #4 allow to manually modify the generated .spec and debian/ files and
>> still keep track of changes in opam metadata
>> #5 allow incremental refinement of the spec/debian rules, don't require
>> everything to be 100% compliant/correct syntax
>> #6 allow to override opam metadata (could just git clone the opam repo
>> and use that)
>> #7 opam2rpm and opam2deb should be similar to use (i.e. maybe it should
>> be opam2pkg rpm and opam2pkg deb), and I don't necesarely want to limit
>> this to rpm and deb,
>> someone is welcome to create an opam2openbsd or opam2brew, etc.
>> #8 developing the automation tool shouldn't take (significanlty) longer
>> than manually writing the packaging for those 9 packages :)
>> #9 the goal would also be to make it easier for upstream reviewers to
>> review all these packages, at some point we should consider involving them
>> in the discussion once we have some draft tool
>> to make sure we generate good quality packages :)
>>
>> Most (but not all) of the packages I need to write spec files for are
>> based on OASIS, so we could try to load the missing metadata from oasis, or
>> detect that oasis is used
>> and simplify some steps, however not all packages use it so I think that
>> starting at the opam metadata is still the right way.
>>
>> What kind of automation is needed for opam2rpm and opam2deb for me:
>>  * mapping of opam to Fedora/Debian naming conventions (some opam
>> packages have ocaml- already in them, so take care not to duplicate that)
>>  * generate .spec and debian/ file templates from opam metadata + some
>> overrides. If this was just a one-way/one-time conversion I'd go with
>> something simple (perhaps like ocaml-mustache), however see below
>>  * check license name compliance (Fedora and Debian have their standard
>> name lists), and make sure the package actually has a license *file*
>>  * don't need full roundtrip capability between opam and spec/debian, the
>> tool should serve three purposes only:
>>   * generate initial templates
>>   * show a smart diff
>>   * lint the opam metadata / spec file
>>  * shouldn't require to update the conversion tool just to support an
>> obscure corner-case that can be fixed more easily by hand in the spec file
>>  * doesn't have to be perfect or support the full features of
>> spec/debian/opam files. lets start with the minimum requirements and add
>> fields/features as we need them
>>  * its not a substitute for human review, the final output always has to
>> be tested and reviewed by a human
>>
>> Implementation thoughts:
>>  * ocaml module describing spec file an debian rules with a toplevel type
>> t and nested records, with type 'a field
>>  * some form of conversion to/from a string -> string map
>>  * a lexer that loads that map from the spec/debian files, and a
>> formatter that generates it (ocamllex + format, or just ocaml-re + printf?)
>>  * please if we can lets avoid camlp4 for this, I'd suggest
>> ppx_deriving+cconv or just manually writing the parse/generate calls for
>> the record fields
>>  * validation should be optional
>>  * fields should be easy to declare (name, of_string, to_string,
>> validate, smart_diff), initially all would be raw strings, more
>> parsing/diffing can be added as needed
>>  * some way to fill the 't' type from opam metadata
>>  * certain files may not need all this advanced conversion, and might be
>> easier to generate from a text template with substitutions (ocaml-mustache,
>> or mpp?), and just show a textual diff
>> (docdiff at character/word level is quite nice)
>>
>> Automation for tracking a package through its lifecycle (separate tool):
>> Since packaging an OCaml application can involve packaging/tracking a
>> large number of dependant libraries some tool to track the status of each
>> package (lifecycle)
>> would be useful. This is not specific to OCaml, I'm surprised that
>> upstream distros don't have this already, but anyway using Fedora
>> terminology I want a single CLI tool that can:
>>  * query yum repo for stable packages
>>  * query pkgdb for existence of package in other releases
>>  * query bodhi for pending/testing packages
>>  * query koji for builds submitted/completed
>>  * query for existence of scm (git) repo
>>  * query bugzilla for package review and find out its state (submitted,
>> under review, approved, waiting for scm repo, scm repo created)
>> For Debian a similar tool that:
>>  * query bugs.debian.org for RFP (request for packaging), ITP (intent to
>> package) and its status
>>  * query NEW queue for uploaded source package
>>  * query package tracker for buildd status
>>  * this can also avoid duplicating work, i.e. finding out that someone
>> else is already packaging my package or its dependencies
>>  * might also be useful for other packages
>>  * can be done manually by visiting a bunch of webpages in turn and
>> searching on each, but there ought to be some CLI tools to help or at least
>> some (web)API
>>  * doesn't have to be necesarely written in Ocaml, if we can reuse
>> existing tools and have this just as a shell/python script the better
>>
>> I wanted to go through the policy docs and write some details here on
>> what is missing from opam metadata, but this mail is long enough and it is
>> late enough already,
>> that I thought to start the discussion with what I have so far, and
>> discuss the details as we go.
>>
>> Once we agree on the major design points of this tool I plan on starting
>> with opam2rpm, but if someone else wants to own it I'd be more than happy
>> with that as well.
>>
>> Anil also suggested to  look at:
>> On 03/19/2015 10:15 AM, Anil Madhavapeddy wrote:
>> > This annotated changeset about a recent update from Jon might be useful
>> as well:
>> >
>> > https://github.com/jonludlam/ocaml4021-buildroot/commit/9ef9
>> 554c283ea1cda8f64742b73bb63807b791c7#commitcomment-10071274
>> >
>>
>> Best regards,
>> --Edwin
>> _______________________________________________
>> opam-devel mailing list
>> opam-devel at lists.ocaml.org
>> http://lists.ocaml.org/listinfo/opam-devel
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20150321/e27e08a2/attachment.html>

From edwin+ml-ocaml at etorok.net  Sat Mar 21 11:41:12 2015
From: edwin+ml-ocaml at etorok.net (=?UTF-8?B?VMO2csO2ayBFZHdpbg==?=)
Date: Sat, 21 Mar 2015 13:41:12 +0200
Subject: [opam-devel] opam2{rpm,deb}
In-Reply-To: <CAOCAUGMZguS_WuJjsLt7ndznDC=_ZfjA0ZbmWPn-cBgOMpCGUw@mail.gmail.com>
References: <5508AA94.7060100@etorok.net>
 <01A203A9-C2AD-4032-9133-3204F1D07E89@recoil.org>
 <5509FDC9.1080107@etorok.net>
 <5CA7A6A1-3A4A-40DB-A4DE-659750444772@recoil.org>
 <550CAB9F.4040508@etorok.net>
 <CAOCAUGNxfr_gxmeSQiUv9XC55vHMs-gp+xvvPe3-kcRtfL-k9w@mail.gmail.com>
 <CAOCAUGMZguS_WuJjsLt7ndznDC=_ZfjA0ZbmWPn-cBgOMpCGUw@mail.gmail.com>
Message-ID: <550D58D8.6000301@etorok.net>

On 03/21/2015 11:39 AM, Sylvain Le Gall wrote:
> 
> 
> Le sam. 21 mars 2015 ? 10:35, Sylvain Le Gall <sylvain+ocaml at le-gall.net <mailto:sylvain%2Bocaml at le-gall.net>> a ?crit :
> 
> 
> 
>     Le sam. 21 mars 2015 ? 00:22, T?r?k Edwin <edwin+ml-ocaml at etorok.net <mailto:edwin%2Bml-ocaml at etorok.net>> a ?crit :
> 
>         Hi,
> 
>         [On Anil's suggestion I'm moving the discussion to opam-devel.
>         TL;DR: I am about to start writing opam2{rpm,deb} for my package and its dependencies. Does anyone else need such a tool or want to help?]
> 
>         I am about to package my own OCaml application for Fedora and Debian, which indirectly depends on 12 opam packages
>         (3 of which already review requests on Fedora's bugzilla as they are shared dependencies with opam itself).
>         I am looking for some automation in preparing spec and Debian templates, for checking their quality, and tracking the packages through their lifecycle,
>         and to avoid making the same common mistakes for each package.
> 
>         Since such a tool (opam2rpm/opam2deb) doesn't exist now, I'll describe what my idea/requirements are.
>         Please let me know what you think and if you have new / different requirements. Perhaps together we can design/create an opam2rpm tool that will be useful for more than just a oneshot conversion.
> 
>         I am quite new to packaging, have just recently went through packaging another (non-OCaml) application for Fedora so I've
>         documented a package's (and package maintainer's) states here: https://fedoraproject.org/__wiki__/Fedora_Package_Lifecycle___note__s <https://fedoraproject.org/wiki/Fedora_Package_Lifecycle_notes>.
>         This is still rather incomplete and rough, take it with a grain of salt and consult the official docs when in doubt.
> 
>         What we have now:
>         * opam metadata: depexts, conf-* opam packages, build rules, constraints, etc.
>         * opam-lib
>         * opam-repository, where some packages implicitly assume a "modern" Linux environment (has native compiler, dynlink, certain tools and C headers, etc.).
>         For distribution packages all these dependencies will have to be made explicit
>         * oasis2deb, generates decent starting point for a Debian package, but fails #3
> 
> 
>     Not sure to understand how oasis2deb fails #3 (test that build requirement is complete).
> 
>     It actually declares build dependencies for the source package, but it doesn't embed the source of the dependencies (which is by the way forbidden by Debian policy) but depends on what should be the package to do it. I.e. it integrates into the target build system.
> 
> 
> Sentence got mixed in my head:
>  It actually declares build dependencies for the source package, but it doesn't embed the source of the dependencies. This is, by the way, forbidden by Debian policy. So it depends on what the expected build-depends package should be (it tries to derive it from the findlib package name). The overall generated package integrates into the target build system.
> 
>  

Sorry I should've been more clear that this is not a fault of oasis2debian, but it simply is outside the scope of OASIS to fully specify distribution specific *non-OCaml* dependencies.
For example build-time dependencies on C libraries (zlib, sqlite, etc.), or runtime dependencies on non-OCaml tools.
opam has such metadata (depexts or conf-*) -- although perhaps not fully specified for each package yet -- and in fact it might be possible for opam2deb to just call oasis2debian with --library-dev-extra-depends and other appropriate flags
when the package is actually using oasis.
This is what I meant when I said "detect that oasis is used and simplify some steps"

> 
>     Example on my dlnasync generated package:
> 
>     Source: dlnasync
>     Section: ocaml
>     Priority: optional
>     Maintainer: Debian OCaml Maintainers <debian-ocaml-maint at lists.debian.org <mailto:debian-ocaml-maint at lists.debian.org>>
>     Uploaders:
>       Sylvain Le Gall <sylvain at le-gall.net <mailto:sylvain at le-gall.net>>
>     Build-Depends:
>       ocaml-nox (>= 3.11.1-3~),
>       ocaml-findlib,
>       ocaml-base-nox,
>       libsekred-ocaml-dev (>= 0.2.0),
>       libounit-ocaml-dev (>= 2.0.0),
>       libocamlnet-ocaml-dev (>= 3.5.1),
>       libfileutils-ocaml-dev (>= 0.4.2),
>       libbatteries-ocaml-dev,
>       libav-tools,

I think you give a good example here, you had to use --library-dev-extra-depends to add libav-tools here, but where do I store that so I will have it next time
when upstream releases a new version and the deb package has to be updated?
opam metadata seems like a good place to store that information that benefits other tools as well (opam-installext, or the yet non-existent opam2rpm/oasis2rpm).
This is also my point #4, although oasis2debian can be rerun and standard diff tools used to compare what changed.

>       dh-ocaml (>= 0.9~),
>       debhelper (>= 7.0.50~)
>     Standards-Version: 3.9.1
>     Homepage: http://forge.ocamlcore.org/projects/dlnasync
>     Vcs-Git: git://git.debian.org/git/pkg-ocaml-maint/packages/dlnasync.git <http://git.debian.org/git/pkg-ocaml-maint/packages/dlnasync.git>
>     Vcs-Browser:
>       http://git.debian.org/?p=pkg-ocaml-maint/packages/dlnasync.git
> 
>     You can see that all build dependencies are here.
> 
>     I made this decision on purpose. If you want to push this kind of tools to build packages to be distributed by the normal RPM/Deb scheme of your distribution, they need to somehow comply with policy.
> 
>     (I also created tools that DON'T do that but I don't publish them because they are basic hacks)


Yes, complying with policy is my intention, which is exactly why I want a tool that allows me to easily package all the dozen or so of my dependencies as separate packages, leveraging the already existing
opam/OASIS metadata (and manually improving them where they are not complete).

BTW could you add oasis2debian to opam, or tell me where I can download debian-formats? I forgot where I got it from last time.


>      
> 
> 
>         What are my requirements?
>         #1 (local) opam repository as input, .spec/Debian as output
>         #2 lint the output (both opam and possibly manually edited spec/Debian), there are already external tools for this
>         #3 test that the build requirements are complete, i.e. it builds in a minimal environment. there are external tools mock/pbuilder for a clean/official solution,
>         or docker for an insecure and somewhat faster solution
>         #4 allow to manually modify the generated .spec and debian/ files and still keep track of changes in opam metadata
>         #5 allow incremental refinement of the spec/debian rules, don't require everything to be 100% compliant/correct syntax
>         #6 allow to override opam metadata (could just git clone the opam repo and use that)
>         #7 opam2rpm and opam2deb should be similar to use (i.e. maybe it should be opam2pkg rpm and opam2pkg deb), and I don't necesarely want to limit this to rpm and deb,
>         someone is welcome to create an opam2openbsd or opam2brew, etc.
>         #8 developing the automation tool shouldn't take (significanlty) longer than manually writing the packaging for those 9 packages :)
>         #9 the goal would also be to make it easier for upstream reviewers to review all these packages, at some point we should consider involving them in the discussion once we have some draft tool
>         to make sure we generate good quality packages :)
> 
>         Most (but not all) of the packages I need to write spec files for are based on OASIS, so we could try to load the missing metadata from oasis, or detect that oasis is used
>         and simplify some steps, however not all packages use it so I think that starting at the opam metadata is still the right way.
> 
>         What kind of automation is needed for opam2rpm and opam2deb for me:
>          * mapping of opam to Fedora/Debian naming conventions (some opam packages have ocaml- already in them, so take care not to duplicate that)
>          * generate .spec and debian/ file templates from opam metadata + some overrides. If this was just a one-way/one-time conversion I'd go with
>         something simple (perhaps like ocaml-mustache), however see below
>          * check license name compliance (Fedora and Debian have their standard name lists), and make sure the package actually has a license *file*
>          * don't need full roundtrip capability between opam and spec/debian, the tool should serve three purposes only:
>           * generate initial templates
>           * show a smart diff
>           * lint the opam metadata / spec file
>          * shouldn't require to update the conversion tool just to support an obscure corner-case that can be fixed more easily by hand in the spec file
>          * doesn't have to be perfect or support the full features of spec/debian/opam files. lets start with the minimum requirements and add fields/features as we need them
>          * its not a substitute for human review, the final output always has to be tested and reviewed by a human
> 
>         Implementation thoughts:
>          * ocaml module describing spec file an debian rules with a toplevel type t and nested records, with type 'a field
>          * some form of conversion to/from a string -> string map
>          * a lexer that loads that map from the spec/debian files, and a formatter that generates it (ocamllex + format, or just ocaml-re + printf?)
>          * please if we can lets avoid camlp4 for this, I'd suggest ppx_deriving+cconv or just manually writing the parse/generate calls for the record fields
>          * validation should be optional
>          * fields should be easy to declare (name, of_string, to_string, validate, smart_diff), initially all would be raw strings, more parsing/diffing can be added as needed
>          * some way to fill the 't' type from opam metadata
>          * certain files may not need all this advanced conversion, and might be easier to generate from a text template with substitutions (ocaml-mustache, or mpp?), and just show a textual diff
>         (docdiff at character/word level is quite nice)
> 
>         Automation for tracking a package through its lifecycle (separate tool):
>         Since packaging an OCaml application can involve packaging/tracking a large number of dependant libraries some tool to track the status of each package (lifecycle)
>         would be useful. This is not specific to OCaml, I'm surprised that upstream distros don't have this already, but anyway using Fedora terminology I want a single CLI tool that can:
>          * query yum repo for stable packages
>          * query pkgdb for existence of package in other releases
>          * query bodhi for pending/testing packages
>          * query koji for builds submitted/completed
>          * query for existence of scm (git) repo
>          * query bugzilla for package review and find out its state (submitted, under review, approved, waiting for scm repo, scm repo created)
>         For Debian a similar tool that:
>          * query bugs.debian.org <http://bugs.debian.org> for RFP (request for packaging), ITP (intent to package) and its status
>          * query NEW queue for uploaded source package
>          * query package tracker for buildd status
>          * this can also avoid duplicating work, i.e. finding out that someone else is already packaging my package or its dependencies
>          * might also be useful for other packages
>          * can be done manually by visiting a bunch of webpages in turn and searching on each, but there ought to be some CLI tools to help or at least some (web)API
>          * doesn't have to be necesarely written in Ocaml, if we can reuse existing tools and have this just as a shell/python script the better
> 
>         I wanted to go through the policy docs and write some details here on what is missing from opam metadata, but this mail is long enough and it is late enough already,
>         that I thought to start the discussion with what I have so far, and discuss the details as we go.
> 
>         Once we agree on the major design points of this tool I plan on starting with opam2rpm, but if someone else wants to own it I'd be more than happy with that as well.
> 
>         Anil also suggested to  look at:
>         On 03/19/2015 10:15 AM, Anil Madhavapeddy wrote:
>         > This annotated changeset about a recent update from Jon might be useful as well:
>         >
>         > https://github.com/jonludlam/__o__caml4021-buildroot/commit/__9ef9__554c283ea1cda8f64742b73bb6__3807__b791c7#commitcomment-__10071274 <https://github.com/jonludlam/ocaml4021-buildroot/commit/9ef9554c283ea1cda8f64742b73bb63807b791c7#commitcomment-10071274>
>         >
> 
>         Best regards,
>         --Edwin
>         ___________________________________________________
>         opam-devel mailing list
>         opam-devel at lists.ocaml.org <mailto:opam-devel at lists.ocaml.org>
>         http://lists.ocaml.org/__listinf__o/opam-devel <http://lists.ocaml.org/listinfo/opam-devel>
> 


From anil at recoil.org  Mon Mar 23 16:27:47 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Mon, 23 Mar 2015 16:27:47 +0000
Subject: [opam-devel] Finding dependencies of a specific OPAM package
Message-ID: <3D34CFEA-3764-4A26-A2FC-3A31E5E9983E@recoil.org>

I'm trying to find all the reverse dependency of a particular version of Cohttp.  I can do:

    opam list --depends-on cohttp --rec

to get all of the dependencies for all versions.  Unfortunately trying:

    opam list --depends-on cohttp.0.15.2 --rec

gives the same results (including packages that depend on earlier versions of Cohttp and are specifically not installable with cohttp.0.15.2)

Any suggestions on how to resolve this?  I guess going through the list individually to check constraints is one way, but feely very clunky (and slow due to going through the solver so many times).

-anil

From roberto at dicosmo.org  Mon Mar 23 16:43:59 2015
From: roberto at dicosmo.org (Roberto Di Cosmo)
Date: Mon, 23 Mar 2015 17:43:59 +0100
Subject: [opam-devel] Finding dependencies of a specific OPAM package
In-Reply-To: <3D34CFEA-3764-4A26-A2FC-3A31E5E9983E@recoil.org>
References: <3D34CFEA-3764-4A26-A2FC-3A31E5E9983E@recoil.org>
Message-ID: <20150323164359.GB21209@traveler>

Computing the reverse dependency cone of a package P is just a matter of
visiting the dependency graph, and you do not need any call to the solver
for this. 

But this reverse dependency cone may very well contain packages not coinstallable with P.

For example, if you have

package: a
depends: cohttp, b

package: cohttp
version: 1
conflicts: b

package: cohttp
version: 2

Then a is a reverse dependency for both versions of cohttp, even if it is
coinstallable only with version 2.

If you want all packages in the reverse dependency cone of cohttp _that are also
coinstallable with it_, then you need to actually call the solver on each of
them.

--
Roberto

On Mon, Mar 23, 2015 at 04:27:47PM +0000, Anil Madhavapeddy wrote:
> I'm trying to find all the reverse dependency of a particular version of Cohttp.  I can do:
> 
>     opam list --depends-on cohttp --rec
> 
> to get all of the dependencies for all versions.  Unfortunately trying:
> 
>     opam list --depends-on cohttp.0.15.2 --rec
> 
> gives the same results (including packages that depend on earlier versions of Cohttp and are specifically not installable with cohttp.0.15.2)
> 
> Any suggestions on how to resolve this?  I guess going through the list individually to check constraints is one way, but feely very clunky (and slow due to going through the solver so many times).
> 
> -anil
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel

-- 
Roberto Di Cosmo
 
------------------------------------------------------------------
Professeur               En delegation a l'INRIA
PPS                      E-mail: roberto at dicosmo.org
Universite Paris Diderot WWW  : http://www.dicosmo.org
Case 7014                Tel  : ++33-(0)1-57 27 92 20
5, Rue Thomas Mann       
F-75205 Paris Cedex 13   Identica: http://identi.ca/rdicosmo
FRANCE.                  Twitter: http://twitter.com/rdicosmo
------------------------------------------------------------------
Attachments:
MIME accepted, Word deprecated
      http://www.gnu.org/philosophy/no-word-attachments.html
------------------------------------------------------------------
Office location:
 
Bureau 3020 (3rd floor)
Batiment Sophie Germain
Avenue de France
Metro Bibliotheque Francois Mitterrand, ligne 14/RER C
-----------------------------------------------------------------
GPG fingerprint 2931 20CE 3A5A 5390 98EC 8BFC FCCA C3BE 39CB 12D3                        

From anil at recoil.org  Mon Mar 23 16:52:04 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Mon, 23 Mar 2015 16:52:04 +0000
Subject: [opam-devel] Finding dependencies of a specific OPAM package
In-Reply-To: <20150323164359.GB21209@traveler>
References: <3D34CFEA-3764-4A26-A2FC-3A31E5E9983E@recoil.org>
 <20150323164359.GB21209@traveler>
Message-ID: <0D2783C7-D2BD-4AE6-852F-7546D4E21F48@recoil.org>

Good point -- I'm looking for all the reverse dependency package cone of
Cohttp that are installable for a particular version of Cohttp.  I will
then install each of them separately, so there's no requirement for the
results to all be coinstallable.

The goal is to check that a new version of Cohttp doesn't break an existing
package that worked with an earlier version, so that we can add an upper
bound to the opam package before merging the new release (and of course to
use this more generally with other packages too).

-anil

> On 23 Mar 2015, at 16:43, Roberto Di Cosmo <roberto at dicosmo.org> wrote:
> 
> Computing the reverse dependency cone of a package P is just a matter of
> visiting the dependency graph, and you do not need any call to the solver
> for this. 
> 
> But this reverse dependency cone may very well contain packages not coinstallable with P.
> 
> For example, if you have
> 
> package: a
> depends: cohttp, b
> 
> package: cohttp
> version: 1
> conflicts: b
> 
> package: cohttp
> version: 2
> 
> Then a is a reverse dependency for both versions of cohttp, even if it is
> coinstallable only with version 2.
> 
> If you want all packages in the reverse dependency cone of cohttp _that are also
> coinstallable with it_, then you need to actually call the solver on each of
> them.
> 
> --
> Roberto
> 
> On Mon, Mar 23, 2015 at 04:27:47PM +0000, Anil Madhavapeddy wrote:
>> I'm trying to find all the reverse dependency of a particular version of Cohttp.  I can do:
>> 
>>    opam list --depends-on cohttp --rec
>> 
>> to get all of the dependencies for all versions.  Unfortunately trying:
>> 
>>    opam list --depends-on cohttp.0.15.2 --rec
>> 
>> gives the same results (including packages that depend on earlier versions of Cohttp and are specifically not installable with cohttp.0.15.2)
>> 
>> Any suggestions on how to resolve this?  I guess going through the list individually to check constraints is one way, but feely very clunky (and slow due to going through the solver so many times).
>> 
>> -anil
>> _______________________________________________
>> opam-devel mailing list
>> opam-devel at lists.ocaml.org
>> http://lists.ocaml.org/listinfo/opam-devel
> 
> -- 
> Roberto Di Cosmo
> 
> ------------------------------------------------------------------
> Professeur               En delegation a l'INRIA
> PPS                      E-mail: roberto at dicosmo.org
> Universite Paris Diderot WWW  : http://www.dicosmo.org
> Case 7014                Tel  : ++33-(0)1-57 27 92 20
> 5, Rue Thomas Mann       
> F-75205 Paris Cedex 13   Identica: http://identi.ca/rdicosmo
> FRANCE.                  Twitter: http://twitter.com/rdicosmo
> ------------------------------------------------------------------
> Attachments:
> MIME accepted, Word deprecated
>      http://www.gnu.org/philosophy/no-word-attachments.html
> ------------------------------------------------------------------
> Office location:
> 
> Bureau 3020 (3rd floor)
> Batiment Sophie Germain
> Avenue de France
> Metro Bibliotheque Francois Mitterrand, ligne 14/RER C
> -----------------------------------------------------------------
> GPG fingerprint 2931 20CE 3A5A 5390 98EC 8BFC FCCA C3BE 39CB 12D3                        
> 


From louis.gesbert at ocamlpro.com  Tue Mar 24 10:05:38 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Tue, 24 Mar 2015 19:05:38 +0900
Subject: [opam-devel] Finding dependencies of a specific OPAM package
In-Reply-To: <0D2783C7-D2BD-4AE6-852F-7546D4E21F48@recoil.org>
References: <3D34CFEA-3764-4A26-A2FC-3A31E5E9983E@recoil.org>
 <20150323164359.GB21209@traveler>
 <0D2783C7-D2BD-4AE6-852F-7546D4E21F48@recoil.org>
Message-ID: <2927820.VlJExX2Iu9@agaric>

> - Anil Madhavapeddy, 23/03/2015 16:52 -
> Good point -- I'm looking for all the reverse dependency package cone of
> Cohttp that are installable for a particular version of Cohttp.  I will
> then install each of them separately, so there's no requirement for the
> results to all be coinstallable.

If you really just need this, you could:
- get the reverse dependency cone, as before
- try the coinstallation of cohttp and each member of this cone. If the solver returns no solution, just skip, otherwise check that all goes well:

    COHTTP=cohttp.0.15.2
    for p in $(opam list --rec --short --sort --depends-on $COHTTP); do
      if opam install --show $COHTTP $p; then opam install $COHTTP $p; fi
    done

Note that not specifying the version will just make OPAM choose the installed version, or failing that the highest available: it won't aggregate results for all versions. 

The `--short` format doesn't print any version numbers: if it's a shortcoming that should be fairly easy to improve; also, as Roberto said, any package that has a (possibly transitive) dependency to cohttp that may include that version will be included, even if it's not coinstallable.

To resolve in one step, I guess we could compute the set of packages coinstallable with this version of cohttp using Dose, and then take the intersection. (Or rather, the packages _not_ coinstallable and the difference ?)

> 
> The goal is to check that a new version of Cohttp doesn't break an existing
> package that worked with an earlier version, so that we can add an upper
> bound to the opam package before merging the new release (and of course to
> use this more generally with other packages too).
> 
> -anil
> 
> > On 23 Mar 2015, at 16:43, Roberto Di Cosmo <roberto at dicosmo.org> wrote:
> > 
> > Computing the reverse dependency cone of a package P is just a matter of
> > visiting the dependency graph, and you do not need any call to the solver
> > for this. 
> > 
> > But this reverse dependency cone may very well contain packages not coinstallable with P.
> > 
> > For example, if you have
> > 
> > package: a
> > depends: cohttp, b
> > 
> > package: cohttp
> > version: 1
> > conflicts: b
> > 
> > package: cohttp
> > version: 2
> > 
> > Then a is a reverse dependency for both versions of cohttp, even if it is
> > coinstallable only with version 2.
> > 
> > If you want all packages in the reverse dependency cone of cohttp _that are also
> > coinstallable with it_, then you need to actually call the solver on each of
> > them.
> > 
> > --
> > Roberto
> > 
> > On Mon, Mar 23, 2015 at 04:27:47PM +0000, Anil Madhavapeddy wrote:
> >> I'm trying to find all the reverse dependency of a particular version of Cohttp.  I can do:
> >> 
> >>    opam list --depends-on cohttp --rec
> >> 
> >> to get all of the dependencies for all versions.  Unfortunately trying:
> >> 
> >>    opam list --depends-on cohttp.0.15.2 --rec
> >> 
> >> gives the same results (including packages that depend on earlier versions of Cohttp and are specifically not installable with cohttp.0.15.2)
> >> 
> >> Any suggestions on how to resolve this?  I guess going through the list individually to check constraints is one way, but feely very clunky (and slow due to going through the solver so many times).
> >> 
> >> -anil
> >> _______________________________________________
> >> opam-devel mailing list
> >> opam-devel at lists.ocaml.org
> >> http://lists.ocaml.org/listinfo/opam-devel
> > 
> 
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 473 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20150324/3ac39ffe/attachment.sig>

From thomas at gazagnaire.org  Tue Mar 24 12:09:36 2015
From: thomas at gazagnaire.org (Thomas Gazagnaire)
Date: Tue, 24 Mar 2015 12:09:36 +0000
Subject: [opam-devel] Travis is broken
In-Reply-To: <1b56bd6d34db4af2ade2215320a4e75f@whitequark.org>
References: <1b56bd6d34db4af2ade2215320a4e75f@whitequark.org>
Message-ID: <E6475A98-D88E-4326-AED4-9D839BE54CF7@gazagnaire.org>

We start to have the same issue again.

Travis CI kindly allocates us 3 linux and 1 OSX builders per PR. As we are testing 7 linux configurations, we need 3 full cycles (3 + 3 + 2). Currently PR are taking between 2 and 3h to start and complete which is a very slow feedback. Would be very nice if we could improve that by letting Travis CI manage the builds and delegating the builds to other CI infrastructures.

Thomas


> On 24 Oct 2014, at 00:11, Peter Zotov <whitequark at whitequark.org> wrote:
> 
> Hi,
> 
> I'll be brief: Travis can't keep up with load on opam-repository.
> See https://github.com/ocaml/opam-repository/pull/2883#issuecomment-60322073
> and https://github.com/ocaml/opam-repository/issues/2880
> for more details.
> 
> I'll hack together a buildbot+bors config this weekend.
> I can run it off my own infrastructure for some time, but in the long
> run, of course, it's better if some "official" team owns (and guarantees
> that it's up) the infra. I also don't have headless OS X, and
> I don't want my laptop to be the buildslave for long :p
> 
> -- 
> Peter Zotov
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel


From anil at recoil.org  Tue Mar 24 12:11:14 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Tue, 24 Mar 2015 12:11:14 +0000
Subject: [opam-devel] Travis is broken
In-Reply-To: <E6475A98-D88E-4326-AED4-9D839BE54CF7@gazagnaire.org>
References: <1b56bd6d34db4af2ade2215320a4e75f@whitequark.org>
 <E6475A98-D88E-4326-AED4-9D839BE54CF7@gazagnaire.org>
Message-ID: <68931264-3F92-4641-AD22-2B6227971B0F@recoil.org>

Just disable the OSX build again if it's an issue. I trimmed back the number of Linux combinations already.

-anil

> On 24 Mar 2015, at 12:09, Thomas Gazagnaire <thomas at gazagnaire.org> wrote:
> 
> We start to have the same issue again.
> 
> Travis CI kindly allocates us 3 linux and 1 OSX builders per PR. As we are testing 7 linux configurations, we need 3 full cycles (3 + 3 + 2). Currently PR are taking between 2 and 3h to start and complete which is a very slow feedback. Would be very nice if we could improve that by letting Travis CI manage the builds and delegating the builds to other CI infrastructures.
> 
> Thomas
> 
> 
>> On 24 Oct 2014, at 00:11, Peter Zotov <whitequark at whitequark.org> wrote:
>> 
>> Hi,
>> 
>> I'll be brief: Travis can't keep up with load on opam-repository.
>> See https://github.com/ocaml/opam-repository/pull/2883#issuecomment-60322073
>> and https://github.com/ocaml/opam-repository/issues/2880
>> for more details.
>> 
>> I'll hack together a buildbot+bors config this weekend.
>> I can run it off my own infrastructure for some time, but in the long
>> run, of course, it's better if some "official" team owns (and guarantees
>> that it's up) the infra. I also don't have headless OS X, and
>> I don't want my laptop to be the buildslave for long :p
>> 
>> -- 
>> Peter Zotov
>> _______________________________________________
>> opam-devel mailing list
>> opam-devel at lists.ocaml.org
>> http://lists.ocaml.org/listinfo/opam-devel
> 
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
> 


From daniel.buenzli at erratique.ch  Tue Mar 24 12:23:46 2015
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Tue, 24 Mar 2015 13:23:46 +0100
Subject: [opam-devel] Travis is broken
In-Reply-To: <E6475A98-D88E-4326-AED4-9D839BE54CF7@gazagnaire.org>
References: <1b56bd6d34db4af2ade2215320a4e75f@whitequark.org>
 <E6475A98-D88E-4326-AED4-9D839BE54CF7@gazagnaire.org>
Message-ID: <9E31E70073874A19A0E92732B7816F94@erratique.ch>

Le mardi, 24 mars 2015 ? 13:09, Thomas Gazagnaire a ?crit :
> We start to have the same issue again.
>  
> Travis CI kindly allocates us 3 linux and 1 OSX builders per PR. As we are testing 7 linux configurations, we need 3 full cycles (3 + 3 + 2). Currently PR are taking between 2 and 3h to start and complete which is a very slow feedback. Would be very nice if we could improve that by letting Travis CI manage the builds and delegating the builds to other CI infrastructures.
Yes, the long feedback loop is quite annoying. Also I noticed that if you update a PR with a new commit (e.g. `opam publish (re)submit`) it will not kill the previously scheduled/started job.  

Daniel



From thomas at gazagnaire.org  Tue Mar 24 19:01:44 2015
From: thomas at gazagnaire.org (Thomas Gazagnaire)
Date: Tue, 24 Mar 2015 19:01:44 +0000
Subject: [opam-devel] Travis is broken
In-Reply-To: <9E31E70073874A19A0E92732B7816F94@erratique.ch>
References: <1b56bd6d34db4af2ade2215320a4e75f@whitequark.org>
 <E6475A98-D88E-4326-AED4-9D839BE54CF7@gazagnaire.org>
 <9E31E70073874A19A0E92732B7816F94@erratique.ch>
Message-ID: <0DB4A6EE-6D20-430A-8138-251BC22F22D8@gazagnaire.org>

>> We start to have the same issue again.
>> 
>> Travis CI kindly allocates us 3 linux and 1 OSX builders per PR. As we are testing 7 linux configurations, we need 3 full cycles (3 + 3 + 2). Currently PR are taking between 2 and 3h to start and complete which is a very slow feedback. Would be very nice if we could improve that by letting Travis CI manage the builds and delegating the builds to other CI infrastructures.
> Yes, the long feedback loop is quite annoying. Also I noticed that if you update a PR with a new commit (e.g. `opam publish (re)submit`) it will not kill the previously scheduled/started job.  

I've just disabled the continuous build of "pushes" so now only the pull request are tested. Hopefully this should speed up things a little.


From darioteixeira at yahoo.com  Tue Mar 31 13:43:14 2015
From: darioteixeira at yahoo.com (Dario Teixeira)
Date: Tue, 31 Mar 2015 12:43:14 +0000 (UTC)
Subject: [opam-devel] OPAM on a Raspberry Pi 2
Message-ID: <1803947612.1957403.1427805794203.JavaMail.yahoo@mail.yahoo.com>

Hi,

I'm trying to use OPAM 1.2.1 on a Raspberry Pi 2 running Raspbian.
At first glance everything seems fine.  However, I'm running into
problems when attempting to install some packages with complex
dependencies.  OPAM complains that it cannot install package A
because it requires package B, instead of trying to install B
and its dependencies automatically.  I suspect the solver is
timing out prematurely given the lowly specs of the Pi 2.
(I have a similar setup in a more powerful ARM SBC, and
everything works fine).

I've tried installing aspcud, but OPAM complains that the
external solver produces bad output.  I've also tried setting
OPAMSOLVERTIMEOUT to a high value, but it does not seem to
make a difference.

In some cases I've managed to get around these errors by
manually following the dependency graph and installing
packages starting at the leaves first and then climbing up.
This sort of defeats the purpose of using OPAM, though.


Anyway, is anyone else experiencing similar problems?  And
if so, any suggestions on getting around them?

Thanks in advance!
Best regards,
Dario Teixeira

From daniel.buenzli at erratique.ch  Tue Mar 31 13:58:57 2015
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Tue, 31 Mar 2015 14:58:57 +0200
Subject: [opam-devel] OPAM on a Raspberry Pi 2
In-Reply-To: <1803947612.1957403.1427805794203.JavaMail.yahoo@mail.yahoo.com>
References: <1803947612.1957403.1427805794203.JavaMail.yahoo@mail.yahoo.com>
Message-ID: <2A8EFE31463B43C19202E4BB103A3CD8@erratique.ch>

Le mardi, 31 mars 2015 ? 14:43, Dario Teixeira a ?crit :
> And if so, any suggestions on getting around them?

Maybe use the solver farm ?  

http://cudf-solvers.irill.org/index.html

Best,

Daniel



From anil at recoil.org  Tue Mar 31 14:36:26 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Tue, 31 Mar 2015 14:36:26 +0100
Subject: [opam-devel] OPAM on a Raspberry Pi 2
In-Reply-To: <1803947612.1957403.1427805794203.JavaMail.yahoo@mail.yahoo.com>
References: <1803947612.1957403.1427805794203.JavaMail.yahoo@mail.yahoo.com>
Message-ID: <32C1AB79-59BB-418E-BF7E-AA3FFE0C7D62@recoil.org>


> On 31 Mar 2015, at 13:43, Dario Teixeira <darioteixeira at yahoo.com> wrote:
> 
> Hi,
> 
> I'm trying to use OPAM 1.2.1 on a Raspberry Pi 2 running Raspbian.
> At first glance everything seems fine.  However, I'm running into
> problems when attempting to install some packages with complex
> dependencies.  OPAM complains that it cannot install package A
> because it requires package B, instead of trying to install B
> and its dependencies automatically.  I suspect the solver is
> timing out prematurely given the lowly specs of the Pi 2.
> (I have a similar setup in a more powerful ARM SBC, and
> everything works fine).
> 
> I've tried installing aspcud, but OPAM complains that the
> external solver produces bad output.

This sounds like the key problem. OPAM+aspcud should work fine
on ARM (we use it regularly like this in MirageOS with a Cubieboard2).

Could you please file a bug report with the version of aspcud and
OPAM and the output?  Thanks!

Anil


