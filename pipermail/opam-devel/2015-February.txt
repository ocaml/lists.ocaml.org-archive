From louis.gesbert at ocamlpro.com  Fri Feb  6 03:27:39 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Fri, 06 Feb 2015 12:27:39 +0900
Subject: [opam-devel] OPAM 1.2.1 Beta
Message-ID: <4302783.nBaMaXSsNa@agaric>

Hi all,

The first beta for OPAM 1.2.1 has been released. It brings lots of fixes, mostly related to usability, but also a rewritten action and parallel processing engine. Although visible mostly in the messages displayed, this brings a big improvement on reliability and predictability, and should also be faster.

See the more detailed changelog and links at https://github.com/ocaml/opam/releases/tag/1.2.1-beta

Please test and report any issues !

Thanks,
Louis

From louis.gesbert at ocamlpro.com  Fri Feb 13 09:16:11 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Fri, 13 Feb 2015 18:16:11 +0900
Subject: [opam-devel] OPAM 1.2.1 beta2
Message-ID: <237306290.0thk0Kv2dR@agaric>

Just announcing the new beta. All details at https://github.com/ocaml/opam/releases/tag/1.2.1-beta2

Probably worth announcing more widely after a few days of tests.

Cheers,
Louis

From anil at recoil.org  Fri Feb 13 11:10:42 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Fri, 13 Feb 2015 11:10:42 +0000
Subject: [opam-devel] OPAM 1.2.1 beta2
In-Reply-To: <237306290.0thk0Kv2dR@agaric>
References: <237306290.0thk0Kv2dR@agaric>
Message-ID: <D5536991-3CC8-4E83-B593-547A6358EFAB@recoil.org>

Thanks Louis.  I'm just preparing PPAs for this -- could you please merge the relevant changes into the 1.2 branch so that I can grab the sources from there instead of master?

-anil

> On 13 Feb 2015, at 09:16, Louis Gesbert <louis.gesbert at ocamlpro.com> wrote:
> 
> Just announcing the new beta. All details at https://github.com/ocaml/opam/releases/tag/1.2.1-beta2
> 
> Probably worth announcing more widely after a few days of tests.
> 
> Cheers,
> Louis
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
> 


From anil at recoil.org  Fri Feb 13 13:50:26 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Fri, 13 Feb 2015 13:50:26 +0000
Subject: [opam-devel] OPAM 1.2.1 beta2
In-Reply-To: <D5536991-3CC8-4E83-B593-547A6358EFAB@recoil.org>
References: <237306290.0thk0Kv2dR@agaric>
 <D5536991-3CC8-4E83-B593-547A6358EFAB@recoil.org>
Message-ID: <E7092C9F-0A8A-47AC-9DB0-EEC23604E1B7@recoil.org>

I've sent in a pull request to opam-repository to activate testing the PPAs by default:
https://github.com/ocaml/opam-repository/pull/3562

But it found an immediate regression, so I'm not going to merge until that's done.  I can refresh the PPAs pretty fast and make 1.2.1 into a allowed_failure mode of testing.

Error: https://github.com/ocaml/opam/issues/1998

The new progress indicator for installation is very cool looking in Travis, incidentally!  Can you make the UTF-8 camel spin around too? :-)

cheers
Anil

> On 13 Feb 2015, at 11:10, Anil Madhavapeddy <anil at recoil.org> wrote:
> 
> Thanks Louis.  I'm just preparing PPAs for this -- could you please merge the relevant changes into the 1.2 branch so that I can grab the sources from there instead of master?
> 
> -anil
> 
>> On 13 Feb 2015, at 09:16, Louis Gesbert <louis.gesbert at ocamlpro.com> wrote:
>> 
>> Just announcing the new beta. All details at https://github.com/ocaml/opam/releases/tag/1.2.1-beta2
>> 
>> Probably worth announcing more widely after a few days of tests.
>> 
>> Cheers,
>> Louis
>> _______________________________________________
>> opam-devel mailing list
>> opam-devel at lists.ocaml.org
>> http://lists.ocaml.org/listinfo/opam-devel
>> 
> 


From anil at recoil.org  Mon Feb 16 11:04:00 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Mon, 16 Feb 2015 11:04:00 +0000
Subject: [opam-devel] OPAM: retiring 3.12.1 testing?
Message-ID: <DA83A128-9AA1-4AB4-84FE-9762A9AB0C7C@recoil.org>

Dear OCaml list,

We are currently testing the following compiler versions on every pull request to OPAM;

- OCaml 3.12.1
- OCaml 4.00.1
- OCaml 4.01.0
- OCaml 4.02.0

We will shortly have to test 4.02.1, and would also like to test trunk snapshots of the
compiler as an "allowed failure".

Running 6 compiler revisions per package puts quite a bit of stress on our Travis CI
resources, and so it's probably time to retire OCaml 3.12.1 from the testing matrix.

Before we do this, I'd like to get a sense for how many people still care about ensuring
that their packages work well on the 3.12.1 series, or if there are still distributions
for which this support matters.  If there is still sufficient interest, we can continue
to support 3.12.1 for some time.

thanks,
Anil

From stephen.dolan at cl.cam.ac.uk  Mon Feb 16 18:22:46 2015
From: stephen.dolan at cl.cam.ac.uk (Stephen Dolan)
Date: Mon, 16 Feb 2015 18:22:46 +0000
Subject: [opam-devel] [Caml-list] OPAM: retiring 3.12.1 testing?
In-Reply-To: <DA83A128-9AA1-4AB4-84FE-9762A9AB0C7C@recoil.org>
References: <DA83A128-9AA1-4AB4-84FE-9762A9AB0C7C@recoil.org>
Message-ID: <CA+mHimMPOVnfXSGqVDDJSKBXg6trRXdXraN_TmrNydBvvRKTXw@mail.gmail.com>

On Mon, Feb 16, 2015 at 11:04 AM, Anil Madhavapeddy <anil at recoil.org> wrote:
> Dear OCaml list,
>
> We are currently testing the following compiler versions on every pull request to OPAM;
>
> - OCaml 3.12.1
> - OCaml 4.00.1
> - OCaml 4.01.0
> - OCaml 4.02.0
>
> We will shortly have to test 4.02.1, and would also like to test trunk snapshots of the
> compiler as an "allowed failure".
>
> Running 6 compiler revisions per package puts quite a bit of stress on our Travis CI
> resources, and so it's probably time to retire OCaml 3.12.1 from the testing matrix.

Getting rid of 4.02.0 will probably ease more CI-stress than getting
rid of 3.12.1: as Gabriel points out, one of the few changes from
4.02.0 to 4.02.1 is to fix the atrocious compile times of 4.02.0.

Stephen

From adrien at notk.org  Mon Feb 16 18:52:48 2015
From: adrien at notk.org (Adrien Nader)
Date: Mon, 16 Feb 2015 19:52:48 +0100
Subject: [opam-devel] [Caml-list] OPAM: retiring 3.12.1 testing?
In-Reply-To: <DA83A128-9AA1-4AB4-84FE-9762A9AB0C7C@recoil.org>
References: <DA83A128-9AA1-4AB4-84FE-9762A9AB0C7C@recoil.org>
Message-ID: <20150216185248.GA18316@notk.org>

Hi,

On Mon, Feb 16, 2015, Anil Madhavapeddy wrote:
> Dear OCaml list,
> 
> We are currently testing the following compiler versions on every pull request to OPAM;
> 
> - OCaml 3.12.1
> - OCaml 4.00.1
> - OCaml 4.01.0
> - OCaml 4.02.0
> 
> We will shortly have to test 4.02.1, and would also like to test trunk snapshots of the
> compiler as an "allowed failure".
> 
> Running 6 compiler revisions per package puts quite a bit of stress on our Travis CI
> resources, and so it's probably time to retire OCaml 3.12.1 from the testing matrix.
> 
> Before we do this, I'd like to get a sense for how many people still care about ensuring
> that their packages work well on the 3.12.1 series, or if there are still distributions
> for which this support matters.  If there is still sufficient interest, we can continue
> to support 3.12.1 for some time.

For yypkg/win-builds I've done a quick survey of what's in Linux
distributions. I was mainly interested in moving past 3.12.1
compatibility for my own code but found it undoable before the end of
this year or maybe early next year.

Ubuntu 12.04 has 3.12.1 and is still supported and widespread. 14.04 has
4.01.0 but isn't very old. Debian has a similar combination for its
versions. I think 4.02.0 wasn't picked by linux distributions with
long-term support (including RH if I'm not mistaken).

3.12.1 is really widespread and I think it has to be kept for a fairly
long time. 4.00.0 is basically never used. 4.01.0 is widespread and will
be widespread for some time. 4.02.0 is nowhere to be seen. I believe
4.02.0/1 and maybe 4.02.2 won't be picked up either (unless 4.03.0 takes
close to two years to be released).

I'd say: keep 3.12.1, 4.01.0, 4.02.whatever-is-the-most-recent (because
that's what ocamlers use) and trunk. Dump the others (i.e. 4.00.1,
4.02.0).

-- 
Adrien Nader

From louis.gesbert at ocamlpro.com  Tue Feb 17 00:36:17 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Tue, 17 Feb 2015 09:36:17 +0900
Subject: [opam-devel] [Caml-list] OPAM: retiring 3.12.1 testing?
In-Reply-To: <20150216185248.GA18316@notk.org>
References: <DA83A128-9AA1-4AB4-84FE-9762A9AB0C7C@recoil.org>
 <20150216185248.GA18316@notk.org>
Message-ID: <3079011.QOsAmGbPEa@agaric>

Thanks a lot for the detailed overview. I was indeed thinking it wouldn't be worth keeping both 4.02.0 and 4.02.1, but didn't know, for example, about 4.00.1. The first consequence of dropping e.g. support for 3.12.1 would probably be that incompatible packages are either not fixed, or not declared incompatible, which would lead to an error during compilation whenever OPAM tried to install them, instead of a clear message or a solution around that package/version if it exists.

Currently, according to the metadata, 561 of the 837 OPAM packages (67%) can be installed on 3.12.1, around 30 of which not at their latest version. The others either are not compatible or depend on an incompatible package.

OPAM itself (as opposed to the repo) will obviously keep compiling on 3.12.1 for the moment (the tests regularly help pick up an incompatible String.init or likewise)

Best,
Louis Gesbert -- OCamlPro

> - Adrien Nader, 16/02/2015 19:52 -
> Hi,
> 
> On Mon, Feb 16, 2015, Anil Madhavapeddy wrote:
> > Dear OCaml list,
> > 
> > We are currently testing the following compiler versions on every pull request to OPAM;
> > 
> > - OCaml 3.12.1
> > - OCaml 4.00.1
> > - OCaml 4.01.0
> > - OCaml 4.02.0
> > 
> > We will shortly have to test 4.02.1, and would also like to test trunk snapshots of the
> > compiler as an "allowed failure".
> > 
> > Running 6 compiler revisions per package puts quite a bit of stress on our Travis CI
> > resources, and so it's probably time to retire OCaml 3.12.1 from the testing matrix.
> > 
> > Before we do this, I'd like to get a sense for how many people still care about ensuring
> > that their packages work well on the 3.12.1 series, or if there are still distributions
> > for which this support matters.  If there is still sufficient interest, we can continue
> > to support 3.12.1 for some time.
> 
> For yypkg/win-builds I've done a quick survey of what's in Linux
> distributions. I was mainly interested in moving past 3.12.1
> compatibility for my own code but found it undoable before the end of
> this year or maybe early next year.
> 
> Ubuntu 12.04 has 3.12.1 and is still supported and widespread. 14.04 has
> 4.01.0 but isn't very old. Debian has a similar combination for its
> versions. I think 4.02.0 wasn't picked by linux distributions with
> long-term support (including RH if I'm not mistaken).
> 
> 3.12.1 is really widespread and I think it has to be kept for a fairly
> long time. 4.00.0 is basically never used. 4.01.0 is widespread and will
> be widespread for some time. 4.02.0 is nowhere to be seen. I believe
> 4.02.0/1 and maybe 4.02.2 won't be picked up either (unless 4.03.0 takes
> close to two years to be released).
> 
> I'd say: keep 3.12.1, 4.01.0, 4.02.whatever-is-the-most-recent (because
> that's what ocamlers use) and trunk. Dump the others (i.e. 4.00.1,
> 4.02.0).
> 
> 

From anil at recoil.org  Tue Feb 17 07:15:59 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Tue, 17 Feb 2015 07:15:59 +0000
Subject: [opam-devel] [Caml-list] OPAM: retiring 3.12.1 testing?
In-Reply-To: <20150216185248.GA18316@notk.org>
References: <DA83A128-9AA1-4AB4-84FE-9762A9AB0C7C@recoil.org>
 <20150216185248.GA18316@notk.org>
Message-ID: <7015E232-4094-481F-8906-EA35470701E4@recoil.org>

On 16 Feb 2015, at 18:52, Adrien Nader <adrien at notk.org> wrote:
> 
> Hi,
> 
> On Mon, Feb 16, 2015, Anil Madhavapeddy wrote:
>> Dear OCaml list,
>> 
>> We are currently testing the following compiler versions on every pull request to OPAM;
>> 
>> - OCaml 3.12.1
>> - OCaml 4.00.1
>> - OCaml 4.01.0
>> - OCaml 4.02.0

My apologies -- there were a couple of typos in my original mail.  I meant that
we are testing *opam-repository* with the above versions, not OPAM itself (which can
be tested on a much bigger set of compiler versions).  Also, we are not currently
testing 4.02.0 with packages, just 4.02.1, as the slow compilation speed of 4.02.0
makes it impractical to do so.

>> We will shortly have to test 4.02.1, and would also like to test trunk snapshots of the
>> compiler as an "allowed failure".
>> 
>> Running 6 compiler revisions per package puts quite a bit of stress on our Travis CI
>> resources, and so it's probably time to retire OCaml 3.12.1 from the testing matrix.
>> 
>> Before we do this, I'd like to get a sense for how many people still care about ensuring
>> that their packages work well on the 3.12.1 series, or if there are still distributions
>> for which this support matters.  If there is still sufficient interest, we can continue
>> to support 3.12.1 for some time.
> 
> For yypkg/win-builds I've done a quick survey of what's in Linux
> distributions. I was mainly interested in moving past 3.12.1
> compatibility for my own code but found it undoable before the end of
> this year or maybe early next year.
> 
> Ubuntu 12.04 has 3.12.1 and is still supported and widespread. 14.04 has
> 4.01.0 but isn't very old. Debian has a similar combination for its
> versions. I think 4.02.0 wasn't picked by linux distributions with
> long-term support (including RH if I'm not mistaken).
> 
> 3.12.1 is really widespread and I think it has to be kept for a fairly
> long time. 4.00.0 is basically never used. 4.01.0 is widespread and will
> be widespread for some time. 4.02.0 is nowhere to be seen. I believe
> 4.02.0/1 and maybe 4.02.2 won't be picked up either (unless 4.03.0 takes
> close to two years to be released).
> 
> I'd say: keep 3.12.1, 4.01.0, 4.02.whatever-is-the-most-recent (because
> that's what ocamlers use) and trunk. Dump the others (i.e. 4.00.1,
> 4.02.0).

I agree with this assessment, although I'll try to keep 4.00.1 as long
as possible to make it possible to have finer grained constraints and
make bisection tests easier.  Thanks for all the feedback, everyone!

Anil

From anil at recoil.org  Wed Feb 18 21:18:35 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Wed, 18 Feb 2015 21:18:35 +0000
Subject: [opam-devel] OPAM 1.1 backwards-compatibility
In-Reply-To: <2144244.3KogYr9aJ3@agaric>
References: <33064639.6mOX9L7SVN@agaric>
 <8EDF6349-1A93-46DA-A32C-7B8CFB8C5F39@gazagnaire.org>
 <2144244.3KogYr9aJ3@agaric>
Message-ID: <178DEDCD-3BB5-4727-B862-D274AED606C9@recoil.org>

On 20 Jan 2015, at 00:47, Louis Gesbert <louis.gesbert at ocamlpro.com> wrote:
> 
> I'll setup a https://opam.ocaml.org/1.3 mirror, without changes at the moment, for the dev version to point to. The version I'm working on at the moment is still 1.2.1 beta though, with no difference in file format. Let's take this chance to ensure the 1.2.1->1.3 migration with be smooth.

With the 1.2 beta in motion now, I just wanted to check up on whether the 1.3 mirror is in place. I'm keen to make sure that we test upgrade before the 1.2.1 release goes out the door.

-anil

From anil at recoil.org  Thu Feb 19 08:36:57 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 19 Feb 2015 08:36:57 +0000
Subject: [opam-devel] Opam ocsigen repository
In-Reply-To: <54E535FD.2090804@zoho.com>
References: <54E535FD.2090804@zoho.com>
Message-ID: <E8D3A3B4-E9D6-49D8-A1F4-3E5AA2001F14@recoil.org>

Out of curiosity, what was tedious to maintain there?

One thing that's come up in both Mirage and XAPI is to have a script that 'splices' a released package from one remote to another.  That would let us upload stable cuts to a working remote, and then move them over to opam-repository.  Would that sort of thing help Ocsigen as well?

-anil

> On 19 Feb 2015, at 01:01, Drup <drupyog+caml at zoho.com> wrote:
> 
> The opam ocsigen repository has not been updated since quite some time now, and for various reasons, it's very tedious to maintain. Thus, we decided to remove it.
> 
> For people using it, I really advise you to use the released versions of each packet if possible.
> If you absolutely want bleeding edges (for example, if you use eba), just use opam pin.
> 
> For each ocsigen package, you should be able to use the following command line and it will directly be pinned to the dev version:
> 
>    opam pin add the_packet --dev-repo
> 
> 
> Special note for people using eliom-base-app, you need a special branch of eliom, which you can pin with:
>    opam pin add eliom https://github.com/ocsigen/eliom.git#sharedreact
> 
> I will remove the repository by the end of the week.
> 


From drupyog+caml at zoho.com  Thu Feb 19 17:05:36 2015
From: drupyog+caml at zoho.com (Drup)
Date: Thu, 19 Feb 2015 18:05:36 +0100
Subject: [opam-devel] Opam ocsigen repository
In-Reply-To: <E8D3A3B4-E9D6-49D8-A1F4-3E5AA2001F14@recoil.org>
References: <54E535FD.2090804@zoho.com>
 <E8D3A3B4-E9D6-49D8-A1F4-3E5AA2001F14@recoil.org>
Message-ID: <54E617E0.5020506@zoho.com>

> Out of curiosity, what was tedious to maintain there?
>
> One thing that's come up in both Mirage and XAPI is to have a script that 'splices' a released package from one remote to another.  That would let us upload stable cuts to a working remote, and then move them over to opam-repository.  Would that sort of thing help Ocsigen as well?
The opam ocsigen was never done for stable packages, opam-repository is 
already there for that. We did it when eliom 4.0 was cooking, and the 
previous eliom version of eliom was very old, so it was necessary even 
for beginners to use the dev versions of all the packages. opam pin was 
not very mature at the time.

Now, with opam pin, we have opam files in each package repository, and 
we would need a mostly-the-same but slightly-different set of opam files 
in the opam repository. In practice, the opam repository was never 
updated and was kept out of sync all the time, confusing everyone.

Also, the need to use dev versions is far less important, since the 
released versions are much closer to the dev versions. And with 
`--dev-version`, pinning dev versions is really easy.

Basically, it's a mix of inconvenience to maintain and lack of 
necessity. We could probably have automate it (probably not completely, 
though), but in the end, it's not really worth it.

See this discussion, we just took slightly too long to actually kill it, 
we should have done it last year: https://github.com/ocaml/opam/issues/1734


From anil at recoil.org  Thu Feb 19 17:21:47 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 19 Feb 2015 17:21:47 +0000
Subject: [opam-devel] Opam ocsigen repository
In-Reply-To: <54E617E0.5020506@zoho.com>
References: <54E535FD.2090804@zoho.com>
 <E8D3A3B4-E9D6-49D8-A1F4-3E5AA2001F14@recoil.org> <54E617E0.5020506@zoho.com>
Message-ID: <5D3E6F97-0741-4BD3-BC91-66F6ED70B25C@recoil.org>

On 19 Feb 2015, at 17:05, Drup <drupyog+caml at zoho.com> wrote:
> 
>> Out of curiosity, what was tedious to maintain there?
>> 
>> One thing that's come up in both Mirage and XAPI is to have a script that 'splices' a released package from one remote to another.  That would let us upload stable cuts to a working remote, and then move them over to opam-repository.  Would that sort of thing help Ocsigen as well?
> The opam ocsigen was never done for stable packages, opam-repository is already there for that. We did it when eliom 4.0 was cooking, and the previous eliom version of eliom was very old, so it was necessary even for beginners to use the dev versions of all the packages. opam pin was not very mature at the time.
> 
> Now, with opam pin, we have opam files in each package repository, and we would need a mostly-the-same but slightly-different set of opam files in the opam repository. In practice, the opam repository was never updated and was kept out of sync all the time, confusing everyone.
> 
> Also, the need to use dev versions is far less important, since the released versions are much closer to the dev versions. And with `--dev-version`, pinning dev versions is really easy.
> 
> Basically, it's a mix of inconvenience to maintain and lack of necessity. We could probably have automate it (probably not completely, though), but in the end, it's not really worth it.

Makes sense.  The use of the remote is useful for stable packages when you need to 'gang schedule' a bunch of constraints and have a place to put them to test for breakage in the broader repository.  I'm considering a model like this for the Core/Async package updates, since they typically break a few of the dependent packages in the OPAM repository after they are merged.  It would be nice to have a consistent staging area where such errors could be sorted out ahead of merging into mainline.

This problem may come up for Ocsigen as well as its number of libraries grows...

-anil

From louis.gesbert at ocamlpro.com  Fri Feb 20 03:21:21 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Fri, 20 Feb 2015 12:21:21 +0900
Subject: [opam-devel] OPAM 1.1 backwards-compatibility
In-Reply-To: <178DEDCD-3BB5-4727-B862-D274AED606C9@recoil.org>
References: <33064639.6mOX9L7SVN@agaric> <2144244.3KogYr9aJ3@agaric>
 <178DEDCD-3BB5-4727-B862-D274AED606C9@recoil.org>
Message-ID: <1733954.qU9czXhbqI@agaric>

Yes, I just put it in place at opam.ocaml.org/1.3 (without rewrite at the moment)

Also tested various redirections both at init and at update.

> - Anil Madhavapeddy, 18/02/2015 21:18 -
> On 20 Jan 2015, at 00:47, Louis Gesbert <louis.gesbert at ocamlpro.com> wrote:
> > 
> > I'll setup a https://opam.ocaml.org/1.3 mirror, without changes at the moment, for the dev version to point to. The version I'm working on at the moment is still 1.2.1 beta though, with no difference in file format. Let's take this chance to ensure the 1.2.1->1.3 migration with be smooth.
> 
> With the 1.2 beta in motion now, I just wanted to check up on whether the 1.3 mirror is in place. I'm keen to make sure that we test upgrade before the 1.2.1 release goes out the door.
> 
> -anil

From louis.gesbert at ocamlpro.com  Fri Feb 20 07:35:02 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Fri, 20 Feb 2015 16:35:02 +0900
Subject: [opam-devel] OPAM 1.1 backwards-compatibility
In-Reply-To: <2322386.x0OVqNIWa3@agaric>
References: <33064639.6mOX9L7SVN@agaric>
 <11F7566D-22FB-4715-B0F5-75E7F40FC892@recoil.org> <2322386.x0OVqNIWa3@agaric>
Message-ID: <1577152.m62C6O9pbY@agaric>

I have been asked to make a more detailed request for a backport; still no reply so far...

https://bugs.launchpad.net/ubuntu/+source/opam/+bug/1401346

> - Louis Gesbert, 20/01/2015 10:33 -
> > 
> > Prodding Ubuntu to upgrade to OPAM 1.2 would be extremely helpful.  Jon, Dave, would you have any contacts there that might be interested?   The Launchpad bug pickup seems to be a little hit and miss...
> >
> 
> The package page mentions ubuntu-motu at lists.ubuntu.com as maintainer address, we could try that, if not already done?
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel

From amc79 at cam.ac.uk  Fri Feb 20 14:01:34 2015
From: amc79 at cam.ac.uk (Amir Chaudhry)
Date: Fri, 20 Feb 2015 14:01:34 +0000
Subject: [opam-devel] Opam ocsigen repository
In-Reply-To: <5D3E6F97-0741-4BD3-BC91-66F6ED70B25C@recoil.org>
References: <54E535FD.2090804@zoho.com>
 <E8D3A3B4-E9D6-49D8-A1F4-3E5AA2001F14@recoil.org> <54E617E0.5020506@zoho.com>
 <5D3E6F97-0741-4BD3-BC91-66F6ED70B25C@recoil.org>
Message-ID: <9393CE5E-AEEE-41C2-9181-902C2B91E1EF@cam.ac.uk>


On 19 Feb 2015, at 17:21, Anil Madhavapeddy <anil at recoil.org> wrote:

> On 19 Feb 2015, at 17:05, Drup <drupyog+caml at zoho.com> wrote:
>> 
>>> Out of curiosity, what was tedious to maintain there?
>>> 
>>> One thing that's come up in both Mirage and XAPI is to have a script that 'splices' a released package from one remote to another.  That would let us upload stable cuts to a working remote, and then move them over to opam-repository.  Would that sort of thing help Ocsigen as well?
>> The opam ocsigen was never done for stable packages, opam-repository is already there for that. We did it when eliom 4.0 was cooking, and the previous eliom version of eliom was very old, so it was necessary even for beginners to use the dev versions of all the packages. opam pin was not very mature at the time.
>> 
>> Now, with opam pin, we have opam files in each package repository, and we would need a mostly-the-same but slightly-different set of opam files in the opam repository. In practice, the opam repository was never updated and was kept out of sync all the time, confusing everyone.
>> 
>> Also, the need to use dev versions is far less important, since the released versions are much closer to the dev versions. And with `--dev-version`, pinning dev versions is really easy.
>> 
>> Basically, it's a mix of inconvenience to maintain and lack of necessity. We could probably have automate it (probably not completely, though), but in the end, it's not really worth it.
> 
> Makes sense.  The use of the remote is useful for stable packages when you need to 'gang schedule' a bunch of constraints and have a place to put them to test for breakage in the broader repository.  I'm considering a model like this for the Core/Async package updates, since they typically break a few of the dependent packages in the OPAM repository after they are merged.  It would be nice to have a consistent staging area where such errors could be sorted out ahead of merging into mainline.
> 
> This problem may come up for Ocsigen as well as its number of libraries grows?

To add some more context to Anil's comment, we've also discussed this kind of model for MirageOS.  It would create a staging area for some wider testing to take place, beyond the current tests on individual libraries.  It might also allow a place for developers to get 'cutting-edge' package sets, by adding the remote -- as opposed to 'bleeding-edge' :) 

Some notes on the discussion are at: http://openmirage.org/wiki/weekly-2015-02-11#ImprovingQuality

Amir


From louis.gesbert at ocamlpro.com  Sat Feb 21 04:01:56 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Sat, 21 Feb 2015 13:01:56 +0900
Subject: [opam-devel] OPAM 1.3 roadmap
Message-ID: <1709176.A7TcrPyoj4@agaric>

With 1.2.1 almost out of the door, time has come to review the roadmap discussed back in December and choose where we'll be going for 1.3. Original mail attached for reference.


The topic that is burning hot at the moment is, specially after the Debian Haskell build host has been compromised, security: we have no signing at all at the moment, and we need to improve on this before it becomes a problem. TUF [1] has devised a sane amount of rules for repository management and signing that should make it easier to get it right in OPAM. Hannes has mentionned writing an OCaml implementation for TUF, which could get very helpful.


Also of importance is Windows support. It should at least be straighforward and documented to get a basic Cygwin setup working. That goes with adding automated tests (appveyor can now be added in Github alongside Travis). Related is cleaning up external command usage (even if not really justified by a Windows port only, as David Allsopp pointed out) -- replacing curl calls by cohttp, use ocaml-fileutils...


These are the other main features, that'll probably take more time if we are to focus eg. on security:

* a plugin mechanism with plugins for example for OCaml (for better agnosticity), external dependency handling [2], documentation generation...

* a 'provides:' field in OPAM files [3]. This is a loose requirement if we want to switch the repository to have OCaml itself in a package (which is already possible, but the system compiler may yet be an issue).

* More flexible switch handling (multi-switch packages, per-switch remotes, layered switches for cross-compilation...)

* Tracking of files installed by packages. While unrelated to repo signing, this might have some security implications, so we might want to bring it in.

* With file tracking, generating a binary repo (with some limitations) could be quite straight-forward.


Which of these do you think is most important ? Have I forgotten anything ?

Cheers,
Louis


[1] http://theupdateframework.com/
[2] https://github.com/ocaml/opam/blob/master/doc/design/depexts-plugins
[3] https://github.com/ocaml/opam/blob/master/doc/design/provides.md
-------------- next part --------------
An embedded message was scrubbed...
From: Louis Gesbert <louis.gesbert at ocamlpro.com>
Subject: [opam-devel] OPAM Roadmap -- what next ?
Date: Wed, 17 Dec 2014 19:07:40 +0900
Size: 20373
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20150221/93d1b692/attachment.mht>

From anil at recoil.org  Sat Feb 21 08:24:00 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Sat, 21 Feb 2015 08:24:00 +0000
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <1709176.A7TcrPyoj4@agaric>
References: <1709176.A7TcrPyoj4@agaric>
Message-ID: <ABCB46D0-899C-443A-9C2C-E1D09E3745C5@recoil.org>

On 21 Feb 2015, at 04:01, Louis Gesbert <louis.gesbert at ocamlpro.com> wrote:
> 
> With 1.2.1 almost out of the door, time has come to review the roadmap discussed back in December and choose where we'll be going for 1.3. Original mail attached for reference.
> 
> 
> The topic that is burning hot at the moment is, specially after the Debian Haskell build host has been compromised, security: we have no signing at all at the moment, and we need to improve on this before it becomes a problem. TUF [1] has devised a sane amount of rules for repository management and signing that should make it easier to get it right in OPAM. Hannes has mentionned writing an OCaml implementation for TUF, which could get very helpful.
> 
> 
> Also of importance is Windows support. It should at least be straighforward and documented to get a basic Cygwin setup working. That goes with adding automated tests (appveyor can now be added in Github alongside Travis). Related is cleaning up external command usage (even if not really justified by a Windows port only, as David Allsopp pointed out) -- replacing curl calls by cohttp, use ocaml-fileutils...
> 
> 
<...>
> 
> * Tracking of files installed by packages. While unrelated to repo signing, this might have some security implications, so we might want to bring it in.
<...>
> - **Improve security**: just checking md5s is quite light ; package scripts can
>   write anywhere 

I completely agree that this is a very high priority.  Some thoughts in no particular order

- I'd like the automated builds to do the `build` phase without network access, so that we can verify that there is no external network access going on in the normal course of events.

- Registering the files that are installed is going to be quite a large undertaking within the repository, but also makes eventual binary distributions much easier. This is traditionally done by having a 'fakeroot' into which packages are installed, but this requires changing every package.  One interesting option is that we could turn ~/.opam/<switch> into a .git root, and simply version control it using ocaml-git.  This way anything can write into the checkout, and we simply do a `git add` after each installation to figure what changed in the staging area.  It also makes it significantly easier to revert back to an older snapshot.  If filesystem space is a concern, this feature can be deactivated and no git tracking done.

- The `source linux` tags have to go.  Not sure how though...

- Moving to integrate cohttp and ocaml-git do help quite a bit with portability, but also let us fix the tools when they break.  It's particularly frustrating that Curl on MacOS X is currently broken with no obvious way to fix it beyond replacing the system curl.


> These are the other main features, that'll probably take more time if we are to focus eg. on security:
> 
> * a plugin mechanism with plugins for example for OCaml (for better agnosticity), external dependency handling [2], documentation generation...
> 
> * a 'provides:' field in OPAM files [3]. This is a loose requirement if we want to switch the repository to have OCaml itself in a package (which is already possible, but the system compiler may yet be an issue).
> 
> * More flexible switch handling (multi-switch packages, per-switch remotes, layered switches for cross-compilation...)
> 
> * With file tracking, generating a binary repo (with some limitations) could be quite straight-forward.

This is a very comprehensive list, thanks!  The only other branch I don't have much view on is the compilers-as-a-package branch.  While that's a feature that could help out other communities like Coq, I'm not sure how it fits in.  It's going to be very difficult to do more than one major repository migration at a time, and security+Windows is already a lot to take on...

-anil


From simon.cruanes.2007 at m4x.org  Sat Feb 21 08:37:07 2015
From: simon.cruanes.2007 at m4x.org (Simon Cruanes)
Date: Sat, 21 Feb 2015 09:37:07 +0100
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <1709176.A7TcrPyoj4@agaric>
References: <1709176.A7TcrPyoj4@agaric>
Message-ID: <B039BA3F-CBE5-49A4-9B5B-EF77F440BB5E@m4x.org>

Sandboxing the build would also be a big security improvement. I think cabal now does it, and signing packages doesn't protect against malicious or buggy packages (see: bumblebee's uninstall target). That also goes hand in hand with file tracking. I don't know how difficult it is, though.

Cheers! 

Le 21 f?vrier 2015 05:01:56 UTC+01:00, Louis Gesbert <louis.gesbert at ocamlpro.com> a ?crit :
>With 1.2.1 almost out of the door, time has come to review the roadmap
>discussed back in December and choose where we'll be going for 1.3.
>Original mail attached for reference.
>
>
>The topic that is burning hot at the moment is, specially after the
>Debian Haskell build host has been compromised, security: we have no
>signing at all at the moment, and we need to improve on this before it
>becomes a problem. TUF [1] has devised a sane amount of rules for
>repository management and signing that should make it easier to get it
>right in OPAM. Hannes has mentionned writing an OCaml implementation
>for TUF, which could get very helpful.
>
>
>Also of importance is Windows support. It should at least be
>straighforward and documented to get a basic Cygwin setup working. That
>goes with adding automated tests (appveyor can now be added in Github
>alongside Travis). Related is cleaning up external command usage (even
>if not really justified by a Windows port only, as David Allsopp
>pointed out) -- replacing curl calls by cohttp, use ocaml-fileutils...
>
>
>These are the other main features, that'll probably take more time if
>we are to focus eg. on security:
>
>* a plugin mechanism with plugins for example for OCaml (for better
>agnosticity), external dependency handling [2], documentation
>generation...
>
>* a 'provides:' field in OPAM files [3]. This is a loose requirement if
>we want to switch the repository to have OCaml itself in a package
>(which is already possible, but the system compiler may yet be an
>issue).
>
>* More flexible switch handling (multi-switch packages, per-switch
>remotes, layered switches for cross-compilation...)
>
>* Tracking of files installed by packages. While unrelated to repo
>signing, this might have some security implications, so we might want
>to bring it in.
>
>* With file tracking, generating a binary repo (with some limitations)
>could be quite straight-forward.
>
>
>Which of these do you think is most important ? Have I forgotten
>anything ?
>
>Cheers,
>Louis
>
>
>[1] http://theupdateframework.com/
>[2]
>https://github.com/ocaml/opam/blob/master/doc/design/depexts-plugins
>[3] https://github.com/ocaml/opam/blob/master/doc/design/provides.md
>
>----- message suivi
>----------------------------------------------------
>
>De?: Louis Gesbert <louis.gesbert at ocamlpro.com>
>??: opam-devel at lists.ocaml.org
>Envoy??: Wed Dec 17 11:07:40 UTC+01:00 2014
>Objet?: [opam-devel] OPAM Roadmap -- what next ?
>
>Hi all,
>
>with some lag after the 1.2 release, I'd like to open some space for a
>collective discussion of the priorities for where the energies should
>go next. We have mainly 3 directions for improvements: first,
>portability, with the main goal of a Windows version. Second,
>agnosticity, with the goal to make OPAM more generic, and try and open
>it to users outside of the OCaml community (wouldn't OPAM for Haskell
>be fun ?). Third, there are always lots of features and improvements
>that have been asked for, and would improve the experience of current
>users.
>
>So here is a summary of what I've gathered. Feel free to add your own.
>
>
>
>## Portability
>
>- **Rewrite parallel command engine.** / done.
>
>- **Native system manipulation (cp, rm, curl...).**
>These are mostly done through calls to the shell or external programs.
>It's
>not very pretty but quite pragmatic actually... until we want to run on
>Windows without Cygwin. Anyway, this wouldn't be the end of portability
>  issues.
>
>- **Windows support.**
>  for OPAM itself to begin with. This should be pretty close.
>
>- **Packages on Windows.**
>  Locate common issues and attempt to find generic fixes.
>
>- Allow **direct use of more solvers** or solver servers.
>
>- **Support cross-compilation**
>  This is quite an open issue at the moment.
>
>## Agnosticity
>
>- **Isolate OCaml-specific stuff.**
>  E.g. specific opam-file variables. See ocaml-specific.md
>
>- **Separate as plugins**
>  To open the gate to OPAM without these plugins, or with other ones
>
>- **Compilers as packages.**
>This should mostly work now, but needs some tests and strengthening.
>The main
>thing still to do is to handle the system compiler changes properly ;
>that
>  part should be made more generic anyway (see discussion on hooks)
>
>## Features
>
>- A **provides** field. Generally useful, but particulary so with
>  compilers-as-packages
>
>- Releasing the **"features" field** for easier package configuration
>
>- **Track installed files**
>
>- **Improve security**: just checking md5s is quite light ; package
>scripts can
>  write anywhere
>
>- **OS-specific handling of dependencies** (eg dependencies on packages
>from the
>  OS) with plugins (#1519)
>
>- Specify and implement **hooks**
>
>- Find a nicer way to **share dev repos** / undoable "pinning sources"
>
>- **Per-switch remotes**
>
>- **Multi-switch packages**
>
>- Support for (automatic generation of) **binary packages**
>
>- Nicer **ocamlfind interaction**
>
>
>
>Cheers,
>Louis Gesbert
>
>------------------------------------------------------------------------
>
>_______________________________________________
>opam-devel mailing list
>opam-devel at lists.ocaml.org
>http://lists.ocaml.org/listinfo/opam-devel
>
>
>------------------------------------------------------------------------
>
>_______________________________________________
>opam-devel mailing list
>opam-devel at lists.ocaml.org
>http://lists.ocaml.org/listinfo/opam-devel

-- 
Simon
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20150221/c4bd8ff3/attachment.html>

From gabriel.scherer at gmail.com  Sat Feb 21 08:43:33 2015
From: gabriel.scherer at gmail.com (Gabriel Scherer)
Date: Sat, 21 Feb 2015 09:43:33 +0100
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <B039BA3F-CBE5-49A4-9B5B-EF77F440BB5E@m4x.org>
References: <1709176.A7TcrPyoj4@agaric>
 <B039BA3F-CBE5-49A4-9B5B-EF77F440BB5E@m4x.org>
Message-ID: <CAPFanBFKfDhXM6L1_7H_bVgHvT0OSO2BK_QBYB3wDWXAaZiWnw@mail.gmail.com>

I'd like to add my voice in favor of Windows support -- I found that to be
a more important issue when discussing with the Coq people and their use of
OPAM. We in the OCaml community have been quite good at scaring away
Windows developers (and because it's mostly a crowd of software developers
which often use other systems we didn't notice much), but the Coq userbase
is much more diverse and contains non-programmers (or at least people that
don't know they are programming), they do have Windows users.

On Sat, Feb 21, 2015 at 9:37 AM, Simon Cruanes <simon.cruanes.2007 at m4x.org>
wrote:

> Sandboxing the build would also be a big security improvement. I think
> cabal now does it, and signing packages doesn't protect against malicious
> or buggy packages (see: bumblebee's uninstall target). That also goes hand
> in hand with file tracking. I don't know how difficult it is, though.
>
> Cheers!
>
> Le 21 f?vrier 2015 05:01:56 UTC+01:00, Louis Gesbert <
> louis.gesbert at ocamlpro.com> a ?crit :
>>
>> With 1.2.1 almost out of the door, time has come to review the roadmap discussed back in December and choose where we'll be going for 1.3. Original mail attached for reference.
>>
>>
>> The topic that is burning hot at the moment is, specially after the Debian Haskell build host has been compromised, security: we have no signing at all at the moment, and we need to improve on this before it becomes a problem. TUF [1] has devised a sane amount of rules for repository management and signing that should make it easier to get it right in OPAM. Hannes has mentionned writing an OCaml implementation for TUF, which could get very helpful.
>>
>>
>> Also of importance is Windows support. It should at least be straighforward and documented to get a basic Cygwin setup working. That goes with adding automated tests (appveyor can now be added in Github alongside Travis). Related is cleaning up external command usage (even if not really justified by a Windows
>> port only, as David Allsopp pointed out) -- replacing curl calls by cohttp, use ocaml-fileutils...
>>
>>
>> These are the other main features, that'll probably take more time if we are to focus eg. on security:
>>
>> * a plugin mechanism with plugins for example for OCaml (for better agnosticity), external dependency handling [2], documentation generation...
>>
>> * a 'provides:' field in OPAM files [3]. This is a loose requirement if we want to switch the repository to have OCaml itself in a package (which is already possible, but the system compiler may yet be an issue).
>>
>> * More flexible switch handling (multi-switch packages, per-switch remotes, layered switches for cross-compilation...)
>>
>> * Tracking of files installed by packages. While unrelated to repo signing, this might have some security implications, so we might want to bring it in.
>>
>> * With file tracking, generating a binary repo (with some limitations) could be quite
>> straight-forward.
>>
>>
>> Which of these do you think is most important ? Have I forgotten anything ?
>>
>> Cheers,
>> Louis
>>
>>
>> [1] http://theupdateframework.com/
>> [2] https://github.com/ocaml/opam/blob/master/doc/design/depexts-plugins
>> [3] https://github.com/ocaml/opam/blob/master/doc/design/provides.md
>>
>> message suivi
>> De :Louis Gesbert ? :opam-devel at lists.ocaml.orgEnvoy? :Wed Dec 17
>> 11:07:40 UTC+01:00 2014Objet :[opam-devel] OPAM Roadmap -- what next ?
>>
>> Hi all,
>>
>>
>>
>> with some lag after the 1.2 release, I'd like to open some space for a
>> collective discussion of the priorities for where the energies should go
>> next. We have mainly 3 directions for improvements: first, portability,
>> with the main goal of a Windows version. Second, agnosticity, with the goal
>> to make OPAM more generic, and try and open it to users outside of the
>> OCaml community (wouldn't OPAM for Haskell be fun ?). Third, there are
>> always lots of features and improvements that have been asked for, and
>> would improve the experience of current users.
>>
>>
>>
>> So here is a summary of what I've gathered. Feel free to add your own.
>>
>>
>>
>>
>>
>>
>>
>> ## Portability
>>
>>
>>
>> - **Rewrite parallel command engine.** / done.
>>
>>
>>
>> - **Native system manipulation (cp, rm, curl...).**
>>
>> These are mostly done through calls to the shell or external programs.
>> It's
>>
>> not very pretty but quite pragmatic actually... until we want to run on
>>
>> Windows without Cygwin. Anyway, this wouldn't be the end of portability
>>
>> issues.
>>
>>
>>
>> - **Windows support.**
>>
>> for OPAM itself to begin with. This should be pretty close.
>>
>>
>>
>> - **Packages on Windows.**
>>
>> Locate common issues and attempt to find generic fixes.
>>
>>
>>
>> - Allow **direct use of more solvers** or solver servers.
>>
>>
>>
>> - **Support cross-compilation**
>>
>> This is quite an open issue at the moment.
>>
>>
>>
>> ## Agnosticity
>>
>>
>>
>> - **Isolate OCaml-specific stuff.**
>>
>> E.g. specific opam-file variables. See ocaml-specific.md
>>
>>
>>
>> - **Separate as plugins**
>>
>> To open the gate to OPAM without these plugins, or with other ones
>>
>>
>>
>> - **Compilers as packages.**
>>
>> This should mostly work now, but needs some tests and strengthening. The
>> main
>>
>> thing still to do is to handle the system compiler changes properly ; that
>>
>> part should be made more generic anyway (see discussion on hooks)
>>
>>
>>
>> ## Features
>>
>>
>>
>> - A **provides** field. Generally useful, but particulary so with
>>
>> compilers-as-packages
>>
>>
>>
>> - Releasing the **"features" field** for easier package configuration
>>
>>
>>
>> - **Track installed files**
>>
>>
>>
>> - **Improve security**: just checking md5s is quite light ; package
>> scripts can
>>
>> write anywhere
>>
>>
>>
>> - **OS-specific handling of dependencies** (eg dependencies on packages
>> from the
>>
>> OS) with plugins (#1519)
>>
>>
>>
>> - Specify and implement **hooks**
>>
>>
>>
>> - Find a nicer way to **share dev repos** / undoable "pinning sources"
>>
>>
>>
>> - **Per-switch remotes**
>>
>>
>>
>> - **Multi-switch packages**
>>
>>
>>
>> - Support for (automatic generation of) **binary packages**
>>
>>
>>
>> - Nicer **ocamlfind interaction**
>>
>>
>>
>>
>>
>>
>>
>> Cheers,
>>
>> Louis Gesbert
>>
>> ------------------------------
>>
>> opam-devel mailing list
>> opam-devel at lists.ocaml.org
>> http://lists.ocaml.org/listinfo/opam-devel
>>
>> ------------------------------
>>
>> opam-devel mailing list
>> opam-devel at lists.ocaml.org
>> http://lists.ocaml.org/listinfo/opam-devel
>>
>>
> --
> Simon
>
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20150221/61146fce/attachment-0001.html>

From anil at recoil.org  Sat Feb 21 08:45:25 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Sat, 21 Feb 2015 08:45:25 +0000
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <B039BA3F-CBE5-49A4-9B5B-EF77F440BB5E@m4x.org>
References: <1709176.A7TcrPyoj4@agaric>
 <B039BA3F-CBE5-49A4-9B5B-EF77F440BB5E@m4x.org>
Message-ID: <A416077F-DE4F-4FA1-9665-4AFFA25DAF9B@recoil.org>

Cabal sandboxing is analogous to an OPAM switch, and doesn't provide security against malicious code.

Once the build/install phases are separated out, it should be reasonably straightforward to add plugins for support for OS-specific sandboxing to prevent network connections or filesystem access outside of a sandbox.  This could be quite lightweight (like systrace on OpenBSD, which has some races but is still better than nothing), or App Sandboxing on OSX (see `man sandbox_init`), or heavyweight such as a Docker container on Linux.

-anil

> On 21 Feb 2015, at 08:37, Simon Cruanes <simon.cruanes.2007 at m4x.org> wrote:
> 
> Sandboxing the build would also be a big security improvement. I think cabal now does it, and signing packages doesn't protect against malicious or buggy packages (see: bumblebee's uninstall target). That also goes hand in hand with file tracking. I don't know how difficult it is, though.
> 
> Cheers! 
> 
> Le 21 f?vrier 2015 05:01:56 UTC+01:00, Louis Gesbert <louis.gesbert at ocamlpro.com> a ?crit :
> With 1.2.1 almost out of the door, time has come to review the roadmap discussed back in December and choose where we'll be going for 1.3. Original mail attached for reference.
> 
> 
> The topic that is burning hot at the moment is, specially after the Debian Haskell build host has been compromised, security: we have no signing at all at the moment, and we need to improve on this before it becomes a problem. TUF [1] has devised a sane amount of rules for repository management and signing that should make it easier to get it right in OPAM. Hannes has mentionned writing an OCaml implementation for TUF, which could get very helpful.
> 
> 
> Also of importance is Windows support. It should at least be straighforward and documented to get a basic Cygwin setup working. That goes with adding automated tests (appveyor can now be added in Github alongside Travis). Related is cleaning up external command usage (even if not really justified by a Windows
> port only, as David Allsopp pointed out) -- replacing curl calls by cohttp, use ocaml-fileutils...
> 
> 
> 
> These are the other main features, that'll probably take more time if we are to focus eg. on security:
> 
> * a plugin mechanism with plugins for example for OCaml (for better agnosticity), external dependency handling [2], documentation generation...
> 
> * a 'provides:' field in OPAM files [3]. This is a loose requirement if we want to switch the repository to have OCaml itself in a package (which is already possible, but the system compiler may yet be an issue).
> 
> * More flexible switch handling (multi-switch packages, per-switch remotes, layered switches for cross-compilation...)
> 
> * Tracking of files installed by packages. While unrelated to repo signing, this might have some security implications, so we might want to bring it in.
> 
> * With file tracking, generating a binary repo (with some limitations) could be quite
> straight-forward.
> 
> 
> 
> Which of these do you think is most important ? Have I forgotten anything ?
> 
> Cheers,
> Louis
> 
> 
> [1] http://theupdateframework.com/
> [2] https://github.com/ocaml/opam/blob/master/doc/design/depexts-plugins
> [3] https://github.com/ocaml/opam/blob/master/doc/design/provides.md
> message suivi
> 
> De :	Louis Gesbert 
> ? :	opam-devel at lists.ocaml.org
> Envoy? :	Wed Dec 17 11:07:40 UTC+01:00 2014
> Objet :	[opam-devel] OPAM Roadmap -- what next ?
> Hi all,
>  
> with some lag after the 1.2 release, I'd like to open some space for a collective discussion of the priorities for where the energies should go next. We have mainly 3 directions for improvements: first, portability, with the main goal of a Windows version. Second, agnosticity, with the goal to make OPAM more generic, and try and open it to users outside of the OCaml community (wouldn't OPAM for Haskell be fun ?). Third, there are always lots of features and improvements that have been asked for, and would improve the experience of current users.
>  
> So here is a summary of what I've gathered. Feel free to add your own.
>  
>  
>  
> ## Portability
>  
> - **Rewrite parallel command engine.** / done.
>  
> - **Native system manipulation (cp, rm, curl...).**
>   These are mostly done through calls to the shell or external programs. It's
>   not very pretty but quite pragmatic actually... until we want to run on
>   Windows without Cygwin. Anyway, this wouldn't be the end of portability
>   issues.
>  
> - **Windows support.**
>   for OPAM itself to begin with. This should be pretty close.
>  
> - **Packages on Windows.**
>   Locate common issues and attempt to find generic fixes.
>  
> - Allow **direct use of more solvers** or solver servers.
>  
> - **Support cross-compilation**
>   This is quite an open issue at the moment.
>  
> ## Agnosticity
>  
> - **Isolate OCaml-specific stuff.**
>   E.g. specific opam-file variables. See ocaml-specific.md
>  
> - **Separate as plugins**
>   To open the gate to OPAM without these plugins, or with other ones
>  
> - **Compilers as packages.**
>   This should mostly work now, but needs some tests and strengthening. The main
>   thing still to do is to handle the system compiler changes properly ; that
>   part should be made more generic anyway (see discussion on hooks)
>  
> ## Features
>  
> - A **provides** field. Generally useful, but particulary so with
>   compilers-as-packages
>  
> - Releasing the **"features" field** for easier package configuration
>  
> - **Track installed files**
>  
> - **Improve security**: just checking md5s is quite light ; package scripts can
>   write anywhere
>  
> - **OS-specific handling of dependencies** (eg dependencies on packages from the
>   OS) with plugins (#1519)
>  
> - Specify and implement **hooks**
>  
> - Find a nicer way to **share dev repos** / undoable "pinning sources"
>  
> - **Per-switch remotes**
>  
> - **Multi-switch packages**
>  
> - Support for (automatic generation of) **binary packages**
>  
> - Nicer **ocamlfind interaction**
>  
>  
>  
> Cheers,
> Louis Gesbert
> 
> 
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
> 
> 
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
> 
> -- 
> Simon_______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel


From anil at recoil.org  Sat Feb 21 08:47:07 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Sat, 21 Feb 2015 08:47:07 +0000
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <CAPFanBFKfDhXM6L1_7H_bVgHvT0OSO2BK_QBYB3wDWXAaZiWnw@mail.gmail.com>
References: <1709176.A7TcrPyoj4@agaric>
 <B039BA3F-CBE5-49A4-9B5B-EF77F440BB5E@m4x.org>
 <CAPFanBFKfDhXM6L1_7H_bVgHvT0OSO2BK_QBYB3wDWXAaZiWnw@mail.gmail.com>
Message-ID: <BC7E9726-E101-4C3D-9E36-5902D0FCCCE7@recoil.org>

I agree.  The nice thing about a combined security+Windows push is that it forces us to clean up the same thing -- build rules and resource acquisition, instead of it being two disjoint features.

-anil

> On 21 Feb 2015, at 08:43, Gabriel Scherer <gabriel.scherer at gmail.com> wrote:
> 
> I'd like to add my voice in favor of Windows support -- I found that to be a more important issue when discussing with the Coq people and their use of OPAM. We in the OCaml community have been quite good at scaring away Windows developers (and because it's mostly a crowd of software developers which often use other systems we didn't notice much), but the Coq userbase is much more diverse and contains non-programmers (or at least people that don't know they are programming), they do have Windows users.
> 
> On Sat, Feb 21, 2015 at 9:37 AM, Simon Cruanes <simon.cruanes.2007 at m4x.org> wrote:
> Sandboxing the build would also be a big security improvement. I think cabal now does it, and signing packages doesn't protect against malicious or buggy packages (see: bumblebee's uninstall target). That also goes hand in hand with file tracking. I don't know how difficult it is, though.
> 
> Cheers! 
> 
> Le 21 f?vrier 2015 05:01:56 UTC+01:00, Louis Gesbert <louis.gesbert at ocamlpro.com> a ?crit :
> With 1.2.1 almost out of the door, time has come to review the roadmap discussed back in December and choose where we'll be going for 1.3. Original mail attached for reference.
> 
> 
> The topic that is burning hot at the moment is, specially after the Debian Haskell build host has been compromised, security: we have no signing at all at the moment, and we need to improve on this before it becomes a problem. TUF [1] has devised a sane amount of rules for repository management and signing that should make it easier to get it right in OPAM. Hannes has mentionned writing an OCaml implementation for TUF, which could get very helpful.
> 
> 
> Also of importance is Windows support. It should at least be straighforward and documented to get a basic Cygwin setup working. That goes with adding automated tests (appveyor can now be added in Github alongside Travis). Related is cleaning up external command usage (even if not really justified by a Windows
> port only, as David Allsopp pointed out) -- replacing curl calls by cohttp, use ocaml-fileutils...
> 
> 
> 
> These are the other main features, that'll probably take more time if we are to focus eg. on security:
> 
> * a plugin mechanism with plugins for example for OCaml (for better agnosticity), external dependency handling [2], documentation generation...
> 
> * a 'provides:' field in OPAM files [3]. This is a loose requirement if we want to switch the repository to have OCaml itself in a package (which is already possible, but the system compiler may yet be an issue).
> 
> * More flexible switch handling (multi-switch packages, per-switch remotes, layered switches for cross-compilation...)
> 
> * Tracking of files installed by packages. While unrelated to repo signing, this might have some security implications, so we might want to bring it in.
> 
> * With file tracking, generating a binary repo (with some limitations) could be quite
> straight-forward.
> 
> 
> 
> Which of these do you think is most important ? Have I forgotten anything ?
> 
> Cheers,
> Louis
> 
> 
> [1] http://theupdateframework.com/
> [2] https://github.com/ocaml/opam/blob/master/doc/design/depexts-plugins
> [3] https://github.com/ocaml/opam/blob/master/doc/design/provides.md
> message suivi
> 
> De :	Louis Gesbert
> ? :	opam-devel at lists.ocaml.org
> Envoy? :	Wed Dec 17 11:07:40 UTC+01:00 2014
> Objet :	[opam-devel] OPAM Roadmap -- what next ?
> Hi all,
>  
> with some lag after the 1.2 release, I'd like to open some space for a collective discussion of the priorities for where the energies should go next. We have mainly 3 directions for improvements: first, portability, with the main goal of a Windows version. Second, agnosticity, with the goal to make OPAM more generic, and try and open it to users outside of the OCaml community (wouldn't OPAM for Haskell be fun ?). Third, there are always lots of features and improvements that have been asked for, and would improve the experience of current users.
>  
> So here is a summary of what I've gathered. Feel free to add your own.
>  
>  
>  
> ## Portability
>  
> - **Rewrite parallel command engine.** / done.
>  
> - **Native system manipulation (cp, rm, curl...).**
> These are mostly done through calls to the shell or external programs. It's
> not very pretty but quite pragmatic actually... until we want to run on
> Windows without Cygwin. Anyway, this wouldn't be the end of portability
> issues.
>  
> - **Windows support.**
> for OPAM itself to begin with. This should be pretty close.
>  
> - **Packages on Windows.**
> Locate common issues and attempt to find generic fixes.
>  
> - Allow **direct use of more solvers** or solver servers.
>  
> - **Support cross-compilation**
> This is quite an open issue at the moment.
>  
> ## Agnosticity
>  
> - **Isolate OCaml-specific stuff.**
> E.g. specific opam-file variables. See ocaml-specific.md
>  
> - **Separate as plugins**
> To open the gate to OPAM without these plugins, or with other ones
>  
> - **Compilers as packages.**
> This should mostly work now, but needs some tests and strengthening. The main
> thing still to do is to handle the system compiler changes properly ; that
> part should be made more generic anyway (see discussion on hooks)
>  
> ## Features
>  
> - A **provides** field. Generally useful, but particulary so with
> compilers-as-packages
>  
> - Releasing the **"features" field** for easier package configuration
>  
> - **Track installed files**
>  
> - **Improve security**: just checking md5s is quite light ; package scripts can
> write anywhere
>  
> - **OS-specific handling of dependencies** (eg dependencies on packages from the
> OS) with plugins (#1519)
>  
> - Specify and implement **hooks**
>  
> - Find a nicer way to **share dev repos** / undoable "pinning sources"
>  
> - **Per-switch remotes**
>  
> - **Multi-switch packages**
>  
> - Support for (automatic generation of) **binary packages**
>  
> - Nicer **ocamlfind interaction**
>  
>  
>  
> Cheers,
> Louis Gesbert
> 
> 
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
> 
> 
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
> 
> -- 
> Simon
> 
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
> 
> 
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel


From roberto at dicosmo.org  Sat Feb 21 09:16:03 2015
From: roberto at dicosmo.org (Roberto Di Cosmo)
Date: Sat, 21 Feb 2015 10:16:03 +0100
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <B039BA3F-CBE5-49A4-9B5B-EF77F440BB5E@m4x.org>
References: <1709176.A7TcrPyoj4@agaric>
 <B039BA3F-CBE5-49A4-9B5B-EF77F440BB5E@m4x.org>
Message-ID: <20150221091603.GA31077@traveler>

Anil, Simon, can you provide more details on the sandboxing mechanisms you know of?

We looked into all this for Mancoosi years ago; the most complete tool
out there was installwatch (now checkinstall) that hijacks filesystem modifying
commands using the standard LD_PRELOAD trick and a wrapper for system calls.
Checkinstall does not alter user priviledges, though, so one sometimes needed
a combination of fakeroot (that only alter user priviledges) with it.

The best approach I know of was described in a Master thesis from ... Cambridge
:-) It was under the supervision of Peter Sewell, and used the ptrace mechanism
instead of the LD_PRELOAD trick, because LD_PRELOAD is blind to statically
compiled binaries that have system calls hardcoded, while ptrace gets them all.

The dissertation is still available today here http://robot101.net/files/diss.ps.gz
and contains a very nice discussion of the issues related to monitoring and
rolling back file system changes performed by a command in the Linux system.
The source code is also available here http://robot101.net/files/trace.tar.gz
and one can get in touch with Robert Mcqueen that will be delighted to see his
work being used.

Since all this is almost 10 years old, I suppose many exciting new ideas, tools
and approaches surfaced in the meantime, and I'd really like to know more.

Cheers

--
Roberto

On Sat, Feb 21, 2015 at 09:37:07AM +0100, Simon Cruanes wrote:
> Sandboxing the build would also be a big security improvement. I think cabal
> now does it, and signing packages doesn't protect against malicious or buggy
> packages (see: bumblebee's uninstall target). That also goes hand in hand with
> file tracking. I don't know how difficult it is, though.
> 
> Cheers!
> 
> Le 21 f?vrier 2015 05:01:56 UTC+01:00, Louis Gesbert
> <louis.gesbert at ocamlpro.com> a ?crit :
> 
>     With 1.2.1 almost out of the door, time has come to review the roadmap discussed back in December and choose where we'll be going for 1.3. Original mail attached for reference.
> 
> 
>     The topic that is burning hot at the moment is, specially after the Debian Haskell build host has been compromised, security: we have no signing at all at the moment, and we need to improve on this before it becomes a problem. TUF [1] has devised a sane amount of rules for repository management and signing that should make it easier to get it right in OPAM. Hannes has mentionned writing an OCaml implementation for TUF, which could get very helpful.
> 
> 
>     Also of importance is Windows support. It should at least be straighforward and documented to get a basic Cygwin setup working. That goes with adding automated tests (appveyor can now be added in Github alongside Travis). Related is cleaning up external command usage (even if not really justified by a Windows
>     port only, as David Allsopp pointed out) -- replacing curl calls by cohttp, use ocaml-fileutils...
> 
> 
>     These are the other main features, that'll probably take more time if we are to focus eg. on security:
> 
>     * a plugin mechanism with plugins for example for OCaml (for better agnosticity), external dependency handling [2], documentation generation...
> 
>     * a 'provides:' field in OPAM files [3]. This is a loose requirement if we want to switch the repository to have OCaml itself in a package (which is already possible, but the system compiler may yet be an issue).
> 
>     * More flexible switch handling (multi-switch packages, per-switch remotes, layered switches for cross-compilation...)
> 
>     * Tracking of files installed by packages. While unrelated to repo signing, this might have some security implications, so we might want to bring it in.
> 
>     * With file tracking, generating a binary repo (with some limitations) could be quite
>     straight-forward.
> 
> 
>     Which of these do you think is most important ? Have I forgotten anything ?
> 
>     Cheers,
>     Louis
> 
> 
>     [1] http://theupdateframework.com/
>     [2] https://github.com/ocaml/opam/blob/master/doc/design/depexts-plugins
>     [3] https://github.com/ocaml/opam/blob/master/doc/design/provides.md
> 
>     message suivi
> 
>       De?:   Louis Gesbert
>       ??:    opam-devel at lists.ocaml.org
>     Envoy??: Wed Dec 17 11:07:40 UTC+01:00 2014
>     Objet?:  [opam-devel] OPAM Roadmap -- what next ?
> 
>     Hi all,
> 
>      
> 
>     with some lag after the 1.2 release, I'd like to open some space for a
>     collective discussion of the priorities for where the energies should go
>     next. We have mainly 3 directions for improvements: first, portability,
>     with the main goal of a Windows version. Second, agnosticity, with the goal
>     to make OPAM more generic, and try and open it to users outside of the
>     OCaml community (wouldn't OPAM for Haskell be fun ?). Third, there are
>     always lots of features and improvements that have been asked for, and
>     would improve the experience of current users.
> 
>      
> 
>     So here is a summary of what I've gathered. Feel free to add your own.
> 
>      
> 
>      
> 
>      
> 
>     ## Portability
> 
>      
> 
>     - **Rewrite parallel command engine.** / done.
> 
>      
> 
>     - **Native system manipulation (cp, rm, curl...).**
> 
>     These are mostly done through calls to the shell or external programs. It's
> 
>     not very pretty but quite pragmatic actually... until we want to run on
> 
>     Windows without Cygwin. Anyway, this wouldn't be the end of portability
> 
>     issues.
> 
>      
> 
>     - **Windows support.**
> 
>     for OPAM itself to begin with. This should be pretty close.
> 
>      
> 
>     - **Packages on Windows.**
> 
>     Locate common issues and attempt to find generic fixes.
> 
>      
> 
>     - Allow **direct use of more solvers** or solver servers.
> 
>      
> 
>     - **Support cross-compilation**
> 
>     This is quite an open issue at the moment.
> 
>      
> 
>     ## Agnosticity
> 
>      
> 
>     - **Isolate OCaml-specific stuff.**
> 
>     E.g. specific opam-file variables. See ocaml-specific.md
> 
>      
> 
>     - **Separate as plugins**
> 
>     To open the gate to OPAM without these plugins, or with other ones
> 
>      
> 
>     - **Compilers as packages.**
> 
>     This should mostly work now, but needs some tests and strengthening. The
>     main
> 
>     thing still to do is to handle the system compiler changes properly ; that
> 
>     part should be made more generic anyway (see discussion on hooks)
> 
>      
> 
>     ## Features
> 
>      
> 
>     - A **provides** field. Generally useful, but particulary so with
> 
>     compilers-as-packages
> 
>      
> 
>     - Releasing the **"features" field** for easier package configuration
> 
>      
> 
>     - **Track installed files**
> 
>      
> 
>     - **Improve security**: just checking md5s is quite light ; package scripts
>     can
> 
>     write anywhere
> 
>      
> 
>     - **OS-specific handling of dependencies** (eg dependencies on packages
>     from the
> 
>     OS) with plugins (#1519)
> 
>      
> 
>     - Specify and implement **hooks**
> 
>      
> 
>     - Find a nicer way to **share dev repos** / undoable "pinning sources"
> 
>      
> 
>     - **Per-switch remotes**
> 
>      
> 
>     - **Multi-switch packages**
> 
>      
> 
>     - Support for (automatic generation of) **binary packages**
> 
>      
> 
>     - Nicer **ocamlfind interaction**
> 
>      
> 
>      
> 
>      
> 
>     Cheers,
> 
>     Louis Gesbert
> 
>     ???????????????????????????????????????????????????????????????????????????
> 
>     opam-devel mailing list
>     opam-devel at lists.ocaml.org
>     http://lists.ocaml.org/listinfo/opam-devel
> 
>     ???????????????????????????????????????????????????????????????????????????
> 
>     opam-devel mailing list
>     opam-devel at lists.ocaml.org
>     http://lists.ocaml.org/listinfo/opam-devel
> 
> 
> --
> Simon

> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel


-- 
Roberto Di Cosmo
 
------------------------------------------------------------------
Professeur               En delegation a l'INRIA
PPS                      E-mail: roberto at dicosmo.org
Universite Paris Diderot WWW  : http://www.dicosmo.org
Case 7014                Tel  : ++33-(0)1-57 27 92 20
5, Rue Thomas Mann       
F-75205 Paris Cedex 13   Identica: http://identi.ca/rdicosmo
FRANCE.                  Twitter: http://twitter.com/rdicosmo
------------------------------------------------------------------
Attachments:
MIME accepted, Word deprecated
      http://www.gnu.org/philosophy/no-word-attachments.html
------------------------------------------------------------------
Office location:
 
Bureau 3020 (3rd floor)
Batiment Sophie Germain
Avenue de France
Metro Bibliotheque Francois Mitterrand, ligne 14/RER C
-----------------------------------------------------------------
GPG fingerprint 2931 20CE 3A5A 5390 98EC 8BFC FCCA C3BE 39CB 12D3                        

From simon.cruanes.2007 at m4x.org  Sat Feb 21 09:58:08 2015
From: simon.cruanes.2007 at m4x.org (Simon Cruanes)
Date: Sat, 21 Feb 2015 10:58:08 +0100
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <20150221091603.GA31077@traveler>
References: <1709176.A7TcrPyoj4@agaric>
 <B039BA3F-CBE5-49A4-9B5B-EF77F440BB5E@m4x.org>
 <20150221091603.GA31077@traveler>
Message-ID: <553EB83C-E92E-4475-87D5-396B151D988F@m4x.org>

The one I'm most familiar with is fakeroot, used by archlinux for building its packages; it's relevant because the average user (me) can install unsupported software from AUR (a large repository of user-contributed, unsupported packages). Fakeroot is used during the compilation of such packages, before a proper archive is built (one that the distribution package manager, pacman, can use to install/uninstall). Apparently fakeroot emulates a filesystem in a sub-directory and makes believe the untrusted software that is being compiled that it has root privileges to write in the filesystem.

It is probably impossible to do that in a portable way across all OSes, so I think the first step is building in a temporary directory. For Windows support, using shell commands is discouraged (as far as I understood) so opam could provide its own file manipulation directives that would respect the boundaries of the temporary directory.

Le 21 f?vrier 2015 10:16:03 UTC+01:00, Roberto Di Cosmo <roberto at dicosmo.org> a ?crit :
>Anil, Simon, can you provide more details on the sandboxing mechanisms
>you know of?
>
>We looked into all this for Mancoosi years ago; the most complete tool
>out there was installwatch (now checkinstall) that hijacks filesystem
>modifying
>commands using the standard LD_PRELOAD trick and a wrapper for system
>calls.
>Checkinstall does not alter user priviledges, though, so one sometimes
>needed
>a combination of fakeroot (that only alter user priviledges) with it.
>
>The best approach I know of was described in a Master thesis from ...
>Cambridge
>:-) It was under the supervision of Peter Sewell, and used the ptrace
>mechanism
>instead of the LD_PRELOAD trick, because LD_PRELOAD is blind to
>statically
>compiled binaries that have system calls hardcoded, while ptrace gets
>them all.
>
>The dissertation is still available today here
>http://robot101.net/files/diss.ps.gz
>and contains a very nice discussion of the issues related to monitoring
>and
>rolling back file system changes performed by a command in the Linux
>system.
>The source code is also available here
>http://robot101.net/files/trace.tar.gz
>and one can get in touch with Robert Mcqueen that will be delighted to
>see his
>work being used.
>
>Since all this is almost 10 years old, I suppose many exciting new
>ideas, tools
>and approaches surfaced in the meantime, and I'd really like to know
>more.
>
>Cheers
>
>--
>Roberto
>
>On Sat, Feb 21, 2015 at 09:37:07AM +0100, Simon Cruanes wrote:
>> Sandboxing the build would also be a big security improvement. I
>think cabal
>> now does it, and signing packages doesn't protect against malicious
>or buggy
>> packages (see: bumblebee's uninstall target). That also goes hand in
>hand with
>> file tracking. I don't know how difficult it is, though.
>> 
>> Cheers!
>> 
>> Le 21 f?vrier 2015 05:01:56 UTC+01:00, Louis Gesbert
>> <louis.gesbert at ocamlpro.com> a ?crit :
>> 
>>     With 1.2.1 almost out of the door, time has come to review the
>roadmap discussed back in December and choose where we'll be going for
>1.3. Original mail attached for reference.
>> 
>> 
>>     The topic that is burning hot at the moment is, specially after
>the Debian Haskell build host has been compromised, security: we have
>no signing at all at the moment, and we need to improve on this before
>it becomes a problem. TUF [1] has devised a sane amount of rules for
>repository management and signing that should make it easier to get it
>right in OPAM. Hannes has mentionned writing an OCaml implementation
>for TUF, which could get very helpful.
>> 
>> 
>>     Also of importance is Windows support. It should at least be
>straighforward and documented to get a basic Cygwin setup working. That
>goes with adding automated tests (appveyor can now be added in Github
>alongside Travis). Related is cleaning up external command usage (even
>if not really justified by a Windows
>>     port only, as David Allsopp pointed out) -- replacing curl calls
>by cohttp, use ocaml-fileutils...
>> 
>> 
>>     These are the other main features, that'll probably take more
>time if we are to focus eg. on security:
>> 
>>     * a plugin mechanism with plugins for example for OCaml (for
>better agnosticity), external dependency handling [2], documentation
>generation...
>> 
>>     * a 'provides:' field in OPAM files [3]. This is a loose
>requirement if we want to switch the repository to have OCaml itself in
>a package (which is already possible, but the system compiler may yet
>be an issue).
>> 
>>     * More flexible switch handling (multi-switch packages,
>per-switch remotes, layered switches for cross-compilation...)
>> 
>>     * Tracking of files installed by packages. While unrelated to
>repo signing, this might have some security implications, so we might
>want to bring it in.
>> 
>>     * With file tracking, generating a binary repo (with some
>limitations) could be quite
>>     straight-forward.
>> 
>> 
>>     Which of these do you think is most important ? Have I forgotten
>anything ?
>> 
>>     Cheers,
>>     Louis
>> 
>> 
>>     [1] http://theupdateframework.com/
>>     [2]
>https://github.com/ocaml/opam/blob/master/doc/design/depexts-plugins
>>     [3]
>https://github.com/ocaml/opam/blob/master/doc/design/provides.md
>> 
>>     message suivi
>> 
>>       De?:   Louis Gesbert
>>       ??:    opam-devel at lists.ocaml.org
>>     Envoy??: Wed Dec 17 11:07:40 UTC+01:00 2014
>>     Objet?:  [opam-devel] OPAM Roadmap -- what next ?
>> 
>>     Hi all,
>> 
>>      
>> 
>>     with some lag after the 1.2 release, I'd like to open some space
>for a
>>     collective discussion of the priorities for where the energies
>should go
>>     next. We have mainly 3 directions for improvements: first,
>portability,
>>     with the main goal of a Windows version. Second, agnosticity,
>with the goal
>>     to make OPAM more generic, and try and open it to users outside
>of the
>>     OCaml community (wouldn't OPAM for Haskell be fun ?). Third,
>there are
>>     always lots of features and improvements that have been asked
>for, and
>>     would improve the experience of current users.
>> 
>>      
>> 
>>     So here is a summary of what I've gathered. Feel free to add your
>own.
>> 
>>      
>> 
>>      
>> 
>>      
>> 
>>     ## Portability
>> 
>>      
>> 
>>     - **Rewrite parallel command engine.** / done.
>> 
>>      
>> 
>>     - **Native system manipulation (cp, rm, curl...).**
>> 
>>     These are mostly done through calls to the shell or external
>programs. It's
>> 
>>     not very pretty but quite pragmatic actually... until we want to
>run on
>> 
>>     Windows without Cygwin. Anyway, this wouldn't be the end of
>portability
>> 
>>     issues.
>> 
>>      
>> 
>>     - **Windows support.**
>> 
>>     for OPAM itself to begin with. This should be pretty close.
>> 
>>      
>> 
>>     - **Packages on Windows.**
>> 
>>     Locate common issues and attempt to find generic fixes.
>> 
>>      
>> 
>>     - Allow **direct use of more solvers** or solver servers.
>> 
>>      
>> 
>>     - **Support cross-compilation**
>> 
>>     This is quite an open issue at the moment.
>> 
>>      
>> 
>>     ## Agnosticity
>> 
>>      
>> 
>>     - **Isolate OCaml-specific stuff.**
>> 
>>     E.g. specific opam-file variables. See ocaml-specific.md
>> 
>>      
>> 
>>     - **Separate as plugins**
>> 
>>     To open the gate to OPAM without these plugins, or with other
>ones
>> 
>>      
>> 
>>     - **Compilers as packages.**
>> 
>>     This should mostly work now, but needs some tests and
>strengthening. The
>>     main
>> 
>>     thing still to do is to handle the system compiler changes
>properly ; that
>> 
>>     part should be made more generic anyway (see discussion on hooks)
>> 
>>      
>> 
>>     ## Features
>> 
>>      
>> 
>>     - A **provides** field. Generally useful, but particulary so with
>> 
>>     compilers-as-packages
>> 
>>      
>> 
>>     - Releasing the **"features" field** for easier package
>configuration
>> 
>>      
>> 
>>     - **Track installed files**
>> 
>>      
>> 
>>     - **Improve security**: just checking md5s is quite light ;
>package scripts
>>     can
>> 
>>     write anywhere
>> 
>>      
>> 
>>     - **OS-specific handling of dependencies** (eg dependencies on
>packages
>>     from the
>> 
>>     OS) with plugins (#1519)
>> 
>>      
>> 
>>     - Specify and implement **hooks**
>> 
>>      
>> 
>>     - Find a nicer way to **share dev repos** / undoable "pinning
>sources"
>> 
>>      
>> 
>>     - **Per-switch remotes**
>> 
>>      
>> 
>>     - **Multi-switch packages**
>> 
>>      
>> 
>>     - Support for (automatic generation of) **binary packages**
>> 
>>      
>> 
>>     - Nicer **ocamlfind interaction**
>> 
>>      
>> 
>>      
>> 
>>      
>> 
>>     Cheers,
>> 
>>     Louis Gesbert
>> 
>>    
>???????????????????????????????????????????????????????????????????????????
>> 
>>     opam-devel mailing list
>>     opam-devel at lists.ocaml.org
>>     http://lists.ocaml.org/listinfo/opam-devel
>> 
>>    
>???????????????????????????????????????????????????????????????????????????
>> 
>>     opam-devel mailing list
>>     opam-devel at lists.ocaml.org
>>     http://lists.ocaml.org/listinfo/opam-devel
>> 
>> 
>> --
>> Simon
>
>> _______________________________________________
>> opam-devel mailing list
>> opam-devel at lists.ocaml.org
>> http://lists.ocaml.org/listinfo/opam-devel
>
>
>-- 
>Roberto Di Cosmo
> 
>------------------------------------------------------------------
>Professeur               En delegation a l'INRIA
>PPS                      E-mail: roberto at dicosmo.org
>Universite Paris Diderot WWW  : http://www.dicosmo.org
>Case 7014                Tel  : ++33-(0)1-57 27 92 20
>5, Rue Thomas Mann       
>F-75205 Paris Cedex 13   Identica: http://identi.ca/rdicosmo
>FRANCE.                  Twitter: http://twitter.com/rdicosmo
>------------------------------------------------------------------
>Attachments:
>MIME accepted, Word deprecated
>      http://www.gnu.org/philosophy/no-word-attachments.html
>------------------------------------------------------------------
>Office location:
> 
>Bureau 3020 (3rd floor)
>Batiment Sophie Germain
>Avenue de France
>Metro Bibliotheque Francois Mitterrand, ligne 14/RER C
>-----------------------------------------------------------------
>GPG fingerprint 2931 20CE 3A5A 5390 98EC 8BFC FCCA C3BE 39CB 12D3      
>                 

-- 
Simon
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20150221/f894f40e/attachment.html>

From louis.gesbert at ocamlpro.com  Mon Feb 23 00:26:33 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Mon, 23 Feb 2015 09:26:33 +0900
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <CAPFanBFKfDhXM6L1_7H_bVgHvT0OSO2BK_QBYB3wDWXAaZiWnw@mail.gmail.com>
References: <1709176.A7TcrPyoj4@agaric>
 <B039BA3F-CBE5-49A4-9B5B-EF77F440BB5E@m4x.org>
 <CAPFanBFKfDhXM6L1_7H_bVgHvT0OSO2BK_QBYB3wDWXAaZiWnw@mail.gmail.com>
Message-ID: <5420145.u1FOe870o6@agaric>

That's good to know. I have a question: do they have, or at least know about cygwin ? Does it scare them ?


> - Gabriel Scherer, 21/02/2015 09:43 -
> I'd like to add my voice in favor of Windows support -- I found that to be
> a more important issue when discussing with the Coq people and their use of
> OPAM. We in the OCaml community have been quite good at scaring away
> Windows developers (and because it's mostly a crowd of software developers
> which often use other systems we didn't notice much), but the Coq userbase
> is much more diverse and contains non-programmers (or at least people that
> don't know they are programming), they do have Windows users.
> 
> On Sat, Feb 21, 2015 at 9:37 AM, Simon Cruanes <simon.cruanes.2007 at m4x.org>
> wrote:
> 
> > Sandboxing the build would also be a big security improvement. I think
> > cabal now does it, and signing packages doesn't protect against malicious
> > or buggy packages (see: bumblebee's uninstall target). That also goes hand
> > in hand with file tracking. I don't know how difficult it is, though.
> >
> > Cheers!
> >
> > Le 21 f?vrier 2015 05:01:56 UTC+01:00, Louis Gesbert <
> > louis.gesbert at ocamlpro.com> a ?crit :
> >>
> >> With 1.2.1 almost out of the door, time has come to review the roadmap discussed back in December and choose where we'll be going for 1.3. Original mail attached for reference.
> >>
> >>
> >> The topic that is burning hot at the moment is, specially after the Debian Haskell build host has been compromised, security: we have no signing at all at the moment, and we need to improve on this before it becomes a problem. TUF [1] has devised a sane amount of rules for repository management and signing that should make it easier to get it right in OPAM. Hannes has mentionned writing an OCaml implementation for TUF, which could get very helpful.
> >>
> >>
> >> Also of importance is Windows support. It should at least be straighforward and documented to get a basic Cygwin setup working. That goes with adding automated tests (appveyor can now be added in Github alongside Travis). Related is cleaning up external command usage (even if not really justified by a Windows
> >> port only, as David Allsopp pointed out) -- replacing curl calls by cohttp, use ocaml-fileutils...
> >>
> >>
> >> These are the other main features, that'll probably take more time if we are to focus eg. on security:
> >>
> >> * a plugin mechanism with plugins for example for OCaml (for better agnosticity), external dependency handling [2], documentation generation...
> >>
> >> * a 'provides:' field in OPAM files [3]. This is a loose requirement if we want to switch the repository to have OCaml itself in a package (which is already possible, but the system compiler may yet be an issue).
> >>
> >> * More flexible switch handling (multi-switch packages, per-switch remotes, layered switches for cross-compilation...)
> >>
> >> * Tracking of files installed by packages. While unrelated to repo signing, this might have some security implications, so we might want to bring it in.
> >>
> >> * With file tracking, generating a binary repo (with some limitations) could be quite
> >> straight-forward.
> >>
> >>
> >> Which of these do you think is most important ? Have I forgotten anything ?
> >>
> >> Cheers,
> >> Louis
> >>
> >>
> >> [1] http://theupdateframework.com/
> >> [2] https://github.com/ocaml/opam/blob/master/doc/design/depexts-plugins
> >> [3] https://github.com/ocaml/opam/blob/master/doc/design/provides.md
> >>
> >> message suivi
> >> De :Louis Gesbert ? :opam-devel at lists.ocaml.orgEnvoy? :Wed Dec 17
> >> 11:07:40 UTC+01:00 2014Objet :[opam-devel] OPAM Roadmap -- what next ?
> >>
> >> Hi all,
> >>
> >>
> >>
> >> with some lag after the 1.2 release, I'd like to open some space for a
> >> collective discussion of the priorities for where the energies should go
> >> next. We have mainly 3 directions for improvements: first, portability,
> >> with the main goal of a Windows version. Second, agnosticity, with the goal
> >> to make OPAM more generic, and try and open it to users outside of the
> >> OCaml community (wouldn't OPAM for Haskell be fun ?). Third, there are
> >> always lots of features and improvements that have been asked for, and
> >> would improve the experience of current users.
> >>
> >>
> >>
> >> So here is a summary of what I've gathered. Feel free to add your own.
> >>
> >>
> >>
> >>
> >>
> >>
> >>
> >> ## Portability
> >>
> >>
> >>
> >> - **Rewrite parallel command engine.** / done.
> >>
> >>
> >>
> >> - **Native system manipulation (cp, rm, curl...).**
> >>
> >> These are mostly done through calls to the shell or external programs.
> >> It's
> >>
> >> not very pretty but quite pragmatic actually... until we want to run on
> >>
> >> Windows without Cygwin. Anyway, this wouldn't be the end of portability
> >>
> >> issues.
> >>
> >>
> >>
> >> - **Windows support.**
> >>
> >> for OPAM itself to begin with. This should be pretty close.
> >>
> >>
> >>
> >> - **Packages on Windows.**
> >>
> >> Locate common issues and attempt to find generic fixes.
> >>
> >>
> >>
> >> - Allow **direct use of more solvers** or solver servers.
> >>
> >>
> >>
> >> - **Support cross-compilation**
> >>
> >> This is quite an open issue at the moment.
> >>
> >>
> >>
> >> ## Agnosticity
> >>
> >>
> >>
> >> - **Isolate OCaml-specific stuff.**
> >>
> >> E.g. specific opam-file variables. See ocaml-specific.md
> >>
> >>
> >>
> >> - **Separate as plugins**
> >>
> >> To open the gate to OPAM without these plugins, or with other ones
> >>
> >>
> >>
> >> - **Compilers as packages.**
> >>
> >> This should mostly work now, but needs some tests and strengthening. The
> >> main
> >>
> >> thing still to do is to handle the system compiler changes properly ; that
> >>
> >> part should be made more generic anyway (see discussion on hooks)
> >>
> >>
> >>
> >> ## Features
> >>
> >>
> >>
> >> - A **provides** field. Generally useful, but particulary so with
> >>
> >> compilers-as-packages
> >>
> >>
> >>
> >> - Releasing the **"features" field** for easier package configuration
> >>
> >>
> >>
> >> - **Track installed files**
> >>
> >>
> >>
> >> - **Improve security**: just checking md5s is quite light ; package
> >> scripts can
> >>
> >> write anywhere
> >>
> >>
> >>
> >> - **OS-specific handling of dependencies** (eg dependencies on packages
> >> from the
> >>
> >> OS) with plugins (#1519)
> >>
> >>
> >>
> >> - Specify and implement **hooks**
> >>
> >>
> >>
> >> - Find a nicer way to **share dev repos** / undoable "pinning sources"
> >>
> >>
> >>
> >> - **Per-switch remotes**
> >>
> >>
> >>
> >> - **Multi-switch packages**
> >>
> >>
> >>
> >> - Support for (automatic generation of) **binary packages**
> >>
> >>
> >>
> >> - Nicer **ocamlfind interaction**
> >>
> >>
> >>
> >>
> >>
> >>
> >>
> >> Cheers,
> >>
> >> Louis Gesbert
> >>
> >> ------------------------------
> >>
> >> opam-devel mailing list
> >> opam-devel at lists.ocaml.org
> >> http://lists.ocaml.org/listinfo/opam-devel
> >>
> >> ------------------------------
> >>
> >> opam-devel mailing list
> >> opam-devel at lists.ocaml.org
> >> http://lists.ocaml.org/listinfo/opam-devel
> >>
> >>
> > --
> > Simon
> >
> > _______________________________________________
> > opam-devel mailing list
> > opam-devel at lists.ocaml.org
> > http://lists.ocaml.org/listinfo/opam-devel
> >
> >

From louis.gesbert at ocamlpro.com  Mon Feb 23 01:07:58 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Mon, 23 Feb 2015 10:07:58 +0900
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <ABCB46D0-899C-443A-9C2C-E1D09E3745C5@recoil.org>
References: <1709176.A7TcrPyoj4@agaric>
 <ABCB46D0-899C-443A-9C2C-E1D09E3745C5@recoil.org>
Message-ID: <2524731.qnNM7Xpy0S@agaric>

That's starting to sound fairly consistent:

# Secure OPAM itself a bit:

  * Sandbox the build step: not sure how to do it, but it should be without network access, and only allowed to write to its build dir.
  * Diff the prefix before and after the install step to track installed/changed files. That could use git ; for most packages, automatically generating a .install file would be possible. Installation should be sandboxed so that it can't write outside of the prefix, and is without network, too.
  * Cleanup the usage of external commands (curl, POSIX, etc.)


# Secure the repository and updates:

Integrate some implementation of TUF to have signed packages, signed metadata and signed timestamps, and allow OPAM to detect anything suspicious. This implies:
  * defining a signing and repository update workflow, adding as little burden as possible
  * update opam-admin to apply the signing rules
  * obviously, update opam to check all that
  * update opam-publish (?) to help contribute signed packages, depending on the chosen workflow

I'm still getting through the literature.


# Improve Windows support

Should be much helped by the cleanup of external commands above. This may include several tracks and I am not sure if we should define a clear release goal (or what that would be):
  * write a tutorial on how to get an OPAM setup on Windows (what works, eg. purely Cygwin to start with, then we can improve on that)
  * add dedicated automated tests
  * have the core of OPAM build and run natively (mingw or vc, no cygwin)
  * have a way to build packages with it ?


That would be more than enough to justify a 1.3 release !


Some more precise answers:

> - Registering the files that are installed is going to be quite a large undertaking within the repository, but also makes eventual binary distributions much easier. This is traditionally done by having a 'fakeroot' into which packages are installed, but this requires changing every package

Yes, that's the approach taken by `ocp-bin`: you add wrappers to your packages descriptions, and they register the installed files, which can then be packed and used as a cache to reinstall on the same or an identical system (same depopts installed, same versions, etc.)

> One interesting option is that we could turn ~/.opam/<switch> into a .git root, and simply version control it using ocaml-git.  This way anything can write into the checkout, and we simply do a `git add` after each installation to figure what changed in the staging area.  It also makes it significantly easier to revert back to an older snapshot.  If filesystem space is a concern, this feature can be deactivated and no git tracking done.

`opam cherry-pick core_kernel` :)
Easier, I don't know, but certainly more reliable ! My ~/.opam is 11G already, so I probably don't care much about filesystem space. Wouldn't Darcs allow us to encode the package dependencies into the VC graph ? :D


> - The `source linux` tags have to go.  Not sure how though...

Oh yes, implementing them in `opam-depext` gave me the chills.

> The only other branch I don't have much view on is the compilers-as-a-package branch.  While that's a feature that could help out other communities like Coq, I'm not sure how it fits in.  It's going to be very difficult to do more than one major repository migration at a time, and security+Windows is already a lot to take on...

There are two parts in this:
* Support from OPAM: removing the source from compiler definitions and moving that to packages is supported already in 1.2.1. Generating a custom package for the "system compiler" -- like we currently generate a custom compiler definition -- isn't yet, though, but shouldn't raise any problems (I just hoped to integrate it into something more general).
* Rewriting the repository to migrate to that format: there are scripts that do it ; I wouldn't advise it currently, though, for the following reasons:
  - there isn't a huge immediate benefit
  - we would need the `provides` field for it to be really useful
  - migrating from one to the other may be a little awkward
  - repository backwards compatibility
  - currently, compiler definitions may download huge patches ; OPAM packages don't support downloading multiple sources at the moment.

On the other hand, it can already be used for e.g. a Coq or experimental repo (for people changing OCaml version all the time ?) without trouble; maybe it would be worth writing more documentation on it ?

From louis.gesbert at ocamlpro.com  Mon Feb 23 08:42:12 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Mon, 23 Feb 2015 17:42:12 +0900
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <2524731.qnNM7Xpy0S@agaric>
References: <1709176.A7TcrPyoj4@agaric>
 <ABCB46D0-899C-443A-9C2C-E1D09E3745C5@recoil.org> <2524731.qnNM7Xpy0S@agaric>
Message-ID: <4540421.uDLrHpGzS0@agaric>

>   * defining a signing and repository update workflow, adding as little burden as possible

I forgot to mention that it should stay easy to host repositories for third-parties.

From roberto at dicosmo.org  Mon Feb 23 08:50:29 2015
From: roberto at dicosmo.org (Roberto Di Cosmo)
Date: Mon, 23 Feb 2015 09:50:29 +0100
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <2524731.qnNM7Xpy0S@agaric>
References: <1709176.A7TcrPyoj4@agaric>
 <ABCB46D0-899C-443A-9C2C-E1D09E3745C5@recoil.org>
 <2524731.qnNM7Xpy0S@agaric>
Message-ID: <20150223085029.GA30440@traveler>

On Mon, Feb 23, 2015 at 10:07:58AM +0900, Louis Gesbert wrote:
> That's starting to sound fairly consistent:
> 
> # Secure OPAM itself a bit:
> 
>   * Sandbox the build step: not sure how to do it, but it should be without network access, and only allowed to write to its build dir.

This is really *not easy* in the current state of affairs

 -> opam calls whatever command is declared in the build:/install: fields

 -> this command can do whatever it wants; a sloppy Makefile might very well end
    up removing all the user-writeable files on a machine; think of something like

    PREFIX=$(HOME)/$(MYNICELOCALVAR)   # ooops ... using a var defined only on the dev machine!

    install:
        rm -rf $(PREFIX) # clean up dest dir on the dev machine; rm -rf $(HOME) everywhere else!
        ....

 -> it's easy to pass through the integration test on opam-repository too: if
    somebody really wants to make bad jokes, one can simply check the
    environment to be nice when going through Travis, and wreak havoc elsewhere

In the GNU/Linux distribution world, we face a similar challenge, with install
scripts being on top run as root; the very stringent QA process enforced
by these communities mitigates the problem quite a bit, of course, but
it is still there and s*it happens.

That's why I was asking for the characteristics of the sandboxing techniques we
known. As with security, "sandbox" is a term easy to use, but difficult to
achieve.

My best bet is _really_ the ptrace approach followed by Mcqueen in
http://robot101.net/files/trace.tar.gz as it allows to monitor _all_ file
access even by statically linked binaries, and is able to make a backup
copy of modified files (to restore them, if something goes wrong).

What I do not know is whether something similar is available for *BSD,
and even less for Windows.

And of course, this would make yet another external dependency, but there
is no free lunch.

Cheers

--
Roberto

From louis.gesbert at ocamlpro.com  Mon Feb 23 09:07:25 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Mon, 23 Feb 2015 18:07:25 +0900
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <20150223085029.GA30440@traveler>
References: <1709176.A7TcrPyoj4@agaric> <2524731.qnNM7Xpy0S@agaric>
 <20150223085029.GA30440@traveler>
Message-ID: <3713331.vrvAC57xgS@agaric>

Yes, that's the kind of thing I had in mind. Incidentally, the Makefile joke happened to me while in school, a few days before a project was due -- never forgot the lesson :) (I removed the unused DOC variable definition. Except `make clean` had `rm -rf $(DOC)/`. Notice the last char...)

This is more related to protecting against mistakes than protecting against malice, like repo signing is, but both are important. The point being that _if_ a malicious package makes it through, it can just do the bad stuff at runtime once it's installed rather than do it during compilation or installation. And that's actually easier to hide from the repo maintainers. Therefore, not having a completely secure sandboxing solution is not a blocker if one isn't easily available.

> My best bet is _really_ the ptrace approach followed by Mcqueen in
> http://robot101.net/files/trace.tar.gz as it allows to monitor _all_ file
> access even by statically linked binaries, and is able to make a backup
> copy of modified files (to restore them, if something goes wrong).

Sounds cool, I'll check that out. I am also aware of http://proot.me/

> - Roberto Di Cosmo, 23/02/2015 09:50 -
> On Mon, Feb 23, 2015 at 10:07:58AM +0900, Louis Gesbert wrote:
> > That's starting to sound fairly consistent:
> > 
> > # Secure OPAM itself a bit:
> > 
> >   * Sandbox the build step: not sure how to do it, but it should be without network access, and only allowed to write to its build dir.
> 
> This is really *not easy* in the current state of affairs
> 
>  -> opam calls whatever command is declared in the build:/install: fields
> 
>  -> this command can do whatever it wants; a sloppy Makefile might very well end
>     up removing all the user-writeable files on a machine; think of something like
> 
>     PREFIX=$(HOME)/$(MYNICELOCALVAR)   # ooops ... using a var defined only on the dev machine!
> 
>     install:
>         rm -rf $(PREFIX) # clean up dest dir on the dev machine; rm -rf $(HOME) everywhere else!
>         ....
> 
>  -> it's easy to pass through the integration test on opam-repository too: if
>     somebody really wants to make bad jokes, one can simply check the
>     environment to be nice when going through Travis, and wreak havoc elsewhere
> 
> In the GNU/Linux distribution world, we face a similar challenge, with install
> scripts being on top run as root; the very stringent QA process enforced
> by these communities mitigates the problem quite a bit, of course, but
> it is still there and s*it happens.
> 
> That's why I was asking for the characteristics of the sandboxing techniques we
> known. As with security, "sandbox" is a term easy to use, but difficult to
> achieve.
> 
> My best bet is _really_ the ptrace approach followed by Mcqueen in
> http://robot101.net/files/trace.tar.gz as it allows to monitor _all_ file
> access even by statically linked binaries, and is able to make a backup
> copy of modified files (to restore them, if something goes wrong).
> 
> What I do not know is whether something similar is available for *BSD,
> and even less for Windows.
> 
> And of course, this would make yet another external dependency, but there
> is no free lunch.
> 
> Cheers
> 
> --
> Roberto
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel

From david.allsopp at metastack.com  Mon Feb 23 09:09:04 2015
From: david.allsopp at metastack.com (David Allsopp)
Date: Mon, 23 Feb 2015 09:09:04 +0000
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <20150223085029.GA30440@traveler>
References: <1709176.A7TcrPyoj4@agaric>
 <ABCB46D0-899C-443A-9C2C-E1D09E3745C5@recoil.org>
 <2524731.qnNM7Xpy0S@agaric> <20150223085029.GA30440@traveler>
Message-ID: <E51C5B015DBD1348A1D85763337FB6D9E9938F53@Remus.metastack.local>

Roberto Di Cosmo wrote:
> On Mon, Feb 23, 2015 at 10:07:58AM +0900, Louis Gesbert wrote:
> > That's starting to sound fairly consistent:
> >
> > # Secure OPAM itself a bit:
> >
> >   * Sandbox the build step: not sure how to do it, but it should be
> without network access, and only allowed to write to its build dir.
> 
> This is really *not easy* in the current state of affairs
> 
>  -> opam calls whatever command is declared in the build:/install: fields
> 
>  -> this command can do whatever it wants; a sloppy Makefile might very
> well end
>     up removing all the user-writeable files on a machine; think of
> something like
> 
>     PREFIX=$(HOME)/$(MYNICELOCALVAR)   # ooops ... using a var defined
> only on the dev machine!
> 
>     install:
>         rm -rf $(PREFIX) # clean up dest dir on the dev machine; rm -rf
> $(HOME) everywhere else!
>         ....
>  -> it's easy to pass through the integration test on opam-repository too:
> if
>     somebody really wants to make bad jokes, one can simply check the
>     environment to be nice when going through Travis, and wreak havoc
> elsewhere
> 
> In the GNU/Linux distribution world, we face a similar challenge, with
> install scripts being on top run as root; the very stringent QA process
> enforced by these communities mitigates the problem quite a bit, of
> course, but it is still there and s*it happens.
> 
> That's why I was asking for the characteristics of the sandboxing
> techniques we known. As with security, "sandbox" is a term easy to use,
> but difficult to achieve.
> 
> My best bet is _really_ the ptrace approach followed by Mcqueen in
> http://robot101.net/files/trace.tar.gz as it allows to monitor _all_ file
> access even by statically linked binaries, and is able to make a backup
> copy of modified files (to restore them, if something goes wrong).
> 
> What I do not know is whether something similar is available for *BSD, and
> even less for Windows.

See http://www.sandboxie.com/ for Windows.


David

From gabriel.scherer at gmail.com  Mon Feb 23 09:18:37 2015
From: gabriel.scherer at gmail.com (Gabriel Scherer)
Date: Mon, 23 Feb 2015 10:18:37 +0100
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <5420145.u1FOe870o6@agaric>
References: <1709176.A7TcrPyoj4@agaric>
 <B039BA3F-CBE5-49A4-9B5B-EF77F440BB5E@m4x.org>
 <CAPFanBFKfDhXM6L1_7H_bVgHvT0OSO2BK_QBYB3wDWXAaZiWnw@mail.gmail.com>
 <5420145.u1FOe870o6@agaric>
Message-ID: <CAPFanBFhHsynidEEuLgGB5EwWi4ZmUOCJi7GvOWSy1sXFGA_xg@mail.gmail.com>

On Mon, Feb 23, 2015 at 1:26 AM, Louis Gesbert <louis.gesbert at ocamlpro.com>
wrote:
> That's good to know. I have a question: do [Coq users] have, or at least
know about cygwin ? Does it scare them ?

The tech-savvy ones know about it, and I suspect that for the others we
could distribute it along with OPAM (as Jonathan Protzenko did in his
ocaml-on-windows installer) and they wouldn't mind.

Quoting here the message Jason Gross (definitely in the first category)
sent about OPAM+Coq's status on Windows.

Opam now seems to work fine for me, in that "opam install
> coq.8.4.dev+ltacprof" worked fine, and now "(eval `opam config env`;
> coqtop)" works fine and gives me the relevant coq version.  (I haven't
> figured out opam switches yet, though.)
> If I recall correctly, I downloaded the sources for opam 1.2.0 from
> http://opam.ocaml.org/doc/Install.html, and built it within cygwin.
>  (Again, I recall needing to do some PATH mangling, but I don't recall what
> I had to do in particular.  I may try to set up a VM and see if I can
> re-create the process, taking notes this time.)


It seems you're quite close, but "official" support and some documentation
would be very helpful.

>
>> - Gabriel Scherer, 21/02/2015 09:43 -
>> I'd like to add my voice in favor of Windows support -- I found that to
be
>> a more important issue when discussing with the Coq people and their use
of
>> OPAM. We in the OCaml community have been quite good at scaring away
>> Windows developers (and because it's mostly a crowd of software
developers
>> which often use other systems we didn't notice much), but the Coq
userbase
>> is much more diverse and contains non-programmers (or at least people
that
>> don't know they are programming), they do have Windows users.
>>
>> On Sat, Feb 21, 2015 at 9:37 AM, Simon Cruanes <
simon.cruanes.2007 at m4x.org>
>> wrote:
>>
>> > Sandboxing the build would also be a big security improvement. I think
>> > cabal now does it, and signing packages doesn't protect against
malicious
>> > or buggy packages (see: bumblebee's uninstall target). That also goes
hand
>> > in hand with file tracking. I don't know how difficult it is, though.
>> >
>> > Cheers!
>> >
>> > Le 21 f?vrier 2015 05:01:56 UTC+01:00, Louis Gesbert <
>> > louis.gesbert at ocamlpro.com> a ?crit :
>> >>
>> >> With 1.2.1 almost out of the door, time has come to review the
roadmap discussed back in December and choose where we'll be going for 1.3.
Original mail attached for reference.
>> >>
>> >>
>> >> The topic that is burning hot at the moment is, specially after the
Debian Haskell build host has been compromised, security: we have no
signing at all at the moment, and we need to improve on this before it
becomes a problem. TUF [1] has devised a sane amount of rules for
repository management and signing that should make it easier to get it
right in OPAM. Hannes has mentionned writing an OCaml implementation for
TUF, which could get very helpful.
>> >>
>> >>
>> >> Also of importance is Windows support. It should at least be
straighforward and documented to get a basic Cygwin setup working. That
goes with adding automated tests (appveyor can now be added in Github
alongside Travis). Related is cleaning up external command usage (even if
not really justified by a Windows
>> >> port only, as David Allsopp pointed out) -- replacing curl calls by
cohttp, use ocaml-fileutils...
>> >>
>> >>
>> >> These are the other main features, that'll probably take more time if
we are to focus eg. on security:
>> >>
>> >> * a plugin mechanism with plugins for example for OCaml (for better
agnosticity), external dependency handling [2], documentation generation...
>> >>
>> >> * a 'provides:' field in OPAM files [3]. This is a loose requirement
if we want to switch the repository to have OCaml itself in a package
(which is already possible, but the system compiler may yet be an issue).
>> >>
>> >> * More flexible switch handling (multi-switch packages, per-switch
remotes, layered switches for cross-compilation...)
>> >>
>> >> * Tracking of files installed by packages. While unrelated to repo
signing, this might have some security implications, so we might want to
bring it in.
>> >>
>> >> * With file tracking, generating a binary repo (with some
limitations) could be quite
>> >> straight-forward.
>> >>
>> >>
>> >> Which of these do you think is most important ? Have I forgotten
anything ?
>> >>
>> >> Cheers,
>> >> Louis
>> >>
>> >>
>> >> [1] http://theupdateframework.com/
>> >> [2]
https://github.com/ocaml/opam/blob/master/doc/design/depexts-plugins
>> >> [3] https://github.com/ocaml/opam/blob/master/doc/design/provides.md
>> >>
>> >> message suivi
>> >> De :Louis Gesbert ? :opam-devel at lists.ocaml.orgEnvoy? :Wed Dec 17
>> >> 11:07:40 UTC+01:00 2014Objet :[opam-devel] OPAM Roadmap -- what next ?
>> >>
>> >> Hi all,
>> >>
>> >>
>> >>
>> >> with some lag after the 1.2 release, I'd like to open some space for a
>> >> collective discussion of the priorities for where the energies should
go
>> >> next. We have mainly 3 directions for improvements: first,
portability,
>> >> with the main goal of a Windows version. Second, agnosticity, with
the goal
>> >> to make OPAM more generic, and try and open it to users outside of the
>> >> OCaml community (wouldn't OPAM for Haskell be fun ?). Third, there are
>> >> always lots of features and improvements that have been asked for, and
>> >> would improve the experience of current users.
>> >>
>> >>
>> >>
>> >> So here is a summary of what I've gathered. Feel free to add your own.
>> >>
>> >>
>> >>
>> >>
>> >>
>> >>
>> >>
>> >> ## Portability
>> >>
>> >>
>> >>
>> >> - **Rewrite parallel command engine.** / done.
>> >>
>> >>
>> >>
>> >> - **Native system manipulation (cp, rm, curl...).**
>> >>
>> >> These are mostly done through calls to the shell or external programs.
>> >> It's
>> >>
>> >> not very pretty but quite pragmatic actually... until we want to run
on
>> >>
>> >> Windows without Cygwin. Anyway, this wouldn't be the end of
portability
>> >>
>> >> issues.
>> >>
>> >>
>> >>
>> >> - **Windows support.**
>> >>
>> >> for OPAM itself to begin with. This should be pretty close.
>> >>
>> >>
>> >>
>> >> - **Packages on Windows.**
>> >>
>> >> Locate common issues and attempt to find generic fixes.
>> >>
>> >>
>> >>
>> >> - Allow **direct use of more solvers** or solver servers.
>> >>
>> >>
>> >>
>> >> - **Support cross-compilation**
>> >>
>> >> This is quite an open issue at the moment.
>> >>
>> >>
>> >>
>> >> ## Agnosticity
>> >>
>> >>
>> >>
>> >> - **Isolate OCaml-specific stuff.**
>> >>
>> >> E.g. specific opam-file variables. See ocaml-specific.md
>> >>
>> >>
>> >>
>> >> - **Separate as plugins**
>> >>
>> >> To open the gate to OPAM without these plugins, or with other ones
>> >>
>> >>
>> >>
>> >> - **Compilers as packages.**
>> >>
>> >> This should mostly work now, but needs some tests and strengthening.
The
>> >> main
>> >>
>> >> thing still to do is to handle the system compiler changes properly ;
that
>> >>
>> >> part should be made more generic anyway (see discussion on hooks)
>> >>
>> >>
>> >>
>> >> ## Features
>> >>
>> >>
>> >>
>> >> - A **provides** field. Generally useful, but particulary so with
>> >>
>> >> compilers-as-packages
>> >>
>> >>
>> >>
>> >> - Releasing the **"features" field** for easier package configuration
>> >>
>> >>
>> >>
>> >> - **Track installed files**
>> >>
>> >>
>> >>
>> >> - **Improve security**: just checking md5s is quite light ; package
>> >> scripts can
>> >>
>> >> write anywhere
>> >>
>> >>
>> >>
>> >> - **OS-specific handling of dependencies** (eg dependencies on
packages
>> >> from the
>> >>
>> >> OS) with plugins (#1519)
>> >>
>> >>
>> >>
>> >> - Specify and implement **hooks**
>> >>
>> >>
>> >>
>> >> - Find a nicer way to **share dev repos** / undoable "pinning sources"
>> >>
>> >>
>> >>
>> >> - **Per-switch remotes**
>> >>
>> >>
>> >>
>> >> - **Multi-switch packages**
>> >>
>> >>
>> >>
>> >> - Support for (automatic generation of) **binary packages**
>> >>
>> >>
>> >>
>> >> - Nicer **ocamlfind interaction**
>> >>
>> >>
>> >>
>> >>
>> >>
>> >>
>> >>
>> >> Cheers,
>> >>
>> >> Louis Gesbert
>> >>
>> >> ------------------------------
>> >>
>> >> opam-devel mailing list
>> >> opam-devel at lists.ocaml.org
>> >> http://lists.ocaml.org/listinfo/opam-devel
>> >>
>> >> ------------------------------
>> >>
>> >> opam-devel mailing list
>> >> opam-devel at lists.ocaml.org
>> >> http://lists.ocaml.org/listinfo/opam-devel
>> >>
>> >>
>> > --
>> > Simon
>> >
>> > _______________________________________________
>> > opam-devel mailing list
>> > opam-devel at lists.ocaml.org
>> > http://lists.ocaml.org/listinfo/opam-devel
>> >
>> >
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20150223/a95ccd9f/attachment.html>

From whitequark at whitequark.org  Mon Feb 23 09:54:22 2015
From: whitequark at whitequark.org (Peter Zotov)
Date: Mon, 23 Feb 2015 12:54:22 +0300
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <E51C5B015DBD1348A1D85763337FB6D9E9938F53@Remus.metastack.local>
References: <1709176.A7TcrPyoj4@agaric>
 <ABCB46D0-899C-443A-9C2C-E1D09E3745C5@recoil.org>
 <2524731.qnNM7Xpy0S@agaric> <20150223085029.GA30440@traveler>
 <E51C5B015DBD1348A1D85763337FB6D9E9938F53@Remus.metastack.local>
Message-ID: <3cc7fc8aca8b1af4720aab969765e486@whitequark.org>

Roberto Di Cosmo wrote:
> What I do not know is whether something similar is available for *BSD, 
> and
> even less for Windows.

I have spent an extended amount of time on this issue in OS X.
Plain and simple, it is not possible to intercept syscalls on XNU.
The ptrace API does not implement PTRACE_SYSCALL, and the equivalent
Mach API, task_set_emulation, has not ever been implemented.
I've looked into the XNU sources too and there is simply no codepath
that performs what you need.

Forget about this kind of user-space sandboxing on OS X.

However, OS X provides an explicit sandboxing mechanism since 10.5.
I don't think it will work for opam either:

The app sandbox container directory has the following characteristics:
It is located at a system-defined path, within the user?s home 
directory.
The container is in a hidden location, and so users do not interact with 
it directly.

(from 
https://developer.apple.com/library/mac/documentation/Security/Conceptual/AppSandboxDesignGuide/AppSandboxInDepth/AppSandboxInDepth.html#//apple_ref/doc/uid/TP40011183-CH3-SW6)

-- 
Peter Zotov

From thomas at gazagnaire.org  Mon Feb 23 11:39:11 2015
From: thomas at gazagnaire.org (Thomas Gazagnaire)
Date: Mon, 23 Feb 2015 11:39:11 +0000
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <1709176.A7TcrPyoj4@agaric>
References: <1709176.A7TcrPyoj4@agaric>
Message-ID: <C4FFE01A-565D-4F0B-BC7E-83C067993220@gazagnaire.org>

Hi,

An official windows support would be nice indeed.

> * More flexible switch handling (multi-switch packages, per-switch remotes, layered switches for cross-compilation...)

Not very critical but it would be indeed nice to rationalise the design of pin/repo global vs. per switch.

But I think what would be very useful is to think of a (if possible simple) working end-to-end cross-compilation system using opam. Maybe that's just a matter of having opam set the right environment variable to designate the TARGET and HOST switches correctly, and then update opam-repository to configure each package correctly, maybe that's more (involving build system hackeries). But at least I think we should think about it for 1.3.

> * With file tracking, generating a binary repo (with some limitations) could be quite straight-forward.

yay.

Thomas

> Which of these do you think is most important ? Have I forgotten anything ?

yes: we need more colors and more camels. And more animated progress bars too.

Thomas

> 
> Cheers,
> Louis
> 
> 
> [1] http://theupdateframework.com/
> [2] https://github.com/ocaml/opam/blob/master/doc/design/depexts-plugins
> [3] https://github.com/ocaml/opam/blob/master/doc/design/provides.md
> From: Louis Gesbert <louis.gesbert at ocamlpro.com>
> To: opam-devel at lists.ocaml.org
> Date: 17 December 2014 10:07:40 GMT
> Subject: [opam-devel] OPAM Roadmap -- what next ?
> 
> 
> Hi all,
>  
> with some lag after the 1.2 release, I'd like to open some space for a collective discussion of the priorities for where the energies should go next. We have mainly 3 directions for improvements: first, portability, with the main goal of a Windows version. Second, agnosticity, with the goal to make OPAM more generic, and try and open it to users outside of the OCaml community (wouldn't OPAM for Haskell be fun ?). Third, there are always lots of features and improvements that have been asked for, and would improve the experience of current users.
>  
> So here is a summary of what I've gathered. Feel free to add your own.
>  
>  
>  
> ## Portability
>  
> - **Rewrite parallel command engine.** / done.
>  
> - **Native system manipulation (cp, rm, curl...).**
> These are mostly done through calls to the shell or external programs. It's
> not very pretty but quite pragmatic actually... until we want to run on
> Windows without Cygwin. Anyway, this wouldn't be the end of portability
> issues.
>  
> - **Windows support.**
> for OPAM itself to begin with. This should be pretty close.
>  
> - **Packages on Windows.**
> Locate common issues and attempt to find generic fixes.
>  
> - Allow **direct use of more solvers** or solver servers.
>  
> - **Support cross-compilation**
> This is quite an open issue at the moment.
>  
> ## Agnosticity
>  
> - **Isolate OCaml-specific stuff.**
> E.g. specific opam-file variables. See ocaml-specific.md
>  
> - **Separate as plugins**
> To open the gate to OPAM without these plugins, or with other ones
>  
> - **Compilers as packages.**
> This should mostly work now, but needs some tests and strengthening. The main
> thing still to do is to handle the system compiler changes properly ; that
> part should be made more generic anyway (see discussion on hooks)
>  
> ## Features
>  
> - A **provides** field. Generally useful, but particulary so with
> compilers-as-packages
>  
> - Releasing the **"features" field** for easier package configuration
>  
> - **Track installed files**
>  
> - **Improve security**: just checking md5s is quite light ; package scripts can
> write anywhere
>  
> - **OS-specific handling of dependencies** (eg dependencies on packages from the
> OS) with plugins (#1519)
>  
> - Specify and implement **hooks**
>  
> - Find a nicer way to **share dev repos** / undoable "pinning sources"
>  
> - **Per-switch remotes**
>  
> - **Multi-switch packages**
>  
> - Support for (automatic generation of) **binary packages**
>  
> - Nicer **ocamlfind interaction**
>  
>  
>  
> Cheers,
> Louis Gesbert
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
> 
> 
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20150223/8d525561/attachment-0001.html>

From louis.gesbert at ocamlpro.com  Mon Feb 23 12:37:35 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Mon, 23 Feb 2015 21:37:35 +0900
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <C4FFE01A-565D-4F0B-BC7E-83C067993220@gazagnaire.org>
References: <1709176.A7TcrPyoj4@agaric>
 <C4FFE01A-565D-4F0B-BC7E-83C067993220@gazagnaire.org>
Message-ID: <4281584.9ldON5i8mT@agaric>

> > Which of these do you think is most important ? Have I forgotten anything ?
> 
> yes: we need more colors and more camels. And more animated progress bars too.

Count on me :D

From roberto at dicosmo.org  Mon Feb 23 19:36:05 2015
From: roberto at dicosmo.org (Roberto Di Cosmo)
Date: Mon, 23 Feb 2015 20:36:05 +0100
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <ABCB46D0-899C-443A-9C2C-E1D09E3745C5@recoil.org>
References: <1709176.A7TcrPyoj4@agaric>
 <ABCB46D0-899C-443A-9C2C-E1D09E3745C5@recoil.org>
Message-ID: <20150223193605.GC31077@traveler>

Hmmm... a word of warning on all this, though: the list of files installed by a
package _may_ depend on the particular choice of other packages (and versions of
packages) present in the system at build time.

This is not a problem for distributions like Debian/RedHat/OpenSuse etc. because
the build is done only once to produce a binary package, that is then installed
by all users.

Opam is not working as a standard GNU/Linux distribution right now: it is
not binary based, and it has no notion of "release" (all version are there at
once!), so the intuition coming from other environments we are used to may be
misleading... the "list of installed files" may not be well defined in general.

--
Roberto



On Sat, Feb 21, 2015 at 08:24:00AM +0000, Anil Madhavapeddy wrote:
> > * Tracking of files installed by packages. While unrelated to repo signing, this might have some security implications, so we might want to bring it in.
> <...>
> - Registering the files that are installed is going to be quite a large
undertaking within the repository, but also makes eventual binary distributions much easier. 


From louis.gesbert at ocamlpro.com  Tue Feb 24 01:06:33 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Tue, 24 Feb 2015 10:06:33 +0900
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <20150223193605.GC31077@traveler>
References: <1709176.A7TcrPyoj4@agaric>
 <ABCB46D0-899C-443A-9C2C-E1D09E3745C5@recoil.org>
 <20150223193605.GC31077@traveler>
Message-ID: <2120222.tjS6U7p4tx@agaric>

Indeed, the obvious case being the consequences of e.g. the variable `ocaml-native` on the presence and installation of .cmx etc. files. All depopts potentially have an effect on installed files, which may propagate along the reverse dependencies, so computing all possible combinations doesn't seem realistic -- that's mostly why I wrote "binary repo (_with some limitations_)".

But without being too ambitious, we could already:
* compute the diff of files as they are installed on the user system (assuming, for now, that files are only installed within the prefix...)
* use a similar trick to generate .install files and push towards a wider use within the repository. Given the right tools, packagers should be able to do this.

Each of these makes the `remove:` field unneeded (and it's the one most likely to contain `rm -rf`s that could go wild)

> - Roberto Di Cosmo, 23/02/2015 20:36 -
> Hmmm... a word of warning on all this, though: the list of files installed by a
> package _may_ depend on the particular choice of other packages (and versions of
> packages) present in the system at build time.
> 
> This is not a problem for distributions like Debian/RedHat/OpenSuse etc. because
> the build is done only once to produce a binary package, that is then installed
> by all users.
> 
> Opam is not working as a standard GNU/Linux distribution right now: it is
> not binary based, and it has no notion of "release" (all version are there at
> once!), so the intuition coming from other environments we are used to may be
> misleading... the "list of installed files" may not be well defined in general.
> 
> --
> Roberto
> 
> 
> 
> On Sat, Feb 21, 2015 at 08:24:00AM +0000, Anil Madhavapeddy wrote:
> > > * Tracking of files installed by packages. While unrelated to repo signing, this might have some security implications, so we might want to bring it in.
> > <...>
> > - Registering the files that are installed is going to be quite a large
> undertaking within the repository, but also makes eventual binary distributions much easier. 
> 
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel

From roberto at dicosmo.org  Tue Feb 24 07:28:46 2015
From: roberto at dicosmo.org (Roberto Di Cosmo)
Date: Tue, 24 Feb 2015 08:28:46 +0100
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <3cc7fc8aca8b1af4720aab969765e486@whitequark.org>
References: <1709176.A7TcrPyoj4@agaric>
 <ABCB46D0-899C-443A-9C2C-E1D09E3745C5@recoil.org>
 <2524731.qnNM7Xpy0S@agaric> <20150223085029.GA30440@traveler>
 <E51C5B015DBD1348A1D85763337FB6D9E9938F53@Remus.metastack.local>
 <3cc7fc8aca8b1af4720aab969765e486@whitequark.org>
Message-ID: <20150224072846.GA28769@traveler>

Thanks a lot, Peter, that's precious information (even if
unfortunately the result is not what we would like...)

So it seems that on OS X one should stick to the LD_PRELOAD
trick, which is not perfect, but it's much better than nothing

On Mon, Feb 23, 2015 at 12:54:22PM +0300, Peter Zotov wrote:
> Roberto Di Cosmo wrote:
> >What I do not know is whether something similar is available for *BSD, and
> >even less for Windows.
> 
> I have spent an extended amount of time on this issue in OS X.
> Plain and simple, it is not possible to intercept syscalls on XNU.
> The ptrace API does not implement PTRACE_SYSCALL, and the equivalent
> Mach API, task_set_emulation, has not ever been implemented.
> I've looked into the XNU sources too and there is simply no codepath
> that performs what you need.
> 
> Forget about this kind of user-space sandboxing on OS X.
> 
> However, OS X provides an explicit sandboxing mechanism since 10.5.
> I don't think it will work for opam either:
> 
> The app sandbox container directory has the following characteristics:
> It is located at a system-defined path, within the user?s home directory.
> The container is in a hidden location, and so users do not interact with it
> directly.
> 
> (from https://developer.apple.com/library/mac/documentation/Security/Conceptual/AppSandboxDesignGuide/AppSandboxInDepth/AppSandboxInDepth.html#//apple_ref/doc/uid/TP40011183-CH3-SW6)
> 
> -- 
> Peter Zotov

-- 
Roberto Di Cosmo
 
------------------------------------------------------------------
Professeur               En delegation a l'INRIA
PPS                      E-mail: roberto at dicosmo.org
Universite Paris Diderot WWW  : http://www.dicosmo.org
Case 7014                Tel  : ++33-(0)1-57 27 92 20
5, Rue Thomas Mann       
F-75205 Paris Cedex 13   Identica: http://identi.ca/rdicosmo
FRANCE.                  Twitter: http://twitter.com/rdicosmo
------------------------------------------------------------------
Attachments:
MIME accepted, Word deprecated
      http://www.gnu.org/philosophy/no-word-attachments.html
------------------------------------------------------------------
Office location:
 
Bureau 3020 (3rd floor)
Batiment Sophie Germain
Avenue de France
Metro Bibliotheque Francois Mitterrand, ligne 14/RER C
-----------------------------------------------------------------
GPG fingerprint 2931 20CE 3A5A 5390 98EC 8BFC FCCA C3BE 39CB 12D3                        

From roberto at dicosmo.org  Tue Feb 24 07:36:35 2015
From: roberto at dicosmo.org (Roberto Di Cosmo)
Date: Tue, 24 Feb 2015 08:36:35 +0100
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <E51C5B015DBD1348A1D85763337FB6D9E9938F53@Remus.metastack.local>
References: <1709176.A7TcrPyoj4@agaric>
 <ABCB46D0-899C-443A-9C2C-E1D09E3745C5@recoil.org>
 <2524731.qnNM7Xpy0S@agaric> <20150223085029.GA30440@traveler>
 <E51C5B015DBD1348A1D85763337FB6D9E9938F53@Remus.metastack.local>
Message-ID: <CAJBwKuXJ78tdPJETTTOaCz3OFskaHMkDD5kBfc_kcKvg4eYUMQ@mail.gmail.com>

Thanks David, this seems quite a useful app for people on Windows, but I
did not find out whether it can be used as a console command: the
documentation seems to imply that one needs to run its GUI, which is not
gonna work for Opam...

Maybe also on Windows we should stick to LD_PRELOAD, but I never tried that
in practice... I wonder whether it will work with the cygwin/mingw
toolchain.

2015-02-23 10:09 GMT+01:00 David Allsopp <david.allsopp at metastack.com>:

> Roberto Di Cosmo wrote:
> > On Mon, Feb 23, 2015 at 10:07:58AM +0900, Louis Gesbert wrote:
> > > That's starting to sound fairly consistent:
> > >
> > > # Secure OPAM itself a bit:
> > >
> > >   * Sandbox the build step: not sure how to do it, but it should be
> > without network access, and only allowed to write to its build dir.
> >
> > This is really *not easy* in the current state of affairs
> >
> >  -> opam calls whatever command is declared in the build:/install: fields
> >
> >  -> this command can do whatever it wants; a sloppy Makefile might very
> > well end
> >     up removing all the user-writeable files on a machine; think of
> > something like
> >
> >     PREFIX=$(HOME)/$(MYNICELOCALVAR)   # ooops ... using a var defined
> > only on the dev machine!
> >
> >     install:
> >         rm -rf $(PREFIX) # clean up dest dir on the dev machine; rm -rf
> > $(HOME) everywhere else!
> >         ....
> >  -> it's easy to pass through the integration test on opam-repository
> too:
> > if
> >     somebody really wants to make bad jokes, one can simply check the
> >     environment to be nice when going through Travis, and wreak havoc
> > elsewhere
> >
> > In the GNU/Linux distribution world, we face a similar challenge, with
> > install scripts being on top run as root; the very stringent QA process
> > enforced by these communities mitigates the problem quite a bit, of
> > course, but it is still there and s*it happens.
> >
> > That's why I was asking for the characteristics of the sandboxing
> > techniques we known. As with security, "sandbox" is a term easy to use,
> > but difficult to achieve.
> >
> > My best bet is _really_ the ptrace approach followed by Mcqueen in
> > http://robot101.net/files/trace.tar.gz as it allows to monitor _all_
> file
> > access even by statically linked binaries, and is able to make a backup
> > copy of modified files (to restore them, if something goes wrong).
> >
> > What I do not know is whether something similar is available for *BSD,
> and
> > even less for Windows.
>
> See http://www.sandboxie.com/ for Windows.
>
>
> David
>



-- 
Roberto Di Cosmo

------------------------------------------------------------------
Professeur               En delegation a l'INRIA
PPS                      E-mail: roberto at dicosmo.org
Universite Paris Diderot WWW  : http://www.dicosmo.org
Case 7014                Tel  : ++33-(0)1-57 27 92 20
5, Rue Thomas Mann
F-75205 Paris Cedex 13   Identica: http://identi.ca/rdicosmo
FRANCE.                  Twitter: http://twitter.com/rdicosmo
------------------------------------------------------------------
Attachments:
MIME accepted, Word deprecated
      http://www.gnu.org/philosophy/no-word-attachments.html
------------------------------------------------------------------
Office location:

Bureau 320 (3rd floor)
Batiment Sophie Germain
Avenue de France
Metro Bibliotheque Francois Mitterrand, ligne 14/RER C
-----------------------------------------------------------------
GPG fingerprint 2931 20CE 3A5A 5390 98EC 8BFC FCCA C3BE 39CB 12D3
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20150224/f458eb82/attachment.html>

From david.allsopp at metastack.com  Tue Feb 24 08:24:30 2015
From: david.allsopp at metastack.com (David Allsopp)
Date: Tue, 24 Feb 2015 08:24:30 +0000
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <CAJBwKuXJ78tdPJETTTOaCz3OFskaHMkDD5kBfc_kcKvg4eYUMQ@mail.gmail.com>
References: <1709176.A7TcrPyoj4@agaric>
 <ABCB46D0-899C-443A-9C2C-E1D09E3745C5@recoil.org>
 <2524731.qnNM7Xpy0S@agaric>	<20150223085029.GA30440@traveler>
 <E51C5B015DBD1348A1D85763337FB6D9E9938F53@Remus.metastack.local>
 <CAJBwKuXJ78tdPJETTTOaCz3OFskaHMkDD5kBfc_kcKvg4eYUMQ@mail.gmail.com>
Message-ID: <E51C5B015DBD1348A1D85763337FB6D9E994078E@Remus.metastack.local>

http://www.sandboxie.com/?StartCommandLine ? it might need some communication trickery to get the output back. However, I?d slightly got the wrong end of the stick: I thought the aim was sandboxing the opam-repository test builds, rather than all client builds!

For ?advanced? tricks like LD_PRELOAD, OPAM needs to remember the MSVC (i.e. non-GNU) ports ? I am reasonably certain that the Microsoft Linker has no equivalent to LD_PRELOAD. The general Windows mechanism is code/DLL injection (which is part of how Sandboxie works)?


David

From: rdicosmo at gmail.com [mailto:rdicosmo at gmail.com] On Behalf Of Roberto Di Cosmo
Sent: 24 February 2015 07:37
To: David Allsopp
Cc: opam-devel at lists.ocaml.org; Louis Gesbert
Subject: Re: [opam-devel] OPAM 1.3 roadmap

Thanks David, this seems quite a useful app for people on Windows, but I did not find out whether it can be used as a console command: the documentation seems to imply that one needs to run its GUI, which is not gonna work for Opam...

Maybe also on Windows we should stick to LD_PRELOAD, but I never tried that in practice... I wonder whether it will work with the cygwin/mingw toolchain.

2015-02-23 10:09 GMT+01:00 David Allsopp <david.allsopp at metastack.com<mailto:david.allsopp at metastack.com>>:
Roberto Di Cosmo wrote:
> On Mon, Feb 23, 2015 at 10:07:58AM +0900, Louis Gesbert wrote:
> > That's starting to sound fairly consistent:
> >
> > # Secure OPAM itself a bit:
> >
> >   * Sandbox the build step: not sure how to do it, but it should be
> without network access, and only allowed to write to its build dir.
>
> This is really *not easy* in the current state of affairs
>
>  -> opam calls whatever command is declared in the build:/install: fields
>
>  -> this command can do whatever it wants; a sloppy Makefile might very
> well end
>     up removing all the user-writeable files on a machine; think of
> something like
>
>     PREFIX=$(HOME)/$(MYNICELOCALVAR)   # ooops ... using a var defined
> only on the dev machine!
>
>     install:
>         rm -rf $(PREFIX) # clean up dest dir on the dev machine; rm -rf
> $(HOME) everywhere else!
>         ....
>  -> it's easy to pass through the integration test on opam-repository too:
> if
>     somebody really wants to make bad jokes, one can simply check the
>     environment to be nice when going through Travis, and wreak havoc
> elsewhere
>
> In the GNU/Linux distribution world, we face a similar challenge, with
> install scripts being on top run as root; the very stringent QA process
> enforced by these communities mitigates the problem quite a bit, of
> course, but it is still there and s*it happens.
>
> That's why I was asking for the characteristics of the sandboxing
> techniques we known. As with security, "sandbox" is a term easy to use,
> but difficult to achieve.
>
> My best bet is _really_ the ptrace approach followed by Mcqueen in
> http://robot101.net/files/trace.tar.gz as it allows to monitor _all_ file
> access even by statically linked binaries, and is able to make a backup
> copy of modified files (to restore them, if something goes wrong).
>
> What I do not know is whether something similar is available for *BSD, and
> even less for Windows.
See http://www.sandboxie.com/ for Windows.


David



--
Roberto Di Cosmo

------------------------------------------------------------------
Professeur               En delegation a l'INRIA
PPS                      E-mail: roberto at dicosmo.org<mailto:roberto at dicosmo.org>
Universite Paris Diderot WWW  : http://www.dicosmo.org
Case 7014                Tel  : ++33-(0)1-57 27 92 20
5, Rue Thomas Mann
F-75205 Paris Cedex 13   Identica: http://identi.ca/rdicosmo
FRANCE.                  Twitter: http://twitter.com/rdicosmo
------------------------------------------------------------------
Attachments:
MIME accepted, Word deprecated
      http://www.gnu.org/philosophy/no-word-attachments.html
------------------------------------------------------------------
Office location:

Bureau 320 (3rd floor)
Batiment Sophie Germain
Avenue de France
Metro Bibliotheque Francois Mitterrand, ligne 14/RER C
-----------------------------------------------------------------
GPG fingerprint 2931 20CE 3A5A 5390 98EC 8BFC FCCA C3BE 39CB 12D3
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20150224/7e1966ed/attachment-0001.html>

From jordojw at gmail.com  Tue Feb 24 08:28:57 2015
From: jordojw at gmail.com (Jordan W)
Date: Tue, 24 Feb 2015 00:28:57 -0800
Subject: [opam-devel] CommonML: An opinionated build/package/develop
	workflow on top of CommonJS
Message-ID: <CAPOA5_58DJ5KYHosNmBJd1CQCpD6GOm-TxJ-s0PgC=odzk_5kA@mail.gmail.com>

Since there is a lot of interest in OCaml from web frontend communities, I
thought it would be useful to imagine what the ideal development flow for
this audience would look like. I know there's a ton of progress being made
on documentation, and build systems, but I thought I would explore the
problem from the perspective of a frontend developer, which means starting
with the tooling that they are familiar with. One common tool is
`CommonJS/package.json`, which is a way to model and organize dependencies
using a single JSON file per package. The npm command line tools allow you
to install files from disk based purely on these package.json files.

I created a proof of concept called CommonML, which lets developers use
their familiar CommonJS workflow with OCaml:
https://github.com/jordwalke/CommonML

I also took used it as an opportunity to explore what can be done when
there are opinionated conventions in place. If you have a predictable
project structure, how can that benefit us? In this case, I created an
automatic docs builder (with nice styling) and also automatically generate
IDE autocomplete support for all your dependencies (and your project's
internal modules).


I hope there is at least something we can take away from it that helps
inform the design of OPAM and related tools.


One nice aspect is that with `CommonJS`, there needn't be an authoritative
package service. Your package.json file can point to arbitrary git URLs if
you like.  (Note: The npm command line tool is *not* the npm package
service - they are made by the same organization but one may be used
without the other). However, this prototype I've built does allow you to
host OCaml code on npm and depend on it.

By far the nicest thing about developing with `CommonJS` is that you don't
have to think about module namespace collisions. There is Just One Way to
namespace modules/packages. This prototype automatically sets up a similar
namespacing convention for OCaml modules. It's not flexible, and you can't
customize it, but it always works. It uses module aliases (thank you to Leo
White for helping me come up with the build conventions).

Another thing I like about the `CommonJS` workflow is that developing
packages locally is virtually the same as developing against remote
dependencies. (`npm link` is much like `opam pin` I'm told). When you `npm
install` dependencies, everything is pulled down into a local
sandbox(node_modules directory) instead of being installed globally by
default. If you want to see what versions your local package is seeing,
just traverse the file system! If you want to reinstall, just delete the
node_modules directory and then `npm install` again. I believe there is a
way to get it to use a global package cache so the node_modules might
contain symlinks to those shared packages - but that's just an
optimization. There isn't any notion of building in `npm`, so there
wouldn't be a build cache I believe.

In my quick prototype, every dependency must be compiled at least once for
the root level project that you are building. This ends up being nice in
cases where the build flags (such as -g) must be in effect for the
compilation of all my dependencies - relying on the build flags that you
*installed* the package with will bite you. But of course, the rebuilding
approach can end up being super slow. Still, the incremental build times
are *totally* reasonable since it does try to do some basic incremental
compilation. I would have used ocamlbuild which probably does a much better
job, but I needed to write my own totally custom operations in order to get
the auto-namespacing (with the help of Leo White). I wasn't sure how to do
that with ocamlbuild, but if I could, I imagine the incremental compilation
times would be way better.

Either way, for most of the work I do (developing libraries with many other
small libraries as dependencies) - I could see a development flow like this
being a worthwhile goal, especially if it makes OCaml much more comfortable
for a *huge* set of developers. `CommonJS` is likely becoming the most
popular development flow. It's just a hacky proof of concept, but it was
fun.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20150224/e6ee5531/attachment.html>

From anil at recoil.org  Tue Feb 24 16:22:31 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Tue, 24 Feb 2015 16:22:31 +0000
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <20150221091603.GA31077@traveler>
References: <1709176.A7TcrPyoj4@agaric>
 <B039BA3F-CBE5-49A4-9B5B-EF77F440BB5E@m4x.org>
 <20150221091603.GA31077@traveler>
Message-ID: <4D01D3A6-7609-411E-9897-B0A3DF360F44@recoil.org>

Hi Roberto, Simon,

Sandboxing mechanisms have come along quite a bit in the last few years.
It's important to separate the two threat models that we want, since their
use can be quite intrusive if made mandatory.  I see two modes of operation:

- A mandatory sandbox in CI testing, where we use it to check that the
  package isn't violating obvious policies such as network downloads
  from within the package, or writing outside of ~/.opam or /tmp.

- Optional sandbox for day-to-day use by end users.  This will catch
  even malicious behaviours, but imposes a rather heavy support burden.

In terms of how to sandbox applications, I know of:

- OpenBSD: I use the built-in systrace system call permissions subsystem
  already with OPAM.  I've uploaded my local policy to GitHub at:
     https://gist.github.com/avsm/8293aa52c6cee772a9cb
  This policy is used by "systrace opam install foo" and pulls up an
  interactive dialog if an application attempts to write outside of
  either ~/.opam or /tmp.
    See: http://www.openbsd.org/cgi-bin/man.cgi?query=systrace
     or: http://www.citi.umich.edu/u/provos/systrace/
  paper: http://www.citi.umich.edu/u/provos/papers/systrace.pdf

- FreeBSD: the latest versions have the Capsicum capability system
  integrated, and the Casper system daemon that grants common operations
  is also being worked on upstream (e.g. for name resolution)
   See: https://www.cl.cam.ac.uk/research/security/capsicum/

- Linux: As always with Linux, there are a myriad of possible solutions.
  I'd discourage the use of LD_PRELOAD based solutions since they don't
  work in several situations reliably (most obviously with static binaries).
  The fakeroot-ng project uses ptrace instead, which is more reliable.

  However, the primary thing we want is to only let the package only
  write into ~/.opam, and so the mount namespace feature (see CLONE_NEWNS)
  may be sufficient for our needs -- a lightweight filesystem container,
  in effect.  David Sheets has done some investigation into this for
  another project we're working on.

- Windows: various, Sandboxie is one solution, but the underlying
  mechanism is the Windows Integrity Mechanism that was introduced in
  Vista:   https://msdn.microsoft.com/en-us/library/bb625964.aspx
  This lets applications drop privileges, and is used by the Chrome
  sandbox (in general, following what Chrome does for sandboxing is a
  good idea, since their needs are a superset of ours).

- MacOS X: The App Sandbox requires code signing, but does almost
  exactly what we need: it gives each app/user a unique directory
  into which they can write files.  All we should need to do is to
  set OPAMROOT to that directory, and everything should just work.
  In practise, this requires some investigation into how the App
  signing infrastructure works, since I've only seen it done for
  bundles and not for CLI tools.

This is a quick off-the-top-of-my-head survey, but I think it's viable
and useful for us to build an `opam sandbox` in the same style as
`opam depext` that attempts to invoke a relevant sandboxing mechanism
depending on the OS.  In the longer term, this will really serve us
well as the package database grows.

I'm less sure about the viability of recording installed files
strictly -- I view thatas an advisory rather than enforcement-based
mechanism.  The reason I like the "make ~/.opam a git store" is that
its possible for applications to write directly into the store as they
do right now, but still let us track changes precisely.  In fact, if
we forbid subshells from writing into `~/.opam/.git`, this would be
a production grade solution that also offers instant-rollback in case
of compilation errors (no more waiting for a full recompilation of 
the original dependencies!).

cheers,
Anil

> On 21 Feb 2015, at 09:16, Roberto Di Cosmo <roberto at dicosmo.org> wrote:
> 
> Anil, Simon, can you provide more details on the sandboxing mechanisms you know of?
> 
> We looked into all this for Mancoosi years ago; the most complete tool
> out there was installwatch (now checkinstall) that hijacks filesystem modifying
> commands using the standard LD_PRELOAD trick and a wrapper for system calls.
> Checkinstall does not alter user priviledges, though, so one sometimes needed
> a combination of fakeroot (that only alter user priviledges) with it.
> 
> The best approach I know of was described in a Master thesis from ... Cambridge
> :-) It was under the supervision of Peter Sewell, and used the ptrace mechanism
> instead of the LD_PRELOAD trick, because LD_PRELOAD is blind to statically
> compiled binaries that have system calls hardcoded, while ptrace gets them all.
> 
> The dissertation is still available today here http://robot101.net/files/diss.ps.gz
> and contains a very nice discussion of the issues related to monitoring and
> rolling back file system changes performed by a command in the Linux system.
> The source code is also available here http://robot101.net/files/trace.tar.gz
> and one can get in touch with Robert Mcqueen that will be delighted to see his
> work being used.
> 
> Since all this is almost 10 years old, I suppose many exciting new ideas, tools
> and approaches surfaced in the meantime, and I'd really like to know more.
> 
> Cheers
> 
> --
> Roberto
> 
> On Sat, Feb 21, 2015 at 09:37:07AM +0100, Simon Cruanes wrote:
>> Sandboxing the build would also be a big security improvement. I think cabal
>> now does it, and signing packages doesn't protect against malicious or buggy
>> packages (see: bumblebee's uninstall target). That also goes hand in hand with
>> file tracking. I don't know how difficult it is, though.
>> 
>> Cheers!
>> 
>> Le 21 f?vrier 2015 05:01:56 UTC+01:00, Louis Gesbert
>> <louis.gesbert at ocamlpro.com> a ?crit :
>> 
>>    With 1.2.1 almost out of the door, time has come to review the roadmap discussed back in December and choose where we'll be going for 1.3. Original mail attached for reference.
>> 
>> 
>>    The topic that is burning hot at the moment is, specially after the Debian Haskell build host has been compromised, security: we have no signing at all at the moment, and we need to improve on this before it becomes a problem. TUF [1] has devised a sane amount of rules for repository management and signing that should make it easier to get it right in OPAM. Hannes has mentionned writing an OCaml implementation for TUF, which could get very helpful.
>> 
>> 
>>    Also of importance is Windows support. It should at least be straighforward and documented to get a basic Cygwin setup working. That goes with adding automated tests (appveyor can now be added in Github alongside Travis). Related is cleaning up external command usage (even if not really justified by a Windows
>>    port only, as David Allsopp pointed out) -- replacing curl calls by cohttp, use ocaml-fileutils...
>> 
>> 
>>    These are the other main features, that'll probably take more time if we are to focus eg. on security:
>> 
>>    * a plugin mechanism with plugins for example for OCaml (for better agnosticity), external dependency handling [2], documentation generation...
>> 
>>    * a 'provides:' field in OPAM files [3]. This is a loose requirement if we want to switch the repository to have OCaml itself in a package (which is already possible, but the system compiler may yet be an issue).
>> 
>>    * More flexible switch handling (multi-switch packages, per-switch remotes, layered switches for cross-compilation...)
>> 
>>    * Tracking of files installed by packages. While unrelated to repo signing, this might have some security implications, so we might want to bring it in.
>> 
>>    * With file tracking, generating a binary repo (with some limitations) could be quite
>>    straight-forward.
>> 
>> 
>>    Which of these do you think is most important ? Have I forgotten anything ?
>> 
>>    Cheers,
>>    Louis
>> 
>> 
>>    [1] http://theupdateframework.com/
>>    [2] https://github.com/ocaml/opam/blob/master/doc/design/depexts-plugins
>>    [3] https://github.com/ocaml/opam/blob/master/doc/design/provides.md
>> 
>>    message suivi
>> 
>>      De :   Louis Gesbert
>>      ? :    opam-devel at lists.ocaml.org
>>    Envoy? : Wed Dec 17 11:07:40 UTC+01:00 2014
>>    Objet :  [opam-devel] OPAM Roadmap -- what next ?
>> 
>>    Hi all,
>> 
>> 
>> 
>>    with some lag after the 1.2 release, I'd like to open some space for a
>>    collective discussion of the priorities for where the energies should go
>>    next. We have mainly 3 directions for improvements: first, portability,
>>    with the main goal of a Windows version. Second, agnosticity, with the goal
>>    to make OPAM more generic, and try and open it to users outside of the
>>    OCaml community (wouldn't OPAM for Haskell be fun ?). Third, there are
>>    always lots of features and improvements that have been asked for, and
>>    would improve the experience of current users.
>> 
>> 
>> 
>>    So here is a summary of what I've gathered. Feel free to add your own.
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>>    ## Portability
>> 
>> 
>> 
>>    - **Rewrite parallel command engine.** / done.
>> 
>> 
>> 
>>    - **Native system manipulation (cp, rm, curl...).**
>> 
>>    These are mostly done through calls to the shell or external programs. It's
>> 
>>    not very pretty but quite pragmatic actually... until we want to run on
>> 
>>    Windows without Cygwin. Anyway, this wouldn't be the end of portability
>> 
>>    issues.
>> 
>> 
>> 
>>    - **Windows support.**
>> 
>>    for OPAM itself to begin with. This should be pretty close.
>> 
>> 
>> 
>>    - **Packages on Windows.**
>> 
>>    Locate common issues and attempt to find generic fixes.
>> 
>> 
>> 
>>    - Allow **direct use of more solvers** or solver servers.
>> 
>> 
>> 
>>    - **Support cross-compilation**
>> 
>>    This is quite an open issue at the moment.
>> 
>> 
>> 
>>    ## Agnosticity
>> 
>> 
>> 
>>    - **Isolate OCaml-specific stuff.**
>> 
>>    E.g. specific opam-file variables. See ocaml-specific.md
>> 
>> 
>> 
>>    - **Separate as plugins**
>> 
>>    To open the gate to OPAM without these plugins, or with other ones
>> 
>> 
>> 
>>    - **Compilers as packages.**
>> 
>>    This should mostly work now, but needs some tests and strengthening. The
>>    main
>> 
>>    thing still to do is to handle the system compiler changes properly ; that
>> 
>>    part should be made more generic anyway (see discussion on hooks)
>> 
>> 
>> 
>>    ## Features
>> 
>> 
>> 
>>    - A **provides** field. Generally useful, but particulary so with
>> 
>>    compilers-as-packages
>> 
>> 
>> 
>>    - Releasing the **"features" field** for easier package configuration
>> 
>> 
>> 
>>    - **Track installed files**
>> 
>> 
>> 
>>    - **Improve security**: just checking md5s is quite light ; package scripts
>>    can
>> 
>>    write anywhere
>> 
>> 
>> 
>>    - **OS-specific handling of dependencies** (eg dependencies on packages
>>    from the
>> 
>>    OS) with plugins (#1519)
>> 
>> 
>> 
>>    - Specify and implement **hooks**
>> 
>> 
>> 
>>    - Find a nicer way to **share dev repos** / undoable "pinning sources"
>> 
>> 
>> 
>>    - **Per-switch remotes**
>> 
>> 
>> 
>>    - **Multi-switch packages**
>> 
>> 
>> 
>>    - Support for (automatic generation of) **binary packages**
>> 
>> 
>> 
>>    - Nicer **ocamlfind interaction**
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>>    Cheers,
>> 
>>    Louis Gesbert
>> 
>>    ???????????????????????????????????????????????????????????????????????????
>> 
>>    opam-devel mailing list
>>    opam-devel at lists.ocaml.org
>>    http://lists.ocaml.org/listinfo/opam-devel
>> 
>>    ???????????????????????????????????????????????????????????????????????????
>> 
>>    opam-devel mailing list
>>    opam-devel at lists.ocaml.org
>>    http://lists.ocaml.org/listinfo/opam-devel
>> 
>> 
>> --
>> Simon
> 
>> _______________________________________________
>> opam-devel mailing list
>> opam-devel at lists.ocaml.org
>> http://lists.ocaml.org/listinfo/opam-devel
> 
> 
> -- 
> Roberto Di Cosmo
> 
> ------------------------------------------------------------------
> Professeur               En delegation a l'INRIA
> PPS                      E-mail: roberto at dicosmo.org
> Universite Paris Diderot WWW  : http://www.dicosmo.org
> Case 7014                Tel  : ++33-(0)1-57 27 92 20
> 5, Rue Thomas Mann       
> F-75205 Paris Cedex 13   Identica: http://identi.ca/rdicosmo
> FRANCE.                  Twitter: http://twitter.com/rdicosmo
> ------------------------------------------------------------------
> Attachments:
> MIME accepted, Word deprecated
>      http://www.gnu.org/philosophy/no-word-attachments.html
> ------------------------------------------------------------------
> Office location:
> 
> Bureau 3020 (3rd floor)
> Batiment Sophie Germain
> Avenue de France
> Metro Bibliotheque Francois Mitterrand, ligne 14/RER C
> -----------------------------------------------------------------
> GPG fingerprint 2931 20CE 3A5A 5390 98EC 8BFC FCCA C3BE 39CB 12D3                        
> 


From anil at recoil.org  Tue Feb 24 16:25:01 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Tue, 24 Feb 2015 16:25:01 +0000
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <3cc7fc8aca8b1af4720aab969765e486@whitequark.org>
References: <1709176.A7TcrPyoj4@agaric>
 <ABCB46D0-899C-443A-9C2C-E1D09E3745C5@recoil.org> <2524731.qnNM7Xpy0S@agaric>
 <20150223085029.GA30440@traveler>
 <E51C5B015DBD1348A1D85763337FB6D9E9938F53@Remus.metastack.local>
 <3cc7fc8aca8b1af4720aab969765e486@whitequark.org>
Message-ID: <F0C114EC-E798-4FE7-916C-AA7D8FCEB826@recoil.org>

On 23 Feb 2015, at 09:54, Peter Zotov <whitequark at whitequark.org> wrote:
> 
> Roberto Di Cosmo wrote:
>> What I do not know is whether something similar is available for *BSD, and
>> even less for Windows.
> 
> I have spent an extended amount of time on this issue in OS X.
> Plain and simple, it is not possible to intercept syscalls on XNU.
> The ptrace API does not implement PTRACE_SYSCALL, and the equivalent
> Mach API, task_set_emulation, has not ever been implemented.
> I've looked into the XNU sources too and there is simply no codepath
> that performs what you need.
> 
> Forget about this kind of user-space sandboxing on OS X.

The other issue with ptrace-based sandboxing is just how slow it
is due to all the context switching that's imposed.  I don't think
it would fly for day-to-day use.

> However, OS X provides an explicit sandboxing mechanism since 10.5.
> I don't think it will work for opam either:
> 
> The app sandbox container directory has the following characteristics:
> It is located at a system-defined path, within the user?s home directory.
> The container is in a hidden location, and so users do not interact with it directly.
> 
> (from https://developer.apple.com/library/mac/documentation/Security/Conceptual/AppSandboxDesignGuide/AppSandboxInDepth/AppSandboxInDepth.html#//apple_ref/doc/uid/TP40011183-CH3-SW6)

I think this could be made to work, but it all depends on how viable
it is to sign the opam binary with the right entitlements.  If anyone
who has a Mac App store account can experiment with this with a toy
binary and report back, that would be most useful...

Maybe we should rewrite OPAM in Swift, Louis? :-)

-anil

From roberto at dicosmo.org  Wed Feb 25 10:48:37 2015
From: roberto at dicosmo.org (Roberto Di Cosmo)
Date: Wed, 25 Feb 2015 11:48:37 +0100
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <4D01D3A6-7609-411E-9897-B0A3DF360F44@recoil.org>
References: <1709176.A7TcrPyoj4@agaric>
 <B039BA3F-CBE5-49A4-9B5B-EF77F440BB5E@m4x.org>
 <20150221091603.GA31077@traveler>
 <4D01D3A6-7609-411E-9897-B0A3DF360F44@recoil.org>
Message-ID: <20150225104837.GA10656@traveler>

Many thanks Anil, that's precious information:
this is clearly another very OS-specific feature!

The question is whether we want to add these policies and tools

 - outside opam (pro: no changes to opam, cons: opam has no control)
 - or make opam aware of them (pro: opam gets control, cons: various changes to opam)

For CI testing, the "outside" approach seems to be quite sufficient.

For day to day use, though, I am not sure... 

On Tue, Feb 24, 2015 at 04:22:31PM +0000, Anil Madhavapeddy wrote:
> Hi Roberto, Simon,
> 
> Sandboxing mechanisms have come along quite a bit in the last few years.
> It's important to separate the two threat models that we want, since their
> use can be quite intrusive if made mandatory.  I see two modes of operation:
> 
> - A mandatory sandbox in CI testing, where we use it to check that the
>   package isn't violating obvious policies such as network downloads
>   from within the package, or writing outside of ~/.opam or /tmp.
> 
> - Optional sandbox for day-to-day use by end users.  This will catch
>   even malicious behaviours, but imposes a rather heavy support burden.
> 
> In terms of how to sandbox applications, I know of:
> 
> - OpenBSD: I use the built-in systrace system call permissions subsystem
>   already with OPAM.  I've uploaded my local policy to GitHub at:
>      https://gist.github.com/avsm/8293aa52c6cee772a9cb
>   This policy is used by "systrace opam install foo" and pulls up an
>   interactive dialog if an application attempts to write outside of
>   either ~/.opam or /tmp.
>     See: http://www.openbsd.org/cgi-bin/man.cgi?query=systrace
>      or: http://www.citi.umich.edu/u/provos/systrace/
>   paper: http://www.citi.umich.edu/u/provos/papers/systrace.pdf
> 
> - FreeBSD: the latest versions have the Capsicum capability system
>   integrated, and the Casper system daemon that grants common operations
>   is also being worked on upstream (e.g. for name resolution)
>    See: https://www.cl.cam.ac.uk/research/security/capsicum/
> 
> - Linux: As always with Linux, there are a myriad of possible solutions.
>   I'd discourage the use of LD_PRELOAD based solutions since they don't
>   work in several situations reliably (most obviously with static binaries).
>   The fakeroot-ng project uses ptrace instead, which is more reliable.
> 
>   However, the primary thing we want is to only let the package only
>   write into ~/.opam, and so the mount namespace feature (see CLONE_NEWNS)
>   may be sufficient for our needs -- a lightweight filesystem container,
>   in effect.  David Sheets has done some investigation into this for
>   another project we're working on.
> 
> - Windows: various, Sandboxie is one solution, but the underlying
>   mechanism is the Windows Integrity Mechanism that was introduced in
>   Vista:   https://msdn.microsoft.com/en-us/library/bb625964.aspx
>   This lets applications drop privileges, and is used by the Chrome
>   sandbox (in general, following what Chrome does for sandboxing is a
>   good idea, since their needs are a superset of ours).
> 
> - MacOS X: The App Sandbox requires code signing, but does almost
>   exactly what we need: it gives each app/user a unique directory
>   into which they can write files.  All we should need to do is to
>   set OPAMROOT to that directory, and everything should just work.
>   In practise, this requires some investigation into how the App
>   signing infrastructure works, since I've only seen it done for
>   bundles and not for CLI tools.
> 
> This is a quick off-the-top-of-my-head survey, but I think it's viable
> and useful for us to build an `opam sandbox` in the same style as
> `opam depext` that attempts to invoke a relevant sandboxing mechanism
> depending on the OS.  In the longer term, this will really serve us
> well as the package database grows.
> 
> I'm less sure about the viability of recording installed files
> strictly -- I view thatas an advisory rather than enforcement-based
> mechanism.  The reason I like the "make ~/.opam a git store" is that
> its possible for applications to write directly into the store as they
> do right now, but still let us track changes precisely.  In fact, if
> we forbid subshells from writing into `~/.opam/.git`, this would be
> a production grade solution that also offers instant-rollback in case
> of compilation errors (no more waiting for a full recompilation of 
> the original dependencies!).
> 
> cheers,
> Anil
> 
> > On 21 Feb 2015, at 09:16, Roberto Di Cosmo <roberto at dicosmo.org> wrote:
> > 
> > Anil, Simon, can you provide more details on the sandboxing mechanisms you know of?
> > 
> > We looked into all this for Mancoosi years ago; the most complete tool
> > out there was installwatch (now checkinstall) that hijacks filesystem modifying
> > commands using the standard LD_PRELOAD trick and a wrapper for system calls.
> > Checkinstall does not alter user priviledges, though, so one sometimes needed
> > a combination of fakeroot (that only alter user priviledges) with it.
> > 
> > The best approach I know of was described in a Master thesis from ... Cambridge
> > :-) It was under the supervision of Peter Sewell, and used the ptrace mechanism
> > instead of the LD_PRELOAD trick, because LD_PRELOAD is blind to statically
> > compiled binaries that have system calls hardcoded, while ptrace gets them all.
> > 
> > The dissertation is still available today here http://robot101.net/files/diss.ps.gz
> > and contains a very nice discussion of the issues related to monitoring and
> > rolling back file system changes performed by a command in the Linux system.
> > The source code is also available here http://robot101.net/files/trace.tar.gz
> > and one can get in touch with Robert Mcqueen that will be delighted to see his
> > work being used.
> > 
> > Since all this is almost 10 years old, I suppose many exciting new ideas, tools
> > and approaches surfaced in the meantime, and I'd really like to know more.
> > 
> > Cheers
> > 
> > --
> > Roberto
> > 
> > On Sat, Feb 21, 2015 at 09:37:07AM +0100, Simon Cruanes wrote:
> >> Sandboxing the build would also be a big security improvement. I think cabal
> >> now does it, and signing packages doesn't protect against malicious or buggy
> >> packages (see: bumblebee's uninstall target). That also goes hand in hand with
> >> file tracking. I don't know how difficult it is, though.
> >> 
> >> Cheers!
> >> 
> >> Le 21 f?vrier 2015 05:01:56 UTC+01:00, Louis Gesbert
> >> <louis.gesbert at ocamlpro.com> a ?crit :
> >> 
> >>    With 1.2.1 almost out of the door, time has come to review the roadmap discussed back in December and choose where we'll be going for 1.3. Original mail attached for reference.
> >> 
> >> 
> >>    The topic that is burning hot at the moment is, specially after the Debian Haskell build host has been compromised, security: we have no signing at all at the moment, and we need to improve on this before it becomes a problem. TUF [1] has devised a sane amount of rules for repository management and signing that should make it easier to get it right in OPAM. Hannes has mentionned writing an OCaml implementation for TUF, which could get very helpful.
> >> 
> >> 
> >>    Also of importance is Windows support. It should at least be straighforward and documented to get a basic Cygwin setup working. That goes with adding automated tests (appveyor can now be added in Github alongside Travis). Related is cleaning up external command usage (even if not really justified by a Windows
> >>    port only, as David Allsopp pointed out) -- replacing curl calls by cohttp, use ocaml-fileutils...
> >> 
> >> 
> >>    These are the other main features, that'll probably take more time if we are to focus eg. on security:
> >> 
> >>    * a plugin mechanism with plugins for example for OCaml (for better agnosticity), external dependency handling [2], documentation generation...
> >> 
> >>    * a 'provides:' field in OPAM files [3]. This is a loose requirement if we want to switch the repository to have OCaml itself in a package (which is already possible, but the system compiler may yet be an issue).
> >> 
> >>    * More flexible switch handling (multi-switch packages, per-switch remotes, layered switches for cross-compilation...)
> >> 
> >>    * Tracking of files installed by packages. While unrelated to repo signing, this might have some security implications, so we might want to bring it in.
> >> 
> >>    * With file tracking, generating a binary repo (with some limitations) could be quite
> >>    straight-forward.
> >> 
> >> 
> >>    Which of these do you think is most important ? Have I forgotten anything ?
> >> 
> >>    Cheers,
> >>    Louis
> >> 
> >> 
> >>    [1] http://theupdateframework.com/
> >>    [2] https://github.com/ocaml/opam/blob/master/doc/design/depexts-plugins
> >>    [3] https://github.com/ocaml/opam/blob/master/doc/design/provides.md
> >> 
> >>    message suivi
> >> 
> >>      De :   Louis Gesbert
> >>      ? :    opam-devel at lists.ocaml.org
> >>    Envoy? : Wed Dec 17 11:07:40 UTC+01:00 2014
> >>    Objet :  [opam-devel] OPAM Roadmap -- what next ?
> >> 
> >>    Hi all,
> >> 
> >> 
> >> 
> >>    with some lag after the 1.2 release, I'd like to open some space for a
> >>    collective discussion of the priorities for where the energies should go
> >>    next. We have mainly 3 directions for improvements: first, portability,
> >>    with the main goal of a Windows version. Second, agnosticity, with the goal
> >>    to make OPAM more generic, and try and open it to users outside of the
> >>    OCaml community (wouldn't OPAM for Haskell be fun ?). Third, there are
> >>    always lots of features and improvements that have been asked for, and
> >>    would improve the experience of current users.
> >> 
> >> 
> >> 
> >>    So here is a summary of what I've gathered. Feel free to add your own.
> >> 
> >> 
> >> 
> >> 
> >> 
> >> 
> >> 
> >>    ## Portability
> >> 
> >> 
> >> 
> >>    - **Rewrite parallel command engine.** / done.
> >> 
> >> 
> >> 
> >>    - **Native system manipulation (cp, rm, curl...).**
> >> 
> >>    These are mostly done through calls to the shell or external programs. It's
> >> 
> >>    not very pretty but quite pragmatic actually... until we want to run on
> >> 
> >>    Windows without Cygwin. Anyway, this wouldn't be the end of portability
> >> 
> >>    issues.
> >> 
> >> 
> >> 
> >>    - **Windows support.**
> >> 
> >>    for OPAM itself to begin with. This should be pretty close.
> >> 
> >> 
> >> 
> >>    - **Packages on Windows.**
> >> 
> >>    Locate common issues and attempt to find generic fixes.
> >> 
> >> 
> >> 
> >>    - Allow **direct use of more solvers** or solver servers.
> >> 
> >> 
> >> 
> >>    - **Support cross-compilation**
> >> 
> >>    This is quite an open issue at the moment.
> >> 
> >> 
> >> 
> >>    ## Agnosticity
> >> 
> >> 
> >> 
> >>    - **Isolate OCaml-specific stuff.**
> >> 
> >>    E.g. specific opam-file variables. See ocaml-specific.md
> >> 
> >> 
> >> 
> >>    - **Separate as plugins**
> >> 
> >>    To open the gate to OPAM without these plugins, or with other ones
> >> 
> >> 
> >> 
> >>    - **Compilers as packages.**
> >> 
> >>    This should mostly work now, but needs some tests and strengthening. The
> >>    main
> >> 
> >>    thing still to do is to handle the system compiler changes properly ; that
> >> 
> >>    part should be made more generic anyway (see discussion on hooks)
> >> 
> >> 
> >> 
> >>    ## Features
> >> 
> >> 
> >> 
> >>    - A **provides** field. Generally useful, but particulary so with
> >> 
> >>    compilers-as-packages
> >> 
> >> 
> >> 
> >>    - Releasing the **"features" field** for easier package configuration
> >> 
> >> 
> >> 
> >>    - **Track installed files**
> >> 
> >> 
> >> 
> >>    - **Improve security**: just checking md5s is quite light ; package scripts
> >>    can
> >> 
> >>    write anywhere
> >> 
> >> 
> >> 
> >>    - **OS-specific handling of dependencies** (eg dependencies on packages
> >>    from the
> >> 
> >>    OS) with plugins (#1519)
> >> 
> >> 
> >> 
> >>    - Specify and implement **hooks**
> >> 
> >> 
> >> 
> >>    - Find a nicer way to **share dev repos** / undoable "pinning sources"
> >> 
> >> 
> >> 
> >>    - **Per-switch remotes**
> >> 
> >> 
> >> 
> >>    - **Multi-switch packages**
> >> 
> >> 
> >> 
> >>    - Support for (automatic generation of) **binary packages**
> >> 
> >> 
> >> 
> >>    - Nicer **ocamlfind interaction**
> >> 
> >> 
> >> 
> >> 
> >> 
> >> 
> >> 
> >>    Cheers,
> >> 
> >>    Louis Gesbert
> >> 
> >>    ???????????????????????????????????????????????????????????????????????????
> >> 
> >>    opam-devel mailing list
> >>    opam-devel at lists.ocaml.org
> >>    http://lists.ocaml.org/listinfo/opam-devel
> >> 
> >>    ???????????????????????????????????????????????????????????????????????????
> >> 
> >>    opam-devel mailing list
> >>    opam-devel at lists.ocaml.org
> >>    http://lists.ocaml.org/listinfo/opam-devel
> >> 
> >> 
> >> --
> >> Simon
> > 
> >> _______________________________________________
> >> opam-devel mailing list
> >> opam-devel at lists.ocaml.org
> >> http://lists.ocaml.org/listinfo/opam-devel
> > 
> > 
> > -- 
> > Roberto Di Cosmo
> > 
> > ------------------------------------------------------------------
> > Professeur               En delegation a l'INRIA
> > PPS                      E-mail: roberto at dicosmo.org
> > Universite Paris Diderot WWW  : http://www.dicosmo.org
> > Case 7014                Tel  : ++33-(0)1-57 27 92 20
> > 5, Rue Thomas Mann       
> > F-75205 Paris Cedex 13   Identica: http://identi.ca/rdicosmo
> > FRANCE.                  Twitter: http://twitter.com/rdicosmo
> > ------------------------------------------------------------------
> > Attachments:
> > MIME accepted, Word deprecated
> >      http://www.gnu.org/philosophy/no-word-attachments.html
> > ------------------------------------------------------------------
> > Office location:
> > 
> > Bureau 3020 (3rd floor)
> > Batiment Sophie Germain
> > Avenue de France
> > Metro Bibliotheque Francois Mitterrand, ligne 14/RER C
> > -----------------------------------------------------------------
> > GPG fingerprint 2931 20CE 3A5A 5390 98EC 8BFC FCCA C3BE 39CB 12D3                        
> > 
> 

-- 
Roberto Di Cosmo
 
------------------------------------------------------------------
Professeur               En delegation a l'INRIA
PPS                      E-mail: roberto at dicosmo.org
Universite Paris Diderot WWW  : http://www.dicosmo.org
Case 7014                Tel  : ++33-(0)1-57 27 92 20
5, Rue Thomas Mann       
F-75205 Paris Cedex 13   Identica: http://identi.ca/rdicosmo
FRANCE.                  Twitter: http://twitter.com/rdicosmo
------------------------------------------------------------------
Attachments:
MIME accepted, Word deprecated
      http://www.gnu.org/philosophy/no-word-attachments.html
------------------------------------------------------------------
Office location:
 
Bureau 3020 (3rd floor)
Batiment Sophie Germain
Avenue de France
Metro Bibliotheque Francois Mitterrand, ligne 14/RER C
-----------------------------------------------------------------
GPG fingerprint 2931 20CE 3A5A 5390 98EC 8BFC FCCA C3BE 39CB 12D3                        

From anil at recoil.org  Wed Feb 25 10:54:11 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Wed, 25 Feb 2015 10:54:11 +0000
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <20150225104837.GA10656@traveler>
References: <1709176.A7TcrPyoj4@agaric>
 <B039BA3F-CBE5-49A4-9B5B-EF77F440BB5E@m4x.org>
 <20150221091603.GA31077@traveler>
 <4D01D3A6-7609-411E-9897-B0A3DF360F44@recoil.org>
 <20150225104837.GA10656@traveler>
Message-ID: <3B5DD7A3-DFF5-488D-9798-19B4159082B0@recoil.org>

I'm also not sure how viable activating it for day-to-day testing except
by advanced users is.  However, we can at least get the infrastructure in
place for CI, which is necessary before we need to decide that.

I forgot one point in my previous mail: why this needs to be in OPAM instead
of just an external `sandbox` binary.  We don't actually want to sandbox
OPAM itself (which we trust!), but rather the packages it invokes.  In my
OpenBSD sandbox, I am constraining OPAM and all its future subshells. 
Instead, I would prefer to have OPAM invoke an external sandbox only when
it is doing a build, with sufficient arguments to let it know which dirs
are ok to write into.

This would let a package only write into the specific subdirectory relevant
to the current switch.  This actually bites me quite often with pinning,
since a stale OASIS setup.data can cause an installation to write into the
wrong switch if a full clean is not done ahead of time.  It also lets us
sandbox network access of builds independently of OPAM, which is needed to
"unplug" an OPAM package build.

cheers,
Anil

> On 25 Feb 2015, at 10:48, Roberto Di Cosmo <roberto at dicosmo.org> wrote:
> 
> Many thanks Anil, that's precious information:
> this is clearly another very OS-specific feature!
> 
> The question is whether we want to add these policies and tools
> 
> - outside opam (pro: no changes to opam, cons: opam has no control)
> - or make opam aware of them (pro: opam gets control, cons: various changes to opam)
> 
> For CI testing, the "outside" approach seems to be quite sufficient.
> 
> For day to day use, though, I am not sure... 
> 
> On Tue, Feb 24, 2015 at 04:22:31PM +0000, Anil Madhavapeddy wrote:
>> Hi Roberto, Simon,
>> 
>> Sandboxing mechanisms have come along quite a bit in the last few years.
>> It's important to separate the two threat models that we want, since their
>> use can be quite intrusive if made mandatory.  I see two modes of operation:
>> 
>> - A mandatory sandbox in CI testing, where we use it to check that the
>>  package isn't violating obvious policies such as network downloads
>>  from within the package, or writing outside of ~/.opam or /tmp.
>> 
>> - Optional sandbox for day-to-day use by end users.  This will catch
>>  even malicious behaviours, but imposes a rather heavy support burden.
>> 
>> In terms of how to sandbox applications, I know of:
>> 
>> - OpenBSD: I use the built-in systrace system call permissions subsystem
>>  already with OPAM.  I've uploaded my local policy to GitHub at:
>>     https://gist.github.com/avsm/8293aa52c6cee772a9cb
>>  This policy is used by "systrace opam install foo" and pulls up an
>>  interactive dialog if an application attempts to write outside of
>>  either ~/.opam or /tmp.
>>    See: http://www.openbsd.org/cgi-bin/man.cgi?query=systrace
>>     or: http://www.citi.umich.edu/u/provos/systrace/
>>  paper: http://www.citi.umich.edu/u/provos/papers/systrace.pdf
>> 
>> - FreeBSD: the latest versions have the Capsicum capability system
>>  integrated, and the Casper system daemon that grants common operations
>>  is also being worked on upstream (e.g. for name resolution)
>>   See: https://www.cl.cam.ac.uk/research/security/capsicum/
>> 
>> - Linux: As always with Linux, there are a myriad of possible solutions.
>>  I'd discourage the use of LD_PRELOAD based solutions since they don't
>>  work in several situations reliably (most obviously with static binaries).
>>  The fakeroot-ng project uses ptrace instead, which is more reliable.
>> 
>>  However, the primary thing we want is to only let the package only
>>  write into ~/.opam, and so the mount namespace feature (see CLONE_NEWNS)
>>  may be sufficient for our needs -- a lightweight filesystem container,
>>  in effect.  David Sheets has done some investigation into this for
>>  another project we're working on.
>> 
>> - Windows: various, Sandboxie is one solution, but the underlying
>>  mechanism is the Windows Integrity Mechanism that was introduced in
>>  Vista:   https://msdn.microsoft.com/en-us/library/bb625964.aspx
>>  This lets applications drop privileges, and is used by the Chrome
>>  sandbox (in general, following what Chrome does for sandboxing is a
>>  good idea, since their needs are a superset of ours).
>> 
>> - MacOS X: The App Sandbox requires code signing, but does almost
>>  exactly what we need: it gives each app/user a unique directory
>>  into which they can write files.  All we should need to do is to
>>  set OPAMROOT to that directory, and everything should just work.
>>  In practise, this requires some investigation into how the App
>>  signing infrastructure works, since I've only seen it done for
>>  bundles and not for CLI tools.
>> 
>> This is a quick off-the-top-of-my-head survey, but I think it's viable
>> and useful for us to build an `opam sandbox` in the same style as
>> `opam depext` that attempts to invoke a relevant sandboxing mechanism
>> depending on the OS.  In the longer term, this will really serve us
>> well as the package database grows.
>> 
>> I'm less sure about the viability of recording installed files
>> strictly -- I view thatas an advisory rather than enforcement-based
>> mechanism.  The reason I like the "make ~/.opam a git store" is that
>> its possible for applications to write directly into the store as they
>> do right now, but still let us track changes precisely.  In fact, if
>> we forbid subshells from writing into `~/.opam/.git`, this would be
>> a production grade solution that also offers instant-rollback in case
>> of compilation errors (no more waiting for a full recompilation of 
>> the original dependencies!).
>> 
>> cheers,
>> Anil
>> 
>>> On 21 Feb 2015, at 09:16, Roberto Di Cosmo <roberto at dicosmo.org> wrote:
>>> 
>>> Anil, Simon, can you provide more details on the sandboxing mechanisms you know of?
>>> 
>>> We looked into all this for Mancoosi years ago; the most complete tool
>>> out there was installwatch (now checkinstall) that hijacks filesystem modifying
>>> commands using the standard LD_PRELOAD trick and a wrapper for system calls.
>>> Checkinstall does not alter user priviledges, though, so one sometimes needed
>>> a combination of fakeroot (that only alter user priviledges) with it.
>>> 
>>> The best approach I know of was described in a Master thesis from ... Cambridge
>>> :-) It was under the supervision of Peter Sewell, and used the ptrace mechanism
>>> instead of the LD_PRELOAD trick, because LD_PRELOAD is blind to statically
>>> compiled binaries that have system calls hardcoded, while ptrace gets them all.
>>> 
>>> The dissertation is still available today here http://robot101.net/files/diss.ps.gz
>>> and contains a very nice discussion of the issues related to monitoring and
>>> rolling back file system changes performed by a command in the Linux system.
>>> The source code is also available here http://robot101.net/files/trace.tar.gz
>>> and one can get in touch with Robert Mcqueen that will be delighted to see his
>>> work being used.
>>> 
>>> Since all this is almost 10 years old, I suppose many exciting new ideas, tools
>>> and approaches surfaced in the meantime, and I'd really like to know more.
>>> 
>>> Cheers
>>> 
>>> --
>>> Roberto
>>> 
>>> On Sat, Feb 21, 2015 at 09:37:07AM +0100, Simon Cruanes wrote:
>>>> Sandboxing the build would also be a big security improvement. I think cabal
>>>> now does it, and signing packages doesn't protect against malicious or buggy
>>>> packages (see: bumblebee's uninstall target). That also goes hand in hand with
>>>> file tracking. I don't know how difficult it is, though.
>>>> 
>>>> Cheers!
>>>> 
>>>> Le 21 f?vrier 2015 05:01:56 UTC+01:00, Louis Gesbert
>>>> <louis.gesbert at ocamlpro.com> a ?crit :
>>>> 
>>>>   With 1.2.1 almost out of the door, time has come to review the roadmap discussed back in December and choose where we'll be going for 1.3. Original mail attached for reference.
>>>> 
>>>> 
>>>>   The topic that is burning hot at the moment is, specially after the Debian Haskell build host has been compromised, security: we have no signing at all at the moment, and we need to improve on this before it becomes a problem. TUF [1] has devised a sane amount of rules for repository management and signing that should make it easier to get it right in OPAM. Hannes has mentionned writing an OCaml implementation for TUF, which could get very helpful.
>>>> 
>>>> 
>>>>   Also of importance is Windows support. It should at least be straighforward and documented to get a basic Cygwin setup working. That goes with adding automated tests (appveyor can now be added in Github alongside Travis). Related is cleaning up external command usage (even if not really justified by a Windows
>>>>   port only, as David Allsopp pointed out) -- replacing curl calls by cohttp, use ocaml-fileutils...
>>>> 
>>>> 
>>>>   These are the other main features, that'll probably take more time if we are to focus eg. on security:
>>>> 
>>>>   * a plugin mechanism with plugins for example for OCaml (for better agnosticity), external dependency handling [2], documentation generation...
>>>> 
>>>>   * a 'provides:' field in OPAM files [3]. This is a loose requirement if we want to switch the repository to have OCaml itself in a package (which is already possible, but the system compiler may yet be an issue).
>>>> 
>>>>   * More flexible switch handling (multi-switch packages, per-switch remotes, layered switches for cross-compilation...)
>>>> 
>>>>   * Tracking of files installed by packages. While unrelated to repo signing, this might have some security implications, so we might want to bring it in.
>>>> 
>>>>   * With file tracking, generating a binary repo (with some limitations) could be quite
>>>>   straight-forward.
>>>> 
>>>> 
>>>>   Which of these do you think is most important ? Have I forgotten anything ?
>>>> 
>>>>   Cheers,
>>>>   Louis
>>>> 
>>>> 
>>>>   [1] http://theupdateframework.com/
>>>>   [2] https://github.com/ocaml/opam/blob/master/doc/design/depexts-plugins
>>>>   [3] https://github.com/ocaml/opam/blob/master/doc/design/provides.md
>>>> 
>>>>   message suivi
>>>> 
>>>>     De :   Louis Gesbert
>>>>     ? :    opam-devel at lists.ocaml.org
>>>>   Envoy? : Wed Dec 17 11:07:40 UTC+01:00 2014
>>>>   Objet :  [opam-devel] OPAM Roadmap -- what next ?
>>>> 
>>>>   Hi all,
>>>> 
>>>> 
>>>> 
>>>>   with some lag after the 1.2 release, I'd like to open some space for a
>>>>   collective discussion of the priorities for where the energies should go
>>>>   next. We have mainly 3 directions for improvements: first, portability,
>>>>   with the main goal of a Windows version. Second, agnosticity, with the goal
>>>>   to make OPAM more generic, and try and open it to users outside of the
>>>>   OCaml community (wouldn't OPAM for Haskell be fun ?). Third, there are
>>>>   always lots of features and improvements that have been asked for, and
>>>>   would improve the experience of current users.
>>>> 
>>>> 
>>>> 
>>>>   So here is a summary of what I've gathered. Feel free to add your own.
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>>   ## Portability
>>>> 
>>>> 
>>>> 
>>>>   - **Rewrite parallel command engine.** / done.
>>>> 
>>>> 
>>>> 
>>>>   - **Native system manipulation (cp, rm, curl...).**
>>>> 
>>>>   These are mostly done through calls to the shell or external programs. It's
>>>> 
>>>>   not very pretty but quite pragmatic actually... until we want to run on
>>>> 
>>>>   Windows without Cygwin. Anyway, this wouldn't be the end of portability
>>>> 
>>>>   issues.
>>>> 
>>>> 
>>>> 
>>>>   - **Windows support.**
>>>> 
>>>>   for OPAM itself to begin with. This should be pretty close.
>>>> 
>>>> 
>>>> 
>>>>   - **Packages on Windows.**
>>>> 
>>>>   Locate common issues and attempt to find generic fixes.
>>>> 
>>>> 
>>>> 
>>>>   - Allow **direct use of more solvers** or solver servers.
>>>> 
>>>> 
>>>> 
>>>>   - **Support cross-compilation**
>>>> 
>>>>   This is quite an open issue at the moment.
>>>> 
>>>> 
>>>> 
>>>>   ## Agnosticity
>>>> 
>>>> 
>>>> 
>>>>   - **Isolate OCaml-specific stuff.**
>>>> 
>>>>   E.g. specific opam-file variables. See ocaml-specific.md
>>>> 
>>>> 
>>>> 
>>>>   - **Separate as plugins**
>>>> 
>>>>   To open the gate to OPAM without these plugins, or with other ones
>>>> 
>>>> 
>>>> 
>>>>   - **Compilers as packages.**
>>>> 
>>>>   This should mostly work now, but needs some tests and strengthening. The
>>>>   main
>>>> 
>>>>   thing still to do is to handle the system compiler changes properly ; that
>>>> 
>>>>   part should be made more generic anyway (see discussion on hooks)
>>>> 
>>>> 
>>>> 
>>>>   ## Features
>>>> 
>>>> 
>>>> 
>>>>   - A **provides** field. Generally useful, but particulary so with
>>>> 
>>>>   compilers-as-packages
>>>> 
>>>> 
>>>> 
>>>>   - Releasing the **"features" field** for easier package configuration
>>>> 
>>>> 
>>>> 
>>>>   - **Track installed files**
>>>> 
>>>> 
>>>> 
>>>>   - **Improve security**: just checking md5s is quite light ; package scripts
>>>>   can
>>>> 
>>>>   write anywhere
>>>> 
>>>> 
>>>> 
>>>>   - **OS-specific handling of dependencies** (eg dependencies on packages
>>>>   from the
>>>> 
>>>>   OS) with plugins (#1519)
>>>> 
>>>> 
>>>> 
>>>>   - Specify and implement **hooks**
>>>> 
>>>> 
>>>> 
>>>>   - Find a nicer way to **share dev repos** / undoable "pinning sources"
>>>> 
>>>> 
>>>> 
>>>>   - **Per-switch remotes**
>>>> 
>>>> 
>>>> 
>>>>   - **Multi-switch packages**
>>>> 
>>>> 
>>>> 
>>>>   - Support for (automatic generation of) **binary packages**
>>>> 
>>>> 
>>>> 
>>>>   - Nicer **ocamlfind interaction**
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>>   Cheers,
>>>> 
>>>>   Louis Gesbert
>>>> 
>>>>   ???????????????????????????????????????????????????????????????????????????
>>>> 
>>>>   opam-devel mailing list
>>>>   opam-devel at lists.ocaml.org
>>>>   http://lists.ocaml.org/listinfo/opam-devel
>>>> 
>>>>   ???????????????????????????????????????????????????????????????????????????
>>>> 
>>>>   opam-devel mailing list
>>>>   opam-devel at lists.ocaml.org
>>>>   http://lists.ocaml.org/listinfo/opam-devel
>>>> 
>>>> 
>>>> --
>>>> Simon
>>> 
>>>> _______________________________________________
>>>> opam-devel mailing list
>>>> opam-devel at lists.ocaml.org
>>>> http://lists.ocaml.org/listinfo/opam-devel
>>> 
>>> 
>>> -- 
>>> Roberto Di Cosmo
>>> 
>>> ------------------------------------------------------------------
>>> Professeur               En delegation a l'INRIA
>>> PPS                      E-mail: roberto at dicosmo.org
>>> Universite Paris Diderot WWW  : http://www.dicosmo.org
>>> Case 7014                Tel  : ++33-(0)1-57 27 92 20
>>> 5, Rue Thomas Mann       
>>> F-75205 Paris Cedex 13   Identica: http://identi.ca/rdicosmo
>>> FRANCE.                  Twitter: http://twitter.com/rdicosmo
>>> ------------------------------------------------------------------
>>> Attachments:
>>> MIME accepted, Word deprecated
>>>     http://www.gnu.org/philosophy/no-word-attachments.html
>>> ------------------------------------------------------------------
>>> Office location:
>>> 
>>> Bureau 3020 (3rd floor)
>>> Batiment Sophie Germain
>>> Avenue de France
>>> Metro Bibliotheque Francois Mitterrand, ligne 14/RER C
>>> -----------------------------------------------------------------
>>> GPG fingerprint 2931 20CE 3A5A 5390 98EC 8BFC FCCA C3BE 39CB 12D3                        
>>> 
>> 
> 
> -- 
> Roberto Di Cosmo
> 
> ------------------------------------------------------------------
> Professeur               En delegation a l'INRIA
> PPS                      E-mail: roberto at dicosmo.org
> Universite Paris Diderot WWW  : http://www.dicosmo.org
> Case 7014                Tel  : ++33-(0)1-57 27 92 20
> 5, Rue Thomas Mann       
> F-75205 Paris Cedex 13   Identica: http://identi.ca/rdicosmo
> FRANCE.                  Twitter: http://twitter.com/rdicosmo
> ------------------------------------------------------------------
> Attachments:
> MIME accepted, Word deprecated
>      http://www.gnu.org/philosophy/no-word-attachments.html
> ------------------------------------------------------------------
> Office location:
> 
> Bureau 3020 (3rd floor)
> Batiment Sophie Germain
> Avenue de France
> Metro Bibliotheque Francois Mitterrand, ligne 14/RER C
> -----------------------------------------------------------------
> GPG fingerprint 2931 20CE 3A5A 5390 98EC 8BFC FCCA C3BE 39CB 12D3                        
> 


From whitequark at whitequark.org  Wed Feb 25 10:57:00 2015
From: whitequark at whitequark.org (Peter Zotov)
Date: Wed, 25 Feb 2015 13:57:00 +0300
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <20150225104837.GA10656@traveler>
References: <1709176.A7TcrPyoj4@agaric>
 <B039BA3F-CBE5-49A4-9B5B-EF77F440BB5E@m4x.org>
 <20150221091603.GA31077@traveler>
 <4D01D3A6-7609-411E-9897-B0A3DF360F44@recoil.org>
 <20150225104837.GA10656@traveler>
Message-ID: <cd9085108ca69ca01298bec43f2bdc82@whitequark.org>

On 2015-02-25 13:48, Roberto Di Cosmo wrote:
>> I'm less sure about the viability of recording installed files
>> strictly -- I view thatas an advisory rather than enforcement-based
>> mechanism.  The reason I like the "make ~/.opam a git store" is that
>> its possible for applications to write directly into the store as they
>> do right now, but still let us track changes precisely.  In fact, if
>> we forbid subshells from writing into `~/.opam/.git`, this would be
>> a production grade solution that also offers instant-rollback in case
>> of compilation errors (no more waiting for a full recompilation of
>> the original dependencies!).

Please don't make .opam a git store. Even with one snapshot, it means
that my .opam would be 11G instead of 5.5G it currently is. What's worse
is that every recompilation or upgrade would balloon the store even 
more.
I can easily anticipate it filling the entirety of my 500GB drive,
for example. That's absurd.

Also, git is pretty slow at handling many large binary files (which is
the single worst workload you can use it for). Delta compression
takes noticeable time on my blog, which has a mere 500MB of photos.

-- 
Peter Zotov

From anil at recoil.org  Wed Feb 25 11:03:41 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Wed, 25 Feb 2015 11:03:41 +0000
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <cd9085108ca69ca01298bec43f2bdc82@whitequark.org>
References: <1709176.A7TcrPyoj4@agaric>
 <B039BA3F-CBE5-49A4-9B5B-EF77F440BB5E@m4x.org>
 <20150221091603.GA31077@traveler>
 <4D01D3A6-7609-411E-9897-B0A3DF360F44@recoil.org>
 <20150225104837.GA10656@traveler>
 <cd9085108ca69ca01298bec43f2bdc82@whitequark.org>
Message-ID: <375962F7-4F4F-4E35-A241-D3DF5465159D@recoil.org>

On 25 Feb 2015, at 10:57, Peter Zotov <whitequark at whitequark.org> wrote:
> 
> On 2015-02-25 13:48, Roberto Di Cosmo wrote:
>>> I'm less sure about the viability of recording installed files
>>> strictly -- I view thatas an advisory rather than enforcement-based
>>> mechanism.  The reason I like the "make ~/.opam a git store" is that
>>> its possible for applications to write directly into the store as they
>>> do right now, but still let us track changes precisely.  In fact, if
>>> we forbid subshells from writing into `~/.opam/.git`, this would be
>>> a production grade solution that also offers instant-rollback in case
>>> of compilation errors (no more waiting for a full recompilation of
>>> the original dependencies!).
> 
> Please don't make .opam a git store. Even with one snapshot, it means
> that my .opam would be 11G instead of 5.5G it currently is. What's worse
> is that every recompilation or upgrade would balloon the store even more.
> I can easily anticipate it filling the entirety of my 500GB drive,
> for example. That's absurd.
> 
> Also, git is pretty slow at handling many large binary files (which is
> the single worst workload you can use it for). Delta compression
> takes noticeable time on my blog, which has a mere 500MB of photos.

This needs some experimentation, but it would not be as naive as simply
shelling out to Git, as we have a complete implementation in pure OCaml.
It would also be optional, and history rebased regularly so as not to
grow too far (just as `git gc` does).  Binary compression can also be
sorted out asynchronously.

Adding this feature has a number of upsides in the future, particularly
for sharing OPAM installations in classroom environments, which has been
a very common request.

I'm almost certain it could be implemented outside of OPAM by adding
the right build-time hooks, which may be shareable with the sandboxing
infrastructure.  This discussion for a plugin API has come up several
times, and this the right time to add it now that we have several concrete
usecases (depext, sandbox, vcs)

-anil


From thomas at gazagnaire.org  Wed Feb 25 11:20:27 2015
From: thomas at gazagnaire.org (Thomas Gazagnaire)
Date: Wed, 25 Feb 2015 11:20:27 +0000
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <cd9085108ca69ca01298bec43f2bdc82@whitequark.org>
References: <1709176.A7TcrPyoj4@agaric>
 <B039BA3F-CBE5-49A4-9B5B-EF77F440BB5E@m4x.org>
 <20150221091603.GA31077@traveler>
 <4D01D3A6-7609-411E-9897-B0A3DF360F44@recoil.org>
 <20150225104837.GA10656@traveler>
 <cd9085108ca69ca01298bec43f2bdc82@whitequark.org>
Message-ID: <FD0734C3-2B28-4568-8D78-98DCADC0221E@gazagnaire.org>

>>> I'm less sure about the viability of recording installed files
>>> strictly -- I view thatas an advisory rather than enforcement-based
>>> mechanism.  The reason I like the "make ~/.opam a git store" is that
>>> its possible for applications to write directly into the store as they
>>> do right now, but still let us track changes precisely.  In fact, if
>>> we forbid subshells from writing into `~/.opam/.git`, this would be
>>> a production grade solution that also offers instant-rollback in case
>>> of compilation errors (no more waiting for a full recompilation of
>>> the original dependencies!).
> 
> Please don't make .opam a git store. Even with one snapshot, it means
> that my .opam would be 11G instead of 5.5G it currently is. What's worse
> is that every recompilation or upgrade would balloon the store even more.
> I can easily anticipate it filling the entirety of my 500GB drive,
> for example. That's absurd.

It's not so simple, Git uses implicit hash-consing to share as much blobs as possible, so snapshotting is free. This also means that switches will be able to share binary blobs (a long-standing request). All of this needs to be evaluated properly. 

> Also, git is pretty slow at handling many large binary files (which is
> the single worst workload you can use it for). Delta compression
> takes noticeable time on my blog, which has a mere 500MB of photos.

Git is perfectly capable of handling large blobs if the zlib compression level is set to 0:

$ git config --global core.compression 0

But yes, the delta compression algorithm has been designed for code source files, so it might be non-optimal (ie. `git gc` will not be as efficient as expected). Anyway, version controlling .opam is a nice idea, but it definitely needs some eval and more coner-cases thoughs to make it work nicely for end-users.

Thomas


From whitequark at whitequark.org  Wed Feb 25 11:23:21 2015
From: whitequark at whitequark.org (Peter Zotov)
Date: Wed, 25 Feb 2015 14:23:21 +0300
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <FD0734C3-2B28-4568-8D78-98DCADC0221E@gazagnaire.org>
References: <1709176.A7TcrPyoj4@agaric>
 <B039BA3F-CBE5-49A4-9B5B-EF77F440BB5E@m4x.org>
 <20150221091603.GA31077@traveler>
 <4D01D3A6-7609-411E-9897-B0A3DF360F44@recoil.org>
 <20150225104837.GA10656@traveler>
 <cd9085108ca69ca01298bec43f2bdc82@whitequark.org>
 <FD0734C3-2B28-4568-8D78-98DCADC0221E@gazagnaire.org>
Message-ID: <f43fd1ddb1450f54ca3886b9c39a3982@whitequark.org>

On 2015-02-25 14:20, Thomas Gazagnaire wrote:
>>>> I'm less sure about the viability of recording installed files
>>>> strictly -- I view thatas an advisory rather than enforcement-based
>>>> mechanism.  The reason I like the "make ~/.opam a git store" is that
>>>> its possible for applications to write directly into the store as 
>>>> they
>>>> do right now, but still let us track changes precisely.  In fact, if
>>>> we forbid subshells from writing into `~/.opam/.git`, this would be
>>>> a production grade solution that also offers instant-rollback in 
>>>> case
>>>> of compilation errors (no more waiting for a full recompilation of
>>>> the original dependencies!).
>> 
>> Please don't make .opam a git store. Even with one snapshot, it means
>> that my .opam would be 11G instead of 5.5G it currently is. What's 
>> worse
>> is that every recompilation or upgrade would balloon the store even 
>> more.
>> I can easily anticipate it filling the entirety of my 500GB drive,
>> for example. That's absurd.
> 
> It's not so simple, Git uses implicit hash-consing to share as much
> blobs as possible, so snapshotting is free. This also means that
> switches will be able to share binary blobs (a long-standing request).
> All of this needs to be evaluated properly.

I know. The issue is that reinstalls tend to change large amounts of
files. Imagine upgrading Core, or even worse, the compiler. Even
with delta compression there would be no, or almost no, sharing
among the biggest blobs; without it, less so.

-- 
Peter Zotov

From roberto at dicosmo.org  Wed Feb 25 10:58:09 2015
From: roberto at dicosmo.org (Roberto Di Cosmo)
Date: Wed, 25 Feb 2015 11:58:09 +0100
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <3B5DD7A3-DFF5-488D-9798-19B4159082B0@recoil.org>
References: <1709176.A7TcrPyoj4@agaric>
 <B039BA3F-CBE5-49A4-9B5B-EF77F440BB5E@m4x.org>
 <20150221091603.GA31077@traveler>
 <4D01D3A6-7609-411E-9897-B0A3DF360F44@recoil.org>
 <20150225104837.GA10656@traveler>
 <3B5DD7A3-DFF5-488D-9798-19B4159082B0@recoil.org>
Message-ID: <CAJBwKuUYcn+6HqhiqwmV1KbTKJ3QmDx_ve-2eZ_rpzgwsFUgOw@mail.gmail.com>

I fully share this point of view: having opam in control of the sandbox
provides much finer grain. So, from a functional standpoint, I would not
hesitate.

What makes me hesitate is that we would need to change the opam code for
this, and take into account all possible different mechanisms according to
os/platform. This is pretty well doable, if we set up a proper plugin
mechanism, and we could share code with a plugin-based depext support, but
it requires more effort :-)


2015-02-25 11:54 GMT+01:00 Anil Madhavapeddy <anil at recoil.org>:

> I'm also not sure how viable activating it for day-to-day testing except
> by advanced users is.  However, we can at least get the infrastructure in
> place for CI, which is necessary before we need to decide that.
>
> I forgot one point in my previous mail: why this needs to be in OPAM
> instead
> of just an external `sandbox` binary.  We don't actually want to sandbox
> OPAM itself (which we trust!), but rather the packages it invokes.  In my
> OpenBSD sandbox, I am constraining OPAM and all its future subshells.
> Instead, I would prefer to have OPAM invoke an external sandbox only when
> it is doing a build, with sufficient arguments to let it know which dirs
> are ok to write into.
>
> This would let a package only write into the specific subdirectory relevant
> to the current switch.  This actually bites me quite often with pinning,
> since a stale OASIS setup.data can cause an installation to write into the
> wrong switch if a full clean is not done ahead of time.  It also lets us
> sandbox network access of builds independently of OPAM, which is needed to
> "unplug" an OPAM package build.
>
> cheers,
> Anil
>
> > On 25 Feb 2015, at 10:48, Roberto Di Cosmo <roberto at dicosmo.org> wrote:
> >
> > Many thanks Anil, that's precious information:
> > this is clearly another very OS-specific feature!
> >
> > The question is whether we want to add these policies and tools
> >
> > - outside opam (pro: no changes to opam, cons: opam has no control)
> > - or make opam aware of them (pro: opam gets control, cons: various
> changes to opam)
> >
> > For CI testing, the "outside" approach seems to be quite sufficient.
> >
> > For day to day use, though, I am not sure...
> >
> > On Tue, Feb 24, 2015 at 04:22:31PM +0000, Anil Madhavapeddy wrote:
> >> Hi Roberto, Simon,
> >>
> >> Sandboxing mechanisms have come along quite a bit in the last few years.
> >> It's important to separate the two threat models that we want, since
> their
> >> use can be quite intrusive if made mandatory.  I see two modes of
> operation:
> >>
> >> - A mandatory sandbox in CI testing, where we use it to check that the
> >>  package isn't violating obvious policies such as network downloads
> >>  from within the package, or writing outside of ~/.opam or /tmp.
> >>
> >> - Optional sandbox for day-to-day use by end users.  This will catch
> >>  even malicious behaviours, but imposes a rather heavy support burden.
> >>
> >> In terms of how to sandbox applications, I know of:
> >>
> >> - OpenBSD: I use the built-in systrace system call permissions subsystem
> >>  already with OPAM.  I've uploaded my local policy to GitHub at:
> >>     https://gist.github.com/avsm/8293aa52c6cee772a9cb
> >>  This policy is used by "systrace opam install foo" and pulls up an
> >>  interactive dialog if an application attempts to write outside of
> >>  either ~/.opam or /tmp.
> >>    See: http://www.openbsd.org/cgi-bin/man.cgi?query=systrace
> >>     or: http://www.citi.umich.edu/u/provos/systrace/
> >>  paper: http://www.citi.umich.edu/u/provos/papers/systrace.pdf
> >>
> >> - FreeBSD: the latest versions have the Capsicum capability system
> >>  integrated, and the Casper system daemon that grants common operations
> >>  is also being worked on upstream (e.g. for name resolution)
> >>   See: https://www.cl.cam.ac.uk/research/security/capsicum/
> >>
> >> - Linux: As always with Linux, there are a myriad of possible solutions.
> >>  I'd discourage the use of LD_PRELOAD based solutions since they don't
> >>  work in several situations reliably (most obviously with static
> binaries).
> >>  The fakeroot-ng project uses ptrace instead, which is more reliable.
> >>
> >>  However, the primary thing we want is to only let the package only
> >>  write into ~/.opam, and so the mount namespace feature (see
> CLONE_NEWNS)
> >>  may be sufficient for our needs -- a lightweight filesystem container,
> >>  in effect.  David Sheets has done some investigation into this for
> >>  another project we're working on.
> >>
> >> - Windows: various, Sandboxie is one solution, but the underlying
> >>  mechanism is the Windows Integrity Mechanism that was introduced in
> >>  Vista:   https://msdn.microsoft.com/en-us/library/bb625964.aspx
> >>  This lets applications drop privileges, and is used by the Chrome
> >>  sandbox (in general, following what Chrome does for sandboxing is a
> >>  good idea, since their needs are a superset of ours).
> >>
> >> - MacOS X: The App Sandbox requires code signing, but does almost
> >>  exactly what we need: it gives each app/user a unique directory
> >>  into which they can write files.  All we should need to do is to
> >>  set OPAMROOT to that directory, and everything should just work.
> >>  In practise, this requires some investigation into how the App
> >>  signing infrastructure works, since I've only seen it done for
> >>  bundles and not for CLI tools.
> >>
> >> This is a quick off-the-top-of-my-head survey, but I think it's viable
> >> and useful for us to build an `opam sandbox` in the same style as
> >> `opam depext` that attempts to invoke a relevant sandboxing mechanism
> >> depending on the OS.  In the longer term, this will really serve us
> >> well as the package database grows.
> >>
> >> I'm less sure about the viability of recording installed files
> >> strictly -- I view thatas an advisory rather than enforcement-based
> >> mechanism.  The reason I like the "make ~/.opam a git store" is that
> >> its possible for applications to write directly into the store as they
> >> do right now, but still let us track changes precisely.  In fact, if
> >> we forbid subshells from writing into `~/.opam/.git`, this would be
> >> a production grade solution that also offers instant-rollback in case
> >> of compilation errors (no more waiting for a full recompilation of
> >> the original dependencies!).
> >>
> >> cheers,
> >> Anil
> >>
> >>> On 21 Feb 2015, at 09:16, Roberto Di Cosmo <roberto at dicosmo.org>
> wrote:
> >>>
> >>> Anil, Simon, can you provide more details on the sandboxing mechanisms
> you know of?
> >>>
> >>> We looked into all this for Mancoosi years ago; the most complete tool
> >>> out there was installwatch (now checkinstall) that hijacks filesystem
> modifying
> >>> commands using the standard LD_PRELOAD trick and a wrapper for system
> calls.
> >>> Checkinstall does not alter user priviledges, though, so one sometimes
> needed
> >>> a combination of fakeroot (that only alter user priviledges) with it.
> >>>
> >>> The best approach I know of was described in a Master thesis from ...
> Cambridge
> >>> :-) It was under the supervision of Peter Sewell, and used the ptrace
> mechanism
> >>> instead of the LD_PRELOAD trick, because LD_PRELOAD is blind to
> statically
> >>> compiled binaries that have system calls hardcoded, while ptrace gets
> them all.
> >>>
> >>> The dissertation is still available today here
> http://robot101.net/files/diss.ps.gz
> >>> and contains a very nice discussion of the issues related to
> monitoring and
> >>> rolling back file system changes performed by a command in the Linux
> system.
> >>> The source code is also available here
> http://robot101.net/files/trace.tar.gz
> >>> and one can get in touch with Robert Mcqueen that will be delighted to
> see his
> >>> work being used.
> >>>
> >>> Since all this is almost 10 years old, I suppose many exciting new
> ideas, tools
> >>> and approaches surfaced in the meantime, and I'd really like to know
> more.
> >>>
> >>> Cheers
> >>>
> >>> --
> >>> Roberto
> >>>
> >>> On Sat, Feb 21, 2015 at 09:37:07AM +0100, Simon Cruanes wrote:
> >>>> Sandboxing the build would also be a big security improvement. I
> think cabal
> >>>> now does it, and signing packages doesn't protect against malicious
> or buggy
> >>>> packages (see: bumblebee's uninstall target). That also goes hand in
> hand with
> >>>> file tracking. I don't know how difficult it is, though.
> >>>>
> >>>> Cheers!
> >>>>
> >>>> Le 21 f?vrier 2015 05:01:56 UTC+01:00, Louis Gesbert
> >>>> <louis.gesbert at ocamlpro.com> a ?crit :
> >>>>
> >>>>   With 1.2.1 almost out of the door, time has come to review the
> roadmap discussed back in December and choose where we'll be going for 1.3.
> Original mail attached for reference.
> >>>>
> >>>>
> >>>>   The topic that is burning hot at the moment is, specially after the
> Debian Haskell build host has been compromised, security: we have no
> signing at all at the moment, and we need to improve on this before it
> becomes a problem. TUF [1] has devised a sane amount of rules for
> repository management and signing that should make it easier to get it
> right in OPAM. Hannes has mentionned writing an OCaml implementation for
> TUF, which could get very helpful.
> >>>>
> >>>>
> >>>>   Also of importance is Windows support. It should at least be
> straighforward and documented to get a basic Cygwin setup working. That
> goes with adding automated tests (appveyor can now be added in Github
> alongside Travis). Related is cleaning up external command usage (even if
> not really justified by a Windows
> >>>>   port only, as David Allsopp pointed out) -- replacing curl calls by
> cohttp, use ocaml-fileutils...
> >>>>
> >>>>
> >>>>   These are the other main features, that'll probably take more time
> if we are to focus eg. on security:
> >>>>
> >>>>   * a plugin mechanism with plugins for example for OCaml (for better
> agnosticity), external dependency handling [2], documentation generation...
> >>>>
> >>>>   * a 'provides:' field in OPAM files [3]. This is a loose
> requirement if we want to switch the repository to have OCaml itself in a
> package (which is already possible, but the system compiler may yet be an
> issue).
> >>>>
> >>>>   * More flexible switch handling (multi-switch packages, per-switch
> remotes, layered switches for cross-compilation...)
> >>>>
> >>>>   * Tracking of files installed by packages. While unrelated to repo
> signing, this might have some security implications, so we might want to
> bring it in.
> >>>>
> >>>>   * With file tracking, generating a binary repo (with some
> limitations) could be quite
> >>>>   straight-forward.
> >>>>
> >>>>
> >>>>   Which of these do you think is most important ? Have I forgotten
> anything ?
> >>>>
> >>>>   Cheers,
> >>>>   Louis
> >>>>
> >>>>
> >>>>   [1] http://theupdateframework.com/
> >>>>   [2]
> https://github.com/ocaml/opam/blob/master/doc/design/depexts-plugins
> >>>>   [3]
> https://github.com/ocaml/opam/blob/master/doc/design/provides.md
> >>>>
> >>>>   message suivi
> >>>>
> >>>>     De :   Louis Gesbert
> >>>>     ? :    opam-devel at lists.ocaml.org
> >>>>   Envoy? : Wed Dec 17 11:07:40 UTC+01:00 2014
> >>>>   Objet :  [opam-devel] OPAM Roadmap -- what next ?
> >>>>
> >>>>   Hi all,
> >>>>
> >>>>
> >>>>
> >>>>   with some lag after the 1.2 release, I'd like to open some space
> for a
> >>>>   collective discussion of the priorities for where the energies
> should go
> >>>>   next. We have mainly 3 directions for improvements: first,
> portability,
> >>>>   with the main goal of a Windows version. Second, agnosticity, with
> the goal
> >>>>   to make OPAM more generic, and try and open it to users outside of
> the
> >>>>   OCaml community (wouldn't OPAM for Haskell be fun ?). Third, there
> are
> >>>>   always lots of features and improvements that have been asked for,
> and
> >>>>   would improve the experience of current users.
> >>>>
> >>>>
> >>>>
> >>>>   So here is a summary of what I've gathered. Feel free to add your
> own.
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>   ## Portability
> >>>>
> >>>>
> >>>>
> >>>>   - **Rewrite parallel command engine.** / done.
> >>>>
> >>>>
> >>>>
> >>>>   - **Native system manipulation (cp, rm, curl...).**
> >>>>
> >>>>   These are mostly done through calls to the shell or external
> programs. It's
> >>>>
> >>>>   not very pretty but quite pragmatic actually... until we want to
> run on
> >>>>
> >>>>   Windows without Cygwin. Anyway, this wouldn't be the end of
> portability
> >>>>
> >>>>   issues.
> >>>>
> >>>>
> >>>>
> >>>>   - **Windows support.**
> >>>>
> >>>>   for OPAM itself to begin with. This should be pretty close.
> >>>>
> >>>>
> >>>>
> >>>>   - **Packages on Windows.**
> >>>>
> >>>>   Locate common issues and attempt to find generic fixes.
> >>>>
> >>>>
> >>>>
> >>>>   - Allow **direct use of more solvers** or solver servers.
> >>>>
> >>>>
> >>>>
> >>>>   - **Support cross-compilation**
> >>>>
> >>>>   This is quite an open issue at the moment.
> >>>>
> >>>>
> >>>>
> >>>>   ## Agnosticity
> >>>>
> >>>>
> >>>>
> >>>>   - **Isolate OCaml-specific stuff.**
> >>>>
> >>>>   E.g. specific opam-file variables. See ocaml-specific.md
> >>>>
> >>>>
> >>>>
> >>>>   - **Separate as plugins**
> >>>>
> >>>>   To open the gate to OPAM without these plugins, or with other ones
> >>>>
> >>>>
> >>>>
> >>>>   - **Compilers as packages.**
> >>>>
> >>>>   This should mostly work now, but needs some tests and
> strengthening. The
> >>>>   main
> >>>>
> >>>>   thing still to do is to handle the system compiler changes properly
> ; that
> >>>>
> >>>>   part should be made more generic anyway (see discussion on hooks)
> >>>>
> >>>>
> >>>>
> >>>>   ## Features
> >>>>
> >>>>
> >>>>
> >>>>   - A **provides** field. Generally useful, but particulary so with
> >>>>
> >>>>   compilers-as-packages
> >>>>
> >>>>
> >>>>
> >>>>   - Releasing the **"features" field** for easier package
> configuration
> >>>>
> >>>>
> >>>>
> >>>>   - **Track installed files**
> >>>>
> >>>>
> >>>>
> >>>>   - **Improve security**: just checking md5s is quite light ; package
> scripts
> >>>>   can
> >>>>
> >>>>   write anywhere
> >>>>
> >>>>
> >>>>
> >>>>   - **OS-specific handling of dependencies** (eg dependencies on
> packages
> >>>>   from the
> >>>>
> >>>>   OS) with plugins (#1519)
> >>>>
> >>>>
> >>>>
> >>>>   - Specify and implement **hooks**
> >>>>
> >>>>
> >>>>
> >>>>   - Find a nicer way to **share dev repos** / undoable "pinning
> sources"
> >>>>
> >>>>
> >>>>
> >>>>   - **Per-switch remotes**
> >>>>
> >>>>
> >>>>
> >>>>   - **Multi-switch packages**
> >>>>
> >>>>
> >>>>
> >>>>   - Support for (automatic generation of) **binary packages**
> >>>>
> >>>>
> >>>>
> >>>>   - Nicer **ocamlfind interaction**
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>   Cheers,
> >>>>
> >>>>   Louis Gesbert
> >>>>
> >>>>
>  ???????????????????????????????????????????????????????????????????????????
> >>>>
> >>>>   opam-devel mailing list
> >>>>   opam-devel at lists.ocaml.org
> >>>>   http://lists.ocaml.org/listinfo/opam-devel
> >>>>
> >>>>
>  ???????????????????????????????????????????????????????????????????????????
> >>>>
> >>>>   opam-devel mailing list
> >>>>   opam-devel at lists.ocaml.org
> >>>>   http://lists.ocaml.org/listinfo/opam-devel
> >>>>
> >>>>
> >>>> --
> >>>> Simon
> >>>
> >>>> _______________________________________________
> >>>> opam-devel mailing list
> >>>> opam-devel at lists.ocaml.org
> >>>> http://lists.ocaml.org/listinfo/opam-devel
> >>>
> >>>
> >>> --
> >>> Roberto Di Cosmo
> >>>
> >>> ------------------------------------------------------------------
> >>> Professeur               En delegation a l'INRIA
> >>> PPS                      E-mail: roberto at dicosmo.org
> >>> Universite Paris Diderot WWW  : http://www.dicosmo.org
> >>> Case 7014                Tel  : ++33-(0)1-57 27 92 20
> >>> 5, Rue Thomas Mann
> >>> F-75205 Paris Cedex 13   Identica: http://identi.ca/rdicosmo
> >>> FRANCE.                  Twitter: http://twitter.com/rdicosmo
> >>> ------------------------------------------------------------------
> >>> Attachments:
> >>> MIME accepted, Word deprecated
> >>>     http://www.gnu.org/philosophy/no-word-attachments.html
> >>> ------------------------------------------------------------------
> >>> Office location:
> >>>
> >>> Bureau 3020 (3rd floor)
> >>> Batiment Sophie Germain
> >>> Avenue de France
> >>> Metro Bibliotheque Francois Mitterrand, ligne 14/RER C
> >>> -----------------------------------------------------------------
> >>> GPG fingerprint 2931 20CE 3A5A 5390 98EC 8BFC FCCA C3BE 39CB 12D3
> >>>
> >>
> >
> > --
> > Roberto Di Cosmo
> >
> > ------------------------------------------------------------------
> > Professeur               En delegation a l'INRIA
> > PPS                      E-mail: roberto at dicosmo.org
> > Universite Paris Diderot WWW  : http://www.dicosmo.org
> > Case 7014                Tel  : ++33-(0)1-57 27 92 20
> > 5, Rue Thomas Mann
> > F-75205 Paris Cedex 13   Identica: http://identi.ca/rdicosmo
> > FRANCE.                  Twitter: http://twitter.com/rdicosmo
> > ------------------------------------------------------------------
> > Attachments:
> > MIME accepted, Word deprecated
> >      http://www.gnu.org/philosophy/no-word-attachments.html
> > ------------------------------------------------------------------
> > Office location:
> >
> > Bureau 3020 (3rd floor)
> > Batiment Sophie Germain
> > Avenue de France
> > Metro Bibliotheque Francois Mitterrand, ligne 14/RER C
> > -----------------------------------------------------------------
> > GPG fingerprint 2931 20CE 3A5A 5390 98EC 8BFC FCCA C3BE 39CB 12D3
> >
>
>


-- 
Roberto Di Cosmo

------------------------------------------------------------------
Professeur               En delegation a l'INRIA
PPS                      E-mail: roberto at dicosmo.org
Universite Paris Diderot WWW  : http://www.dicosmo.org
Case 7014                Tel  : ++33-(0)1-57 27 92 20
5, Rue Thomas Mann
F-75205 Paris Cedex 13   Identica: http://identi.ca/rdicosmo
FRANCE.                  Twitter: http://twitter.com/rdicosmo
------------------------------------------------------------------
Attachments:
MIME accepted, Word deprecated
      http://www.gnu.org/philosophy/no-word-attachments.html
------------------------------------------------------------------
Office location:

Bureau 320 (3rd floor)
Batiment Sophie Germain
Avenue de France
Metro Bibliotheque Francois Mitterrand, ligne 14/RER C
-----------------------------------------------------------------
GPG fingerprint 2931 20CE 3A5A 5390 98EC 8BFC FCCA C3BE 39CB 12D3
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20150225/39c58818/attachment-0001.html>

From anil at recoil.org  Wed Feb 25 11:04:45 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Wed, 25 Feb 2015 11:04:45 +0000
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <CAJBwKuUYcn+6HqhiqwmV1KbTKJ3QmDx_ve-2eZ_rpzgwsFUgOw@mail.gmail.com>
References: <1709176.A7TcrPyoj4@agaric>
 <B039BA3F-CBE5-49A4-9B5B-EF77F440BB5E@m4x.org>
 <20150221091603.GA31077@traveler>
 <4D01D3A6-7609-411E-9897-B0A3DF360F44@recoil.org>
 <20150225104837.GA10656@traveler>
 <3B5DD7A3-DFF5-488D-9798-19B4159082B0@recoil.org>
 <CAJBwKuUYcn+6HqhiqwmV1KbTKJ3QmDx_ve-2eZ_rpzgwsFUgOw@mail.gmail.com>
Message-ID: <C2270E5C-8775-496C-9A37-604A878F40AB@recoil.org>

I agree that baking this into OPAM would be very painful, and agree that this is the right time to think through the OPAM plugin API so that it can be built independently!

-anil

> On 25 Feb 2015, at 10:58, Roberto Di Cosmo <roberto at dicosmo.org> wrote:
> 
> I fully share this point of view: having opam in control of the sandbox provides much finer grain. So, from a functional standpoint, I would not hesitate.
> 
> What makes me hesitate is that we would need to change the opam code for this, and take into account all possible different mechanisms according to os/platform. This is pretty well doable, if we set up a proper plugin mechanism, and we could share code with a plugin-based depext support, but it requires more effort :-)
> 
> 
> 2015-02-25 11:54 GMT+01:00 Anil Madhavapeddy <anil at recoil.org <mailto:anil at recoil.org>>:
> I'm also not sure how viable activating it for day-to-day testing except
> by advanced users is.  However, we can at least get the infrastructure in
> place for CI, which is necessary before we need to decide that.
> 
> I forgot one point in my previous mail: why this needs to be in OPAM instead
> of just an external `sandbox` binary.  We don't actually want to sandbox
> OPAM itself (which we trust!), but rather the packages it invokes.  In my
> OpenBSD sandbox, I am constraining OPAM and all its future subshells.
> Instead, I would prefer to have OPAM invoke an external sandbox only when
> it is doing a build, with sufficient arguments to let it know which dirs
> are ok to write into.
> 
> This would let a package only write into the specific subdirectory relevant
> to the current switch.  This actually bites me quite often with pinning,
> since a stale OASIS setup.data can cause an installation to write into the
> wrong switch if a full clean is not done ahead of time.  It also lets us
> sandbox network access of builds independently of OPAM, which is needed to
> "unplug" an OPAM package build.
> 
> cheers,
> Anil
> 
> > On 25 Feb 2015, at 10:48, Roberto Di Cosmo <roberto at dicosmo.org <mailto:roberto at dicosmo.org>> wrote:
> >
> > Many thanks Anil, that's precious information:
> > this is clearly another very OS-specific feature!
> >
> > The question is whether we want to add these policies and tools
> >
> > - outside opam (pro: no changes to opam, cons: opam has no control)
> > - or make opam aware of them (pro: opam gets control, cons: various changes to opam)
> >
> > For CI testing, the "outside" approach seems to be quite sufficient.
> >
> > For day to day use, though, I am not sure...
> >
> > On Tue, Feb 24, 2015 at 04:22:31PM +0000, Anil Madhavapeddy wrote:
> >> Hi Roberto, Simon,
> >>
> >> Sandboxing mechanisms have come along quite a bit in the last few years.
> >> It's important to separate the two threat models that we want, since their
> >> use can be quite intrusive if made mandatory.  I see two modes of operation:
> >>
> >> - A mandatory sandbox in CI testing, where we use it to check that the
> >>  package isn't violating obvious policies such as network downloads
> >>  from within the package, or writing outside of ~/.opam or /tmp.
> >>
> >> - Optional sandbox for day-to-day use by end users.  This will catch
> >>  even malicious behaviours, but imposes a rather heavy support burden.
> >>
> >> In terms of how to sandbox applications, I know of:
> >>
> >> - OpenBSD: I use the built-in systrace system call permissions subsystem
> >>  already with OPAM.  I've uploaded my local policy to GitHub at:
> >>     https://gist.github.com/avsm/8293aa52c6cee772a9cb <https://gist.github.com/avsm/8293aa52c6cee772a9cb>
> >>  This policy is used by "systrace opam install foo" and pulls up an
> >>  interactive dialog if an application attempts to write outside of
> >>  either ~/.opam or /tmp.
> >>    See: http://www.openbsd.org/cgi-bin/man.cgi?query=systrace <http://www.openbsd.org/cgi-bin/man.cgi?query=systrace>
> >>     or: http://www.citi.umich.edu/u/provos/systrace/ <http://www.citi.umich.edu/u/provos/systrace/>
> >>  paper: http://www.citi.umich.edu/u/provos/papers/systrace.pdf <http://www.citi.umich.edu/u/provos/papers/systrace.pdf>
> >>
> >> - FreeBSD: the latest versions have the Capsicum capability system
> >>  integrated, and the Casper system daemon that grants common operations
> >>  is also being worked on upstream (e.g. for name resolution)
> >>   See: https://www.cl.cam.ac.uk/research/security/capsicum/ <https://www.cl.cam.ac.uk/research/security/capsicum/>
> >>
> >> - Linux: As always with Linux, there are a myriad of possible solutions.
> >>  I'd discourage the use of LD_PRELOAD based solutions since they don't
> >>  work in several situations reliably (most obviously with static binaries).
> >>  The fakeroot-ng project uses ptrace instead, which is more reliable.
> >>
> >>  However, the primary thing we want is to only let the package only
> >>  write into ~/.opam, and so the mount namespace feature (see CLONE_NEWNS)
> >>  may be sufficient for our needs -- a lightweight filesystem container,
> >>  in effect.  David Sheets has done some investigation into this for
> >>  another project we're working on.
> >>
> >> - Windows: various, Sandboxie is one solution, but the underlying
> >>  mechanism is the Windows Integrity Mechanism that was introduced in
> >>  Vista:   https://msdn.microsoft.com/en-us/library/bb625964.aspx <https://msdn.microsoft.com/en-us/library/bb625964.aspx>
> >>  This lets applications drop privileges, and is used by the Chrome
> >>  sandbox (in general, following what Chrome does for sandboxing is a
> >>  good idea, since their needs are a superset of ours).
> >>
> >> - MacOS X: The App Sandbox requires code signing, but does almost
> >>  exactly what we need: it gives each app/user a unique directory
> >>  into which they can write files.  All we should need to do is to
> >>  set OPAMROOT to that directory, and everything should just work.
> >>  In practise, this requires some investigation into how the App
> >>  signing infrastructure works, since I've only seen it done for
> >>  bundles and not for CLI tools.
> >>
> >> This is a quick off-the-top-of-my-head survey, but I think it's viable
> >> and useful for us to build an `opam sandbox` in the same style as
> >> `opam depext` that attempts to invoke a relevant sandboxing mechanism
> >> depending on the OS.  In the longer term, this will really serve us
> >> well as the package database grows.
> >>
> >> I'm less sure about the viability of recording installed files
> >> strictly -- I view thatas an advisory rather than enforcement-based
> >> mechanism.  The reason I like the "make ~/.opam a git store" is that
> >> its possible for applications to write directly into the store as they
> >> do right now, but still let us track changes precisely.  In fact, if
> >> we forbid subshells from writing into `~/.opam/.git`, this would be
> >> a production grade solution that also offers instant-rollback in case
> >> of compilation errors (no more waiting for a full recompilation of
> >> the original dependencies!).
> >>
> >> cheers,
> >> Anil
> >>
> >>> On 21 Feb 2015, at 09:16, Roberto Di Cosmo <roberto at dicosmo.org <mailto:roberto at dicosmo.org>> wrote:
> >>>
> >>> Anil, Simon, can you provide more details on the sandboxing mechanisms you know of?
> >>>
> >>> We looked into all this for Mancoosi years ago; the most complete tool
> >>> out there was installwatch (now checkinstall) that hijacks filesystem modifying
> >>> commands using the standard LD_PRELOAD trick and a wrapper for system calls.
> >>> Checkinstall does not alter user priviledges, though, so one sometimes needed
> >>> a combination of fakeroot (that only alter user priviledges) with it.
> >>>
> >>> The best approach I know of was described in a Master thesis from ... Cambridge
> >>> :-) It was under the supervision of Peter Sewell, and used the ptrace mechanism
> >>> instead of the LD_PRELOAD trick, because LD_PRELOAD is blind to statically
> >>> compiled binaries that have system calls hardcoded, while ptrace gets them all.
> >>>
> >>> The dissertation is still available today here http://robot101.net/files/diss.ps.gz <http://robot101.net/files/diss.ps.gz>
> >>> and contains a very nice discussion of the issues related to monitoring and
> >>> rolling back file system changes performed by a command in the Linux system.
> >>> The source code is also available here http://robot101.net/files/trace.tar.gz <http://robot101.net/files/trace.tar.gz>
> >>> and one can get in touch with Robert Mcqueen that will be delighted to see his
> >>> work being used.
> >>>
> >>> Since all this is almost 10 years old, I suppose many exciting new ideas, tools
> >>> and approaches surfaced in the meantime, and I'd really like to know more.
> >>>
> >>> Cheers
> >>>
> >>> --
> >>> Roberto
> >>>
> >>> On Sat, Feb 21, 2015 at 09:37:07AM +0100, Simon Cruanes wrote:
> >>>> Sandboxing the build would also be a big security improvement. I think cabal
> >>>> now does it, and signing packages doesn't protect against malicious or buggy
> >>>> packages (see: bumblebee's uninstall target). That also goes hand in hand with
> >>>> file tracking. I don't know how difficult it is, though.
> >>>>
> >>>> Cheers!
> >>>>
> >>>> Le 21 f?vrier 2015 05:01:56 UTC+01:00, Louis Gesbert
> >>>> <louis.gesbert at ocamlpro.com <mailto:louis.gesbert at ocamlpro.com>> a ?crit :
> >>>>
> >>>>   With 1.2.1 almost out of the door, time has come to review the roadmap discussed back in December and choose where we'll be going for 1.3. Original mail attached for reference.
> >>>>
> >>>>
> >>>>   The topic that is burning hot at the moment is, specially after the Debian Haskell build host has been compromised, security: we have no signing at all at the moment, and we need to improve on this before it becomes a problem. TUF [1] has devised a sane amount of rules for repository management and signing that should make it easier to get it right in OPAM. Hannes has mentionned writing an OCaml implementation for TUF, which could get very helpful.
> >>>>
> >>>>
> >>>>   Also of importance is Windows support. It should at least be straighforward and documented to get a basic Cygwin setup working. That goes with adding automated tests (appveyor can now be added in Github alongside Travis). Related is cleaning up external command usage (even if not really justified by a Windows
> >>>>   port only, as David Allsopp pointed out) -- replacing curl calls by cohttp, use ocaml-fileutils...
> >>>>
> >>>>
> >>>>   These are the other main features, that'll probably take more time if we are to focus eg. on security:
> >>>>
> >>>>   * a plugin mechanism with plugins for example for OCaml (for better agnosticity), external dependency handling [2], documentation generation...
> >>>>
> >>>>   * a 'provides:' field in OPAM files [3]. This is a loose requirement if we want to switch the repository to have OCaml itself in a package (which is already possible, but the system compiler may yet be an issue).
> >>>>
> >>>>   * More flexible switch handling (multi-switch packages, per-switch remotes, layered switches for cross-compilation...)
> >>>>
> >>>>   * Tracking of files installed by packages. While unrelated to repo signing, this might have some security implications, so we might want to bring it in.
> >>>>
> >>>>   * With file tracking, generating a binary repo (with some limitations) could be quite
> >>>>   straight-forward.
> >>>>
> >>>>
> >>>>   Which of these do you think is most important ? Have I forgotten anything ?
> >>>>
> >>>>   Cheers,
> >>>>   Louis
> >>>>
> >>>>
> >>>>   [1] http://theupdateframework.com/ <http://theupdateframework.com/>
> >>>>   [2] https://github.com/ocaml/opam/blob/master/doc/design/depexts-plugins <https://github.com/ocaml/opam/blob/master/doc/design/depexts-plugins>
> >>>>   [3] https://github.com/ocaml/opam/blob/master/doc/design/provides.md <https://github.com/ocaml/opam/blob/master/doc/design/provides.md>
> >>>>
> >>>>   message suivi
> >>>>
> >>>>     De :   Louis Gesbert
> >>>>     ? :    opam-devel at lists.ocaml.org <mailto:opam-devel at lists.ocaml.org>
> >>>>   Envoy? : Wed Dec 17 11:07:40 UTC+01:00 2014
> >>>>   Objet :  [opam-devel] OPAM Roadmap -- what next ?
> >>>>
> >>>>   Hi all,
> >>>>
> >>>>
> >>>>
> >>>>   with some lag after the 1.2 release, I'd like to open some space for a
> >>>>   collective discussion of the priorities for where the energies should go
> >>>>   next. We have mainly 3 directions for improvements: first, portability,
> >>>>   with the main goal of a Windows version. Second, agnosticity, with the goal
> >>>>   to make OPAM more generic, and try and open it to users outside of the
> >>>>   OCaml community (wouldn't OPAM for Haskell be fun ?). Third, there are
> >>>>   always lots of features and improvements that have been asked for, and
> >>>>   would improve the experience of current users.
> >>>>
> >>>>
> >>>>
> >>>>   So here is a summary of what I've gathered. Feel free to add your own.
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>   ## Portability
> >>>>
> >>>>
> >>>>
> >>>>   - **Rewrite parallel command engine.** / done.
> >>>>
> >>>>
> >>>>
> >>>>   - **Native system manipulation (cp, rm, curl...).**
> >>>>
> >>>>   These are mostly done through calls to the shell or external programs. It's
> >>>>
> >>>>   not very pretty but quite pragmatic actually... until we want to run on
> >>>>
> >>>>   Windows without Cygwin. Anyway, this wouldn't be the end of portability
> >>>>
> >>>>   issues.
> >>>>
> >>>>
> >>>>
> >>>>   - **Windows support.**
> >>>>
> >>>>   for OPAM itself to begin with. This should be pretty close.
> >>>>
> >>>>
> >>>>
> >>>>   - **Packages on Windows.**
> >>>>
> >>>>   Locate common issues and attempt to find generic fixes.
> >>>>
> >>>>
> >>>>
> >>>>   - Allow **direct use of more solvers** or solver servers.
> >>>>
> >>>>
> >>>>
> >>>>   - **Support cross-compilation**
> >>>>
> >>>>   This is quite an open issue at the moment.
> >>>>
> >>>>
> >>>>
> >>>>   ## Agnosticity
> >>>>
> >>>>
> >>>>
> >>>>   - **Isolate OCaml-specific stuff.**
> >>>>
> >>>>   E.g. specific opam-file variables. See ocaml-specific.md <http://ocaml-specific.md/>
> >>>>
> >>>>
> >>>>
> >>>>   - **Separate as plugins**
> >>>>
> >>>>   To open the gate to OPAM without these plugins, or with other ones
> >>>>
> >>>>
> >>>>
> >>>>   - **Compilers as packages.**
> >>>>
> >>>>   This should mostly work now, but needs some tests and strengthening. The
> >>>>   main
> >>>>
> >>>>   thing still to do is to handle the system compiler changes properly ; that
> >>>>
> >>>>   part should be made more generic anyway (see discussion on hooks)
> >>>>
> >>>>
> >>>>
> >>>>   ## Features
> >>>>
> >>>>
> >>>>
> >>>>   - A **provides** field. Generally useful, but particulary so with
> >>>>
> >>>>   compilers-as-packages
> >>>>
> >>>>
> >>>>
> >>>>   - Releasing the **"features" field** for easier package configuration
> >>>>
> >>>>
> >>>>
> >>>>   - **Track installed files**
> >>>>
> >>>>
> >>>>
> >>>>   - **Improve security**: just checking md5s is quite light ; package scripts
> >>>>   can
> >>>>
> >>>>   write anywhere
> >>>>
> >>>>
> >>>>
> >>>>   - **OS-specific handling of dependencies** (eg dependencies on packages
> >>>>   from the
> >>>>
> >>>>   OS) with plugins (#1519)
> >>>>
> >>>>
> >>>>
> >>>>   - Specify and implement **hooks**
> >>>>
> >>>>
> >>>>
> >>>>   - Find a nicer way to **share dev repos** / undoable "pinning sources"
> >>>>
> >>>>
> >>>>
> >>>>   - **Per-switch remotes**
> >>>>
> >>>>
> >>>>
> >>>>   - **Multi-switch packages**
> >>>>
> >>>>
> >>>>
> >>>>   - Support for (automatic generation of) **binary packages**
> >>>>
> >>>>
> >>>>
> >>>>   - Nicer **ocamlfind interaction**
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>   Cheers,
> >>>>
> >>>>   Louis Gesbert
> >>>>
> >>>>   ???????????????????????????????????????????????????????????????????????????
> >>>>
> >>>>   opam-devel mailing list
> >>>>   opam-devel at lists.ocaml.org <mailto:opam-devel at lists.ocaml.org>
> >>>>   http://lists.ocaml.org/listinfo/opam-devel <http://lists.ocaml.org/listinfo/opam-devel>
> >>>>
> >>>>   ???????????????????????????????????????????????????????????????????????????
> >>>>
> >>>>   opam-devel mailing list
> >>>>   opam-devel at lists.ocaml.org <mailto:opam-devel at lists.ocaml.org>
> >>>>   http://lists.ocaml.org/listinfo/opam-devel <http://lists.ocaml.org/listinfo/opam-devel>
> >>>>
> >>>>
> >>>> --
> >>>> Simon
> >>>
> >>>> _______________________________________________
> >>>> opam-devel mailing list
> >>>> opam-devel at lists.ocaml.org <mailto:opam-devel at lists.ocaml.org>
> >>>> http://lists.ocaml.org/listinfo/opam-devel <http://lists.ocaml.org/listinfo/opam-devel>
> >>>
> >>>
> >>> --
> >>> Roberto Di Cosmo
> >>>
> >>> ------------------------------------------------------------------
> >>> Professeur               En delegation a l'INRIA
> >>> PPS                      E-mail: roberto at dicosmo.org <mailto:roberto at dicosmo.org>
> >>> Universite Paris Diderot WWW  : http://www.dicosmo.org <http://www.dicosmo.org/>
> >>> Case 7014                Tel  : ++33-(0)1-57 27 92 20 <tel:%2B%2B33-%280%291-57%2027%2092%2020>
> >>> 5, Rue Thomas Mann
> >>> F-75205 Paris Cedex 13   Identica: http://identi.ca/rdicosmo <http://identi.ca/rdicosmo>
> >>> FRANCE.                  Twitter: http://twitter.com/rdicosmo <http://twitter.com/rdicosmo>
> >>> ------------------------------------------------------------------
> >>> Attachments:
> >>> MIME accepted, Word deprecated
> >>>     http://www.gnu.org/philosophy/no-word-attachments.html <http://www.gnu.org/philosophy/no-word-attachments.html>
> >>> ------------------------------------------------------------------
> >>> Office location:
> >>>
> >>> Bureau 3020 (3rd floor)
> >>> Batiment Sophie Germain
> >>> Avenue de France
> >>> Metro Bibliotheque Francois Mitterrand, ligne 14/RER C
> >>> -----------------------------------------------------------------
> >>> GPG fingerprint 2931 20CE 3A5A 5390 98EC 8BFC FCCA C3BE 39CB 12D3
> >>>
> >>
> >
> > --
> > Roberto Di Cosmo
> >
> > ------------------------------------------------------------------
> > Professeur               En delegation a l'INRIA
> > PPS                      E-mail: roberto at dicosmo.org <mailto:roberto at dicosmo.org>
> > Universite Paris Diderot WWW  : http://www.dicosmo.org <http://www.dicosmo.org/>
> > Case 7014                Tel  : ++33-(0)1-57 27 92 20 <tel:%2B%2B33-%280%291-57%2027%2092%2020>
> > 5, Rue Thomas Mann
> > F-75205 Paris Cedex 13   Identica: http://identi.ca/rdicosmo <http://identi.ca/rdicosmo>
> > FRANCE.                  Twitter: http://twitter.com/rdicosmo <http://twitter.com/rdicosmo>
> > ------------------------------------------------------------------
> > Attachments:
> > MIME accepted, Word deprecated
> >      http://www.gnu.org/philosophy/no-word-attachments.html <http://www.gnu.org/philosophy/no-word-attachments.html>
> > ------------------------------------------------------------------
> > Office location:
> >
> > Bureau 3020 (3rd floor)
> > Batiment Sophie Germain
> > Avenue de France
> > Metro Bibliotheque Francois Mitterrand, ligne 14/RER C
> > -----------------------------------------------------------------
> > GPG fingerprint 2931 20CE 3A5A 5390 98EC 8BFC FCCA C3BE 39CB 12D3
> >
> 
> 
> 
> 
> -- 
> Roberto Di Cosmo
>  
> ------------------------------------------------------------------
> Professeur               En delegation a l'INRIA
> PPS                      E-mail: roberto at dicosmo.org <mailto:roberto at dicosmo.org>
> Universite Paris Diderot WWW  : http://www.dicosmo.org <http://www.dicosmo.org/>
> Case 7014                Tel  : ++33-(0)1-57 27 92 20
> 5, Rue Thomas Mann       
> F-75205 Paris Cedex 13   Identica: http://identi.ca/rdicosmo <http://identi.ca/rdicosmo>
> FRANCE.                  Twitter: http://twitter.com/rdicosmo <http://twitter.com/rdicosmo>
> ------------------------------------------------------------------
> Attachments:
> MIME accepted, Word deprecated
>       http://www.gnu.org/philosophy/no-word-attachments.html <http://www.gnu.org/philosophy/no-word-attachments.html>
> ------------------------------------------------------------------
> Office location:
>  
> Bureau 320 (3rd floor)
> Batiment Sophie Germain
> Avenue de France
> Metro Bibliotheque Francois Mitterrand, ligne 14/RER C
> -----------------------------------------------------------------
> GPG fingerprint 2931 20CE 3A5A 5390 98EC 8BFC FCCA C3BE 39CB 12D3 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20150225/ee04f99b/attachment-0001.html>

From guillaume at claret.me  Wed Feb 25 15:44:45 2015
From: guillaume at claret.me (Guillaume Claret)
Date: Wed, 25 Feb 2015 16:44:45 +0100
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <FD0734C3-2B28-4568-8D78-98DCADC0221E@gazagnaire.org>
References: <1709176.A7TcrPyoj4@agaric>
 <B039BA3F-CBE5-49A4-9B5B-EF77F440BB5E@m4x.org>
 <20150221091603.GA31077@traveler>
 <4D01D3A6-7609-411E-9897-B0A3DF360F44@recoil.org>
 <20150225104837.GA10656@traveler>
 <cd9085108ca69ca01298bec43f2bdc82@whitequark.org>
 <FD0734C3-2B28-4568-8D78-98DCADC0221E@gazagnaire.org>
Message-ID: <54EDEDED.9030402@claret.me>

We are using Git on an OPAM repository to optimize the Coq benches (not 
recompiling the dependencies). But there is a major limitation: Git does 
not see empty directories, what leads to some bugs sometimes.

Maybe other systems like Mercurial have less problems, else there may be 
the solution of dedicated backup tools, like https://github.com/bup/bup

Guillaume

The 02/25/2015 12:20, Thomas Gazagnaire wrote:
>>>> I'm less sure about the viability of recording installed files
>>>> strictly -- I view thatas an advisory rather than enforcement-based
>>>> mechanism.  The reason I like the "make ~/.opam a git store" is that
>>>> its possible for applications to write directly into the store as they
>>>> do right now, but still let us track changes precisely.  In fact, if
>>>> we forbid subshells from writing into `~/.opam/.git`, this would be
>>>> a production grade solution that also offers instant-rollback in case
>>>> of compilation errors (no more waiting for a full recompilation of
>>>> the original dependencies!).
>>
>> Please don't make .opam a git store. Even with one snapshot, it means
>> that my .opam would be 11G instead of 5.5G it currently is. What's worse
>> is that every recompilation or upgrade would balloon the store even more.
>> I can easily anticipate it filling the entirety of my 500GB drive,
>> for example. That's absurd.
>
> It's not so simple, Git uses implicit hash-consing to share as much blobs as possible, so snapshotting is free. This also means that switches will be able to share binary blobs (a long-standing request). All of this needs to be evaluated properly.
>
>> Also, git is pretty slow at handling many large binary files (which is
>> the single worst workload you can use it for). Delta compression
>> takes noticeable time on my blog, which has a mere 500MB of photos.
>
> Git is perfectly capable of handling large blobs if the zlib compression level is set to 0:
>
> $ git config --global core.compression 0
>
> But yes, the delta compression algorithm has been designed for code source files, so it might be non-optimal (ie. `git gc` will not be as efficient as expected). Anyway, version controlling .opam is a nice idea, but it definitely needs some eval and more coner-cases thoughs to make it work nicely for end-users.
>
> Thomas
>
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
>

From anil at recoil.org  Thu Feb 26 15:19:52 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 26 Feb 2015 15:19:52 +0000
Subject: [opam-devel] CommonML: An opinionated build/package/develop
	workflow on top of CommonJS
In-Reply-To: <CAPOA5_58DJ5KYHosNmBJd1CQCpD6GOm-TxJ-s0PgC=odzk_5kA@mail.gmail.com>
References: <CAPOA5_58DJ5KYHosNmBJd1CQCpD6GOm-TxJ-s0PgC=odzk_5kA@mail.gmail.com>
Message-ID: <433C17A8-E598-46DA-A459-74CB2BF37C1E@recoil.org>

On 24 Feb 2015, at 08:28, Jordan W <jordojw at gmail.com> wrote:
> 
> Another thing I like about the `CommonJS` workflow is that developing packages locally is virtually the same as developing against remote dependencies. (`npm link` is much like `opam pin` I'm told). When you `npm install` dependencies, everything is pulled down into a local sandbox(node_modules directory) instead of being installed globally by default. If you want to see what versions your local package is seeing, just traverse the file system! If you want to reinstall, just delete the node_modules directory and then `npm install` again. I believe there is a way to get it to use a global package cache so the node_modules might contain symlinks to those shared packages - but that's just an optimization. There isn't any notion of building in `npm`, so there wouldn't be a build cache I believe.

I very much enjoyed reading through the CommonML code; thanks for documenting it so well!  While I digest the rest, I uploaded a simple prototype of an `opam-boot` tool that does what you describe above.  You can just run `opam-boot` in a directory containing an OPAM file, and it will take care of the rest via a local .opam installation.  This works even if OCaml and OPAM are not installed systemwide.

The tool is available at https://github.com/avsm/opam-boot <https://github.com/avsm/opam-boot>.  It needs a few more minor improvements before release, such as depext support and specifying compiler constraints so that it ensures that the right OCaml version is installed (perhaps via opam-query).

-anil
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20150226/68f9c219/attachment.html>

From anil at recoil.org  Thu Feb 26 16:51:19 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 26 Feb 2015 16:51:19 +0000
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <f43fd1ddb1450f54ca3886b9c39a3982@whitequark.org>
References: <1709176.A7TcrPyoj4@agaric>
 <B039BA3F-CBE5-49A4-9B5B-EF77F440BB5E@m4x.org>
 <20150221091603.GA31077@traveler>
 <4D01D3A6-7609-411E-9897-B0A3DF360F44@recoil.org>
 <20150225104837.GA10656@traveler>
 <cd9085108ca69ca01298bec43f2bdc82@whitequark.org>
 <FD0734C3-2B28-4568-8D78-98DCADC0221E@gazagnaire.org>
 <f43fd1ddb1450f54ca3886b9c39a3982@whitequark.org>
Message-ID: <1DBD9F7A-9F2A-4CB3-9B1C-9E0F29FA9B5A@recoil.org>

On 25 Feb 2015, at 11:23, Peter Zotov <whitequark at whitequark.org> wrote:
> 
> On 2015-02-25 14:20, Thomas Gazagnaire wrote:
>>>>> I'm less sure about the viability of recording installed files
>>>>> strictly -- I view thatas an advisory rather than enforcement-based
>>>>> mechanism.  The reason I like the "make ~/.opam a git store" is that
>>>>> its possible for applications to write directly into the store as they
>>>>> do right now, but still let us track changes precisely.  In fact, if
>>>>> we forbid subshells from writing into `~/.opam/.git`, this would be
>>>>> a production grade solution that also offers instant-rollback in case
>>>>> of compilation errors (no more waiting for a full recompilation of
>>>>> the original dependencies!).
>>> Please don't make .opam a git store. Even with one snapshot, it means
>>> that my .opam would be 11G instead of 5.5G it currently is. What's worse
>>> is that every recompilation or upgrade would balloon the store even more.
>>> I can easily anticipate it filling the entirety of my 500GB drive,
>>> for example. That's absurd.
>> It's not so simple, Git uses implicit hash-consing to share as much
>> blobs as possible, so snapshotting is free. This also means that
>> switches will be able to share binary blobs (a long-standing request).
>> All of this needs to be evaluated properly.
> 
> I know. The issue is that reinstalls tend to change large amounts of
> files. Imagine upgrading Core, or even worse, the compiler. Even
> with delta compression there would be no, or almost no, sharing
> among the biggest blobs; without it, less so.

In this situation, the git base can be rebased after a successful
upgrade to remove the old version of the compiler and save space.

In the event of failure, it would allow for a fast switch back
to the old working version.

-anil


From whitequark at whitequark.org  Thu Feb 26 16:53:12 2015
From: whitequark at whitequark.org (Peter Zotov)
Date: Thu, 26 Feb 2015 19:53:12 +0300
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <1DBD9F7A-9F2A-4CB3-9B1C-9E0F29FA9B5A@recoil.org>
References: <1709176.A7TcrPyoj4@agaric>
 <B039BA3F-CBE5-49A4-9B5B-EF77F440BB5E@m4x.org>
 <20150221091603.GA31077@traveler>
 <4D01D3A6-7609-411E-9897-B0A3DF360F44@recoil.org>
 <20150225104837.GA10656@traveler>
 <cd9085108ca69ca01298bec43f2bdc82@whitequark.org>
 <FD0734C3-2B28-4568-8D78-98DCADC0221E@gazagnaire.org>
 <f43fd1ddb1450f54ca3886b9c39a3982@whitequark.org>
 <1DBD9F7A-9F2A-4CB3-9B1C-9E0F29FA9B5A@recoil.org>
Message-ID: <46847a2d20651a0b02b6746b6609da5c@whitequark.org>

On 2015-02-26 19:51, Anil Madhavapeddy wrote:
> On 25 Feb 2015, at 11:23, Peter Zotov <whitequark at whitequark.org> 
> wrote:
>> 
>> On 2015-02-25 14:20, Thomas Gazagnaire wrote:
>>>>>> I'm less sure about the viability of recording installed files
>>>>>> strictly -- I view thatas an advisory rather than 
>>>>>> enforcement-based
>>>>>> mechanism.  The reason I like the "make ~/.opam a git store" is 
>>>>>> that
>>>>>> its possible for applications to write directly into the store as 
>>>>>> they
>>>>>> do right now, but still let us track changes precisely.  In fact, 
>>>>>> if
>>>>>> we forbid subshells from writing into `~/.opam/.git`, this would 
>>>>>> be
>>>>>> a production grade solution that also offers instant-rollback in 
>>>>>> case
>>>>>> of compilation errors (no more waiting for a full recompilation of
>>>>>> the original dependencies!).
>>>> Please don't make .opam a git store. Even with one snapshot, it 
>>>> means
>>>> that my .opam would be 11G instead of 5.5G it currently is. What's 
>>>> worse
>>>> is that every recompilation or upgrade would balloon the store even 
>>>> more.
>>>> I can easily anticipate it filling the entirety of my 500GB drive,
>>>> for example. That's absurd.
>>> It's not so simple, Git uses implicit hash-consing to share as much
>>> blobs as possible, so snapshotting is free. This also means that
>>> switches will be able to share binary blobs (a long-standing 
>>> request).
>>> All of this needs to be evaluated properly.
>> 
>> I know. The issue is that reinstalls tend to change large amounts of
>> files. Imagine upgrading Core, or even worse, the compiler. Even
>> with delta compression there would be no, or almost no, sharing
>> among the biggest blobs; without it, less so.
> 
> In this situation, the git base can be rebased after a successful
> upgrade to remove the old version of the compiler and save space.
> 
> In the event of failure, it would allow for a fast switch back
> to the old working version.

Do you need git for this? You can do it with hardlinks.

-- 
Peter Zotov

From anil at recoil.org  Thu Feb 26 17:04:05 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 26 Feb 2015 17:04:05 +0000
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <46847a2d20651a0b02b6746b6609da5c@whitequark.org>
References: <1709176.A7TcrPyoj4@agaric>
 <B039BA3F-CBE5-49A4-9B5B-EF77F440BB5E@m4x.org>
 <20150221091603.GA31077@traveler>
 <4D01D3A6-7609-411E-9897-B0A3DF360F44@recoil.org>
 <20150225104837.GA10656@traveler>
 <cd9085108ca69ca01298bec43f2bdc82@whitequark.org>
 <FD0734C3-2B28-4568-8D78-98DCADC0221E@gazagnaire.org>
 <f43fd1ddb1450f54ca3886b9c39a3982@whitequark.org>
 <1DBD9F7A-9F2A-4CB3-9B1C-9E0F29FA9B5A@recoil.org>
 <46847a2d20651a0b02b6746b6609da5c@whitequark.org>
Message-ID: <EC7E6CB8-0F27-40A6-8DBE-DFE464C60CE4@recoil.org>

On 26 Feb 2015, at 16:53, Peter Zotov <whitequark at whitequark.org> wrote:
> 
> On 2015-02-26 19:51, Anil Madhavapeddy wrote:
>> On 25 Feb 2015, at 11:23, Peter Zotov <whitequark at whitequark.org> wrote:
>>> On 2015-02-25 14:20, Thomas Gazagnaire wrote:
>>>>>>> I'm less sure about the viability of recording installed files
>>>>>>> strictly -- I view thatas an advisory rather than enforcement-based
>>>>>>> mechanism.  The reason I like the "make ~/.opam a git store" is that
>>>>>>> its possible for applications to write directly into the store as they
>>>>>>> do right now, but still let us track changes precisely.  In fact, if
>>>>>>> we forbid subshells from writing into `~/.opam/.git`, this would be
>>>>>>> a production grade solution that also offers instant-rollback in case
>>>>>>> of compilation errors (no more waiting for a full recompilation of
>>>>>>> the original dependencies!).
>>>>> Please don't make .opam a git store. Even with one snapshot, it means
>>>>> that my .opam would be 11G instead of 5.5G it currently is. What's worse
>>>>> is that every recompilation or upgrade would balloon the store even more.
>>>>> I can easily anticipate it filling the entirety of my 500GB drive,
>>>>> for example. That's absurd.
>>>> It's not so simple, Git uses implicit hash-consing to share as much
>>>> blobs as possible, so snapshotting is free. This also means that
>>>> switches will be able to share binary blobs (a long-standing request).
>>>> All of this needs to be evaluated properly.
>>> I know. The issue is that reinstalls tend to change large amounts of
>>> files. Imagine upgrading Core, or even worse, the compiler. Even
>>> with delta compression there would be no, or almost no, sharing
>>> among the biggest blobs; without it, less so.
>> In this situation, the git base can be rebased after a successful
>> upgrade to remove the old version of the compiler and save space.
>> In the event of failure, it would allow for a fast switch back
>> to the old working version.
> 
> Do you need git for this? You can do it with hardlinks.

Sure, but that's a dead end with respect to all the other features
I described wanting a git-controlled OPAM for.  As Thomas noted, it
needs some experimentation and evaluation of space usage, but is
worth doing to see if it ends up being an effective way to do
sharing across switches and even machines.

-anil

From louis.gesbert at ocamlpro.com  Fri Feb 27 01:27:27 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Fri, 27 Feb 2015 10:27:27 +0900
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <CAJBwKuUYcn+6HqhiqwmV1KbTKJ3QmDx_ve-2eZ_rpzgwsFUgOw@mail.gmail.com>
References: <1709176.A7TcrPyoj4@agaric>
 <3B5DD7A3-DFF5-488D-9798-19B4159082B0@recoil.org>
 <CAJBwKuUYcn+6HqhiqwmV1KbTKJ3QmDx_ve-2eZ_rpzgwsFUgOw@mail.gmail.com>
Message-ID: <1478356.5BTF51oaMq@agaric>

A plugin mechanism was actually within my possible plans for 1.3, with a range of features in view including depexts, better agnosticity (an OCaml plugin), etc. But that would probably be too much for the next milestone.

On the other hand, the entry point for calling external processes is quite clean now, and already has metadata like working dir specified in the call. So adding sandbox permissions to these parameters, and delegating process startup to an OS-dependent new module handling sandboxes could probably be done without adding too much noise to the code.

Cheers,
Louis

> - Roberto Di Cosmo, 25/02/2015 11:58 -
> I fully share this point of view: having opam in control of the sandbox
> provides much finer grain. So, from a functional standpoint, I would not
> hesitate.
> 
> What makes me hesitate is that we would need to change the opam code for
> this, and take into account all possible different mechanisms according to
> os/platform. This is pretty well doable, if we set up a proper plugin
> mechanism, and we could share code with a plugin-based depext support, but
> it requires more effort :-)
> 
> 
> 2015-02-25 11:54 GMT+01:00 Anil Madhavapeddy <anil at recoil.org>:
> 
> > I'm also not sure how viable activating it for day-to-day testing except
> > by advanced users is.  However, we can at least get the infrastructure in
> > place for CI, which is necessary before we need to decide that.
> >
> > I forgot one point in my previous mail: why this needs to be in OPAM
> > instead
> > of just an external `sandbox` binary.  We don't actually want to sandbox
> > OPAM itself (which we trust!), but rather the packages it invokes.  In my
> > OpenBSD sandbox, I am constraining OPAM and all its future subshells.
> > Instead, I would prefer to have OPAM invoke an external sandbox only when
> > it is doing a build, with sufficient arguments to let it know which dirs
> > are ok to write into.
> >
> > This would let a package only write into the specific subdirectory relevant
> > to the current switch.  This actually bites me quite often with pinning,
> > since a stale OASIS setup.data can cause an installation to write into the
> > wrong switch if a full clean is not done ahead of time.  It also lets us
> > sandbox network access of builds independently of OPAM, which is needed to
> > "unplug" an OPAM package build.
> >
> > cheers,
> > Anil
> >
> > > On 25 Feb 2015, at 10:48, Roberto Di Cosmo <roberto at dicosmo.org> wrote:
> > >
> > > Many thanks Anil, that's precious information:
> > > this is clearly another very OS-specific feature!
> > >
> > > The question is whether we want to add these policies and tools
> > >
> > > - outside opam (pro: no changes to opam, cons: opam has no control)
> > > - or make opam aware of them (pro: opam gets control, cons: various
> > changes to opam)
> > >
> > > For CI testing, the "outside" approach seems to be quite sufficient.
> > >
> > > For day to day use, though, I am not sure...
> > >
> > > On Tue, Feb 24, 2015 at 04:22:31PM +0000, Anil Madhavapeddy wrote:
> > >> Hi Roberto, Simon,
> > >>
> > >> Sandboxing mechanisms have come along quite a bit in the last few years.
> > >> It's important to separate the two threat models that we want, since
> > their
> > >> use can be quite intrusive if made mandatory.  I see two modes of
> > operation:
> > >>
> > >> - A mandatory sandbox in CI testing, where we use it to check that the
> > >>  package isn't violating obvious policies such as network downloads
> > >>  from within the package, or writing outside of ~/.opam or /tmp.
> > >>
> > >> - Optional sandbox for day-to-day use by end users.  This will catch
> > >>  even malicious behaviours, but imposes a rather heavy support burden.
> > >>
> > >> In terms of how to sandbox applications, I know of:
> > >>
> > >> - OpenBSD: I use the built-in systrace system call permissions subsystem
> > >>  already with OPAM.  I've uploaded my local policy to GitHub at:
> > >>     https://gist.github.com/avsm/8293aa52c6cee772a9cb
> > >>  This policy is used by "systrace opam install foo" and pulls up an
> > >>  interactive dialog if an application attempts to write outside of
> > >>  either ~/.opam or /tmp.
> > >>    See: http://www.openbsd.org/cgi-bin/man.cgi?query=systrace
> > >>     or: http://www.citi.umich.edu/u/provos/systrace/
> > >>  paper: http://www.citi.umich.edu/u/provos/papers/systrace.pdf
> > >>
> > >> - FreeBSD: the latest versions have the Capsicum capability system
> > >>  integrated, and the Casper system daemon that grants common operations
> > >>  is also being worked on upstream (e.g. for name resolution)
> > >>   See: https://www.cl.cam.ac.uk/research/security/capsicum/
> > >>
> > >> - Linux: As always with Linux, there are a myriad of possible solutions.
> > >>  I'd discourage the use of LD_PRELOAD based solutions since they don't
> > >>  work in several situations reliably (most obviously with static
> > binaries).
> > >>  The fakeroot-ng project uses ptrace instead, which is more reliable.
> > >>
> > >>  However, the primary thing we want is to only let the package only
> > >>  write into ~/.opam, and so the mount namespace feature (see
> > CLONE_NEWNS)
> > >>  may be sufficient for our needs -- a lightweight filesystem container,
> > >>  in effect.  David Sheets has done some investigation into this for
> > >>  another project we're working on.
> > >>
> > >> - Windows: various, Sandboxie is one solution, but the underlying
> > >>  mechanism is the Windows Integrity Mechanism that was introduced in
> > >>  Vista:   https://msdn.microsoft.com/en-us/library/bb625964.aspx
> > >>  This lets applications drop privileges, and is used by the Chrome
> > >>  sandbox (in general, following what Chrome does for sandboxing is a
> > >>  good idea, since their needs are a superset of ours).
> > >>
> > >> - MacOS X: The App Sandbox requires code signing, but does almost
> > >>  exactly what we need: it gives each app/user a unique directory
> > >>  into which they can write files.  All we should need to do is to
> > >>  set OPAMROOT to that directory, and everything should just work.
> > >>  In practise, this requires some investigation into how the App
> > >>  signing infrastructure works, since I've only seen it done for
> > >>  bundles and not for CLI tools.
> > >>
> > >> This is a quick off-the-top-of-my-head survey, but I think it's viable
> > >> and useful for us to build an `opam sandbox` in the same style as
> > >> `opam depext` that attempts to invoke a relevant sandboxing mechanism
> > >> depending on the OS.  In the longer term, this will really serve us
> > >> well as the package database grows.
> > >>
> > >> I'm less sure about the viability of recording installed files
> > >> strictly -- I view thatas an advisory rather than enforcement-based
> > >> mechanism.  The reason I like the "make ~/.opam a git store" is that
> > >> its possible for applications to write directly into the store as they
> > >> do right now, but still let us track changes precisely.  In fact, if
> > >> we forbid subshells from writing into `~/.opam/.git`, this would be
> > >> a production grade solution that also offers instant-rollback in case
> > >> of compilation errors (no more waiting for a full recompilation of
> > >> the original dependencies!).
> > >>
> > >> cheers,
> > >> Anil
> > >>
> > >>> On 21 Feb 2015, at 09:16, Roberto Di Cosmo <roberto at dicosmo.org>
> > wrote:
> > >>>
> > >>> Anil, Simon, can you provide more details on the sandboxing mechanisms
> > you know of?
> > >>>
> > >>> We looked into all this for Mancoosi years ago; the most complete tool
> > >>> out there was installwatch (now checkinstall) that hijacks filesystem
> > modifying
> > >>> commands using the standard LD_PRELOAD trick and a wrapper for system
> > calls.
> > >>> Checkinstall does not alter user priviledges, though, so one sometimes
> > needed
> > >>> a combination of fakeroot (that only alter user priviledges) with it.
> > >>>
> > >>> The best approach I know of was described in a Master thesis from ...
> > Cambridge
> > >>> :-) It was under the supervision of Peter Sewell, and used the ptrace
> > mechanism
> > >>> instead of the LD_PRELOAD trick, because LD_PRELOAD is blind to
> > statically
> > >>> compiled binaries that have system calls hardcoded, while ptrace gets
> > them all.
> > >>>
> > >>> The dissertation is still available today here
> > http://robot101.net/files/diss.ps.gz
> > >>> and contains a very nice discussion of the issues related to
> > monitoring and
> > >>> rolling back file system changes performed by a command in the Linux
> > system.
> > >>> The source code is also available here
> > http://robot101.net/files/trace.tar.gz
> > >>> and one can get in touch with Robert Mcqueen that will be delighted to
> > see his
> > >>> work being used.
> > >>>
> > >>> Since all this is almost 10 years old, I suppose many exciting new
> > ideas, tools
> > >>> and approaches surfaced in the meantime, and I'd really like to know
> > more.
> > >>>
> > >>> Cheers
> > >>>
> > >>> --
> > >>> Roberto
> > >>>
> > >>> On Sat, Feb 21, 2015 at 09:37:07AM +0100, Simon Cruanes wrote:
> > >>>> Sandboxing the build would also be a big security improvement. I
> > think cabal
> > >>>> now does it, and signing packages doesn't protect against malicious
> > or buggy
> > >>>> packages (see: bumblebee's uninstall target). That also goes hand in
> > hand with
> > >>>> file tracking. I don't know how difficult it is, though.
> > >>>>
> > >>>> Cheers!
> > >>>>
> > >>>> Le 21 f?vrier 2015 05:01:56 UTC+01:00, Louis Gesbert
> > >>>> <louis.gesbert at ocamlpro.com> a ?crit :
> > >>>>
> > >>>>   With 1.2.1 almost out of the door, time has come to review the
> > roadmap discussed back in December and choose where we'll be going for 1.3.
> > Original mail attached for reference.
> > >>>>
> > >>>>
> > >>>>   The topic that is burning hot at the moment is, specially after the
> > Debian Haskell build host has been compromised, security: we have no
> > signing at all at the moment, and we need to improve on this before it
> > becomes a problem. TUF [1] has devised a sane amount of rules for
> > repository management and signing that should make it easier to get it
> > right in OPAM. Hannes has mentionned writing an OCaml implementation for
> > TUF, which could get very helpful.
> > >>>>
> > >>>>
> > >>>>   Also of importance is Windows support. It should at least be
> > straighforward and documented to get a basic Cygwin setup working. That
> > goes with adding automated tests (appveyor can now be added in Github
> > alongside Travis). Related is cleaning up external command usage (even if
> > not really justified by a Windows
> > >>>>   port only, as David Allsopp pointed out) -- replacing curl calls by
> > cohttp, use ocaml-fileutils...
> > >>>>
> > >>>>
> > >>>>   These are the other main features, that'll probably take more time
> > if we are to focus eg. on security:
> > >>>>
> > >>>>   * a plugin mechanism with plugins for example for OCaml (for better
> > agnosticity), external dependency handling [2], documentation generation...
> > >>>>
> > >>>>   * a 'provides:' field in OPAM files [3]. This is a loose
> > requirement if we want to switch the repository to have OCaml itself in a
> > package (which is already possible, but the system compiler may yet be an
> > issue).
> > >>>>
> > >>>>   * More flexible switch handling (multi-switch packages, per-switch
> > remotes, layered switches for cross-compilation...)
> > >>>>
> > >>>>   * Tracking of files installed by packages. While unrelated to repo
> > signing, this might have some security implications, so we might want to
> > bring it in.
> > >>>>
> > >>>>   * With file tracking, generating a binary repo (with some
> > limitations) could be quite
> > >>>>   straight-forward.
> > >>>>
> > >>>>
> > >>>>   Which of these do you think is most important ? Have I forgotten
> > anything ?
> > >>>>
> > >>>>   Cheers,
> > >>>>   Louis
> > >>>>
> > >>>>
> > >>>>   [1] http://theupdateframework.com/
> > >>>>   [2]
> > https://github.com/ocaml/opam/blob/master/doc/design/depexts-plugins
> > >>>>   [3]
> > https://github.com/ocaml/opam/blob/master/doc/design/provides.md
> > >>>>
> > >>>>   message suivi
> > >>>>
> > >>>>     De :   Louis Gesbert
> > >>>>     ? :    opam-devel at lists.ocaml.org
> > >>>>   Envoy? : Wed Dec 17 11:07:40 UTC+01:00 2014
> > >>>>   Objet :  [opam-devel] OPAM Roadmap -- what next ?
> > >>>>
> > >>>>   Hi all,
> > >>>>
> > >>>>
> > >>>>
> > >>>>   with some lag after the 1.2 release, I'd like to open some space
> > for a
> > >>>>   collective discussion of the priorities for where the energies
> > should go
> > >>>>   next. We have mainly 3 directions for improvements: first,
> > portability,
> > >>>>   with the main goal of a Windows version. Second, agnosticity, with
> > the goal
> > >>>>   to make OPAM more generic, and try and open it to users outside of
> > the
> > >>>>   OCaml community (wouldn't OPAM for Haskell be fun ?). Third, there
> > are
> > >>>>   always lots of features and improvements that have been asked for,
> > and
> > >>>>   would improve the experience of current users.
> > >>>>
> > >>>>
> > >>>>
> > >>>>   So here is a summary of what I've gathered. Feel free to add your
> > own.
> > >>>>
> > >>>>
> > >>>>
> > >>>>
> > >>>>
> > >>>>
> > >>>>
> > >>>>   ## Portability
> > >>>>
> > >>>>
> > >>>>
> > >>>>   - **Rewrite parallel command engine.** / done.
> > >>>>
> > >>>>
> > >>>>
> > >>>>   - **Native system manipulation (cp, rm, curl...).**
> > >>>>
> > >>>>   These are mostly done through calls to the shell or external
> > programs. It's
> > >>>>
> > >>>>   not very pretty but quite pragmatic actually... until we want to
> > run on
> > >>>>
> > >>>>   Windows without Cygwin. Anyway, this wouldn't be the end of
> > portability
> > >>>>
> > >>>>   issues.
> > >>>>
> > >>>>
> > >>>>
> > >>>>   - **Windows support.**
> > >>>>
> > >>>>   for OPAM itself to begin with. This should be pretty close.
> > >>>>
> > >>>>
> > >>>>
> > >>>>   - **Packages on Windows.**
> > >>>>
> > >>>>   Locate common issues and attempt to find generic fixes.
> > >>>>
> > >>>>
> > >>>>
> > >>>>   - Allow **direct use of more solvers** or solver servers.
> > >>>>
> > >>>>
> > >>>>
> > >>>>   - **Support cross-compilation**
> > >>>>
> > >>>>   This is quite an open issue at the moment.
> > >>>>
> > >>>>
> > >>>>
> > >>>>   ## Agnosticity
> > >>>>
> > >>>>
> > >>>>
> > >>>>   - **Isolate OCaml-specific stuff.**
> > >>>>
> > >>>>   E.g. specific opam-file variables. See ocaml-specific.md
> > >>>>
> > >>>>
> > >>>>
> > >>>>   - **Separate as plugins**
> > >>>>
> > >>>>   To open the gate to OPAM without these plugins, or with other ones
> > >>>>
> > >>>>
> > >>>>
> > >>>>   - **Compilers as packages.**
> > >>>>
> > >>>>   This should mostly work now, but needs some tests and
> > strengthening. The
> > >>>>   main
> > >>>>
> > >>>>   thing still to do is to handle the system compiler changes properly
> > ; that
> > >>>>
> > >>>>   part should be made more generic anyway (see discussion on hooks)
> > >>>>
> > >>>>
> > >>>>
> > >>>>   ## Features
> > >>>>
> > >>>>
> > >>>>
> > >>>>   - A **provides** field. Generally useful, but particulary so with
> > >>>>
> > >>>>   compilers-as-packages
> > >>>>
> > >>>>
> > >>>>
> > >>>>   - Releasing the **"features" field** for easier package
> > configuration
> > >>>>
> > >>>>
> > >>>>
> > >>>>   - **Track installed files**
> > >>>>
> > >>>>
> > >>>>
> > >>>>   - **Improve security**: just checking md5s is quite light ; package
> > scripts
> > >>>>   can
> > >>>>
> > >>>>   write anywhere
> > >>>>
> > >>>>
> > >>>>
> > >>>>   - **OS-specific handling of dependencies** (eg dependencies on
> > packages
> > >>>>   from the
> > >>>>
> > >>>>   OS) with plugins (#1519)
> > >>>>
> > >>>>
> > >>>>
> > >>>>   - Specify and implement **hooks**
> > >>>>
> > >>>>
> > >>>>
> > >>>>   - Find a nicer way to **share dev repos** / undoable "pinning
> > sources"
> > >>>>
> > >>>>
> > >>>>
> > >>>>   - **Per-switch remotes**
> > >>>>
> > >>>>
> > >>>>
> > >>>>   - **Multi-switch packages**
> > >>>>
> > >>>>
> > >>>>
> > >>>>   - Support for (automatic generation of) **binary packages**
> > >>>>
> > >>>>
> > >>>>
> > >>>>   - Nicer **ocamlfind interaction**
> > >>>>
> > >>>>
> > >>>>
> > >>>>
> > >>>>
> > >>>>
> > >>>>
> > >>>>   Cheers,
> > >>>>
> > >>>>   Louis Gesbert
> > >>>>
> > >>>>
> >  ???????????????????????????????????????????????????????????????????????????
> > >>>>
> > >>>>   opam-devel mailing list
> > >>>>   opam-devel at lists.ocaml.org
> > >>>>   http://lists.ocaml.org/listinfo/opam-devel
> > >>>>
> > >>>>
> >  ???????????????????????????????????????????????????????????????????????????
> > >>>>
> > >>>>   opam-devel mailing list
> > >>>>   opam-devel at lists.ocaml.org
> > >>>>   http://lists.ocaml.org/listinfo/opam-devel
> > >>>>
> > >>>>
> > >>>> --
> > >>>> Simon
> > >>>
> > >>>> _______________________________________________
> > >>>> opam-devel mailing list
> > >>>> opam-devel at lists.ocaml.org
> > >>>> http://lists.ocaml.org/listinfo/opam-devel
> > >>>
> > >>>
> > >>> --
> > >>> Roberto Di Cosmo
> > >>>
> > >>> ------------------------------------------------------------------
> > >>> Professeur               En delegation a l'INRIA
> > >>> PPS                      E-mail: roberto at dicosmo.org
> > >>> Universite Paris Diderot WWW  : http://www.dicosmo.org
> > >>> Case 7014                Tel  : ++33-(0)1-57 27 92 20
> > >>> 5, Rue Thomas Mann
> > >>> F-75205 Paris Cedex 13   Identica: http://identi.ca/rdicosmo
> > >>> FRANCE.                  Twitter: http://twitter.com/rdicosmo
> > >>> ------------------------------------------------------------------
> > >>> Attachments:
> > >>> MIME accepted, Word deprecated
> > >>>     http://www.gnu.org/philosophy/no-word-attachments.html
> > >>> ------------------------------------------------------------------
> > >>> Office location:
> > >>>
> > >>> Bureau 3020 (3rd floor)
> > >>> Batiment Sophie Germain
> > >>> Avenue de France
> > >>> Metro Bibliotheque Francois Mitterrand, ligne 14/RER C
> > >>> -----------------------------------------------------------------
> > >>> GPG fingerprint 2931 20CE 3A5A 5390 98EC 8BFC FCCA C3BE 39CB 12D3
> > >>>
> > >>
> > >
> > > --
> > > Roberto Di Cosmo
> > >
> > > ------------------------------------------------------------------
> > > Professeur               En delegation a l'INRIA
> > > PPS                      E-mail: roberto at dicosmo.org
> > > Universite Paris Diderot WWW  : http://www.dicosmo.org
> > > Case 7014                Tel  : ++33-(0)1-57 27 92 20
> > > 5, Rue Thomas Mann
> > > F-75205 Paris Cedex 13   Identica: http://identi.ca/rdicosmo
> > > FRANCE.                  Twitter: http://twitter.com/rdicosmo
> > > ------------------------------------------------------------------
> > > Attachments:
> > > MIME accepted, Word deprecated
> > >      http://www.gnu.org/philosophy/no-word-attachments.html
> > > ------------------------------------------------------------------
> > > Office location:
> > >
> > > Bureau 3020 (3rd floor)
> > > Batiment Sophie Germain
> > > Avenue de France
> > > Metro Bibliotheque Francois Mitterrand, ligne 14/RER C
> > > -----------------------------------------------------------------
> > > GPG fingerprint 2931 20CE 3A5A 5390 98EC 8BFC FCCA C3BE 39CB 12D3
> > >
> >
> >
> 
> 
> 

From louis.gesbert at ocamlpro.com  Fri Feb 27 01:37:19 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Fri, 27 Feb 2015 10:37:19 +0900
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <4D01D3A6-7609-411E-9897-B0A3DF360F44@recoil.org>
References: <1709176.A7TcrPyoj4@agaric> <20150221091603.GA31077@traveler>
 <4D01D3A6-7609-411E-9897-B0A3DF360F44@recoil.org>
Message-ID: <5483974.UTlWivIJto@agaric>

Just a quick remark: I would rather have the sandboxing done at the switch prefix level rather than at the OPAMROOT level: that's where package scripts should be restricted, and, in particular for the git-tracking feature, you probably don't want to rollback your `opam update`s, and tracking installs for each switch sounds more friendly.

This would probably imply it's done within OPAM. Hm, and you don't get cross-switch sharing to save git space.

> - Anil Madhavapeddy, 24/02/2015 16:22 -
> Hi Roberto, Simon,
> 
> Sandboxing mechanisms have come along quite a bit in the last few years.
> It's important to separate the two threat models that we want, since their
> use can be quite intrusive if made mandatory.  I see two modes of operation:
> 
> - A mandatory sandbox in CI testing, where we use it to check that the
>   package isn't violating obvious policies such as network downloads
>   from within the package, or writing outside of ~/.opam or /tmp.
> 
> - Optional sandbox for day-to-day use by end users.  This will catch
>   even malicious behaviours, but imposes a rather heavy support burden.
> 
> In terms of how to sandbox applications, I know of:
> 
> - OpenBSD: I use the built-in systrace system call permissions subsystem
>   already with OPAM.  I've uploaded my local policy to GitHub at:
>      https://gist.github.com/avsm/8293aa52c6cee772a9cb
>   This policy is used by "systrace opam install foo" and pulls up an
>   interactive dialog if an application attempts to write outside of
>   either ~/.opam or /tmp.
>     See: http://www.openbsd.org/cgi-bin/man.cgi?query=systrace
>      or: http://www.citi.umich.edu/u/provos/systrace/
>   paper: http://www.citi.umich.edu/u/provos/papers/systrace.pdf
> 
> - FreeBSD: the latest versions have the Capsicum capability system
>   integrated, and the Casper system daemon that grants common operations
>   is also being worked on upstream (e.g. for name resolution)
>    See: https://www.cl.cam.ac.uk/research/security/capsicum/
> 
> - Linux: As always with Linux, there are a myriad of possible solutions.
>   I'd discourage the use of LD_PRELOAD based solutions since they don't
>   work in several situations reliably (most obviously with static binaries).
>   The fakeroot-ng project uses ptrace instead, which is more reliable.
> 
>   However, the primary thing we want is to only let the package only
>   write into ~/.opam, and so the mount namespace feature (see CLONE_NEWNS)
>   may be sufficient for our needs -- a lightweight filesystem container,
>   in effect.  David Sheets has done some investigation into this for
>   another project we're working on.
> 
> - Windows: various, Sandboxie is one solution, but the underlying
>   mechanism is the Windows Integrity Mechanism that was introduced in
>   Vista:   https://msdn.microsoft.com/en-us/library/bb625964.aspx
>   This lets applications drop privileges, and is used by the Chrome
>   sandbox (in general, following what Chrome does for sandboxing is a
>   good idea, since their needs are a superset of ours).
> 
> - MacOS X: The App Sandbox requires code signing, but does almost
>   exactly what we need: it gives each app/user a unique directory
>   into which they can write files.  All we should need to do is to
>   set OPAMROOT to that directory, and everything should just work.
>   In practise, this requires some investigation into how the App
>   signing infrastructure works, since I've only seen it done for
>   bundles and not for CLI tools.
> 
> This is a quick off-the-top-of-my-head survey, but I think it's viable
> and useful for us to build an `opam sandbox` in the same style as
> `opam depext` that attempts to invoke a relevant sandboxing mechanism
> depending on the OS.  In the longer term, this will really serve us
> well as the package database grows.
> 
> I'm less sure about the viability of recording installed files
> strictly -- I view thatas an advisory rather than enforcement-based
> mechanism.  The reason I like the "make ~/.opam a git store" is that
> its possible for applications to write directly into the store as they
> do right now, but still let us track changes precisely.  In fact, if
> we forbid subshells from writing into `~/.opam/.git`, this would be
> a production grade solution that also offers instant-rollback in case
> of compilation errors (no more waiting for a full recompilation of 
> the original dependencies!).
> 
> cheers,
> Anil
> 
> > On 21 Feb 2015, at 09:16, Roberto Di Cosmo <roberto at dicosmo.org> wrote:
> > 
> > Anil, Simon, can you provide more details on the sandboxing mechanisms you know of?
> > 
> > We looked into all this for Mancoosi years ago; the most complete tool
> > out there was installwatch (now checkinstall) that hijacks filesystem modifying
> > commands using the standard LD_PRELOAD trick and a wrapper for system calls.
> > Checkinstall does not alter user priviledges, though, so one sometimes needed
> > a combination of fakeroot (that only alter user priviledges) with it.
> > 
> > The best approach I know of was described in a Master thesis from ... Cambridge
> > :-) It was under the supervision of Peter Sewell, and used the ptrace mechanism
> > instead of the LD_PRELOAD trick, because LD_PRELOAD is blind to statically
> > compiled binaries that have system calls hardcoded, while ptrace gets them all.
> > 
> > The dissertation is still available today here http://robot101.net/files/diss.ps.gz
> > and contains a very nice discussion of the issues related to monitoring and
> > rolling back file system changes performed by a command in the Linux system.
> > The source code is also available here http://robot101.net/files/trace.tar.gz
> > and one can get in touch with Robert Mcqueen that will be delighted to see his
> > work being used.
> > 
> > Since all this is almost 10 years old, I suppose many exciting new ideas, tools
> > and approaches surfaced in the meantime, and I'd really like to know more.
> > 
> > Cheers
> > 
> > --
> > Roberto
> > 
> > On Sat, Feb 21, 2015 at 09:37:07AM +0100, Simon Cruanes wrote:
> >> Sandboxing the build would also be a big security improvement. I think cabal
> >> now does it, and signing packages doesn't protect against malicious or buggy
> >> packages (see: bumblebee's uninstall target). That also goes hand in hand with
> >> file tracking. I don't know how difficult it is, though.
> >> 
> >> Cheers!
> >> 
> >> Le 21 f?vrier 2015 05:01:56 UTC+01:00, Louis Gesbert
> >> <louis.gesbert at ocamlpro.com> a ?crit :
> >> 
> >>    With 1.2.1 almost out of the door, time has come to review the roadmap discussed back in December and choose where we'll be going for 1.3. Original mail attached for reference.
> >> 
> >> 
> >>    The topic that is burning hot at the moment is, specially after the Debian Haskell build host has been compromised, security: we have no signing at all at the moment, and we need to improve on this before it becomes a problem. TUF [1] has devised a sane amount of rules for repository management and signing that should make it easier to get it right in OPAM. Hannes has mentionned writing an OCaml implementation for TUF, which could get very helpful.
> >> 
> >> 
> >>    Also of importance is Windows support. It should at least be straighforward and documented to get a basic Cygwin setup working. That goes with adding automated tests (appveyor can now be added in Github alongside Travis). Related is cleaning up external command usage (even if not really justified by a Windows
> >>    port only, as David Allsopp pointed out) -- replacing curl calls by cohttp, use ocaml-fileutils...
> >> 
> >> 
> >>    These are the other main features, that'll probably take more time if we are to focus eg. on security:
> >> 
> >>    * a plugin mechanism with plugins for example for OCaml (for better agnosticity), external dependency handling [2], documentation generation...
> >> 
> >>    * a 'provides:' field in OPAM files [3]. This is a loose requirement if we want to switch the repository to have OCaml itself in a package (which is already possible, but the system compiler may yet be an issue).
> >> 
> >>    * More flexible switch handling (multi-switch packages, per-switch remotes, layered switches for cross-compilation...)
> >> 
> >>    * Tracking of files installed by packages. While unrelated to repo signing, this might have some security implications, so we might want to bring it in.
> >> 
> >>    * With file tracking, generating a binary repo (with some limitations) could be quite
> >>    straight-forward.
> >> 
> >> 
> >>    Which of these do you think is most important ? Have I forgotten anything ?
> >> 
> >>    Cheers,
> >>    Louis
> >> 
> >> 
> >>    [1] http://theupdateframework.com/
> >>    [2] https://github.com/ocaml/opam/blob/master/doc/design/depexts-plugins
> >>    [3] https://github.com/ocaml/opam/blob/master/doc/design/provides.md
> >> 
> >>    message suivi
> >> 
> >>      De :   Louis Gesbert
> >>      ? :    opam-devel at lists.ocaml.org
> >>    Envoy? : Wed Dec 17 11:07:40 UTC+01:00 2014
> >>    Objet :  [opam-devel] OPAM Roadmap -- what next ?
> >> 
> >>    Hi all,
> >> 
> >> 
> >> 
> >>    with some lag after the 1.2 release, I'd like to open some space for a
> >>    collective discussion of the priorities for where the energies should go
> >>    next. We have mainly 3 directions for improvements: first, portability,
> >>    with the main goal of a Windows version. Second, agnosticity, with the goal
> >>    to make OPAM more generic, and try and open it to users outside of the
> >>    OCaml community (wouldn't OPAM for Haskell be fun ?). Third, there are
> >>    always lots of features and improvements that have been asked for, and
> >>    would improve the experience of current users.
> >> 
> >> 
> >> 
> >>    So here is a summary of what I've gathered. Feel free to add your own.
> >> 
> >> 
> >> 
> >> 
> >> 
> >> 
> >> 
> >>    ## Portability
> >> 
> >> 
> >> 
> >>    - **Rewrite parallel command engine.** / done.
> >> 
> >> 
> >> 
> >>    - **Native system manipulation (cp, rm, curl...).**
> >> 
> >>    These are mostly done through calls to the shell or external programs. It's
> >> 
> >>    not very pretty but quite pragmatic actually... until we want to run on
> >> 
> >>    Windows without Cygwin. Anyway, this wouldn't be the end of portability
> >> 
> >>    issues.
> >> 
> >> 
> >> 
> >>    - **Windows support.**
> >> 
> >>    for OPAM itself to begin with. This should be pretty close.
> >> 
> >> 
> >> 
> >>    - **Packages on Windows.**
> >> 
> >>    Locate common issues and attempt to find generic fixes.
> >> 
> >> 
> >> 
> >>    - Allow **direct use of more solvers** or solver servers.
> >> 
> >> 
> >> 
> >>    - **Support cross-compilation**
> >> 
> >>    This is quite an open issue at the moment.
> >> 
> >> 
> >> 
> >>    ## Agnosticity
> >> 
> >> 
> >> 
> >>    - **Isolate OCaml-specific stuff.**
> >> 
> >>    E.g. specific opam-file variables. See ocaml-specific.md
> >> 
> >> 
> >> 
> >>    - **Separate as plugins**
> >> 
> >>    To open the gate to OPAM without these plugins, or with other ones
> >> 
> >> 
> >> 
> >>    - **Compilers as packages.**
> >> 
> >>    This should mostly work now, but needs some tests and strengthening. The
> >>    main
> >> 
> >>    thing still to do is to handle the system compiler changes properly ; that
> >> 
> >>    part should be made more generic anyway (see discussion on hooks)
> >> 
> >> 
> >> 
> >>    ## Features
> >> 
> >> 
> >> 
> >>    - A **provides** field. Generally useful, but particulary so with
> >> 
> >>    compilers-as-packages
> >> 
> >> 
> >> 
> >>    - Releasing the **"features" field** for easier package configuration
> >> 
> >> 
> >> 
> >>    - **Track installed files**
> >> 
> >> 
> >> 
> >>    - **Improve security**: just checking md5s is quite light ; package scripts
> >>    can
> >> 
> >>    write anywhere
> >> 
> >> 
> >> 
> >>    - **OS-specific handling of dependencies** (eg dependencies on packages
> >>    from the
> >> 
> >>    OS) with plugins (#1519)
> >> 
> >> 
> >> 
> >>    - Specify and implement **hooks**
> >> 
> >> 
> >> 
> >>    - Find a nicer way to **share dev repos** / undoable "pinning sources"
> >> 
> >> 
> >> 
> >>    - **Per-switch remotes**
> >> 
> >> 
> >> 
> >>    - **Multi-switch packages**
> >> 
> >> 
> >> 
> >>    - Support for (automatic generation of) **binary packages**
> >> 
> >> 
> >> 
> >>    - Nicer **ocamlfind interaction**
> >> 
> >> 
> >> 
> >> 
> >> 
> >> 
> >> 
> >>    Cheers,
> >> 
> >>    Louis Gesbert
> >> 
> >>    ???????????????????????????????????????????????????????????????????????????
> >> 
> >>    opam-devel mailing list
> >>    opam-devel at lists.ocaml.org
> >>    http://lists.ocaml.org/listinfo/opam-devel
> >> 
> >>    ???????????????????????????????????????????????????????????????????????????
> >> 
> >>    opam-devel mailing list
> >>    opam-devel at lists.ocaml.org
> >>    http://lists.ocaml.org/listinfo/opam-devel
> >> 
> >> 
> >> --
> >> Simon
> > 
> >> _______________________________________________
> >> opam-devel mailing list
> >> opam-devel at lists.ocaml.org
> >> http://lists.ocaml.org/listinfo/opam-devel
> > 
> > 
> 

From louis.gesbert at ocamlpro.com  Fri Feb 27 06:54:20 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Fri, 27 Feb 2015 15:54:20 +0900
Subject: [opam-devel] CommonML: An opinionated build/package/develop
 workflow on top of CommonJS
In-Reply-To: <433C17A8-E598-46DA-A459-74CB2BF37C1E@recoil.org>
References: <CAPOA5_58DJ5KYHosNmBJd1CQCpD6GOm-TxJ-s0PgC=odzk_5kA@mail.gmail.com>
 <433C17A8-E598-46DA-A459-74CB2BF37C1E@recoil.org>
Message-ID: <4219236.JrSshv2Dpl@agaric>

Thanks indeed, this is a useful insight in the npm-like workflow and well worth our attention.

> I very much enjoyed reading through the CommonML code; thanks for documenting it so well!  While I digest the rest, I uploaded a simple prototype of an `opam-boot` tool that does what you describe above.  You can just run `opam-boot` in a directory containing an OPAM file, and it will take care of the rest via a local .opam installation.  This works even if OCaml and OPAM are not installed systemwide.

I have been thinking for a while that allowing to set an arbitrary prefix at switch creation time could be very useful, and in this case that would allow an interesting hybrid approach: you would still have a `~/.opam` holding the repository cache, temporary build directories and that kind of stuff, but you could create a switch for your project that would hold its binaries in a sub-directory of your project. Using something like `opam-manager`, that switch could even be used automatically when running command from within the project, and we could imagine other tools that facilitate this a lot if it were to become popular.

Then I'd also try to be careful on the different mindset we could fine in compiled vs. interpreted? language users: for example, if we provide a similar workflow to npm with the notable difference that it's much, much slower (I imagine recompiling OCaml for every project) and space hungry, that may not ultimately be a huge benefit in terms of image.



Cheers,
Louis

? whatever that could mean nowadays, but you get what I mean.

> 
> The tool is available at https://github.com/avsm/opam-boot <https://github.com/avsm/opam-boot>.  It needs a few more minor improvements before release, such as depext support and specifying compiler constraints so that it ensures that the right OCaml version is installed (perhaps via opam-query).
> 
> -anil

From roberto at dicosmo.org  Fri Feb 27 08:20:31 2015
From: roberto at dicosmo.org (Roberto Di Cosmo)
Date: Fri, 27 Feb 2015 09:20:31 +0100
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <1478356.5BTF51oaMq@agaric>
References: <1709176.A7TcrPyoj4@agaric>
 <3B5DD7A3-DFF5-488D-9798-19B4159082B0@recoil.org>
 <CAJBwKuUYcn+6HqhiqwmV1KbTKJ3QmDx_ve-2eZ_rpzgwsFUgOw@mail.gmail.com>
 <1478356.5BTF51oaMq@agaric>
Message-ID: <20150227082031.GA10778@traveler>

Ok, so this really seems the moment to start the pluging infrastructure.

A first draft proposal for the depext plugin API is in 

   doc/design/depexts-plugins

we may add one for the sandpoxing API, and then see
what can be shared.


On Fri, Feb 27, 2015 at 10:27:27AM +0900, Louis Gesbert wrote:
> A plugin mechanism was actually within my possible plans for 1.3, with a range of features in view including depexts, better agnosticity (an OCaml plugin), etc. But that would probably be too much for the next milestone.
> 
> On the other hand, the entry point for calling external processes is quite clean now, and already has metadata like working dir specified in the call. So adding sandbox permissions to these parameters, and delegating process startup to an OS-dependent new module handling sandboxes could probably be done without adding too much noise to the code.
> 
> Cheers,
> Louis
> 
> > - Roberto Di Cosmo, 25/02/2015 11:58 -
> > I fully share this point of view: having opam in control of the sandbox
> > provides much finer grain. So, from a functional standpoint, I would not
> > hesitate.
> > 
> > What makes me hesitate is that we would need to change the opam code for
> > this, and take into account all possible different mechanisms according to
> > os/platform. This is pretty well doable, if we set up a proper plugin
> > mechanism, and we could share code with a plugin-based depext support, but
> > it requires more effort :-)
> > 
> > 
> > 2015-02-25 11:54 GMT+01:00 Anil Madhavapeddy <anil at recoil.org>:
> > 
> > > I'm also not sure how viable activating it for day-to-day testing except
> > > by advanced users is.  However, we can at least get the infrastructure in
> > > place for CI, which is necessary before we need to decide that.
> > >
> > > I forgot one point in my previous mail: why this needs to be in OPAM
> > > instead
> > > of just an external `sandbox` binary.  We don't actually want to sandbox
> > > OPAM itself (which we trust!), but rather the packages it invokes.  In my
> > > OpenBSD sandbox, I am constraining OPAM and all its future subshells.
> > > Instead, I would prefer to have OPAM invoke an external sandbox only when
> > > it is doing a build, with sufficient arguments to let it know which dirs
> > > are ok to write into.
> > >
> > > This would let a package only write into the specific subdirectory relevant
> > > to the current switch.  This actually bites me quite often with pinning,
> > > since a stale OASIS setup.data can cause an installation to write into the
> > > wrong switch if a full clean is not done ahead of time.  It also lets us
> > > sandbox network access of builds independently of OPAM, which is needed to
> > > "unplug" an OPAM package build.
> > >
> > > cheers,
> > > Anil
> > >
> > > > On 25 Feb 2015, at 10:48, Roberto Di Cosmo <roberto at dicosmo.org> wrote:
> > > >
> > > > Many thanks Anil, that's precious information:
> > > > this is clearly another very OS-specific feature!
> > > >
> > > > The question is whether we want to add these policies and tools
> > > >
> > > > - outside opam (pro: no changes to opam, cons: opam has no control)
> > > > - or make opam aware of them (pro: opam gets control, cons: various
> > > changes to opam)
> > > >
> > > > For CI testing, the "outside" approach seems to be quite sufficient.
> > > >
> > > > For day to day use, though, I am not sure...
> > > >
> > > > On Tue, Feb 24, 2015 at 04:22:31PM +0000, Anil Madhavapeddy wrote:
> > > >> Hi Roberto, Simon,
> > > >>
> > > >> Sandboxing mechanisms have come along quite a bit in the last few years.
> > > >> It's important to separate the two threat models that we want, since
> > > their
> > > >> use can be quite intrusive if made mandatory.  I see two modes of
> > > operation:
> > > >>
> > > >> - A mandatory sandbox in CI testing, where we use it to check that the
> > > >>  package isn't violating obvious policies such as network downloads
> > > >>  from within the package, or writing outside of ~/.opam or /tmp.
> > > >>
> > > >> - Optional sandbox for day-to-day use by end users.  This will catch
> > > >>  even malicious behaviours, but imposes a rather heavy support burden.
> > > >>
> > > >> In terms of how to sandbox applications, I know of:
> > > >>
> > > >> - OpenBSD: I use the built-in systrace system call permissions subsystem
> > > >>  already with OPAM.  I've uploaded my local policy to GitHub at:
> > > >>     https://gist.github.com/avsm/8293aa52c6cee772a9cb
> > > >>  This policy is used by "systrace opam install foo" and pulls up an
> > > >>  interactive dialog if an application attempts to write outside of
> > > >>  either ~/.opam or /tmp.
> > > >>    See: http://www.openbsd.org/cgi-bin/man.cgi?query=systrace
> > > >>     or: http://www.citi.umich.edu/u/provos/systrace/
> > > >>  paper: http://www.citi.umich.edu/u/provos/papers/systrace.pdf
> > > >>
> > > >> - FreeBSD: the latest versions have the Capsicum capability system
> > > >>  integrated, and the Casper system daemon that grants common operations
> > > >>  is also being worked on upstream (e.g. for name resolution)
> > > >>   See: https://www.cl.cam.ac.uk/research/security/capsicum/
> > > >>
> > > >> - Linux: As always with Linux, there are a myriad of possible solutions.
> > > >>  I'd discourage the use of LD_PRELOAD based solutions since they don't
> > > >>  work in several situations reliably (most obviously with static
> > > binaries).
> > > >>  The fakeroot-ng project uses ptrace instead, which is more reliable.
> > > >>
> > > >>  However, the primary thing we want is to only let the package only
> > > >>  write into ~/.opam, and so the mount namespace feature (see
> > > CLONE_NEWNS)
> > > >>  may be sufficient for our needs -- a lightweight filesystem container,
> > > >>  in effect.  David Sheets has done some investigation into this for
> > > >>  another project we're working on.
> > > >>
> > > >> - Windows: various, Sandboxie is one solution, but the underlying
> > > >>  mechanism is the Windows Integrity Mechanism that was introduced in
> > > >>  Vista:   https://msdn.microsoft.com/en-us/library/bb625964.aspx
> > > >>  This lets applications drop privileges, and is used by the Chrome
> > > >>  sandbox (in general, following what Chrome does for sandboxing is a
> > > >>  good idea, since their needs are a superset of ours).
> > > >>
> > > >> - MacOS X: The App Sandbox requires code signing, but does almost
> > > >>  exactly what we need: it gives each app/user a unique directory
> > > >>  into which they can write files.  All we should need to do is to
> > > >>  set OPAMROOT to that directory, and everything should just work.
> > > >>  In practise, this requires some investigation into how the App
> > > >>  signing infrastructure works, since I've only seen it done for
> > > >>  bundles and not for CLI tools.
> > > >>
> > > >> This is a quick off-the-top-of-my-head survey, but I think it's viable
> > > >> and useful for us to build an `opam sandbox` in the same style as
> > > >> `opam depext` that attempts to invoke a relevant sandboxing mechanism
> > > >> depending on the OS.  In the longer term, this will really serve us
> > > >> well as the package database grows.
> > > >>
> > > >> I'm less sure about the viability of recording installed files
> > > >> strictly -- I view thatas an advisory rather than enforcement-based
> > > >> mechanism.  The reason I like the "make ~/.opam a git store" is that
> > > >> its possible for applications to write directly into the store as they
> > > >> do right now, but still let us track changes precisely.  In fact, if
> > > >> we forbid subshells from writing into `~/.opam/.git`, this would be
> > > >> a production grade solution that also offers instant-rollback in case
> > > >> of compilation errors (no more waiting for a full recompilation of
> > > >> the original dependencies!).
> > > >>
> > > >> cheers,
> > > >> Anil
> > > >>
> > > >>> On 21 Feb 2015, at 09:16, Roberto Di Cosmo <roberto at dicosmo.org>
> > > wrote:
> > > >>>
> > > >>> Anil, Simon, can you provide more details on the sandboxing mechanisms
> > > you know of?
> > > >>>
> > > >>> We looked into all this for Mancoosi years ago; the most complete tool
> > > >>> out there was installwatch (now checkinstall) that hijacks filesystem
> > > modifying
> > > >>> commands using the standard LD_PRELOAD trick and a wrapper for system
> > > calls.
> > > >>> Checkinstall does not alter user priviledges, though, so one sometimes
> > > needed
> > > >>> a combination of fakeroot (that only alter user priviledges) with it.
> > > >>>
> > > >>> The best approach I know of was described in a Master thesis from ...
> > > Cambridge
> > > >>> :-) It was under the supervision of Peter Sewell, and used the ptrace
> > > mechanism
> > > >>> instead of the LD_PRELOAD trick, because LD_PRELOAD is blind to
> > > statically
> > > >>> compiled binaries that have system calls hardcoded, while ptrace gets
> > > them all.
> > > >>>
> > > >>> The dissertation is still available today here
> > > http://robot101.net/files/diss.ps.gz
> > > >>> and contains a very nice discussion of the issues related to
> > > monitoring and
> > > >>> rolling back file system changes performed by a command in the Linux
> > > system.
> > > >>> The source code is also available here
> > > http://robot101.net/files/trace.tar.gz
> > > >>> and one can get in touch with Robert Mcqueen that will be delighted to
> > > see his
> > > >>> work being used.
> > > >>>
> > > >>> Since all this is almost 10 years old, I suppose many exciting new
> > > ideas, tools
> > > >>> and approaches surfaced in the meantime, and I'd really like to know
> > > more.
> > > >>>
> > > >>> Cheers
> > > >>>
> > > >>> --
> > > >>> Roberto
> > > >>>
> > > >>> On Sat, Feb 21, 2015 at 09:37:07AM +0100, Simon Cruanes wrote:
> > > >>>> Sandboxing the build would also be a big security improvement. I
> > > think cabal
> > > >>>> now does it, and signing packages doesn't protect against malicious
> > > or buggy
> > > >>>> packages (see: bumblebee's uninstall target). That also goes hand in
> > > hand with
> > > >>>> file tracking. I don't know how difficult it is, though.
> > > >>>>
> > > >>>> Cheers!
> > > >>>>
> > > >>>> Le 21 f?vrier 2015 05:01:56 UTC+01:00, Louis Gesbert
> > > >>>> <louis.gesbert at ocamlpro.com> a ?crit :
> > > >>>>
> > > >>>>   With 1.2.1 almost out of the door, time has come to review the
> > > roadmap discussed back in December and choose where we'll be going for 1.3.
> > > Original mail attached for reference.
> > > >>>>
> > > >>>>
> > > >>>>   The topic that is burning hot at the moment is, specially after the
> > > Debian Haskell build host has been compromised, security: we have no
> > > signing at all at the moment, and we need to improve on this before it
> > > becomes a problem. TUF [1] has devised a sane amount of rules for
> > > repository management and signing that should make it easier to get it
> > > right in OPAM. Hannes has mentionned writing an OCaml implementation for
> > > TUF, which could get very helpful.
> > > >>>>
> > > >>>>
> > > >>>>   Also of importance is Windows support. It should at least be
> > > straighforward and documented to get a basic Cygwin setup working. That
> > > goes with adding automated tests (appveyor can now be added in Github
> > > alongside Travis). Related is cleaning up external command usage (even if
> > > not really justified by a Windows
> > > >>>>   port only, as David Allsopp pointed out) -- replacing curl calls by
> > > cohttp, use ocaml-fileutils...
> > > >>>>
> > > >>>>
> > > >>>>   These are the other main features, that'll probably take more time
> > > if we are to focus eg. on security:
> > > >>>>
> > > >>>>   * a plugin mechanism with plugins for example for OCaml (for better
> > > agnosticity), external dependency handling [2], documentation generation...
> > > >>>>
> > > >>>>   * a 'provides:' field in OPAM files [3]. This is a loose
> > > requirement if we want to switch the repository to have OCaml itself in a
> > > package (which is already possible, but the system compiler may yet be an
> > > issue).
> > > >>>>
> > > >>>>   * More flexible switch handling (multi-switch packages, per-switch
> > > remotes, layered switches for cross-compilation...)
> > > >>>>
> > > >>>>   * Tracking of files installed by packages. While unrelated to repo
> > > signing, this might have some security implications, so we might want to
> > > bring it in.
> > > >>>>
> > > >>>>   * With file tracking, generating a binary repo (with some
> > > limitations) could be quite
> > > >>>>   straight-forward.
> > > >>>>
> > > >>>>
> > > >>>>   Which of these do you think is most important ? Have I forgotten
> > > anything ?
> > > >>>>
> > > >>>>   Cheers,
> > > >>>>   Louis
> > > >>>>
> > > >>>>
> > > >>>>   [1] http://theupdateframework.com/
> > > >>>>   [2]
> > > https://github.com/ocaml/opam/blob/master/doc/design/depexts-plugins
> > > >>>>   [3]
> > > https://github.com/ocaml/opam/blob/master/doc/design/provides.md
> > > >>>>
> > > >>>>   message suivi
> > > >>>>
> > > >>>>     De :   Louis Gesbert
> > > >>>>     ? :    opam-devel at lists.ocaml.org
> > > >>>>   Envoy? : Wed Dec 17 11:07:40 UTC+01:00 2014
> > > >>>>   Objet :  [opam-devel] OPAM Roadmap -- what next ?
> > > >>>>
> > > >>>>   Hi all,
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   with some lag after the 1.2 release, I'd like to open some space
> > > for a
> > > >>>>   collective discussion of the priorities for where the energies
> > > should go
> > > >>>>   next. We have mainly 3 directions for improvements: first,
> > > portability,
> > > >>>>   with the main goal of a Windows version. Second, agnosticity, with
> > > the goal
> > > >>>>   to make OPAM more generic, and try and open it to users outside of
> > > the
> > > >>>>   OCaml community (wouldn't OPAM for Haskell be fun ?). Third, there
> > > are
> > > >>>>   always lots of features and improvements that have been asked for,
> > > and
> > > >>>>   would improve the experience of current users.
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   So here is a summary of what I've gathered. Feel free to add your
> > > own.
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   ## Portability
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   - **Rewrite parallel command engine.** / done.
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   - **Native system manipulation (cp, rm, curl...).**
> > > >>>>
> > > >>>>   These are mostly done through calls to the shell or external
> > > programs. It's
> > > >>>>
> > > >>>>   not very pretty but quite pragmatic actually... until we want to
> > > run on
> > > >>>>
> > > >>>>   Windows without Cygwin. Anyway, this wouldn't be the end of
> > > portability
> > > >>>>
> > > >>>>   issues.
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   - **Windows support.**
> > > >>>>
> > > >>>>   for OPAM itself to begin with. This should be pretty close.
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   - **Packages on Windows.**
> > > >>>>
> > > >>>>   Locate common issues and attempt to find generic fixes.
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   - Allow **direct use of more solvers** or solver servers.
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   - **Support cross-compilation**
> > > >>>>
> > > >>>>   This is quite an open issue at the moment.
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   ## Agnosticity
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   - **Isolate OCaml-specific stuff.**
> > > >>>>
> > > >>>>   E.g. specific opam-file variables. See ocaml-specific.md
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   - **Separate as plugins**
> > > >>>>
> > > >>>>   To open the gate to OPAM without these plugins, or with other ones
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   - **Compilers as packages.**
> > > >>>>
> > > >>>>   This should mostly work now, but needs some tests and
> > > strengthening. The
> > > >>>>   main
> > > >>>>
> > > >>>>   thing still to do is to handle the system compiler changes properly
> > > ; that
> > > >>>>
> > > >>>>   part should be made more generic anyway (see discussion on hooks)
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   ## Features
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   - A **provides** field. Generally useful, but particulary so with
> > > >>>>
> > > >>>>   compilers-as-packages
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   - Releasing the **"features" field** for easier package
> > > configuration
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   - **Track installed files**
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   - **Improve security**: just checking md5s is quite light ; package
> > > scripts
> > > >>>>   can
> > > >>>>
> > > >>>>   write anywhere
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   - **OS-specific handling of dependencies** (eg dependencies on
> > > packages
> > > >>>>   from the
> > > >>>>
> > > >>>>   OS) with plugins (#1519)
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   - Specify and implement **hooks**
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   - Find a nicer way to **share dev repos** / undoable "pinning
> > > sources"
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   - **Per-switch remotes**
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   - **Multi-switch packages**
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   - Support for (automatic generation of) **binary packages**
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   - Nicer **ocamlfind interaction**
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>
> > > >>>>   Cheers,
> > > >>>>
> > > >>>>   Louis Gesbert
> > > >>>>
> > > >>>>
> > >  ???????????????????????????????????????????????????????????????????????????
> > > >>>>
> > > >>>>   opam-devel mailing list
> > > >>>>   opam-devel at lists.ocaml.org
> > > >>>>   http://lists.ocaml.org/listinfo/opam-devel
> > > >>>>
> > > >>>>
> > >  ???????????????????????????????????????????????????????????????????????????
> > > >>>>
> > > >>>>   opam-devel mailing list
> > > >>>>   opam-devel at lists.ocaml.org
> > > >>>>   http://lists.ocaml.org/listinfo/opam-devel
> > > >>>>
> > > >>>>
> > > >>>> --
> > > >>>> Simon
> > > >>>
> > > >>>> _______________________________________________
> > > >>>> opam-devel mailing list
> > > >>>> opam-devel at lists.ocaml.org
> > > >>>> http://lists.ocaml.org/listinfo/opam-devel
> > > >>>
> > > >>>
> > > >>> --
> > > >>> Roberto Di Cosmo
> > > >>>
> > > >>> ------------------------------------------------------------------
> > > >>> Professeur               En delegation a l'INRIA
> > > >>> PPS                      E-mail: roberto at dicosmo.org
> > > >>> Universite Paris Diderot WWW  : http://www.dicosmo.org
> > > >>> Case 7014                Tel  : ++33-(0)1-57 27 92 20
> > > >>> 5, Rue Thomas Mann
> > > >>> F-75205 Paris Cedex 13   Identica: http://identi.ca/rdicosmo
> > > >>> FRANCE.                  Twitter: http://twitter.com/rdicosmo
> > > >>> ------------------------------------------------------------------
> > > >>> Attachments:
> > > >>> MIME accepted, Word deprecated
> > > >>>     http://www.gnu.org/philosophy/no-word-attachments.html
> > > >>> ------------------------------------------------------------------
> > > >>> Office location:
> > > >>>
> > > >>> Bureau 3020 (3rd floor)
> > > >>> Batiment Sophie Germain
> > > >>> Avenue de France
> > > >>> Metro Bibliotheque Francois Mitterrand, ligne 14/RER C
> > > >>> -----------------------------------------------------------------
> > > >>> GPG fingerprint 2931 20CE 3A5A 5390 98EC 8BFC FCCA C3BE 39CB 12D3
> > > >>>
> > > >>
> > > >
> > > > --
> > > > Roberto Di Cosmo
> > > >
> > > > ------------------------------------------------------------------
> > > > Professeur               En delegation a l'INRIA
> > > > PPS                      E-mail: roberto at dicosmo.org
> > > > Universite Paris Diderot WWW  : http://www.dicosmo.org
> > > > Case 7014                Tel  : ++33-(0)1-57 27 92 20
> > > > 5, Rue Thomas Mann
> > > > F-75205 Paris Cedex 13   Identica: http://identi.ca/rdicosmo
> > > > FRANCE.                  Twitter: http://twitter.com/rdicosmo
> > > > ------------------------------------------------------------------
> > > > Attachments:
> > > > MIME accepted, Word deprecated
> > > >      http://www.gnu.org/philosophy/no-word-attachments.html
> > > > ------------------------------------------------------------------
> > > > Office location:
> > > >
> > > > Bureau 3020 (3rd floor)
> > > > Batiment Sophie Germain
> > > > Avenue de France
> > > > Metro Bibliotheque Francois Mitterrand, ligne 14/RER C
> > > > -----------------------------------------------------------------
> > > > GPG fingerprint 2931 20CE 3A5A 5390 98EC 8BFC FCCA C3BE 39CB 12D3
> > > >
> > >
> > >
> > 
> > 
> >

-- 
Roberto Di Cosmo
 
------------------------------------------------------------------
Professeur               En delegation a l'INRIA
PPS                      E-mail: roberto at dicosmo.org
Universite Paris Diderot WWW  : http://www.dicosmo.org
Case 7014                Tel  : ++33-(0)1-57 27 92 20
5, Rue Thomas Mann       
F-75205 Paris Cedex 13   Identica: http://identi.ca/rdicosmo
FRANCE.                  Twitter: http://twitter.com/rdicosmo
------------------------------------------------------------------
Attachments:
MIME accepted, Word deprecated
      http://www.gnu.org/philosophy/no-word-attachments.html
------------------------------------------------------------------
Office location:
 
Bureau 3020 (3rd floor)
Batiment Sophie Germain
Avenue de France
Metro Bibliotheque Francois Mitterrand, ligne 14/RER C
-----------------------------------------------------------------
GPG fingerprint 2931 20CE 3A5A 5390 98EC 8BFC FCCA C3BE 39CB 12D3                        

From louis.gesbert at ocamlpro.com  Fri Feb 27 09:10:20 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Fri, 27 Feb 2015 18:10:20 +0900
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <20150227082031.GA10778@traveler>
References: <1709176.A7TcrPyoj4@agaric> <1478356.5BTF51oaMq@agaric>
 <20150227082031.GA10778@traveler>
Message-ID: <1687631.g0G9I0kVTd@agaric>

We're still discussing the roadmap for 1.3, but let's try to keep it reasonable in scope: we currently have the following "hot" topics:

* repository signing (server-side design and infrastructure, client-side validation ; very likely following TUF)

* package files tracking / package sandboxing

* Windows documentation / support

* a plugin architecture for OPAM extensions

Three of these seem to me like the maximum that could be reasonably put in the single release (and one or two may actually be more reasonable). I am willing to work on all of these and don't want to leave anyone behind, but there is so much one can do in a given time. On the other hand, I may be more comfortable separating an already coded part of OPAM into a plugin rather than designing a plugin mechanism more abstractly.

> A first draft proposal for the depext plugin API is in 
> 
>    doc/design/depexts-plugins
> 

Yes, this is a good start, and I already added some notes there.

Cheers,
Louis

From anil at recoil.org  Fri Feb 27 09:30:30 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Fri, 27 Feb 2015 09:30:30 +0000
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <1687631.g0G9I0kVTd@agaric>
References: <1709176.A7TcrPyoj4@agaric> <1478356.5BTF51oaMq@agaric>
 <20150227082031.GA10778@traveler> <1687631.g0G9I0kVTd@agaric>
Message-ID: <3787273C-A5E5-4E03-B89E-467169DE8EF4@recoil.org>

Indeed, and there's also the regular maintenance that takes up an increasing amount of time.

My (high-level) suggestion is to treat the first three features as an *internal* API first, and build them with an eventual plugin API in mind so that they're not all intertwined with the remainder of OPAM.  Once the features themselves are working and feature-complete, the plugin (or extension) system becomes much easier.

We're actually at that point already with the depext system (and Roberto's proposal there), so it's just a matter of catching up with a few more usecases such as repo signing and file tracking.

-anil

> On 27 Feb 2015, at 09:10, Louis Gesbert <louis.gesbert at ocamlpro.com> wrote:
> 
> We're still discussing the roadmap for 1.3, but let's try to keep it reasonable in scope: we currently have the following "hot" topics:
> 
> * repository signing (server-side design and infrastructure, client-side validation ; very likely following TUF)
> 
> * package files tracking / package sandboxing
> 
> * Windows documentation / support
> 
> * a plugin architecture for OPAM extensions
> 
> Three of these seem to me like the maximum that could be reasonably put in the single release (and one or two may actually be more reasonable). I am willing to work on all of these and don't want to leave anyone behind, but there is so much one can do in a given time. On the other hand, I may be more comfortable separating an already coded part of OPAM into a plugin rather than designing a plugin mechanism more abstractly.
> 
>> A first draft proposal for the depext plugin API is in 
>> 
>>   doc/design/depexts-plugins
>> 
> 
> Yes, this is a good start, and I already added some notes there.
> 
> Cheers,
> Louis
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
> 


From anil at recoil.org  Fri Feb 27 09:34:28 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Fri, 27 Feb 2015 09:34:28 +0000
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <5483974.UTlWivIJto@agaric>
References: <1709176.A7TcrPyoj4@agaric> <20150221091603.GA31077@traveler>
 <4D01D3A6-7609-411E-9897-B0A3DF360F44@recoil.org> <5483974.UTlWivIJto@agaric>
Message-ID: <741AAE96-60FD-459D-BBBE-761E1CBCA3F1@recoil.org>

I'd quite like sandboxing to be done at the individual command invocation level, with a set of valid-to-write directory prefixes passed through to the `sandbox` binary.

In particular, this implies that there would only be a couple of directories passed at the build phase (the `/tmp` and `~/.opam/<...>/build` ones), with the installation prefixes appended in the subsequent package install phase.

-anil

> On 27 Feb 2015, at 01:37, Louis Gesbert <louis.gesbert at ocamlpro.com> wrote:
> 
> Just a quick remark: I would rather have the sandboxing done at the switch prefix level rather than at the OPAMROOT level: that's where package scripts should be restricted, and, in particular for the git-tracking feature, you probably don't want to rollback your `opam update`s, and tracking installs for each switch sounds more friendly.
> 
> This would probably imply it's done within OPAM. Hm, and you don't get cross-switch sharing to save git space.
> 
>> - Anil Madhavapeddy, 24/02/2015 16:22 -
>> Hi Roberto, Simon,
>> 
>> Sandboxing mechanisms have come along quite a bit in the last few years.
>> It's important to separate the two threat models that we want, since their
>> use can be quite intrusive if made mandatory.  I see two modes of operation:
>> 
>> - A mandatory sandbox in CI testing, where we use it to check that the
>>  package isn't violating obvious policies such as network downloads
>>  from within the package, or writing outside of ~/.opam or /tmp.
>> 
>> - Optional sandbox for day-to-day use by end users.  This will catch
>>  even malicious behaviours, but imposes a rather heavy support burden.
>> 
>> In terms of how to sandbox applications, I know of:
>> 
>> - OpenBSD: I use the built-in systrace system call permissions subsystem
>>  already with OPAM.  I've uploaded my local policy to GitHub at:
>>     https://gist.github.com/avsm/8293aa52c6cee772a9cb
>>  This policy is used by "systrace opam install foo" and pulls up an
>>  interactive dialog if an application attempts to write outside of
>>  either ~/.opam or /tmp.
>>    See: http://www.openbsd.org/cgi-bin/man.cgi?query=systrace
>>     or: http://www.citi.umich.edu/u/provos/systrace/
>>  paper: http://www.citi.umich.edu/u/provos/papers/systrace.pdf
>> 
>> - FreeBSD: the latest versions have the Capsicum capability system
>>  integrated, and the Casper system daemon that grants common operations
>>  is also being worked on upstream (e.g. for name resolution)
>>   See: https://www.cl.cam.ac.uk/research/security/capsicum/
>> 
>> - Linux: As always with Linux, there are a myriad of possible solutions.
>>  I'd discourage the use of LD_PRELOAD based solutions since they don't
>>  work in several situations reliably (most obviously with static binaries).
>>  The fakeroot-ng project uses ptrace instead, which is more reliable.
>> 
>>  However, the primary thing we want is to only let the package only
>>  write into ~/.opam, and so the mount namespace feature (see CLONE_NEWNS)
>>  may be sufficient for our needs -- a lightweight filesystem container,
>>  in effect.  David Sheets has done some investigation into this for
>>  another project we're working on.
>> 
>> - Windows: various, Sandboxie is one solution, but the underlying
>>  mechanism is the Windows Integrity Mechanism that was introduced in
>>  Vista:   https://msdn.microsoft.com/en-us/library/bb625964.aspx
>>  This lets applications drop privileges, and is used by the Chrome
>>  sandbox (in general, following what Chrome does for sandboxing is a
>>  good idea, since their needs are a superset of ours).
>> 
>> - MacOS X: The App Sandbox requires code signing, but does almost
>>  exactly what we need: it gives each app/user a unique directory
>>  into which they can write files.  All we should need to do is to
>>  set OPAMROOT to that directory, and everything should just work.
>>  In practise, this requires some investigation into how the App
>>  signing infrastructure works, since I've only seen it done for
>>  bundles and not for CLI tools.
>> 
>> This is a quick off-the-top-of-my-head survey, but I think it's viable
>> and useful for us to build an `opam sandbox` in the same style as
>> `opam depext` that attempts to invoke a relevant sandboxing mechanism
>> depending on the OS.  In the longer term, this will really serve us
>> well as the package database grows.
>> 
>> I'm less sure about the viability of recording installed files
>> strictly -- I view thatas an advisory rather than enforcement-based
>> mechanism.  The reason I like the "make ~/.opam a git store" is that
>> its possible for applications to write directly into the store as they
>> do right now, but still let us track changes precisely.  In fact, if
>> we forbid subshells from writing into `~/.opam/.git`, this would be
>> a production grade solution that also offers instant-rollback in case
>> of compilation errors (no more waiting for a full recompilation of 
>> the original dependencies!).
>> 
>> cheers,
>> Anil
>> 
>>> On 21 Feb 2015, at 09:16, Roberto Di Cosmo <roberto at dicosmo.org> wrote:
>>> 
>>> Anil, Simon, can you provide more details on the sandboxing mechanisms you know of?
>>> 
>>> We looked into all this for Mancoosi years ago; the most complete tool
>>> out there was installwatch (now checkinstall) that hijacks filesystem modifying
>>> commands using the standard LD_PRELOAD trick and a wrapper for system calls.
>>> Checkinstall does not alter user priviledges, though, so one sometimes needed
>>> a combination of fakeroot (that only alter user priviledges) with it.
>>> 
>>> The best approach I know of was described in a Master thesis from ... Cambridge
>>> :-) It was under the supervision of Peter Sewell, and used the ptrace mechanism
>>> instead of the LD_PRELOAD trick, because LD_PRELOAD is blind to statically
>>> compiled binaries that have system calls hardcoded, while ptrace gets them all.
>>> 
>>> The dissertation is still available today here http://robot101.net/files/diss.ps.gz
>>> and contains a very nice discussion of the issues related to monitoring and
>>> rolling back file system changes performed by a command in the Linux system.
>>> The source code is also available here http://robot101.net/files/trace.tar.gz
>>> and one can get in touch with Robert Mcqueen that will be delighted to see his
>>> work being used.
>>> 
>>> Since all this is almost 10 years old, I suppose many exciting new ideas, tools
>>> and approaches surfaced in the meantime, and I'd really like to know more.
>>> 
>>> Cheers
>>> 
>>> --
>>> Roberto
>>> 
>>> On Sat, Feb 21, 2015 at 09:37:07AM +0100, Simon Cruanes wrote:
>>>> Sandboxing the build would also be a big security improvement. I think cabal
>>>> now does it, and signing packages doesn't protect against malicious or buggy
>>>> packages (see: bumblebee's uninstall target). That also goes hand in hand with
>>>> file tracking. I don't know how difficult it is, though.
>>>> 
>>>> Cheers!
>>>> 
>>>> Le 21 f?vrier 2015 05:01:56 UTC+01:00, Louis Gesbert
>>>> <louis.gesbert at ocamlpro.com> a ?crit :
>>>> 
>>>>   With 1.2.1 almost out of the door, time has come to review the roadmap discussed back in December and choose where we'll be going for 1.3. Original mail attached for reference.
>>>> 
>>>> 
>>>>   The topic that is burning hot at the moment is, specially after the Debian Haskell build host has been compromised, security: we have no signing at all at the moment, and we need to improve on this before it becomes a problem. TUF [1] has devised a sane amount of rules for repository management and signing that should make it easier to get it right in OPAM. Hannes has mentionned writing an OCaml implementation for TUF, which could get very helpful.
>>>> 
>>>> 
>>>>   Also of importance is Windows support. It should at least be straighforward and documented to get a basic Cygwin setup working. That goes with adding automated tests (appveyor can now be added in Github alongside Travis). Related is cleaning up external command usage (even if not really justified by a Windows
>>>>   port only, as David Allsopp pointed out) -- replacing curl calls by cohttp, use ocaml-fileutils...
>>>> 
>>>> 
>>>>   These are the other main features, that'll probably take more time if we are to focus eg. on security:
>>>> 
>>>>   * a plugin mechanism with plugins for example for OCaml (for better agnosticity), external dependency handling [2], documentation generation...
>>>> 
>>>>   * a 'provides:' field in OPAM files [3]. This is a loose requirement if we want to switch the repository to have OCaml itself in a package (which is already possible, but the system compiler may yet be an issue).
>>>> 
>>>>   * More flexible switch handling (multi-switch packages, per-switch remotes, layered switches for cross-compilation...)
>>>> 
>>>>   * Tracking of files installed by packages. While unrelated to repo signing, this might have some security implications, so we might want to bring it in.
>>>> 
>>>>   * With file tracking, generating a binary repo (with some limitations) could be quite
>>>>   straight-forward.
>>>> 
>>>> 
>>>>   Which of these do you think is most important ? Have I forgotten anything ?
>>>> 
>>>>   Cheers,
>>>>   Louis
>>>> 
>>>> 
>>>>   [1] http://theupdateframework.com/
>>>>   [2] https://github.com/ocaml/opam/blob/master/doc/design/depexts-plugins
>>>>   [3] https://github.com/ocaml/opam/blob/master/doc/design/provides.md
>>>> 
>>>>   message suivi
>>>> 
>>>>     De :   Louis Gesbert
>>>>     ? :    opam-devel at lists.ocaml.org
>>>>   Envoy? : Wed Dec 17 11:07:40 UTC+01:00 2014
>>>>   Objet :  [opam-devel] OPAM Roadmap -- what next ?
>>>> 
>>>>   Hi all,
>>>> 
>>>> 
>>>> 
>>>>   with some lag after the 1.2 release, I'd like to open some space for a
>>>>   collective discussion of the priorities for where the energies should go
>>>>   next. We have mainly 3 directions for improvements: first, portability,
>>>>   with the main goal of a Windows version. Second, agnosticity, with the goal
>>>>   to make OPAM more generic, and try and open it to users outside of the
>>>>   OCaml community (wouldn't OPAM for Haskell be fun ?). Third, there are
>>>>   always lots of features and improvements that have been asked for, and
>>>>   would improve the experience of current users.
>>>> 
>>>> 
>>>> 
>>>>   So here is a summary of what I've gathered. Feel free to add your own.
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>>   ## Portability
>>>> 
>>>> 
>>>> 
>>>>   - **Rewrite parallel command engine.** / done.
>>>> 
>>>> 
>>>> 
>>>>   - **Native system manipulation (cp, rm, curl...).**
>>>> 
>>>>   These are mostly done through calls to the shell or external programs. It's
>>>> 
>>>>   not very pretty but quite pragmatic actually... until we want to run on
>>>> 
>>>>   Windows without Cygwin. Anyway, this wouldn't be the end of portability
>>>> 
>>>>   issues.
>>>> 
>>>> 
>>>> 
>>>>   - **Windows support.**
>>>> 
>>>>   for OPAM itself to begin with. This should be pretty close.
>>>> 
>>>> 
>>>> 
>>>>   - **Packages on Windows.**
>>>> 
>>>>   Locate common issues and attempt to find generic fixes.
>>>> 
>>>> 
>>>> 
>>>>   - Allow **direct use of more solvers** or solver servers.
>>>> 
>>>> 
>>>> 
>>>>   - **Support cross-compilation**
>>>> 
>>>>   This is quite an open issue at the moment.
>>>> 
>>>> 
>>>> 
>>>>   ## Agnosticity
>>>> 
>>>> 
>>>> 
>>>>   - **Isolate OCaml-specific stuff.**
>>>> 
>>>>   E.g. specific opam-file variables. See ocaml-specific.md
>>>> 
>>>> 
>>>> 
>>>>   - **Separate as plugins**
>>>> 
>>>>   To open the gate to OPAM without these plugins, or with other ones
>>>> 
>>>> 
>>>> 
>>>>   - **Compilers as packages.**
>>>> 
>>>>   This should mostly work now, but needs some tests and strengthening. The
>>>>   main
>>>> 
>>>>   thing still to do is to handle the system compiler changes properly ; that
>>>> 
>>>>   part should be made more generic anyway (see discussion on hooks)
>>>> 
>>>> 
>>>> 
>>>>   ## Features
>>>> 
>>>> 
>>>> 
>>>>   - A **provides** field. Generally useful, but particulary so with
>>>> 
>>>>   compilers-as-packages
>>>> 
>>>> 
>>>> 
>>>>   - Releasing the **"features" field** for easier package configuration
>>>> 
>>>> 
>>>> 
>>>>   - **Track installed files**
>>>> 
>>>> 
>>>> 
>>>>   - **Improve security**: just checking md5s is quite light ; package scripts
>>>>   can
>>>> 
>>>>   write anywhere
>>>> 
>>>> 
>>>> 
>>>>   - **OS-specific handling of dependencies** (eg dependencies on packages
>>>>   from the
>>>> 
>>>>   OS) with plugins (#1519)
>>>> 
>>>> 
>>>> 
>>>>   - Specify and implement **hooks**
>>>> 
>>>> 
>>>> 
>>>>   - Find a nicer way to **share dev repos** / undoable "pinning sources"
>>>> 
>>>> 
>>>> 
>>>>   - **Per-switch remotes**
>>>> 
>>>> 
>>>> 
>>>>   - **Multi-switch packages**
>>>> 
>>>> 
>>>> 
>>>>   - Support for (automatic generation of) **binary packages**
>>>> 
>>>> 
>>>> 
>>>>   - Nicer **ocamlfind interaction**
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>>   Cheers,
>>>> 
>>>>   Louis Gesbert
>>>> 
>>>>   ???????????????????????????????????????????????????????????????????????????
>>>> 
>>>>   opam-devel mailing list
>>>>   opam-devel at lists.ocaml.org
>>>>   http://lists.ocaml.org/listinfo/opam-devel
>>>> 
>>>>   ???????????????????????????????????????????????????????????????????????????
>>>> 
>>>>   opam-devel mailing list
>>>>   opam-devel at lists.ocaml.org
>>>>   http://lists.ocaml.org/listinfo/opam-devel
>>>> 
>>>> 
>>>> --
>>>> Simon
>>> 
>>>> _______________________________________________
>>>> opam-devel mailing list
>>>> opam-devel at lists.ocaml.org
>>>> http://lists.ocaml.org/listinfo/opam-devel
>>> 
>>> 
>> 
> 


From anil at recoil.org  Fri Feb 27 09:41:18 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Fri, 27 Feb 2015 09:41:18 +0000
Subject: [opam-devel] CommonML: An opinionated build/package/develop
	workflow on top of CommonJS
In-Reply-To: <4219236.JrSshv2Dpl@agaric>
References: <CAPOA5_58DJ5KYHosNmBJd1CQCpD6GOm-TxJ-s0PgC=odzk_5kA@mail.gmail.com>
 <433C17A8-E598-46DA-A459-74CB2BF37C1E@recoil.org> <4219236.JrSshv2Dpl@agaric>
Message-ID: <DDDBD871-F960-4238-93F4-77E64962CFB8@recoil.org>

On 27 Feb 2015, at 06:54, Louis Gesbert <louis.gesbert at ocamlpro.com> wrote:
> 
> Thanks indeed, this is a useful insight in the npm-like workflow and well worth our attention.
> 
>> I very much enjoyed reading through the CommonML code; thanks for documenting it so well!  While I digest the rest, I uploaded a simple prototype of an `opam-boot` tool that does what you describe above.  You can just run `opam-boot` in a directory containing an OPAM file, and it will take care of the rest via a local .opam installation.  This works even if OCaml and OPAM are not installed systemwide.
> 
> I have been thinking for a while that allowing to set an arbitrary prefix at switch creation time could be very useful, and in this case that would allow an interesting hybrid approach: you would still have a `~/.opam` holding the repository cache, temporary build directories and that kind of stuff, but you could create a switch for your project that would hold its binaries in a sub-directory of your project. Using something like `opam-manager`, that switch could even be used automatically when running command from within the project, and we could imagine other tools that facilitate this a lot if it were to become popular.
> 
> Then I'd also try to be careful on the different mindset we could fine in compiled vs. interpreted? language users: for example, if we provide a similar workflow to npm with the notable difference that it's much, much slower (I imagine recompiling OCaml for every project) and space hungry, that may not ultimately be a huge benefit in terms of image.

I wonder if this is also a way to fold in Gabriel's custom compiler switch mechanism for day-to-day compiler development as well:

https://github.com/gasche/opam-compiler-conf

-anil

From louis.gesbert at ocamlpro.com  Fri Feb 27 23:47:28 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Sat, 28 Feb 2015 08:47:28 +0900
Subject: [opam-devel] OPAM 1.3 roadmap
In-Reply-To: <741AAE96-60FD-459D-BBBE-761E1CBCA3F1@recoil.org>
References: <1709176.A7TcrPyoj4@agaric> <5483974.UTlWivIJto@agaric>
 <741AAE96-60FD-459D-BBBE-761E1CBCA3F1@recoil.org>
Message-ID: <4321467.WNvP6OrM9U@agaric>

Yes, that's exactly my thought actually, seems I didn't make myself clear : for the sandboxing, I meant the `install` instructions should be restricted to the switch prefix rather than to the OPAM root.

For the git tracking, it seems more consistent to do it per-switch at first glance, but there may be some advantages in doing it at the opam root.

> - Anil Madhavapeddy, 27/02/2015 09:34 -
> I'd quite like sandboxing to be done at the individual command invocation level, with a set of valid-to-write directory prefixes passed through to the `sandbox` binary.
> 
> In particular, this implies that there would only be a couple of directories passed at the build phase (the `/tmp` and `~/.opam/<...>/build` ones), with the installation prefixes appended in the subsequent package install phase.
> 
> -anil
> 
> > On 27 Feb 2015, at 01:37, Louis Gesbert <louis.gesbert at ocamlpro.com> wrote:
> > 
> > Just a quick remark: I would rather have the sandboxing done at the switch prefix level rather than at the OPAMROOT level: that's where package scripts should be restricted, and, in particular for the git-tracking feature, you probably don't want to rollback your `opam update`s, and tracking installs for each switch sounds more friendly.
> > 
> > This would probably imply it's done within OPAM. Hm, and you don't get cross-switch sharing to save git space.
> > 
> >> - Anil Madhavapeddy, 24/02/2015 16:22 -
> >> Hi Roberto, Simon,
> >> 
> >> Sandboxing mechanisms have come along quite a bit in the last few years.
> >> It's important to separate the two threat models that we want, since their
> >> use can be quite intrusive if made mandatory.  I see two modes of operation:
> >> 
> >> - A mandatory sandbox in CI testing, where we use it to check that the
> >>  package isn't violating obvious policies such as network downloads
> >>  from within the package, or writing outside of ~/.opam or /tmp.
> >> 
> >> - Optional sandbox for day-to-day use by end users.  This will catch
> >>  even malicious behaviours, but imposes a rather heavy support burden.
> >> 
> >> In terms of how to sandbox applications, I know of:
> >> 
> >> - OpenBSD: I use the built-in systrace system call permissions subsystem
> >>  already with OPAM.  I've uploaded my local policy to GitHub at:
> >>     https://gist.github.com/avsm/8293aa52c6cee772a9cb
> >>  This policy is used by "systrace opam install foo" and pulls up an
> >>  interactive dialog if an application attempts to write outside of
> >>  either ~/.opam or /tmp.
> >>    See: http://www.openbsd.org/cgi-bin/man.cgi?query=systrace
> >>     or: http://www.citi.umich.edu/u/provos/systrace/
> >>  paper: http://www.citi.umich.edu/u/provos/papers/systrace.pdf
> >> 
> >> - FreeBSD: the latest versions have the Capsicum capability system
> >>  integrated, and the Casper system daemon that grants common operations
> >>  is also being worked on upstream (e.g. for name resolution)
> >>   See: https://www.cl.cam.ac.uk/research/security/capsicum/
> >> 
> >> - Linux: As always with Linux, there are a myriad of possible solutions.
> >>  I'd discourage the use of LD_PRELOAD based solutions since they don't
> >>  work in several situations reliably (most obviously with static binaries).
> >>  The fakeroot-ng project uses ptrace instead, which is more reliable.
> >> 
> >>  However, the primary thing we want is to only let the package only
> >>  write into ~/.opam, and so the mount namespace feature (see CLONE_NEWNS)
> >>  may be sufficient for our needs -- a lightweight filesystem container,
> >>  in effect.  David Sheets has done some investigation into this for
> >>  another project we're working on.
> >> 
> >> - Windows: various, Sandboxie is one solution, but the underlying
> >>  mechanism is the Windows Integrity Mechanism that was introduced in
> >>  Vista:   https://msdn.microsoft.com/en-us/library/bb625964.aspx
> >>  This lets applications drop privileges, and is used by the Chrome
> >>  sandbox (in general, following what Chrome does for sandboxing is a
> >>  good idea, since their needs are a superset of ours).
> >> 
> >> - MacOS X: The App Sandbox requires code signing, but does almost
> >>  exactly what we need: it gives each app/user a unique directory
> >>  into which they can write files.  All we should need to do is to
> >>  set OPAMROOT to that directory, and everything should just work.
> >>  In practise, this requires some investigation into how the App
> >>  signing infrastructure works, since I've only seen it done for
> >>  bundles and not for CLI tools.
> >> 
> >> This is a quick off-the-top-of-my-head survey, but I think it's viable
> >> and useful for us to build an `opam sandbox` in the same style as
> >> `opam depext` that attempts to invoke a relevant sandboxing mechanism
> >> depending on the OS.  In the longer term, this will really serve us
> >> well as the package database grows.
> >> 
> >> I'm less sure about the viability of recording installed files
> >> strictly -- I view thatas an advisory rather than enforcement-based
> >> mechanism.  The reason I like the "make ~/.opam a git store" is that
> >> its possible for applications to write directly into the store as they
> >> do right now, but still let us track changes precisely.  In fact, if
> >> we forbid subshells from writing into `~/.opam/.git`, this would be
> >> a production grade solution that also offers instant-rollback in case
> >> of compilation errors (no more waiting for a full recompilation of 
> >> the original dependencies!).
> >> 
> >> cheers,
> >> Anil
> >> 
> >>> On 21 Feb 2015, at 09:16, Roberto Di Cosmo <roberto at dicosmo.org> wrote:
> >>> 
> >>> Anil, Simon, can you provide more details on the sandboxing mechanisms you know of?
> >>> 
> >>> We looked into all this for Mancoosi years ago; the most complete tool
> >>> out there was installwatch (now checkinstall) that hijacks filesystem modifying
> >>> commands using the standard LD_PRELOAD trick and a wrapper for system calls.
> >>> Checkinstall does not alter user priviledges, though, so one sometimes needed
> >>> a combination of fakeroot (that only alter user priviledges) with it.
> >>> 
> >>> The best approach I know of was described in a Master thesis from ... Cambridge
> >>> :-) It was under the supervision of Peter Sewell, and used the ptrace mechanism
> >>> instead of the LD_PRELOAD trick, because LD_PRELOAD is blind to statically
> >>> compiled binaries that have system calls hardcoded, while ptrace gets them all.
> >>> 
> >>> The dissertation is still available today here http://robot101.net/files/diss.ps.gz
> >>> and contains a very nice discussion of the issues related to monitoring and
> >>> rolling back file system changes performed by a command in the Linux system.
> >>> The source code is also available here http://robot101.net/files/trace.tar.gz
> >>> and one can get in touch with Robert Mcqueen that will be delighted to see his
> >>> work being used.
> >>> 
> >>> Since all this is almost 10 years old, I suppose many exciting new ideas, tools
> >>> and approaches surfaced in the meantime, and I'd really like to know more.
> >>> 
> >>> Cheers
> >>> 
> >>> --
> >>> Roberto
> >>> 
> >>> On Sat, Feb 21, 2015 at 09:37:07AM +0100, Simon Cruanes wrote:
> >>>> Sandboxing the build would also be a big security improvement. I think cabal
> >>>> now does it, and signing packages doesn't protect against malicious or buggy
> >>>> packages (see: bumblebee's uninstall target). That also goes hand in hand with
> >>>> file tracking. I don't know how difficult it is, though.
> >>>> 
> >>>> Cheers!
> >>>> 
> >>>> Le 21 f?vrier 2015 05:01:56 UTC+01:00, Louis Gesbert
> >>>> <louis.gesbert at ocamlpro.com> a ?crit :
> >>>> 
> >>>>   With 1.2.1 almost out of the door, time has come to review the roadmap discussed back in December and choose where we'll be going for 1.3. Original mail attached for reference.
> >>>> 
> >>>> 
> >>>>   The topic that is burning hot at the moment is, specially after the Debian Haskell build host has been compromised, security: we have no signing at all at the moment, and we need to improve on this before it becomes a problem. TUF [1] has devised a sane amount of rules for repository management and signing that should make it easier to get it right in OPAM. Hannes has mentionned writing an OCaml implementation for TUF, which could get very helpful.
> >>>> 
> >>>> 
> >>>>   Also of importance is Windows support. It should at least be straighforward and documented to get a basic Cygwin setup working. That goes with adding automated tests (appveyor can now be added in Github alongside Travis). Related is cleaning up external command usage (even if not really justified by a Windows
> >>>>   port only, as David Allsopp pointed out) -- replacing curl calls by cohttp, use ocaml-fileutils...
> >>>> 
> >>>> 
> >>>>   These are the other main features, that'll probably take more time if we are to focus eg. on security:
> >>>> 
> >>>>   * a plugin mechanism with plugins for example for OCaml (for better agnosticity), external dependency handling [2], documentation generation...
> >>>> 
> >>>>   * a 'provides:' field in OPAM files [3]. This is a loose requirement if we want to switch the repository to have OCaml itself in a package (which is already possible, but the system compiler may yet be an issue).
> >>>> 
> >>>>   * More flexible switch handling (multi-switch packages, per-switch remotes, layered switches for cross-compilation...)
> >>>> 
> >>>>   * Tracking of files installed by packages. While unrelated to repo signing, this might have some security implications, so we might want to bring it in.
> >>>> 
> >>>>   * With file tracking, generating a binary repo (with some limitations) could be quite
> >>>>   straight-forward.
> >>>> 
> >>>> 
> >>>>   Which of these do you think is most important ? Have I forgotten anything ?
> >>>> 
> >>>>   Cheers,
> >>>>   Louis
> >>>> 
> >>>> 
> >>>>   [1] http://theupdateframework.com/
> >>>>   [2] https://github.com/ocaml/opam/blob/master/doc/design/depexts-plugins
> >>>>   [3] https://github.com/ocaml/opam/blob/master/doc/design/provides.md
> >>>> 
> >>>>   message suivi
> >>>> 
> >>>>     De :   Louis Gesbert
> >>>>     ? :    opam-devel at lists.ocaml.org
> >>>>   Envoy? : Wed Dec 17 11:07:40 UTC+01:00 2014
> >>>>   Objet :  [opam-devel] OPAM Roadmap -- what next ?
> >>>> 
> >>>>   Hi all,
> >>>> 
> >>>> 
> >>>> 
> >>>>   with some lag after the 1.2 release, I'd like to open some space for a
> >>>>   collective discussion of the priorities for where the energies should go
> >>>>   next. We have mainly 3 directions for improvements: first, portability,
> >>>>   with the main goal of a Windows version. Second, agnosticity, with the goal
> >>>>   to make OPAM more generic, and try and open it to users outside of the
> >>>>   OCaml community (wouldn't OPAM for Haskell be fun ?). Third, there are
> >>>>   always lots of features and improvements that have been asked for, and
> >>>>   would improve the experience of current users.
> >>>> 
> >>>> 
> >>>> 
> >>>>   So here is a summary of what I've gathered. Feel free to add your own.
> >>>> 
> >>>> 
> >>>> 
> >>>> 
> >>>> 
> >>>> 
> >>>> 
> >>>>   ## Portability
> >>>> 
> >>>> 
> >>>> 
> >>>>   - **Rewrite parallel command engine.** / done.
> >>>> 
> >>>> 
> >>>> 
> >>>>   - **Native system manipulation (cp, rm, curl...).**
> >>>> 
> >>>>   These are mostly done through calls to the shell or external programs. It's
> >>>> 
> >>>>   not very pretty but quite pragmatic actually... until we want to run on
> >>>> 
> >>>>   Windows without Cygwin. Anyway, this wouldn't be the end of portability
> >>>> 
> >>>>   issues.
> >>>> 
> >>>> 
> >>>> 
> >>>>   - **Windows support.**
> >>>> 
> >>>>   for OPAM itself to begin with. This should be pretty close.
> >>>> 
> >>>> 
> >>>> 
> >>>>   - **Packages on Windows.**
> >>>> 
> >>>>   Locate common issues and attempt to find generic fixes.
> >>>> 
> >>>> 
> >>>> 
> >>>>   - Allow **direct use of more solvers** or solver servers.
> >>>> 
> >>>> 
> >>>> 
> >>>>   - **Support cross-compilation**
> >>>> 
> >>>>   This is quite an open issue at the moment.
> >>>> 
> >>>> 
> >>>> 
> >>>>   ## Agnosticity
> >>>> 
> >>>> 
> >>>> 
> >>>>   - **Isolate OCaml-specific stuff.**
> >>>> 
> >>>>   E.g. specific opam-file variables. See ocaml-specific.md
> >>>> 
> >>>> 
> >>>> 
> >>>>   - **Separate as plugins**
> >>>> 
> >>>>   To open the gate to OPAM without these plugins, or with other ones
> >>>> 
> >>>> 
> >>>> 
> >>>>   - **Compilers as packages.**
> >>>> 
> >>>>   This should mostly work now, but needs some tests and strengthening. The
> >>>>   main
> >>>> 
> >>>>   thing still to do is to handle the system compiler changes properly ; that
> >>>> 
> >>>>   part should be made more generic anyway (see discussion on hooks)
> >>>> 
> >>>> 
> >>>> 
> >>>>   ## Features
> >>>> 
> >>>> 
> >>>> 
> >>>>   - A **provides** field. Generally useful, but particulary so with
> >>>> 
> >>>>   compilers-as-packages
> >>>> 
> >>>> 
> >>>> 
> >>>>   - Releasing the **"features" field** for easier package configuration
> >>>> 
> >>>> 
> >>>> 
> >>>>   - **Track installed files**
> >>>> 
> >>>> 
> >>>> 
> >>>>   - **Improve security**: just checking md5s is quite light ; package scripts
> >>>>   can
> >>>> 
> >>>>   write anywhere
> >>>> 
> >>>> 
> >>>> 
> >>>>   - **OS-specific handling of dependencies** (eg dependencies on packages
> >>>>   from the
> >>>> 
> >>>>   OS) with plugins (#1519)
> >>>> 
> >>>> 
> >>>> 
> >>>>   - Specify and implement **hooks**
> >>>> 
> >>>> 
> >>>> 
> >>>>   - Find a nicer way to **share dev repos** / undoable "pinning sources"
> >>>> 
> >>>> 
> >>>> 
> >>>>   - **Per-switch remotes**
> >>>> 
> >>>> 
> >>>> 
> >>>>   - **Multi-switch packages**
> >>>> 
> >>>> 
> >>>> 
> >>>>   - Support for (automatic generation of) **binary packages**
> >>>> 
> >>>> 
> >>>> 
> >>>>   - Nicer **ocamlfind interaction**
> >>>> 
> >>>> 
> >>>> 
> >>>> 
> >>>> 
> >>>> 
> >>>> 
> >>>>   Cheers,
> >>>> 
> >>>>   Louis Gesbert
> >>>> 
> >>>>   ???????????????????????????????????????????????????????????????????????????
> >>>> 
> >>>>   opam-devel mailing list
> >>>>   opam-devel at lists.ocaml.org
> >>>>   http://lists.ocaml.org/listinfo/opam-devel
> >>>> 
> >>>>   ???????????????????????????????????????????????????????????????????????????
> >>>> 
> >>>>   opam-devel mailing list
> >>>>   opam-devel at lists.ocaml.org
> >>>>   http://lists.ocaml.org/listinfo/opam-devel
> >>>> 
> >>>> 
> >>>> --
> >>>> Simon
> >>> 
> >>>> _______________________________________________
> >>>> opam-devel mailing list
> >>>> opam-devel at lists.ocaml.org
> >>>> http://lists.ocaml.org/listinfo/opam-devel
> >>> 
> >>> 
> >> 
> > 

From louis.gesbert at ocamlpro.com  Sat Feb 28 04:25:09 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Sat, 28 Feb 2015 13:25:09 +0900
Subject: [opam-devel] CommonML: An opinionated build/package/develop
 workflow on top of CommonJS
In-Reply-To: <CAPOA5_58DJ5KYHosNmBJd1CQCpD6GOm-TxJ-s0PgC=odzk_5kA@mail.gmail.com>
References: <CAPOA5_58DJ5KYHosNmBJd1CQCpD6GOm-TxJ-s0PgC=odzk_5kA@mail.gmail.com>
Message-ID: <4570661.yNgK721Ky7@agaric>

The way your included build system integrates the build of the dependencies with the build of the tool is also very interesting, and should raise some thought in build system design too. Incidentally, that's kind of what we do (by hand) for OPAM bootstrapping, and I know several examples of that for in-house project builds. Of course, as you pointed out, this requires some discipline in package structure -- OPAM was designed to be the most tolerant possible on that front, to keep package management and project building issues separate (one thing at a time) -- but having some common project structure emerge would definitely be a good thing.

> - Jordan W, 24/02/2015 00:28 -
> Since there is a lot of interest in OCaml from web frontend communities, I
> thought it would be useful to imagine what the ideal development flow for
> this audience would look like. I know there's a ton of progress being made
> on documentation, and build systems, but I thought I would explore the
> problem from the perspective of a frontend developer, which means starting
> with the tooling that they are familiar with. One common tool is
> `CommonJS/package.json`, which is a way to model and organize dependencies
> using a single JSON file per package. The npm command line tools allow you
> to install files from disk based purely on these package.json files.
> 
> I created a proof of concept called CommonML, which lets developers use
> their familiar CommonJS workflow with OCaml:
> https://github.com/jordwalke/CommonML
> 
> I also took used it as an opportunity to explore what can be done when
> there are opinionated conventions in place. If you have a predictable
> project structure, how can that benefit us? In this case, I created an
> automatic docs builder (with nice styling) and also automatically generate
> IDE autocomplete support for all your dependencies (and your project's
> internal modules).
> 
> 
> I hope there is at least something we can take away from it that helps
> inform the design of OPAM and related tools.
> 
> 
> One nice aspect is that with `CommonJS`, there needn't be an authoritative
> package service. Your package.json file can point to arbitrary git URLs if
> you like.  (Note: The npm command line tool is *not* the npm package
> service - they are made by the same organization but one may be used
> without the other). However, this prototype I've built does allow you to
> host OCaml code on npm and depend on it.
> 
> By far the nicest thing about developing with `CommonJS` is that you don't
> have to think about module namespace collisions. There is Just One Way to
> namespace modules/packages. This prototype automatically sets up a similar
> namespacing convention for OCaml modules. It's not flexible, and you can't
> customize it, but it always works. It uses module aliases (thank you to Leo
> White for helping me come up with the build conventions).
> 
> Another thing I like about the `CommonJS` workflow is that developing
> packages locally is virtually the same as developing against remote
> dependencies. (`npm link` is much like `opam pin` I'm told). When you `npm
> install` dependencies, everything is pulled down into a local
> sandbox(node_modules directory) instead of being installed globally by
> default. If you want to see what versions your local package is seeing,
> just traverse the file system! If you want to reinstall, just delete the
> node_modules directory and then `npm install` again. I believe there is a
> way to get it to use a global package cache so the node_modules might
> contain symlinks to those shared packages - but that's just an
> optimization. There isn't any notion of building in `npm`, so there
> wouldn't be a build cache I believe.
> 
> In my quick prototype, every dependency must be compiled at least once for
> the root level project that you are building. This ends up being nice in
> cases where the build flags (such as -g) must be in effect for the
> compilation of all my dependencies - relying on the build flags that you
> *installed* the package with will bite you. But of course, the rebuilding
> approach can end up being super slow. Still, the incremental build times
> are *totally* reasonable since it does try to do some basic incremental
> compilation. I would have used ocamlbuild which probably does a much better
> job, but I needed to write my own totally custom operations in order to get
> the auto-namespacing (with the help of Leo White). I wasn't sure how to do
> that with ocamlbuild, but if I could, I imagine the incremental compilation
> times would be way better.
> 
> Either way, for most of the work I do (developing libraries with many other
> small libraries as dependencies) - I could see a development flow like this
> being a worthwhile goal, especially if it makes OCaml much more comfortable
> for a *huge* set of developers. `CommonJS` is likely becoming the most
> popular development flow. It's just a hacky proof of concept, but it was
> fun.

From jordojw at gmail.com  Sat Feb 28 20:22:29 2015
From: jordojw at gmail.com (Jordo)
Date: Sat, 28 Feb 2015 12:22:29 -0800
Subject: [opam-devel] CommonML: An opinionated build/package/develop
	workflow on top of CommonJS
In-Reply-To: <4570661.yNgK721Ky7@agaric>
References: <CAPOA5_58DJ5KYHosNmBJd1CQCpD6GOm-TxJ-s0PgC=odzk_5kA@mail.gmail.com>
 <4570661.yNgK721Ky7@agaric>
Message-ID: <120E6416-9D93-442B-898F-7BFA78EC6E38@gmail.com>

I think you've made the right design decision by keeping package management separate from building. CommonJS does the same - it's merely a way to specify dependencies for what should be installed on disk. The npm command line tools merely solve and install those files into local directories. Coincidentally, nodeJS knows how to reason about the specific way npm installs files onto disk (it just looks in the node_modules directory to implement the namespacing - which is what CommonML does at build time).

To keep the separation clean, while also implementing proper namespacing, I would suggest forming a spec for what is required to be "easily namespaceable", and how the namespacing is to be interfaced with - something similar to what I've done in CommonML. You could imagine something like a subset of OPAM packages that are marked as such so that you can browse OPAM for "no hassle packages" that are guaranteed to Just Work.  If it catches on (and I believe it should), it could become the norm. Someone should write a scalable version of CommonML built on top of ocamlbuild or something else that does a good job of incremental builds while working with this No Hassle convention. A first version that just implements the namespacing would probably only take a day for an expert.

The specific way I've implemented namespacing is actually much simpler and more sustainable than the nodeJS module lookup convention. There are issues with how nodeJS does it (relative paths) and I didn't just want to blindly mimic their convention without questioning it. The namespacing I've proposed with CommonML applies our findings from large scale development at Facebook - an environment with massive automated refactors, thousands of daily commits, and hyper-granular sharing/modularization across multiple teams, and open source contributors. But it's absolutely not revolutionary - quite the opposite - it's the simplest possible convention imaginable.

Would anyone be interested in helping me write an ocamlbuild plugin that accomplished the same? I'd be willing to bet one already exists.

Jordan

> On Feb 27, 2015, at 8:25 PM, Louis Gesbert <louis.gesbert at ocamlpro.com> wrote:
> 
> The way your included build system integrates the build of the dependencies with the build of the tool is also very interesting, and should raise some thought in build system design too. Incidentally, that's kind of what we do (by hand) for OPAM bootstrapping, and I know several examples of that for in-house project builds. Of course, as you pointed out, this requires some discipline in package structure -- OPAM was designed to be the most tolerant possible on that front, to keep package management and project building issues separate (one thing at a time) -- but having some common project structure emerge would definitely be a good thing.
> 
>> - Jordan W, 24/02/2015 00:28 -
>> Since there is a lot of interest in OCaml from web frontend communities, I
>> thought it would be useful to imagine what the ideal development flow for
>> this audience would look like. I know there's a ton of progress being made
>> on documentation, and build systems, but I thought I would explore the
>> problem from the perspective of a frontend developer, which means starting
>> with the tooling that they are familiar with. One common tool is
>> `CommonJS/package.json`, which is a way to model and organize dependencies
>> using a single JSON file per package. The npm command line tools allow you
>> to install files from disk based purely on these package.json files.
>> 
>> I created a proof of concept called CommonML, which lets developers use
>> their familiar CommonJS workflow with OCaml:
>> https://github.com/jordwalke/CommonML
>> 
>> I also took used it as an opportunity to explore what can be done when
>> there are opinionated conventions in place. If you have a predictable
>> project structure, how can that benefit us? In this case, I created an
>> automatic docs builder (with nice styling) and also automatically generate
>> IDE autocomplete support for all your dependencies (and your project's
>> internal modules).
>> 
>> 
>> I hope there is at least something we can take away from it that helps
>> inform the design of OPAM and related tools.
>> 
>> 
>> One nice aspect is that with `CommonJS`, there needn't be an authoritative
>> package service. Your package.json file can point to arbitrary git URLs if
>> you like.  (Note: The npm command line tool is *not* the npm package
>> service - they are made by the same organization but one may be used
>> without the other). However, this prototype I've built does allow you to
>> host OCaml code on npm and depend on it.
>> 
>> By far the nicest thing about developing with `CommonJS` is that you don't
>> have to think about module namespace collisions. There is Just One Way to
>> namespace modules/packages. This prototype automatically sets up a similar
>> namespacing convention for OCaml modules. It's not flexible, and you can't
>> customize it, but it always works. It uses module aliases (thank you to Leo
>> White for helping me come up with the build conventions).
>> 
>> Another thing I like about the `CommonJS` workflow is that developing
>> packages locally is virtually the same as developing against remote
>> dependencies. (`npm link` is much like `opam pin` I'm told). When you `npm
>> install` dependencies, everything is pulled down into a local
>> sandbox(node_modules directory) instead of being installed globally by
>> default. If you want to see what versions your local package is seeing,
>> just traverse the file system! If you want to reinstall, just delete the
>> node_modules directory and then `npm install` again. I believe there is a
>> way to get it to use a global package cache so the node_modules might
>> contain symlinks to those shared packages - but that's just an
>> optimization. There isn't any notion of building in `npm`, so there
>> wouldn't be a build cache I believe.
>> 
>> In my quick prototype, every dependency must be compiled at least once for
>> the root level project that you are building. This ends up being nice in
>> cases where the build flags (such as -g) must be in effect for the
>> compilation of all my dependencies - relying on the build flags that you
>> *installed* the package with will bite you. But of course, the rebuilding
>> approach can end up being super slow. Still, the incremental build times
>> are *totally* reasonable since it does try to do some basic incremental
>> compilation. I would have used ocamlbuild which probably does a much better
>> job, but I needed to write my own totally custom operations in order to get
>> the auto-namespacing (with the help of Leo White). I wasn't sure how to do
>> that with ocamlbuild, but if I could, I imagine the incremental compilation
>> times would be way better.
>> 
>> Either way, for most of the work I do (developing libraries with many other
>> small libraries as dependencies) - I could see a development flow like this
>> being a worthwhile goal, especially if it makes OCaml much more comfortable
>> for a *huge* set of developers. `CommonJS` is likely becoming the most
>> popular development flow. It's just a hacky proof of concept, but it was
>> fun.

