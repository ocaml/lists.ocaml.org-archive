From edwin+ml-ocaml at etorok.net  Fri Apr  8 16:51:21 2016
From: edwin+ml-ocaml at etorok.net (=?UTF-8?B?VMO2csO2ayBFZHdpbg==?=)
Date: Fri, 8 Apr 2016 18:51:21 +0300
Subject: [opam-devel] docker hub update?
Message-ID: <5707D379.20708@etorok.net>

Hi,

How often are the ocaml/opam docker containers rebuilt and what determines the build order?
E.g. 'ocaml/opam:latest' and 'ocaml/opam:debian' was last updated 9 days ago according to docker hub, but then some images
were updated a few hours ago. 
That looks confusing, would it be possible to prioritize building 'ocaml/opam:latest'?

As a workaround I can git pull and opam update if I want to install a new package:

$ sudo docker run -it ocaml/opam opam install qtest.2.2
[ERROR] No package matches qtest.2.2.

$ sudo docker run -it ocaml/opam bash -c 'cd /home/opam/opam-repository; git pull && opam update && opam install qtest.2.2'
[...]
OK, it installs it

Best regards,
-- 
Edwin T?r?k | Co-founder and Lead Developer

Skylable open-source object storage: reliable, fast, secure
http://www.skylable.com

From anil at recoil.org  Mon Apr 11 12:44:34 2016
From: anil at recoil.org (Anil Madhavapeddy)
Date: Mon, 11 Apr 2016 12:44:34 +0100
Subject: [opam-devel] docker hub update?
In-Reply-To: <5707D379.20708@etorok.net>
References: <5707D379.20708@etorok.net>
Message-ID: <5FDFE90F-41A5-4A7A-A3AB-98B52F6FA1B8@recoil.org>

On 8 Apr 2016, at 16:51, T?r?k Edwin <edwin+ml-ocaml at etorok.net> wrote:
> 
> Hi,
> 
> How often are the ocaml/opam docker containers rebuilt and what determines the build order?

Hi Edwin,

The Docker packages up on ocaml/opam are still somewhat experimental, so please do bear with me as I rearrange things around to make it work more efficiently.  On the other hand, this is a great time to bring up your usecases for them as well so I can make breaking changes in the Hub namespace before announcing them properly.

There are a few goals for the Docker Hub containers:

- make it easy to publish an OCaml-based application (such as your Skylable LibreS3, or Mirage, Irmin, Flowtype, Hack, Infer, etc etc)
- continuous integration with a variety of distros and compiler version variants
- development environments for OCaml

Each of these three are slightly at odds with each other, since:

- for publishing, we want a tiny base package and a statically linked OCaml executable (ideally with musl libc) for small, self-contained containers
- for CI, we want the entire matrix of possible distro/arch/compiler versions
- for development environments, we want the richest possible container with pre-configured Emacs/Vi/Merlin/debuggers.

The current container setup is split into:

- ocaml/ocaml
- ocaml/opam
- ocaml/opam-archive
- ocaml/dev

- The OCaml containers provide a version of OCaml current enough to compile OPAM, but do not include OPAM.
- The OPAM containers provide a comprehensive matrix of all the possible variations, and have a preinitialised OPAM repository embedded in the container.
- The dev ones install a few other things like Merlin and Jenga.

This is all autogenerated from the OCaml Dockerfile DSL via scripts at https://github.com/avsm/ocaml-docker-infra and pushed to GitHub (which in turn triggers a Docker Hub build). The major issue with it currently is that since the OPAM repository checkout is embedded within the container, and so all the containers need to be rebuilt every time to get the latest package database.


To fix this and address every usecase, I'd like to break up the container layers to be more fine-grained:

- ocaml/ocaml - remains as it is right now
- ocaml/opam-base - provides an installed OPAM binary, but _not_ initialised, and has the capability to volume mount an OPAM repository from which it can initialise the local base without any data being held in the container.
- ocaml/opam - embeds an OPAM repository checkout and works as-is right now 
- ocaml/opam-archive: also volume mounts in an external archive/ directory so we do not have to embed the volume in a container

The issue with an out-of-container OPAM archive is that it becomes slightly less easy to use out of the box, since you have to have a Git checkout on the host. Hence my thinking is to leave ocaml/opam easy to use (with a repository checked out) and use ocaml/opam-base for automated CI tools that want finer control over the exact revision of the repository to use.


> E.g. 'ocaml/opam:latest' and 'ocaml/opam:debian' was last updated 9 days ago according to docker hub, but then some images
> were updated a few hours ago. 
> That looks confusing, would it be possible to prioritize building 'ocaml/opam:latest'?

It's difficult to prioritise unfortunately -- Docker (my employer) is sponsoring the builds so that we have up to 100 in parallel, and they are pushed when they were built.

I was on vacation last week and it was an errant cron job that did the push that you saw, but the eventual plan is to have a cron job that rebuilds every day.


> As a workaround I can git pull and opam update if I want to install a new package:
> 
> $ sudo docker run -it ocaml/opam opam install qtest.2.2
> [ERROR] No package matches qtest.2.2.
> 
> $ sudo docker run -it ocaml/opam bash -c 'cd /home/opam/opam-repository; git pull && opam update && opam install qtest.2.2'
> [...]
> OK, it installs it


regards,
Anil

From gregoire.henry at ocamlpro.com  Mon Apr 11 13:19:35 2016
From: gregoire.henry at ocamlpro.com (=?iso-8859-1?Q?Gr=E9goire?= Henry)
Date: Mon, 11 Apr 2016 14:19:35 +0200
Subject: [opam-devel] docker hub update?
In-Reply-To: <5FDFE90F-41A5-4A7A-A3AB-98B52F6FA1B8@recoil.org>
References: <5707D379.20708@etorok.net>
 <5FDFE90F-41A5-4A7A-A3AB-98B52F6FA1B8@recoil.org>
Message-ID: <20160411121935.GA13981@venema.ocamlpro.com>

Hi Anil,

> To fix this and address every usecase, I'd like to break up the container layers to be more fine-grained:
> 
> - ocaml/ocaml - remains as it is right now
> - ocaml/opam-base - provides an installed OPAM binary, but _not_ initialised, and has the capability to volume mount an OPAM repository from which it can initialise the local base without any data being held in the container.
> - ocaml/opam - embeds an OPAM repository checkout and works as-is right now
> - ocaml/opam-archive: also volume mounts in an external archive/ directory so we do not have to embed the volume in a container

What about including in `ocaml/opam-base` a "partial" OPAM repository
with only the (some) compilers and initialize OPAM with it. Then
`ocaml/opam` (or CI tools based on `ocaml/opam-base`) will replace the
"partial" OPAM repository with the real one. If done correctly, they
shouldn't have to recompile OCaml.

The partial OPAM repository could either be manually updated (e.g. at
each OCaml release) or may be extracted from the official repository
by a bot.

Gr?goire

From anil at recoil.org  Mon Apr 11 14:03:16 2016
From: anil at recoil.org (Anil Madhavapeddy)
Date: Mon, 11 Apr 2016 14:03:16 +0100
Subject: [opam-devel] docker hub update?
In-Reply-To: <20160411121935.GA13981@venema.ocamlpro.com>
References: <5707D379.20708@etorok.net>
 <5FDFE90F-41A5-4A7A-A3AB-98B52F6FA1B8@recoil.org>
 <20160411121935.GA13981@venema.ocamlpro.com>
Message-ID: <50283E43-1DC4-4A3D-819A-702A35C952BC@recoil.org>


> On 11 Apr 2016, at 13:19, Gr?goire Henry <gregoire.henry at ocamlpro.com> wrote:
> 
> Hi Anil,
> 
>> To fix this and address every usecase, I'd like to break up the container layers to be more fine-grained:
>> 
>> - ocaml/ocaml - remains as it is right now
>> - ocaml/opam-base - provides an installed OPAM binary, but _not_ initialised, and has the capability to volume mount an OPAM repository from which it can initialise the local base without any data being held in the container.
>> - ocaml/opam - embeds an OPAM repository checkout and works as-is right now
>> - ocaml/opam-archive: also volume mounts in an external archive/ directory so we do not have to embed the volume in a container
> 
> What about including in `ocaml/opam-base` a "partial" OPAM repository
> with only the (some) compilers and initialize OPAM with it. Then
> `ocaml/opam` (or CI tools based on `ocaml/opam-base`) will replace the
> "partial" OPAM repository with the real one. If done correctly, they
> shouldn't have to recompile OCaml.

Yes I would really like this!  This could be easily done by running a git filter-subtree on the existing checkout to mirror something that containers only the compilers and a very small set of packages.

Louis, ThomasG, what do you think about this?  We could call this ocaml/opam-repository-minimal or something, and have it automatically generated in a manner similar to the rewrite scripts today.  It would have to work with OPAM-HEAD as well though, for compilers-as-packages.

> 
> The partial OPAM repository could either be manually updated (e.g. at
> each OCaml release) or may be extracted from the official repository
> by a bot.


Agreed -- definitely the latter would be useful, since the extractor script could trigger a container rebuild only if there are changes in the core packages.  The same technique could also be used for wider slices of the main OPAM repository.

Anil


From edwin+ml-ocaml at etorok.net  Mon Apr 11 15:50:54 2016
From: edwin+ml-ocaml at etorok.net (=?UTF-8?B?VMO2csO2ayBFZHdpbg==?=)
Date: Mon, 11 Apr 2016 17:50:54 +0300
Subject: [opam-devel] docker hub update?
In-Reply-To: <5FDFE90F-41A5-4A7A-A3AB-98B52F6FA1B8@recoil.org>
References: <5707D379.20708@etorok.net>
 <5FDFE90F-41A5-4A7A-A3AB-98B52F6FA1B8@recoil.org>
Message-ID: <570BB9CE.7070906@etorok.net>

On 04/11/2016 14:44, Anil Madhavapeddy wrote:
> The Docker packages up on ocaml/opam are still somewhat experimental,
> so please do bear with me as I rearrange things around to make it
> work more efficiently.

Hi Anil,

They're already quite useful, thanks a lot for creating them!

>  On the other hand, this is a great time to
> bring up your usecases for them
> as well so I can make breaking
> changes in the Hub namespace before announcing them properly.
> 
> There are a few goals for the Docker Hub containers:
> 
> - make it easy to publish an OCaml-based application (such as your
> Skylable LibreS3, or Mirage, Irmin, Flowtype, Hack, Infer, etc etc)

I'd love to be able to do this, but I had to jump through some hoops to get my image size down,
e.g. by installing, compiling and removing the development tools in a single RUN line.
This got my image down from ~1GB to 85 MB, but I can't use an ocaml/opam base image for this (since removing files doesn't shrink the image download size).

Don't know if it'd be possible to squash some layers on the Docker Hub, or build in 2 phases: 
one container to build a .deb/.apk/.rpm, another container to install that on a minimal base image
(using a package to make sure all system gets installed, like libev, etc.).

For this use-case it would be useful to have a base image that doesn't change every day, but only when ocaml/opam/opam depext itself changes.

> -> continuous integration with a variety of distros and compiler version
> variants

My current use case fits roughly here. I want to test that I got all opam deps and system deps properly
specified, i.e. I want to build in a 'clean' environment.
Docker's cache comes in handy to avoid rebuilding all the deps when the opam file doesn't change.
Testing on multiple distros is meant to be as simple as changing the FROM line (and fixing opam files where needed):
https://gist.github.com/edwintorok/0149412fb55f58c0b7c5eb605adaa8fa

Also for testing a local opam remote, although SSH agent forwarding is a bit tricky:
https://gist.github.com/edwintorok/b8bf92acc6ba9aecadcb25f0f492e8e2

> - development environments for OCaml

I thought about this, but I'd personally wait until Docker gains the ability to run containers as non-root.

> - ocaml/opam-base -
> provides an installed OPAM binary, but _not_ initialised, and has the
> capability to volume mount an OPAM repository from which it can
> initialise the local base without any data being held in the
> container.

Yes! This would be similar to Debian containers, where you must run apt-get update:
otherwise 'apt-get install' finds no packages.

> - ocaml/opam - embeds an OPAM repository checkout and
> works as-is right now

Not sure if rebuilding the image or using ONBUILD would be better here.
For local usage ONBUILD might get you something fresher without having to pull everyday from Docker.

On Docker Hub the shared checkout would probably save time in containers that depend on this.

>> E.g. 'ocaml/opam:latest' and 'ocaml/opam:debian' was last updated 9
>> days ago according to docker hub, but then some images were updated
>> a few hours ago. That looks confusing, would it be possible to
>> prioritize building 'ocaml/opam:latest'?
> 
> It's difficult to prioritise unfortunately -- Docker (my employer) is
> sponsoring the builds so that we have up to 100 in parallel, and they
> are pushed when they were built.

Nice!

> 
> I was on vacation last week and it was an errant cron job that did
> the push that you saw, but the eventual plan is to have a cron job
> that rebuilds every day.

Ok, in case some limits are hit would it be possible to pick a few images (like :latest) that are triggered first,
and the rest are triggered later?

Best regards,
-- 
Edwin T?r?k | Co-founder and Lead Developer

Skylable open-source object storage: reliable, fast, secure
http://www.skylable.com

From daniel.buenzli at erratique.ch  Wed Apr 13 15:27:27 2016
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Wed, 13 Apr 2016 16:27:27 +0200
Subject: [opam-devel] [RFC] OPAM files as *the* OCaml package metadata format
Message-ID: <DB1A4E1CF4F14F26AAD8D785397BFC51@erratique.ch>

Hello,   

A lot of the things I envision for the gradual simplification of the OCaml build and package eco-system involves using OPAM files as the pivotal package metadata file format (Louis, I really need these x- fields for playing with ideas?)

Since OCaml packages may also get used outside OPAM itself (e.g. in an os package manager), this means that I need to install opam files so that they can be made available to hypothetical tools that consume them, independently from an OPAM install. The upcoming topkg packager overhaul will do this automatically, unless prevented.  

However the following questions remain:

1. Where should those be installed in `lib:` (like METAs) or `etc:` (seems more logical) or ? ?  
2. Has this any chance to confuse OPAM itself  ? My guess is no, it treats its install directories elements as sequence of bytes.  

Best,

Daniel






From anil at recoil.org  Wed Apr 13 15:31:42 2016
From: anil at recoil.org (Anil Madhavapeddy)
Date: Wed, 13 Apr 2016 15:31:42 +0100
Subject: [opam-devel] [RFC] OPAM files as *the* OCaml package metadata
	format
In-Reply-To: <DB1A4E1CF4F14F26AAD8D785397BFC51@erratique.ch>
References: <DB1A4E1CF4F14F26AAD8D785397BFC51@erratique.ch>
Message-ID: <D0B60082-1051-458B-8C2C-01E4C3223CD2@recoil.org>

On 13 Apr 2016, at 15:27, Daniel B?nzli <daniel.buenzli at erratique.ch> wrote:
> 
> Hello,   
> 
> A lot of the things I envision for the gradual simplification of the OCaml build and package eco-system involves using OPAM files as the pivotal package metadata file format (Louis, I really need these x- fields for playing with ideas?)
> 
> Since OCaml packages may also get used outside OPAM itself (e.g. in an os package manager), this means that I need to install opam files so that they can be made available to hypothetical tools that consume them, independently from an OPAM install. The upcoming topkg packager overhaul will do this automatically, unless prevented.  
> 
> However the following questions remain:
> 
> 1. Where should those be installed in `lib:` (like METAs) or `etc:` (seems more logical) or ? ?  
> 2. Has this any chance to confuse OPAM itself  ? My guess is no, it treats its install directories elements as sequence of bytes.  

Interesting idea. Do you have any specific consumers in mind for these files?  For example, HomeBrew and MacPorts may both want to run post-upgrade hooks to recompile OPAM packages for depexts that got upgraded.

Comments:
-  The biggest problem I can see is that an individual OPAM file isn't much use without the surrounding repository in which it is evaluated. Where does that sit?
- I think it would be good to encourage the use of an `opam/` directory so that `descr` files can also be tracked with the development version.  We could even assemble useful information in there such as example code fragments that would appear in the OPAM homepage for that package when published. 

-anil

From daniel.buenzli at erratique.ch  Wed Apr 13 15:46:05 2016
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Wed, 13 Apr 2016 16:46:05 +0200
Subject: [opam-devel] [RFC] OPAM files as *the* OCaml package metadata
 format
In-Reply-To: <C813B08F-8A21-4BE7-92DC-006CEED09BAB@gmail.com>
References: <DB1A4E1CF4F14F26AAD8D785397BFC51@erratique.ch>
 <C813B08F-8A21-4BE7-92DC-006CEED09BAB@gmail.com>
Message-ID: <4FF35B6FEA52450A80CAEFD7A10B1224@erratique.ch>

Responding on list, I hope you don't mind.  


Le mercredi, 13 avril 2016 ? 16:35, Michael Gr?newald a ?crit :

> > On 13 Apr 2016, at 16:27, Daniel B?nzli <daniel.buenzli at erratique.ch (mailto:daniel.buenzli at erratique.ch)> wrote:
> >  
> > 1. Where should those be installed in `lib:` (like METAs) or `etc:` (seems more logical) or ? ?
> IIRC Before Baptist introduced pkg, FreeBSD used to store port and packages
> metadata in /var/db/ports and /var/db/packages and I would see a similar,
> directory, like ${OPAMROOT}/var/db/opam/${SWITCH}, as a good fit to publish or link
> opam files of installed packages.

I think there are two problems here:  

1) There's no support at the moment for such directories in OPAM install file  
2) I'm not sure what os distributions think about these paths in general

Best,  

Daniel

From daniel.buenzli at erratique.ch  Wed Apr 13 15:57:12 2016
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Wed, 13 Apr 2016 16:57:12 +0200
Subject: [opam-devel] [RFC] OPAM files as *the* OCaml package metadata
 format
In-Reply-To: <D0B60082-1051-458B-8C2C-01E4C3223CD2@recoil.org>
References: <DB1A4E1CF4F14F26AAD8D785397BFC51@erratique.ch>
 <D0B60082-1051-458B-8C2C-01E4C3223CD2@recoil.org>
Message-ID: <ABDAB393DBF34DB5A5297D2407E6A679@erratique.ch>

Le mercredi, 13 avril 2016 ? 16:31, Anil Madhavapeddy a ?crit :
> Interesting idea. Do you have any specific consumers in mind for these files?

Build tool link helpers, documentation indexer, finder and viewers, etc.

> - The biggest problem I can see is that an individual OPAM file isn't much use without the surrounding repository in which it is evaluated. Where does that sit?
You'd have to assume that a certain directory structure is followed, like the one OPAM enforces at the moment.

$ROOT/{etc,lib,doc}/$PGK/
$ROOT/{bin}/

Of course this should be remappable by the consumers.

Daniel



From michipili at gmail.com  Wed Apr 13 16:09:39 2016
From: michipili at gmail.com (=?utf-8?Q?Michael_Gr=C3=BCnewald?=)
Date: Wed, 13 Apr 2016 17:09:39 +0200
Subject: [opam-devel] [RFC] OPAM files as *the* OCaml package metadata
	format
In-Reply-To: <4FF35B6FEA52450A80CAEFD7A10B1224@erratique.ch>
References: <DB1A4E1CF4F14F26AAD8D785397BFC51@erratique.ch>
 <C813B08F-8A21-4BE7-92DC-006CEED09BAB@gmail.com>
 <4FF35B6FEA52450A80CAEFD7A10B1224@erratique.ch>
Message-ID: <09440688-77A0-424D-BF9C-64C4F31AD13F@gmail.com>


> On 13 Apr 2016, at 16:46, Daniel B?nzli <daniel.buenzli at erratique.ch> wrote:
> 
> I think there are two problems here:  
> 
> 1) There's no support at the moment for such directories in OPAM install file

This is probably a rather minor problem, I guess. The presence of this support
could be used to tie-break otherwise equally good solutions but is probably
no show-stopper.
 
> 2) I'm not sure what os distributions think about these paths in general

This point is explicitly adressed in the FHS, which is the closest thing
to a standard in the Linux world for these matters:

   (I?m lazy so I quote Wikipedia):

    /var/lib

    State information. Persistent data modified by programs as they run, e.g., databases,     
    packaging system metadata, etc.

   https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard

The idea a system of what should go in this directory is probably only relevant
if we use /usr or /usr/local as OPAMROOT, but for other prefixes we should be
relatively free to do what we want ? but mirroring the hierarchy used in the
own?s OS prefix is probably a good thing here.


From daniel.buenzli at erratique.ch  Wed Apr 13 18:03:05 2016
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Wed, 13 Apr 2016 19:03:05 +0200
Subject: [opam-devel] [RFC] OPAM files as *the* OCaml package metadata
 format
In-Reply-To: <09440688-77A0-424D-BF9C-64C4F31AD13F@gmail.com>
References: <DB1A4E1CF4F14F26AAD8D785397BFC51@erratique.ch>
 <C813B08F-8A21-4BE7-92DC-006CEED09BAB@gmail.com>
 <4FF35B6FEA52450A80CAEFD7A10B1224@erratique.ch>
 <09440688-77A0-424D-BF9C-64C4F31AD13F@gmail.com>
Message-ID: <FA1D75E56CA74E589223C371F6E81705@erratique.ch>



Le mercredi, 13 avril 2016 ? 17:09, Michael Gr?newald a ?crit :

> This is probably a rather minor problem, I guess. The presence of this support
> could be used to tie-break otherwise equally good solutions but is probably
> no show-stopper.

I'm fine with your proposal, but at the moment I'm constrained by what OPAM provides in its install files. So I think I'll move on with `lib` like META file do rather than `etc`. Now that I think of it `etc` should be rather kept for configuring the software itself.

If people stay with the defaults of topkg ? and they should. This can be tweaked later in bulk if OPAM provides a better install destination alternative.

Best,

Daniel



From louis.gesbert at ocamlpro.com  Thu Apr 14 09:04:57 2016
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Thu, 14 Apr 2016 17:04:57 +0900
Subject: [opam-devel] [RFC] OPAM files as *the* OCaml package metadata
 format
In-Reply-To: <DB1A4E1CF4F14F26AAD8D785397BFC51@erratique.ch>
References: <DB1A4E1CF4F14F26AAD8D785397BFC51@erratique.ch>
Message-ID: <2744176.6h3nOvt1Sh@maitake>

Let me gather some answers in a single response (including lots of spoilers on 
opam 2.0~alpha)...

> Daniel:
> (Louis, I really need these x- fields for playing with ideas?)

Yup, 2.0~alpha is getting rolled out. I'll be grateful if you are ready to 
take the risk, as you have been most helpful with your reports on previous 
releases.

> Since OCaml packages may also get used outside OPAM itself (e.g. in an os
> package manager), this means that I need to install opam files so that they
> can be made available to hypothetical tools that consume them,
> independently from an OPAM install. The upcoming topkg packager overhaul
> will do this automatically, unless prevented.

The granularity of opam libs for manipulating these files has been much 
improved, but it could probably still be improved. Feel free to suggest such 
changes (OpamFile should probably be split; it would be better to do these 
_before_ everyone migrates to the new APIs). Also, the data handling is done 
through the new lens-like OpamFormat module (in lib opam-format).

The work-in-progress APIs are now online here:
    http://opam.ocaml.org/doc/2.0/api/

> 1. Where should those be installed in `lib:` (like METAs) or `etc:` (seems
> more logical) or ? ?

Two things:
- opam now puts all its metadata into a .opam-switch/ subdir below the switch 
prefix. This is cleaner.
- it now keeps a synchronised cache of the opam files of all installed 
packages, in each switch. It's at `<prefix>/.opam-
switch/packages/<name>.<version>/opam`, but could be moved somewhere else (a 
directory structure is used to allow for a `files/` subdir, and for 
consistence with the repository format)

> 2. Has this any chance to confuse OPAM itself  ? My
> guess is no, it treats its install directories elements as sequence of
> bytes.

No, unless you write directly to the above-mentionned cache.

> Anil:
> - I think it would be good to encourage the use of an `opam/` directory so
> that `descr` files can also be tracked with the development version.  We
> could even assemble useful information in there such as example code
> fragments that would appear in the OPAM homepage for that package when
> published.

Unless you use overlay files (`files/xxx` that get added to the archive), 
which should really only be used for hot-patching in the repo and not on 
development packages, you can now put everything within a single opam file:

- For the description, use a `descr:` field, and a simple string. The new 
`"""`-delimited syntax for strings makes this more convenient.
- For the url, use the "section" format (implemented since opam 1.0 or before, 
but never used):
    url {
      <same format as the url file>
    }

> Daniel:
> 1) There's no support at the moment for such directories in OPAM install
> file

This can easily be added if we get a consensus

> Build tool link helpers, documentation indexer, finder and viewers, etc.

The repository maintainers will probably have to put some guidelines on what 
should or should not be within these files, when they are part of the official 
repository ?

Hope this helps!
Louis

From daniel.buenzli at erratique.ch  Thu Apr 14 13:30:19 2016
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Thu, 14 Apr 2016 14:30:19 +0200
Subject: [opam-devel] [RFC] OPAM files as *the* OCaml package metadata
 format
In-Reply-To: <2744176.6h3nOvt1Sh@maitake>
References: <DB1A4E1CF4F14F26AAD8D785397BFC51@erratique.ch>
 <2744176.6h3nOvt1Sh@maitake>
Message-ID: <F752EE6A90A04D38AC27EB6FE988BC89@erratique.ch>

Le jeudi, 14 avril 2016 ? 10:04, Louis Gesbert a ?crit :
> Yup, 2.0~alpha is getting rolled out. I'll be grateful if you are ready to
> take the risk, as you have been most helpful with your reports on previous  
> releases.

What kind of time frame to envision ? Should I write topkg directly against 2.0 ? For example the existence of x-fields may have an impact on the actual package description API (I'd like to specify the location of the readme, change log and license files there rather than in the topkg package description as this may be useful to other consumers, e.g. doc indexers) and topkg's description API should not be changed too often.

Also depending on what 2.0 the tool provides some aspects of topkg may be simplified. Namely I need #2446 (opam query) to avoid an ipc call from the package description to topkg the tool on pinned topkg packages (see note [1] if you are interested why).  

> The granularity of opam libs for manipulating these files has been much
> improved, but it could probably still be improved. Feel free to suggest such  
> changes (OpamFile should probably be split; it would be better to do these  
> _before_ everyone migrates to the new APIs). Also, the data handling is done  
> through the new lens-like OpamFormat module (in lib opam-format).

I think it would be nice to have an independent library with simple deps that handles the data formats (e.g. opam-installer should use this). Anil suggested somewhere else that opam-lib as it stands is not so easy to install due to the dependency cone.

  
> > 1. Where should those be installed in `lib:` (like METAs) or `etc:` (seems
> > more logical) or ? ?
>  
> Two things:
> - opam now puts all its metadata into a .opam-switch/ subdir below the switch  
> prefix. This is cleaner.

Why is the directory hidden ?  
  
If I'm not mistaken these two things do not help me at all with the request which is to be able to handle non opam-managed scenarios. Basically the workflow I see for for OS package managers and topkg packages is the following:

1) Download the distribution archive of the package.
2) Build the package according to the build instructions of the OPAM file present in the archive
3) Process the generated OPAM install file for installing the package (e.g. using opam-installer).

Now 3) should install the OPAM file present in the archive aswell so that tooling external to opam can easily access package metadata stored in OPAM files.
  
> Unless you use overlay files (`files/xxx` that get added to the archive),
> which should really only be used for hot-patching in the repo and not on  
> development packages, you can now put everything within a single opam file:
>  
> - For the description, use a `descr:` field, and a simple string. The new  
> `"""`-delimited syntax for strings makes this more convenient.

Would it please be possible to split `descr` into `synopsis` (the one-line tagline) and `descr` (the long description) ?  
  
> > Daniel:
> > 1) There's no support at the moment for such directories in OPAM install
> > file
>  
> This can easily be added if we get a consensus

FWIW I'm not interested in arguing where this should live, I have already too many other things to decide on. Just tell me where these OPAM files should get installed and provide me with support for the location in OPAM install files...

> > Build tool link helpers, documentation indexer, finder and viewers, etc.
> The repository maintainers will probably have to put some guidelines on what
> should or should not be within these files, when they are part of the official  
> repository ?

Which files are you talking about ?

Best,  

Daniel

[1] The reason for this is that topkg the lib, that packages depend upon, has no dependency, hence no opam-lib.  

On pins I need to be able to access the fields of the opam file to perform the source watermaking process that is performed on releases (which handles e.g. version substitution, but also allow substitution of variables with the value of arbitrary opam field).  

The idea is that if you have topkg-care installed when you pin, which has the topkg tool and depends on opam lib, the watermarking process will be performed correctly: the package description calls topkg the tool to get the field (otherwise we just substitute with undefined and warn). Now of course if #2446 exists I can just call opam and always be correct.








From louis.gesbert at ocamlpro.com  Fri Apr 15 03:28:46 2016
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Fri, 15 Apr 2016 11:28:46 +0900
Subject: [opam-devel] [RFC] OPAM files as *the* OCaml package metadata
 format
In-Reply-To: <F752EE6A90A04D38AC27EB6FE988BC89@erratique.ch>
References: <DB1A4E1CF4F14F26AAD8D785397BFC51@erratique.ch>
 <2744176.6h3nOvt1Sh@maitake> <F752EE6A90A04D38AC27EB6FE988BC89@erratique.ch>
Message-ID: <1841141.qX6PJhxGz6@maitake>

Le jeudi 14 avril 2016, 14:30:19 Daniel B?nzli a ?crit :
> Le jeudi, 14 avril 2016 ? 10:04, Louis Gesbert a ?crit :
> > Yup, 2.0~alpha is getting rolled out. I'll be grateful if you are ready to
> > take the risk, as you have been most helpful with your reports on previous
> > releases.
> 
> What kind of time frame to envision ? Should I write topkg directly against
> 2.0 ? For example the existence of x-fields may have an impact on the
> actual package description API (I'd like to specify the location of the
> readme, change log and license files there rather than in the topkg package
> description as this may be useful to other consumers, e.g. doc indexers)
> and topkg's description API should not be changed too often.

This sounds nice.
I would release the alpha just now, but since I'm taking a few days off 
(sunday-thursday), I'll wait until I am back. As for the final version, it's 
hard to predict, but I'd say it should be ready by the summer.

> Also depending on what 2.0 the tool provides some aspects of topkg may be
> simplified. Namely I need #2446 (opam query) to avoid an ipc call from the
> package description to topkg the tool on pinned topkg packages (see note
> [1] if you are interested why).

The work on 2.0 so far has been focused on the heavy-lifting, API rehauls, and 
feature-enabling design changes; the alpha is _not_  a feature freeze, and I 
expect to spend most of my time adding the smaller, but most useful features 
in the coming weeks (besides the inevitable bug fixing of course).

`opam query` is not here yet but it's nothing difficult and will be added.

> I think it would be nice to have an independent library with simple deps
> that handles the data formats (e.g. opam-installer should use this). Anil
> suggested somewhere else that opam-lib as it stands is not so easy to
> install due to the dependency cone.

Yes, I have had requests for this already. For now the dependencies for 
building `opam-lib.format` are:
- unix
- re
- ocamlgraph
- jsonm

Jsonm is not used per se, but we bind it in our set and map functors. 
ocamlgraph is only needed by the parallel processing engine, which could be 
moved to a different lib (it's bound in OpamPackage.Graph, but that can 
probably be easily changed as well).
The main problem may actually be that there is no separate opam package ?

> > - opam now puts all its metadata into a .opam-switch/ subdir below the
> > switch prefix. This is cleaner.
> 
> Why is the directory hidden ?

No strong opinion on this, it's just how is commonly done for metadata dirs, 
and makes the prefix look like a standard one. It could also actually be 
outside the prefix. Side-note: switch prefixes are still by default directly 
below ~/.opam, which means you can't e.g. name a switch "repo" since that name 
is used by opam...

> If I'm not mistaken these two things do not help me at all with the request
> which is to be able to handle non opam-managed scenarios. Basically the
> workflow I see for for OS package managers and topkg packages is the
> following:
> 
> 1) Download the distribution archive of the package.
> 2) Build the package according to the build instructions of the OPAM file
> present in the archive 3) Process the generated OPAM install file for
> installing the package (e.g. using opam-installer).
> 
> Now 3) should install the OPAM file present in the archive aswell so that
> tooling external to opam can easily access package metadata stored in OPAM
> files.

I see. There is not much required from opam then, maybe just automatic 
installation (or linking) of the opam files to a standard location.

> > Unless you use overlay files (`files/xxx` that get added to the archive),
> > which should really only be used for hot-patching in the repo and not on
> > development packages, you can now put everything within a single opam
> > file:
> > 
> > - For the description, use a `descr:` field, and a simple string. The new
> > `"""`-delimited syntax for strings makes this more convenient.
> 
> Would it please be possible to split `descr` into `synopsis` (the one-line
> tagline) and `descr` (the long description) ?

That might be more explicit indeed, but makes descr-file and opam-included 
descr further apart (both are still supported at the moment, with a logged 
warning if both are present). 

> > > Build tool link helpers, documentation indexer, finder and viewers, etc.
> > 
> > The repository maintainers will probably have to put some guidelines on
> > what should or should not be within these files, when they are part of
> > the official repository ?
> 
> Which files are you talking about ?

Sorry, I was speaking about the `x-*` fields in the package definition 
("opam") files.

Best,
Louis

From daniel.buenzli at erratique.ch  Fri Apr 15 12:49:34 2016
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Fri, 15 Apr 2016 13:49:34 +0200
Subject: [opam-devel] [RFC] OPAM files as *the* OCaml package metadata
 format
In-Reply-To: <1841141.qX6PJhxGz6@maitake>
References: <DB1A4E1CF4F14F26AAD8D785397BFC51@erratique.ch>
 <2744176.6h3nOvt1Sh@maitake>
 <F752EE6A90A04D38AC27EB6FE988BC89@erratique.ch>
 <1841141.qX6PJhxGz6@maitake>
Message-ID: <5E26E5954DC648B195C958E6800E0011@erratique.ch>


Le vendredi, 15 avril 2016 ? 04:28, Louis Gesbert a ?crit :
> As for the final version, it's hard to predict, but I'd say it should be ready by the summer.
Mmmh. I want to move on quicker I think. I'd rather improve the topkg tool later (which is different from topkg the library). Now that I thought a little bit more about it, the x-fields should in fact have little impact on the API except changing some default values. I still need to know the name of the standard file (change log, readme, etc.) in the description without using opam or opam-lib so that I can automatically mention them in the OPAM install file.
  

> The main problem may actually be that there is no separate opam package ?

I guess so.
  
> I see. There is not much required from opam then,  

Only a var-lib section in OPAM install files if we take Michael's suggestion. I opened  

https://github.com/ocaml/opam/issues/2517
  
> maybe just automatic  
> installation (or linking) of the opam files to a standard location.

No. It should be the package's duty to do so, so that the install procedure is uniform whether you operate in an opam managed context or not. Otherwise we'll have packages that work in a context and not in the other and resulting annoying package fixing noise.

> That might be more explicit indeed, but makes descr-file and opam-included
> descr further apart (both are still supported at the moment, with a logged  
> warning if both are present).

I'd still argue for it, simply warn by consulting two fields... It's a "natural" value you often want to access, for example to generate package listings. The less data massaging the easier, e.g. `opam query -f synopsis` vs `opam query -f descr | head -n 1` and you are now windows incompatible.
  
>  
> Sorry, I was speaking about the `x-*` fields in the package definition
> ("opam") files.

Ah, I don't think it should be the business of the OCaml OPAM repository maintainers to have a say about what these fields hold as long as they do not influence OPAM itself or are directly related to the resulting experience they expect from the repository (e.g. if some of the fields are used by build system link helpers).  

Best,  

Daniel




From agarwal1975 at gmail.com  Fri Apr 15 19:33:15 2016
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Fri, 15 Apr 2016 14:33:15 -0400
Subject: [opam-devel] specifying environment variables in opam package
Message-ID: <CAMu2m2KdHwgMsbFE3rUNNq=GwXTzbbrWwK07idTwNjBt8SuGUA@mail.gmail.com>

I noticed that opam sets PERL5LIB. Can someone explain why. I actually need
to add to this path when a certain package is installed. Does opam allow
that?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20160415/a55132da/attachment.html>

From randomdsdevel at gmail.com  Fri Apr 15 19:40:37 2016
From: randomdsdevel at gmail.com (Bryce Glover)
Date: Fri, 15 Apr 2016 14:40:37 -0400
Subject: [opam-devel] [RFC] OPAM files as *the* OCaml package metadata
	format
Message-ID: <5B3C8B8E-D6B3-4F9F-9675-E682CC8DDE00@gmail.com>

     I?m just a lurker here, but I just couldn?t help but bring this up:  shouldn?t we make OPAM installable system-wide per the original intent of issue #1950 <https://github.com/ocaml/opam/issues/1950> before we start making it so that other package managers can interact with the OPAM repository?  Also, how is that issue?s resolution progressing???i. e.:  will it be fixed by the next version of OPAM?  

??Bryce Glover
??RandomDSdevel at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20160415/496fe6d9/attachment.html>

From louis.gesbert at ocamlpro.com  Sat Apr 16 03:56:30 2016
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Sat, 16 Apr 2016 11:56:30 +0900
Subject: [opam-devel] specifying environment variables in opam package
In-Reply-To: <CAMu2m2KdHwgMsbFE3rUNNq=GwXTzbbrWwK07idTwNjBt8SuGUA@mail.gmail.com>
References: <CAMu2m2KdHwgMsbFE3rUNNq=GwXTzbbrWwK07idTwNjBt8SuGUA@mail.gmail.com>
Message-ID: <6739750.akuXD5UinZ@maitake>

Le vendredi 15 avril 2016, 14:33:15 Ashish Agarwal a ?crit :
> I noticed that opam sets PERL5LIB. Can someone explain why.

The answer is here: https://github.com/ocaml/opam/pull/755

> I actually need
> to add to this path when a certain package is installed. Does opam allow
> that?

Opam 2.0 does! ?
There is a new `setenv:` field, which follows the same syntax as the old comp 
file `env:` field. It is a list of environment updates as documented at:
  http://opam.ocaml.org/doc/Manual.html#Environmentupdates

Packages depending on this package should properly see the new environment 
variable, and the user will be prompted to re-run `eval $(opam config env)` on 
changes.

From daniel.buenzli at erratique.ch  Sat Apr 16 10:28:00 2016
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Sat, 16 Apr 2016 11:28:00 +0200
Subject: [opam-devel] [RFC] OPAM files as *the* OCaml package metadata
 format
In-Reply-To: <5B3C8B8E-D6B3-4F9F-9675-E682CC8DDE00@gmail.com>
References: <5B3C8B8E-D6B3-4F9F-9675-E682CC8DDE00@gmail.com>
Message-ID: <9F3D0DF9A61B4C259F76D635250437C4@erratique.ch>

Le vendredi, 15 avril 2016 ? 20:40, Bryce Glover a ?crit :
> I?m just a lurker here, but I just couldn?t help but bring this up: shouldn?t we make OPAM installable system-wide per the original intent of issue #1950 (https://github.com/ocaml/opam/issues/1950) before we start making it so that other package managers can interact with the OPAM repository?

The goal is not to make them *interact* with opam. AFAIR package managers are not very keen on other tools fiddling with their prefixes. The goal is to make it easy to transform OPAM packages into system packages while retaining the ability to use the tooling (documentation tools, link helpers, whathever) that allows to use them regardless if they are installed via opam or not.

Best,

Daniel



From edwin+ml-ocaml at etorok.net  Sat Apr 16 11:45:38 2016
From: edwin+ml-ocaml at etorok.net (=?UTF-8?B?VMO2csO2ayBFZHdpbg==?=)
Date: Sat, 16 Apr 2016 13:45:38 +0300
Subject: [opam-devel] [RFC] OPAM files as *the* OCaml package metadata
 format
In-Reply-To: <9F3D0DF9A61B4C259F76D635250437C4@erratique.ch>
References: <5B3C8B8E-D6B3-4F9F-9675-E682CC8DDE00@gmail.com>
 <9F3D0DF9A61B4C259F76D635250437C4@erratique.ch>
Message-ID: <571217D2.2040901@etorok.net>

On 04/16/2016 12:28, Daniel B?nzli wrote:
> Le vendredi, 15 avril 2016 ? 20:40, Bryce Glover a ?crit :
>> I?m just a lurker here, but I just couldn?t help but bring this up: shouldn?t we make OPAM installable system-wide per the original intent of issue #1950 (https://github.com/ocaml/opam/issues/1950) before we start making it so that other package managers can interact with the OPAM repository?
> 
> The goal is not to make them *interact* with opam. AFAIR package managers are not very keen on other tools fiddling with their prefixes. The goal is to make it easy to transform OPAM packages into system packages
> while retaining the ability to use the tooling (documentation tools, link helpers, whathever) that allows to use them regardless if they are installed via opam or not.

This sounds very useful, I'd be interested in trying this out when you have some (even pre-alpha) code ready.

Would this make it possible to have an OCaml equivalent of gofed [1]?
See:
 https://github.com/gofed/gofed#launching
 https://github.com/gofed/gofed#dependency-discovering
 https://github.com/gofed/gofed#check-of-up2date-dependencies-in-fedora

Best regards,
-- 
Edwin T?r?k | Co-founder and Lead Developer

Skylable open-source object storage: reliable, fast, secure
http://www.skylable.com

From daniel.buenzli at erratique.ch  Sat Apr 16 13:21:20 2016
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Sat, 16 Apr 2016 14:21:20 +0200
Subject: [opam-devel] [RFC] OPAM files as *the* OCaml package metadata
 format
In-Reply-To: <571217D2.2040901@etorok.net>
References: <5B3C8B8E-D6B3-4F9F-9675-E682CC8DDE00@gmail.com>
 <9F3D0DF9A61B4C259F76D635250437C4@erratique.ch>
 <571217D2.2040901@etorok.net>
Message-ID: <FB245B8B6CA44935B3F0DE12A3DE5AB0@erratique.ch>

Le samedi, 16 avril 2016 ? 12:45, T?r?k Edwin a ?crit :
> This sounds very useful, I'd be interested in trying this out when you have some (even pre-alpha) code ready.  

No precise plan, only some ideas at the moment, so don't hold your breath. Just trying to put the right bits at the right place so that those can be tried or realized at some point.

> Would this make it possible to have an OCaml equivalent of gofed [1]?
Why not ? Note that I'm personally not interested in solving that problem, but I guess there may be downstream packagers that may be.

Best,

Daniel



From agarwal1975 at gmail.com  Sat Apr 16 13:27:11 2016
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Sat, 16 Apr 2016 08:27:11 -0400
Subject: [opam-devel] specifying environment variables in opam package
In-Reply-To: <6739750.akuXD5UinZ@maitake>
References: <CAMu2m2KdHwgMsbFE3rUNNq=GwXTzbbrWwK07idTwNjBt8SuGUA@mail.gmail.com>
 <6739750.akuXD5UinZ@maitake>
Message-ID: <CAMu2m2L2MYzfitpon_q4Ydyhu+vcibEmEJpx4mQxhbVRvdnkHQ@mail.gmail.com>

On Fri, Apr 15, 2016 at 10:56 PM, Louis Gesbert <louis.gesbert at ocamlpro.com>
wrote:

> Le vendredi 15 avril 2016, 14:33:15 Ashish Agarwal a ?crit :
> > I noticed that opam sets PERL5LIB. Can someone explain why.
>
> The answer is here: https://github.com/ocaml/opam/pull/755


Got it. Thanks. FYI, my use case is outside OPAM's original purpose. This
is for non-OCaml packages.


> I actually need
> > to add to this path when a certain package is installed. Does opam allow
> > that?
>
> Opam 2.0 does! ?
> There is a new `setenv:` field


Great. Thanks! Looking forward to 2.0.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20160416/242467fa/attachment.html>

From randomdsdevel at gmail.com  Sun Apr 17 22:24:32 2016
From: randomdsdevel at gmail.com (Bryce Glover)
Date: Sun, 17 Apr 2016 17:24:32 -0400
Subject: [opam-devel] [RFC] OPAM files as *the* OCaml package metadata
	format
In-Reply-To: <9F3D0DF9A61B4C259F76D635250437C4@erratique.ch>
References: <5B3C8B8E-D6B3-4F9F-9675-E682CC8DDE00@gmail.com>
 <9F3D0DF9A61B4C259F76D635250437C4@erratique.ch>
Message-ID: <A45998E7-BDB2-49EA-BAB1-EEE063342F72@gmail.com>

> On Apr 16, 2016, at 5:28 AM, Daniel B?nzli <daniel.buenzli at erratique.ch> wrote:
> 
> Le vendredi, 15 avril 2016 ? 20:40, Bryce Glover a ?crit :
>> I?m just a lurker here, but I just couldn?t help but bring this up: shouldn?t we make OPAM installable system-wide per the original intent of issue #1950 (https://github.com/ocaml/opam/issues/1950) before we start making it so that other package managers can interact with the OPAM repository?
> 
> The goal is not to make them *interact* with opam. AFAIR package managers are not very keen on other tools fiddling with their prefixes. The goal is to make it easy to transform OPAM packages into system packages while retaining the ability to use the tooling (documentation tools, link helpers, whathever) that allows to use them regardless if they are installed via opam or not.
> 
> Best,
> 
> Daniel

     Whoops, must have been reading too much into what you guys are discussing here!  Going much farther than that would be another matter altogether?

Apologies for the misunderstanding, 
     Bryce Glover
     RandomDSdevel at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20160417/5ce4964a/attachment.html>

