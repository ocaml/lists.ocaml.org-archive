From thomas at gazagnaire.org  Sun Nov  2 00:00:01 2014
From: thomas at gazagnaire.org (Thomas Gazagnaire)
Date: Sun, 2 Nov 2014 00:00:01 +0000
Subject: [opam-devel] Becoming an opam-repository merger
In-Reply-To: <F460C721-A964-4001-B80A-6291158D4922@cam.ac.uk>
References: <c48fd4edf77590e7a5e1e619be1dd4fb@whitequark.org>
 <6621D6A3-13D3-4589-806F-34D333E97F32@recoil.org>
 <8AE7547F-E3B3-41A7-85AD-5F08FCE8E707@gazagnaire.org>
 <B79DC176-75A9-4519-B8F7-50BA94DFA99F@cam.ac.uk>
 <B815C0D7-653B-4CA7-9E11-0610C7225315@recoil.org>
 <F460C721-A964-4001-B80A-6291158D4922@cam.ac.uk>
Message-ID: <381AA075-F922-445B-9607-D415FA0BB830@gazagnaire.org>

I've done a little bit of cleaning in https://github.com/ocaml/opam-repository/issues

If people want to help, they can look at the open issues and, when possible, report the given issues upstream. And update the dependency/constraints/available platform in the related opam files. Or anything else which will reduce the list of open issues and improve the global quality of the repository :-)

Best,
Thomas


> On 31 Oct 2014, at 13:12, Amir Chaudhry <amc79 at cam.ac.uk> wrote:
> 
> Thanks, I've added that list of people to the GitHub team.
> 
> Specifically: 
> 
> - dsheets (David)
> - planar (Damien)
> - yallop (Jeremy)
> - whitequark (Peter)
> 
> AC
> 
> On 28 Oct 2014, at 22:03, Anil Madhavapeddy <anil at recoil.org> wrote:
> 
>> I'd like to also propose the most prolific recent contributors of fixes from the bulk logs and incoming issues:
>> 
>> - David Sheets
>> - Damien Doligez
>> - Jeremy Yallop
>> - Peter Zotov
>> 
>> best,
>> Anil
>> 
>>> On 23 Oct 2014, at 14:28, Amir Chaudhry <amc79 at cam.ac.uk> wrote:
>>> 
>>> Anil, Thomas, I've made the team as requested and added you both (@avsm @samoht) but not sure who else to add.  I'm guessing @whitequark (Peter Z), but who else?
>>> 
>>> Please confirm,
>>> Amir
>>> 
>>> 
>>> 
>>> On 22 Oct 2014, at 18:46, Thomas Gazagnaire <thomas at gazagnaire.org> wrote:
>>> 
>>>> Anil, can you create an opam-repository team in the ocaml organisation? I have less and less time to look at the current breakages, so I'm very happy to have more fresh bloods helping us.
>>>> 
>>>> Thomas
>>>> 
>>>> 
>>>> On 17 Oct 2014, at 16:14, Anil Madhavapeddy <anil at recoil.org> wrote:
>>>> 
>>>>> On 17 Oct 2014, at 00:06, Peter Zotov <whitequark at whitequark.org> wrote:
>>>>> 
>>>>>> Hello,
>>>>>> 
>>>>>> I see opam-repository currently has a shortage of attention.
>>>>>> I would like to help out.
>>>>> 
>>>>> Thanks for offering!  I'd love to see more maintainers and mergers for
>>>>> the repository.  Since there's a rather undocumented process for 
>>>>> determining what to merge, Thomas kicked off a web page to describe it
>>>>> better: 
>>>>> - https://github.com/ocaml/opam-repository/wiki/PR-checks
>>>>> 
>>>>> It's a bit of a delicate time to be merging since we are in the
>>>>> 1.2 transition, so the delays have been partly due to that as well.
>>>>> In general, more automation to remove all the manual stuff from that
>>>>> checklist is the goal.  For instance, setting OPAMSTRICT and getting
>>>>> the repository clear of warnings would really help avoid a manual check.
>>>>> 
>>>>> Another very valuable contribution would be to look through the
>>>>> github.com/ocaml/opam-bulk-logs and continue to make the repository
>>>>> build cleanly.  Again, there is some fledgling automation via regular
>>>>> expressions (in David Sheets' ocamlot repo) that needs to be extracted
>>>>> into a CLI to make it easier to triage.
>>>>> 
>>>>> I'm on the road in California right now, so will catch up properly
>>>>> next week -- just wanted to note that I have no objection to more
>>>>> mergers, and really appreciate you volunteering!
>>>>> 
>>>>> -anil
>>>>> 
>>>>> _______________________________________________
>>>>> opam-devel mailing list
>>>>> opam-devel at lists.ocaml.org
>>>>> http://lists.ocaml.org/listinfo/opam-devel
>>>> 
>>>> _______________________________________________
>>>> opam-devel mailing list
>>>> opam-devel at lists.ocaml.org
>>>> http://lists.ocaml.org/listinfo/opam-devel
>>> 
>> 
> 


From david.allsopp at metastack.com  Sun Nov  2 20:48:37 2014
From: david.allsopp at metastack.com (David Allsopp)
Date: Sun, 2 Nov 2014 20:48:37 -0000
Subject: [opam-devel] OPAM on Windows (1.3 Roadmap)
Message-ID: <002501cff6de$650ac150$2f2043f0$@metastack.com>

For OCaml 4.02, instead of spending the time I would normally use on a
compiler upgrade bringing my private build scripts up-to-date, I've been
doing some work porting OPAM to Windows. 

I'm chipping away at this - mainly at 'weekends'! - and will publish to
dra27/opam on GitHub hopefully within the next fortnight (if someone else is
also actively working on a Windows port and would like to see the stuff
sooner, then ping me a message - there're just too many hacks on the TODO
list to bother with pushing commits at the moment). So far I've got opam
init working (including installing the base packages) though I'm still
polishing some of the scripts for opam config env. Next up is being able to
switch to another compiler instance and install some packages, but I'm
feeling that the bulk of the hard work is already done now.

All that said, the main purpose of this message is to offer some comment on
the portability section of the 1.3 Roadmap
(https://github.com/ocaml/opam/wiki/1.3-Roadmap) which I hope will be
helpful.

* Rewrite the parallel command engine
This is a 'de facto' requirement for porting to Windows, because it's used
to install the base packages and removing it was easy. My own code only
avoids Unix.fork (and Unix.wait) for Windows, but it would be beneficial for
both Unix and Windows to use the same code path, obviously. I simply
converted everything to Marshal - the child closure is sent on stdin to
additional opam processes (using a special --fork command line switch). It
seems to be working, though some subtleties with global variables might rear
their heads when I start installing packages and trying to push the --jobs
switch later.

* Native system manipulation
While I think invocations of wget/curl could beneficially be replaced with
ocamlnet and tar with ocaml-tar, I think replacing all other calls (rm, cp,
etc.) this is a bad idea or, at least it should certainly not be done on the
false altar of making Windows-use better/easier. OPAM is a source-based
package manager - OCaml itself requires a bash-like environment to compile
(for *all* Windows ports, including the Microsoft-based ones) and let's not
forget that a possible bash-free alternative for building OCaml was
subsequently removed from the source tree. And that's before looking at
packages - it's na?ve to imagine, given the majority of package authors
being Unix-based in one flavour or another, that there will ever a point
where anything approaching a majority of package build systems are totally
shell-agnostic. It seems to me to be much better to head towards a system
which can expect various standard Unix commands to be available (via Cygwin,
MSYS, GnuWin32, etc.) but aim not to require the actual shell to be Unix
(i.e. work within Command Prompt, PowerShell, etc.). In this model, the aim
is to make Windows sufficiently Unix-like so that supporting Windows becomes
a matter of small configure-style tweaks already required to support various
flavours of Unix anyway. In my experience, packages which end up with two
build systems (the main one, and something hacked for Windows) end up with a
very stale, broken Windows build system, because the maintainer quite
reasonably ends up releasing later versions without testing whether the
Windows build system still works.

* Test & fix on Windows
"Cygwin, then, maybe, native." I'm afraid implies a crucial misunderstanding
of how OCaml-on-Windows works. I haven't checked, but OPAM should already
compile for *Cygwin* because Cygwin is simply Unix. The only thing which may
be broken is the odd configure check (i.e. correctly parsing the output of
uname). But understand that that means compiling OPAM in *Cygwin*'s OCaml
(which is OCaml built using ./configure in the normal way, not by using the
manual files in config/). Having OPAM working for Cygwin is a good idea,
indeed it'd be a good to have a Cygwin package of OPAM if someone were
willing to maintain it. But it's a trivial target - virtually nothing should
require altering, because that's the point of Cygwin. So it's either
"native" (i.e. the MinGW and MSVC ports) or not really worth talking about!

The four Windows ports are cross-compiled using a Cygwin bash shell as the
*environment* (note that a lot of this can be done using an MSYS bash shell
as the environment too). But the compilers are all cross-compilers (although
because the architecture for both compilation and target is the same, most
configure scripts do not realise that they are cross compiling!) - which is
why the build system can use things like "/bin/sh" (which Cygwin C runtime
translates it) but the resulting OCaml environment cannot (because the
Microsoft Visual C Runtime, unsurprisingly, does not). 

Fortunately, it's easy to interact with Cygwin commands (rm, cp, etc.)
because they're all coded to recognise Windows paths if they're specified
with forward slashes (C:/Windows\system32 is a perfectly valid Windows path
and, indeed, for the Command Interpreter, even C:/"W"indows\""system32 is a
valid path!).

My experience (based on my own installation of around 45 or so OCaml and
OCaml-related packages) is that building for Windows usually just involves
overriding some lazy assumptions in build systems (for example, the most
common one being the assumption "we're building on Windows" => "object files
end in .obj") so nothing which can't be quickly committed upstream, or
applied in opam-repository patches. I don't expect there will be "generic"
fixes, beyond trying to cp "foo.exe" if "foo" cannot be found in a .install
file (which I'm coding up anyway in my fork). What may be useful is to have
certain non-OCaml packages packaged up in OPAM for Windows-only - for
example, openssl, pcre and so on to deal with libraries which aren't
normally packaged for Windows.

Related to this, are there general plans at the moment for how OPAM may deal
with cross-compiling? This becomes relevant with four Windows ports - one of
the big advantages with opam (and the whole model of opam config env) is
that it will make it much easier to run all four Windows ports on the same
machine, but it seems very tedious (and difficult to maintain) to need to
specify every single compiler switch 5 times (e.g. 4.02.0, 4.02.0+msvc,
4.02.0+mingw, 4.02.0+msvc64, 4.02.0+mingw64). I was thinking of adding a
Windows-only (for now) --target option to opam switch for an enumeration of
auto/mingw/msvc/mingw64/msvc64. So opam switch 4.02.0+foo --target=mingw64
would build the 64-bit MinGW port of OCaml in ~/.opam/4.02.0+foo+mingw64. It
would obviously also be useful for opam files to be able to reference the
value of --target.


David 


From anil at recoil.org  Sun Nov  2 20:52:50 2014
From: anil at recoil.org (Anil Madhavapeddy)
Date: Sun, 2 Nov 2014 20:52:50 +0000
Subject: [opam-devel] OPAM on Windows (1.3 Roadmap)
In-Reply-To: <002501cff6de$650ac150$2f2043f0$@metastack.com>
References: <002501cff6de$650ac150$2f2043f0$@metastack.com>
Message-ID: <912C7B36-E539-49F4-B78D-A2D4D1BB07A4@recoil.org>

On 2 Nov 2014, at 20:48, David Allsopp <david.allsopp at metastack.com> wrote:
> 
> My experience (based on my own installation of around 45 or so OCaml and
> OCaml-related packages) is that building for Windows usually just involves
> overriding some lazy assumptions in build systems (for example, the most
> common one being the assumption "we're building on Windows" => "object files
> end in .obj") so nothing which can't be quickly committed upstream, or
> applied in opam-repository patches. I don't expect there will be "generic"
> fixes, beyond trying to cp "foo.exe" if "foo" cannot be found in a .install
> file (which I'm coding up anyway in my fork). What may be useful is to have
> certain non-OCaml packages packaged up in OPAM for Windows-only - for
> example, openssl, pcre and so on to deal with libraries which aren't
> normally packaged for Windows.

While a fork of the repository is possible, in the long (or medium) term I'd
prefer that we just put the Windows-specific build rules in the OPAM file,
guarded by a {os = "windows"} constraint or similar.

That way we can start feeding back patches upstream as we get things working
and tested.  I'm not sure if the "os" variable actually gets set to "windows"
in current OPAM though... perhaps Cygwin or something similar.

-anil


From louis.gesbert at ocamlpro.com  Tue Nov  4 06:48:10 2014
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Tue, 04 Nov 2014 15:48:10 +0900
Subject: [opam-devel] Using OPAM as the Coq packages manager
In-Reply-To: <544E0F3C.2050103@claret.me>
References: <544E0F3C.2050103@claret.me>
Message-ID: <3033730.P3odLb3Hiv@agaric>

Le lundi 27 octobre 2014, 10:24:12 Guillaume Claret a ?crit :
> Hi,
> 
>    The Coq theorem prover is facing the same challenges as OCaml to 
> distribute and share its contributions. OPAM is a successful initiative 
> for OCaml, so we would be pleased to use it as well. Thanks for this 
> software.
>

Knowing that OPAM is successful also for managing Coq packages will make me very happy. Please share on your experience and possible improvements !

>    Things are still in development and not publicly released, but here 
> are what we have for Coq:
> * a website: http://clarus.github.io/coq-eggs-test/
> * a bench system: http://coq-bench.github.io/
> * four repositories:
>    * stable packages: https://github.com/coq/repo-stable.git
>    * beta packages: https://github.com/coq/repo-testing.git
>    * development packages: https://github.com/coq/repo-unstable.git
>    * development versions of Coq: https://github.com/coq/repo-coqs.git
> 
>    Something we wonder is how to prevent name collisions with the OCaml 
> packages. Some kind of namespace would be the solution. As a convention, 
> we propose to use the ":" separator, like in Docker. So a package on the 
> Coq repository would be of name: "coq:ssreflect" instead of just 
> "ssreflect". We could go even further and use the 
> "coq:big-project-name:small-part-of-it" scheme for big projects.
> 
>    Do you think it is a good practice and will the ":" symbol remain 
> handled in names by OPAM? Could we reserve the "coq:" prefix on the 
> OCaml repo to make sure no one is allowed to publish a package with this 
> prefix?

Sounds like a neat idea, and I don't see how that could become a problem. It'll just be slightly heavier for handling Coq packages I guess.

On the compilers-as-packages: what that would allow you to do is define, on the coq-eggs repo, "compiler" definitions which are just a reference to a given OCaml package and a given Coq package. This'll give you more stability (Coq won't change version or be recompiled) and make the coq dependency implicit in all packages.

The usage would be a bit different in this case: coq-eggs would become a self-contained repo rather than stack over the default OPAM repo for OCaml, and you could even rely on an external OCaml compiler and just specify Coq as "compiler". For this you might actually want a specific OPAM instance and opam root, e.g. ~/.coq-opam, that may coexist alongside an OCaml's ~/.opam.

Not sure how that would be an improvement on the current repo though, I'd be happy to know what you think. 

Cheers,
Louis

From louis.gesbert at ocamlpro.com  Tue Nov  4 07:42:09 2014
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Tue, 04 Nov 2014 16:42:09 +0900
Subject: [opam-devel] OPAM on Windows (1.3 Roadmap)
In-Reply-To: <002501cff6de$650ac150$2f2043f0$@metastack.com>
References: <002501cff6de$650ac150$2f2043f0$@metastack.com>
Message-ID: <4553691.mfoXpWedeB@agaric>

Thanks for these comments !

* Rewrite the parallel command engine

This is well underway, I've got a working prototype with limited backends at the moment.
I'm not relying on fork anymore, but we'll still need some windows way of implementing `Unix.waitpid 0`; and to add OS switches to the build system.

* Native system manipulation

I agree on re-coding cp, mv etc.; here is also a possible idea, it may be worth checking if it's practical: make sure we may work if limited to busybox, and include some Windows version of busybox in the Windows distribution.

* Test & fix on Windows
> "Cygwin, then, maybe, native." I'm afraid implies a crucial misunderstanding
> of how OCaml-on-Windows works.

I know that Cygwin is hardly a step towards native windows compatibility and about the cross-compilation tangle. But given the difference in cost, I think it's worth ensuring Cygwin is well supported before attacking the bulk of the problem: you quickly trip over tiny issues even with Cygwin at the moment.

> Related to this, are there general plans at the moment for how OPAM may deal
> with cross-compiling? This becomes relevant with four Windows ports

There is quite some amount of thought about it, but no plan yet.

@Anil, on the "os" variable, we have "cygwin" and "win32", following Sys.os_type().


Cheers,
Louis


Le dimanche 2 novembre 2014, 20:48:37 David Allsopp a ?crit :
> For OCaml 4.02, instead of spending the time I would normally use on a
> compiler upgrade bringing my private build scripts up-to-date, I've been
> doing some work porting OPAM to Windows. 
> 
> I'm chipping away at this - mainly at 'weekends'! - and will publish to
> dra27/opam on GitHub hopefully within the next fortnight (if someone else is
> also actively working on a Windows port and would like to see the stuff
> sooner, then ping me a message - there're just too many hacks on the TODO
> list to bother with pushing commits at the moment). So far I've got opam
> init working (including installing the base packages) though I'm still
> polishing some of the scripts for opam config env. Next up is being able to
> switch to another compiler instance and install some packages, but I'm
> feeling that the bulk of the hard work is already done now.
> 
> All that said, the main purpose of this message is to offer some comment on
> the portability section of the 1.3 Roadmap
> (https://github.com/ocaml/opam/wiki/1.3-Roadmap) which I hope will be
> helpful.
> 
> * Rewrite the parallel command engine
> This is a 'de facto' requirement for porting to Windows, because it's used
> to install the base packages and removing it was easy. My own code only
> avoids Unix.fork (and Unix.wait) for Windows, but it would be beneficial for
> both Unix and Windows to use the same code path, obviously. I simply
> converted everything to Marshal - the child closure is sent on stdin to
> additional opam processes (using a special --fork command line switch). It
> seems to be working, though some subtleties with global variables might rear
> their heads when I start installing packages and trying to push the --jobs
> switch later.
> 
> * Native system manipulation
> While I think invocations of wget/curl could beneficially be replaced with
> ocamlnet and tar with ocaml-tar, I think replacing all other calls (rm, cp,
> etc.) this is a bad idea or, at least it should certainly not be done on the
> false altar of making Windows-use better/easier. OPAM is a source-based
> package manager - OCaml itself requires a bash-like environment to compile
> (for *all* Windows ports, including the Microsoft-based ones) and let's not
> forget that a possible bash-free alternative for building OCaml was
> subsequently removed from the source tree. And that's before looking at
> packages - it's na?ve to imagine, given the majority of package authors
> being Unix-based in one flavour or another, that there will ever a point
> where anything approaching a majority of package build systems are totally
> shell-agnostic. It seems to me to be much better to head towards a system
> which can expect various standard Unix commands to be available (via Cygwin,
> MSYS, GnuWin32, etc.) but aim not to require the actual shell to be Unix
> (i.e. work within Command Prompt, PowerShell, etc.). In this model, the aim
> is to make Windows sufficiently Unix-like so that supporting Windows becomes
> a matter of small configure-style tweaks already required to support various
> flavours of Unix anyway. In my experience, packages which end up with two
> build systems (the main one, and something hacked for Windows) end up with a
> very stale, broken Windows build system, because the maintainer quite
> reasonably ends up releasing later versions without testing whether the
> Windows build system still works.
> 
> * Test & fix on Windows
> "Cygwin, then, maybe, native." I'm afraid implies a crucial misunderstanding
> of how OCaml-on-Windows works. I haven't checked, but OPAM should already
> compile for *Cygwin* because Cygwin is simply Unix. The only thing which may
> be broken is the odd configure check (i.e. correctly parsing the output of
> uname). But understand that that means compiling OPAM in *Cygwin*'s OCaml
> (which is OCaml built using ./configure in the normal way, not by using the
> manual files in config/). Having OPAM working for Cygwin is a good idea,
> indeed it'd be a good to have a Cygwin package of OPAM if someone were
> willing to maintain it. But it's a trivial target - virtually nothing should
> require altering, because that's the point of Cygwin. So it's either
> "native" (i.e. the MinGW and MSVC ports) or not really worth talking about!
> 
> The four Windows ports are cross-compiled using a Cygwin bash shell as the
> *environment* (note that a lot of this can be done using an MSYS bash shell
> as the environment too). But the compilers are all cross-compilers (although
> because the architecture for both compilation and target is the same, most
> configure scripts do not realise that they are cross compiling!) - which is
> why the build system can use things like "/bin/sh" (which Cygwin C runtime
> translates it) but the resulting OCaml environment cannot (because the
> Microsoft Visual C Runtime, unsurprisingly, does not). 
> 
> Fortunately, it's easy to interact with Cygwin commands (rm, cp, etc.)
> because they're all coded to recognise Windows paths if they're specified
> with forward slashes (C:/Windows\system32 is a perfectly valid Windows path
> and, indeed, for the Command Interpreter, even C:/"W"indows\""system32 is a
> valid path!).
> 
> My experience (based on my own installation of around 45 or so OCaml and
> OCaml-related packages) is that building for Windows usually just involves
> overriding some lazy assumptions in build systems (for example, the most
> common one being the assumption "we're building on Windows" => "object files
> end in .obj") so nothing which can't be quickly committed upstream, or
> applied in opam-repository patches. I don't expect there will be "generic"
> fixes, beyond trying to cp "foo.exe" if "foo" cannot be found in a .install
> file (which I'm coding up anyway in my fork). What may be useful is to have
> certain non-OCaml packages packaged up in OPAM for Windows-only - for
> example, openssl, pcre and so on to deal with libraries which aren't
> normally packaged for Windows.
> 
> Related to this, are there general plans at the moment for how OPAM may deal
> with cross-compiling? This becomes relevant with four Windows ports - one of
> the big advantages with opam (and the whole model of opam config env) is
> that it will make it much easier to run all four Windows ports on the same
> machine, but it seems very tedious (and difficult to maintain) to need to
> specify every single compiler switch 5 times (e.g. 4.02.0, 4.02.0+msvc,
> 4.02.0+mingw, 4.02.0+msvc64, 4.02.0+mingw64). I was thinking of adding a
> Windows-only (for now) --target option to opam switch for an enumeration of
> auto/mingw/msvc/mingw64/msvc64. So opam switch 4.02.0+foo --target=mingw64
> would build the 64-bit MinGW port of OCaml in ~/.opam/4.02.0+foo+mingw64. It
> would obviously also be useful for opam files to be able to reference the
> value of --target.
> 
> 
> David 
> 
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel


From sylvain+ocaml at le-gall.net  Wed Nov  5 08:27:01 2014
From: sylvain+ocaml at le-gall.net (Sylvain Le Gall)
Date: Wed, 05 Nov 2014 08:27:01 +0000
Subject: [opam-devel] OPAM on Windows (1.3 Roadmap)
References: <002501cff6de$650ac150$2f2043f0$@metastack.com>
 <4553691.mfoXpWedeB@agaric>
Message-ID: <CAOCAUGOQWjfmB-wAik2TPqGfukhKkjjmf7Ms6vgNqHyQWFzEtg@mail.gmail.com>

 On Tue, Nov 4, 2014, 08:42 Louis Gesbert <louis.gesbert at ocamlpro.com>
wrote:

Thanks for these comments !

* Rewrite the parallel command engine

This is well underway, I've got a working prototype with limited backends
at the moment.
I'm not relying on fork anymore, but we'll still need some windows way of
implementing `Unix.waitpid 0`; and to add OS switches to the build system.

* Native system manipulation

I agree on re-coding cp, mv etc.; here is also a possible idea, it may be
worth checking if it's practical: make sure we may work if limited to
busybox, and include some Windows version of busybox in the Windows
distribution.


I am about to release a new version of ocaml-fileutils that have better
implementation of cp, mv than the previous version. You may consider using.
POSIX implementation of those command require some work.

* Test & fix on Windows
> "Cygwin, then, maybe, native." I'm afraid implies a crucial
misunderstanding
> of how OCaml-on-Windows works.

I know that Cygwin is hardly a step towards native windows compatibility
and about the cross-compilation tangle. But given the difference in cost, I
think it's worth ensuring Cygwin is well supported before attacking the
bulk of the problem: you quickly trip over tiny issues even with Cygwin at
the moment.

> Related to this, are there general plans at the moment for how OPAM may
deal
> with cross-compiling? This becomes relevant with four Windows ports

There is quite some amount of thought about it, but no plan yet.

@Anil, on the "os" variable, we have "cygwin" and "win32", following
Sys.os_type().

Cheers,
Louis

Le dimanche 2 novembre 2014, 20:48:37 David Allsopp a ?crit :
> For OCaml 4.02, instead of spending the time I would normally use on a
> compiler upgrade bringing my private build scripts up-to-date, I've been
> doing some work porting OPAM to Windows.
>
> I'm chipping away at this - mainly at 'weekends'! - and will publish to
> dra27/opam on GitHub hopefully within the next fortnight (if someone else
is
> also actively working on a Windows port and would like to see the stuff
> sooner, then ping me a message - there're just too many hacks on the TODO
> list to bother with pushing commits at the moment). So far I've got opam
> init working (including installing the base packages) though I'm still
> polishing some of the scripts for opam config env. Next up is being able
to
> switch to another compiler instance and install some packages, but I'm
> feeling that the bulk of the hard work is already done now.
>
> All that said, the main purpose of this message is to offer some comment
on
> the portability section of the 1.3 Roadmap
> (https://github.com/ocaml/opam/wiki/1.3-Roadmap) which I hope will be
> helpful.
>
> * Rewrite the parallel command engine
> This is a 'de facto' requirement for porting to Windows, because it's used
> to install the base packages and removing it was easy. My own code only
> avoids Unix.fork (and Unix.wait) for Windows, but it would be beneficial
for
> both Unix and Windows to use the same code path, obviously. I simply
> converted everything to Marshal - the child closure is sent on stdin to
> additional opam processes (using a special --fork command line switch). It
> seems to be working, though some subtleties with global variables might
rear
> their heads when I start installing packages and trying to push the --jobs
> switch later.
>
> * Native system manipulation
> While I think invocations of wget/curl could beneficially be replaced with
> ocamlnet and tar with ocaml-tar, I think replacing all other calls (rm,
cp,
> etc.) this is a bad idea or, at least it should certainly not be done on
the
> false altar of making Windows-use better/easier. OPAM is a source-based
> package manager - OCaml itself requires a bash-like environment to compile
> (for *all* Windows ports, including the Microsoft-based ones) and let's
not
> forget that a possible bash-free alternative for building OCaml was
> subsequently removed from the source tree. And that's before looking at
> packages - it's na?ve to imagine, given the majority of package authors
> being Unix-based in one flavour or another, that there will ever a point
> where anything approaching a majority of package build systems are totally
> shell-agnostic. It seems to me to be much better to head towards a system
> which can expect various standard Unix commands to be available (via
Cygwin,
> MSYS, GnuWin32, etc.) but aim not to require the actual shell to be Unix
> (i.e. work within Command Prompt, PowerShell, etc.). In this model, the
aim
> is to make Windows sufficiently Unix-like so that supporting Windows
becomes
> a matter of small configure-style tweaks already required to support
various
> flavours of Unix anyway. In my experience, packages which end up with two
> build systems (the main one, and something hacked for Windows) end up
with a
> very stale, broken Windows build system, because the maintainer quite
> reasonably ends up releasing later versions without testing whether the
> Windows build system still works.
>
> * Test & fix on Windows
> "Cygwin, then, maybe, native." I'm afraid implies a crucial
misunderstanding
> of how OCaml-on-Windows works. I haven't checked, but OPAM should already
> compile for *Cygwin* because Cygwin is simply Unix. The only thing which
may
> be broken is the odd configure check (i.e. correctly parsing the output of
> uname). But understand that that means compiling OPAM in *Cygwin*'s OCaml
> (which is OCaml built using ./configure in the normal way, not by using
the
> manual files in config/). Having OPAM working for Cygwin is a good idea,
> indeed it'd be a good to have a Cygwin package of OPAM if someone were
> willing to maintain it. But it's a trivial target - virtually nothing
should
> require altering, because that's the point of Cygwin. So it's either
> "native" (i.e. the MinGW and MSVC ports) or not really worth talking
about!
>
> The four Windows ports are cross-compiled using a Cygwin bash shell as the
> *environment* (note that a lot of this can be done using an MSYS bash
shell
> as the environment too). But the compilers are all cross-compilers
(although
> because the architecture for both compilation and target is the same, most
> configure scripts do not realise that they are cross compiling!) - which
is
> why the build system can use things like "/bin/sh" (which Cygwin C runtime
> translates it) but the resulting OCaml environment cannot (because the
> Microsoft Visual C Runtime, unsurprisingly, does not).
>
> Fortunately, it's easy to interact with Cygwin commands (rm, cp, etc.)
> because they're all coded to recognise Windows paths if they're specified
> with forward slashes (C:/Windows\system32 is a perfectly valid Windows
path
> and, indeed, for the Command Interpreter, even C:/"W"indows\""system32 is
a
> valid path!).
>
> My experience (based on my own installation of around 45 or so OCaml and
> OCaml-related packages) is that building for Windows usually just involves
> overriding some lazy assumptions in build systems (for example, the most
> common one being the assumption "we're building on Windows" => "object
files
> end in .obj") so nothing which can't be quickly committed upstream, or
> applied in opam-repository patches. I don't expect there will be "generic"
> fixes, beyond trying to cp "foo.exe" if "foo" cannot be found in a
.install
> file (which I'm coding up anyway in my fork). What may be useful is to
have
> certain non-OCaml packages packaged up in OPAM for Windows-only - for
> example, openssl, pcre and so on to deal with libraries which aren't
> normally packaged for Windows.
>
> Related to this, are there general plans at the moment for how OPAM may
deal
> with cross-compiling? This becomes relevant with four Windows ports - one
of
> the big advantages with opam (and the whole model of opam config env) is
> that it will make it much easier to run all four Windows ports on the same
> machine, but it seems very tedious (and difficult to maintain) to need to
> specify every single compiler switch 5 times (e.g. 4.02.0, 4.02.0+msvc,
> 4.02.0+mingw, 4.02.0+msvc64, 4.02.0+mingw64). I was thinking of adding a
> Windows-only (for now) --target option to opam switch for an enumeration
of
> auto/mingw/msvc/mingw64/msvc64. So opam switch 4.02.0+foo --target=mingw64
> would build the 64-bit MinGW port of OCaml in ~/.opam/4.02.0+foo+mingw64.
It
> would obviously also be useful for opam files to be able to reference the
> value of --target.
>
>
> David
>
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel

_______________________________________________
opam-devel mailing list
opam-devel at lists.ocaml.org
http://lists.ocaml.org/listinfo/opam-devel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20141105/5620b925/attachment.html>

From sylvain+ocaml at le-gall.net  Wed Nov  5 11:02:59 2014
From: sylvain+ocaml at le-gall.net (Sylvain Le Gall)
Date: Wed, 05 Nov 2014 11:02:59 +0000
Subject: [opam-devel] OPAM on Windows (1.3 Roadmap)
References: <002501cff6de$650ac150$2f2043f0$@metastack.com>
 <4553691.mfoXpWedeB@agaric>
Message-ID: <CAOCAUGPQYJgtVF9V+PeDjP4Yf0FHLD3i=DQraBj2qd+ZjDT+Mg@mail.gmail.com>

[resending because in the former mail my comment was inlined]

Le Tue Nov 04 2014 at 8:42:09 AM, Louis Gesbert <louis.gesbert at ocamlpro.com>
a ?crit :

> Thanks for these comments !
>
> * Rewrite the parallel command engine
>
> This is well underway, I've got a working prototype with limited backends
> at the moment.
> I'm not relying on fork anymore, but we'll still need some windows way of
> implementing `Unix.waitpid 0`; and to add OS switches to the build system.
>
* Native system manipulation
>
> I agree on re-coding cp, mv etc.; here is also a possible idea, it may be
> worth checking if it's practical: make sure we may work if limited to
> busybox, and include some Windows version of busybox in the Windows
> distribution.
>

I am about to release a new version of ocaml-fileutils that have
better implementation of cp, mv than the previous version. You may
consider using it. POSIX implementation of those command require some
work.


ocaml-fileutils has also a low number of dependencies that makes it
more suitable for inclusion.



>
> * Test & fix on Windows
> > "Cygwin, then, maybe, native." I'm afraid implies a crucial
> misunderstanding
> > of how OCaml-on-Windows works.
>
> I know that Cygwin is hardly a step towards native windows compatibility
> and about the cross-compilation tangle. But given the difference in cost, I
> think it's worth ensuring Cygwin is well supported before attacking the
> bulk of the problem: you quickly trip over tiny issues even with Cygwin at
> the moment.
>
> > Related to this, are there general plans at the moment for how OPAM may
> deal
> > with cross-compiling? This becomes relevant with four Windows ports
>
> There is quite some amount of thought about it, but no plan yet.
>
> @Anil, on the "os" variable, we have "cygwin" and "win32", following
> Sys.os_type().
>
>
> Cheers,
> Louis
>
>
> Le dimanche 2 novembre 2014, 20:48:37 David Allsopp a ?crit :
> > For OCaml 4.02, instead of spending the time I would normally use on a
> > compiler upgrade bringing my private build scripts up-to-date, I've been
> > doing some work porting OPAM to Windows.
> >
> > I'm chipping away at this - mainly at 'weekends'! - and will publish to
> > dra27/opam on GitHub hopefully within the next fortnight (if someone
> else is
> > also actively working on a Windows port and would like to see the stuff
> > sooner, then ping me a message - there're just too many hacks on the TODO
> > list to bother with pushing commits at the moment). So far I've got opam
> > init working (including installing the base packages) though I'm still
> > polishing some of the scripts for opam config env. Next up is being able
> to
> > switch to another compiler instance and install some packages, but I'm
> > feeling that the bulk of the hard work is already done now.
> >
> > All that said, the main purpose of this message is to offer some comment
> on
> > the portability section of the 1.3 Roadmap
> > (https://github.com/ocaml/opam/wiki/1.3-Roadmap) which I hope will be
> > helpful.
> >
> > * Rewrite the parallel command engine
> > This is a 'de facto' requirement for porting to Windows, because it's
> used
> > to install the base packages and removing it was easy. My own code only
> > avoids Unix.fork (and Unix.wait) for Windows, but it would be beneficial
> for
> > both Unix and Windows to use the same code path, obviously. I simply
> > converted everything to Marshal - the child closure is sent on stdin to
> > additional opam processes (using a special --fork command line switch).
> It
> > seems to be working, though some subtleties with global variables might
> rear
> > their heads when I start installing packages and trying to push the
> --jobs
> > switch later.
> >
> > * Native system manipulation
> > While I think invocations of wget/curl could beneficially be replaced
> with
> > ocamlnet and tar with ocaml-tar, I think replacing all other calls (rm,
> cp,
> > etc.) this is a bad idea or, at least it should certainly not be done on
> the
> > false altar of making Windows-use better/easier. OPAM is a source-based
> > package manager - OCaml itself requires a bash-like environment to
> compile
> > (for *all* Windows ports, including the Microsoft-based ones) and let's
> not
> > forget that a possible bash-free alternative for building OCaml was
> > subsequently removed from the source tree. And that's before looking at
> > packages - it's na?ve to imagine, given the majority of package authors
> > being Unix-based in one flavour or another, that there will ever a point
> > where anything approaching a majority of package build systems are
> totally
> > shell-agnostic. It seems to me to be much better to head towards a system
> > which can expect various standard Unix commands to be available (via
> Cygwin,
> > MSYS, GnuWin32, etc.) but aim not to require the actual shell to be Unix
> > (i.e. work within Command Prompt, PowerShell, etc.). In this model, the
> aim
> > is to make Windows sufficiently Unix-like so that supporting Windows
> becomes
> > a matter of small configure-style tweaks already required to support
> various
> > flavours of Unix anyway. In my experience, packages which end up with two
> > build systems (the main one, and something hacked for Windows) end up
> with a
> > very stale, broken Windows build system, because the maintainer quite
> > reasonably ends up releasing later versions without testing whether the
> > Windows build system still works.
> >
> > * Test & fix on Windows
> > "Cygwin, then, maybe, native." I'm afraid implies a crucial
> misunderstanding
> > of how OCaml-on-Windows works. I haven't checked, but OPAM should already
> > compile for *Cygwin* because Cygwin is simply Unix. The only thing which
> may
> > be broken is the odd configure check (i.e. correctly parsing the output
> of
> > uname). But understand that that means compiling OPAM in *Cygwin*'s OCaml
> > (which is OCaml built using ./configure in the normal way, not by using
> the
> > manual files in config/). Having OPAM working for Cygwin is a good idea,
> > indeed it'd be a good to have a Cygwin package of OPAM if someone were
> > willing to maintain it. But it's a trivial target - virtually nothing
> should
> > require altering, because that's the point of Cygwin. So it's either
> > "native" (i.e. the MinGW and MSVC ports) or not really worth talking
> about!
> >
> > The four Windows ports are cross-compiled using a Cygwin bash shell as
> the
> > *environment* (note that a lot of this can be done using an MSYS bash
> shell
> > as the environment too). But the compilers are all cross-compilers
> (although
> > because the architecture for both compilation and target is the same,
> most
> > configure scripts do not realise that they are cross compiling!) - which
> is
> > why the build system can use things like "/bin/sh" (which Cygwin C
> runtime
> > translates it) but the resulting OCaml environment cannot (because the
> > Microsoft Visual C Runtime, unsurprisingly, does not).
> >
> > Fortunately, it's easy to interact with Cygwin commands (rm, cp, etc.)
> > because they're all coded to recognise Windows paths if they're specified
> > with forward slashes (C:/Windows\system32 is a perfectly valid Windows
> path
> > and, indeed, for the Command Interpreter, even C:/"W"indows\""system32
> is a
> > valid path!).
> >
> > My experience (based on my own installation of around 45 or so OCaml and
> > OCaml-related packages) is that building for Windows usually just
> involves
> > overriding some lazy assumptions in build systems (for example, the most
> > common one being the assumption "we're building on Windows" => "object
> files
> > end in .obj") so nothing which can't be quickly committed upstream, or
> > applied in opam-repository patches. I don't expect there will be
> "generic"
> > fixes, beyond trying to cp "foo.exe" if "foo" cannot be found in a
> .install
> > file (which I'm coding up anyway in my fork). What may be useful is to
> have
> > certain non-OCaml packages packaged up in OPAM for Windows-only - for
> > example, openssl, pcre and so on to deal with libraries which aren't
> > normally packaged for Windows.
> >
> > Related to this, are there general plans at the moment for how OPAM may
> deal
> > with cross-compiling? This becomes relevant with four Windows ports -
> one of
> > the big advantages with opam (and the whole model of opam config env) is
> > that it will make it much easier to run all four Windows ports on the
> same
> > machine, but it seems very tedious (and difficult to maintain) to need to
> > specify every single compiler switch 5 times (e.g. 4.02.0, 4.02.0+msvc,
> > 4.02.0+mingw, 4.02.0+msvc64, 4.02.0+mingw64). I was thinking of adding a
> > Windows-only (for now) --target option to opam switch for an enumeration
> of
> > auto/mingw/msvc/mingw64/msvc64. So opam switch 4.02.0+foo
> --target=mingw64
> > would build the 64-bit MinGW port of OCaml in
> ~/.opam/4.02.0+foo+mingw64. It
> > would obviously also be useful for opam files to be able to reference the
> > value of --target.
> >
> >
> > David
> >
> > _______________________________________________
> > opam-devel mailing list
> > opam-devel at lists.ocaml.org
> > http://lists.ocaml.org/listinfo/opam-devel
>
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20141105/80cef550/attachment-0001.html>

From david.allsopp at metastack.com  Wed Nov  5 18:06:32 2014
From: david.allsopp at metastack.com (David Allsopp)
Date: Wed, 5 Nov 2014 18:06:32 +0000
Subject: [opam-devel] OPAM on Windows (1.3 Roadmap)
In-Reply-To: <4553691.mfoXpWedeB@agaric>
References: <002501cff6de$650ac150$2f2043f0$@metastack.com>
 <4553691.mfoXpWedeB@agaric>
Message-ID: <E51C5B015DBD1348A1D85763337FB6D9E96936D7@Remus.metastack.local>

Louis Gesbert wrote:
> Thanks for these comments !
> 
> * Rewrite the parallel command engine
> 
> This is well underway, I've got a working prototype with limited backends
> at the moment.
> I'm not relying on fork anymore, but we'll still need some windows way of
> implementing `Unix.waitpid 0`; and to add OS switches to the build system.

Although Windows has them, Windows and Unix process groups aren't quite the same concept. I expect you want more the behaviour of Unix.waitpid (-1) (any child) which is sort of what I implemented in my branch. In fact, the way waiting works under Windows, the stub I implemented specifically waits for any one of a list of PIDs to terminate. 

> * Native system manipulation
> 
> I agree on re-coding cp, mv etc.; here is also a possible idea, it may be
> worth checking if it's practical: make sure we may work if limited to
> busybox, and include some Windows version of busybox in the Windows
> distribution.

But unless you guarantee that all 700/800 packages in OPAM do the same thing, at some point you will need a "real" environment - make, patch, m4, etc (you can't even get as far as findlib without m4) and ocamlopt's need for a C compiler, or at least an assembler, is never far away - and the two MSVC ports will *always* require you to install the Windows SDK separately to get the Microsoft assembler (I don't think packaging that in other setups is permitted under the licence).

I completely agree that making OPAM more portable is a good idea (ocaml-fileutils would be a very good thing to use), but my point is that it has *nothing* to do with making Windows usage of OPAM better, at least for non-toy usage so, at least for this part of the roadmap, it feels like effort targeted at the wrong problem.

> * Test & fix on Windows
> > "Cygwin, then, maybe, native." I'm afraid implies a crucial
> > misunderstanding of how OCaml-on-Windows works.
> 
> I know that Cygwin is hardly a step towards native windows compatibility
> and about the cross-compilation tangle. But given the difference in cost,
> I think it's worth ensuring Cygwin is well supported before attacking the
> bulk of the problem: you quickly trip over tiny issues even with Cygwin at
> the moment.

What tiny issues have you seen? I've just bootstrapped OPAM on OCaml 4.01.0 on Cygwin 1.7 with no problems, as I expected. I've been able to switch into 4.01.0, run opam install opam-lib --deps-only and re-compile OPAM 1.2 using its "own" compiler. I had trouble with 4.02.1, but that's because there's a bug in ocamlbuild, which is hardly OPAM's fault! I've put a patch at http://people.ds.cam.ac.uk/~dra27/patches/ocaml-4.02.1+cygwin.patch and will shortly see if the issue is already mentioned in Mantis and with that patch was able to switch into 4.02.1 and similarly bootstrap OPAM.

Incidentally, the problem with Cygwin and OCaml 4.02.1 is a reasonable demonstration of why stripping out external calls to cp, etc. can be a BAD idea! Cygwin neatly masks the ".exe" problem if you do things POSIX-ly. Consider:

$ test -e /usr/bin/ocaml && echo OCaml is installed

In a Cygwin bash prompt, this will echo that OCaml is indeed installed. Now, in reality /usr/bin/ocaml is C:\cygwin\bin\ocaml.exe and test -e /usr/bin/ocaml.exe will also be true. ocamlbuild fails because for reasons best understood by Nicolas Pouillard, it replaces Sys.file_exists with a manual attempt to read the directory entries itself (see ocamlbuild/my_std.ml and notes in ocamlbuild/Changelog) - and in so doing bypasses Cygwin's compatibility layers which handle the ".exe" problem for Cygwin.


David

From whitequark at whitequark.org  Wed Nov  5 18:11:12 2014
From: whitequark at whitequark.org (Peter Zotov)
Date: Wed, 05 Nov 2014 21:11:12 +0300
Subject: [opam-devel] OPAM on Windows (1.3 Roadmap)
In-Reply-To: <E51C5B015DBD1348A1D85763337FB6D9E96936D7@Remus.metastack.local>
References: <002501cff6de$650ac150$2f2043f0$@metastack.com>
 <4553691.mfoXpWedeB@agaric>
 <E51C5B015DBD1348A1D85763337FB6D9E96936D7@Remus.metastack.local>
Message-ID: <4282e3498b24e2b4cec3cad31b264429@whitequark.org>

On 2014-11-05 21:06, David Allsopp wrote:
> But unless you guarantee that all 700/800 packages in OPAM do the same
> thing, at some point you will need a "real" environment - make, patch,
> m4, etc (you can't even get as far as findlib without m4) and
> ocamlopt's need for a C compiler, or at least an assembler, is never
> far away - and the two MSVC ports will *always* require you to install
> the Windows SDK separately to get the Microsoft assembler (I don't
> think packaging that in other setups is permitted under the licence).

While I agree with the rest, the fact that ocamlfind depends on m4
is ridiculous. I should patch it out sometimes.

-- 
Peter Zotov

From anil at recoil.org  Wed Nov  5 18:35:38 2014
From: anil at recoil.org (Anil Madhavapeddy)
Date: Wed, 5 Nov 2014 18:35:38 +0000
Subject: [opam-devel] OPAM on Windows (1.3 Roadmap)
In-Reply-To: <4282e3498b24e2b4cec3cad31b264429@whitequark.org>
References: <002501cff6de$650ac150$2f2043f0$@metastack.com>
 <4553691.mfoXpWedeB@agaric>
 <E51C5B015DBD1348A1D85763337FB6D9E96936D7@Remus.metastack.local>
 <4282e3498b24e2b4cec3cad31b264429@whitequark.org>
Message-ID: <399B567B-BC22-493F-95FA-A61087DB0DDB@recoil.org>


> On 5 Nov 2014, at 18:11, Peter Zotov <whitequark at whitequark.org> wrote:
> 
>> On 2014-11-05 21:06, David Allsopp wrote:
>> But unless you guarantee that all 700/800 packages in OPAM do the same
>> thing, at some point you will need a "real" environment - make, patch,
>> m4, etc (you can't even get as far as findlib without m4) and
>> ocamlopt's need for a C compiler, or at least an assembler, is never
>> far away - and the two MSVC ports will *always* require you to install
>> the Windows SDK separately to get the Microsoft assembler (I don't
>> think packaging that in other setups is permitted under the licence).
> 
> While I agree with the rest, the fact that ocamlfind depends on m4
> is ridiculous. I should patch it out sometimes.
> 

Yes please... such an annoying thing to trip up on.

Anil


> -- 
> Peter Zotov
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
> 

From daniel.buenzli at erratique.ch  Wed Nov  5 19:19:39 2014
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Wed, 5 Nov 2014 20:19:39 +0100
Subject: [opam-devel] OPAM on Windows (1.3 Roadmap)
In-Reply-To: <399B567B-BC22-493F-95FA-A61087DB0DDB@recoil.org>
References: <002501cff6de$650ac150$2f2043f0$@metastack.com>
 <4553691.mfoXpWedeB@agaric>
 <E51C5B015DBD1348A1D85763337FB6D9E96936D7@Remus.metastack.local>
 <4282e3498b24e2b4cec3cad31b264429@whitequark.org>
 <399B567B-BC22-493F-95FA-A61087DB0DDB@recoil.org>
Message-ID: <F6A32D8832124619B4EB4D390B97FCF0@erratique.ch>

This is a little bit OT to the discussion but I recently have had a look at OCaml on windows both because of cmdliner and assemblage and I would just like to point out that the modern IE virtual machines (XP, Vista, 8, 9, and what not) [1] can be used with virtual box for testing and diagnosing things (e.g. assumptions about cmd.exe). 

For example ocpwin installed there without a hitch. They are time limited but you can simply reset to an earlier snapshot (that's actually what *they* tell you) IANAL but having read the license terms this is all perfectly legal as the machines are provided for testing purposes only.  

Best,

Daniel

[1] https://www.modern.ie/en-us/virtualization-tools 







From david.allsopp at metastack.com  Wed Nov  5 19:31:53 2014
From: david.allsopp at metastack.com (David Allsopp)
Date: Wed, 5 Nov 2014 19:31:53 +0000
Subject: [opam-devel] OPAM on Windows (1.3 Roadmap)
In-Reply-To: <F6A32D8832124619B4EB4D390B97FCF0@erratique.ch>
References: <002501cff6de$650ac150$2f2043f0$@metastack.com>
 <4553691.mfoXpWedeB@agaric>
 <E51C5B015DBD1348A1D85763337FB6D9E96936D7@Remus.metastack.local>
 <4282e3498b24e2b4cec3cad31b264429@whitequark.org>
 <399B567B-BC22-493F-95FA-A61087DB0DDB@recoil.org>
 <F6A32D8832124619B4EB4D390B97FCF0@erratique.ch>
Message-ID: <E51C5B015DBD1348A1D85763337FB6D9E9694358@Remus.metastack.local>

Daniel B?nzli wrote:
> This is a little bit OT to the discussion but I recently have had a look
> at OCaml on windows both because of cmdliner and assemblage and I would
> just like to point out that the modern IE virtual machines (XP, Vista, 8,
> 9, and what not) [1] can be used with virtual box for testing and
> diagnosing things (e.g. assumptions about cmd.exe).
> 
> For example ocpwin installed there without a hitch. They are time limited
> but you can simply reset to an earlier snapshot (that's actually what
> *they* tell you) IANAL but having read the license terms this is all
> perfectly legal as the machines are provided for testing purposes only.

I'm fairly sure also that licensing also permits continuous reinstallation of the 180-day trial of Windows Server (which can also be done in VirtualBox) as Microsoft simply assume that no one in their right mind would choose to do that for a production environment!


David

From Fabrice.Le_fessant at inria.fr  Wed Nov  5 20:01:04 2014
From: Fabrice.Le_fessant at inria.fr (Fabrice Le Fessant)
Date: Wed, 5 Nov 2014 21:01:04 +0100
Subject: [opam-devel] OPAM on Windows (1.3 Roadmap)
In-Reply-To: <E51C5B015DBD1348A1D85763337FB6D9E96936D7@Remus.metastack.local>
References: <002501cff6de$650ac150$2f2043f0$@metastack.com>
 <4553691.mfoXpWedeB@agaric>
 <E51C5B015DBD1348A1D85763337FB6D9E96936D7@Remus.metastack.local>
Message-ID: <CAHvkLrNp30wkWCzK=qh-DM7ifoiX3r1XYMqt500zHsm7hyLKfg@mail.gmail.com>

On Wed, Nov 5, 2014 at 7:06 PM, David Allsopp
<david.allsopp at metastack.com> wrote:
> Although Windows has them, Windows and Unix process groups aren't quite the same concept. I expect you want more the behaviour of Unix.waitpid (-1) (any child) which is sort of what I implemented in my branch. In fact, the way waiting works under Windows, the stub I implemented specifically waits for any one of a list of PIDs to terminate.

That's also what is done in ocp-build to work on Windows, you have to
maintain a list of the processes you created with create_process, and
then wait on the list.

> But unless you guarantee that all 700/800 packages in OPAM do the same thing, at some point you will need a "real" environment - make, patch, m4, etc (you can't even get as far as findlib without m4) and ocamlopt's need for a C compiler, or at least an assembler, is never far away - and the two MSVC ports will *always* require you to install the Windows SDK separately to get the Microsoft assembler (I don't think packaging that in other setups is permitted under the licence).

OcpWin solves this problem by coming with its own version
(minimalized) of MinGW. Unfortunately, it then conflicts with the one
installed on Cygwin. We still have to find a workaround for this
problem.

>> * Test & fix on Windows
>> > "Cygwin, then, maybe, native." I'm afraid implies a crucial
>> > misunderstanding of how OCaml-on-Windows works.

I think Sylvain's remark is more about the fact that "Cygwin" is a
direct port (you compile from Cygwin to Cygwin), whereas "native",
when generated on Cygwin, is actually a cross-compilation (you are
generating code for "native" Windows, and these tools have problems
when running under Cygwin). From my experience, you then reach a
limitation of some of OCaml build tools (ocaml itself, then ocamlbuild
and other ones), and have to start patching a lot of stuff... Nothing
impossible, though a lot of uninteresting work...

When we decided to work on OcpWin, we had another approach: instead of
cross-compiling packages (either from Linux or from Cygwin), we
decided to compile them directly under native Windows. The idea is to
get used to what native Windows programmers are going to deal with,
and to try to fix these problems, instead of hiding them behind
Cygwin. It's very frustrating, but at least, I hope the result will be
more "natural" for them this way (for now, we have a lot of .bat files
:-) ).

--Fabrice

From david.allsopp at metastack.com  Wed Nov  5 20:18:44 2014
From: david.allsopp at metastack.com (David Allsopp)
Date: Wed, 5 Nov 2014 20:18:44 +0000
Subject: [opam-devel] OPAM on Windows (1.3 Roadmap)
In-Reply-To: <CAHvkLrNp30wkWCzK=qh-DM7ifoiX3r1XYMqt500zHsm7hyLKfg@mail.gmail.com>
References: <002501cff6de$650ac150$2f2043f0$@metastack.com>
 <4553691.mfoXpWedeB@agaric>
 <E51C5B015DBD1348A1D85763337FB6D9E96936D7@Remus.metastack.local>
 <CAHvkLrNp30wkWCzK=qh-DM7ifoiX3r1XYMqt500zHsm7hyLKfg@mail.gmail.com>
Message-ID: <E51C5B015DBD1348A1D85763337FB6D9E9694974@Remus.metastack.local>

Fabrice Le Fessant wrote:
> On Wed, Nov 5, 2014 at 7:06 PM, David Allsopp
> <david.allsopp at metastack.com> wrote:
> > But unless you guarantee that all 700/800 packages in OPAM do the same
> thing, at some point you will need a "real" environment - make, patch, m4,
> etc (you can't even get as far as findlib without m4) and ocamlopt's need
> for a C compiler, or at least an assembler, is never far away - and the
> two MSVC ports will *always* require you to install the Windows SDK
> separately to get the Microsoft assembler (I don't think packaging that in
> other setups is permitted under the licence).
> 
> OcpWin solves this problem by coming with its own version
> (minimalized) of MinGW. Unfortunately, it then conflicts with the one
> installed on Cygwin. We still have to find a workaround for this problem.

Indeed - though, as someone using and developing on Windows pretty much all the time, I have yet to see this "problem" (I mean the "problem" of needing to install either Cygwin or MSYS, not the conflict). It only seems a problem in the eyes of people who don't use Windows or are incapable of following a couple more steps than simply being able to run sudo apt-get install ocaml!

If you are going to essentially embed all the tools, it's also worth having some kind of option to allow it to use those already installed.

> >> * Test & fix on Windows
> >> > "Cygwin, then, maybe, native." I'm afraid implies a crucial
> >> > misunderstanding of how OCaml-on-Windows works.
> 
> I think Sylvain's remark is more about the fact that "Cygwin" is a direct
> port (you compile from Cygwin to Cygwin), whereas "native", when generated
> on Cygwin, is actually a cross-compilation (you are generating code for
> "native" Windows, and these tools have problems when running under
> Cygwin). From my experience, you then reach a limitation of some of OCaml
> build tools (ocaml itself, then ocamlbuild and other ones), and have to
> start patching a lot of stuff... Nothing impossible, though a lot of
> uninteresting work...

What limitations do you mean with ocaml? The only thing necessary to get ocamlbuild to work is to ensure that it can find Cygwin's sh.exe and then the only resulting "complexity" is to ensure that you use forward-slashed paths to prevent escaping problems. In the simplest sense, putting C:\Cygwin\bin in the PATH simply fixes it - I actually do something slightly more complicated and just symlink the executables from Cygwin which I want from my OCaml bin directory (but it's all set-up by a script - the complexity is that you need to symlink the required runtime DLLs as well).

My point for OPAM really is that Cygwin already works (as it should), so it's not really much of a target for the roadmap!

> When we decided to work on OcpWin, we had another approach: instead of
> cross-compiling packages (either from Linux or from Cygwin), we decided to
> compile them directly under native Windows. The idea is to get used to
> what native Windows programmers are going to deal with, and to try to fix
> these problems, instead of hiding them behind Cygwin. It's very
> frustrating, but at least, I hope the result will be more "natural" for
> them this way (for now, we have a lot of .bat files
> :-) ).

So you used MSYS to get the MinGW compiler, rather than Cygwin? I fail to see how that's really any more or less "natural" than using the Cygwin ones!


David

From Fabrice.Le_fessant at inria.fr  Wed Nov  5 21:17:28 2014
From: Fabrice.Le_fessant at inria.fr (Fabrice Le Fessant)
Date: Wed, 5 Nov 2014 22:17:28 +0100
Subject: [opam-devel] OPAM on Windows (1.3 Roadmap)
In-Reply-To: <E51C5B015DBD1348A1D85763337FB6D9E9694974@Remus.metastack.local>
References: <002501cff6de$650ac150$2f2043f0$@metastack.com>
 <4553691.mfoXpWedeB@agaric>
 <E51C5B015DBD1348A1D85763337FB6D9E96936D7@Remus.metastack.local>
 <CAHvkLrNp30wkWCzK=qh-DM7ifoiX3r1XYMqt500zHsm7hyLKfg@mail.gmail.com>
 <E51C5B015DBD1348A1D85763337FB6D9E9694974@Remus.metastack.local>
Message-ID: <CAHvkLrMSe2VcU2zUa_vWDpQCUm9visBcfxG4d9FFvOi1=Mea7g@mail.gmail.com>

On Wed, Nov 5, 2014 at 9:18 PM, David Allsopp
<david.allsopp at metastack.com> wrote:
> Indeed - though, as someone using and developing on Windows pretty much all the time, I have yet to see this "problem" (I mean the "problem" of needing to install either Cygwin or MSYS, not the conflict). It only seems a problem in the eyes of people who don't use Windows or are incapable of following a couple more steps than simply being able to run sudo apt-get install ocaml!

OcpWin targets users wanting to set up a minimal environment for
playing with OCaml. So, it does not require Cygwin nor MSYS to be
used. However, it works well with MSYS, less with Cygwin. As I said,
there are no impossible tasks here, and maybe alternatives are a
couple more steps away, yet, still, there are people who won't do
these few steps, and some other ones will find the complexity of
having multiple layers troublesome (OCaml using MinGW on Cygwin, and
its "cygpath" game).

> If you are going to essentially embed all the tools, it's also worth having some kind of option to allow it to use those already installed.

Not sure to I get your point. Some parts of the distribution have to
be compiled (in C) against specific DLLs, so you cannot really provide
a distribution that will accommodate with whatever is installed
(another mingw version, msvc compilers, etc.).

> My point for OPAM really is that Cygwin already works (as it should), so it's not really much of a target for the roadmap!

My former attempts at building packages with ocamlbuild on Windows
failed, but I don't have your daily experience of Windows environment
(and of ocamlbuild...). You will probably go much further than I
could.

> So you used MSYS to get the MinGW compiler, rather than Cygwin? I fail to see how that's really any more or less "natural" than using the Cygwin ones!

No, we just use a native version of Mingw, independent of MSYS and
CYGWIN. We want to modify the packages so that they can be compiled
without any Unix tool (cp, rm, sh, etc.). Also, our aim is not to
provide the same environment as OPAM: we think more about providing
binary packages, that will be updated less often, and probably almost
never compiled by our users. If you can manage to make OPAM works,
then we could even switch to using your OPAM version to build such
binary packages.

--Fabrice

From louis.gesbert at ocamlpro.com  Thu Nov  6 01:30:18 2014
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Thu, 06 Nov 2014 10:30:18 +0900
Subject: [opam-devel] OPAM on Windows (1.3 Roadmap)
In-Reply-To: <E51C5B015DBD1348A1D85763337FB6D9E96936D7@Remus.metastack.local>
References: <002501cff6de$650ac150$2f2043f0$@metastack.com>
 <4553691.mfoXpWedeB@agaric>
 <E51C5B015DBD1348A1D85763337FB6D9E96936D7@Remus.metastack.local>
Message-ID: <2398150.4cqIXrq2al@agaric>

Le mercredi 5 novembre 2014, 18:06:32 David Allsopp a ?crit :
> Louis Gesbert wrote:
> > Thanks for these comments !
> > 
> > * Rewrite the parallel command engine
> > 
> > This is well underway, I've got a working prototype with limited backends
> > at the moment.
> > I'm not relying on fork anymore, but we'll still need some windows way of
> > implementing `Unix.waitpid 0`; and to add OS switches to the build system.
> 
> Although Windows has them, Windows and Unix process groups aren't quite the same concept. I expect you want more the behaviour of Unix.waitpid (-1) (any child) which is sort of what I implemented in my branch. In fact, the way waiting works under Windows, the stub I implemented specifically waits for any one of a list of PIDs to terminate. 
> 

Indeed I meant Unix.waitpid (-1), I don't use groups. And I've got the list of pids to wait for already, so your solution may actually be a better fit.

> > * Native system manipulation
> > 
> > I agree on re-coding cp, mv etc.; here is also a possible idea, it may be
> > worth checking if it's practical: make sure we may work if limited to
> > busybox, and include some Windows version of busybox in the Windows
> > distribution.
> 
> But unless you guarantee that all 700/800 packages in OPAM do the same thing, at some point you will need a "real" environment - make, patch, m4, etc (you can't even get as far as findlib without m4) and ocamlopt's need for a C compiler, or at least an assembler, is never far away - and the two MSVC ports will *always* require you to install the Windows SDK separately to get the Microsoft assembler (I don't think packaging that in other setups is permitted under the licence).
> 
> I completely agree that making OPAM more portable is a good idea (ocaml-fileutils would be a very good thing to use), but my point is that it has *nothing* to do with making Windows usage of OPAM better, at least for non-toy usage so, at least for this part of the roadmap, it feels like effort targeted at the wrong problem.
> 

You have a point ; this also depends on whether we have interest in a working OPAM on Windows _independently_ of the current OCaml OPAM repo or not. But let's be clear and mention this as the goal if we target a more portable OPAM depending as little as possible on POSIX tools.

> > * Test & fix on Windows
> > > "Cygwin, then, maybe, native." I'm afraid implies a crucial
> > > misunderstanding of how OCaml-on-Windows works.
> > 
> > I know that Cygwin is hardly a step towards native windows compatibility
> > and about the cross-compilation tangle. But given the difference in cost,
> > I think it's worth ensuring Cygwin is well supported before attacking the
> > bulk of the problem: you quickly trip over tiny issues even with Cygwin at
> > the moment.
> 
> What tiny issues have you seen? I've just bootstrapped OPAM on OCaml 4.01.0 on Cygwin 1.7 with no problems, as I expected. I've been able to switch into 4.01.0, run opam install opam-lib --deps-only and re-compile OPAM 1.2 using its "own" compiler. I had trouble with 4.02.1, but that's because there's a bug in ocamlbuild, which is hardly OPAM's fault! I've put a patch at http://people.ds.cam.ac.uk/~dra27/patches/ocaml-4.02.1+cygwin.patch and will shortly see if the issue is already mentioned in Mantis and with that patch was able to switch into 4.02.1 and similarly bootstrap OPAM.
> 

Bad handling of the separator in the PATH variable, for example, but that has been fixed a while ago. I expected to find more of this kind of stuff, but if there is none, that's very good news!

> Incidentally, the problem with Cygwin and OCaml 4.02.1 is a reasonable demonstration of why stripping out external calls to cp, etc. can be a BAD idea! Cygwin neatly masks the ".exe" problem if you do things POSIX-ly. Consider:
> 
> $ test -e /usr/bin/ocaml && echo OCaml is installed
> 
> In a Cygwin bash prompt, this will echo that OCaml is indeed installed. Now, in reality /usr/bin/ocaml is C:\cygwin\bin\ocaml.exe and test -e /usr/bin/ocaml.exe will also be true. ocamlbuild fails because for reasons best understood by Nicolas Pouillard, it replaces Sys.file_exists with a manual attempt to read the directory entries itself (see ocamlbuild/my_std.ml and notes in ocamlbuild/Changelog) - and in so doing bypasses Cygwin's compatibility layers which handle the ".exe" problem for Cygwin.
> 
> 
> David
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel


From anil at recoil.org  Thu Nov  6 07:40:48 2014
From: anil at recoil.org (Anil Madhavapeddy)
Date: Thu, 6 Nov 2014 07:40:48 +0000
Subject: [opam-devel] OPAM on Windows (1.3 Roadmap)
In-Reply-To: <2398150.4cqIXrq2al@agaric>
References: <002501cff6de$650ac150$2f2043f0$@metastack.com>
 <4553691.mfoXpWedeB@agaric>
 <E51C5B015DBD1348A1D85763337FB6D9E96936D7@Remus.metastack.local>
 <2398150.4cqIXrq2al@agaric>
Message-ID: <41FB097F-A587-4C34-9668-94D914D65141@recoil.org>

On 6 Nov 2014, at 01:30, Louis Gesbert <louis.gesbert at ocamlpro.com> wrote:
> 
> Le mercredi 5 novembre 2014, 18:06:32 David Allsopp a ?crit :
>> 
>> But unless you guarantee that all 700/800 packages in OPAM do the same thing, at some point you will need a "real" environment - make, patch, m4, etc (you can't even get as far as findlib without m4) and ocamlopt's need for a C compiler, or at least an assembler, is never far away - and the two MSVC ports will *always* require you to install the Windows SDK separately to get the Microsoft assembler (I don't think packaging that in other setups is permitted under the licence).
>> 
>> I completely agree that making OPAM more portable is a good idea (ocaml-fileutils would be a very good thing to use), but my point is that it has *nothing* to do with making Windows usage of OPAM better, at least for non-toy usage so, at least for this part of the roadmap, it feels like effort targeted at the wrong problem.
>> 
> 
> You have a point ; this also depends on whether we have interest in a working OPAM on Windows _independently_ of the current OCaml OPAM repo or not. But let's be clear and mention this as the goal if we target a more portable OPAM depending as little as possible on POSIX tools.

I'm interested in the "portable OPAM depending as little on POSIX tools" for a few deployment targets beyond just Windows:

 - using OPAM on JavaScript with iocamljs notebooks, for teaching.

 - using OPAM to dynamically install packages in the MirageOS shell, which has no POSIX at all (it's just an OCaml toplevel DSL)

 - experimenting with using it as the solver for OpenBSD ports (which use BSD make)

-anil

From anil at recoil.org  Fri Nov  7 08:19:57 2014
From: anil at recoil.org (Anil Madhavapeddy)
Date: Fri, 7 Nov 2014 08:19:57 +0000
Subject: [opam-devel] Fwd:Cron job update-opam-repo failed on opam.ocaml.org
References: <E1XmehR-0007jn-Dr@www-ocaml-serv1>
Message-ID: <6A9233C3-E63D-453C-A8ED-815294FD3174@recoil.org>

Rewrite scripts breaking on live site.

Begin forwarded message:

> From: cron at opam.ocaml.org
> Date: 7 November 2014 08:15:17 GMT
> To: opam-commits at lists.ocaml.org
> Subject: [opam-commits] Cron job update-opam-repo failed on opam.ocaml.org
> 
> 
> === FULL LOG ===
> 
> 
> ======== RUNNING COMMAND: update-opam-repo update-opam-repo.sh ========
> {{{
> ==> 2014-11-07 08:15:01+00:00
> ==> Load opam env
> ==> Running update-opam-repo.sh
> 
> Cloning into '/home/opam/www-new'...
> done.
> From git://github.com/ocaml/opam-repository
> * branch            master     -> FETCH_HEAD
> HEAD is now at 3cfb7a4 Merge pull request #3025 from bactrian/sync-prs-1415318401
> Packages to build: { base-bigarray.base, base-bytes.base, base-bytes.legacy, base-no-ppx.base, base-threads.base, base-unix.base, camlp4.4.01.0, camlp4.4.02.0+system, camlp4.4.02.0-1modular-implicits, camlp4.4.02.1+system, camlp4.4.03.0, conf-cairo.1, conf-expat.1, conf-ftgl.1, conf-glade.2, conf-glew.1, conf-gmp.1, conf-gnomecanvas.2, conf-gsl.1, conf-gtksourceview.2, conf-libcurl.1, conf-libffi.1, conf-libgsasl.1, conf-libMagickCore.1, conf-libpcre.1, conf-libpng.1, conf-llvm-debug.0.0, conf-lua.1, conf-mpfr.1, conf-nanomsg.0, conf-ode.1, conf-pkg-config.1.0, conf-python-2-7.1.0, conf-python-2-7-dev.1.0, conf-qt.5.2.1, conf-sdl-gfx.1, conf-sdl-image.1, conf-sdl-mixer.1, conf-sdl-net.1, conf-sdl-ttf.1, conf-sdl2.1, conf-sdl2-image.1, conf-sdl2-mixer.1, conf-sdl2-net.1, conf-sdl2-ttf.1, conf-sfml2.1, ocp-build.1.99-beta, ocp-build.1.99.1-beta, ocp-build.1.99.2-beta, ocp-build.1.99.3-beta, ocp-build.1.99.4-beta, ocp-build.1.99.5-beta, ocp-build.1.99.6-beta, portia.0.1, ppx_tools.0.1, 
> quickcheck.0.0.3, sedlex.1.99.1 }
> Building /home/opam/www-new/archives/camlp4.4.02.0-1modular-implicits+opam.tar.gz
> [camlp4.4.02.0-1modular-implicits] Downloading https://github.com/ocamllabs/camlp4/archive/modular-implicits.tar.gz
> [ERROR] Wrong checksum for /tmp/opam-29713-4438d8/modular-implicits.tar.gz:
>  - ba94877dca75730e43d3b8500f041f28 [expected result]
>  - 39f3ae6356bc9546e8f856531bef6a07 [actual result]
> This is surely due to outdated package descriptions and should be fixed by running `opam update`.
> In case an update does not fix that problem, you can use the `--no-checksums` command-line option
> to /bypass checking for invalid checksums.
> [ERROR] https://github.com/ocamllabs/camlp4/archive/modular-implicits.tar.gz is not available
> Rebuilding index.tar.gz ...
> Rebuilding urls.txt
> [ERROR] Got some errors while processing: camlp4.4.02.0-1modular-implicits
> 
> #=== ERROR camlp4.4.02.0-1modular-implicits ===================================#
> OpamGlobals.Exit(66)
> Processing package 0install.2.6.2... 
> [KProcessing package aacplus.0.2.1... 
> [KProcessing package abella.2.0.1... 
> [KProcessing package abella.2.0.2... 
> [KProcessing package acgtk.1.0b... 
> [KProcessing package acgtk.1.1... 
> [KProcessing package ackdo-reloaded.0.3... 
> [KProcessing package ackdo-reloaded.0.4... 
> [KProcessing package acme.0.1... 
> [KProcessing package acpc.1.0... 
> [KProcessing package acpc.1.1... 
> [KProcessing package acpc.1.2... 
> [KProcessing package aez.0.3... 
> [KProcessing package agrep.1.0... 
> [KProcessing package aifad.2.0.2... 
> [KProcessing package aifad.2.0.4... 
> [KProcessing package aifad.2.0.5... 
> [KProcessing package aifad.2.0.6... 
> [KProcessing package aio.0.0.3... 
> [KProcessing package alberto.0.2... 
> [KProcessing package alcotest.0.1.0... 
> [KProcessing package alcotest.0.2.0... 
> [KProcessing package aliases.0.0.5... 
> [KProcessing package alpacaml.1.0.0... 
> [KProcessing package alphaCaml.20061214... 
> [KProcessing package alsa.0.2.1... 
> [KProcessing package alt-ergo.0.95.2... 
> [KProcessing package altgr-ergo.0.95.2... 
> [KProcessing package ancient.0.9.0... 
> [KProcessing package annexlib.0.13.5... 
> [KProcessing package annot.1.0.0... 
> [KProcessing package ansicolor.0.5... 
> [KProcessing package ANSITerminal.0.6... 
> [KProcessing package ANSITerminal.0.6.2... 
> [KProcessing package ANSITerminal.0.6.3... 
> [KProcessing package ANSITerminal.0.6.4... 
> [KProcessing package ANSITerminal.0.6.5... 
> [KProcessing package ao.0.2.0... 
> [KProcessing package apalogretrieve.0.9.6-4... 
> [KProcessing package apron.0.9.10... 
> [KProcessing package arakoon.1.6.5... 
> [KProcessing package arakoon.1.6.6... 
> [KProcessing package arakoon.1.6.7... 
> [KProcessing package archimedes.0.4.13... 
> [KProcessing package archimedes.0.4.15... 
> [KProcessing package archimedes.0.4.17... 
> [KProcessing package argot.1.1... 
> [KProcessing package asn1-combinators.0.1.0... 
> [KProcessing package asn1-combinators.0.1.1... /home/opam/local/bin/update-opam-repo.sh: line 62: 29735 Segmentation fault      $BIN/to_1_1.ml 2>&1
>     29736 Done                    | tee -a $WWW_NEW/lastlog.txt
> 
> ======== CRON JOB update-opam-repo FAILED ========
> ==> 2014-11-07 08:15:17+00:00
> ==> Full command was: update-opam-repo.sh
> _______________________________________________
> Opam-commits mailing list
> Opam-commits at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-commits
> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20141107/1bae1998/attachment.html>

From anil at recoil.org  Fri Nov  7 18:39:53 2014
From: anil at recoil.org (Anil Madhavapeddy)
Date: Fri, 7 Nov 2014 18:39:53 +0000
Subject: [opam-devel] opam 1.1 rewriting broken?
Message-ID: <C58D9BC1-F1BE-412E-B694-37E287F3CA25@recoil.org>

Trying an `opam init` from OPAM 1.1 gets:

+echo OPAM versions
OPAM versions
+opam --version
1.1.2-rc3
+opam --git-version
+opam init
default    Downloading https://opam.ocaml.org/urls.txt
default    Downloading https://opam.ocaml.org/index.tar.gz
Updating ~/.opam/repo/compiler-index ...
Updating ~/.opam/compilers/ ...
Updating ~/.opam/repo/package-index ...
Updating ~/.opam/packages/ ...
[ERROR] Your version of OPAM (1.1.2-rc3) is not recent enough to read ~/.opam/repo/default/packages/asn1-combinators/asn1-combinators.0.1.1/opam. Upgrade OPAM to a more recent version (at least 1.2) to read this file correctly.
[WARNING] Errors while parsing asn1-combinators.0.1.1 OPAM file, skipping.
[ERROR] Your version of OPAM (1.1.2-rc3) is not recent enough to read ~/.opam/repo/default/packages/diy/diy.5.01/opam. Upgrade OPAM to a more recent version (at least 1.2) to read this file correctly.
[WARNING] Errors while parsing diy.5.01 OPAM file, skipping.
[ERROR] Your version of OPAM (1.1.2-rc3) is not recent enough to read 

https://travis-ci.org/mirage/ocaml-cohttp/jobs/40313315



From gesbert at antislash.info  Sat Nov  8 06:34:39 2014
From: gesbert at antislash.info (Louis Gesbert)
Date: Sat, 08 Nov 2014 15:34:39 +0900
Subject: [opam-devel] opam 1.1 rewriting broken?
In-Reply-To: <C58D9BC1-F1BE-412E-B694-37E287F3CA25@recoil.org>
References: <C58D9BC1-F1BE-412E-B694-37E287F3CA25@recoil.org>
Message-ID: <1827439.B43BK51qJX@agaric>

Slightly: doesn't work at init, as I mentionned :/. It's quite scary, but completely fixed by an 'opam update'.

The other cleaner workaround would be to use 'opam init https://opam.ocaml.org/1.1'

Le vendredi 7 novembre 2014, 18:39:53 Anil Madhavapeddy a ?crit :
> Trying an `opam init` from OPAM 1.1 gets:
> 
> +echo OPAM versions
> OPAM versions
> +opam --version
> 1.1.2-rc3
> +opam --git-version
> +opam init
> default    Downloading https://opam.ocaml.org/urls.txt
> default    Downloading https://opam.ocaml.org/index.tar.gz
> Updating ~/.opam/repo/compiler-index ...
> Updating ~/.opam/compilers/ ...
> Updating ~/.opam/repo/package-index ...
> Updating ~/.opam/packages/ ...
> [ERROR] Your version of OPAM (1.1.2-rc3) is not recent enough to read ~/.opam/repo/default/packages/asn1-combinators/asn1-combinators.0.1.1/opam. Upgrade OPAM to a more recent version (at least 1.2) to read this file correctly.
> [WARNING] Errors while parsing asn1-combinators.0.1.1 OPAM file, skipping.
> [ERROR] Your version of OPAM (1.1.2-rc3) is not recent enough to read ~/.opam/repo/default/packages/diy/diy.5.01/opam. Upgrade OPAM to a more recent version (at least 1.2) to read this file correctly.
> [WARNING] Errors while parsing diy.5.01 OPAM file, skipping.
> [ERROR] Your version of OPAM (1.1.2-rc3) is not recent enough to read 
> 
> https://travis-ci.org/mirage/ocaml-cohttp/jobs/40313315
> 
> 
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20141108/8acb0692/attachment.html>

From louis.gesbert at ocamlpro.com  Sat Nov  8 06:35:16 2014
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Sat, 08 Nov 2014 15:35:16 +0900
Subject: [opam-devel] opam 1.1 rewriting broken?
In-Reply-To: <C58D9BC1-F1BE-412E-B694-37E287F3CA25@recoil.org>
References: <C58D9BC1-F1BE-412E-B694-37E287F3CA25@recoil.org>
Message-ID: <1797386.hzfTj4pUkj@agaric>

Slightly: doesn't work at init, as I mentionned :/. It's quite scary, but completely fixed by an 'opam update'.

The other cleaner workaround would be to use 'opam init https://opam.ocaml.org/1.1'

Le vendredi 7 novembre 2014, 18:39:53 Anil Madhavapeddy a ?crit :
> Trying an `opam init` from OPAM 1.1 gets:
> 
> +echo OPAM versions
> OPAM versions
> +opam --version
> 1.1.2-rc3
> +opam --git-version
> +opam init
> default    Downloading https://opam.ocaml.org/urls.txt
> default    Downloading https://opam.ocaml.org/index.tar.gz
> Updating ~/.opam/repo/compiler-index ...
> Updating ~/.opam/compilers/ ...
> Updating ~/.opam/repo/package-index ...
> Updating ~/.opam/packages/ ...
> [ERROR] Your version of OPAM (1.1.2-rc3) is not recent enough to read ~/.opam/repo/default/packages/asn1-combinators/asn1-combinators.0.1.1/opam. Upgrade OPAM to a more recent version (at least 1.2) to read this file correctly.
> [WARNING] Errors while parsing asn1-combinators.0.1.1 OPAM file, skipping.
> [ERROR] Your version of OPAM (1.1.2-rc3) is not recent enough to read ~/.opam/repo/default/packages/diy/diy.5.01/opam. Upgrade OPAM to a more recent version (at least 1.2) to read this file correctly.
> [WARNING] Errors while parsing diy.5.01 OPAM file, skipping.
> [ERROR] Your version of OPAM (1.1.2-rc3) is not recent enough to read 
> 
> https://travis-ci.org/mirage/ocaml-cohttp/jobs/40313315
> 
> 
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20141108/3c2c0532/attachment.html>

From sylvain at le-gall.net  Wed Nov  5 00:19:36 2014
From: sylvain at le-gall.net (Sylvain Le Gall)
Date: Wed, 05 Nov 2014 00:19:36 +0000
Subject: [opam-devel] How to create an integration test based on OPAM
Message-ID: <CAOCAUGOTSq4OyvKMBkOF4=h+qgS=g4fRE7sUmJhY5zdn3hbV3w@mail.gmail.com>

Hi,

I have several projects that depends on each other and I would like to
create an overall Jenkins jobs that will build all these projects with
their VCS version and measure how much breakage will introduce a change.

What I would like:
1. gather project sources:
  a. checkout a project
  b. create an OPAM package
  c. inject the package in a local repository
  d. repeat for every project
2. mix the locally created repository with the official OPAM repository
3. build/test/install projects in order and report results at each step
4. build/test direct reverse dependencies of the projects

I know that they are a lot of missing pieces and I don't really think that
OPAM should handle this kind of test. I would just like to build a tool
that can do it for me.

Is there any already existing scripts that do something close to that ?

Have you any hint on how to build this kind of tools ?

Thanks in advance
Sylvain Le Gall
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20141105/4dc6d2f8/attachment.html>

From anil at recoil.org  Sun Nov  9 16:20:43 2014
From: anil at recoil.org (Anil Madhavapeddy)
Date: Sun, 9 Nov 2014 16:20:43 +0000
Subject: [opam-devel] How to create an integration test based on OPAM
In-Reply-To: <CAOCAUGOTSq4OyvKMBkOF4=h+qgS=g4fRE7sUmJhY5zdn3hbV3w@mail.gmail.com>
References: <CAOCAUGOTSq4OyvKMBkOF4=h+qgS=g4fRE7sUmJhY5zdn3hbV3w@mail.gmail.com>
Message-ID: <3073723A-4AF4-46AA-B75A-A8080494FB0B@recoil.org>

We do something similar to this in Mirage via a custom remote:

    https://github.com/mirage/mirage-dev <https://github.com/mirage/mirage-dev>

And a cron job that builds packages from this remote regularly:

   https://github.com/mirage/is-mirage-broken <https://github.com/mirage/is-mirage-broken>

It uses Docker images to perform the rebuilds, but you could use anything that can construct an appropriate requirement.

That should cover all of the points below except 4).  You can do that in OPAM 1.2 via "opam list --depends-on cohttp --rec" (in this example, to find all the reverse dependencies of cohttp recursively).

Hope this helps,

-anil

> On 5 Nov 2014, at 00:19, Sylvain Le Gall <sylvain at le-gall.net> wrote:
> 
> Hi,
> 
> I have several projects that depends on each other and I would like to create an overall Jenkins jobs that will build all these projects with their VCS version and measure how much breakage will introduce a change.
> 
> What I would like:
> 1. gather project sources:
>   a. checkout a project
>   b. create an OPAM package
>   c. inject the package in a local repository
>   d. repeat for every project
> 2. mix the locally created repository with the official OPAM repository
> 3. build/test/install projects in order and report results at each step
> 4. build/test direct reverse dependencies of the projects
> 
> I know that they are a lot of missing pieces and I don't really think that OPAM should handle this kind of test. I would just like to build a tool that can do it for me.
> 
> Is there any already existing scripts that do something close to that ?
> 
> Have you any hint on how to build this kind of tools ?
> 
> Thanks in advance
> Sylvain Le Gall
> 
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20141109/94e77c2a/attachment.html>

From anil at recoil.org  Sun Nov  9 19:47:27 2014
From: anil at recoil.org (Anil Madhavapeddy)
Date: Sun, 9 Nov 2014 19:47:27 +0000
Subject: [opam-devel] opam 1.1 rewriting broken?
In-Reply-To: <1797386.hzfTj4pUkj@agaric>
References: <C58D9BC1-F1BE-412E-B694-37E287F3CA25@recoil.org>
 <1797386.hzfTj4pUkj@agaric>
Message-ID: <7655F7B9-8971-4D03-A4FC-43CA8C009F94@recoil.org>

Woops, I'd missed that reply previously.  The workaround to `opam init https://opam.ocaml.org/1.1` <https://opam.ocaml.org/1.1%60> will work fine for the purposes of Travis, thanks.

-anil

> On 8 Nov 2014, at 06:35, Louis Gesbert <louis.gesbert at ocamlpro.com> wrote:
> 
> Slightly: doesn't work at init, as I mentionned :/. It's quite scary, but completely fixed by an 'opam update'.
>  
> The other cleaner workaround would be to use 'opam init https://opam.ocaml.org/1.1' <https://opam.ocaml.org/1.1'>
>  
> Le vendredi 7 novembre 2014, 18:39:53 Anil Madhavapeddy a ?crit :
> > Trying an `opam init` from OPAM 1.1 gets:
> > 
> > +echo OPAM versions
> > OPAM versions
> > +opam --version
> > 1.1.2-rc3
> > +opam --git-version
> > +opam init
> > default    Downloading https://opam.ocaml.org/urls.txt
> > default    Downloading https://opam.ocaml.org/index.tar.gz
> > Updating ~/.opam/repo/compiler-index ...
> > Updating ~/.opam/compilers/ ...
> > Updating ~/.opam/repo/package-index ...
> > Updating ~/.opam/packages/ ...
> > [ERROR] Your version of OPAM (1.1.2-rc3) is not recent enough to read ~/.opam/repo/default/packages/asn1-combinators/asn1-combinators.0.1.1/opam. Upgrade OPAM to a more recent version (at least 1.2) to read this file correctly.
> > [WARNING] Errors while parsing asn1-combinators.0.1.1 OPAM file, skipping.
> > [ERROR] Your version of OPAM (1.1.2-rc3) is not recent enough to read ~/.opam/repo/default/packages/diy/diy.5.01/opam. Upgrade OPAM to a more recent version (at least 1.2) to read this file correctly.
> > [WARNING] Errors while parsing diy.5.01 OPAM file, skipping.
> > [ERROR] Your version of OPAM (1.1.2-rc3) is not recent enough to read 
> > 
> > https://travis-ci.org/mirage/ocaml-cohttp/jobs/40313315
> > 
> > 
> > _______________________________________________
> > opam-devel mailing list
> > opam-devel at lists.ocaml.org <mailto:opam-devel at lists.ocaml.org>
> > http://lists.ocaml.org/listinfo/opam-devel <http://lists.ocaml.org/listinfo/opam-devel>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20141109/298d7a40/attachment-0001.html>

From talex5 at gmail.com  Mon Nov 17 11:15:27 2014
From: talex5 at gmail.com (Thomas Leonard)
Date: Mon, 17 Nov 2014 11:15:27 +0000
Subject: [opam-devel] opam pinning to local repo
In-Reply-To: <CAMu2m2Ky07vQjts=Oigg-DwQWrEWAMwd2wLMME4SViTksJf5uQ@mail.gmail.com>
References: <CAMu2m2+iuoryfrXxP1bwEQY-mnURrsZCRAZZLcw=f=iznNwo_A@mail.gmail.com>
 <91C0AB32-1293-4223-A0A4-429D28F482E1@recoil.org>
 <CAMu2m2Ky07vQjts=Oigg-DwQWrEWAMwd2wLMME4SViTksJf5uQ@mail.gmail.com>
Message-ID: <CAG4opy-LLg7yDZmUCvRRK4JVJSVNNAC+xfetnO4biDPa0gJwEg@mail.gmail.com>

I'd prefer a third option: use the files as they are in the working
directory, but only those tracked by git. I often get bitten by opam
copying untracked files (e.g. setup.data, setup.log, previous build
artifacts) and giving strange results.

I use the copy-if-tracked system when editing on my desktop but
compiling on my cubieboard and it works well. You just have to
remember to "git add" any new files... but that's a useful check
anyway.

(BTW, you can easily snapshot the current tracked files without
changing anything with "git stash create", which outputs an anonymous
commit ID if there are any changes relative to HEAD)


On 17 August 2014 18:01, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
> Yes, that's it. It works fine if I do -k local (which seems the same as -k
> path, why multiple names for the same option?).
>
> I guess this gives a +1 to the view in 1582 that the default should be
> path-pin. I do often do `opam install` in order to test that my change is
> correct, so in other words I'm not ready to git commit just yet. That is
> necessarily the case when the change I'm making is to the opam file itself.
> Also if I specify a folder path as the pin's target, to me the intuitive
> result of that is to use the contents of that folder, committed or not. If I
> specified a folder path appended with ".git#master" (or something like
> that), then I'd be happy with that resulting in a git-pin.
>
>
>
>
>
> On Sun, Aug 17, 2014 at 12:24 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>
>> I wonder if you've been bitten by the git/local autodetection.  OPAM 1.2b4
>> spots that the local directory that you're pinning to is a git repository,
>> and turns it into a git remote instead.  if you haven't committed the `opam`
>> file to the local git, then it won't be seen by opam.
>>
>> Can you try
>>
>> opam pin -k local add foo ~/code/foo
>>
>> and see if you get the expected behaviour of using the existing opam file?
>>
>> This is the OPAM issue for the autodetection:
>> https://github.com/ocaml/opam/issues/1582
>>
>> If this is indeed your bug, I'm of the firmer notion that this smart
>> probing should be deactivated before the final release.
>>
>> -a
>>
>> On 17 Aug 2014, at 11:16, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
>>
>> I'm trying out 1.2.0-beta4 and wondering what is the correct workflow for
>> local development packages.
>>
>> Say I have a local package `foo` that is not defined in any repository. I
>> put an opam file in the root of the package's source directory, then did
>> `opam pin add foo ~/code/foo`. However, opam doesn't detect the opam file,
>> and instead says "package not defined, would I like to define a new
>> package". At this point you have to answer yes, and opam creates a new opam
>> file, which is not what I want.
>>
>> Even if the package is defined in a repository, I want opam to detect the
>> opam file in the source directory, not that defined in the repo.
>>
>> The recent platform blog post says opam pin "will generate a new package
>> on the fly by detecting the presence of an opam file within the source
>> repository itself". Where should this opam file be?
>>
>> Note I'm trying to simplify my previous workflow, where I would put the
>> opam file in the source directory at the path
>> "opam/packages/foo/foo.master/opam". Then I would first add this as a repo
>> and also pin to this directory. I'm trying to avoid the first part; I
>> shouldn't have to add a repo per package.
>>
>> _______________________________________________
>> opam-devel mailing list
>> opam-devel at lists.ocaml.org
>> http://lists.ocaml.org/listinfo/opam-devel
>>
>>
>
>
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
>



-- 
Dr Thomas Leonard        http://0install.net/
GPG: 9242 9807 C985 3C07 44A6  8B9A AE07 8280 59A5 3CC1
GPG: DA98 25AE CAD0 8975 7CDA  BD8E 0713 3F96 CA74 D8BA

From daniel.buenzli at erratique.ch  Mon Nov 17 12:06:38 2014
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Mon, 17 Nov 2014 13:06:38 +0100
Subject: [opam-devel] opam pinning to local repo
In-Reply-To: <CAG4opy-LLg7yDZmUCvRRK4JVJSVNNAC+xfetnO4biDPa0gJwEg@mail.gmail.com>
References: <CAMu2m2+iuoryfrXxP1bwEQY-mnURrsZCRAZZLcw=f=iznNwo_A@mail.gmail.com>
 <91C0AB32-1293-4223-A0A4-429D28F482E1@recoil.org>
 <CAMu2m2Ky07vQjts=Oigg-DwQWrEWAMwd2wLMME4SViTksJf5uQ@mail.gmail.com>
 <CAG4opy-LLg7yDZmUCvRRK4JVJSVNNAC+xfetnO4biDPa0gJwEg@mail.gmail.com>
Message-ID: <271A7AE078FE4681B68DCFE2CBD86F8B@erratique.ch>

Le lundi, 17 novembre 2014 ? 12:15, Thomas Leonard a ?crit :
> I'd prefer a third option: use the files as they are in the working
> directory, but only those tracked by git. I often get bitten by opam
> copying untracked files (e.g. setup.data, setup.log, previous build
> artifacts) and giving strange results.
>  
> I use the copy-if-tracked system when editing on my desktop but
> compiling on my cubieboard and it works well. You just have to
> remember to "git add" any new files... but that's a useful check
> anyway.
>  
> (BTW, you can easily snapshot the current tracked files without
> changing anything with "git stash create", which outputs an anonymous
> commit ID if there are any changes relative to HEAD)

That's an interesting middle ground we didn't think about when we had the discussion about this [1]. While I was firmly (and still am) opposed to path pins because of the problems you mention, I do have to agree that having to commit/amend commit on my git-pins, which is what I do now, is sometimes painful. So you'd suggest something like rsync directory state in opam's build dir then:

git stash save -u
git clean -fxd
git checkout .
git stash pop  

Note that with the above procedure you don't have to `git add` untracked files, it relies on your .gitignore. If you prefer the (maybe safer) behaviour you suggest, remove the -u from the first command.  

Regarding the `git stash create` id for the watermark I am not very fond of that since by being anonymous it doesn't give me any context and/or useful information, I think I'd prefer the short last commit ID with -dirty appended.  

Best,

Daniel

[1] https://github.com/ocaml/opam/issues/1555



From anil at recoil.org  Mon Nov 17 14:02:33 2014
From: anil at recoil.org (Anil Madhavapeddy)
Date: Mon, 17 Nov 2014 14:02:33 +0000
Subject: [opam-devel] opam pinning to local repo
In-Reply-To: <CAG4opy-LLg7yDZmUCvRRK4JVJSVNNAC+xfetnO4biDPa0gJwEg@mail.gmail.com>
References: <CAMu2m2+iuoryfrXxP1bwEQY-mnURrsZCRAZZLcw=f=iznNwo_A@mail.gmail.com>
 <91C0AB32-1293-4223-A0A4-429D28F482E1@recoil.org>
 <CAMu2m2Ky07vQjts=Oigg-DwQWrEWAMwd2wLMME4SViTksJf5uQ@mail.gmail.com>
 <CAG4opy-LLg7yDZmUCvRRK4JVJSVNNAC+xfetnO4biDPa0gJwEg@mail.gmail.com>
Message-ID: <866B93A3-C7E3-435F-80FA-3CF1DD0BC2A1@recoil.org>

That's an interesting and useful option -- I would switch to that instead
of local files if it were available.  Worth creating an issue for...

-anil

> On 17 Nov 2014, at 11:15, Thomas Leonard <talex5 at gmail.com> wrote:
> 
> I'd prefer a third option: use the files as they are in the working
> directory, but only those tracked by git. I often get bitten by opam
> copying untracked files (e.g. setup.data, setup.log, previous build
> artifacts) and giving strange results.
> 
> I use the copy-if-tracked system when editing on my desktop but
> compiling on my cubieboard and it works well. You just have to
> remember to "git add" any new files... but that's a useful check
> anyway.
> 
> (BTW, you can easily snapshot the current tracked files without
> changing anything with "git stash create", which outputs an anonymous
> commit ID if there are any changes relative to HEAD)
> 
> 
> On 17 August 2014 18:01, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
>> Yes, that's it. It works fine if I do -k local (which seems the same as -k
>> path, why multiple names for the same option?).
>> 
>> I guess this gives a +1 to the view in 1582 that the default should be
>> path-pin. I do often do `opam install` in order to test that my change is
>> correct, so in other words I'm not ready to git commit just yet. That is
>> necessarily the case when the change I'm making is to the opam file itself.
>> Also if I specify a folder path as the pin's target, to me the intuitive
>> result of that is to use the contents of that folder, committed or not. If I
>> specified a folder path appended with ".git#master" (or something like
>> that), then I'd be happy with that resulting in a git-pin.
>> 
>> 
>> 
>> 
>> 
>> On Sun, Aug 17, 2014 at 12:24 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>> 
>>> I wonder if you've been bitten by the git/local autodetection.  OPAM 1.2b4
>>> spots that the local directory that you're pinning to is a git repository,
>>> and turns it into a git remote instead.  if you haven't committed the `opam`
>>> file to the local git, then it won't be seen by opam.
>>> 
>>> Can you try
>>> 
>>> opam pin -k local add foo ~/code/foo
>>> 
>>> and see if you get the expected behaviour of using the existing opam file?
>>> 
>>> This is the OPAM issue for the autodetection:
>>> https://github.com/ocaml/opam/issues/1582
>>> 
>>> If this is indeed your bug, I'm of the firmer notion that this smart
>>> probing should be deactivated before the final release.
>>> 
>>> -a
>>> 
>>> On 17 Aug 2014, at 11:16, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
>>> 
>>> I'm trying out 1.2.0-beta4 and wondering what is the correct workflow for
>>> local development packages.
>>> 
>>> Say I have a local package `foo` that is not defined in any repository. I
>>> put an opam file in the root of the package's source directory, then did
>>> `opam pin add foo ~/code/foo`. However, opam doesn't detect the opam file,
>>> and instead says "package not defined, would I like to define a new
>>> package". At this point you have to answer yes, and opam creates a new opam
>>> file, which is not what I want.
>>> 
>>> Even if the package is defined in a repository, I want opam to detect the
>>> opam file in the source directory, not that defined in the repo.
>>> 
>>> The recent platform blog post says opam pin "will generate a new package
>>> on the fly by detecting the presence of an opam file within the source
>>> repository itself". Where should this opam file be?
>>> 
>>> Note I'm trying to simplify my previous workflow, where I would put the
>>> opam file in the source directory at the path
>>> "opam/packages/foo/foo.master/opam". Then I would first add this as a repo
>>> and also pin to this directory. I'm trying to avoid the first part; I
>>> shouldn't have to add a repo per package.
>>> 
>>> _______________________________________________
>>> opam-devel mailing list
>>> opam-devel at lists.ocaml.org
>>> http://lists.ocaml.org/listinfo/opam-devel
>>> 
>>> 
>> 
>> 
>> _______________________________________________
>> opam-devel mailing list
>> opam-devel at lists.ocaml.org
>> http://lists.ocaml.org/listinfo/opam-devel
>> 
> 
> 
> 
> -- 
> Dr Thomas Leonard        http://0install.net/
> GPG: 9242 9807 C985 3C07 44A6  8B9A AE07 8280 59A5 3CC1
> GPG: DA98 25AE CAD0 8975 7CDA  BD8E 0713 3F96 CA74 D8BA
> 


From talex5 at gmail.com  Mon Nov 17 15:23:19 2014
From: talex5 at gmail.com (Thomas Leonard)
Date: Mon, 17 Nov 2014 15:23:19 +0000
Subject: [opam-devel] opam pinning to local repo
In-Reply-To: <866B93A3-C7E3-435F-80FA-3CF1DD0BC2A1@recoil.org>
References: <CAMu2m2+iuoryfrXxP1bwEQY-mnURrsZCRAZZLcw=f=iznNwo_A@mail.gmail.com>
 <91C0AB32-1293-4223-A0A4-429D28F482E1@recoil.org>
 <CAMu2m2Ky07vQjts=Oigg-DwQWrEWAMwd2wLMME4SViTksJf5uQ@mail.gmail.com>
 <CAG4opy-LLg7yDZmUCvRRK4JVJSVNNAC+xfetnO4biDPa0gJwEg@mail.gmail.com>
 <866B93A3-C7E3-435F-80FA-3CF1DD0BC2A1@recoil.org>
Message-ID: <CAG4opy8CDmH9bsb5QB8xZjzKuOx3LhfsfQpmcB-LcV5+nRKWGg@mail.gmail.com>

On 17 November 2014 14:02, Anil Madhavapeddy <anil at recoil.org> wrote:
> That's an interesting and useful option -- I would switch to that instead
> of local files if it were available.  Worth creating an issue for...

Done: https://github.com/ocaml/opam/issues/1868

> -anil
>
>> On 17 Nov 2014, at 11:15, Thomas Leonard <talex5 at gmail.com> wrote:
>>
>> I'd prefer a third option: use the files as they are in the working
>> directory, but only those tracked by git. I often get bitten by opam
>> copying untracked files (e.g. setup.data, setup.log, previous build
>> artifacts) and giving strange results.
>>
>> I use the copy-if-tracked system when editing on my desktop but
>> compiling on my cubieboard and it works well. You just have to
>> remember to "git add" any new files... but that's a useful check
>> anyway.
>>
>> (BTW, you can easily snapshot the current tracked files without
>> changing anything with "git stash create", which outputs an anonymous
>> commit ID if there are any changes relative to HEAD)
>>
>>
>> On 17 August 2014 18:01, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
>>> Yes, that's it. It works fine if I do -k local (which seems the same as -k
>>> path, why multiple names for the same option?).
>>>
>>> I guess this gives a +1 to the view in 1582 that the default should be
>>> path-pin. I do often do `opam install` in order to test that my change is
>>> correct, so in other words I'm not ready to git commit just yet. That is
>>> necessarily the case when the change I'm making is to the opam file itself.
>>> Also if I specify a folder path as the pin's target, to me the intuitive
>>> result of that is to use the contents of that folder, committed or not. If I
>>> specified a folder path appended with ".git#master" (or something like
>>> that), then I'd be happy with that resulting in a git-pin.
>>>
>>>
>>>
>>>
>>>
>>> On Sun, Aug 17, 2014 at 12:24 PM, Anil Madhavapeddy <anil at recoil.org> wrote:
>>>>
>>>> I wonder if you've been bitten by the git/local autodetection.  OPAM 1.2b4
>>>> spots that the local directory that you're pinning to is a git repository,
>>>> and turns it into a git remote instead.  if you haven't committed the `opam`
>>>> file to the local git, then it won't be seen by opam.
>>>>
>>>> Can you try
>>>>
>>>> opam pin -k local add foo ~/code/foo
>>>>
>>>> and see if you get the expected behaviour of using the existing opam file?
>>>>
>>>> This is the OPAM issue for the autodetection:
>>>> https://github.com/ocaml/opam/issues/1582
>>>>
>>>> If this is indeed your bug, I'm of the firmer notion that this smart
>>>> probing should be deactivated before the final release.
>>>>
>>>> -a
>>>>
>>>> On 17 Aug 2014, at 11:16, Ashish Agarwal <agarwal1975 at gmail.com> wrote:
>>>>
>>>> I'm trying out 1.2.0-beta4 and wondering what is the correct workflow for
>>>> local development packages.
>>>>
>>>> Say I have a local package `foo` that is not defined in any repository. I
>>>> put an opam file in the root of the package's source directory, then did
>>>> `opam pin add foo ~/code/foo`. However, opam doesn't detect the opam file,
>>>> and instead says "package not defined, would I like to define a new
>>>> package". At this point you have to answer yes, and opam creates a new opam
>>>> file, which is not what I want.
>>>>
>>>> Even if the package is defined in a repository, I want opam to detect the
>>>> opam file in the source directory, not that defined in the repo.
>>>>
>>>> The recent platform blog post says opam pin "will generate a new package
>>>> on the fly by detecting the presence of an opam file within the source
>>>> repository itself". Where should this opam file be?
>>>>
>>>> Note I'm trying to simplify my previous workflow, where I would put the
>>>> opam file in the source directory at the path
>>>> "opam/packages/foo/foo.master/opam". Then I would first add this as a repo
>>>> and also pin to this directory. I'm trying to avoid the first part; I
>>>> shouldn't have to add a repo per package.
>>>>
>>>> _______________________________________________
>>>> opam-devel mailing list
>>>> opam-devel at lists.ocaml.org
>>>> http://lists.ocaml.org/listinfo/opam-devel
>>>>
>>>>
>>>
>>>
>>> _______________________________________________
>>> opam-devel mailing list
>>> opam-devel at lists.ocaml.org
>>> http://lists.ocaml.org/listinfo/opam-devel
>>>
>>
>>
>>
>> --
>> Dr Thomas Leonard        http://0install.net/
>> GPG: 9242 9807 C985 3C07 44A6  8B9A AE07 8280 59A5 3CC1
>> GPG: DA98 25AE CAD0 8975 7CDA  BD8E 0713 3F96 CA74 D8BA
>>
>



-- 
Dr Thomas Leonard        http://0install.net/
GPG: 9242 9807 C985 3C07 44A6  8B9A AE07 8280 59A5 3CC1
GPG: DA98 25AE CAD0 8975 7CDA  BD8E 0713 3F96 CA74 D8BA

From amc79 at cam.ac.uk  Mon Nov 24 13:33:41 2014
From: amc79 at cam.ac.uk (Amir Chaudhry)
Date: Mon, 24 Nov 2014 13:33:41 +0000
Subject: [opam-devel] Possibly dumb question re deps, opts, exts, etc
Message-ID: <697AA728-F37C-4F36-BD56-E0FA971CF868@cam.ac.uk>

Hi folks,

Apologies if this naive but I wonder if the terms we use to describe dependencies are widely used.  I ask because I've only learned the meanings by osmosis and some quick google searching doesn't lead me to any neat explanations. Had I come across these for the first time by myself, I'd likely be confused (I didn't find them self-explanatory in the beginning).

* Dep(s) -- Dependencies
* depopt(s) -- Optional dependency
* depext(s) -- External dependency

Am I missing any?  I wondered about writing a short blog post or glossary so that these terms might surface somewhere more easily [1] (I do note that 'depopt' appears once in the packaging instructions [2]).

I thought I'd post this here just in case it provokes some thoughts.  

Best wishes,
Amir

[1] Something similar to http://mirror.ocamlcore.org/ocaml-tutorial.org/glossary.html
[2] https://opam.ocaml.org/doc/Packaging.html


From roberto at dicosmo.org  Mon Nov 24 14:05:00 2014
From: roberto at dicosmo.org (Roberto Di Cosmo)
Date: Mon, 24 Nov 2014 15:05:00 +0100
Subject: [opam-devel] Possibly dumb question re deps, opts, exts, etc
In-Reply-To: <697AA728-F37C-4F36-BD56-E0FA971CF868@cam.ac.uk>
References: <697AA728-F37C-4F36-BD56-E0FA971CF868@cam.ac.uk>
Message-ID: <20141124140500.GB14919@traveler>

Hi Amir,

   on depends, see http://opam.ocaml.org/doc/Packaging.html

   on depopts, see https://github.com/ocaml/opam/blob/master/doc/design/metadata-evolution

   


On Mon, Nov 24, 2014 at 01:33:41PM +0000, Amir Chaudhry wrote:
> Hi folks,
> 
> Apologies if this naive but I wonder if the terms we use to describe dependencies are widely used.  I ask because I've only learned the meanings by osmosis and some quick google searching doesn't lead me to any neat explanations. Had I come across these for the first time by myself, I'd likely be confused (I didn't find them self-explanatory in the beginning).
> 
> * Dep(s) -- Dependencies
> * depopt(s) -- Optional dependency
> * depext(s) -- External dependency
> 
> Am I missing any?  I wondered about writing a short blog post or glossary so that these terms might surface somewhere more easily [1] (I do note that 'depopt' appears once in the packaging instructions [2]).
> 
> I thought I'd post this here just in case it provokes some thoughts.  
> 
> Best wishes,
> Amir
> 
> [1] Something similar to http://mirror.ocamlcore.org/ocaml-tutorial.org/glossary.html
> [2] https://opam.ocaml.org/doc/Packaging.html
> 
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel

-- 
Roberto Di Cosmo
 
------------------------------------------------------------------
Professeur               En delegation a l'INRIA
PPS                      E-mail: roberto at dicosmo.org
Universite Paris Diderot WWW  : http://www.dicosmo.org
Case 7014                Tel  : ++33-(0)1-57 27 92 20
5, Rue Thomas Mann       
F-75205 Paris Cedex 13   Identica: http://identi.ca/rdicosmo
FRANCE.                  Twitter: http://twitter.com/rdicosmo
------------------------------------------------------------------
Attachments:
MIME accepted, Word deprecated
      http://www.gnu.org/philosophy/no-word-attachments.html
------------------------------------------------------------------
Office location:
 
Bureau 3020 (3rd floor)
Batiment Sophie Germain
Avenue de France
Metro Bibliotheque Francois Mitterrand, ligne 14/RER C
-----------------------------------------------------------------
GPG fingerprint 2931 20CE 3A5A 5390 98EC 8BFC FCCA C3BE 39CB 12D3                        

From louis.gesbert at ocamlpro.com  Thu Nov 27 08:06:59 2014
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Thu, 27 Nov 2014 17:06:59 +0900
Subject: [opam-devel] Possibly dumb question re deps, opts, exts, etc
In-Reply-To: <697AA728-F37C-4F36-BD56-E0FA971CF868@cam.ac.uk>
References: <697AA728-F37C-4F36-BD56-E0FA971CF868@cam.ac.uk>
Message-ID: <4284709.JYuD23a81D@agaric>

Indeed, to be honest, these are terms we use internally and the name of fields in the opam package format, but we should otherwise be explicit -- for the field names it's documented, but otherwise users aren't supposed to know about them.

On [1], the term appears as the name of a field under the "Optional dependecies" title so that seems clear enough ?

Cheers,
Louis


[1] https://opam.ocaml.org/doc/Packaging.html

Le lundi 24 novembre 2014, 13:33:41 Amir Chaudhry a ?crit :
> Hi folks,
> 
> Apologies if this naive but I wonder if the terms we use to describe dependencies are widely used.  I ask because I've only learned the meanings by osmosis and some quick google searching doesn't lead me to any neat explanations. Had I come across these for the first time by myself, I'd likely be confused (I didn't find them self-explanatory in the beginning).
> 
> * Dep(s) -- Dependencies
> * depopt(s) -- Optional dependency
> * depext(s) -- External dependency
> 
> Am I missing any?  I wondered about writing a short blog post or glossary so that these terms might surface somewhere more easily [1] (I do note that 'depopt' appears once in the packaging instructions [2]).
> 
> I thought I'd post this here just in case it provokes some thoughts.  
> 
> Best wishes,
> Amir
> 
> [1] Something similar to http://mirror.ocamlcore.org/ocaml-tutorial.org/glossary.html
> [2] https://opam.ocaml.org/doc/Packaging.html
> 
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel


From roberto at dicosmo.org  Thu Nov 27 08:15:51 2014
From: roberto at dicosmo.org (Roberto Di Cosmo)
Date: Thu, 27 Nov 2014 09:15:51 +0100
Subject: [opam-devel] Possibly dumb question re deps, opts, exts, etc
In-Reply-To: <4284709.JYuD23a81D@agaric>
References: <697AA728-F37C-4F36-BD56-E0FA971CF868@cam.ac.uk>
 <4284709.JYuD23a81D@agaric>
Message-ID: <CAJBwKuXBEpUTGLhMwmPmxXu6JrUYWXr_-AMUX=JdWfk1ObTGUA@mail.gmail.com>

Well, a class of our users are packagers, and they sure need to know
precisely what all this means, I believe....

Roberto Di Cosmo (via mobile/cell)
Le 27 nov. 2014 09:07, "Louis Gesbert" <louis.gesbert at ocamlpro.com> a ?crit
:

> Indeed, to be honest, these are terms we use internally and the name of
> fields in the opam package format, but we should otherwise be explicit --
> for the field names it's documented, but otherwise users aren't supposed to
> know about them.
>
> On [1], the term appears as the name of a field under the "Optional
> dependecies" title so that seems clear enough ?
>
> Cheers,
> Louis
>
>
> [1] https://opam.ocaml.org/doc/Packaging.html
>
> Le lundi 24 novembre 2014, 13:33:41 Amir Chaudhry a ?crit :
> > Hi folks,
> >
> > Apologies if this naive but I wonder if the terms we use to describe
> dependencies are widely used.  I ask because I've only learned the meanings
> by osmosis and some quick google searching doesn't lead me to any neat
> explanations. Had I come across these for the first time by myself, I'd
> likely be confused (I didn't find them self-explanatory in the beginning).
> >
> > * Dep(s) -- Dependencies
> > * depopt(s) -- Optional dependency
> > * depext(s) -- External dependency
> >
> > Am I missing any?  I wondered about writing a short blog post or
> glossary so that these terms might surface somewhere more easily [1] (I do
> note that 'depopt' appears once in the packaging instructions [2]).
> >
> > I thought I'd post this here just in case it provokes some thoughts.
> >
> > Best wishes,
> > Amir
> >
> > [1] Something similar to
> http://mirror.ocamlcore.org/ocaml-tutorial.org/glossary.html
> > [2] https://opam.ocaml.org/doc/Packaging.html
> >
> > _______________________________________________
> > opam-devel mailing list
> > opam-devel at lists.ocaml.org
> > http://lists.ocaml.org/listinfo/opam-devel
>
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/opam-devel/attachments/20141127/fc955728/attachment.html>

