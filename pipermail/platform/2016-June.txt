From basus at cs.cornell.edu  Wed Jun 15 16:04:44 2016
From: basus at cs.cornell.edu (Shrutarshi Basu)
Date: Wed, 15 Jun 2016 11:04:44 -0400
Subject: [ocaml-platform] Aquamacs detecting incorrect build environment
Message-ID: <CALmevSNpN971Y=EnnY5cQtSXXgwcmXekcxK_+uy3zzy0LA1bcw@mail.gmail.com>

Hello all,
I'm not sure if this is the right place for this message, but I'm
encountering a strange error with my OCaml setup and Aquamacs on OS X. I'm
using a Oasis-based setup to build my project, and I have both an OPAM
installation and system OCaml compilers. When I run the Oasis-generated
Makefile from the terminal (Zsh) I get a correct build. But when running
Make from inside Aquamacs I get the correct ocamlfind (from OPAM) but I get
the system versions of other tools. Here is top of the output from running
the Oasis-generated configure (ocaml setup.ml -configure $@) from Aquamacs:

ocamlfind: ........................................... /Users/basus
/.opam/4.02.3/bin/ocamlfind

ocamlc: ..............................................
/usr/local/bin/ocamlc.opt

ocamlopt: ............................................
/usr/local/bin/ocamlopt.opt

ocamlbuild: ..........................................
/usr/local/bin/ocamlbuild


Aquamacs seems to have the correct PATH. The `exec-path` variable has the
OPAM 4.02.3/bin directory right at the start. Any ideas on how I could go
about debugging or fixing this?

Thanks,
Basu



-- 
Shrutarshi Basu
Basus.me
The ByteBaker <http://bytebaker.com>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20160615/d537548e/attachment.html>

From daniel.buenzli at erratique.ch  Sat Jun 25 17:35:49 2016
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Sat, 25 Jun 2016 17:35:49 +0100
Subject: [ocaml-platform] Bytes
Message-ID: <24AC3C03F0E046708511F75786E5587D@erratique.ch>

It strikes me as odd that the bytes compatibility package was integrated in ocamlfind. 

I'm not sure I understand the rationale behind this move, it obscures things rather than enlight them. 

I think we should move it out from there as a separate package and follow the conventions established by the `result` and `uchar` compatibility packages.

Or is there anything that I am missing ? 

Best, 

Daniel 



From gabriel.scherer at gmail.com  Sat Jun 25 17:54:09 2016
From: gabriel.scherer at gmail.com (Gabriel Scherer)
Date: Sat, 25 Jun 2016 12:54:09 -0400
Subject: [ocaml-platform] Bytes
In-Reply-To: <24AC3C03F0E046708511F75786E5587D@erratique.ch>
References: <24AC3C03F0E046708511F75786E5587D@erratique.ch>
Message-ID: <CAPFanBGXP9AA_v3FyhfyH0boJ3D_6OM2qngkLDDJM3Oss6jBPw@mail.gmail.com>

I initially sent it to Gerd Stolpmann on the idea that there may be
non-opam users out there for which it would be a good distribution channel.
The idea came from the fact that ocamlfind already had all those base-*
packages, and that base-bytes was a nice extension of this principle.

It has since been pointed out that this is inconvenient for people that do
not use ocamlfind. My own base-bytes implementation is available
independently from ocamlfind at

  https://github.com/gasche/bytes-compat

and I know that others have (partially) reimplemented this, e.g. Pierre
Chambart's ocaml-bytes:

  https://github.com/chambart/ocaml-bytes

(I now realize that there is no license on my separate bytes-compat
package; it should be BSD or whatever -- inside findlib it is distributed
with findlib's license, which is the MIT license.)

I have no strong opinion on where such compatibility packages should go,
and I think (as we both pointed out) that it would be important to have a
consistent process for those things. If you or someone else are willing to
give clear directives on how to go forward with compatibility packages, I
think it could be really nice. In particular, is there a way to avoid a
combinatorial explosion of small compatibility packages, or is this ok for
users?

(Batteries provides back-ported implementation of new stdlib features, so
using Batteries removes the need for such backward-compatibility packages.
A more general and less invasive solution would still be very nice.)

I think that for the specifics of this package and ocamlfind, you would
have to see directly with Gerd Stolpmann if you want to move it out.

There is also the question of what the responsibility of this package is.
The initial plan was to provide only the features available at the time
Bytes was introduced (4.02), but I think it could be nice to add new
functions to keep up with recent stdlib versions of Bytes. This could be
done as a separate package, but it can also be done in findlib. In my
experience Gerd has been very responsive in updating the bytes
implementation during the 4.02+dev development period, and this may be even
easier now that he switched to git repositories

  https://gitlab.camlcity.org/gerd/lib-findlib

If we decide to update the bytes package, we have to decide on a versioning
scheme. The simplest may be to have base-bytes version follow upstream
OCaml version, so that people can request

  base-bytes {>= 4.03}

if they use a Bytes feature only available since 4.03.

On Sat, Jun 25, 2016 at 12:35 PM, Daniel B?nzli <daniel.buenzli at erratique.ch
> wrote:

> It strikes me as odd that the bytes compatibility package was integrated
> in ocamlfind.
>
> I'm not sure I understand the rationale behind this move, it obscures
> things rather than enlight them.
>
> I think we should move it out from there as a separate package and follow
> the conventions established by the `result` and `uchar` compatibility
> packages.
>
> Or is there anything that I am missing ?
>
> Best,
>
> Daniel
>
>
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20160625/ff343c09/attachment.html>

From daniel.buenzli at erratique.ch  Sat Jun 25 18:34:02 2016
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Sat, 25 Jun 2016 18:34:02 +0100
Subject: [ocaml-platform] Bytes
In-Reply-To: <1E30275EFEF3459195D9CFB6F703FDA4@erratique.ch>
References: <24AC3C03F0E046708511F75786E5587D@erratique.ch>
 <CAPFanBGXP9AA_v3FyhfyH0boJ3D_6OM2qngkLDDJM3Oss6jBPw@mail.gmail.com>
 <1E30275EFEF3459195D9CFB6F703FDA4@erratique.ch>
Message-ID: <F21B433C089A4BEDA2F97361019785E8@erratique.ch>

Also even more confusing there's actually a `base-bytes` package in the OCaml OPAM repository.  

Daniel



From daniel.buenzli at erratique.ch  Sat Jun 25 18:29:13 2016
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Sat, 25 Jun 2016 18:29:13 +0100
Subject: [ocaml-platform] Bytes
In-Reply-To: <CAPFanBGXP9AA_v3FyhfyH0boJ3D_6OM2qngkLDDJM3Oss6jBPw@mail.gmail.com>
References: <24AC3C03F0E046708511F75786E5587D@erratique.ch>
 <CAPFanBGXP9AA_v3FyhfyH0boJ3D_6OM2qngkLDDJM3Oss6jBPw@mail.gmail.com>
Message-ID: <1E30275EFEF3459195D9CFB6F703FDA4@erratique.ch>

Le samedi, 25 juin 2016 ? 17:54, Gabriel Scherer a ?crit :
> I initially sent it to Gerd Stolpmann on the idea that there may be non-opam users out there for which it would be a good distribution channel. The idea came from the fact that ocamlfind already had all those base-* packages, and that base-bytes was a nice extension of this principle.

ocamlfind has META files for the base packages, not implementations?

> I have no strong opinion on where such compatibility packages should go, and I think (as we both pointed out) that it would be important to have a consistent process for those things. If you or someone else are willing to give clear directives on how to go forward with compatibility packages, I think it could be really nice. In particular, is there a way to avoid a combinatorial explosion of small compatibility packages, or is this ok for users?
It depends a bit if we are talking about module additions or function additions. For module additions we could choose to have either of these:  

1) One compatibility package stdlib-compat, for Bytes, Uchar and Result  
2) One compatibility package per module.

> There is also the question of what the responsibility of this package is. The initial plan was to provide only the features available at the time Bytes was introduced (4.02), but I think it could be nice to add new functions to keep up with recent stdlib versions of Bytes. This could be done as a separate package, but it can also be done in findlib.  
I really don't think this should be done in findlib. This fails to separate concerns and is out of scope for ocamlfind. As you noted some people do not use ocamlfind and this may actually get in the way at a certain point in the long term goal of simplifying the packaging and build eco-system. Also for the end user it makes it easier to understand the system if to each $LIBPREFIX/$PKG corresponds one OPAM package whose install instructions he can inspect.

> If we decide to update the bytes package, we have to decide on a versioning scheme. The simplest may be to have base-bytes version follow upstream OCaml version, so that people can request
>  
> base-bytes {>= 4.03}
>  
> if they use a Bytes feature only available since 4.03.
That looks like overkill to me, why don't we simply have a package that is up-to-date with the latest version of the compiler ?  

Best,

Daniel

From gabriel.scherer at gmail.com  Sat Jun 25 21:01:23 2016
From: gabriel.scherer at gmail.com (Gabriel Scherer)
Date: Sat, 25 Jun 2016 16:01:23 -0400
Subject: [ocaml-platform] Bytes
In-Reply-To: <F21B433C089A4BEDA2F97361019785E8@erratique.ch>
References: <24AC3C03F0E046708511F75786E5587D@erratique.ch>
 <CAPFanBGXP9AA_v3FyhfyH0boJ3D_6OM2qngkLDDJM3Oss6jBPw@mail.gmail.com>
 <1E30275EFEF3459195D9CFB6F703FDA4@erratique.ch>
 <F21B433C089A4BEDA2F97361019785E8@erratique.ch>
Message-ID: <CAPFanBFe+oH5i_CKS0SoKCwrz+j-hwt6if4AxbehaFGMMj93+Q@mail.gmail.com>

 > That looks like overkill to me, why don't we simply have a package that
is up-to-date with the latest version of the compiler ?

Are you suggesting that released versions of base-bytes would be silently
modified at each stdlib release to incoporate new functions? What is (in
your idea) the process to follow when a new stdlib version is released with
additional functions in Bytes? (As happened in 4.03)

On Sat, Jun 25, 2016 at 1:34 PM, Daniel B?nzli <daniel.buenzli at erratique.ch>
wrote:

> Also even more confusing there's actually a `base-bytes` package in the
> OCaml OPAM repository.
>

This is actually a good idea, as it lets people announce a dependency on
the base-bytes package instead of using a lower bound constraint on
findlib. In particular, it is very important to have that if you want to
smoothly move base-bytes out of findlib as a separate package in the future.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20160625/1655e4d3/attachment.html>

From daniel.buenzli at erratique.ch  Sun Jun 26 12:41:57 2016
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Sun, 26 Jun 2016 12:41:57 +0100
Subject: [ocaml-platform] Bytes
In-Reply-To: <CAPFanBFe+oH5i_CKS0SoKCwrz+j-hwt6if4AxbehaFGMMj93+Q@mail.gmail.com>
References: <24AC3C03F0E046708511F75786E5587D@erratique.ch>
 <CAPFanBGXP9AA_v3FyhfyH0boJ3D_6OM2qngkLDDJM3Oss6jBPw@mail.gmail.com>
 <1E30275EFEF3459195D9CFB6F703FDA4@erratique.ch>
 <F21B433C089A4BEDA2F97361019785E8@erratique.ch>
 <CAPFanBFe+oH5i_CKS0SoKCwrz+j-hwt6if4AxbehaFGMMj93+Q@mail.gmail.com>
Message-ID: <4AB3C37B9DDF47378C44D9322571CB4C@erratique.ch>

Le samedi, 25 juin 2016 ? 21:01, Gabriel Scherer a ?crit :
> > That looks like overkill to me, why don't we simply have a package that is up-to-date with the latest version of the compiler ?
>  
> Are you suggesting that released versions of base-bytes would be silently modified at each stdlib release to incoporate new functions?

Yes, I don't see why this would be a problem. As long as no API breaking changes are done ? technically adding can be one because of the M.() notation but let's be realistic ? there's no reason to bother people with constraints and there's no reason to bother the person responsible for the package to follow a particular discipline except being compatible with what is missing.

> On Sat, Jun 25, 2016 at 1:34 PM, Daniel B?nzli <daniel.buenzli at erratique.ch (mailto:daniel.buenzli at erratique.ch)> wrote:
> > Also even more confusing there's actually a `base-bytes` package in the OCaml OPAM repository.
>  
> This is actually a good idea, as it lets people announce a dependency on the base-bytes package instead of using a lower bound constraint on findlib.  

It may be a good idea but in its current incarnation it is confusing. First this package should be called `bytes`. I think that in general we should drop the `base-` forms to go towards the model where a $PKG name installs in $LIB/$PKG and try to avoid discrepancies between ocamlfind names and opam ones; note that for examples both result, maintained by Jane Street, and uchar, maintained by me lack this prefix. Second this package doesn't install bytes and I think it should, rather than ocamlfind doing it.

Best,  

Daniel

From Fabrice.Le_fessant at inria.fr  Sun Jun 26 20:46:02 2016
From: Fabrice.Le_fessant at inria.fr (Fabrice Le Fessant)
Date: Sun, 26 Jun 2016 19:46:02 +0000
Subject: [ocaml-platform] Bytes
In-Reply-To: <CAPFanBGXP9AA_v3FyhfyH0boJ3D_6OM2qngkLDDJM3Oss6jBPw@mail.gmail.com>
References: <24AC3C03F0E046708511F75786E5587D@erratique.ch>
 <CAPFanBGXP9AA_v3FyhfyH0boJ3D_6OM2qngkLDDJM3Oss6jBPw@mail.gmail.com>
Message-ID: <CAHvkLrOe18Ahw1Hr7_AyyOdz5qnAbHw97+9zH9UMu4gE94Zmtg@mail.gmail.com>

On Sat, Jun 25, 2016 at 6:55 PM Gabriel Scherer <gabriel.scherer at gmail.com>
wrote:

> and I know that others have (partially) reimplemented this, e.g. Pierre
> Chambart's ocaml-bytes:
>
>   https://github.com/chambart/ocaml-bytes
>

To the best of my knowledge, that package was already in OPAM before your
bytes version was added in `ocamlfind`. It was then removed.

It was all the more a bad decision that now, we suffer from packages
wrongly adding `ocamlfind {build}` dependencies in OPAM, forgetting that
they actually depend on the `bytes` library in `ocamlfind`.

 Note that `ocp-build` comes with its own compatibility library
`ocplib-compat` (it provides a `StringCompat` module that can be opened to
provide the same String/Bytes API for all OCaml versions). But the
rationale here was that it was used by `ocp-build` itself, and used
`ocp-build` to compile itself.

--Fabrice
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20160626/ee58239b/attachment.html>

From gabriel.scherer at gmail.com  Sun Jun 26 21:36:23 2016
From: gabriel.scherer at gmail.com (Gabriel Scherer)
Date: Sun, 26 Jun 2016 16:36:23 -0400
Subject: [ocaml-platform] Bytes
In-Reply-To: <CAHvkLrOe18Ahw1Hr7_AyyOdz5qnAbHw97+9zH9UMu4gE94Zmtg@mail.gmail.com>
References: <24AC3C03F0E046708511F75786E5587D@erratique.ch>
 <CAPFanBGXP9AA_v3FyhfyH0boJ3D_6OM2qngkLDDJM3Oss6jBPw@mail.gmail.com>
 <CAHvkLrOe18Ahw1Hr7_AyyOdz5qnAbHw97+9zH9UMu4gE94Zmtg@mail.gmail.com>
Message-ID: <CAPFanBE0hSF0Lk+8FbtD9xH9pnxRLFUtEpmw1s+4NJe-jEUOsw@mail.gmail.com>

On Sun, Jun 26, 2016 at 3:46 PM, Fabrice Le Fessant <
Fabrice.Le_fessant at inria.fr> wrote:

> To the best of my knowledge, that package was already in OPAM before your
> bytes version was added in `ocamlfind`. It was then removed.


For the record, the idea of a compatibility package emerged in a discussion
on the public #ocaml IRC channel on May 3, 2014. It was implemented on May
4 and whitequark and myself contacted Gerd Stolpmann to know if he
preferred it see it included in ocamlfind on May 5, and Gerd included it in
ocamlfind SVN on the same day -- but the next ocamlfind release came later,
on June 25.

Pierre Chambart create his independent version on May 10 and integrated it
in OPAM on May 22. I'm sure he was not aware of the ongoing bytes-compat
work. It's a near-miss, unfortunately, as he connected on-and-off on the
IRC channel around that time (but not during bytes-compat discussions), and
Thomas Gazagnaire had a patch in ocamlfind on May 5 as well.

On Sun, Jun 26, 2016 at 3:46 PM, Fabrice Le Fessant <
Fabrice.Le_fessant at inria.fr> wrote:

> On Sat, Jun 25, 2016 at 6:55 PM Gabriel Scherer <gabriel.scherer at gmail.com>
> wrote:
>
>> and I know that others have (partially) reimplemented this, e.g. Pierre
>> Chambart's ocaml-bytes:
>>
>>   https://github.com/chambart/ocaml-bytes
>>
>
> To the best of my knowledge, that package was already in OPAM before your
> bytes version was added in `ocamlfind`. It was then removed.
>
> It was all the more a bad decision that now, we suffer from packages
> wrongly adding `ocamlfind {build}` dependencies in OPAM, forgetting that
> they actually depend on the `bytes` library in `ocamlfind`.
>
>  Note that `ocp-build` comes with its own compatibility library
> `ocplib-compat` (it provides a `StringCompat` module that can be opened to
> provide the same String/Bytes API for all OCaml versions). But the
> rationale here was that it was used by `ocp-build` itself, and used
> `ocp-build` to compile itself.
>
> --Fabrice
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20160626/fdc8a8c7/attachment.html>

From francois.bobot at cea.fr  Mon Jun 27 08:56:09 2016
From: francois.bobot at cea.fr (=?UTF-8?Q?Fran=c3=a7ois_Bobot?=)
Date: Mon, 27 Jun 2016 09:56:09 +0200
Subject: [ocaml-platform] Bytes
In-Reply-To: <CAPFanBFe+oH5i_CKS0SoKCwrz+j-hwt6if4AxbehaFGMMj93+Q@mail.gmail.com>
References: <24AC3C03F0E046708511F75786E5587D@erratique.ch>
 <CAPFanBGXP9AA_v3FyhfyH0boJ3D_6OM2qngkLDDJM3Oss6jBPw@mail.gmail.com>
 <1E30275EFEF3459195D9CFB6F703FDA4@erratique.ch>
 <F21B433C089A4BEDA2F97361019785E8@erratique.ch>
 <CAPFanBFe+oH5i_CKS0SoKCwrz+j-hwt6if4AxbehaFGMMj93+Q@mail.gmail.com>
Message-ID: <56ac778a-84f2-eff6-5d59-2adf5c10cae9@cea.fr>

On 25/06/2016 22:01, Gabriel Scherer wrote:
>> That looks like overkill to me, why don't we simply have a package that is up-to-date with the
> latest version of the compiler ?
>
> Are you suggesting that released versions of base-bytes would be silently modified at each stdlib
> release to incoporate new functions? What is (in your idea) the process to follow when a new stdlib
> version is released with additional functions in Bytes? (As happened in 4.03)
>

Is it not overkill already to try to have up-to-date with the lastest OCaml version compatibility 
packages? If it is needed and possible why don't we do that for all the stdlib? Should we use the 
compatibility package for version of the compiler that are not the latest?

Currently, I think compatibility package up-to-date with the first compiler version that introduces 
it is enough.

-- 
Fran?ois


From Fabrice.Le_fessant at inria.fr  Mon Jun 27 10:59:25 2016
From: Fabrice.Le_fessant at inria.fr (Fabrice Le Fessant)
Date: Mon, 27 Jun 2016 09:59:25 +0000
Subject: [ocaml-platform] Bytes
In-Reply-To: <CAPFanBE0hSF0Lk+8FbtD9xH9pnxRLFUtEpmw1s+4NJe-jEUOsw@mail.gmail.com>
References: <24AC3C03F0E046708511F75786E5587D@erratique.ch>
 <CAPFanBGXP9AA_v3FyhfyH0boJ3D_6OM2qngkLDDJM3Oss6jBPw@mail.gmail.com>
 <CAHvkLrOe18Ahw1Hr7_AyyOdz5qnAbHw97+9zH9UMu4gE94Zmtg@mail.gmail.com>
 <CAPFanBE0hSF0Lk+8FbtD9xH9pnxRLFUtEpmw1s+4NJe-jEUOsw@mail.gmail.com>
Message-ID: <CAHvkLrOy6peEf_DRMh5b9f3HyAs472vDq99oiDAT4BLHahy-fw@mail.gmail.com>

On Sun, Jun 26, 2016 at 10:37 PM Gabriel Scherer <gabriel.scherer at gmail.com>
wrote:

> On Sun, Jun 26, 2016 at 3:46 PM, Fabrice Le Fessant <
> Fabrice.Le_fessant at inria.fr> wrote:
>
>> To the best of my knowledge, that package was already in OPAM before your
>> bytes version was added in `ocamlfind`. It was then removed.
>
>
> For the record, the idea of a compatibility package emerged in a
> discussion on the public #ocaml IRC channel on May 3, 2014. It was
> implemented on May 4 and whitequark and myself contacted Gerd Stolpmann to
> know if he preferred it see it included in ocamlfind on May 5, and Gerd
> included it in ocamlfind SVN on the same day -- but the next ocamlfind
> release came later, on June 25.
>
> Pierre Chambart create his independent version on May 10 and integrated it
> in OPAM on May 22. I'm sure he was not aware of the ongoing bytes-compat
> work. It's a near-miss, unfortunately, as he connected on-and-off on the
> IRC channel around that time (but not during bytes-compat discussions), and
> Thomas Gazagnaire had a patch in ocamlfind on May 5 as well.
>

A long time ago, we had caml-list and Mantis. Now, to follow such
discussions, we have to be on IRC, read many mailing-lists (but for
example, discussions on opam for Windows did not even happen on
wg-windows), follow Github PRs on OCaml and opam-repository projects...
Maybe we should stop using so many communication channels, and just use the
caml-list for such large audience discussions ?

--Fabrice
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20160627/267c1a31/attachment-0001.html>

From gabriel.scherer at gmail.com  Wed Jun 29 17:40:56 2016
From: gabriel.scherer at gmail.com (Gabriel Scherer)
Date: Wed, 29 Jun 2016 12:40:56 -0400
Subject: [ocaml-platform] Is it taking too long for OCaml software to become
 4.03-compatible? Would release process changes help?
Message-ID: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>

Dear platform,

TL;DR: I propose that we change the OCaml release process to remain in
"beta" stage while there remain OPAM packages that are broken by the new
releases and their version bounds have not been updated.

I'm a bit frustrated with the time it takes for the OCaml ecosystem to
catch up with the 4.03 release -- which has been released two months ago
now, on April 25.

A large chunk of my personal hacking time following the release was spent
on updating Batteries, with a 4.03-compatible release happening on May 12,
so two weeks after the release -- a time I would still consider too long
for our downstream users waiting to try the 4.03 goodness but held back by
a Batteries dependency. I recently helped make atdgen compatible with 4.03
(it's a dependency of IOCaml for example), and just today found out that
Coq releases (or its CoqIDE part) did not work on 4.03 (with no upper-bound
in opam, it would just miscompile).

I find it frustrating because that means that there is a large time window
where we advertise (externally, to beginners, etc.) that the best OCaml
versions ever is 4.03.0, while running opam from this switch to install any
major software whatsoever feels like playing a rigged russian roulette. I
feel bad whenever I'm informed that my software (or anyone else's, in fact)
does not work by end-users that would rather have spent their day doing
something else than trying broken software.

Do you agree that this is a problem? What could we do to fix that?

When I started writing this email I intended to send it to Damien Doligez,
as the release manager of the compiler distribution, with the following
suggestion: maybe we could have a *much longer* beta-testing period for
OCaml versions that would be used not (only) for finding bugs in the new
version, but also to let important pieces of the ecosystem update to the
new version. Say, at least a month. We could have a fixed set of software
that we monitor, or in fact all of what's in OPAM, and delay the release
until they get updated/fixed or their OPAM version bounds get fixed. (Aha,
a Platform indeed!)

Does that sound like a reasonable idea to you? Should we monitor all OPAM,
or only a subset?

This suggestion is rooted in the idea that when we announce the release to
our end-users, stuff should just work -- or refuse to install itself. Maybe
this is an old idea of the SVN times and we're now in the era of
continuously-released, always-broken stuff?

Finally, there has been all this work on the "OPAM weather services",
continuous build of opam packages etc., plus the work that Damien is doing
around release time. It doesn't seem to have worked very well for 4.03. Who
is monitoring this stuff? Do we need to fix them to make them work better,
or to fix our process to use them better? To be honest, I'm never looking
at these services -- I just don't think of using them. Can I get an email
whenever they detect that my stuff is broken? Say I'm a new package
manager, are there guidelines somewhere on what the best practices are and
what I should do?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20160629/254d9258/attachment.html>

From simon.cruanes.2007 at m4x.org  Wed Jun 29 18:14:33 2016
From: simon.cruanes.2007 at m4x.org (Simon Cruanes)
Date: Wed, 29 Jun 2016 19:14:33 +0200
Subject: [ocaml-platform] Is it taking too long for OCaml software to
 become 4.03-compatible? Would release process changes help?
In-Reply-To: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
References: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
Message-ID: <20160629171432.GB3637@nunchakus.loria.fr>

Le Wed, 29 Jun 2016, Gabriel Scherer a ?crit :
> I'm a bit frustrated with the time it takes for the OCaml ecosystem to
> catch up with the 4.03 release -- which has been released two months ago
> now, on April 25.
> 
>  ...
> 
> Do you agree that this is a problem? What could we do to fix that?

I agree, I wanted to update my packages after the release and had to
wait for oasis to work on 4.03; some other dependencies of projects of
mine also took some time. Even now, I just stumbled upon Coq 8.5 not
compiling, so I'd say the problem is real.
> 
> When I started writing this email I intended to send it to Damien Doligez,
> as the release manager of the compiler distribution, with the following
> suggestion: maybe we could have a *much longer* beta-testing period for
> OCaml versions that would be used not (only) for finding bugs in the new
> version, but also to let important pieces of the ecosystem update to the
> new version. Say, at least a month. We could have a fixed set of software
> that we monitor, or in fact all of what's in OPAM, and delay the release
> until they get updated/fixed or their OPAM version bounds get fixed. (Aha,
> a Platform indeed!)

As usual, the issue is: what set of packages is monitored, and who
chooses?

> Does that sound like a reasonable idea to you? Should we monitor all OPAM,
> or only a subset?

I think OWS should be used to see which packages are broken on the new
release, indeed. I would propose the following workflow:

- the beta-testing period, feature-frozen, starts (for some time)
- shortly, maintainers whose package doesn't compile (we know thanks to
  OWS) are emailed to be informed of the problem
- if, at the end of the beta-testing period (just before the release) a
  package that used to build on the previous release, but does not build
  anymore, is modified by opam-repo maintainers so it gets an upper
  bound on the OCaml version.

This means that, if no action is taken, a
package that does not build on 4.04 would have "ocaml-version < 4.04".
New releases of this package, that hopefully fix the build on 4.04,
would lift this barrier. It would also prevent opam from falling back
to old, incompatible versions of a package in case of conflict with
some other library.

New packages are checked for build on most versions of OCaml; I think
old packages should also be checked for compatibility with newer
versions of OCaml so that the appropriate bound check is added. I don't
add those bounds myself on my own packages (too tedious to do it on 15
old releases), so it should probably be automated.

Cheers!

-- 
Simon Cruanes

http://weusepgp.info/
key 49AA62B6, fingerprint 949F EB87 8F06 59C6 D7D3  7D8D 4AC0 1D08 49AA 62B6
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 819 bytes
Desc: not available
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20160629/19d95de0/attachment.sig>

From thomas at gazagnaire.org  Wed Jun 29 18:28:44 2016
From: thomas at gazagnaire.org (Thomas Gazagnaire)
Date: Wed, 29 Jun 2016 18:28:44 +0100
Subject: [ocaml-platform] Is it taking too long for OCaml software to
	become 4.03-compatible? Would release process changes help?
In-Reply-To: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
References: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
Message-ID: <1846BC6E-3BC4-4E6B-B876-E394AC4A80F6@gazagnaire.org>

The main issue with 4.03 is that killing camlp4 took a bit longer than expected. Things starts to stabilise now that all the ppx infrastructure is in place, much more used than before, and than maintainers did the ppx bump (that at least the case for most of the mirage breakage on 4.03).

The jump from 4.01 to 4.02 was much easier in comparison. I think that?s instability is a one-off. It could make sense to define a set of packages and check that they compile fine before tagging 4.04 though.

> Finally, there has been all this work on the "OPAM weather services", continuous build of opam packages etc., plus the work that Damien is doing around release time. It doesn't seem to have worked very well for 4.03. Who is monitoring this stuff? Do we need to fix them to make them work better, or to fix our process to use them better? To be honest, I'm never looking at these services -- I just don't think of using them. Can I get an email whenever they detect that my stuff is broken? Say I'm a new package manager, are there guidelines somewhere on what the best practices are and what I should do?

OPAM weather service will not help you very much here as it doesn?t try to build packages. 

Best,
Thomas


From martin at mjambon.com  Wed Jun 29 19:09:16 2016
From: martin at mjambon.com (Martin Jambon)
Date: Wed, 29 Jun 2016 11:09:16 -0700
Subject: [ocaml-platform] Is it taking too long for OCaml software to
 become 4.03-compatible? Would release process changes help?
In-Reply-To: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
References: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
Message-ID: <57740ECC.5050100@mjambon.com>

First, thank you Gabriel, Damien, and others who've been working hard on 
improving package quality with each new release of OCaml.

I have the chance to be most of the time a passive user of OCaml, i.e. 
we develop a commercial application, and we typically upgrade OCaml only 
when it becomes necessary. Also it's normally not a problem for us to 
wait for 6 months to a year to upgrade. We have really no complaints 
there. I feel however that it's a missed opportunity to contribute back 
to the community. We generally don't mind bugs in features that we start 
using, but we're really afraid of regression. So it would be good for us 
to confidently upgrade OCaml as soon as we know it's unlikely to break 
our application, but not delay the upgrade out of fear.

I'm also involved in maintaining a small number of public tools because 
I started them. Bugs due to incompatibilities with newer versions of 
OCaml have been reported and sometimes fixed by others, and while this 
is great, I'd rather (1) not have these bugs in the first place and (2) 
fix the bugs before they start affecting users. I must say I really lack 
the motivation for such maintenance, compared to developing a new 
feature that I need.

What could be useful is a few user-visible stats on what's installable 
and what's usable in opam, for a given OCaml version. It's the same idea 
as labeling an OCaml/opam distribution as beta, but finer-grained. Each 
package known to have version-specific problems would be labeled as 
such. A package could be in one of a few states such as: OK, Usable but 
has some version-specific bugs, Uninstallable. For the opam user 
wondering whether they should upgrade OCaml, it would be useful to get 
the percentage of packages in each state for a given OCaml version, as 
well as the list of packages in each state and links to the relevant bug 
reports. Hopefully this would help users be more adventurous and make 
informed decisions on whether to upgrade.

On 06/29/2016 09:40 AM, Gabriel Scherer wrote:
> Dear platform,
>
> TL;DR: I propose that we change the OCaml release process to remain in
> "beta" stage while there remain OPAM packages that are broken by the new
> releases and their version bounds have not been updated.
>
> I'm a bit frustrated with the time it takes for the OCaml ecosystem to
> catch up with the 4.03 release -- which has been released two months ago
> now, on April 25.
>
> A large chunk of my personal hacking time following the release was
> spent on updating Batteries, with a 4.03-compatible release happening on
> May 12, so two weeks after the release -- a time I would still consider
> too long for our downstream users waiting to try the 4.03 goodness but
> held back by a Batteries dependency. I recently helped make atdgen
> compatible with 4.03 (it's a dependency of IOCaml for example), and just
> today found out that Coq releases (or its CoqIDE part) did not work on
> 4.03 (with no upper-bound in opam, it would just miscompile).
>
> I find it frustrating because that means that there is a large time
> window where we advertise (externally, to beginners, etc.) that the best
> OCaml versions ever is 4.03.0, while running opam from this switch to
> install any major software whatsoever feels like playing a rigged
> russian roulette. I feel bad whenever I'm informed that my software (or
> anyone else's, in fact) does not work by end-users that would rather
> have spent their day doing something else than trying broken software.
>
> Do you agree that this is a problem? What could we do to fix that?
>
> When I started writing this email I intended to send it to Damien
> Doligez, as the release manager of the compiler distribution, with the
> following suggestion: maybe we could have a *much longer* beta-testing
> period for OCaml versions that would be used not (only) for finding bugs
> in the new version, but also to let important pieces of the ecosystem
> update to the new version. Say, at least a month. We could have a fixed
> set of software that we monitor, or in fact all of what's in OPAM, and
> delay the release until they get updated/fixed or their OPAM version
> bounds get fixed. (Aha, a Platform indeed!)
>
> Does that sound like a reasonable idea to you? Should we monitor all
> OPAM, or only a subset?
>
> This suggestion is rooted in the idea that when we announce the release
> to our end-users, stuff should just work -- or refuse to install itself.
> Maybe this is an old idea of the SVN times and we're now in the era of
> continuously-released, always-broken stuff?
>
> Finally, there has been all this work on the "OPAM weather services",
> continuous build of opam packages etc., plus the work that Damien is
> doing around release time. It doesn't seem to have worked very well for
> 4.03. Who is monitoring this stuff? Do we need to fix them to make them
> work better, or to fix our process to use them better? To be honest, I'm
> never looking at these services -- I just don't think of using them. Can
> I get an email whenever they detect that my stuff is broken? Say I'm a
> new package manager, are there guidelines somewhere on what the best
> practices are and what I should do?
>
>
>
>
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform
>

From gabriel.scherer at gmail.com  Wed Jun 29 20:39:06 2016
From: gabriel.scherer at gmail.com (Gabriel Scherer)
Date: Wed, 29 Jun 2016 15:39:06 -0400
Subject: [ocaml-platform] Is it taking too long for OCaml software to
 become 4.03-compatible? Would release process changes help?
In-Reply-To: <57740ECC.5050100@mjambon.com>
References: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
 <57740ECC.5050100@mjambon.com>
Message-ID: <CAPFanBEkx3pwaWVC7-4tDZUZ2Gc5qWPWA=pgSumVudrqj1B7Rg@mail.gmail.com>

TL;DR:
1. We need to have a "test:" field in OPAM metadata and get packages to use
it.
2. We should do a weekly build of OPAM using the ocaml *trunk* version, to
help find and fix (with the cooperation of compiler developers upstream)
issues before the actual release.
3. If such a weekly build is effective, the policy of "stay in beta as long
as allegedly-installable OPAM packages fail to build on the new release"
would be much easier to accept. We could target *all* opam-repository
packages instead of any subset, and it could take less than a month -- say
two weeks.
4. It would be nice to have an automated tool to add a given version bound
on a set of opam files. (And that is easy to implement.)


Simon Cruanes wrote:

> As usual, the issue is: what set of packages is monitored, and who
> chooses?


In this case there is a canonical answer: all of them (on the
public/central OPAM repository).

Note that OWS only tests installability from metadata, which is a useful
metric, but doesn't help when the metadata is wrong and build actually
fails. Damien has a script to compile all of OPAM that could give
buildability result.

Which gets us to the next point: we really should use a "test:" field in
opam metadata and use that. In the atdgen case for example, the software
would compile fine, but it would segfault at usage -- already in the
testsuite. I think that introducing such a "test:" field should be among
our priorities to improve the quality of the OPAM repository.

I agree with the workflow you propose, as long as the beta-testing period
is long enough -- I suggested "one month" and I think it's a good proposal.
Because we could do this with the one-week-long beta period we had in 4.03,
and it would amount to just adding an upper bound on all software, and that
would better for users but only marginally so -- they don't get a crippled
opam-repository, they get a crippled release with no installable software.

In fact I think we should go further and try to make all of OPAM work with
trunk OCaml versions. We could have a weekly build of all-opam from trunk
and collectively fix the issues. This would help ocaml-trunk development
(being able to compile software to test trunk changes is one pain point
right now), and this would help have working software by the release time
-- maybe we wouldn't even need such a long beta period if we did this
effectively.

I don't add upper bounds myself on my own packages (too tedious to do it on
> 15 old releases), so it should probably be automated.
>

I agree; this should be very easy to do using existing opam scripting
capabilities. Any volunteers?

Thomas Gazagnaire wrote:

> The main issue with 4.03 is that killing camlp4 took a bit longer than
> expected. [...] The jump from 4.01 to 4.02 was much easier in comparison. I
> think that?s instability is a one-off.
>

I don't buy it. I think the rate of OCaml change is accelerating rather
than slowing down. Think of what will happen if we merge some form of
multicore-ocaml in the future; all FFI code will break loose (well maybe
not all, but like Obj.magic in 4.03, enough will).

Martin Jambon:

> Bugs due to incompatibilities with newer versions of OCaml have been
> reported and sometimes fixed by others, and while this is great, I'd rather
> (1) not have these bugs in the first place and (2) fix the bugs before they
> start affecting users. I must say I really lack the motivation for such
> maintenance, compared to developing a new feature that I need.
>

I agree. I think that staring testing packages using trunk rather than
waiting for the release could help with that. First, if the breakage is
under the eyes of the upstream OCaml devs, it may be easier for them to
understand the cause and find the fix -- in my experience helping people
un-break software after a new OCaml version, having a deep knowledge of
said software was rarely necessary, and understanding the compiler was more
useful. Plus it may also encourage people to revert or tame changes that
break user software, reducing the number of changes required of package
maintainers.


On Wed, Jun 29, 2016 at 2:09 PM, Martin Jambon <martin at mjambon.com> wrote:

> First, thank you Gabriel, Damien, and others who've been working hard on
> improving package quality with each new release of OCaml.
>
> I have the chance to be most of the time a passive user of OCaml, i.e. we
> develop a commercial application, and we typically upgrade OCaml only when
> it becomes necessary. Also it's normally not a problem for us to wait for 6
> months to a year to upgrade. We have really no complaints there. I feel
> however that it's a missed opportunity to contribute back to the community.
> We generally don't mind bugs in features that we start using, but we're
> really afraid of regression. So it would be good for us to confidently
> upgrade OCaml as soon as we know it's unlikely to break our application,
> but not delay the upgrade out of fear.
>
> I'm also involved in maintaining a small number of public tools because I
> started them. Bugs due to incompatibilities with newer versions of OCaml
> have been reported and sometimes fixed by others, and while this is great,
> I'd rather (1) not have these bugs in the first place and (2) fix the bugs
> before they start affecting users. I must say I really lack the motivation
> for such maintenance, compared to developing a new feature that I need.
>
> What could be useful is a few user-visible stats on what's installable and
> what's usable in opam, for a given OCaml version. It's the same idea as
> labeling an OCaml/opam distribution as beta, but finer-grained. Each
> package known to have version-specific problems would be labeled as such. A
> package could be in one of a few states such as: OK, Usable but has some
> version-specific bugs, Uninstallable. For the opam user wondering whether
> they should upgrade OCaml, it would be useful to get the percentage of
> packages in each state for a given OCaml version, as well as the list of
> packages in each state and links to the relevant bug reports. Hopefully
> this would help users be more adventurous and make informed decisions on
> whether to upgrade.
>
>
> On 06/29/2016 09:40 AM, Gabriel Scherer wrote:
>
>> Dear platform,
>>
>> TL;DR: I propose that we change the OCaml release process to remain in
>> "beta" stage while there remain OPAM packages that are broken by the new
>> releases and their version bounds have not been updated.
>>
>> I'm a bit frustrated with the time it takes for the OCaml ecosystem to
>> catch up with the 4.03 release -- which has been released two months ago
>> now, on April 25.
>>
>> A large chunk of my personal hacking time following the release was
>> spent on updating Batteries, with a 4.03-compatible release happening on
>> May 12, so two weeks after the release -- a time I would still consider
>> too long for our downstream users waiting to try the 4.03 goodness but
>> held back by a Batteries dependency. I recently helped make atdgen
>> compatible with 4.03 (it's a dependency of IOCaml for example), and just
>> today found out that Coq releases (or its CoqIDE part) did not work on
>> 4.03 (with no upper-bound in opam, it would just miscompile).
>>
>> I find it frustrating because that means that there is a large time
>> window where we advertise (externally, to beginners, etc.) that the best
>> OCaml versions ever is 4.03.0, while running opam from this switch to
>> install any major software whatsoever feels like playing a rigged
>> russian roulette. I feel bad whenever I'm informed that my software (or
>> anyone else's, in fact) does not work by end-users that would rather
>> have spent their day doing something else than trying broken software.
>>
>> Do you agree that this is a problem? What could we do to fix that?
>>
>> When I started writing this email I intended to send it to Damien
>> Doligez, as the release manager of the compiler distribution, with the
>> following suggestion: maybe we could have a *much longer* beta-testing
>> period for OCaml versions that would be used not (only) for finding bugs
>> in the new version, but also to let important pieces of the ecosystem
>> update to the new version. Say, at least a month. We could have a fixed
>> set of software that we monitor, or in fact all of what's in OPAM, and
>> delay the release until they get updated/fixed or their OPAM version
>> bounds get fixed. (Aha, a Platform indeed!)
>>
>> Does that sound like a reasonable idea to you? Should we monitor all
>> OPAM, or only a subset?
>>
>> This suggestion is rooted in the idea that when we announce the release
>> to our end-users, stuff should just work -- or refuse to install itself.
>> Maybe this is an old idea of the SVN times and we're now in the era of
>> continuously-released, always-broken stuff?
>>
>> Finally, there has been all this work on the "OPAM weather services",
>> continuous build of opam packages etc., plus the work that Damien is
>> doing around release time. It doesn't seem to have worked very well for
>> 4.03. Who is monitoring this stuff? Do we need to fix them to make them
>> work better, or to fix our process to use them better? To be honest, I'm
>> never looking at these services -- I just don't think of using them. Can
>> I get an email whenever they detect that my stuff is broken? Say I'm a
>> new package manager, are there guidelines somewhere on what the best
>> practices are and what I should do?
>>
>>
>>
>>
>> _______________________________________________
>> Platform mailing list
>> Platform at lists.ocaml.org
>> http://lists.ocaml.org/listinfo/platform
>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20160629/40de50a6/attachment.html>

From daniel.buenzli at erratique.ch  Wed Jun 29 21:21:03 2016
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Wed, 29 Jun 2016 21:21:03 +0100
Subject: [ocaml-platform] Is it taking too long for OCaml software to
 become 4.03-compatible? Would release process changes help?
In-Reply-To: <CAPFanBEkx3pwaWVC7-4tDZUZ2Gc5qWPWA=pgSumVudrqj1B7Rg@mail.gmail.com>
References: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
 <57740ECC.5050100@mjambon.com>
 <CAPFanBEkx3pwaWVC7-4tDZUZ2Gc5qWPWA=pgSumVudrqj1B7Rg@mail.gmail.com>
Message-ID: <8289D43DEA5E49C9B22CAE72BCCF1ED0@erratique.ch>

Le mercredi, 29 juin 2016 ? 20:39, Gabriel Scherer a ?crit :
> TL;DR:
> 1. We need to have a "test:" field in OPAM metadata and get packages to use it.

This already exists. But in a broken form in my opinion; see build-test: field. I hope OPAM v2 will propose something better (simply build: and test:), I talked with Louis about this.

However note that most failures are build failures anyways ? notably because a lot of the packages are affected, sometimes without knowing (rec deps) ? by the pre-processing cancer that `ppx` and `camlp4` are.  

Also one other thing to note is that people stupidly have -warn-error activated in their tarballs. It should be communicated more effectively that this should absolutely not be done as it is difficult to check this by the OPAM repository maintainers.

> 3. If such a weekly build is effective, the policy of "stay in beta as long as allegedly-installable OPAM packages fail to build on the new release" would be much easier to accept.
I don't think that's reasonable. The responsability here is the one of the package developers ? refrain from using hacks that are not able to pass a major version of the OCaml compiler ? and the package maintainers (often the same person) who need to actually test and fix the packages they maintain once an OCaml beta is out; this should be especially true for people who distribute cancer inducing substances (but yes it's nice if we can be notified automatically). I don't think that irresponsible people should be allowed to hold the whole eco-system back because of their behaviour.

FWIW AFAIK none of ~20 packages I maintain needed any kind of fixing for 4.03.

Best,  

Daniel

From gabriel.scherer at gmail.com  Wed Jun 29 21:30:59 2016
From: gabriel.scherer at gmail.com (Gabriel Scherer)
Date: Wed, 29 Jun 2016 16:30:59 -0400
Subject: [ocaml-platform] Is it taking too long for OCaml software to
 become 4.03-compatible? Would release process changes help?
In-Reply-To: <8289D43DEA5E49C9B22CAE72BCCF1ED0@erratique.ch>
References: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
 <57740ECC.5050100@mjambon.com>
 <CAPFanBEkx3pwaWVC7-4tDZUZ2Gc5qWPWA=pgSumVudrqj1B7Rg@mail.gmail.com>
 <8289D43DEA5E49C9B22CAE72BCCF1ED0@erratique.ch>
Message-ID: <CAPFanBG+O_q1yRjz6X_bbyPPLYQj9kxKaAtvSsSwnEaf+V=kNA@mail.gmail.com>

>
> I don't think that irresponsible people should be allowed to hold the
> whole eco-system back because of their behaviour.
>

If it seems to costly to fix a given package, we can always add an upper
bound and declare it done. My condition was that no package that pretends
to be installable should fail to build, not that all packages must be fixed.

Note that I would disapprove of "let's just automatically add an upper
bound on everything that fails at beta time" as a process to meet this
requirement. I would like this to be a human decision, to make sure that we
actually consider fixing them before making them uninstallable.

If specific software is found to be too fragile/unreliable to resist to
OCaml version changes (this arguably is the case of Batteries by design as
its testsuite breaks when the stdlib is extended and Batteries isn't to
match it up), we can decide to always add pessimistic upper bounds on its
packaged versions (Batteries, camlp5 do that). Then it's up to its
maintainers and users to relax the bounds after someone manually checked
that the package works correctly.


On Wed, Jun 29, 2016 at 4:21 PM, Daniel B?nzli <daniel.buenzli at erratique.ch>
wrote:

> Le mercredi, 29 juin 2016 ? 20:39, Gabriel Scherer a ?crit :
> > TL;DR:
> > 1. We need to have a "test:" field in OPAM metadata and get packages to
> use it.
>
> This already exists. But in a broken form in my opinion; see build-test:
> field. I hope OPAM v2 will propose something better (simply build: and
> test:), I talked with Louis about this.
>
> However note that most failures are build failures anyways ? notably
> because a lot of the packages are affected, sometimes without knowing (rec
> deps) ? by the pre-processing cancer that `ppx` and `camlp4` are.
>
> Also one other thing to note is that people stupidly have -warn-error
> activated in their tarballs. It should be communicated more effectively
> that this should absolutely not be done as it is difficult to check this by
> the OPAM repository maintainers.
>
> > 3. If such a weekly build is effective, the policy of "stay in beta as
> long as allegedly-installable OPAM packages fail to build on the new
> release" would be much easier to accept.
> I don't think that's reasonable. The responsability here is the one of the
> package developers ? refrain from using hacks that are not able to pass a
> major version of the OCaml compiler ? and the package maintainers (often
> the same person) who need to actually test and fix the packages they
> maintain once an OCaml beta is out; this should be especially true for
> people who distribute cancer inducing substances (but yes it's nice if we
> can be notified automatically). I don't think that irresponsible people
> should be allowed to hold the whole eco-system back because of their
> behaviour.
>
> FWIW AFAIK none of ~20 packages I maintain needed any kind of fixing for
> 4.03.
>
> Best,
>
> Daniel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20160629/3eece9fe/attachment-0001.html>

From daniel.buenzli at erratique.ch  Wed Jun 29 21:42:29 2016
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Wed, 29 Jun 2016 21:42:29 +0100
Subject: [ocaml-platform] Is it taking too long for OCaml software to
 become 4.03-compatible? Would release process changes help?
In-Reply-To: <CAPFanBG+O_q1yRjz6X_bbyPPLYQj9kxKaAtvSsSwnEaf+V=kNA@mail.gmail.com>
References: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
 <57740ECC.5050100@mjambon.com>
 <CAPFanBEkx3pwaWVC7-4tDZUZ2Gc5qWPWA=pgSumVudrqj1B7Rg@mail.gmail.com>
 <8289D43DEA5E49C9B22CAE72BCCF1ED0@erratique.ch>
 <CAPFanBG+O_q1yRjz6X_bbyPPLYQj9kxKaAtvSsSwnEaf+V=kNA@mail.gmail.com>
Message-ID: <E197CFFD9D8A4E6F9640648620F9E973@erratique.ch>

Le mercredi, 29 juin 2016 ? 21:30, Gabriel Scherer a ?crit :
> If specific software is found to be too fragile/unreliable to resist to OCaml version changes (this arguably is the case of Batteries by design as its testsuite breaks when the stdlib is extended and Batteries isn't to match it up), we can decide to always add pessimistic upper bounds on its packaged versions (Batteries, camlp5 do that).  

This should not be done as it makes it needlessly difficult for compiler and runtime system developers/researchers to test their experimental changes on large real-world subsets of the ocaml repo. (This is also the reason why I'm pushing to have actually working byte-code only switches).  

Daniel



From yminsky at gmail.com  Thu Jun 30 01:24:13 2016
From: yminsky at gmail.com (Yaron Minsky)
Date: Thu, 30 Jun 2016 00:24:13 +0000
Subject: [ocaml-platform] Is it taking too long for OCaml software to
 become 4.03-compatible? Would release process changes help?
In-Reply-To: <E197CFFD9D8A4E6F9640648620F9E973@erratique.ch>
References: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
 <57740ECC.5050100@mjambon.com>
 <CAPFanBEkx3pwaWVC7-4tDZUZ2Gc5qWPWA=pgSumVudrqj1B7Rg@mail.gmail.com>
 <8289D43DEA5E49C9B22CAE72BCCF1ED0@erratique.ch>
 <CAPFanBG+O_q1yRjz6X_bbyPPLYQj9kxKaAtvSsSwnEaf+V=kNA@mail.gmail.com>
 <E197CFFD9D8A4E6F9640648620F9E973@erratique.ch>
Message-ID: <CADKNfh+=WzfmhiOON-hDY2T8G9j77Pf7oSeSzNStmdz6oPWmvg@mail.gmail.com>

I do think that PPX rewriters are going to be an ongoing difficulty with
keeping OPAM building with trunk.  That's because changes to OCaml's AST
often break rewriters in a way that isn't always trivial to fix. For 4.03,
there was a fair amount of pain for us in providing versions of the PPX
rewriters that worked for both 4.03 and 4.02.

We've contemplated writing a layer that would allow most PPX rewriters to
be written against a stable API that could work across OCaml versions, but
it's real effort.

4.03 has been a bit of a long haul for us internally too --- we're hoping
to release it finally tomorrow morning! I'm hoping that the new 6-month
release cycle will help make releases smaller, and therefore easier to keep
up with.  Maybe as OCaml's evolution accelerates, we can make the cycle
faster (though it's hard to imagine having releases more than quarterly
makes any sense.)  This would presumably require more and better automation
to really be tenable.

y

On Wed, Jun 29, 2016 at 4:42 PM Daniel B?nzli <daniel.buenzli at erratique.ch>
wrote:

> Le mercredi, 29 juin 2016 ? 21:30, Gabriel Scherer a ?crit :
> > If specific software is found to be too fragile/unreliable to resist to
> OCaml version changes (this arguably is the case of Batteries by design as
> its testsuite breaks when the stdlib is extended and Batteries isn't to
> match it up), we can decide to always add pessimistic upper bounds on its
> packaged versions (Batteries, camlp5 do that).
>
> This should not be done as it makes it needlessly difficult for compiler
> and runtime system developers/researchers to test their experimental
> changes on large real-world subsets of the ocaml repo. (This is also the
> reason why I'm pushing to have actually working byte-code only switches).
>
> Daniel
>
>
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20160630/a3081517/attachment.html>

From alain at frisch.fr  Thu Jun 30 02:56:27 2016
From: alain at frisch.fr (Alain Frisch)
Date: Thu, 30 Jun 2016 03:56:27 +0200
Subject: [ocaml-platform] Is it taking too long for OCaml software to
 become 4.03-compatible? Would release process changes help?
In-Reply-To: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
References: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
Message-ID: <b5954fca-8018-4266-dff1-20240f18b77c@frisch.fr>

OCamlPro's opam builder ( 
http://opam.ocamlpro.com/builder/html/report-last.html ) really needs to 
be more advertised and its UI a bit polished to encourage people to 
actually look at it.  Also a report per maintainer (with emails sent 
automatically?) could be useful.

The release cycle is certainly important for this matter, and I hope the 
new policy (smaller and more regular releases) will help significantly. 
Simply announcing the next release date (ans sticking to it) sends a 
signal to package authors about when they should start checking their 
code works with trunk.  Of course, smaller releases also make it simpler 
to update the code and less risky to upgrade to for larger organization 
(and thus packages maintained by them are more likely to be fixed 
quickly). Hopefully the 4.03 experience was a bit exceptional (increased 
development pace, very long release, moving release date, breaking 
changes in the last months).

There is certainly things to learn and do to minimize the breakage of 
ppx and their consequences.  Introducing abstraction/compatibility 
layers should help (either things such as Ast_convenience.Constant in 
ppx_tools, or more ambitious stable APIs over the Parsetree).

It would also be interesting to understand in more details the reasons 
of the breakages for so many packages in 4.03.  It'd be a tedious work 
to collect this information, but it will probably guide both core 
maintainers and the community on how to improve the process.  There are 
two really important pieces of information:  which changes in OCaml 
cause the more breakage, and which broken packages cause the more 
transitive breakage.

I've to say that I'm also a bit scared by the inflation of dependencies 
across packages, including for relatively core packages that could 
themselves potentially block many others.  It's not because OPAM makes 
it easy to depend on external packages that it's always a good idea to 
do so.  As an example, see 
https://github.com/ocsigen/js_of_ocaml/blob/master/opam, and this does 
not account for transitive dependencies, which include e.g. oasis (whose 
own dependencies are themselves a bit scary).  More atomic packages 
could help in some respect (e.g. a package with only the js_of_ocaml 
compiler, with precompiled menhir parsers, could only depnd on cmdliner, 
I guess).  Same for ocamlnet (which is still not available for 4.03, and 
probably causing some further breakages;  if it were split into smaller 
packages, at least some of them should work on 4.03 already).



Alain


On 29/06/2016 18:40, Gabriel Scherer wrote:
> Dear platform,
>
> TL;DR: I propose that we change the OCaml release process to remain in
> "beta" stage while there remain OPAM packages that are broken by the new
> releases and their version bounds have not been updated.
>
> I'm a bit frustrated with the time it takes for the OCaml ecosystem to
> catch up with the 4.03 release -- which has been released two months ago
> now, on April 25.
>
> A large chunk of my personal hacking time following the release was
> spent on updating Batteries, with a 4.03-compatible release happening on
> May 12, so two weeks after the release -- a time I would still consider
> too long for our downstream users waiting to try the 4.03 goodness but
> held back by a Batteries dependency. I recently helped make atdgen
> compatible with 4.03 (it's a dependency of IOCaml for example), and just
> today found out that Coq releases (or its CoqIDE part) did not work on
> 4.03 (with no upper-bound in opam, it would just miscompile).
>
> I find it frustrating because that means that there is a large time
> window where we advertise (externally, to beginners, etc.) that the best
> OCaml versions ever is 4.03.0, while running opam from this switch to
> install any major software whatsoever feels like playing a rigged
> russian roulette. I feel bad whenever I'm informed that my software (or
> anyone else's, in fact) does not work by end-users that would rather
> have spent their day doing something else than trying broken software.
>
> Do you agree that this is a problem? What could we do to fix that?
>
> When I started writing this email I intended to send it to Damien
> Doligez, as the release manager of the compiler distribution, with the
> following suggestion: maybe we could have a *much longer* beta-testing
> period for OCaml versions that would be used not (only) for finding bugs
> in the new version, but also to let important pieces of the ecosystem
> update to the new version. Say, at least a month. We could have a fixed
> set of software that we monitor, or in fact all of what's in OPAM, and
> delay the release until they get updated/fixed or their OPAM version
> bounds get fixed. (Aha, a Platform indeed!)
>
> Does that sound like a reasonable idea to you? Should we monitor all
> OPAM, or only a subset?
>
> This suggestion is rooted in the idea that when we announce the release
> to our end-users, stuff should just work -- or refuse to install itself.
> Maybe this is an old idea of the SVN times and we're now in the era of
> continuously-released, always-broken stuff?
>
> Finally, there has been all this work on the "OPAM weather services",
> continuous build of opam packages etc., plus the work that Damien is
> doing around release time. It doesn't seem to have worked very well for
> 4.03. Who is monitoring this stuff? Do we need to fix them to make them
> work better, or to fix our process to use them better? To be honest, I'm
> never looking at these services -- I just don't think of using them. Can
> I get an email whenever they detect that my stuff is broken? Say I'm a
> new package manager, are there guidelines somewhere on what the best
> practices are and what I should do?
>
>
>
>
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform
>

From sylvain+ocaml at le-gall.net  Thu Jun 30 07:36:35 2016
From: sylvain+ocaml at le-gall.net (Sylvain Le Gall)
Date: Thu, 30 Jun 2016 06:36:35 +0000
Subject: [ocaml-platform] Is it taking too long for OCaml software to
 become 4.03-compatible? Would release process changes help?
In-Reply-To: <20160629171432.GB3637@nunchakus.loria.fr>
References: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
 <20160629171432.GB3637@nunchakus.loria.fr>
Message-ID: <CAOCAUGP9s46DTU8Nu-+xgL25YteEOJC6XQiou9RFs6VdVf4qQQ@mail.gmail.com>

Le mer. 29 juin 2016 ? 19:14, Simon Cruanes <simon.cruanes.2007 at m4x.org> a
?crit :

> Le Wed, 29 Jun 2016, Gabriel Scherer a ?crit :
> > I'm a bit frustrated with the time it takes for the OCaml ecosystem to
> > catch up with the 4.03 release -- which has been released two months ago
> > now, on April 25.
> >
> >  ...
> >
> > Do you agree that this is a problem? What could we do to fix that?
>
> I agree, I wanted to update my packages after the release and had to
> wait for oasis to work on 4.03; some other dependencies of projects of
> mine also took some time. Even now, I just stumbled upon Coq 8.5 not
> compiling, so I'd say the problem is real.
>

Just to be fair to the OASIS release cycle:
- OCaml 4.03 was released 2016-04-26
- OASIS 0.4.6 for OCaml 4.03 was released 2016-04-29

This is only 3 days and this was mainly due to a transitive dependency on
Batteries for the tests. Considering OSS standards, this is not a long time
for a fix.


> >
> > When I started writing this email I intended to send it to Damien
> Doligez,
> > as the release manager of the compiler distribution, with the following
> > suggestion: maybe we could have a *much longer* beta-testing period for
> > OCaml versions that would be used not (only) for finding bugs in the new
> > version, but also to let important pieces of the ecosystem update to the
> > new version. Say, at least a month. We could have a fixed set of software
> > that we monitor, or in fact all of what's in OPAM, and delay the release
> > until they get updated/fixed or their OPAM version bounds get fixed.
> (Aha,
> > a Platform indeed!)
>
> As usual, the issue is: what set of packages is monitored, and who
> chooses?
>
> > Does that sound like a reasonable idea to you? Should we monitor all
> OPAM,
> > or only a subset?
>
> I think OWS should be used to see which packages are broken on the new
> release, indeed. I would propose the following workflow:
>
> - the beta-testing period, feature-frozen, starts (for some time)
> - shortly, maintainers whose package doesn't compile (we know thanks to
>   OWS) are emailed to be informed of the problem
> - if, at the end of the beta-testing period (just before the release) a
>   package that used to build on the previous release, but does not build
>   anymore, is modified by opam-repo maintainers so it gets an upper
>   bound on the OCaml version.
>
> This means that, if no action is taken, a
> package that does not build on 4.04 would have "ocaml-version < 4.04".
> New releases of this package, that hopefully fix the build on 4.04,
> would lift this barrier. It would also prevent opam from falling back
> to old, incompatible versions of a package in case of conflict with
> some other library.
>
> New packages are checked for build on most versions of OCaml; I think
> old packages should also be checked for compatibility with newer
> versions of OCaml so that the appropriate bound check is added. I don't
> add those bounds myself on my own packages (too tedious to do it on 15
> old releases), so it should probably be automated.
>
> Cheers!
>
> --
> Simon Cruanes
>
> http://weusepgp.info/
> key 49AA62B6, fingerprint 949F EB87 8F06 59C6 D7D3  7D8D 4AC0 1D08 49AA
> 62B6
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20160630/a399be44/attachment-0001.html>

From sylvain+ocaml at le-gall.net  Thu Jun 30 07:43:43 2016
From: sylvain+ocaml at le-gall.net (Sylvain Le Gall)
Date: Thu, 30 Jun 2016 06:43:43 +0000
Subject: [ocaml-platform] Is it taking too long for OCaml software to
 become 4.03-compatible? Would release process changes help?
In-Reply-To: <b5954fca-8018-4266-dff1-20240f18b77c@frisch.fr>
References: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
 <b5954fca-8018-4266-dff1-20240f18b77c@frisch.fr>
Message-ID: <CAOCAUGOs8FYS39+-yZJZfKr-nQRRp-3nEK+PZmdSWohejHyjnQ@mail.gmail.com>

Le jeu. 30 juin 2016 ? 03:56, Alain Frisch <alain at frisch.fr> a ?crit :

> I've to say that I'm also a bit scared by the inflation of dependencies
> across packages, including for relatively core packages that could
> themselves potentially block many others.  It's not because OPAM makes
> it easy to depend on external packages that it's always a good idea to
> do so.  As an example, see
> https://github.com/ocsigen/js_of_ocaml/blob/master/opam, and this does
> not account for transitive dependencies, which include e.g. oasis (whose
> own dependencies are themselves a bit scary).


OASIS 0.4.7, next version to be released, will kill the scariest
dependencies of all (camlp4 and ocaml-data-notation). Some simple packages
will remain (ocamlify and ocamlmod).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20160630/ecc53bd1/attachment.html>

From alain.frisch at lexifi.com  Thu Jun 30 08:19:18 2016
From: alain.frisch at lexifi.com (Alain Frisch)
Date: Thu, 30 Jun 2016 09:19:18 +0200
Subject: [ocaml-platform] Is it taking too long for OCaml software to
 become 4.03-compatible? Would release process changes help?
In-Reply-To: <b5954fca-8018-4266-dff1-20240f18b77c@frisch.fr>
References: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
 <b5954fca-8018-4266-dff1-20240f18b77c@frisch.fr>
Message-ID: <a5e5283f-7dc2-7917-b4fd-be56987f6c36@lexifi.com>

On 30/06/2016 03:56, Alain Frisch wrote:
> OCamlPro's opam builder (
> http://opam.ocamlpro.com/builder/html/report-last.html ) really needs to
> be more advertised and its UI a bit polished to encourage people to
> actually look at it.  Also a report per maintainer (with emails sent
> automatically?) could be useful.

Here is some wishlist for this tool:

  - Add trunk testing: this is what will put pressure for people to 
continuously upgrade their packages.  Ideally, it would also show the 
(date of the) latest successful build on trunk.  Same for release 
branches once they are forked.

  - Make the grid more narrow to fit more versions on a screen (e.g. 
abbreviate Broken Deps to "Deps") and show more recent versions 
(including trunk) to the left.

  - By default, show only the latest version of each package.

  - Add a mode where packages are grouped by maintainer.

  - Try to make the errors more visible.  E.g. for 
http://opam.ocamlpro.com/builder/html/github/github.1.0.0/3b48ac1bc360931d68afa4e126d96b44, 
the section "=== ERROR while compiling github.1.0.0 ==" could be moved 
to the top of the screen.

   - There could also be heuristics to detect the error and show 
directly in the main report grid the category. For instance, 
http://opam.ocamlpro.com/builder/html/acgtk/acgtk.1.0b/764d15d569e342c5ee761551e398fb38 
is simply about a new warning and "-warn-error A" in the package.

  - It would be useful to force building package even if they claim they 
are not compatible with the latest version (or trunk).  For instance, I 
was curious about why ocamlnet.4.0.4 did not build with 4.03.  (In case 
people wonder, the first problem comes from the new error on multiple 
definitions of exceptions with the same name; this error was introduced 
on trunk in 2014 IIRC.  The fix for ocamlnet is just to remove one line.)


Alain

From Fabrice.Le_fessant at inria.fr  Thu Jun 30 09:57:12 2016
From: Fabrice.Le_fessant at inria.fr (Fabrice Le Fessant)
Date: Thu, 30 Jun 2016 08:57:12 +0000
Subject: [ocaml-platform] Is it taking too long for OCaml software to
 become 4.03-compatible? Would release process changes help?
In-Reply-To: <a5e5283f-7dc2-7917-b4fd-be56987f6c36@lexifi.com>
References: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
 <b5954fca-8018-4266-dff1-20240f18b77c@frisch.fr>
 <a5e5283f-7dc2-7917-b4fd-be56987f6c36@lexifi.com>
Message-ID: <CAHvkLrO5_VxpjG+7AEchun4K1Gdy_RZzqGRbeexNFgUn=Oq+jw@mail.gmail.com>

If you look at the announce of opam-builder, you will notice that it was
monitoring 4.03.0+beta1 from the beginning:
http://lists.ocaml.org/pipermail/opam-devel/2016-March/001412.html

4.03.0+beta2 was monitored too, as soon as it was released.

But indeed, opam-builder's website is far from perfection, it could be
faster to load, send notifications by email, recognize and display error
messages (and much more, as the information sleeping there is huge...). We
will try to improve it when we have time, but for now, it is on our
spare-time list of projects.

I agree with Yaron that PPX are more and more going to become a problem for
upgrading to the latest OCaml, as Camlp4 was before (and is still,
unfortunately). Many packages now depend on ppx-rewriters, that will almost
never be in sync with trunk, which makes testing trunk very hard, even if
we patch OPAM not to use the upper-bounds on ocaml-version in package
descriptions. Soon, OCaml users will probably ask us to merge some
ppx-rewriters in the OCaml distribution to force the sync, as they asked
for Camlp4 long ago.

--Fabrice


On Thu, Jun 30, 2016 at 9:19 AM Alain Frisch <alain.frisch at lexifi.com>
wrote:

> On 30/06/2016 03:56, Alain Frisch wrote:
> > OCamlPro's opam builder (
> > http://opam.ocamlpro.com/builder/html/report-last.html ) really needs to
> > be more advertised and its UI a bit polished to encourage people to
> > actually look at it.  Also a report per maintainer (with emails sent
> > automatically?) could be useful.
>
> Here is some wishlist for this tool:
>
>   - Add trunk testing: this is what will put pressure for people to
> continuously upgrade their packages.  Ideally, it would also show the
> (date of the) latest successful build on trunk.  Same for release
> branches once they are forked.
>
>   - Make the grid more narrow to fit more versions on a screen (e.g.
> abbreviate Broken Deps to "Deps") and show more recent versions
> (including trunk) to the left.
>
>   - By default, show only the latest version of each package.
>
>   - Add a mode where packages are grouped by maintainer.
>
>   - Try to make the errors more visible.  E.g. for
>
> http://opam.ocamlpro.com/builder/html/github/github.1.0.0/3b48ac1bc360931d68afa4e126d96b44
> ,
> the section "=== ERROR while compiling github.1.0.0 ==" could be moved
> to the top of the screen.
>
>    - There could also be heuristics to detect the error and show
> directly in the main report grid the category. For instance,
>
> http://opam.ocamlpro.com/builder/html/acgtk/acgtk.1.0b/764d15d569e342c5ee761551e398fb38
> is simply about a new warning and "-warn-error A" in the package.
>
>   - It would be useful to force building package even if they claim they
> are not compatible with the latest version (or trunk).  For instance, I
> was curious about why ocamlnet.4.0.4 did not build with 4.03.  (In case
> people wonder, the first problem comes from the new error on multiple
> definitions of exceptions with the same name; this error was introduced
> on trunk in 2014 IIRC.  The fix for ocamlnet is just to remove one line.)
>
>
> Alain
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20160630/28eb8856/attachment.html>

From yminsky at gmail.com  Thu Jun 30 12:40:23 2016
From: yminsky at gmail.com (Yaron Minsky)
Date: Thu, 30 Jun 2016 11:40:23 +0000
Subject: [ocaml-platform] Is it taking too long for OCaml software to
 become 4.03-compatible? Would release process changes help?
In-Reply-To: <CAHvkLrO5_VxpjG+7AEchun4K1Gdy_RZzqGRbeexNFgUn=Oq+jw@mail.gmail.com>
References: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
 <b5954fca-8018-4266-dff1-20240f18b77c@frisch.fr>
 <a5e5283f-7dc2-7917-b4fd-be56987f6c36@lexifi.com>
 <CAHvkLrO5_VxpjG+7AEchun4K1Gdy_RZzqGRbeexNFgUn=Oq+jw@mail.gmail.com>
Message-ID: <CADKNfhLi4hxdBatd+92Rjo+r2TgM8gbOd09gK9tWFennjiAv8Q@mail.gmail.com>

Including ppx-rewriters in the distribution would be the wrong resolution,
I think. The modularity afforded by the current world is worth a lot,
letting independent sets of people to work on different pieces of the
infrastructure, and making the work of the core team as simple as possible.
I think the core team should be loathe to give this up.

Having some kind of compatibility story that most PPXs could use which
would make PPXs compatible across compiler versions could help a great
deal, though. Maybe that's where the effort can be best spent. Such a thing
could even be done outside of the core distribution, though it would have
to be among the very first packages ported. Indeed, given that it would
need to work with multiple compiler versions, it is perhaps best for it to
be developed outside.

y

On Thu, Jun 30, 2016 at 4:57 AM Fabrice Le Fessant <
Fabrice.Le_fessant at inria.fr> wrote:

> If you look at the announce of opam-builder, you will notice that it was
> monitoring 4.03.0+beta1 from the beginning:
> http://lists.ocaml.org/pipermail/opam-devel/2016-March/001412.html
>
> 4.03.0+beta2 was monitored too, as soon as it was released.
>
> But indeed, opam-builder's website is far from perfection, it could be
> faster to load, send notifications by email, recognize and display error
> messages (and much more, as the information sleeping there is huge...). We
> will try to improve it when we have time, but for now, it is on our
> spare-time list of projects.
>
> I agree with Yaron that PPX are more and more going to become a problem
> for upgrading to the latest OCaml, as Camlp4 was before (and is still,
> unfortunately). Many packages now depend on ppx-rewriters, that will almost
> never be in sync with trunk, which makes testing trunk very hard, even if
> we patch OPAM not to use the upper-bounds on ocaml-version in package
> descriptions. Soon, OCaml users will probably ask us to merge some
> ppx-rewriters in the OCaml distribution to force the sync, as they asked
> for Camlp4 long ago.
>
> --Fabrice
>
>
> On Thu, Jun 30, 2016 at 9:19 AM Alain Frisch <alain.frisch at lexifi.com>
> wrote:
>
>> On 30/06/2016 03:56, Alain Frisch wrote:
>> > OCamlPro's opam builder (
>> > http://opam.ocamlpro.com/builder/html/report-last.html ) really needs
>> to
>> > be more advertised and its UI a bit polished to encourage people to
>> > actually look at it.  Also a report per maintainer (with emails sent
>> > automatically?) could be useful.
>>
>> Here is some wishlist for this tool:
>>
>>   - Add trunk testing: this is what will put pressure for people to
>> continuously upgrade their packages.  Ideally, it would also show the
>> (date of the) latest successful build on trunk.  Same for release
>> branches once they are forked.
>>
>>   - Make the grid more narrow to fit more versions on a screen (e.g.
>> abbreviate Broken Deps to "Deps") and show more recent versions
>> (including trunk) to the left.
>>
>>   - By default, show only the latest version of each package.
>>
>>   - Add a mode where packages are grouped by maintainer.
>>
>>   - Try to make the errors more visible.  E.g. for
>>
>> http://opam.ocamlpro.com/builder/html/github/github.1.0.0/3b48ac1bc360931d68afa4e126d96b44
>> ,
>> the section "=== ERROR while compiling github.1.0.0 ==" could be moved
>> to the top of the screen.
>>
>>    - There could also be heuristics to detect the error and show
>> directly in the main report grid the category. For instance,
>>
>> http://opam.ocamlpro.com/builder/html/acgtk/acgtk.1.0b/764d15d569e342c5ee761551e398fb38
>> is simply about a new warning and "-warn-error A" in the package.
>>
>>   - It would be useful to force building package even if they claim they
>> are not compatible with the latest version (or trunk).  For instance, I
>> was curious about why ocamlnet.4.0.4 did not build with 4.03.  (In case
>> people wonder, the first problem comes from the new error on multiple
>> definitions of exceptions with the same name; this error was introduced
>> on trunk in 2014 IIRC.  The fix for ocamlnet is just to remove one line.)
>>
>>
>> Alain
>> _______________________________________________
>> Platform mailing list
>> Platform at lists.ocaml.org
>> http://lists.ocaml.org/listinfo/platform
>>
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20160630/f5c22de8/attachment.html>

From daniel.buenzli at erratique.ch  Thu Jun 30 13:25:37 2016
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Thu, 30 Jun 2016 13:25:37 +0100
Subject: [ocaml-platform] Is it taking too long for OCaml software to
 become 4.03-compatible? Would release process changes help?
In-Reply-To: <CAOCAUGP9s46DTU8Nu-+xgL25YteEOJC6XQiou9RFs6VdVf4qQQ@mail.gmail.com>
References: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
 <20160629171432.GB3637@nunchakus.loria.fr>
 <CAOCAUGP9s46DTU8Nu-+xgL25YteEOJC6XQiou9RFs6VdVf4qQQ@mail.gmail.com>
Message-ID: <454D3F1D40C4438C8782A78F6B87B0E8@erratique.ch>

Le jeudi, 30 juin 2016 ? 07:36, Sylvain Le Gall a ?crit :
> This is only 3 days and this was mainly due to a transitive dependency on Batteries for the tests. Considering OSS standards, this is not a long time for a fix.

This is good, however this should have happened during the betas, not after the release. If key parts of the infrastructure are not installable during the beta, programmers (myself included) very quickly shy away from trying to test the new release or even live on it for a go.  

Best,  

Daniel




From Fabrice.Le_fessant at inria.fr  Thu Jun 30 13:58:22 2016
From: Fabrice.Le_fessant at inria.fr (Fabrice Le Fessant)
Date: Thu, 30 Jun 2016 12:58:22 +0000
Subject: [ocaml-platform] Is it taking too long for OCaml software to
 become 4.03-compatible? Would release process changes help?
In-Reply-To: <454D3F1D40C4438C8782A78F6B87B0E8@erratique.ch>
References: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
 <20160629171432.GB3637@nunchakus.loria.fr>
 <CAOCAUGP9s46DTU8Nu-+xgL25YteEOJC6XQiou9RFs6VdVf4qQQ@mail.gmail.com>
 <454D3F1D40C4438C8782A78F6B87B0E8@erratique.ch>
Message-ID: <CAHvkLrN8+Ejn+nTsi0m0_tpH6zdfvwiA6L-PZGLmO0=AjR+b1g@mail.gmail.com>

On Thu, Jun 30, 2016 at 2:25 PM Daniel B?nzli <daniel.buenzli at erratique.ch>
wrote:

> Le jeudi, 30 juin 2016 ? 07:36, Sylvain Le Gall a ?crit :
> > This is only 3 days and this was mainly due to a transitive dependency
> on Batteries for the tests. Considering OSS standards, this is not a long
> time for a fix.
>
> This is good, however this should have happened during the betas, not
> after the release. If key parts of the infrastructure are not installable
> during the beta, programmers (myself included) very quickly shy away from
> trying to test the new release or even live on it for a go.


You can ask this kind of diligence from sub-contractors, not from
open-source contributors, especially when a package is maintained only by
one developer on his/her sparetime. Or if you think these components are
key to the infrastructure, why not move their development to
github.com/ocaml/ with a larger team of maintainers, as it was done for
OPAM ?

--Fabrice
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20160630/6eb8b063/attachment.html>

From daniel.buenzli at erratique.ch  Thu Jun 30 14:17:38 2016
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Thu, 30 Jun 2016 14:17:38 +0100
Subject: [ocaml-platform] Is it taking too long for OCaml software to
 become 4.03-compatible? Would release process changes help?
In-Reply-To: <CAHvkLrN8+Ejn+nTsi0m0_tpH6zdfvwiA6L-PZGLmO0=AjR+b1g@mail.gmail.com>
References: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
 <20160629171432.GB3637@nunchakus.loria.fr>
 <CAOCAUGP9s46DTU8Nu-+xgL25YteEOJC6XQiou9RFs6VdVf4qQQ@mail.gmail.com>
 <454D3F1D40C4438C8782A78F6B87B0E8@erratique.ch>
 <CAHvkLrN8+Ejn+nTsi0m0_tpH6zdfvwiA6L-PZGLmO0=AjR+b1g@mail.gmail.com>
Message-ID: <8C1A944008B743FBA8F7AD2B9CBFD45A@erratique.ch>

Le jeudi, 30 juin 2016 ? 13:58, Fabrice Le Fessant a ?crit :
> You can ask this kind of diligence from sub-contractors, not from open-source contributors, especially when a package is maintained only by one developer on his/her sparetime.

I'm not asking anything. I'm only commenting on the fact that Sylvain said that the time response was not long. It wasn't indeed but release time is not the right time point to consider. The right time point to consider is the rc betas.
  
> Or if you think these components are key to the infrastructure, why not move their development to github.com/ocaml/ (http://github.com/ocaml/) with a larger team of maintainers, as it was done for OPAM ?

I personally don't care as I'm not interested in oasis. But many other programmer seem to use it so it's a pre-requesite for them to be able to work in a given release and if this doesn't happen during the betas then we get less testing. Regarding oasis' development model I'll let users of oasis decide on what is best them.

Best,  

Daniel

From yotambarnoy at gmail.com  Thu Jun 30 14:32:03 2016
From: yotambarnoy at gmail.com (Yotam Barnoy)
Date: Thu, 30 Jun 2016 09:32:03 -0400
Subject: [ocaml-platform] Is it taking too long for OCaml software to
 become 4.03-compatible? Would release process changes help?
In-Reply-To: <8C1A944008B743FBA8F7AD2B9CBFD45A@erratique.ch>
References: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
 <20160629171432.GB3637@nunchakus.loria.fr>
 <CAOCAUGP9s46DTU8Nu-+xgL25YteEOJC6XQiou9RFs6VdVf4qQQ@mail.gmail.com>
 <454D3F1D40C4438C8782A78F6B87B0E8@erratique.ch>
 <CAHvkLrN8+Ejn+nTsi0m0_tpH6zdfvwiA6L-PZGLmO0=AjR+b1g@mail.gmail.com>
 <8C1A944008B743FBA8F7AD2B9CBFD45A@erratique.ch>
Message-ID: <CAN6ygOnn8hgR=jaoEGK__aJi6J7=kNKzYA0OUUHKQHYVFH=xeQ@mail.gmail.com>

I've also been bitten by this issue with 4.03. Specifically, Merlin
took about 2 weeks post-release to be ready, making it much harder to
program in 4.03, and I had a dependency chain that needed OASIS to
build.

I don't think we can avoid having a specialized pre-release period for
getting the packages up and running. I noticed many of these breakages
before 4.03 was released, but package authors aren't responsive to a
pre-release breakage.

It's important to prioritize though -- those packages that have the
most reverse-dependencies and the ones that are most popular, should
be the highest priorities to fix. OPAM has this info, and just as the
https://opam.ocaml.org/packages/index-popularity.html page shows the
most popular packages, I think it should pull their build-state for
the latest OCAML release version and highlight them if they're broken.
Speaking of which, it would be nice if the opam webpage also had a
'sort by reverse dependencies' list.

One schedule that perhaps could work would be to have a
pre-platform-release month. Within this month, package authors would
have the first 2 weeks to fix their packages. After these 2 weeks,
there would be a rallying cry to fix packages sorted by priority
(highest reverse-dependencies & highest popularity), and the entire
community would be mobilized to help in the effort. Once a
"sufficient" number of the highest priority packages are fixed, the
full release can take place, but the work can be ongoing.

-Yotam

On Thu, Jun 30, 2016 at 9:17 AM, Daniel B?nzli
<daniel.buenzli at erratique.ch> wrote:
> Le jeudi, 30 juin 2016 ? 13:58, Fabrice Le Fessant a ?crit :
>> You can ask this kind of diligence from sub-contractors, not from open-source contributors, especially when a package is maintained only by one developer on his/her sparetime.
>
> I'm not asking anything. I'm only commenting on the fact that Sylvain said that the time response was not long. It wasn't indeed but release time is not the right time point to consider. The right time point to consider is the rc betas.
>
>> Or if you think these components are key to the infrastructure, why not move their development to github.com/ocaml/ (http://github.com/ocaml/) with a larger team of maintainers, as it was done for OPAM ?
>
> I personally don't care as I'm not interested in oasis. But many other programmer seem to use it so it's a pre-requesite for them to be able to work in a given release and if this doesn't happen during the betas then we get less testing. Regarding oasis' development model I'll let users of oasis decide on what is best them.
>
> Best,
>
> Daniel
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform

From gabriel.scherer at gmail.com  Thu Jun 30 15:47:10 2016
From: gabriel.scherer at gmail.com (Gabriel Scherer)
Date: Thu, 30 Jun 2016 10:47:10 -0400
Subject: [ocaml-platform] Is it taking too long for OCaml software to
 become 4.03-compatible? Would release process changes help?
In-Reply-To: <CAN6ygOnn8hgR=jaoEGK__aJi6J7=kNKzYA0OUUHKQHYVFH=xeQ@mail.gmail.com>
References: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
 <20160629171432.GB3637@nunchakus.loria.fr>
 <CAOCAUGP9s46DTU8Nu-+xgL25YteEOJC6XQiou9RFs6VdVf4qQQ@mail.gmail.com>
 <454D3F1D40C4438C8782A78F6B87B0E8@erratique.ch>
 <CAHvkLrN8+Ejn+nTsi0m0_tpH6zdfvwiA6L-PZGLmO0=AjR+b1g@mail.gmail.com>
 <8C1A944008B743FBA8F7AD2B9CBFD45A@erratique.ch>
 <CAN6ygOnn8hgR=jaoEGK__aJi6J7=kNKzYA0OUUHKQHYVFH=xeQ@mail.gmail.com>
Message-ID: <CAPFanBGh3acBdZMOpHV8cfETK-bu2GTWfb4zm_n8+osNP2XtbA@mail.gmail.com>

Let's clarify that I am not trying to blame maintainers of packages for the
issues that I highlighted. I believe that we are all doing our best given
the current processes and expectations, and I would like to fix the process
to improve the results. (In particular, I think that the beta period for
4.03 was insufficient for maintainers to update their packages.)

Yotam: I don't think a clear separation of responsibility (package authors
vs. "the entire community") is possible. The free software that powers the
OCaml ecosystem should be maintained collectively at all times. It is
particularly true in the context of adapting to a new OCaml version that
changed some things; it is often the case that the package authors are not
the most qualified to understand the required changes -- they know their
codebase well, but don't necessarily follow OCaml evolutions closely.
Early-adopters and enthusiasts, such as you and I, have a large role to
play in helping the ecosystem evolve gracefully by sending patches to fix
the bugs.

Fabrice: again, it's not about who maintains the software (and I don't
think that the ocaml/ umbrella automatically guarantees more maintenance).
External contributors can easily fix software to work on trunk or new OCaml
versions -- I've done it for atdgen and Coqide and it was not much work.

Fabrice: Indeed, I think that opam-builder is a great tool to put at the
forefront of such an effort. The current version

  http://opam.ocamlpro.com/builder/html/report-last.html

monitors the state of the OPAM repository for released OCaml versions.
Everything that is orange (except maybe for the "lint" column) is a bug
that we must collectively fix.

I will try to experiment more with opam-builder (understand its error
explanations better and try to fix a part of it to see what the experiment
is) before suggesting any specific process.

On Thu, Jun 30, 2016 at 9:32 AM, Yotam Barnoy <yotambarnoy at gmail.com> wrote:

> I've also been bitten by this issue with 4.03. Specifically, Merlin
> took about 2 weeks post-release to be ready, making it much harder to
> program in 4.03, and I had a dependency chain that needed OASIS to
> build.
>
> I don't think we can avoid having a specialized pre-release period for
> getting the packages up and running. I noticed many of these breakages
> before 4.03 was released, but package authors aren't responsive to a
> pre-release breakage.
>
> It's important to prioritize though -- those packages that have the
> most reverse-dependencies and the ones that are most popular, should
> be the highest priorities to fix. OPAM has this info, and just as the
> https://opam.ocaml.org/packages/index-popularity.html page shows the
> most popular packages, I think it should pull their build-state for
> the latest OCAML release version and highlight them if they're broken.
> Speaking of which, it would be nice if the opam webpage also had a
> 'sort by reverse dependencies' list.
>
> One schedule that perhaps could work would be to have a
> pre-platform-release month. Within this month, package authors would
> have the first 2 weeks to fix their packages. After these 2 weeks,
> there would be a rallying cry to fix packages sorted by priority
> (highest reverse-dependencies & highest popularity), and the entire
> community would be mobilized to help in the effort. Once a
> "sufficient" number of the highest priority packages are fixed, the
> full release can take place, but the work can be ongoing.
>
> -Yotam
>
> On Thu, Jun 30, 2016 at 9:17 AM, Daniel B?nzli
> <daniel.buenzli at erratique.ch> wrote:
> > Le jeudi, 30 juin 2016 ? 13:58, Fabrice Le Fessant a ?crit :
> >> You can ask this kind of diligence from sub-contractors, not from
> open-source contributors, especially when a package is maintained only by
> one developer on his/her sparetime.
> >
> > I'm not asking anything. I'm only commenting on the fact that Sylvain
> said that the time response was not long. It wasn't indeed but release time
> is not the right time point to consider. The right time point to consider
> is the rc betas.
> >
> >> Or if you think these components are key to the infrastructure, why not
> move their development to github.com/ocaml/ (http://github.com/ocaml/)
> with a larger team of maintainers, as it was done for OPAM ?
> >
> > I personally don't care as I'm not interested in oasis. But many other
> programmer seem to use it so it's a pre-requesite for them to be able to
> work in a given release and if this doesn't happen during the betas then we
> get less testing. Regarding oasis' development model I'll let users of
> oasis decide on what is best them.
> >
> > Best,
> >
> > Daniel
> > _______________________________________________
> > Platform mailing list
> > Platform at lists.ocaml.org
> > http://lists.ocaml.org/listinfo/platform
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20160630/e1cb5bc6/attachment.html>

From yotambarnoy at gmail.com  Thu Jun 30 16:08:45 2016
From: yotambarnoy at gmail.com (Yotam Barnoy)
Date: Thu, 30 Jun 2016 11:08:45 -0400
Subject: [ocaml-platform] Is it taking too long for OCaml software to
 become 4.03-compatible? Would release process changes help?
In-Reply-To: <CAPFanBGh3acBdZMOpHV8cfETK-bu2GTWfb4zm_n8+osNP2XtbA@mail.gmail.com>
References: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
 <20160629171432.GB3637@nunchakus.loria.fr>
 <CAOCAUGP9s46DTU8Nu-+xgL25YteEOJC6XQiou9RFs6VdVf4qQQ@mail.gmail.com>
 <454D3F1D40C4438C8782A78F6B87B0E8@erratique.ch>
 <CAHvkLrN8+Ejn+nTsi0m0_tpH6zdfvwiA6L-PZGLmO0=AjR+b1g@mail.gmail.com>
 <8C1A944008B743FBA8F7AD2B9CBFD45A@erratique.ch>
 <CAN6ygOnn8hgR=jaoEGK__aJi6J7=kNKzYA0OUUHKQHYVFH=xeQ@mail.gmail.com>
 <CAPFanBGh3acBdZMOpHV8cfETK-bu2GTWfb4zm_n8+osNP2XtbA@mail.gmail.com>
Message-ID: <CAN6ygOmRhQHs0WvRzL6EvH+Qjs6b5NKhLFge2pmhwDDA5H+cCA@mail.gmail.com>

Just to clarify, I wasn't really separating between package authors
and the community, as much as delineating stages when specific aspects
are targeted. I know very well how hard it is to maintain one's
projects after one has released them and the 'passion' has died down.
Finding time and energy to do this promptly is often hard. My
suggestion is a process that tries to make the most of limited
resources: after the OCaml release is made, which in itself is a very
hectic and demanding process, the community turns to fixing those
packages which are most critical, and people who would normally be
spending some of their time on other things (such as compiler
features) could instead try to help the package authors of the most
critical broken packages to update their code. A rallying cry as part
of a formal process towards the places where most attention is needed
could be better than just letting things work themselves out on their
own. People who do not even use a specific package (and therefore
don't care about it directly) would be told about contributions they
could make to the ocaml platform as a whole, and end up updating that
package.

That is all.

On Thu, Jun 30, 2016 at 10:47 AM, Gabriel Scherer
<gabriel.scherer at gmail.com> wrote:
> Let's clarify that I am not trying to blame maintainers of packages for the
> issues that I highlighted. I believe that we are all doing our best given
> the current processes and expectations, and I would like to fix the process
> to improve the results. (In particular, I think that the beta period for
> 4.03 was insufficient for maintainers to update their packages.)
>
> Yotam: I don't think a clear separation of responsibility (package authors
> vs. "the entire community") is possible. The free software that powers the
> OCaml ecosystem should be maintained collectively at all times. It is
> particularly true in the context of adapting to a new OCaml version that
> changed some things; it is often the case that the package authors are not
> the most qualified to understand the required changes -- they know their
> codebase well, but don't necessarily follow OCaml evolutions closely.
> Early-adopters and enthusiasts, such as you and I, have a large role to play
> in helping the ecosystem evolve gracefully by sending patches to fix the
> bugs.
>
> Fabrice: again, it's not about who maintains the software (and I don't think
> that the ocaml/ umbrella automatically guarantees more maintenance).
> External contributors can easily fix software to work on trunk or new OCaml
> versions -- I've done it for atdgen and Coqide and it was not much work.
>
> Fabrice: Indeed, I think that opam-builder is a great tool to put at the
> forefront of such an effort. The current version
>
>   http://opam.ocamlpro.com/builder/html/report-last.html
>
> monitors the state of the OPAM repository for released OCaml versions.
> Everything that is orange (except maybe for the "lint" column) is a bug that
> we must collectively fix.
>
> I will try to experiment more with opam-builder (understand its error
> explanations better and try to fix a part of it to see what the experiment
> is) before suggesting any specific process.
>
> On Thu, Jun 30, 2016 at 9:32 AM, Yotam Barnoy <yotambarnoy at gmail.com> wrote:
>>
>> I've also been bitten by this issue with 4.03. Specifically, Merlin
>> took about 2 weeks post-release to be ready, making it much harder to
>> program in 4.03, and I had a dependency chain that needed OASIS to
>> build.
>>
>> I don't think we can avoid having a specialized pre-release period for
>> getting the packages up and running. I noticed many of these breakages
>> before 4.03 was released, but package authors aren't responsive to a
>> pre-release breakage.
>>
>> It's important to prioritize though -- those packages that have the
>> most reverse-dependencies and the ones that are most popular, should
>> be the highest priorities to fix. OPAM has this info, and just as the
>> https://opam.ocaml.org/packages/index-popularity.html page shows the
>> most popular packages, I think it should pull their build-state for
>> the latest OCAML release version and highlight them if they're broken.
>> Speaking of which, it would be nice if the opam webpage also had a
>> 'sort by reverse dependencies' list.
>>
>> One schedule that perhaps could work would be to have a
>> pre-platform-release month. Within this month, package authors would
>> have the first 2 weeks to fix their packages. After these 2 weeks,
>> there would be a rallying cry to fix packages sorted by priority
>> (highest reverse-dependencies & highest popularity), and the entire
>> community would be mobilized to help in the effort. Once a
>> "sufficient" number of the highest priority packages are fixed, the
>> full release can take place, but the work can be ongoing.
>>
>> -Yotam
>>
>> On Thu, Jun 30, 2016 at 9:17 AM, Daniel B?nzli
>> <daniel.buenzli at erratique.ch> wrote:
>> > Le jeudi, 30 juin 2016 ? 13:58, Fabrice Le Fessant a ?crit :
>> >> You can ask this kind of diligence from sub-contractors, not from
>> >> open-source contributors, especially when a package is maintained only by
>> >> one developer on his/her sparetime.
>> >
>> > I'm not asking anything. I'm only commenting on the fact that Sylvain
>> > said that the time response was not long. It wasn't indeed but release time
>> > is not the right time point to consider. The right time point to consider is
>> > the rc betas.
>> >
>> >> Or if you think these components are key to the infrastructure, why not
>> >> move their development to github.com/ocaml/ (http://github.com/ocaml/) with
>> >> a larger team of maintainers, as it was done for OPAM ?
>> >
>> > I personally don't care as I'm not interested in oasis. But many other
>> > programmer seem to use it so it's a pre-requesite for them to be able to
>> > work in a given release and if this doesn't happen during the betas then we
>> > get less testing. Regarding oasis' development model I'll let users of oasis
>> > decide on what is best them.
>> >
>> > Best,
>> >
>> > Daniel
>> > _______________________________________________
>> > Platform mailing list
>> > Platform at lists.ocaml.org
>> > http://lists.ocaml.org/listinfo/platform
>> _______________________________________________
>> Platform mailing list
>> Platform at lists.ocaml.org
>> http://lists.ocaml.org/listinfo/platform
>
>

From Fabrice.Le_fessant at inria.fr  Thu Jun 30 16:09:21 2016
From: Fabrice.Le_fessant at inria.fr (Fabrice Le Fessant)
Date: Thu, 30 Jun 2016 15:09:21 +0000
Subject: [ocaml-platform] Is it taking too long for OCaml software to
 become 4.03-compatible? Would release process changes help?
In-Reply-To: <CAPFanBGh3acBdZMOpHV8cfETK-bu2GTWfb4zm_n8+osNP2XtbA@mail.gmail.com>
References: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
 <20160629171432.GB3637@nunchakus.loria.fr>
 <CAOCAUGP9s46DTU8Nu-+xgL25YteEOJC6XQiou9RFs6VdVf4qQQ@mail.gmail.com>
 <454D3F1D40C4438C8782A78F6B87B0E8@erratique.ch>
 <CAHvkLrN8+Ejn+nTsi0m0_tpH6zdfvwiA6L-PZGLmO0=AjR+b1g@mail.gmail.com>
 <8C1A944008B743FBA8F7AD2B9CBFD45A@erratique.ch>
 <CAN6ygOnn8hgR=jaoEGK__aJi6J7=kNKzYA0OUUHKQHYVFH=xeQ@mail.gmail.com>
 <CAPFanBGh3acBdZMOpHV8cfETK-bu2GTWfb4zm_n8+osNP2XtbA@mail.gmail.com>
Message-ID: <CAHvkLrMuSz1rFpO9hz5hOgXtUAbsjsB8-J+4fb=c6Rpn3UBUqg@mail.gmail.com>

The reason why OPAM-builder cannot monitor trunk is by design: to achieve
almost real time on a 4-core computer for 5 versions of OCaml, opam-builder
makes an extensive use of caching binary installations of dependencies.
This cannot be done on a moving target like trunk, where you would have to
recompile all packages (all versions, sometimes with different depends
because of depopts) at every commit in the trunk, after clearing the cache.
That's the reason why I only do it for official beta releases, and
opam-builder takes two or three days to compile the repo.
Le jeu. 30 juin 2016 ? 16:48, Gabriel Scherer <gabriel.scherer at gmail.com> a
?crit :

> Let's clarify that I am not trying to blame maintainers of packages for
> the issues that I highlighted. I believe that we are all doing our best
> given the current processes and expectations, and I would like to fix the
> process to improve the results. (In particular, I think that the beta
> period for 4.03 was insufficient for maintainers to update their packages.)
>
> Yotam: I don't think a clear separation of responsibility (package authors
> vs. "the entire community") is possible. The free software that powers the
> OCaml ecosystem should be maintained collectively at all times. It is
> particularly true in the context of adapting to a new OCaml version that
> changed some things; it is often the case that the package authors are not
> the most qualified to understand the required changes -- they know their
> codebase well, but don't necessarily follow OCaml evolutions closely.
> Early-adopters and enthusiasts, such as you and I, have a large role to
> play in helping the ecosystem evolve gracefully by sending patches to fix
> the bugs.
>
> Fabrice: again, it's not about who maintains the software (and I don't
> think that the ocaml/ umbrella automatically guarantees more maintenance).
> External contributors can easily fix software to work on trunk or new OCaml
> versions -- I've done it for atdgen and Coqide and it was not much work.
>
> Fabrice: Indeed, I think that opam-builder is a great tool to put at the
> forefront of such an effort. The current version
>
>   http://opam.ocamlpro.com/builder/html/report-last.html
>
> monitors the state of the OPAM repository for released OCaml versions.
> Everything that is orange (except maybe for the "lint" column) is a bug
> that we must collectively fix.
>
> I will try to experiment more with opam-builder (understand its error
> explanations better and try to fix a part of it to see what the experiment
> is) before suggesting any specific process.
>
> On Thu, Jun 30, 2016 at 9:32 AM, Yotam Barnoy <yotambarnoy at gmail.com>
> wrote:
>
>> I've also been bitten by this issue with 4.03. Specifically, Merlin
>> took about 2 weeks post-release to be ready, making it much harder to
>> program in 4.03, and I had a dependency chain that needed OASIS to
>> build.
>>
>> I don't think we can avoid having a specialized pre-release period for
>> getting the packages up and running. I noticed many of these breakages
>> before 4.03 was released, but package authors aren't responsive to a
>> pre-release breakage.
>>
>> It's important to prioritize though -- those packages that have the
>> most reverse-dependencies and the ones that are most popular, should
>> be the highest priorities to fix. OPAM has this info, and just as the
>> https://opam.ocaml.org/packages/index-popularity.html page shows the
>> most popular packages, I think it should pull their build-state for
>> the latest OCAML release version and highlight them if they're broken.
>> Speaking of which, it would be nice if the opam webpage also had a
>> 'sort by reverse dependencies' list.
>>
>> One schedule that perhaps could work would be to have a
>> pre-platform-release month. Within this month, package authors would
>> have the first 2 weeks to fix their packages. After these 2 weeks,
>> there would be a rallying cry to fix packages sorted by priority
>> (highest reverse-dependencies & highest popularity), and the entire
>> community would be mobilized to help in the effort. Once a
>> "sufficient" number of the highest priority packages are fixed, the
>> full release can take place, but the work can be ongoing.
>>
>> -Yotam
>>
>> On Thu, Jun 30, 2016 at 9:17 AM, Daniel B?nzli
>> <daniel.buenzli at erratique.ch> wrote:
>> > Le jeudi, 30 juin 2016 ? 13:58, Fabrice Le Fessant a ?crit :
>> >> You can ask this kind of diligence from sub-contractors, not from
>> open-source contributors, especially when a package is maintained only by
>> one developer on his/her sparetime.
>> >
>> > I'm not asking anything. I'm only commenting on the fact that Sylvain
>> said that the time response was not long. It wasn't indeed but release time
>> is not the right time point to consider. The right time point to consider
>> is the rc betas.
>> >
>> >> Or if you think these components are key to the infrastructure, why
>> not move their development to github.com/ocaml/ (http://github.com/ocaml/)
>> with a larger team of maintainers, as it was done for OPAM ?
>> >
>> > I personally don't care as I'm not interested in oasis. But many other
>> programmer seem to use it so it's a pre-requesite for them to be able to
>> work in a given release and if this doesn't happen during the betas then we
>> get less testing. Regarding oasis' development model I'll let users of
>> oasis decide on what is best them.
>> >
>> > Best,
>> >
>> > Daniel
>> > _______________________________________________
>> > Platform mailing list
>> > Platform at lists.ocaml.org
>> > http://lists.ocaml.org/listinfo/platform
>> _______________________________________________
>> Platform mailing list
>> Platform at lists.ocaml.org
>> http://lists.ocaml.org/listinfo/platform
>>
>
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20160630/39fe8db2/attachment-0001.html>

From gabriel.scherer at gmail.com  Thu Jun 30 16:41:29 2016
From: gabriel.scherer at gmail.com (Gabriel Scherer)
Date: Thu, 30 Jun 2016 11:41:29 -0400
Subject: [ocaml-platform] Is it taking too long for OCaml software to
 become 4.03-compatible? Would release process changes help?
In-Reply-To: <CAHvkLrMuSz1rFpO9hz5hOgXtUAbsjsB8-J+4fb=c6Rpn3UBUqg@mail.gmail.com>
References: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
 <20160629171432.GB3637@nunchakus.loria.fr>
 <CAOCAUGP9s46DTU8Nu-+xgL25YteEOJC6XQiou9RFs6VdVf4qQQ@mail.gmail.com>
 <454D3F1D40C4438C8782A78F6B87B0E8@erratique.ch>
 <CAHvkLrN8+Ejn+nTsi0m0_tpH6zdfvwiA6L-PZGLmO0=AjR+b1g@mail.gmail.com>
 <8C1A944008B743FBA8F7AD2B9CBFD45A@erratique.ch>
 <CAN6ygOnn8hgR=jaoEGK__aJi6J7=kNKzYA0OUUHKQHYVFH=xeQ@mail.gmail.com>
 <CAPFanBGh3acBdZMOpHV8cfETK-bu2GTWfb4zm_n8+osNP2XtbA@mail.gmail.com>
 <CAHvkLrMuSz1rFpO9hz5hOgXtUAbsjsB8-J+4fb=c6Rpn3UBUqg@mail.gmail.com>
Message-ID: <CAPFanBEjXYw1bUtTASbO6DyTQpsKDt5JYygC4TRHdXpkgDCY_A@mail.gmail.com>

Fabrice: indeed.

I thought of proposing a process for using opam-builder against trunk (eg.
swipe the state every two weeks and update the compiler used to the HEAD of
trunk at this moment only; the incremental capabilities are still useful to
monitor the effect of proposed fixes in opam packages), but I think that
for trunk fixing there are more delicate questions that arise (than at the
beta stage). For example, deciding when the trunk state is "good" for
testing, and deciding what to do with breakage report, as reporting them to
maintainers "too soon" is not always the right choice -- we may want to
revert the change in trunk instead, or improve its compatibility status.

I have a clear, simple proposal for the end of the release process: remain
in beta stage as long as there are OPAM packages that are considered
installable but fail to build with the beta. (Provided we have tools to
automate the addition of ocaml version bounds, the release manager would
have the avaibility to declare it done and simply mark all remaining
packages un-installable whenever they want to get the release out.)

As a first step, I would get all installable OPAM packages to build on
4.03.0, and I will try to push fixes and bounds, and motivate people to
participate to that effect in the following weeks, using the opam-builder
reports.

I'm interested in working to get more software to build on trunk, but I
don't have a clear proposal or process in mind yet, so I won't make any
specific proposal for now.

P.S.: I'm a bit worried by the "uses a fork of OPAM" part of opam-builder,
isn't there a risk of increased divergence over time and eventual
unusability? Could we integrate the salient features in opam proper?

On Thu, Jun 30, 2016 at 11:09 AM, Fabrice Le Fessant <
Fabrice.Le_fessant at inria.fr> wrote:

> The reason why OPAM-builder cannot monitor trunk is by design: to achieve
> almost real time on a 4-core computer for 5 versions of OCaml, opam-builder
> makes an extensive use of caching binary installations of dependencies.
> This cannot be done on a moving target like trunk, where you would have to
> recompile all packages (all versions, sometimes with different depends
> because of depopts) at every commit in the trunk, after clearing the cache.
> That's the reason why I only do it for official beta releases, and
> opam-builder takes two or three days to compile the repo.
>
> Le jeu. 30 juin 2016 ? 16:48, Gabriel Scherer <gabriel.scherer at gmail.com>
> a ?crit :
>
>> Let's clarify that I am not trying to blame maintainers of packages for
>> the issues that I highlighted. I believe that we are all doing our best
>> given the current processes and expectations, and I would like to fix the
>> process to improve the results. (In particular, I think that the beta
>> period for 4.03 was insufficient for maintainers to update their packages.)
>>
>> Yotam: I don't think a clear separation of responsibility (package
>> authors vs. "the entire community") is possible. The free software that
>> powers the OCaml ecosystem should be maintained collectively at all times.
>> It is particularly true in the context of adapting to a new OCaml version
>> that changed some things; it is often the case that the package authors are
>> not the most qualified to understand the required changes -- they know
>> their codebase well, but don't necessarily follow OCaml evolutions closely.
>> Early-adopters and enthusiasts, such as you and I, have a large role to
>> play in helping the ecosystem evolve gracefully by sending patches to fix
>> the bugs.
>>
>> Fabrice: again, it's not about who maintains the software (and I don't
>> think that the ocaml/ umbrella automatically guarantees more maintenance).
>> External contributors can easily fix software to work on trunk or new OCaml
>> versions -- I've done it for atdgen and Coqide and it was not much work.
>>
>> Fabrice: Indeed, I think that opam-builder is a great tool to put at the
>> forefront of such an effort. The current version
>>
>>   http://opam.ocamlpro.com/builder/html/report-last.html
>>
>> monitors the state of the OPAM repository for released OCaml versions.
>> Everything that is orange (except maybe for the "lint" column) is a bug
>> that we must collectively fix.
>>
>> I will try to experiment more with opam-builder (understand its error
>> explanations better and try to fix a part of it to see what the experiment
>> is) before suggesting any specific process.
>>
>> On Thu, Jun 30, 2016 at 9:32 AM, Yotam Barnoy <yotambarnoy at gmail.com>
>> wrote:
>>
>>> I've also been bitten by this issue with 4.03. Specifically, Merlin
>>> took about 2 weeks post-release to be ready, making it much harder to
>>> program in 4.03, and I had a dependency chain that needed OASIS to
>>> build.
>>>
>>> I don't think we can avoid having a specialized pre-release period for
>>> getting the packages up and running. I noticed many of these breakages
>>> before 4.03 was released, but package authors aren't responsive to a
>>> pre-release breakage.
>>>
>>> It's important to prioritize though -- those packages that have the
>>> most reverse-dependencies and the ones that are most popular, should
>>> be the highest priorities to fix. OPAM has this info, and just as the
>>> https://opam.ocaml.org/packages/index-popularity.html page shows the
>>> most popular packages, I think it should pull their build-state for
>>> the latest OCAML release version and highlight them if they're broken.
>>> Speaking of which, it would be nice if the opam webpage also had a
>>> 'sort by reverse dependencies' list.
>>>
>>> One schedule that perhaps could work would be to have a
>>> pre-platform-release month. Within this month, package authors would
>>> have the first 2 weeks to fix their packages. After these 2 weeks,
>>> there would be a rallying cry to fix packages sorted by priority
>>> (highest reverse-dependencies & highest popularity), and the entire
>>> community would be mobilized to help in the effort. Once a
>>> "sufficient" number of the highest priority packages are fixed, the
>>> full release can take place, but the work can be ongoing.
>>>
>>> -Yotam
>>>
>>> On Thu, Jun 30, 2016 at 9:17 AM, Daniel B?nzli
>>> <daniel.buenzli at erratique.ch> wrote:
>>> > Le jeudi, 30 juin 2016 ? 13:58, Fabrice Le Fessant a ?crit :
>>> >> You can ask this kind of diligence from sub-contractors, not from
>>> open-source contributors, especially when a package is maintained only by
>>> one developer on his/her sparetime.
>>> >
>>> > I'm not asking anything. I'm only commenting on the fact that Sylvain
>>> said that the time response was not long. It wasn't indeed but release time
>>> is not the right time point to consider. The right time point to consider
>>> is the rc betas.
>>> >
>>> >> Or if you think these components are key to the infrastructure, why
>>> not move their development to github.com/ocaml/ (
>>> http://github.com/ocaml/) with a larger team of maintainers, as it was
>>> done for OPAM ?
>>> >
>>> > I personally don't care as I'm not interested in oasis. But many other
>>> programmer seem to use it so it's a pre-requesite for them to be able to
>>> work in a given release and if this doesn't happen during the betas then we
>>> get less testing. Regarding oasis' development model I'll let users of
>>> oasis decide on what is best them.
>>> >
>>> > Best,
>>> >
>>> > Daniel
>>> > _______________________________________________
>>> > Platform mailing list
>>> > Platform at lists.ocaml.org
>>> > http://lists.ocaml.org/listinfo/platform
>>> _______________________________________________
>>> Platform mailing list
>>> Platform at lists.ocaml.org
>>> http://lists.ocaml.org/listinfo/platform
>>>
>>
>> _______________________________________________
>> Platform mailing list
>> Platform at lists.ocaml.org
>> http://lists.ocaml.org/listinfo/platform
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20160630/a0ceeb6b/attachment.html>

From Xavier.Leroy at inria.fr  Thu Jun 30 16:58:02 2016
From: Xavier.Leroy at inria.fr (Xavier Leroy)
Date: Thu, 30 Jun 2016 17:58:02 +0200
Subject: [ocaml-platform] Is it taking too long for OCaml software to
 become 4.03-compatible? Would release process changes help?
In-Reply-To: <CAPFanBEjXYw1bUtTASbO6DyTQpsKDt5JYygC4TRHdXpkgDCY_A@mail.gmail.com>
References: <CAPFanBEC=zZSw_8UmADyZBt6KRWnEAoq6tRLRErUBXX58JieeQ@mail.gmail.com>
 <20160629171432.GB3637@nunchakus.loria.fr>
 <CAOCAUGP9s46DTU8Nu-+xgL25YteEOJC6XQiou9RFs6VdVf4qQQ@mail.gmail.com>
 <454D3F1D40C4438C8782A78F6B87B0E8@erratique.ch>
 <CAHvkLrN8+Ejn+nTsi0m0_tpH6zdfvwiA6L-PZGLmO0=AjR+b1g@mail.gmail.com>
 <8C1A944008B743FBA8F7AD2B9CBFD45A@erratique.ch>
 <CAN6ygOnn8hgR=jaoEGK__aJi6J7=kNKzYA0OUUHKQHYVFH=xeQ@mail.gmail.com>
 <CAPFanBGh3acBdZMOpHV8cfETK-bu2GTWfb4zm_n8+osNP2XtbA@mail.gmail.com>
 <CAHvkLrMuSz1rFpO9hz5hOgXtUAbsjsB8-J+4fb=c6Rpn3UBUqg@mail.gmail.com>
 <CAPFanBEjXYw1bUtTASbO6DyTQpsKDt5JYygC4TRHdXpkgDCY_A@mail.gmail.com>
Message-ID: <5775418A.9070405@inria.fr>

Dear platform fellows,

Many good points have been made already, so let me just add a few
remarks.

- I have the impression that OCaml 4.03 introduces more breaking
  changes than 4.02 did.  That could explain why OPAM packages are
  taking longer to be upgraded to 4.03.  I don't know what it means
  for the future: should the OCaml core team be more prudent with
  breaking changes?  should the packaging community get ready to
  handle even more breakage?

- As an upstream author of a few libraries, it's not obvious to me
  what the best / recommended way is to communicate with the packagers
  of "my" software, e.g. being informed of problem reports with the
  corresponding packages, or informing them of new versions of "my"
  soft.

- OPAM-wide continuous integration is great, of course.  Concerning
  computing resources:

> On Thu, Jun 30, 2016 at 11:09 AM, Fabrice Le Fessant
>     The reason why OPAM-builder cannot monitor trunk is by design: to
>     achieve almost real time on a 4-core computer for 5 versions of OCaml,
>     opam-builder makes an extensive use of caching binary installations of
>     dependencies. This cannot be done on a moving target like trunk, where
>     you would have to recompile all packages (all versions, sometimes with
>     different depends because of depopts) at every commit in the trunk,
>     after clearing the cache. That's the reason why I only do it for
>     official beta releases, and opam-builder takes two or three days to
>     compile the repo.

What would it take to get, say, one full build every day?  I think we
could find some funds for that, e.g. from the Caml consortium.  After
all, a cool 12 cores / 24 threads blade server costs only 2.5 kEur or
so.

- Xavier Leroy

