From gabriel.scherer at gmail.com  Fri Apr 17 08:52:08 2015
From: gabriel.scherer at gmail.com (Gabriel Scherer)
Date: Fri, 17 Apr 2015 09:52:08 +0200
Subject: [ocaml-platform] Secure OPAM?
In-Reply-To: <20150330180127.54d786f4@kiwi.local.tld>
References: <CAPFanBHVJvKwGOsy8zzrJc6QySiXqvQTwKoZurvOYkKJP5sBmg@mail.gmail.com>
 <20150330180127.54d786f4@kiwi.local.tld>
Message-ID: <CAPFanBH9wUtSiv3_J20yC050Mx-WFX8-94FBu+7hMvxdG8GOXQ@mail.gmail.com>

(Since this thread was last active there have been very promising
discussions on security that could see the day for OPAM 1.3.)

This list may be interested in the recent plan/proposal for security in
Hackage (Haskell's package distribution infrastructure), which are
basically "follow TUF":
  http://www.well-typed.com/blog/2015/04/improving-hackage-security/

On Mon, Mar 30, 2015 at 12:01 PM, ygrek <ygrek at autistici.org> wrote:

> On Sat, 17 Jan 2015 16:19:46 +0100
> Gabriel Scherer <gabriel.scherer at gmail.com> wrote:
>
> > As far as I know, the current status is that OPAM checks downloaded
> > packages against the checksum in opam-repository, so it protects
> > against an attacker changing upstream releases, assuming the
> > opam-repository remains trusted and there is no man-in-the-middle
> > (MITM) attack when the user downloads the metadata -- afaik it uses
> > only HTTP currently.
>
> Also note that client doesn't require checksums by default, and enabling
> the option
> to require checksums makes it abort on any repository-pinned package :(
>
> --
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150417/bd03d745/attachment.html>

From hannes at mehnert.org  Fri Apr 17 09:51:22 2015
From: hannes at mehnert.org (Hannes Mehnert)
Date: Fri, 17 Apr 2015 09:51:22 +0100
Subject: [ocaml-platform] Secure OPAM?
In-Reply-To: <CAPFanBH9wUtSiv3_J20yC050Mx-WFX8-94FBu+7hMvxdG8GOXQ@mail.gmail.com>
References: <CAPFanBHVJvKwGOsy8zzrJc6QySiXqvQTwKoZurvOYkKJP5sBmg@mail.gmail.com>
 <20150330180127.54d786f4@kiwi.local.tld>
 <CAPFanBH9wUtSiv3_J20yC050Mx-WFX8-94FBu+7hMvxdG8GOXQ@mail.gmail.com>
Message-ID: <5530C98A.7060907@mehnert.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA384

Gabriel,

On 04/17/2015 08:52, Gabriel Scherer wrote:
> (Since this thread was last active there have been very promising 
> discussions on security that could see the day for OPAM 1.3.)
> 
> This list may be interested in the recent plan/proposal for
> security in Hackage (Haskell's package distribution
> infrastructure), which are basically "follow TUF": 
> http://www.well-typed.com/blog/2015/04/improving-hackage-security/

thanks for the pointer.  A very well written proposal.  Some
discussion was on the opam-devel mailing list [1].  The general idea
is very similar to Haskell: use TUF, make it painless for package
maintainers.  Louis and I wanted to come up with concrete usage
scenarios (client / maintainer / new maintainer / key revocation/loss).


hannes


1: http://lists.ocaml.org/pipermail/opam-devel/2015-March/000991.html

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCQAGBQJVMMmKAAoJELyJZYjffCju85wP/j8sjfLvth1j+qbMq3ImR5vB
hgcs6em2P9QCAGRLHUJCQzzkXBYUT/Mdh2QbaFd8XboG/GPioose3DH3RyGn8dmD
4Z2qCWPLcWZDMgZE+2R2sV5PihRGnyAmiGlQN6PTopp2UxawnSHpTb0Go7kHQ08I
SaBQxQ8v2PvfX2ZVBvS8y/ZifOxhzfqAudua5qfTiJivC9YRvQgizopCFC8pnEDX
KAMzSeoIKID4/b7tLdp56c01IVxfhxeWFcFHF8rzEJJ7jh2T6EKL67CUNTYFKkL1
3ExdClsMQF6xSBC/tgTRlRXyPNCAz9k48PE/I7PpVDpf4MWnIIfisQ1BiMO3Klm/
v+c78zhdEQ6MTj49xESaMWZrigEhstRMQomJWA9XoYBBS+Ki+FnyYwx++dpH7V4k
FmPx3++r0zo2beKL79fQrPT3Z8cYjPJC8RXllq9JJQtFozYgJctGuGGB3c+0iAQR
bKV3yNfzM8AXPo0p25tlwCi4Eu3NpZsjK4LY3eXp8+uejTqDAQnHgVpTO3q/XSfk
A6tiiAUv4veYLmlpYEljZHnpLVASFKpLAD5z80kTrLwKAZsju5DaKx0pCOrXBQqF
3W3EeHKw9QO6RNuGKBXCtcbTIqpz59uvwECJa40+Egmh6yTKce7zpdQAjpF/dxPF
feRiWfuTtImBa8EVfn74
=0kwQ
-----END PGP SIGNATURE-----

From louis.gesbert at ocamlpro.com  Fri Apr 17 10:00:59 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Fri, 17 Apr 2015 18:00:59 +0900
Subject: [ocaml-platform] Secure OPAM?
In-Reply-To: <5530C98A.7060907@mehnert.org>
References: <CAPFanBHVJvKwGOsy8zzrJc6QySiXqvQTwKoZurvOYkKJP5sBmg@mail.gmail.com>
 <CAPFanBH9wUtSiv3_J20yC050Mx-WFX8-94FBu+7hMvxdG8GOXQ@mail.gmail.com>
 <5530C98A.7060907@mehnert.org>
Message-ID: <3063788.SGJOZM9lFp@agaric>

Yes, I'm on it, there has been a little bit of lag on my part as I
was quite busy refactoring OPAM's infrastructure [1], which should really
pay off when we start the implementation, and make it more robust. Rest
assured the signing ideas keep maturing in the meantime :)

[1] https://github.com/ocaml/opam/issues/2106

> - Hannes Mehnert, 17/04/2015 09:51 -
> Gabriel,
> 
> On 04/17/2015 08:52, Gabriel Scherer wrote:
> > (Since this thread was last active there have been very promising
> > discussions on security that could see the day for OPAM 1.3.)
> >
> > This list may be interested in the recent plan/proposal for
> > security in Hackage (Haskell's package distribution
> > infrastructure), which are basically "follow TUF":
> > http://www.well-typed.com/blog/2015/04/improving-hackage-security/
> 
> thanks for the pointer.  A very well written proposal.  Some
> discussion was on the opam-devel mailing list [1].  The general idea
> is very similar to Haskell: use TUF, make it painless for package
> maintainers.  Louis and I wanted to come up with concrete usage
> scenarios (client / maintainer / new maintainer / key revocation/loss).
> 
> 
> hannes
> 
> 
> 1: http://lists.ocaml.org/pipermail/opam-devel/2015-March/000991.html
> 
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform
> 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 473 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150417/3bfbe86a/attachment.sig>

From kim at nguyen.vg  Wed Apr 22 16:20:17 2015
From: kim at nguyen.vg (=?UTF-8?B?S2ltIE5ndXnhu4Vu?=)
Date: Wed, 22 Apr 2015 17:20:17 +0200
Subject: [ocaml-platform] Problem with the lib directory in opam's directory
	hierarchy
Message-ID: <CAJCP7wEUFWjvrK2tuDf-wiH16R3Er_e6j2PQjj=TAxWj4uF32g@mail.gmail.com>

Hi,


It is my understanding that for compiler "foo", opam creates a
standard directory hierarchy under ~/.opam/foo/, with the usual
directories such as bin, etc, lib, share, doc.

The problem lies with the lib directory. It seems that lib is used
both as the usual lib directory (i.e. the opam equivalent of
$PREFIX/lib) and as the base directory for ocamlfind packages. Usually
(e.g. in debian or by installing from sources) the META file and
runtime support for the ocaml package 'bar' would go in `ocamlc
-where`/bar/, while the binary files used by the package go into
$PREFIX/lib/.

Under opam, both sets of files end-up in the same directory, which
breaks the "usual" make uninstall rule:

uninstall:
       ... stuff ...
       rm -rf "$PREFIX"/lib/bar/
       ocamlfind remove bar

In that case, ocamlfind will not find its files and complain when
uninstalling. If we switch the two lines, ocamlfind complains with a
warning if there are directories within bar/ (since the ocamlfind
hierarchy is supposed to be flat for a given package).

The way that would work in both opam and non opam setups would be:

rm -rf "$PREFIX"/lib/bar/...all the files that are installed...
ocamlfind remove bar
rm -rf "$PREFIX"/lib/bar/

(The last line is to not leave a dangling empty bar directory in the
normal case where the two dirs are distincts. In the opam case, the
directory is removed by ocamlfind remove).

Is there a better way to do this ? (I'm not asking to change the opam
directory structure, I just want to understand the best way to be
compatible with both distrib packagers and opam packagers).
Also, is it considered good practice to put in an ocamlfind package
directory files or subdirectory that were not installed via ocamlfind
install ?

Best,
-- 
Kim

From daniel.buenzli at erratique.ch  Wed Apr 22 16:31:31 2015
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Wed, 22 Apr 2015 17:31:31 +0200
Subject: [ocaml-platform] Problem with the lib directory in opam's
 directory hierarchy
In-Reply-To: <CAJCP7wEUFWjvrK2tuDf-wiH16R3Er_e6j2PQjj=TAxWj4uF32g@mail.gmail.com>
References: <CAJCP7wEUFWjvrK2tuDf-wiH16R3Er_e6j2PQjj=TAxWj4uF32g@mail.gmail.com>
Message-ID: <2D177475F0094A5188C7AB37E3440375@erratique.ch>

Le mercredi, 22 avril 2015 ? 17:20, Kim Nguy?n a ?crit :
> Is there a better way to do this ? (I'm not asking to change the opam
> directory structure, I just want to understand the best way to be
> compatible with both distrib packagers and opam packagers).

I think the simple answer (but other may want to confirm) is to not use `ocamlfind remove` at all. Once you removed the directory you are done. `ocamlfind remove` doesn't do anything more than removing the META file which you already destroyed.

> Also, is it considered good practice to put in an ocamlfind package
> directory files or subdirectory that were not installed via ocamlfind
> install ?

There should be no problem with that. You should really see ocamlfind as something that simply reads and interprets META file wherever they are. For example all my packages are usable with ocamlfind but I install them and remove them without using `ocamlfind` *at all* (I use opam's .install file, which opam handles automatically).  

Best,

Daniel



From thomas at gazagnaire.org  Wed Apr 22 18:20:30 2015
From: thomas at gazagnaire.org (Thomas Gazagnaire)
Date: Wed, 22 Apr 2015 18:20:30 +0100
Subject: [ocaml-platform] Problem with the lib directory in opam's
	directory hierarchy
In-Reply-To: <2D177475F0094A5188C7AB37E3440375@erratique.ch>
References: <CAJCP7wEUFWjvrK2tuDf-wiH16R3Er_e6j2PQjj=TAxWj4uF32g@mail.gmail.com>
 <2D177475F0094A5188C7AB37E3440375@erratique.ch>
Message-ID: <0EB3D86D-6303-48EE-B1BD-671662141AA9@gazagnaire.org>

>> Is there a better way to do this ? (I'm not asking to change the opam
>> directory structure, I just want to understand the best way to be
>> compatible with both distrib packagers and opam packagers).
> 
> I think the simple answer (but other may want to confirm) is to not use `ocamlfind remove` at all. Once you removed the directory you are done. `ocamlfind remove` doesn't do anything more than removing the META file which you already destroyed.

That's unfortunately not totally true if you are also installing C stubs. In that case you will have stuff in $prefix/stublibs as well. But in most cases it is indeed correct.

Best,
Thomas

>> Also, is it considered good practice to put in an ocamlfind package
>> directory files or subdirectory that were not installed via ocamlfind
>> install ?
> 
> There should be no problem with that. You should really see ocamlfind as something that simply reads and interprets META file wherever they are. For example all my packages are usable with ocamlfind but I install them and remove them without using `ocamlfind` *at all* (I use opam's .install file, which opam handles automatically).  


From kim at nguyen.vg  Wed Apr 22 18:50:34 2015
From: kim at nguyen.vg (=?UTF-8?B?S2ltIE5ndXnhu4Vu?=)
Date: Wed, 22 Apr 2015 19:50:34 +0200
Subject: [ocaml-platform] Problem with the lib directory in opam's
 directory hierarchy
In-Reply-To: <2D177475F0094A5188C7AB37E3440375@erratique.ch>
References: <CAJCP7wEUFWjvrK2tuDf-wiH16R3Er_e6j2PQjj=TAxWj4uF32g@mail.gmail.com>
 <2D177475F0094A5188C7AB37E3440375@erratique.ch>
Message-ID: <CAJCP7wFYpToGchCwY3JHR1SpH0eSZhy9hBiJXz6FPyVvWumpew@mail.gmail.com>

On Wed, Apr 22, 2015 at 5:31 PM, Daniel B?nzli
<daniel.buenzli at erratique.ch> wrote:
> Le mercredi, 22 avril 2015 ? 17:20, Kim Nguy?n a ?crit :
>> Is there a better way to do this ? (I'm not asking to change the opam
>> directory structure, I just want to understand the best way to be
>> compatible with both distrib packagers and opam packagers).
>
> I think the simple answer (but other may want to confirm) is to not use `ocamlfind remove` at all. Once you removed the directory you are done. `ocamlfind remove` doesn't do anything more than removing the META file which you already destroyed.

I see. But this works for an opam setting. Imagine my program is
installed from source "a la mano". I certainly don't want to leave a
META file and the cma/cmxa lying around, furthermore, I imagine (but I
could be wrong) that e.g. Debian or Fedora packages configure findlib
to look for META files in specific directories (say /usr/lib/ocaml/
instead of the default /usr/local/lib/ocaml/x.y/) and the only way to
install/remove my META file in such a place is to use ocamlfind
install/remove.

>> Also, is it considered good practice to put in an ocamlfind package
>> directory files or subdirectory that were not installed via ocamlfind
>> install ?
>
> There should be no problem with that. You should really see ocamlfind as something that simply reads and interprets META file wherever they are. For example all my packages are usable with ocamlfind but I install them and remove them without using `ocamlfind` *at all* (I use opam's .install file, which opam handles automatically).

My question was more that my program has a ./configure script which
accepts the usual --prefix switch (plus the others, bindir, docdir
etc.) to know where to install stuff, and I also wish to publish a
META. Can I make a Makefile that is not overly convoluted (for that
part) and that will work for source install, distrib packagers and
opam ?

Best,
-- 
Kim

