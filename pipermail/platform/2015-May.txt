From trevorsummerssmith at gmail.com  Tue May  5 19:58:16 2015
From: trevorsummerssmith at gmail.com (Trevor Smith)
Date: Tue, 5 May 2015 14:58:16 -0400
Subject: [ocaml-platform] Dev Version as Package?
Message-ID: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>

Hi all,

We're using opam internally at work. I have two use cases for our internal
libraries:

1) "dev dependencies" -- I want what is in the repo.
2) "explicit dependency" -- I want a given version.

opam has #2 covered.

However it is not clear to me how to do #1 correctly. I can, on a given
machine (ie not on an opam repository), pin a given package to a git repo.
But locally pinning isn't what I want. I want a package in an opam
repository to say "I depend upon this other dev package" so that our build
boxes, and various developer machines will all do the same thing, and I
don't need to separately pin everything on each box.

Has anyone else encountered this situation before?

Thoughts? Thanks.

Trevor
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150505/69e7eb4e/attachment.html>

From agarwal1975 at gmail.com  Tue May  5 20:13:56 2015
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Tue, 5 May 2015 15:13:56 -0400
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
Message-ID: <CAMu2m2JoGVRtTgmqb3YPGg_RhSQH8=waPk2iw6+pzDEEEBBRdA@mail.gmail.com>

> Has anyone else encountered this situation before?

Yes, and I also would be interested in a good solution. One idea we had was
to share switch configurations. I'd like to say here's a whole switch: it
has this name, these remotes (if remotes were switch specific), these pins,
etc. Then, I want to share this config with my team, and declare that a
build machine should switch to this particular config. I have no idea how
to do this though, other than hacking some shell script.


On Tue, May 5, 2015 at 2:58 PM, Trevor Smith <trevorsummerssmith at gmail.com>
wrote:

> Hi all,
>
> We're using opam internally at work. I have two use cases for our internal
> libraries:
>
> 1) "dev dependencies" -- I want what is in the repo.
> 2) "explicit dependency" -- I want a given version.
>
> opam has #2 covered.
>
> However it is not clear to me how to do #1 correctly. I can, on a given
> machine (ie not on an opam repository), pin a given package to a git repo.
> But locally pinning isn't what I want. I want a package in an opam
> repository to say "I depend upon this other dev package" so that our build
> boxes, and various developer machines will all do the same thing, and I
> don't need to separately pin everything on each box.
>
> Has anyone else encountered this situation before?
>
> Thoughts? Thanks.
>
> Trevor
>
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150505/3875716c/attachment.html>

From mmatalka at gmail.com  Tue May  5 20:19:24 2015
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Tue, 05 May 2015 19:19:24 +0000
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 (Trevor Smith's message of "Tue, 5 May 2015 14:58:16 -0400")
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
Message-ID: <878ud2al37.fsf@gmail.com>

Each project I have has its own opam repo which I put as higher priority
to the basic one.  Does this do what you want?

Trevor Smith <trevorsummerssmith at gmail.com> writes:

> Hi all,
>
> We're using opam internally at work. I have two use cases for our internal
> libraries:
>
> 1) "dev dependencies" -- I want what is in the repo.
> 2) "explicit dependency" -- I want a given version.
>
> opam has #2 covered.
>
> However it is not clear to me how to do #1 correctly. I can, on a given
> machine (ie not on an opam repository), pin a given package to a git repo.
> But locally pinning isn't what I want. I want a package in an opam
> repository to say "I depend upon this other dev package" so that our build
> boxes, and various developer machines will all do the same thing, and I
> don't need to separately pin everything on each box.
>
> Has anyone else encountered this situation before?
>
> Thoughts? Thanks.
>
> Trevor
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform

From thomas at gazagnaire.org  Tue May  5 20:30:46 2015
From: thomas at gazagnaire.org (Thomas Gazagnaire)
Date: Tue, 5 May 2015 20:30:46 +0100
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
Message-ID: <C6E66614-D200-49E0-91A6-5CB82FFFECDE@gazagnaire.org>

> 1) "dev dependencies" -- I want what is in the repo.
> 2) "explicit dependency" -- I want a given version.
> 
> opam has #2 covered.
> 
> However it is not clear to me how to do #1 correctly. I can, on a given machine (ie not on an opam repository), pin a given package to a git repo. But locally pinning isn't what I want. I want a package in an opam repository to say "I depend upon this other dev package" so that our build boxes, and various developer machines will all do the same thing, and I don't need to separately pin everything on each box.
> 
> Has anyone else encountered this situation before?

you can use dev package in your repo, see for instance https://github.com/samoht/mirage-dev/blob/master/packages/mirage-profile/mirage-profile.0.1/url <https://github.com/samoht/mirage-dev/blob/master/packages/mirage-profile/mirage-profile.0.1/url>

you can either specify a given hash/tag using git: "path.git#tag"

Sharing pins can be done by syncrhonizing ~/.opam/<switch>/pinned and ~/.opam/<switch>/overlay between your machines, but be aware that these paths might change between opam versions.

Thomas
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150505/972c1984/attachment.html>

From thomas.braibant at gmail.com  Tue May  5 20:42:55 2015
From: thomas.braibant at gmail.com (Thomas Braibant)
Date: Tue, 5 May 2015 21:42:55 +0200
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <878ud2al37.fsf@gmail.com>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <878ud2al37.fsf@gmail.com>
Message-ID: <CAHR=VkwTqNW9zrBk+kaYWuPmgsj6yY8mq6z6XtEp7E11gWd2bg@mail.gmail.com>

Hi,

We faced this issue at work too. The typical issue is "I want to depend on
this particular branch of a third party repository". Pinning packages
locally would work, but we want something that we can push on CI and build
servers, and share in the team (and keep in the git history of the
project).

The solution we came up with is as follows: in our dev repository
`project`, we keep a particular opam repository `project/opam-repository`.
This repository contains shadow opam packages. For instance, if I want to
depend on branch bar of a public project foo, we just add a new version of
the opam package for foo in `project/opam-repository/packages`, with an
explicit version number, and with an url like `path-to-project-foo#bar`.
Then, we keep a opam file in `project` that specifies the explicit
dependencies (given version of public package) and the dev dependencies
(home brewed version of public packages). The dev dependencies can only be
met using the shadow opam files.

Then, our CI/build scripts use something like
```
opam remote remove shadow-opam-repository
opam remote add shadow-opam-repository ./opam-repository
opam update
opam pin add --no-action project ./ -y
opam install --deps-only project -y
```

Changing version of packages for all devs and our servers is done by
commiting changes either to the opam-repository or to the opam file in the
project.

Hope that helps.
Thomas





On Tue, May 5, 2015 at 9:19 PM, Malcolm Matalka <mmatalka at gmail.com> wrote:

> Each project I have has its own opam repo which I put as higher priority
> to the basic one.  Does this do what you want?
>
> Trevor Smith <trevorsummerssmith at gmail.com> writes:
>
> > Hi all,
> >
> > We're using opam internally at work. I have two use cases for our
> internal
> > libraries:
> >
> > 1) "dev dependencies" -- I want what is in the repo.
> > 2) "explicit dependency" -- I want a given version.
> >
> > opam has #2 covered.
> >
> > However it is not clear to me how to do #1 correctly. I can, on a given
> > machine (ie not on an opam repository), pin a given package to a git
> repo.
> > But locally pinning isn't what I want. I want a package in an opam
> > repository to say "I depend upon this other dev package" so that our
> build
> > boxes, and various developer machines will all do the same thing, and I
> > don't need to separately pin everything on each box.
> >
> > Has anyone else encountered this situation before?
> >
> > Thoughts? Thanks.
> >
> > Trevor
> > _______________________________________________
> > Platform mailing list
> > Platform at lists.ocaml.org
> > http://lists.ocaml.org/listinfo/platform
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150505/d7ee728a/attachment-0001.html>

From trevorsummerssmith at gmail.com  Wed May  6 02:35:00 2015
From: trevorsummerssmith at gmail.com (Trevor Smith)
Date: Tue, 5 May 2015 21:35:00 -0400
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <CAHR=VkwTqNW9zrBk+kaYWuPmgsj6yY8mq6z6XtEp7E11gWd2bg@mail.gmail.com>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <878ud2al37.fsf@gmail.com>
 <CAHR=VkwTqNW9zrBk+kaYWuPmgsj6yY8mq6z6XtEp7E11gWd2bg@mail.gmail.com>
Message-ID: <CAG-KTt-jd1Xwu_cA6nnYOyw-RhNNDHyHqPvS-wYPU_qHFgMD7w@mail.gmail.com>

Wow! Excited to see everyone jumping in. I appreciate everyone's
contributions. Helpful to see how different people are dealing with this.

@Thomas you pointed me in the direction of what I needed. I see that I
overlooked that on reading about repositories, and it is documented at:
http://opam.ocaml.org/doc/Manual.html#Repospecification

What I want to do is emulate Maven SNAPSHOT functionality (described here:
http://stackoverflow.com/questions/5901378/what-exactly-is-a-maven-snapshot-and-why-do-we-need-it
).

I'm going to try to have an internal opam repo with {package-name}.dev for
all internal libraries. This dev version will reference a git repo in the
url file. Dependent projects will reference dev as we are building. When we
make a release we'll do the normal thing and create a version. This
strategy should scale well -- if one has multiple concurrent long-lived
versions one can use version "-dev" (again as in Maven SNAPSHOTS). If this
ends up serving us well I'll shoot out a blog post about it as it seems
there is a lot of interest and different solutions around this topic.

Thoughts? Thanks again for everyone's input.

Trevor

On Tue, May 5, 2015 at 3:42 PM, Thomas Braibant <thomas.braibant at gmail.com>
wrote:

> Hi,
>
> We faced this issue at work too. The typical issue is "I want to depend on
> this particular branch of a third party repository". Pinning packages
> locally would work, but we want something that we can push on CI and build
> servers, and share in the team (and keep in the git history of the
> project).
>
> The solution we came up with is as follows: in our dev repository
> `project`, we keep a particular opam repository `project/opam-repository`.
> This repository contains shadow opam packages. For instance, if I want to
> depend on branch bar of a public project foo, we just add a new version of
> the opam package for foo in `project/opam-repository/packages`, with an
> explicit version number, and with an url like `path-to-project-foo#bar`.
> Then, we keep a opam file in `project` that specifies the explicit
> dependencies (given version of public package) and the dev dependencies
> (home brewed version of public packages). The dev dependencies can only be
> met using the shadow opam files.
>
> Then, our CI/build scripts use something like
> ```
> opam remote remove shadow-opam-repository
> opam remote add shadow-opam-repository ./opam-repository
> opam update
> opam pin add --no-action project ./ -y
> opam install --deps-only project -y
> ```
>
> Changing version of packages for all devs and our servers is done by
> commiting changes either to the opam-repository or to the opam file in the
> project.
>
> Hope that helps.
> Thomas
>
>
>
>
>
> On Tue, May 5, 2015 at 9:19 PM, Malcolm Matalka <mmatalka at gmail.com>
> wrote:
>
>> Each project I have has its own opam repo which I put as higher priority
>> to the basic one.  Does this do what you want?
>>
>> Trevor Smith <trevorsummerssmith at gmail.com> writes:
>>
>> > Hi all,
>> >
>> > We're using opam internally at work. I have two use cases for our
>> internal
>> > libraries:
>> >
>> > 1) "dev dependencies" -- I want what is in the repo.
>> > 2) "explicit dependency" -- I want a given version.
>> >
>> > opam has #2 covered.
>> >
>> > However it is not clear to me how to do #1 correctly. I can, on a given
>> > machine (ie not on an opam repository), pin a given package to a git
>> repo.
>> > But locally pinning isn't what I want. I want a package in an opam
>> > repository to say "I depend upon this other dev package" so that our
>> build
>> > boxes, and various developer machines will all do the same thing, and I
>> > don't need to separately pin everything on each box.
>> >
>> > Has anyone else encountered this situation before?
>> >
>> > Thoughts? Thanks.
>> >
>> > Trevor
>> > _______________________________________________
>> > Platform mailing list
>> > Platform at lists.ocaml.org
>> > http://lists.ocaml.org/listinfo/platform
>> _______________________________________________
>> Platform mailing list
>> Platform at lists.ocaml.org
>> http://lists.ocaml.org/listinfo/platform
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150505/e48dc3cd/attachment.html>

From thomas.braibant at gmail.com  Wed May  6 09:51:49 2015
From: thomas.braibant at gmail.com (Thomas Braibant)
Date: Wed, 6 May 2015 10:51:49 +0200
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <CAG-KTt-jd1Xwu_cA6nnYOyw-RhNNDHyHqPvS-wYPU_qHFgMD7w@mail.gmail.com>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <878ud2al37.fsf@gmail.com>
 <CAHR=VkwTqNW9zrBk+kaYWuPmgsj6yY8mq6z6XtEp7E11gWd2bg@mail.gmail.com>
 <CAG-KTt-jd1Xwu_cA6nnYOyw-RhNNDHyHqPvS-wYPU_qHFgMD7w@mail.gmail.com>
Message-ID: <CAHR=Vkzow6uD=Cc81XMmP5QpsDyBp76OLca92+E2TORrqwfacQ@mail.gmail.com>

Hi,

I'm going to try to have an internal opam repo with {package-name}.dev for
> all internal libraries. This dev version will reference a git repo in the
> url file. Dependent projects will reference dev as we are building. When we
> make a release we'll do the normal thing and create a version. This
> strategy should scale well -- if one has multiple concurrent long-lived
> versions one can use version "-dev" (again as in Maven SNAPSHOTS). If this
> ends up serving us well I'll shoot out a blog post about it as it seems
> there is a lot of interest and different solutions around this topic.
>
>
Well, we choose to host this internal opam repository in the source code of
our main project, which helps scaling down the issue of having multiple
concurrent long lived versions of dev packages. That way, we keep all the
data relevant to how we built the project in one single place (we do not
have to cross reference the contents of a shared opam-repository with the
state of the project we built when we try to investigate something).

That being said, having to depend on such a repository is a pain. What we
would really to do from a user perspective is to have something like that
in the project opam file

```
opam-version: "1.2"
...
depends: [
  "asn1-combinators" { = "0.1.1" }
  ...
  "foo" { git: "path-to-git/foo#bar"}
]
```

If the foo repository contains an opam file, this would work almost as well
as dev-repos, except that's something that can be configured by the user of
the package rather than by the developer of the package.

Thoughts?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150506/71e87f8f/attachment.html>

From thomas at gazagnaire.org  Wed May  6 14:05:03 2015
From: thomas at gazagnaire.org (Thomas Gazagnaire)
Date: Wed, 6 May 2015 14:05:03 +0100
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <CAHR=VkwTqNW9zrBk+kaYWuPmgsj6yY8mq6z6XtEp7E11gWd2bg@mail.gmail.com>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <878ud2al37.fsf@gmail.com>
 <CAHR=VkwTqNW9zrBk+kaYWuPmgsj6yY8mq6z6XtEp7E11gWd2bg@mail.gmail.com>
Message-ID: <3959EF58-79BB-4BB4-8195-B60044EB153C@gazagnaire.org>

> ```
> opam remote remove shadow-opam-repository 
> opam remote add shadow-opam-repository ./opam-repository
> opam update
> opam pin add --no-action project ./ -y 
> opam install --deps-only project -y
> ```
> 
> Changing version of packages for all devs and our servers is done by commiting changes either to the opam-repository or to the opam file in the project.

That's pretty neat! Would maybe be nice to support relative url in the packages to store the local package in the local repository, so you don't have to pin.

> That being said, having to depend on such a repository is a pain. What we would really to do from a user perspective is to have something like that in the project opam file 
> 
> ```
> opam-version: "1.2"
> ...
> depends: [
>   "asn1-combinators" { = "0.1.1" }
>   ...
>   "foo" { git: "path-to-git/foo#bar"}
> ]
> ```

Louis will tell you (with reason) that by doing so you will need a fix-point resolver (as the "foo" package which introduce some yet unknown new constraints in your system) so this scheme is pretty difficult to implement.

That being said, that would be nice to have a way to easily import a list of pinned package. Need to double-check but I think that `opam switch export/import` preserves the pin packages so that should be enough for your use case.

Thomas


> On Tue, May 5, 2015 at 9:19 PM, Malcolm Matalka <mmatalka at gmail.com <mailto:mmatalka at gmail.com>> wrote:
> Each project I have has its own opam repo which I put as higher priority
> to the basic one.  Does this do what you want?
> 
> Trevor Smith <trevorsummerssmith at gmail.com <mailto:trevorsummerssmith at gmail.com>> writes:
> 
> > Hi all,
> >
> > We're using opam internally at work. I have two use cases for our internal
> > libraries:
> >
> > 1) "dev dependencies" -- I want what is in the repo.
> > 2) "explicit dependency" -- I want a given version.
> >
> > opam has #2 covered.
> >
> > However it is not clear to me how to do #1 correctly. I can, on a given
> > machine (ie not on an opam repository), pin a given package to a git repo.
> > But locally pinning isn't what I want. I want a package in an opam
> > repository to say "I depend upon this other dev package" so that our build
> > boxes, and various developer machines will all do the same thing, and I
> > don't need to separately pin everything on each box.
> >
> > Has anyone else encountered this situation before?
> >
> > Thoughts? Thanks.
> >
> > Trevor
> > _______________________________________________
> > Platform mailing list
> > Platform at lists.ocaml.org <mailto:Platform at lists.ocaml.org>
> > http://lists.ocaml.org/listinfo/platform <http://lists.ocaml.org/listinfo/platform>
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org <mailto:Platform at lists.ocaml.org>
> http://lists.ocaml.org/listinfo/platform <http://lists.ocaml.org/listinfo/platform>
> 
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150506/da59f037/attachment.html>

From trevorsummerssmith at gmail.com  Wed May  6 14:22:02 2015
From: trevorsummerssmith at gmail.com (Trevor Smith)
Date: Wed, 6 May 2015 09:22:02 -0400
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <CAHR=Vkzow6uD=Cc81XMmP5QpsDyBp76OLca92+E2TORrqwfacQ@mail.gmail.com>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <878ud2al37.fsf@gmail.com>
 <CAHR=VkwTqNW9zrBk+kaYWuPmgsj6yY8mq6z6XtEp7E11gWd2bg@mail.gmail.com>
 <CAG-KTt-jd1Xwu_cA6nnYOyw-RhNNDHyHqPvS-wYPU_qHFgMD7w@mail.gmail.com>
 <CAHR=Vkzow6uD=Cc81XMmP5QpsDyBp76OLca92+E2TORrqwfacQ@mail.gmail.com>
Message-ID: <CAG-KTt--kj8DtCX5L9B-CuYETSCL3tJcwpYnnVOhtUgZW+VNBA@mail.gmail.com>

@Thomas Braibant -- why is having to depend on this other repository a
pain? It's not clear to me. Can you explain more? It seems to me there
would only be a single repository to add, one time. But I am probably
missing something.

Thanks.

Trevor

On Wed, May 6, 2015 at 4:51 AM, Thomas Braibant <thomas.braibant at gmail.com>
wrote:

> Hi,
>
> I'm going to try to have an internal opam repo with {package-name}.dev for
>> all internal libraries. This dev version will reference a git repo in the
>> url file. Dependent projects will reference dev as we are building. When we
>> make a release we'll do the normal thing and create a version. This
>> strategy should scale well -- if one has multiple concurrent long-lived
>> versions one can use version "-dev" (again as in Maven SNAPSHOTS). If this
>> ends up serving us well I'll shoot out a blog post about it as it seems
>> there is a lot of interest and different solutions around this topic.
>>
>>
> Well, we choose to host this internal opam repository in the source code
> of our main project, which helps scaling down the issue of having multiple
> concurrent long lived versions of dev packages. That way, we keep all the
> data relevant to how we built the project in one single place (we do not
> have to cross reference the contents of a shared opam-repository with the
> state of the project we built when we try to investigate something).
>
> That being said, having to depend on such a repository is a pain. What we
> would really to do from a user perspective is to have something like that
> in the project opam file
>
> ```
> opam-version: "1.2"
> ...
> depends: [
>   "asn1-combinators" { = "0.1.1" }
>   ...
>   "foo" { git: "path-to-git/foo#bar"}
> ]
> ```
>
> If the foo repository contains an opam file, this would work almost as
> well as dev-repos, except that's something that can be configured by the
> user of the package rather than by the developer of the package.
>
> Thoughts?
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150506/2d7d86f3/attachment.html>

From thomas.braibant at gmail.com  Wed May  6 15:25:08 2015
From: thomas.braibant at gmail.com (Thomas Braibant)
Date: Wed, 6 May 2015 16:25:08 +0200
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <CAG-KTt--kj8DtCX5L9B-CuYETSCL3tJcwpYnnVOhtUgZW+VNBA@mail.gmail.com>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <878ud2al37.fsf@gmail.com>
 <CAHR=VkwTqNW9zrBk+kaYWuPmgsj6yY8mq6z6XtEp7E11gWd2bg@mail.gmail.com>
 <CAG-KTt-jd1Xwu_cA6nnYOyw-RhNNDHyHqPvS-wYPU_qHFgMD7w@mail.gmail.com>
 <CAHR=Vkzow6uD=Cc81XMmP5QpsDyBp76OLca92+E2TORrqwfacQ@mail.gmail.com>
 <CAG-KTt--kj8DtCX5L9B-CuYETSCL3tJcwpYnnVOhtUgZW+VNBA@mail.gmail.com>
Message-ID: <CAHR=VkxmFFPA=PJEAchUhi6WOPCZf9JFra6CVWyq-ru2+zDZ9w@mail.gmail.com>

Well, this single repository needs to be added once per project. And it
contains some redundant information with respect to your main repository.
For instance, you might be tempted to duplicate the descr file and some
part of the opam file. With the url in opam file scheme, you wouldn't need
to duplicate this, since you would be able to get all the relevant
information in the opam file of the target package.



On Wed, May 6, 2015 at 3:22 PM, Trevor Smith <trevorsummerssmith at gmail.com>
wrote:

> @Thomas Braibant -- why is having to depend on this other repository a
> pain? It's not clear to me. Can you explain more? It seems to me there
> would only be a single repository to add, one time. But I am probably
> missing something.
>
> Thanks.
>
> Trevor
>
> On Wed, May 6, 2015 at 4:51 AM, Thomas Braibant <thomas.braibant at gmail.com
> > wrote:
>
>> Hi,
>>
>> I'm going to try to have an internal opam repo with {package-name}.dev
>>> for all internal libraries. This dev version will reference a git repo in
>>> the url file. Dependent projects will reference dev as we are building.
>>> When we make a release we'll do the normal thing and create a version. This
>>> strategy should scale well -- if one has multiple concurrent long-lived
>>> versions one can use version "-dev" (again as in Maven SNAPSHOTS). If this
>>> ends up serving us well I'll shoot out a blog post about it as it seems
>>> there is a lot of interest and different solutions around this topic.
>>>
>>>
>> Well, we choose to host this internal opam repository in the source code
>> of our main project, which helps scaling down the issue of having multiple
>> concurrent long lived versions of dev packages. That way, we keep all the
>> data relevant to how we built the project in one single place (we do not
>> have to cross reference the contents of a shared opam-repository with the
>> state of the project we built when we try to investigate something).
>>
>> That being said, having to depend on such a repository is a pain. What we
>> would really to do from a user perspective is to have something like that
>> in the project opam file
>>
>> ```
>> opam-version: "1.2"
>> ...
>> depends: [
>>   "asn1-combinators" { = "0.1.1" }
>>   ...
>>   "foo" { git: "path-to-git/foo#bar"}
>> ]
>> ```
>>
>> If the foo repository contains an opam file, this would work almost as
>> well as dev-repos, except that's something that can be configured by the
>> user of the package rather than by the developer of the package.
>>
>> Thoughts?
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150506/7cb86595/attachment-0001.html>

From agarwal1975 at gmail.com  Wed May  6 16:51:32 2015
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Wed, 6 May 2015 11:51:32 -0400
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <CAHR=Vkzow6uD=Cc81XMmP5QpsDyBp76OLca92+E2TORrqwfacQ@mail.gmail.com>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <878ud2al37.fsf@gmail.com>
 <CAHR=VkwTqNW9zrBk+kaYWuPmgsj6yY8mq6z6XtEp7E11gWd2bg@mail.gmail.com>
 <CAG-KTt-jd1Xwu_cA6nnYOyw-RhNNDHyHqPvS-wYPU_qHFgMD7w@mail.gmail.com>
 <CAHR=Vkzow6uD=Cc81XMmP5QpsDyBp76OLca92+E2TORrqwfacQ@mail.gmail.com>
Message-ID: <CAMu2m2JiK5n2tToPvXzXLD5s_OOq455ihCdrnoHb7o+qC390nA@mail.gmail.com>

On Wed, May 6, 2015 at 4:51 AM, Thomas Braibant <thomas.braibant at gmail.com>
wrote:

depends: [
>   "asn1-combinators" { = "0.1.1" }
>   ...
>   "foo" { git: "path-to-git/foo#bar"}
> ]
>

This could be very useful. It would also help to allow {path:
$HOME/mycode}. With only git pins, developing multiple repos is still
difficult. You have to push the changes in one repo before testing them
with another repo. Sharing path pins would let multiple developers all work
on multiple repos, but each developer can still have fine control over
exactly what state each of the individual repos is at. The only slight
inconvenience is everyone has to standardize on the paths of their local
working directories, but that's not too bad as along as a $HOME variable
was allowed.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150506/0fe72a6f/attachment.html>

From thomas.braibant at gmail.com  Wed May  6 22:35:13 2015
From: thomas.braibant at gmail.com (Thomas Braibant)
Date: Wed, 6 May 2015 23:35:13 +0200
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <CAMu2m2JiK5n2tToPvXzXLD5s_OOq455ihCdrnoHb7o+qC390nA@mail.gmail.com>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <878ud2al37.fsf@gmail.com>
 <CAHR=VkwTqNW9zrBk+kaYWuPmgsj6yY8mq6z6XtEp7E11gWd2bg@mail.gmail.com>
 <CAG-KTt-jd1Xwu_cA6nnYOyw-RhNNDHyHqPvS-wYPU_qHFgMD7w@mail.gmail.com>
 <CAHR=Vkzow6uD=Cc81XMmP5QpsDyBp76OLca92+E2TORrqwfacQ@mail.gmail.com>
 <CAMu2m2JiK5n2tToPvXzXLD5s_OOq455ihCdrnoHb7o+qC390nA@mail.gmail.com>
Message-ID: <CAHR=VkyxLOkbaLud=UzhXOKZEY-wMFA3C6OUrf55Hh-NJQgfSQ@mail.gmail.com>

I am wondering how difficult it would be to have the "git pin in opam file"
feature without the fixpoint resolver. I think in many cases, the
dependencies of package foo will be subsumed by the other dependencies
listed in the opam file.
If they are not, I would be happy to have the solver fail, telling me that
this situation is too complicated for now. In that case, I would be happy
either to come back to my shadow repository solution, or to inline the
dependencies in my opam file.


On Wed, May 6, 2015 at 5:51 PM, Ashish Agarwal <agarwal1975 at gmail.com>
wrote:

> On Wed, May 6, 2015 at 4:51 AM, Thomas Braibant <thomas.braibant at gmail.com
> > wrote:
>
> depends: [
>>   "asn1-combinators" { = "0.1.1" }
>>   ...
>>   "foo" { git: "path-to-git/foo#bar"}
>> ]
>>
>
> This could be very useful. It would also help to allow {path:
> $HOME/mycode}. With only git pins, developing multiple repos is still
> difficult. You have to push the changes in one repo before testing them
> with another repo. Sharing path pins would let multiple developers all work
> on multiple repos, but each developer can still have fine control over
> exactly what state each of the individual repos is at. The only slight
> inconvenience is everyone has to standardize on the paths of their local
> working directories, but that's not too bad as along as a $HOME variable
> was allowed.
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150506/f8483efa/attachment.html>

From louis.gesbert at ocamlpro.com  Thu May  7 05:53:14 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Thu, 07 May 2015 13:53:14 +0900
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <CAMu2m2JoGVRtTgmqb3YPGg_RhSQH8=waPk2iw6+pzDEEEBBRdA@mail.gmail.com>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <CAMu2m2JoGVRtTgmqb3YPGg_RhSQH8=waPk2iw6+pzDEEEBBRdA@mail.gmail.com>
Message-ID: <18348975.fvaj3Gq1yx@agaric>

Hi all,

At the moment, you have basically two solutions:

- use a repository with `url` files pointing to version control ; this has been covered already. The repo-per-package trick is quite interesting though.

This gives you all the flexibility of a full repository, but may be a little bit of work to maintain.

- use pinning. The bug-tracker mentionned `pin-bundles` to get a dev environment quickly at some point, and we actually quite have those already: you can import a set of pinnings through `opam switch import <file>`.

The format is straight-forward: one line per package, with columns for name, version, "root"/"installed"/"uninstalled", pinning kind, pinning URL. You can generate the file with `opam switch export <file>` and remove unneeded lines, or write it by hand, then distribute it.

In this scheme, one could put all pins as "uninstalled", and Thomas' script would be replaced by:
```
opam switch import pinning-state
opam pin add -n project ./ -y # if not already in pinning-state
opam install --deps-only project -y
```

This is less flexible, but is probably ligher-weight maintenance wise. A major difference is that `opam` files in all the pinned project's sources will be used.

Then you have the difference in usage between normal repo and pinned packages. For example, any install command mentionning pinned package `foo` will first update it to get the latest metadata. This won't really handle depending on dev versions, but you may declare your packages' opam files with version "dev" and depend on this version in other packages: then installing with missing pins will fail, that version not being found. Another trick could be to use `available: [ foo:pinned ]` to make the package unavailable unless foo is pinned.

If this sounds useful, but would be more convenient with more support (e.g. export only pinning data ?) -- please ask (or contribute!)

Another pinning-related trick could be to mark all your packages with a given flag (e.g. "org:foobar") and then filter them and call `opam pin add --dev-repo` on all. Would need to go through some shell-script at the moment though.

NOTE: there is something called "dev dependencies" planned (which is a dependency marked with the flag "dev", e.g. `depends: "foo" {dev & >= "1.2"}`), but it's different. It is planned to mean: ignore the dependency unless the package is pinned, and is to be used for processing artefacts that are usually in the tarball but not the git source (e.g. setup.ml)

> `depends: [ "foo" { git: "path-to-git/foo#bar"} ]`

`depends` is basically information that is fed to the solver; we could interpret this, though, as "whenever this package is to be installed, make sure to pin 'foo' first". The issue with this is that pinning imports the package's metadata from its source -- and that metadata is needed by the solver. I don't see a way to handle this that's not too ad-hoc and wouldn't lead to a confusing interface: it would be easy in the case of explicitely installing the package that has this dependency, but otherwise ? 



> - Ashish Agarwal, 05/05/2015 15:13 -
> > Has anyone else encountered this situation before?
> 
> Yes, and I also would be interested in a good solution. One idea we had was
> to share switch configurations. I'd like to say here's a whole switch: it
> has this name, these remotes (if remotes were switch specific), these pins,
> etc. Then, I want to share this config with my team, and declare that a
> build machine should switch to this particular config. I have no idea how
> to do this though, other than hacking some shell script.
> 
> 
> On Tue, May 5, 2015 at 2:58 PM, Trevor Smith <trevorsummerssmith at gmail.com>
> wrote:
> 
> > Hi all,
> >
> > We're using opam internally at work. I have two use cases for our internal
> > libraries:
> >
> > 1) "dev dependencies" -- I want what is in the repo.
> > 2) "explicit dependency" -- I want a given version.
> >
> > opam has #2 covered.
> >
> > However it is not clear to me how to do #1 correctly. I can, on a given
> > machine (ie not on an opam repository), pin a given package to a git repo.
> > But locally pinning isn't what I want. I want a package in an opam
> > repository to say "I depend upon this other dev package" so that our build
> > boxes, and various developer machines will all do the same thing, and I
> > don't need to separately pin everything on each box.
> >
> > Has anyone else encountered this situation before?
> >
> > Thoughts? Thanks.
> >
> > Trevor
> >
> > _______________________________________________
> > Platform mailing list
> > Platform at lists.ocaml.org
> > http://lists.ocaml.org/listinfo/platform
> >
> >
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 473 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150507/32917fd1/attachment.sig>

From agarwal1975 at gmail.com  Fri May  8 19:09:01 2015
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Fri, 8 May 2015 14:09:01 -0400
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <18348975.fvaj3Gq1yx@agaric>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <CAMu2m2JoGVRtTgmqb3YPGg_RhSQH8=waPk2iw6+pzDEEEBBRdA@mail.gmail.com>
 <18348975.fvaj3Gq1yx@agaric>
Message-ID: <CAMu2m2KP2rZ-Fwjz+6B-SMgPWwgf-R-j07_nb+PFu-v0bSXHEg@mail.gmail.com>

Louis, thanks for your suggestions. I'm trying them out, but one quick
question: how can you query with tags. I tried `opam list -e foobar`, and I
seem to get the same output no matter what I write for foobar.

Also, is there some convention for tags? You put "org:" as a prefix. Is
there any special interpretation of this, now or planned in the future?


On Thu, May 7, 2015 at 12:53 AM, Louis Gesbert <louis.gesbert at ocamlpro.com>
wrote:

> Hi all,
>
> At the moment, you have basically two solutions:
>
> - use a repository with `url` files pointing to version control ; this has
> been covered already. The repo-per-package trick is quite interesting
> though.
>
> This gives you all the flexibility of a full repository, but may be a
> little bit of work to maintain.
>
> - use pinning. The bug-tracker mentionned `pin-bundles` to get a dev
> environment quickly at some point, and we actually quite have those
> already: you can import a set of pinnings through `opam switch import
> <file>`.
>
> The format is straight-forward: one line per package, with columns for
> name, version, "root"/"installed"/"uninstalled", pinning kind, pinning URL.
> You can generate the file with `opam switch export <file>` and remove
> unneeded lines, or write it by hand, then distribute it.
>
> In this scheme, one could put all pins as "uninstalled", and Thomas'
> script would be replaced by:
> ```
> opam switch import pinning-state
> opam pin add -n project ./ -y # if not already in pinning-state
> opam install --deps-only project -y
> ```
>
> This is less flexible, but is probably ligher-weight maintenance wise. A
> major difference is that `opam` files in all the pinned project's sources
> will be used.
>
> Then you have the difference in usage between normal repo and pinned
> packages. For example, any install command mentionning pinned package `foo`
> will first update it to get the latest metadata. This won't really handle
> depending on dev versions, but you may declare your packages' opam files
> with version "dev" and depend on this version in other packages: then
> installing with missing pins will fail, that version not being found.
> Another trick could be to use `available: [ foo:pinned ]` to make the
> package unavailable unless foo is pinned.
>
> If this sounds useful, but would be more convenient with more support
> (e.g. export only pinning data ?) -- please ask (or contribute!)
>
> Another pinning-related trick could be to mark all your packages with a
> given flag (e.g. "org:foobar") and then filter them and call `opam pin add
> --dev-repo` on all. Would need to go through some shell-script at the
> moment though.
>
> NOTE: there is something called "dev dependencies" planned (which is a
> dependency marked with the flag "dev", e.g. `depends: "foo" {dev & >=
> "1.2"}`), but it's different. It is planned to mean: ignore the dependency
> unless the package is pinned, and is to be used for processing artefacts
> that are usually in the tarball but not the git source (e.g. setup.ml)
>
> > `depends: [ "foo" { git: "path-to-git/foo#bar"} ]`
>
> `depends` is basically information that is fed to the solver; we could
> interpret this, though, as "whenever this package is to be installed, make
> sure to pin 'foo' first". The issue with this is that pinning imports the
> package's metadata from its source -- and that metadata is needed by the
> solver. I don't see a way to handle this that's not too ad-hoc and wouldn't
> lead to a confusing interface: it would be easy in the case of explicitely
> installing the package that has this dependency, but otherwise ?
>
>
>
> > - Ashish Agarwal, 05/05/2015 15:13 -
> > > Has anyone else encountered this situation before?
> >
> > Yes, and I also would be interested in a good solution. One idea we had
> was
> > to share switch configurations. I'd like to say here's a whole switch: it
> > has this name, these remotes (if remotes were switch specific), these
> pins,
> > etc. Then, I want to share this config with my team, and declare that a
> > build machine should switch to this particular config. I have no idea how
> > to do this though, other than hacking some shell script.
> >
> >
> > On Tue, May 5, 2015 at 2:58 PM, Trevor Smith <
> trevorsummerssmith at gmail.com>
> > wrote:
> >
> > > Hi all,
> > >
> > > We're using opam internally at work. I have two use cases for our
> internal
> > > libraries:
> > >
> > > 1) "dev dependencies" -- I want what is in the repo.
> > > 2) "explicit dependency" -- I want a given version.
> > >
> > > opam has #2 covered.
> > >
> > > However it is not clear to me how to do #1 correctly. I can, on a given
> > > machine (ie not on an opam repository), pin a given package to a git
> repo.
> > > But locally pinning isn't what I want. I want a package in an opam
> > > repository to say "I depend upon this other dev package" so that our
> build
> > > boxes, and various developer machines will all do the same thing, and I
> > > don't need to separately pin everything on each box.
> > >
> > > Has anyone else encountered this situation before?
> > >
> > > Thoughts? Thanks.
> > >
> > > Trevor
> > >
> > > _______________________________________________
> > > Platform mailing list
> > > Platform at lists.ocaml.org
> > > http://lists.ocaml.org/listinfo/platform
> > >
> > >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150508/d5a96421/attachment.html>

From daniel.buenzli at erratique.ch  Fri May  8 19:24:13 2015
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Fri, 8 May 2015 20:24:13 +0200
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <CAMu2m2KP2rZ-Fwjz+6B-SMgPWwgf-R-j07_nb+PFu-v0bSXHEg@mail.gmail.com>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <CAMu2m2JoGVRtTgmqb3YPGg_RhSQH8=waPk2iw6+pzDEEEBBRdA@mail.gmail.com>
 <18348975.fvaj3Gq1yx@agaric>
 <CAMu2m2KP2rZ-Fwjz+6B-SMgPWwgf-R-j07_nb+PFu-v0bSXHEg@mail.gmail.com>
Message-ID: <D6BAC0ED11DC44ECBE61BC77E01F852B@erratique.ch>

Le vendredi, 8 mai 2015 ? 20:09, Ashish Agarwal a ?crit :
> Louis, thanks for your suggestions. I'm trying them out, but one quick question: how can you query with tags. I tried `opam list -e foobar`, and I seem to get the same output no matter what I write for foobar.

This is not opam tags this is depexts tags (that correspond to platform). You can do for example:

  opam search -s org:erratique

But it may not be entirely precise since opam-search matches not only in tags. I think opam-list should be able to filter by tags (I actually thought this was possible).  

Best,

Daniel



From trevorsummerssmith at gmail.com  Sun May 10 17:44:05 2015
From: trevorsummerssmith at gmail.com (Trevor Smith)
Date: Sun, 10 May 2015 12:44:05 -0400
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <D6BAC0ED11DC44ECBE61BC77E01F852B@erratique.ch>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <CAMu2m2JoGVRtTgmqb3YPGg_RhSQH8=waPk2iw6+pzDEEEBBRdA@mail.gmail.com>
 <18348975.fvaj3Gq1yx@agaric>
 <CAMu2m2KP2rZ-Fwjz+6B-SMgPWwgf-R-j07_nb+PFu-v0bSXHEg@mail.gmail.com>
 <D6BAC0ED11DC44ECBE61BC77E01F852B@erratique.ch>
Message-ID: <CAG-KTt9yKFjqzQjTHitAy-ezNmkOtqv-1xQ_1dw+as_Luw=7sg@mail.gmail.com>

I tried setting up the "option 1" -- using a repo url. This works fine for
clean installs, however it does not work for my use case for updates. I
didn't realize until I tried it out that this won't update upon any
dependent installation. As noted by Louis, pinning also does not reinstall
from a repo url when a dependent install happens -- it only updates the
meta-data.

What I would like is a way (ideally within opam) to say "when this package
dependend-upon it should always be checked for update and upgrade".

Am I correct in stating that currently there is no way to mark a package as
"update and upgrade this package whenever something that depends upon it is
installed"?

Thanks.

Trevor

On Fri, May 8, 2015 at 2:24 PM, Daniel B?nzli <daniel.buenzli at erratique.ch>
wrote:

> Le vendredi, 8 mai 2015 ? 20:09, Ashish Agarwal a ?crit :
> > Louis, thanks for your suggestions. I'm trying them out, but one quick
> question: how can you query with tags. I tried `opam list -e foobar`, and I
> seem to get the same output no matter what I write for foobar.
>
> This is not opam tags this is depexts tags (that correspond to platform).
> You can do for example:
>
>   opam search -s org:erratique
>
> But it may not be entirely precise since opam-search matches not only in
> tags. I think opam-list should be able to filter by tags (I actually
> thought this was possible).
>
> Best,
>
> Daniel
>
>
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150510/b9353778/attachment.html>

From thomas at gazagnaire.org  Sun May 10 18:17:40 2015
From: thomas at gazagnaire.org (Thomas Gazagnaire)
Date: Sun, 10 May 2015 18:17:40 +0100
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <CAG-KTt9yKFjqzQjTHitAy-ezNmkOtqv-1xQ_1dw+as_Luw=7sg@mail.gmail.com>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <CAMu2m2JoGVRtTgmqb3YPGg_RhSQH8=waPk2iw6+pzDEEEBBRdA@mail.gmail.com>
 <18348975.fvaj3Gq1yx@agaric>
 <CAMu2m2KP2rZ-Fwjz+6B-SMgPWwgf-R-j07_nb+PFu-v0bSXHEg@mail.gmail.com>
 <D6BAC0ED11DC44ECBE61BC77E01F852B@erratique.ch>
 <CAG-KTt9yKFjqzQjTHitAy-ezNmkOtqv-1xQ_1dw+as_Luw=7sg@mail.gmail.com>
Message-ID: <99BD9182-ECAA-48B6-9325-84CB89ACDA65@gazagnaire.org>

> I tried setting up the "option 1" -- using a repo url. This works fine for clean installs, however it does not work for my use case for updates. I didn't realize until I tried it out that this won't update upon any dependent installation. As noted by Louis, pinning also does not reinstall from a repo url when a dependent install happens -- it only updates the meta-data.
> 
> What I would like is a way (ideally within opam) to say "when this package dependend-upon it should always be checked for update and upgrade".
> 
> Am I correct in stating that currently there is no way to mark a package as "update and upgrade this package whenever something that depends upon it is installed"?

did you run `opam update -u <package>`? If a or dev or pinned package changes it should normally trigger a recompilation of all the reverse dependencies. how did you specify the packages in your repo?

Thomas

> 
> Thanks.
> 
> Trevor
> 
> On Fri, May 8, 2015 at 2:24 PM, Daniel B?nzli <daniel.buenzli at erratique.ch <mailto:daniel.buenzli at erratique.ch>> wrote:
> Le vendredi, 8 mai 2015 ? 20:09, Ashish Agarwal a ?crit :
> > Louis, thanks for your suggestions. I'm trying them out, but one quick question: how can you query with tags. I tried `opam list -e foobar`, and I seem to get the same output no matter what I write for foobar.
> 
> This is not opam tags this is depexts tags (that correspond to platform). You can do for example:
> 
>   opam search -s org:erratique
> 
> But it may not be entirely precise since opam-search matches not only in tags. I think opam-list should be able to filter by tags (I actually thought this was possible).
> 
> Best,
> 
> Daniel
> 
> 
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org <mailto:Platform at lists.ocaml.org>
> http://lists.ocaml.org/listinfo/platform <http://lists.ocaml.org/listinfo/platform>
> 
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150510/02492304/attachment.html>

From trevorsummerssmith at gmail.com  Sun May 10 18:23:36 2015
From: trevorsummerssmith at gmail.com (Trevor Smith)
Date: Sun, 10 May 2015 13:23:36 -0400
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <99BD9182-ECAA-48B6-9325-84CB89ACDA65@gazagnaire.org>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <CAMu2m2JoGVRtTgmqb3YPGg_RhSQH8=waPk2iw6+pzDEEEBBRdA@mail.gmail.com>
 <18348975.fvaj3Gq1yx@agaric>
 <CAMu2m2KP2rZ-Fwjz+6B-SMgPWwgf-R-j07_nb+PFu-v0bSXHEg@mail.gmail.com>
 <D6BAC0ED11DC44ECBE61BC77E01F852B@erratique.ch>
 <CAG-KTt9yKFjqzQjTHitAy-ezNmkOtqv-1xQ_1dw+as_Luw=7sg@mail.gmail.com>
 <99BD9182-ECAA-48B6-9325-84CB89ACDA65@gazagnaire.org>
Message-ID: <CAG-KTt8qhdNA0ZbRqFeN8WK0zYqcJPjXGy_OEXurydhxYrGTcA@mail.gmail.com>

Thomas,

Consider two packages: lib and program. program depends upon lib.

opam pin add --dev-repo lib # This points to a git repo (no branch or
commit info)
opam install lib
# Make a new commit to lib and push it
# Lib is now one commit newer
# NB I am making _no_ changes to the internal opam repo
opam install program

lib does _not_ get recompiled.

Is that the information you wanted?

Also: I just tried opam update program and that also did not pick up the
fact that lib is git pinned.

Thoughts? Thanks.

Trevor

On Sun, May 10, 2015 at 1:17 PM, Thomas Gazagnaire <thomas at gazagnaire.org>
wrote:

> I tried setting up the "option 1" -- using a repo url. This works fine for
> clean installs, however it does not work for my use case for updates. I
> didn't realize until I tried it out that this won't update upon any
> dependent installation. As noted by Louis, pinning also does not reinstall
> from a repo url when a dependent install happens -- it only updates the
> meta-data.
>
> What I would like is a way (ideally within opam) to say "when this package
> dependend-upon it should always be checked for update and upgrade".
>
> Am I correct in stating that currently there is no way to mark a package
> as "update and upgrade this package whenever something that depends upon it
> is installed"?
>
>
> did you run `opam update -u <package>`? If a or dev or pinned package
> changes it should normally trigger a recompilation of all the reverse
> dependencies. how did you specify the packages in your repo?
>
> Thomas
>
>
> Thanks.
>
> Trevor
>
> On Fri, May 8, 2015 at 2:24 PM, Daniel B?nzli <daniel.buenzli at erratique.ch
> > wrote:
>
>> Le vendredi, 8 mai 2015 ? 20:09, Ashish Agarwal a ?crit :
>> > Louis, thanks for your suggestions. I'm trying them out, but one quick
>> question: how can you query with tags. I tried `opam list -e foobar`, and I
>> seem to get the same output no matter what I write for foobar.
>>
>> This is not opam tags this is depexts tags (that correspond to platform).
>> You can do for example:
>>
>>   opam search -s org:erratique
>>
>> But it may not be entirely precise since opam-search matches not only in
>> tags. I think opam-list should be able to filter by tags (I actually
>> thought this was possible).
>>
>> Best,
>>
>> Daniel
>>
>>
>> _______________________________________________
>> Platform mailing list
>> Platform at lists.ocaml.org
>> http://lists.ocaml.org/listinfo/platform
>>
>
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150510/eb75c7b2/attachment.html>

From trevorsummerssmith at gmail.com  Sun May 10 18:37:24 2015
From: trevorsummerssmith at gmail.com (Trevor Smith)
Date: Sun, 10 May 2015 17:37:24 +0000
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <CAG-KTt8qhdNA0ZbRqFeN8WK0zYqcJPjXGy_OEXurydhxYrGTcA@mail.gmail.com>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <CAMu2m2JoGVRtTgmqb3YPGg_RhSQH8=waPk2iw6+pzDEEEBBRdA@mail.gmail.com>
 <18348975.fvaj3Gq1yx@agaric>
 <CAMu2m2KP2rZ-Fwjz+6B-SMgPWwgf-R-j07_nb+PFu-v0bSXHEg@mail.gmail.com>
 <D6BAC0ED11DC44ECBE61BC77E01F852B@erratique.ch>
 <CAG-KTt9yKFjqzQjTHitAy-ezNmkOtqv-1xQ_1dw+as_Luw=7sg@mail.gmail.com>
 <99BD9182-ECAA-48B6-9325-84CB89ACDA65@gazagnaire.org>
 <CAG-KTt8qhdNA0ZbRqFeN8WK0zYqcJPjXGy_OEXurydhxYrGTcA@mail.gmail.com>
Message-ID: <CAG-KTt91QJBx324fL=fdTroHSFSOgDdaxZk+aJMW6=vqFuGzmQ@mail.gmail.com>

I'm just running out the door right now but if what I'm saying doesn't make
sense I can push a reproducible setup onto github later tonight.
On Sun, May 10, 2015 at 1:23 PM Trevor Smith <trevorsummerssmith at gmail.com>
wrote:

> Thomas,
>
> Consider two packages: lib and program. program depends upon lib.
>
> opam pin add --dev-repo lib # This points to a git repo (no branch or
> commit info)
> opam install lib
> # Make a new commit to lib and push it
> # Lib is now one commit newer
> # NB I am making _no_ changes to the internal opam repo
> opam install program
>
> lib does _not_ get recompiled.
>
> Is that the information you wanted?
>
> Also: I just tried opam update program and that also did not pick up the
> fact that lib is git pinned.
>
> Thoughts? Thanks.
>
> Trevor
>
> On Sun, May 10, 2015 at 1:17 PM, Thomas Gazagnaire <thomas at gazagnaire.org>
> wrote:
>
>> I tried setting up the "option 1" -- using a repo url. This works fine
>> for clean installs, however it does not work for my use case for updates. I
>> didn't realize until I tried it out that this won't update upon any
>> dependent installation. As noted by Louis, pinning also does not reinstall
>> from a repo url when a dependent install happens -- it only updates the
>> meta-data.
>>
>> What I would like is a way (ideally within opam) to say "when this
>> package dependend-upon it should always be checked for update and upgrade".
>>
>> Am I correct in stating that currently there is no way to mark a package
>> as "update and upgrade this package whenever something that depends upon it
>> is installed"?
>>
>>
>> did you run `opam update -u <package>`? If a or dev or pinned package
>> changes it should normally trigger a recompilation of all the reverse
>> dependencies. how did you specify the packages in your repo?
>>
>> Thomas
>>
>>
>> Thanks.
>>
>> Trevor
>>
>> On Fri, May 8, 2015 at 2:24 PM, Daniel B?nzli <
>> daniel.buenzli at erratique.ch> wrote:
>>
>>> Le vendredi, 8 mai 2015 ? 20:09, Ashish Agarwal a ?crit :
>>> > Louis, thanks for your suggestions. I'm trying them out, but one quick
>>> question: how can you query with tags. I tried `opam list -e foobar`, and I
>>> seem to get the same output no matter what I write for foobar.
>>>
>>> This is not opam tags this is depexts tags (that correspond to
>>> platform). You can do for example:
>>>
>>>   opam search -s org:erratique
>>>
>>> But it may not be entirely precise since opam-search matches not only in
>>> tags. I think opam-list should be able to filter by tags (I actually
>>> thought this was possible).
>>>
>>> Best,
>>>
>>> Daniel
>>>
>>>
>>> _______________________________________________
>>> Platform mailing list
>>> Platform at lists.ocaml.org
>>> http://lists.ocaml.org/listinfo/platform
>>>
>>
>> _______________________________________________
>> Platform mailing list
>> Platform at lists.ocaml.org
>> http://lists.ocaml.org/listinfo/platform
>>
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150510/2776f595/attachment-0001.html>

From thomas at gazagnaire.org  Sun May 10 22:50:34 2015
From: thomas at gazagnaire.org (Thomas Gazagnaire)
Date: Sun, 10 May 2015 22:50:34 +0100
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <CAG-KTt8qhdNA0ZbRqFeN8WK0zYqcJPjXGy_OEXurydhxYrGTcA@mail.gmail.com>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <CAMu2m2JoGVRtTgmqb3YPGg_RhSQH8=waPk2iw6+pzDEEEBBRdA@mail.gmail.com>
 <18348975.fvaj3Gq1yx@agaric>
 <CAMu2m2KP2rZ-Fwjz+6B-SMgPWwgf-R-j07_nb+PFu-v0bSXHEg@mail.gmail.com>
 <D6BAC0ED11DC44ECBE61BC77E01F852B@erratique.ch>
 <CAG-KTt9yKFjqzQjTHitAy-ezNmkOtqv-1xQ_1dw+as_Luw=7sg@mail.gmail.com>
 <99BD9182-ECAA-48B6-9325-84CB89ACDA65@gazagnaire.org>
 <CAG-KTt8qhdNA0ZbRqFeN8WK0zYqcJPjXGy_OEXurydhxYrGTcA@mail.gmail.com>
Message-ID: <59F50507-D202-4D45-B531-D324247EE2C2@gazagnaire.org>

> Consider two packages: lib and program. program depends upon lib.

> opam install lib
> # Make a new commit to lib and push it
> # Lib is now one commit newer
> # NB I am making _no_ changes to the internal opam repo
> opam install program
> 
> lib does _not_ get recompiled.
> 
> Is that the information you wanted?

yes, when pin/dev packages are modified, you need to tell opam that you want to use the updated version (if available), so you need to run `opam update -u` before `opam install program`. Opam will check if there are new commits and recompile what needs to be recompiled.

Thomas

> 
> Also: I just tried opam update program and that also did not pick up the fact that lib is git pinned.
> 
> Thoughts? Thanks.
> 
> Trevor
> 
> On Sun, May 10, 2015 at 1:17 PM, Thomas Gazagnaire <thomas at gazagnaire.org <mailto:thomas at gazagnaire.org>> wrote:
>> I tried setting up the "option 1" -- using a repo url. This works fine for clean installs, however it does not work for my use case for updates. I didn't realize until I tried it out that this won't update upon any dependent installation. As noted by Louis, pinning also does not reinstall from a repo url when a dependent install happens -- it only updates the meta-data.
>> 
>> What I would like is a way (ideally within opam) to say "when this package dependend-upon it should always be checked for update and upgrade".
>> 
>> Am I correct in stating that currently there is no way to mark a package as "update and upgrade this package whenever something that depends upon it is installed"?
> 
> did you run `opam update -u <package>`? If a or dev or pinned package changes it should normally trigger a recompilation of all the reverse dependencies. how did you specify the packages in your repo?
> 
> Thomas
> 
>> 
>> Thanks.
>> 
>> Trevor
>> 
>> On Fri, May 8, 2015 at 2:24 PM, Daniel B?nzli <daniel.buenzli at erratique.ch <mailto:daniel.buenzli at erratique.ch>> wrote:
>> Le vendredi, 8 mai 2015 ? 20:09, Ashish Agarwal a ?crit :
>> > Louis, thanks for your suggestions. I'm trying them out, but one quick question: how can you query with tags. I tried `opam list -e foobar`, and I seem to get the same output no matter what I write for foobar.
>> 
>> This is not opam tags this is depexts tags (that correspond to platform). You can do for example:
>> 
>>   opam search -s org:erratique
>> 
>> But it may not be entirely precise since opam-search matches not only in tags. I think opam-list should be able to filter by tags (I actually thought this was possible).
>> 
>> Best,
>> 
>> Daniel
>> 
>> 
>> _______________________________________________
>> Platform mailing list
>> Platform at lists.ocaml.org <mailto:Platform at lists.ocaml.org>
>> http://lists.ocaml.org/listinfo/platform <http://lists.ocaml.org/listinfo/platform>
>> 
>> _______________________________________________
>> Platform mailing list
>> Platform at lists.ocaml.org <mailto:Platform at lists.ocaml.org>
>> http://lists.ocaml.org/listinfo/platform <http://lists.ocaml.org/listinfo/platform>
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150510/a28a5d3d/attachment.html>

From trevorsummerssmith at gmail.com  Mon May 11 00:55:15 2015
From: trevorsummerssmith at gmail.com (Trevor Smith)
Date: Sun, 10 May 2015 19:55:15 -0400
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <59F50507-D202-4D45-B531-D324247EE2C2@gazagnaire.org>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <CAMu2m2JoGVRtTgmqb3YPGg_RhSQH8=waPk2iw6+pzDEEEBBRdA@mail.gmail.com>
 <18348975.fvaj3Gq1yx@agaric>
 <CAMu2m2KP2rZ-Fwjz+6B-SMgPWwgf-R-j07_nb+PFu-v0bSXHEg@mail.gmail.com>
 <D6BAC0ED11DC44ECBE61BC77E01F852B@erratique.ch>
 <CAG-KTt9yKFjqzQjTHitAy-ezNmkOtqv-1xQ_1dw+as_Luw=7sg@mail.gmail.com>
 <99BD9182-ECAA-48B6-9325-84CB89ACDA65@gazagnaire.org>
 <CAG-KTt8qhdNA0ZbRqFeN8WK0zYqcJPjXGy_OEXurydhxYrGTcA@mail.gmail.com>
 <59F50507-D202-4D45-B531-D324247EE2C2@gazagnaire.org>
Message-ID: <CAG-KTt_a8C9J=T=ydePPDYKaMPM+igE0-Ph-QFvD5=0gnFmLLQ@mail.gmail.com>

Thanks Thomas.

Would there be interest in making a feature to "always update this
dependency"? Suggested solution:

A keyword in the version could trigger "always update". This would then
apply to both normal packages as well as pins. "Dev" already has meaning in
opam, perhaps "-alpha". This would then allow me to internally have a
single repo with normal versions alongside versions that are actively being
developed and changing multiple times per day. Eg:

my-repo/my-package.1.0-alpha/url:
src: "ssh://somewhere/my-package.git"

A dependent package (ie reverse dependency) "program" on: "my-package" {=
"1.0-alpha" } would then always check for updates and upgrade my-package
before doing anything with program. A build server could get the behavior
I'm looking for by "opam install --deps-only program" and getting whatever
is at head of my-package (or of the given branch as the case may be).

I think this solution would be a nice composition of the ideas that opam
already has, and, I think, would be a strict improvement over the current
situation and does not introduce any incidental complexity. This thread
seems to indicate that others are interested in such a feature.

Thoughts? Thanks!

Trevor



On Sun, May 10, 2015 at 5:50 PM, Thomas Gazagnaire <thomas at gazagnaire.org>
wrote:

> Consider two packages: lib and program. program depends upon lib.
>
>
> opam install lib
> # Make a new commit to lib and push it
> # Lib is now one commit newer
> # NB I am making _no_ changes to the internal opam repo
> opam install program
>
> lib does _not_ get recompiled.
>
> Is that the information you wanted?
>
>
> yes, when pin/dev packages are modified, you need to tell opam that you
> want to use the updated version (if available), so you need to run `opam
> update -u` before `opam install program`. Opam will check if there are new
> commits and recompile what needs to be recompiled.
>
> Thomas
>
>
> Also: I just tried opam update program and that also did not pick up the
> fact that lib is git pinned.
>
> Thoughts? Thanks.
>
> Trevor
>
> On Sun, May 10, 2015 at 1:17 PM, Thomas Gazagnaire <thomas at gazagnaire.org>
> wrote:
>
>> I tried setting up the "option 1" -- using a repo url. This works fine
>> for clean installs, however it does not work for my use case for updates. I
>> didn't realize until I tried it out that this won't update upon any
>> dependent installation. As noted by Louis, pinning also does not reinstall
>> from a repo url when a dependent install happens -- it only updates the
>> meta-data.
>>
>> What I would like is a way (ideally within opam) to say "when this
>> package dependend-upon it should always be checked for update and upgrade".
>>
>> Am I correct in stating that currently there is no way to mark a package
>> as "update and upgrade this package whenever something that depends upon it
>> is installed"?
>>
>>
>> did you run `opam update -u <package>`? If a or dev or pinned package
>> changes it should normally trigger a recompilation of all the reverse
>> dependencies. how did you specify the packages in your repo?
>>
>> Thomas
>>
>>
>> Thanks.
>>
>> Trevor
>>
>> On Fri, May 8, 2015 at 2:24 PM, Daniel B?nzli <
>> daniel.buenzli at erratique.ch> wrote:
>>
>>> Le vendredi, 8 mai 2015 ? 20:09, Ashish Agarwal a ?crit :
>>> > Louis, thanks for your suggestions. I'm trying them out, but one quick
>>> question: how can you query with tags. I tried `opam list -e foobar`, and I
>>> seem to get the same output no matter what I write for foobar.
>>>
>>> This is not opam tags this is depexts tags (that correspond to
>>> platform). You can do for example:
>>>
>>>   opam search -s org:erratique
>>>
>>> But it may not be entirely precise since opam-search matches not only in
>>> tags. I think opam-list should be able to filter by tags (I actually
>>> thought this was possible).
>>>
>>> Best,
>>>
>>> Daniel
>>>
>>>
>>> _______________________________________________
>>> Platform mailing list
>>> Platform at lists.ocaml.org
>>> http://lists.ocaml.org/listinfo/platform
>>>
>>
>> _______________________________________________
>> Platform mailing list
>> Platform at lists.ocaml.org
>> http://lists.ocaml.org/listinfo/platform
>>
>>
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150510/798bd431/attachment.html>

From louis.gesbert at ocamlpro.com  Mon May 11 01:30:20 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Mon, 11 May 2015 09:30:20 +0900
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <D6BAC0ED11DC44ECBE61BC77E01F852B@erratique.ch>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <CAMu2m2KP2rZ-Fwjz+6B-SMgPWwgf-R-j07_nb+PFu-v0bSXHEg@mail.gmail.com>
 <D6BAC0ED11DC44ECBE61BC77E01F852B@erratique.ch>
Message-ID: <1704943.E4Ay2MYit3@agaric>

> - Daniel B?nzli, 08/05/2015 20:24 -
> Le vendredi, 8 mai 2015 ? 20:09, Ashish Agarwal a ?crit :
> > Louis, thanks for your suggestions. I'm trying them out, but one quick question: how can you query with tags. I tried `opam list -e foobar`, and I seem to get the same output no matter what I write for foobar.
> 
> This is not opam tags this is depexts tags (that correspond to platform). You can do for example:
> 
>   opam search -s org:erratique
> 
> But it may not be entirely precise since opam-search matches not only in tags. I think opam-list should be able to filter by tags (I actually thought this was possible).  

Indeed. `opam list` has had too many features added one after the other, and it needs to be redesigned from scratch with clear filters and a well-defined operation between them [1]: its interface isn't very consistent and doesn't offer all the options we may want. I don't really have time at the moment though.

> Also, is there some convention for tags? You put "org:" as a prefix. Is there any special
> interpretation of this, now or planned in the future?

This is purely a convention, that is used for marking packages belonging to a given organisation; the only package tags with special meaning are the ones starting with `flags:` (these should actually be in the `flags:` top-level field instead, but using a tag provides better compatibility within the 1.2 branch).

Best,
Louis

[1] https://github.com/ocaml/opam/issues/2124#issuecomment-94339104
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 473 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150511/f3b40443/attachment-0001.sig>

From louis.gesbert at ocamlpro.com  Mon May 11 02:07:35 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Mon, 11 May 2015 10:07:35 +0900
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <CAG-KTt_a8C9J=T=ydePPDYKaMPM+igE0-Ph-QFvD5=0gnFmLLQ@mail.gmail.com>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <59F50507-D202-4D45-B531-D324247EE2C2@gazagnaire.org>
 <CAG-KTt_a8C9J=T=ydePPDYKaMPM+igE0-Ph-QFvD5=0gnFmLLQ@mail.gmail.com>
Message-ID: <18353118.ypotX7GMhu@agaric>

OPAM normally never updates its metadata outside of `opam update`; this was inconvenient for pins, so a trick was added: when a pinned package is mentionned explicitely on an install command-line, it is first updated from its upstream. Updating all the time could get very slow if you have many packages pinned to their upstream, for example (like I do).

As for reinstallations, OPAM does the minimum reinstallations to guarantee consistency, i.e. it recompiles only packages that depend on a changed one -- not the other way around. It will, however, mark packages that were changed after an update for reinstallation. This should work in a similar way for repository and pinned packages. However, that reinstallation will only take place on an `opam upgrade` without argument; it would probably be an improvement to process it as soon as it belongs to the dependency cone of changed packages.

Now for the dirty (and not really working) workarounds:
1. `alias opam="opam update --dev; opam"`. (this would work with the fix above; and the option --dev doesn't exist at the moment, we only have an option --repositories. Adding it)
2. Instead of `opam install foo`, fun `opam install $(opam list -s --rec --required-by foo) foo`. This should trigger updates due to the trick above. The reinstallations are only done on `opam upgrade` though.

So indeed, your only real option if you want to keep your stuff up-to-date is to run `opam update -u` beforehand (possibly with your dev-repo name, or --dev, depending on whether you use a custom repo or pinned packages).

Now, if we were to handle planned recompilations more often than only on global `opam upgrade`, would that be enough to handle your use-case better ?

Best,
Louis

> - Trevor Smith, 10/05/2015 19:55 -
> Thanks Thomas.
> 
> Would there be interest in making a feature to "always update this
> dependency"? Suggested solution:
> 
> A keyword in the version could trigger "always update". This would then
> apply to both normal packages as well as pins. "Dev" already has meaning in
> opam, perhaps "-alpha". This would then allow me to internally have a
> single repo with normal versions alongside versions that are actively being
> developed and changing multiple times per day. Eg:
> 
> my-repo/my-package.1.0-alpha/url:
> src: "ssh://somewhere/my-package.git"
> 
> A dependent package (ie reverse dependency) "program" on: "my-package" {=
> "1.0-alpha" } would then always check for updates and upgrade my-package
> before doing anything with program. A build server could get the behavior
> I'm looking for by "opam install --deps-only program" and getting whatever
> is at head of my-package (or of the given branch as the case may be).
> 
> I think this solution would be a nice composition of the ideas that opam
> already has, and, I think, would be a strict improvement over the current
> situation and does not introduce any incidental complexity. This thread
> seems to indicate that others are interested in such a feature.
> 
> Thoughts? Thanks!
> 
> Trevor
> 
> 
> 
> On Sun, May 10, 2015 at 5:50 PM, Thomas Gazagnaire <thomas at gazagnaire.org>
> wrote:
> 
> > Consider two packages: lib and program. program depends upon lib.
> >
> >
> > opam install lib
> > # Make a new commit to lib and push it
> > # Lib is now one commit newer
> > # NB I am making _no_ changes to the internal opam repo
> > opam install program
> >
> > lib does _not_ get recompiled.
> >
> > Is that the information you wanted?
> >
> >
> > yes, when pin/dev packages are modified, you need to tell opam that you
> > want to use the updated version (if available), so you need to run `opam
> > update -u` before `opam install program`. Opam will check if there are new
> > commits and recompile what needs to be recompiled.
> >
> > Thomas
> >
> >
> > Also: I just tried opam update program and that also did not pick up the
> > fact that lib is git pinned.
> >
> > Thoughts? Thanks.
> >
> > Trevor
> >
> > On Sun, May 10, 2015 at 1:17 PM, Thomas Gazagnaire <thomas at gazagnaire.org>
> > wrote:
> >
> >> I tried setting up the "option 1" -- using a repo url. This works fine
> >> for clean installs, however it does not work for my use case for updates. I
> >> didn't realize until I tried it out that this won't update upon any
> >> dependent installation. As noted by Louis, pinning also does not reinstall
> >> from a repo url when a dependent install happens -- it only updates the
> >> meta-data.
> >>
> >> What I would like is a way (ideally within opam) to say "when this
> >> package dependend-upon it should always be checked for update and upgrade".
> >>
> >> Am I correct in stating that currently there is no way to mark a package
> >> as "update and upgrade this package whenever something that depends upon it
> >> is installed"?
> >>
> >>
> >> did you run `opam update -u <package>`? If a or dev or pinned package
> >> changes it should normally trigger a recompilation of all the reverse
> >> dependencies. how did you specify the packages in your repo?
> >>
> >> Thomas
> >>
> >>
> >> Thanks.
> >>
> >> Trevor
> >>
> >> On Fri, May 8, 2015 at 2:24 PM, Daniel B?nzli <
> >> daniel.buenzli at erratique.ch> wrote:
> >>
> >>> Le vendredi, 8 mai 2015 ? 20:09, Ashish Agarwal a ?crit :
> >>> > Louis, thanks for your suggestions. I'm trying them out, but one quick
> >>> question: how can you query with tags. I tried `opam list -e foobar`, and I
> >>> seem to get the same output no matter what I write for foobar.
> >>>
> >>> This is not opam tags this is depexts tags (that correspond to
> >>> platform). You can do for example:
> >>>
> >>>   opam search -s org:erratique
> >>>
> >>> But it may not be entirely precise since opam-search matches not only in
> >>> tags. I think opam-list should be able to filter by tags (I actually
> >>> thought this was possible).
> >>>
> >>> Best,
> >>>
> >>> Daniel
> >>>
> >>>
> >>> _______________________________________________
> >>> Platform mailing list
> >>> Platform at lists.ocaml.org
> >>> http://lists.ocaml.org/listinfo/platform
> >>>
> >>
> >> _______________________________________________
> >> Platform mailing list
> >> Platform at lists.ocaml.org
> >> http://lists.ocaml.org/listinfo/platform
> >>
> >>
> >>
> >
> >
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 473 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150511/2e3830f5/attachment.sig>

From trevorsummerssmith at gmail.com  Mon May 11 03:06:17 2015
From: trevorsummerssmith at gmail.com (Trevor Smith)
Date: Sun, 10 May 2015 22:06:17 -0400
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <18353118.ypotX7GMhu@agaric>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <59F50507-D202-4D45-B531-D324247EE2C2@gazagnaire.org>
 <CAG-KTt_a8C9J=T=ydePPDYKaMPM+igE0-Ph-QFvD5=0gnFmLLQ@mail.gmail.com>
 <18353118.ypotX7GMhu@agaric>
Message-ID: <CAG-KTt8bA1T_x1cdFCbJ=TVYOuX_u8UvPEbvjegi+nt7+NZH0g@mail.gmail.com>

Louis,

Thanks for all of the info (and for making opam!)

1) I think that `opam update -u <my-internal-repo>` and then `opam upgrade`
would indeed do what I need as a workaround.
The incidental complexity the it creates isn't that big of a deal for
one-offs on my box, but when managing a team of devs, and build boxes one
wants something straightforward.
It seems though that to make that work with the build system and to not
have unintended updates one would then need 2 internal dev repos -- one
that had all of the git versioned ones, and another repo that had your
normal x.y.z versions.

2) I like my suggested solution better because I think it adds no
incidental complexity -- one has to describe what needs describing (ie "I
want this dependency always updated"), and no extra lifecycle commands (ie
no explicit "update" after one has already pushed code). And adds a clear
functionality to the tool.

Agreed that updating a ton of packages could take a while -- but having a
clear tool (as in what I am suggesting) to define that gives the user that
flexibility -- it's my fault if I've decided to have 100 "alpha" packages.
I've asked for it.

So I'm clear -- are you saying that due to how updates are currently dealt
with within opam that the feature I'm suggesting probably would not happen?
(I haven't taken a look at how opam works).

Thanks.

Trevor

On Sun, May 10, 2015 at 9:07 PM, Louis Gesbert <louis.gesbert at ocamlpro.com>
wrote:

> OPAM normally never updates its metadata outside of `opam update`; this
> was inconvenient for pins, so a trick was added: when a pinned package is
> mentionned explicitely on an install command-line, it is first updated from
> its upstream. Updating all the time could get very slow if you have many
> packages pinned to their upstream, for example (like I do).
>
> As for reinstallations, OPAM does the minimum reinstallations to guarantee
> consistency, i.e. it recompiles only packages that depend on a changed one
> -- not the other way around. It will, however, mark packages that were
> changed after an update for reinstallation. This should work in a similar
> way for repository and pinned packages. However, that reinstallation will
> only take place on an `opam upgrade` without argument; it would probably be
> an improvement to process it as soon as it belongs to the dependency cone
> of changed packages.
>
> Now for the dirty (and not really working) workarounds:
> 1. `alias opam="opam update --dev; opam"`. (this would work with the fix
> above; and the option --dev doesn't exist at the moment, we only have an
> option --repositories. Adding it)
> 2. Instead of `opam install foo`, fun `opam install $(opam list -s --rec
> --required-by foo) foo`. This should trigger updates due to the trick
> above. The reinstallations are only done on `opam upgrade` though.
>
> So indeed, your only real option if you want to keep your stuff up-to-date
> is to run `opam update -u` beforehand (possibly with your dev-repo name, or
> --dev, depending on whether you use a custom repo or pinned packages).
>
> Now, if we were to handle planned recompilations more often than only on
> global `opam upgrade`, would that be enough to handle your use-case better ?
>
> Best,
> Louis
>
> > - Trevor Smith, 10/05/2015 19:55 -
> > Thanks Thomas.
> >
> > Would there be interest in making a feature to "always update this
> > dependency"? Suggested solution:
> >
> > A keyword in the version could trigger "always update". This would then
> > apply to both normal packages as well as pins. "Dev" already has meaning
> in
> > opam, perhaps "-alpha". This would then allow me to internally have a
> > single repo with normal versions alongside versions that are actively
> being
> > developed and changing multiple times per day. Eg:
> >
> > my-repo/my-package.1.0-alpha/url:
> > src: "ssh://somewhere/my-package.git"
> >
> > A dependent package (ie reverse dependency) "program" on: "my-package" {=
> > "1.0-alpha" } would then always check for updates and upgrade my-package
> > before doing anything with program. A build server could get the behavior
> > I'm looking for by "opam install --deps-only program" and getting
> whatever
> > is at head of my-package (or of the given branch as the case may be).
> >
> > I think this solution would be a nice composition of the ideas that opam
> > already has, and, I think, would be a strict improvement over the current
> > situation and does not introduce any incidental complexity. This thread
> > seems to indicate that others are interested in such a feature.
> >
> > Thoughts? Thanks!
> >
> > Trevor
> >
> >
> >
> > On Sun, May 10, 2015 at 5:50 PM, Thomas Gazagnaire <
> thomas at gazagnaire.org>
> > wrote:
> >
> > > Consider two packages: lib and program. program depends upon lib.
> > >
> > >
> > > opam install lib
> > > # Make a new commit to lib and push it
> > > # Lib is now one commit newer
> > > # NB I am making _no_ changes to the internal opam repo
> > > opam install program
> > >
> > > lib does _not_ get recompiled.
> > >
> > > Is that the information you wanted?
> > >
> > >
> > > yes, when pin/dev packages are modified, you need to tell opam that you
> > > want to use the updated version (if available), so you need to run
> `opam
> > > update -u` before `opam install program`. Opam will check if there are
> new
> > > commits and recompile what needs to be recompiled.
> > >
> > > Thomas
> > >
> > >
> > > Also: I just tried opam update program and that also did not pick up
> the
> > > fact that lib is git pinned.
> > >
> > > Thoughts? Thanks.
> > >
> > > Trevor
> > >
> > > On Sun, May 10, 2015 at 1:17 PM, Thomas Gazagnaire <
> thomas at gazagnaire.org>
> > > wrote:
> > >
> > >> I tried setting up the "option 1" -- using a repo url. This works fine
> > >> for clean installs, however it does not work for my use case for
> updates. I
> > >> didn't realize until I tried it out that this won't update upon any
> > >> dependent installation. As noted by Louis, pinning also does not
> reinstall
> > >> from a repo url when a dependent install happens -- it only updates
> the
> > >> meta-data.
> > >>
> > >> What I would like is a way (ideally within opam) to say "when this
> > >> package dependend-upon it should always be checked for update and
> upgrade".
> > >>
> > >> Am I correct in stating that currently there is no way to mark a
> package
> > >> as "update and upgrade this package whenever something that depends
> upon it
> > >> is installed"?
> > >>
> > >>
> > >> did you run `opam update -u <package>`? If a or dev or pinned package
> > >> changes it should normally trigger a recompilation of all the reverse
> > >> dependencies. how did you specify the packages in your repo?
> > >>
> > >> Thomas
> > >>
> > >>
> > >> Thanks.
> > >>
> > >> Trevor
> > >>
> > >> On Fri, May 8, 2015 at 2:24 PM, Daniel B?nzli <
> > >> daniel.buenzli at erratique.ch> wrote:
> > >>
> > >>> Le vendredi, 8 mai 2015 ? 20:09, Ashish Agarwal a ?crit :
> > >>> > Louis, thanks for your suggestions. I'm trying them out, but one
> quick
> > >>> question: how can you query with tags. I tried `opam list -e
> foobar`, and I
> > >>> seem to get the same output no matter what I write for foobar.
> > >>>
> > >>> This is not opam tags this is depexts tags (that correspond to
> > >>> platform). You can do for example:
> > >>>
> > >>>   opam search -s org:erratique
> > >>>
> > >>> But it may not be entirely precise since opam-search matches not
> only in
> > >>> tags. I think opam-list should be able to filter by tags (I actually
> > >>> thought this was possible).
> > >>>
> > >>> Best,
> > >>>
> > >>> Daniel
> > >>>
> > >>>
> > >>> _______________________________________________
> > >>> Platform mailing list
> > >>> Platform at lists.ocaml.org
> > >>> http://lists.ocaml.org/listinfo/platform
> > >>>
> > >>
> > >> _______________________________________________
> > >> Platform mailing list
> > >> Platform at lists.ocaml.org
> > >> http://lists.ocaml.org/listinfo/platform
> > >>
> > >>
> > >>
> > >
> > >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150510/87e0c5e0/attachment-0001.html>

From louis.gesbert at ocamlpro.com  Mon May 11 04:13:35 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Mon, 11 May 2015 12:13:35 +0900
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <CAG-KTt8bA1T_x1cdFCbJ=TVYOuX_u8UvPEbvjegi+nt7+NZH0g@mail.gmail.com>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <18353118.ypotX7GMhu@agaric>
 <CAG-KTt8bA1T_x1cdFCbJ=TVYOuX_u8UvPEbvjegi+nt7+NZH0g@mail.gmail.com>
Message-ID: <1607648.PhhS1xgei5@agaric>

> 1) I think that `opam update -u <my-internal-repo>` and then `opam upgrade`
> would indeed do what I need as a workaround.

`update -u` is "update then upgrade" so no need for the upgrade afterwards :)

> The incidental complexity the it creates isn't that big of a deal for
> one-offs on my box, but when managing a team of devs, and build boxes one
> wants something straightforward.
> It seems though that to make that work with the build system and to not
> have unintended updates one would then need 2 internal dev repos -- one
> that had all of the git versioned ones, and another repo that had your
> normal x.y.z versions.

Not sure I get what you are after exactly, but you could also put both version in the same repository! Making separate repositories would be useful if you want to easily configure hosts for the dev or release versions.

> 2) I like my suggested solution better because I think it adds no
> incidental complexity -- one has to describe what needs describing (ie "I
> want this dependency always updated"), and no extra lifecycle commands (ie
> no explicit "update" after one has already pushed code). And adds a clear
> functionality to the tool.
> 
> Agreed that updating a ton of packages could take a while -- but having a
> clear tool (as in what I am suggesting) to define that gives the user that
> flexibility -- it's my fault if I've decided to have 100 "alpha" packages.
> I've asked for it.
> 
> So I'm clear -- are you saying that due to how updates are currently dealt
> with within opam that the feature I'm suggesting probably would not happen?
> (I haven't taken a look at how opam works).

Granted, there is already the mentionned-pinned-package-auto-update trick, but it's quite limited in scope -- I think it's good design otherwise to keep matters separate and provide atomic commands: the update of the internal metadata, and the installation of packages, are clearly distinct operations in OPAM. Higher-level operations can easily be built on top of it, and possibly added to OPAM, but we shouldn't put too much magic in the base operations: that makes things more difficult to handle, to understand and to debug.

There is also a technical issue with what you propose: solving an installation is based on the current -- static -- metadata. So that metadata can't depend on updating other metadata, or resolving an installation would become a nightmare. That doesn't apply, though, if you only update the package source and not its metadata (like would be done with a repository package pointing to a VC repository, as opposed to a pinned package) -- it would be much easier to handle in that case, although it could become a bit inconsistent.

With the fixes I mentionned earlier, a possibility would be to add a `--update-dev` option to `install` and `upgrade`, meaning something like:
`opam install --update-dev foo`: get all installed development packages transitively related to `foo` (dependencies or dependent), update them first, then proceed with the installation, recompiling changed ones.

For `install`, this would be more or less similar to `opam install foo $(opam list --rec --required-by foo)`, once we implement the changes to do related recompilations on install.

Does that make sense ?

Best,
Louis

> 
> Thanks.
> 
> Trevor
> 
> On Sun, May 10, 2015 at 9:07 PM, Louis Gesbert <louis.gesbert at ocamlpro.com>
> wrote:
> 
> > OPAM normally never updates its metadata outside of `opam update`; this
> > was inconvenient for pins, so a trick was added: when a pinned package is
> > mentionned explicitely on an install command-line, it is first updated from
> > its upstream. Updating all the time could get very slow if you have many
> > packages pinned to their upstream, for example (like I do).
> >
> > As for reinstallations, OPAM does the minimum reinstallations to guarantee
> > consistency, i.e. it recompiles only packages that depend on a changed one
> > -- not the other way around. It will, however, mark packages that were
> > changed after an update for reinstallation. This should work in a similar
> > way for repository and pinned packages. However, that reinstallation will
> > only take place on an `opam upgrade` without argument; it would probably be
> > an improvement to process it as soon as it belongs to the dependency cone
> > of changed packages.
> >
> > Now for the dirty (and not really working) workarounds:
> > 1. `alias opam="opam update --dev; opam"`. (this would work with the fix
> > above; and the option --dev doesn't exist at the moment, we only have an
> > option --repositories. Adding it)
> > 2. Instead of `opam install foo`, fun `opam install $(opam list -s --rec
> > --required-by foo) foo`. This should trigger updates due to the trick
> > above. The reinstallations are only done on `opam upgrade` though.
> >
> > So indeed, your only real option if you want to keep your stuff up-to-date
> > is to run `opam update -u` beforehand (possibly with your dev-repo name, or
> > --dev, depending on whether you use a custom repo or pinned packages).
> >
> > Now, if we were to handle planned recompilations more often than only on
> > global `opam upgrade`, would that be enough to handle your use-case better ?
> >
> > Best,
> > Louis
> >
> > > - Trevor Smith, 10/05/2015 19:55 -
> > > Thanks Thomas.
> > >
> > > Would there be interest in making a feature to "always update this
> > > dependency"? Suggested solution:
> > >
> > > A keyword in the version could trigger "always update". This would then
> > > apply to both normal packages as well as pins. "Dev" already has meaning
> > in
> > > opam, perhaps "-alpha". This would then allow me to internally have a
> > > single repo with normal versions alongside versions that are actively
> > being
> > > developed and changing multiple times per day. Eg:
> > >
> > > my-repo/my-package.1.0-alpha/url:
> > > src: "ssh://somewhere/my-package.git"
> > >
> > > A dependent package (ie reverse dependency) "program" on: "my-package" {=
> > > "1.0-alpha" } would then always check for updates and upgrade my-package
> > > before doing anything with program. A build server could get the behavior
> > > I'm looking for by "opam install --deps-only program" and getting
> > whatever
> > > is at head of my-package (or of the given branch as the case may be).
> > >
> > > I think this solution would be a nice composition of the ideas that opam
> > > already has, and, I think, would be a strict improvement over the current
> > > situation and does not introduce any incidental complexity. This thread
> > > seems to indicate that others are interested in such a feature.
> > >
> > > Thoughts? Thanks!
> > >
> > > Trevor
> > >
> > >
> > >
> > > On Sun, May 10, 2015 at 5:50 PM, Thomas Gazagnaire <
> > thomas at gazagnaire.org>
> > > wrote:
> > >
> > > > Consider two packages: lib and program. program depends upon lib.
> > > >
> > > >
> > > > opam install lib
> > > > # Make a new commit to lib and push it
> > > > # Lib is now one commit newer
> > > > # NB I am making _no_ changes to the internal opam repo
> > > > opam install program
> > > >
> > > > lib does _not_ get recompiled.
> > > >
> > > > Is that the information you wanted?
> > > >
> > > >
> > > > yes, when pin/dev packages are modified, you need to tell opam that you
> > > > want to use the updated version (if available), so you need to run
> > `opam
> > > > update -u` before `opam install program`. Opam will check if there are
> > new
> > > > commits and recompile what needs to be recompiled.
> > > >
> > > > Thomas
> > > >
> > > >
> > > > Also: I just tried opam update program and that also did not pick up
> > the
> > > > fact that lib is git pinned.
> > > >
> > > > Thoughts? Thanks.
> > > >
> > > > Trevor
> > > >
> > > > On Sun, May 10, 2015 at 1:17 PM, Thomas Gazagnaire <
> > thomas at gazagnaire.org>
> > > > wrote:
> > > >
> > > >> I tried setting up the "option 1" -- using a repo url. This works fine
> > > >> for clean installs, however it does not work for my use case for
> > updates. I
> > > >> didn't realize until I tried it out that this won't update upon any
> > > >> dependent installation. As noted by Louis, pinning also does not
> > reinstall
> > > >> from a repo url when a dependent install happens -- it only updates
> > the
> > > >> meta-data.
> > > >>
> > > >> What I would like is a way (ideally within opam) to say "when this
> > > >> package dependend-upon it should always be checked for update and
> > upgrade".
> > > >>
> > > >> Am I correct in stating that currently there is no way to mark a
> > package
> > > >> as "update and upgrade this package whenever something that depends
> > upon it
> > > >> is installed"?
> > > >>
> > > >>
> > > >> did you run `opam update -u <package>`? If a or dev or pinned package
> > > >> changes it should normally trigger a recompilation of all the reverse
> > > >> dependencies. how did you specify the packages in your repo?
> > > >>
> > > >> Thomas
> > > >>
> > > >>
> > > >> Thanks.
> > > >>
> > > >> Trevor
> > > >>
> > > >> On Fri, May 8, 2015 at 2:24 PM, Daniel B?nzli <
> > > >> daniel.buenzli at erratique.ch> wrote:
> > > >>
> > > >>> Le vendredi, 8 mai 2015 ? 20:09, Ashish Agarwal a ?crit :
> > > >>> > Louis, thanks for your suggestions. I'm trying them out, but one
> > quick
> > > >>> question: how can you query with tags. I tried `opam list -e
> > foobar`, and I
> > > >>> seem to get the same output no matter what I write for foobar.
> > > >>>
> > > >>> This is not opam tags this is depexts tags (that correspond to
> > > >>> platform). You can do for example:
> > > >>>
> > > >>>   opam search -s org:erratique
> > > >>>
> > > >>> But it may not be entirely precise since opam-search matches not
> > only in
> > > >>> tags. I think opam-list should be able to filter by tags (I actually
> > > >>> thought this was possible).
> > > >>>
> > > >>> Best,
> > > >>>
> > > >>> Daniel
> > > >>>
> > > >>>
> > > >>> _______________________________________________
> > > >>> Platform mailing list
> > > >>> Platform at lists.ocaml.org
> > > >>> http://lists.ocaml.org/listinfo/platform
> > > >>>
> > > >>
> > > >> _______________________________________________
> > > >> Platform mailing list
> > > >> Platform at lists.ocaml.org
> > > >> http://lists.ocaml.org/listinfo/platform
> > > >>
> > > >>
> > > >>
> > > >
> > > >
> >

From agarwal1975 at gmail.com  Mon May 11 16:02:42 2015
From: agarwal1975 at gmail.com (Ashish Agarwal)
Date: Mon, 11 May 2015 11:02:42 -0400
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <CAG-KTt_a8C9J=T=ydePPDYKaMPM+igE0-Ph-QFvD5=0gnFmLLQ@mail.gmail.com>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <CAMu2m2JoGVRtTgmqb3YPGg_RhSQH8=waPk2iw6+pzDEEEBBRdA@mail.gmail.com>
 <18348975.fvaj3Gq1yx@agaric>
 <CAMu2m2KP2rZ-Fwjz+6B-SMgPWwgf-R-j07_nb+PFu-v0bSXHEg@mail.gmail.com>
 <D6BAC0ED11DC44ECBE61BC77E01F852B@erratique.ch>
 <CAG-KTt9yKFjqzQjTHitAy-ezNmkOtqv-1xQ_1dw+as_Luw=7sg@mail.gmail.com>
 <99BD9182-ECAA-48B6-9325-84CB89ACDA65@gazagnaire.org>
 <CAG-KTt8qhdNA0ZbRqFeN8WK0zYqcJPjXGy_OEXurydhxYrGTcA@mail.gmail.com>
 <59F50507-D202-4D45-B531-D324247EE2C2@gazagnaire.org>
 <CAG-KTt_a8C9J=T=ydePPDYKaMPM+igE0-Ph-QFvD5=0gnFmLLQ@mail.gmail.com>
Message-ID: <CAMu2m2+5ZOCf0ny0faDYgG+99nZnyxTd75f1L6YundEVKWkNsg@mail.gmail.com>

On Sun, May 10, 2015 at 7:55 PM, Trevor Smith <trevorsummerssmith at gmail.com>
wrote:

"Dev" already has meaning in opam
>

I don't think opam treats it specially. It's just a version string, which
happens to come lexicographically after numeric strings.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150511/ea679b14/attachment.html>

From louis.gesbert at ocamlpro.com  Tue May 12 05:02:13 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Tue, 12 May 2015 13:02:13 +0900
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <CAMu2m2+5ZOCf0ny0faDYgG+99nZnyxTd75f1L6YundEVKWkNsg@mail.gmail.com>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <CAG-KTt_a8C9J=T=ydePPDYKaMPM+igE0-Ph-QFvD5=0gnFmLLQ@mail.gmail.com>
 <CAMu2m2+5ZOCf0ny0faDYgG+99nZnyxTd75f1L6YundEVKWkNsg@mail.gmail.com>
Message-ID: <2296980.OigKVt5xTL@agaric>

> - Ashish Agarwal, 11/05/2015 11:02 -
> On Sun, May 10, 2015 at 7:55 PM, Trevor Smith <trevorsummerssmith at gmail.com>
> wrote:
> 
> "Dev" already has meaning in opam
> >

I meant the "dev" "dependency flag", e.g.

    depends: [ "oasis" {dev & >= "0.4"} ]

> I don't think opam treats it specially. It's just a version string, which
> happens to come lexicographically after numeric strings.

While the result is true, be aware that we use Debian version ordering, which has its specifics: numbers are treated separate to string fragments, the two aren't compared (see opam.ocaml.org/doc/Manual.html#PackageFormulas for the details).

From trevorsummerssmith at gmail.com  Tue May 19 18:16:06 2015
From: trevorsummerssmith at gmail.com (Trevor Smith)
Date: Tue, 19 May 2015 13:16:06 -0400
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <1607648.PhhS1xgei5@agaric>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <18353118.ypotX7GMhu@agaric>
 <CAG-KTt8bA1T_x1cdFCbJ=TVYOuX_u8UvPEbvjegi+nt7+NZH0g@mail.gmail.com>
 <1607648.PhhS1xgei5@agaric>
Message-ID: <CAG-KTt8aj6ejjDSqGWjUzhpHbM9HiJeBg4UOD0KfORSCtq7V8Q@mail.gmail.com>

Louis,

Thanks for your responses. Apologies for my late response. I only just got
time to try this all out.

I tried out the workarounds but am not seeing it pick up new commits made
to a git repo.

Example (not using dependencies):

1) Create package "foo" in a custom repo "my-repo". With url file set to a
git repo.
2) Add repo.
3) opam install foo
4) Make new commit and push to foo's repo
<following your suggested workflow>
5) opam update -u my-repo
<this returns Everything as up-to-date as possible.>
6) opam install foo
<package is already installed>

I think I am missing something from your suggestions -- perhaps this is
clearly not going to work because OPAM does not ever check the upstream git
repo?). Was that workflow meant to only work with a pinned version?

Thanks.

Trevor

On Sun, May 10, 2015 at 11:13 PM, Louis Gesbert <louis.gesbert at ocamlpro.com>
wrote:

> > 1) I think that `opam update -u <my-internal-repo>` and then `opam
> upgrade`
> > would indeed do what I need as a workaround.
>
> `update -u` is "update then upgrade" so no need for the upgrade afterwards
> :)
>
> > The incidental complexity the it creates isn't that big of a deal for
> > one-offs on my box, but when managing a team of devs, and build boxes one
> > wants something straightforward.
> > It seems though that to make that work with the build system and to not
> > have unintended updates one would then need 2 internal dev repos -- one
> > that had all of the git versioned ones, and another repo that had your
> > normal x.y.z versions.
>
> Not sure I get what you are after exactly, but you could also put both
> version in the same repository! Making separate repositories would be
> useful if you want to easily configure hosts for the dev or release
> versions.
>
> > 2) I like my suggested solution better because I think it adds no
> > incidental complexity -- one has to describe what needs describing (ie "I
> > want this dependency always updated"), and no extra lifecycle commands
> (ie
> > no explicit "update" after one has already pushed code). And adds a clear
> > functionality to the tool.
> >
> > Agreed that updating a ton of packages could take a while -- but having a
> > clear tool (as in what I am suggesting) to define that gives the user
> that
> > flexibility -- it's my fault if I've decided to have 100 "alpha"
> packages.
> > I've asked for it.
> >
> > So I'm clear -- are you saying that due to how updates are currently
> dealt
> > with within opam that the feature I'm suggesting probably would not
> happen?
> > (I haven't taken a look at how opam works).
>
> Granted, there is already the mentionned-pinned-package-auto-update trick,
> but it's quite limited in scope -- I think it's good design otherwise to
> keep matters separate and provide atomic commands: the update of the
> internal metadata, and the installation of packages, are clearly distinct
> operations in OPAM. Higher-level operations can easily be built on top of
> it, and possibly added to OPAM, but we shouldn't put too much magic in the
> base operations: that makes things more difficult to handle, to understand
> and to debug.
>
> There is also a technical issue with what you propose: solving an
> installation is based on the current -- static -- metadata. So that
> metadata can't depend on updating other metadata, or resolving an
> installation would become a nightmare. That doesn't apply, though, if you
> only update the package source and not its metadata (like would be done
> with a repository package pointing to a VC repository, as opposed to a
> pinned package) -- it would be much easier to handle in that case, although
> it could become a bit inconsistent.
>
> With the fixes I mentionned earlier, a possibility would be to add a
> `--update-dev` option to `install` and `upgrade`, meaning something like:
> `opam install --update-dev foo`: get all installed development packages
> transitively related to `foo` (dependencies or dependent), update them
> first, then proceed with the installation, recompiling changed ones.
>
> For `install`, this would be more or less similar to `opam install foo
> $(opam list --rec --required-by foo)`, once we implement the changes to do
> related recompilations on install.
>
> Does that make sense ?
>
> Best,
> Louis
>
> >
> > Thanks.
> >
> > Trevor
> >
> > On Sun, May 10, 2015 at 9:07 PM, Louis Gesbert <
> louis.gesbert at ocamlpro.com>
> > wrote:
> >
> > > OPAM normally never updates its metadata outside of `opam update`; this
> > > was inconvenient for pins, so a trick was added: when a pinned package
> is
> > > mentionned explicitely on an install command-line, it is first updated
> from
> > > its upstream. Updating all the time could get very slow if you have
> many
> > > packages pinned to their upstream, for example (like I do).
> > >
> > > As for reinstallations, OPAM does the minimum reinstallations to
> guarantee
> > > consistency, i.e. it recompiles only packages that depend on a changed
> one
> > > -- not the other way around. It will, however, mark packages that were
> > > changed after an update for reinstallation. This should work in a
> similar
> > > way for repository and pinned packages. However, that reinstallation
> will
> > > only take place on an `opam upgrade` without argument; it would
> probably be
> > > an improvement to process it as soon as it belongs to the dependency
> cone
> > > of changed packages.
> > >
> > > Now for the dirty (and not really working) workarounds:
> > > 1. `alias opam="opam update --dev; opam"`. (this would work with the
> fix
> > > above; and the option --dev doesn't exist at the moment, we only have
> an
> > > option --repositories. Adding it)
> > > 2. Instead of `opam install foo`, fun `opam install $(opam list -s
> --rec
> > > --required-by foo) foo`. This should trigger updates due to the trick
> > > above. The reinstallations are only done on `opam upgrade` though.
> > >
> > > So indeed, your only real option if you want to keep your stuff
> up-to-date
> > > is to run `opam update -u` beforehand (possibly with your dev-repo
> name, or
> > > --dev, depending on whether you use a custom repo or pinned packages).
> > >
> > > Now, if we were to handle planned recompilations more often than only
> on
> > > global `opam upgrade`, would that be enough to handle your use-case
> better ?
> > >
> > > Best,
> > > Louis
> > >
> > > > - Trevor Smith, 10/05/2015 19:55 -
> > > > Thanks Thomas.
> > > >
> > > > Would there be interest in making a feature to "always update this
> > > > dependency"? Suggested solution:
> > > >
> > > > A keyword in the version could trigger "always update". This would
> then
> > > > apply to both normal packages as well as pins. "Dev" already has
> meaning
> > > in
> > > > opam, perhaps "-alpha". This would then allow me to internally have a
> > > > single repo with normal versions alongside versions that are actively
> > > being
> > > > developed and changing multiple times per day. Eg:
> > > >
> > > > my-repo/my-package.1.0-alpha/url:
> > > > src: "ssh://somewhere/my-package.git"
> > > >
> > > > A dependent package (ie reverse dependency) "program" on:
> "my-package" {=
> > > > "1.0-alpha" } would then always check for updates and upgrade
> my-package
> > > > before doing anything with program. A build server could get the
> behavior
> > > > I'm looking for by "opam install --deps-only program" and getting
> > > whatever
> > > > is at head of my-package (or of the given branch as the case may be).
> > > >
> > > > I think this solution would be a nice composition of the ideas that
> opam
> > > > already has, and, I think, would be a strict improvement over the
> current
> > > > situation and does not introduce any incidental complexity. This
> thread
> > > > seems to indicate that others are interested in such a feature.
> > > >
> > > > Thoughts? Thanks!
> > > >
> > > > Trevor
> > > >
> > > >
> > > >
> > > > On Sun, May 10, 2015 at 5:50 PM, Thomas Gazagnaire <
> > > thomas at gazagnaire.org>
> > > > wrote:
> > > >
> > > > > Consider two packages: lib and program. program depends upon lib.
> > > > >
> > > > >
> > > > > opam install lib
> > > > > # Make a new commit to lib and push it
> > > > > # Lib is now one commit newer
> > > > > # NB I am making _no_ changes to the internal opam repo
> > > > > opam install program
> > > > >
> > > > > lib does _not_ get recompiled.
> > > > >
> > > > > Is that the information you wanted?
> > > > >
> > > > >
> > > > > yes, when pin/dev packages are modified, you need to tell opam
> that you
> > > > > want to use the updated version (if available), so you need to run
> > > `opam
> > > > > update -u` before `opam install program`. Opam will check if there
> are
> > > new
> > > > > commits and recompile what needs to be recompiled.
> > > > >
> > > > > Thomas
> > > > >
> > > > >
> > > > > Also: I just tried opam update program and that also did not pick
> up
> > > the
> > > > > fact that lib is git pinned.
> > > > >
> > > > > Thoughts? Thanks.
> > > > >
> > > > > Trevor
> > > > >
> > > > > On Sun, May 10, 2015 at 1:17 PM, Thomas Gazagnaire <
> > > thomas at gazagnaire.org>
> > > > > wrote:
> > > > >
> > > > >> I tried setting up the "option 1" -- using a repo url. This works
> fine
> > > > >> for clean installs, however it does not work for my use case for
> > > updates. I
> > > > >> didn't realize until I tried it out that this won't update upon
> any
> > > > >> dependent installation. As noted by Louis, pinning also does not
> > > reinstall
> > > > >> from a repo url when a dependent install happens -- it only
> updates
> > > the
> > > > >> meta-data.
> > > > >>
> > > > >> What I would like is a way (ideally within opam) to say "when this
> > > > >> package dependend-upon it should always be checked for update and
> > > upgrade".
> > > > >>
> > > > >> Am I correct in stating that currently there is no way to mark a
> > > package
> > > > >> as "update and upgrade this package whenever something that
> depends
> > > upon it
> > > > >> is installed"?
> > > > >>
> > > > >>
> > > > >> did you run `opam update -u <package>`? If a or dev or pinned
> package
> > > > >> changes it should normally trigger a recompilation of all the
> reverse
> > > > >> dependencies. how did you specify the packages in your repo?
> > > > >>
> > > > >> Thomas
> > > > >>
> > > > >>
> > > > >> Thanks.
> > > > >>
> > > > >> Trevor
> > > > >>
> > > > >> On Fri, May 8, 2015 at 2:24 PM, Daniel B?nzli <
> > > > >> daniel.buenzli at erratique.ch> wrote:
> > > > >>
> > > > >>> Le vendredi, 8 mai 2015 ? 20:09, Ashish Agarwal a ?crit :
> > > > >>> > Louis, thanks for your suggestions. I'm trying them out, but
> one
> > > quick
> > > > >>> question: how can you query with tags. I tried `opam list -e
> > > foobar`, and I
> > > > >>> seem to get the same output no matter what I write for foobar.
> > > > >>>
> > > > >>> This is not opam tags this is depexts tags (that correspond to
> > > > >>> platform). You can do for example:
> > > > >>>
> > > > >>>   opam search -s org:erratique
> > > > >>>
> > > > >>> But it may not be entirely precise since opam-search matches not
> > > only in
> > > > >>> tags. I think opam-list should be able to filter by tags (I
> actually
> > > > >>> thought this was possible).
> > > > >>>
> > > > >>> Best,
> > > > >>>
> > > > >>> Daniel
> > > > >>>
> > > > >>>
> > > > >>> _______________________________________________
> > > > >>> Platform mailing list
> > > > >>> Platform at lists.ocaml.org
> > > > >>> http://lists.ocaml.org/listinfo/platform
> > > > >>>
> > > > >>
> > > > >> _______________________________________________
> > > > >> Platform mailing list
> > > > >> Platform at lists.ocaml.org
> > > > >> http://lists.ocaml.org/listinfo/platform
> > > > >>
> > > > >>
> > > > >>
> > > > >
> > > > >
> > >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150519/52eeb579/attachment-0001.html>

From trevorsummerssmith at gmail.com  Tue May 19 18:42:17 2015
From: trevorsummerssmith at gmail.com (Trevor Smith)
Date: Tue, 19 May 2015 13:42:17 -0400
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <CAG-KTt8aj6ejjDSqGWjUzhpHbM9HiJeBg4UOD0KfORSCtq7V8Q@mail.gmail.com>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <18353118.ypotX7GMhu@agaric>
 <CAG-KTt8bA1T_x1cdFCbJ=TVYOuX_u8UvPEbvjegi+nt7+NZH0g@mail.gmail.com>
 <1607648.PhhS1xgei5@agaric>
 <CAG-KTt8aj6ejjDSqGWjUzhpHbM9HiJeBg4UOD0KfORSCtq7V8Q@mail.gmail.com>
Message-ID: <CAG-KTt-KGgjXzcoh0bvjV=EPqEFAhbt9tVKyxsgxHwdHtFKOZA@mail.gmail.com>

I see this works with a pin just not with a package due to the url to the
source repo not having this same functionality currently.

So this is why people have the per-package pins -- which is a lot of
overhead.

It seems to me the only workaround that allows package B to state it wants
package A to always be updated is to have either a) per-package pin-file or
b) per-package repo. Both of these workaround seem very not ideal as it
requires the dependencies for a package to live in multiple files.

Any other thoughts on workarounds for this? Louis I hear your point about
wanting not a lot of magic in the core commands. However it seems to me
that this is a use case that isn't currently covered by the system, and,
again seems to be very useful.

There is also a technical issue with what you propose: solving an
> installation is based on the current -- static -- metadata. So that
> metadata can't depend on updating other metadata, or resolving an
> installation would become a nightmare. That doesn't apply, though, if you
> only update the package source and not its metadata (like would be done
> with a repository package pointing to a VC repository, as opposed to a
> pinned package) -- it would be much easier to handle in that case, although
> it could become a bit inconsistent.


By inconsistent, do you mean functionally, because the VC repo would be
updated regularly, and the rest of the meta-data wouldn't?

Trevor

On Tue, May 19, 2015 at 1:16 PM, Trevor Smith <trevorsummerssmith at gmail.com>
wrote:

> Louis,
>
> Thanks for your responses. Apologies for my late response. I only just got
> time to try this all out.
>
> I tried out the workarounds but am not seeing it pick up new commits made
> to a git repo.
>
> Example (not using dependencies):
>
> 1) Create package "foo" in a custom repo "my-repo". With url file set to a
> git repo.
> 2) Add repo.
> 3) opam install foo
> 4) Make new commit and push to foo's repo
> <following your suggested workflow>
> 5) opam update -u my-repo
> <this returns Everything as up-to-date as possible.>
> 6) opam install foo
> <package is already installed>
>
> I think I am missing something from your suggestions -- perhaps this is
> clearly not going to work because OPAM does not ever check the upstream git
> repo?). Was that workflow meant to only work with a pinned version?
>
> Thanks.
>
> Trevor
>
> On Sun, May 10, 2015 at 11:13 PM, Louis Gesbert <
> louis.gesbert at ocamlpro.com> wrote:
>
>> > 1) I think that `opam update -u <my-internal-repo>` and then `opam
>> upgrade`
>> > would indeed do what I need as a workaround.
>>
>> `update -u` is "update then upgrade" so no need for the upgrade
>> afterwards :)
>>
>> > The incidental complexity the it creates isn't that big of a deal for
>> > one-offs on my box, but when managing a team of devs, and build boxes
>> one
>> > wants something straightforward.
>> > It seems though that to make that work with the build system and to not
>> > have unintended updates one would then need 2 internal dev repos -- one
>> > that had all of the git versioned ones, and another repo that had your
>> > normal x.y.z versions.
>>
>> Not sure I get what you are after exactly, but you could also put both
>> version in the same repository! Making separate repositories would be
>> useful if you want to easily configure hosts for the dev or release
>> versions.
>>
>> > 2) I like my suggested solution better because I think it adds no
>> > incidental complexity -- one has to describe what needs describing (ie
>> "I
>> > want this dependency always updated"), and no extra lifecycle commands
>> (ie
>> > no explicit "update" after one has already pushed code). And adds a
>> clear
>> > functionality to the tool.
>> >
>> > Agreed that updating a ton of packages could take a while -- but having
>> a
>> > clear tool (as in what I am suggesting) to define that gives the user
>> that
>> > flexibility -- it's my fault if I've decided to have 100 "alpha"
>> packages.
>> > I've asked for it.
>> >
>> > So I'm clear -- are you saying that due to how updates are currently
>> dealt
>> > with within opam that the feature I'm suggesting probably would not
>> happen?
>> > (I haven't taken a look at how opam works).
>>
>> Granted, there is already the mentionned-pinned-package-auto-update
>> trick, but it's quite limited in scope -- I think it's good design
>> otherwise to keep matters separate and provide atomic commands: the update
>> of the internal metadata, and the installation of packages, are clearly
>> distinct operations in OPAM. Higher-level operations can easily be built on
>> top of it, and possibly added to OPAM, but we shouldn't put too much magic
>> in the base operations: that makes things more difficult to handle, to
>> understand and to debug.
>>
>> There is also a technical issue with what you propose: solving an
>> installation is based on the current -- static -- metadata. So that
>> metadata can't depend on updating other metadata, or resolving an
>> installation would become a nightmare. That doesn't apply, though, if you
>> only update the package source and not its metadata (like would be done
>> with a repository package pointing to a VC repository, as opposed to a
>> pinned package) -- it would be much easier to handle in that case, although
>> it could become a bit inconsistent.
>>
>> With the fixes I mentionned earlier, a possibility would be to add a
>> `--update-dev` option to `install` and `upgrade`, meaning something like:
>> `opam install --update-dev foo`: get all installed development packages
>> transitively related to `foo` (dependencies or dependent), update them
>> first, then proceed with the installation, recompiling changed ones.
>>
>> For `install`, this would be more or less similar to `opam install foo
>> $(opam list --rec --required-by foo)`, once we implement the changes to do
>> related recompilations on install.
>>
>> Does that make sense ?
>>
>> Best,
>> Louis
>>
>> >
>> > Thanks.
>> >
>> > Trevor
>> >
>> > On Sun, May 10, 2015 at 9:07 PM, Louis Gesbert <
>> louis.gesbert at ocamlpro.com>
>> > wrote:
>> >
>> > > OPAM normally never updates its metadata outside of `opam update`;
>> this
>> > > was inconvenient for pins, so a trick was added: when a pinned
>> package is
>> > > mentionned explicitely on an install command-line, it is first
>> updated from
>> > > its upstream. Updating all the time could get very slow if you have
>> many
>> > > packages pinned to their upstream, for example (like I do).
>> > >
>> > > As for reinstallations, OPAM does the minimum reinstallations to
>> guarantee
>> > > consistency, i.e. it recompiles only packages that depend on a
>> changed one
>> > > -- not the other way around. It will, however, mark packages that were
>> > > changed after an update for reinstallation. This should work in a
>> similar
>> > > way for repository and pinned packages. However, that reinstallation
>> will
>> > > only take place on an `opam upgrade` without argument; it would
>> probably be
>> > > an improvement to process it as soon as it belongs to the dependency
>> cone
>> > > of changed packages.
>> > >
>> > > Now for the dirty (and not really working) workarounds:
>> > > 1. `alias opam="opam update --dev; opam"`. (this would work with the
>> fix
>> > > above; and the option --dev doesn't exist at the moment, we only have
>> an
>> > > option --repositories. Adding it)
>> > > 2. Instead of `opam install foo`, fun `opam install $(opam list -s
>> --rec
>> > > --required-by foo) foo`. This should trigger updates due to the trick
>> > > above. The reinstallations are only done on `opam upgrade` though.
>> > >
>> > > So indeed, your only real option if you want to keep your stuff
>> up-to-date
>> > > is to run `opam update -u` beforehand (possibly with your dev-repo
>> name, or
>> > > --dev, depending on whether you use a custom repo or pinned packages).
>> > >
>> > > Now, if we were to handle planned recompilations more often than only
>> on
>> > > global `opam upgrade`, would that be enough to handle your use-case
>> better ?
>> > >
>> > > Best,
>> > > Louis
>> > >
>> > > > - Trevor Smith, 10/05/2015 19:55 -
>> > > > Thanks Thomas.
>> > > >
>> > > > Would there be interest in making a feature to "always update this
>> > > > dependency"? Suggested solution:
>> > > >
>> > > > A keyword in the version could trigger "always update". This would
>> then
>> > > > apply to both normal packages as well as pins. "Dev" already has
>> meaning
>> > > in
>> > > > opam, perhaps "-alpha". This would then allow me to internally have
>> a
>> > > > single repo with normal versions alongside versions that are
>> actively
>> > > being
>> > > > developed and changing multiple times per day. Eg:
>> > > >
>> > > > my-repo/my-package.1.0-alpha/url:
>> > > > src: "ssh://somewhere/my-package.git"
>> > > >
>> > > > A dependent package (ie reverse dependency) "program" on:
>> "my-package" {=
>> > > > "1.0-alpha" } would then always check for updates and upgrade
>> my-package
>> > > > before doing anything with program. A build server could get the
>> behavior
>> > > > I'm looking for by "opam install --deps-only program" and getting
>> > > whatever
>> > > > is at head of my-package (or of the given branch as the case may
>> be).
>> > > >
>> > > > I think this solution would be a nice composition of the ideas that
>> opam
>> > > > already has, and, I think, would be a strict improvement over the
>> current
>> > > > situation and does not introduce any incidental complexity. This
>> thread
>> > > > seems to indicate that others are interested in such a feature.
>> > > >
>> > > > Thoughts? Thanks!
>> > > >
>> > > > Trevor
>> > > >
>> > > >
>> > > >
>> > > > On Sun, May 10, 2015 at 5:50 PM, Thomas Gazagnaire <
>> > > thomas at gazagnaire.org>
>> > > > wrote:
>> > > >
>> > > > > Consider two packages: lib and program. program depends upon lib.
>> > > > >
>> > > > >
>> > > > > opam install lib
>> > > > > # Make a new commit to lib and push it
>> > > > > # Lib is now one commit newer
>> > > > > # NB I am making _no_ changes to the internal opam repo
>> > > > > opam install program
>> > > > >
>> > > > > lib does _not_ get recompiled.
>> > > > >
>> > > > > Is that the information you wanted?
>> > > > >
>> > > > >
>> > > > > yes, when pin/dev packages are modified, you need to tell opam
>> that you
>> > > > > want to use the updated version (if available), so you need to run
>> > > `opam
>> > > > > update -u` before `opam install program`. Opam will check if
>> there are
>> > > new
>> > > > > commits and recompile what needs to be recompiled.
>> > > > >
>> > > > > Thomas
>> > > > >
>> > > > >
>> > > > > Also: I just tried opam update program and that also did not pick
>> up
>> > > the
>> > > > > fact that lib is git pinned.
>> > > > >
>> > > > > Thoughts? Thanks.
>> > > > >
>> > > > > Trevor
>> > > > >
>> > > > > On Sun, May 10, 2015 at 1:17 PM, Thomas Gazagnaire <
>> > > thomas at gazagnaire.org>
>> > > > > wrote:
>> > > > >
>> > > > >> I tried setting up the "option 1" -- using a repo url. This
>> works fine
>> > > > >> for clean installs, however it does not work for my use case for
>> > > updates. I
>> > > > >> didn't realize until I tried it out that this won't update upon
>> any
>> > > > >> dependent installation. As noted by Louis, pinning also does not
>> > > reinstall
>> > > > >> from a repo url when a dependent install happens -- it only
>> updates
>> > > the
>> > > > >> meta-data.
>> > > > >>
>> > > > >> What I would like is a way (ideally within opam) to say "when
>> this
>> > > > >> package dependend-upon it should always be checked for update and
>> > > upgrade".
>> > > > >>
>> > > > >> Am I correct in stating that currently there is no way to mark a
>> > > package
>> > > > >> as "update and upgrade this package whenever something that
>> depends
>> > > upon it
>> > > > >> is installed"?
>> > > > >>
>> > > > >>
>> > > > >> did you run `opam update -u <package>`? If a or dev or pinned
>> package
>> > > > >> changes it should normally trigger a recompilation of all the
>> reverse
>> > > > >> dependencies. how did you specify the packages in your repo?
>> > > > >>
>> > > > >> Thomas
>> > > > >>
>> > > > >>
>> > > > >> Thanks.
>> > > > >>
>> > > > >> Trevor
>> > > > >>
>> > > > >> On Fri, May 8, 2015 at 2:24 PM, Daniel B?nzli <
>> > > > >> daniel.buenzli at erratique.ch> wrote:
>> > > > >>
>> > > > >>> Le vendredi, 8 mai 2015 ? 20:09, Ashish Agarwal a ?crit :
>> > > > >>> > Louis, thanks for your suggestions. I'm trying them out, but
>> one
>> > > quick
>> > > > >>> question: how can you query with tags. I tried `opam list -e
>> > > foobar`, and I
>> > > > >>> seem to get the same output no matter what I write for foobar.
>> > > > >>>
>> > > > >>> This is not opam tags this is depexts tags (that correspond to
>> > > > >>> platform). You can do for example:
>> > > > >>>
>> > > > >>>   opam search -s org:erratique
>> > > > >>>
>> > > > >>> But it may not be entirely precise since opam-search matches not
>> > > only in
>> > > > >>> tags. I think opam-list should be able to filter by tags (I
>> actually
>> > > > >>> thought this was possible).
>> > > > >>>
>> > > > >>> Best,
>> > > > >>>
>> > > > >>> Daniel
>> > > > >>>
>> > > > >>>
>> > > > >>> _______________________________________________
>> > > > >>> Platform mailing list
>> > > > >>> Platform at lists.ocaml.org
>> > > > >>> http://lists.ocaml.org/listinfo/platform
>> > > > >>>
>> > > > >>
>> > > > >> _______________________________________________
>> > > > >> Platform mailing list
>> > > > >> Platform at lists.ocaml.org
>> > > > >> http://lists.ocaml.org/listinfo/platform
>> > > > >>
>> > > > >>
>> > > > >>
>> > > > >
>> > > > >
>> > >
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150519/c1c89226/attachment-0001.html>

From trevorsummerssmith at gmail.com  Wed May 20 00:06:47 2015
From: trevorsummerssmith at gmail.com (Trevor Smith)
Date: Tue, 19 May 2015 19:06:47 -0400
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <CAG-KTt-KGgjXzcoh0bvjV=EPqEFAhbt9tVKyxsgxHwdHtFKOZA@mail.gmail.com>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <18353118.ypotX7GMhu@agaric>
 <CAG-KTt8bA1T_x1cdFCbJ=TVYOuX_u8UvPEbvjegi+nt7+NZH0g@mail.gmail.com>
 <1607648.PhhS1xgei5@agaric>
 <CAG-KTt8aj6ejjDSqGWjUzhpHbM9HiJeBg4UOD0KfORSCtq7V8Q@mail.gmail.com>
 <CAG-KTt-KGgjXzcoh0bvjV=EPqEFAhbt9tVKyxsgxHwdHtFKOZA@mail.gmail.com>
Message-ID: <CAG-KTt_EbjtedfQrahi=tiD+FgaLEt21ySwjAxs-KJ3LxMaNnA@mail.gmail.com>

Sorry for the multiple posts. I see now my previous post would not work,
because it was asking to only update the repo (opam update <repo>) and not
the package (opam update <package).

Will post again once a get a full working solution of what I want to do.

Trevor

On Tue, May 19, 2015 at 1:42 PM, Trevor Smith <trevorsummerssmith at gmail.com>
wrote:

> I see this works with a pin just not with a package due to the url to the
> source repo not having this same functionality currently.
>
> So this is why people have the per-package pins -- which is a lot of
> overhead.
>
> It seems to me the only workaround that allows package B to state it wants
> package A to always be updated is to have either a) per-package pin-file or
> b) per-package repo. Both of these workaround seem very not ideal as it
> requires the dependencies for a package to live in multiple files.
>
> Any other thoughts on workarounds for this? Louis I hear your point about
> wanting not a lot of magic in the core commands. However it seems to me
> that this is a use case that isn't currently covered by the system, and,
> again seems to be very useful.
>
> There is also a technical issue with what you propose: solving an
>> installation is based on the current -- static -- metadata. So that
>> metadata can't depend on updating other metadata, or resolving an
>> installation would become a nightmare. That doesn't apply, though, if you
>> only update the package source and not its metadata (like would be done
>> with a repository package pointing to a VC repository, as opposed to a
>> pinned package) -- it would be much easier to handle in that case, although
>> it could become a bit inconsistent.
>
>
> By inconsistent, do you mean functionally, because the VC repo would be
> updated regularly, and the rest of the meta-data wouldn't?
>
> Trevor
>
> On Tue, May 19, 2015 at 1:16 PM, Trevor Smith <
> trevorsummerssmith at gmail.com> wrote:
>
>> Louis,
>>
>> Thanks for your responses. Apologies for my late response. I only just
>> got time to try this all out.
>>
>> I tried out the workarounds but am not seeing it pick up new commits made
>> to a git repo.
>>
>> Example (not using dependencies):
>>
>> 1) Create package "foo" in a custom repo "my-repo". With url file set to
>> a git repo.
>> 2) Add repo.
>> 3) opam install foo
>> 4) Make new commit and push to foo's repo
>> <following your suggested workflow>
>> 5) opam update -u my-repo
>> <this returns Everything as up-to-date as possible.>
>> 6) opam install foo
>> <package is already installed>
>>
>> I think I am missing something from your suggestions -- perhaps this is
>> clearly not going to work because OPAM does not ever check the upstream git
>> repo?). Was that workflow meant to only work with a pinned version?
>>
>> Thanks.
>>
>> Trevor
>>
>> On Sun, May 10, 2015 at 11:13 PM, Louis Gesbert <
>> louis.gesbert at ocamlpro.com> wrote:
>>
>>> > 1) I think that `opam update -u <my-internal-repo>` and then `opam
>>> upgrade`
>>> > would indeed do what I need as a workaround.
>>>
>>> `update -u` is "update then upgrade" so no need for the upgrade
>>> afterwards :)
>>>
>>> > The incidental complexity the it creates isn't that big of a deal for
>>> > one-offs on my box, but when managing a team of devs, and build boxes
>>> one
>>> > wants something straightforward.
>>> > It seems though that to make that work with the build system and to not
>>> > have unintended updates one would then need 2 internal dev repos -- one
>>> > that had all of the git versioned ones, and another repo that had your
>>> > normal x.y.z versions.
>>>
>>> Not sure I get what you are after exactly, but you could also put both
>>> version in the same repository! Making separate repositories would be
>>> useful if you want to easily configure hosts for the dev or release
>>> versions.
>>>
>>> > 2) I like my suggested solution better because I think it adds no
>>> > incidental complexity -- one has to describe what needs describing (ie
>>> "I
>>> > want this dependency always updated"), and no extra lifecycle commands
>>> (ie
>>> > no explicit "update" after one has already pushed code). And adds a
>>> clear
>>> > functionality to the tool.
>>> >
>>> > Agreed that updating a ton of packages could take a while -- but
>>> having a
>>> > clear tool (as in what I am suggesting) to define that gives the user
>>> that
>>> > flexibility -- it's my fault if I've decided to have 100 "alpha"
>>> packages.
>>> > I've asked for it.
>>> >
>>> > So I'm clear -- are you saying that due to how updates are currently
>>> dealt
>>> > with within opam that the feature I'm suggesting probably would not
>>> happen?
>>> > (I haven't taken a look at how opam works).
>>>
>>> Granted, there is already the mentionned-pinned-package-auto-update
>>> trick, but it's quite limited in scope -- I think it's good design
>>> otherwise to keep matters separate and provide atomic commands: the update
>>> of the internal metadata, and the installation of packages, are clearly
>>> distinct operations in OPAM. Higher-level operations can easily be built on
>>> top of it, and possibly added to OPAM, but we shouldn't put too much magic
>>> in the base operations: that makes things more difficult to handle, to
>>> understand and to debug.
>>>
>>> There is also a technical issue with what you propose: solving an
>>> installation is based on the current -- static -- metadata. So that
>>> metadata can't depend on updating other metadata, or resolving an
>>> installation would become a nightmare. That doesn't apply, though, if you
>>> only update the package source and not its metadata (like would be done
>>> with a repository package pointing to a VC repository, as opposed to a
>>> pinned package) -- it would be much easier to handle in that case, although
>>> it could become a bit inconsistent.
>>>
>>> With the fixes I mentionned earlier, a possibility would be to add a
>>> `--update-dev` option to `install` and `upgrade`, meaning something like:
>>> `opam install --update-dev foo`: get all installed development packages
>>> transitively related to `foo` (dependencies or dependent), update them
>>> first, then proceed with the installation, recompiling changed ones.
>>>
>>> For `install`, this would be more or less similar to `opam install foo
>>> $(opam list --rec --required-by foo)`, once we implement the changes to do
>>> related recompilations on install.
>>>
>>> Does that make sense ?
>>>
>>> Best,
>>> Louis
>>>
>>> >
>>> > Thanks.
>>> >
>>> > Trevor
>>> >
>>> > On Sun, May 10, 2015 at 9:07 PM, Louis Gesbert <
>>> louis.gesbert at ocamlpro.com>
>>> > wrote:
>>> >
>>> > > OPAM normally never updates its metadata outside of `opam update`;
>>> this
>>> > > was inconvenient for pins, so a trick was added: when a pinned
>>> package is
>>> > > mentionned explicitely on an install command-line, it is first
>>> updated from
>>> > > its upstream. Updating all the time could get very slow if you have
>>> many
>>> > > packages pinned to their upstream, for example (like I do).
>>> > >
>>> > > As for reinstallations, OPAM does the minimum reinstallations to
>>> guarantee
>>> > > consistency, i.e. it recompiles only packages that depend on a
>>> changed one
>>> > > -- not the other way around. It will, however, mark packages that
>>> were
>>> > > changed after an update for reinstallation. This should work in a
>>> similar
>>> > > way for repository and pinned packages. However, that reinstallation
>>> will
>>> > > only take place on an `opam upgrade` without argument; it would
>>> probably be
>>> > > an improvement to process it as soon as it belongs to the dependency
>>> cone
>>> > > of changed packages.
>>> > >
>>> > > Now for the dirty (and not really working) workarounds:
>>> > > 1. `alias opam="opam update --dev; opam"`. (this would work with the
>>> fix
>>> > > above; and the option --dev doesn't exist at the moment, we only
>>> have an
>>> > > option --repositories. Adding it)
>>> > > 2. Instead of `opam install foo`, fun `opam install $(opam list -s
>>> --rec
>>> > > --required-by foo) foo`. This should trigger updates due to the trick
>>> > > above. The reinstallations are only done on `opam upgrade` though.
>>> > >
>>> > > So indeed, your only real option if you want to keep your stuff
>>> up-to-date
>>> > > is to run `opam update -u` beforehand (possibly with your dev-repo
>>> name, or
>>> > > --dev, depending on whether you use a custom repo or pinned
>>> packages).
>>> > >
>>> > > Now, if we were to handle planned recompilations more often than
>>> only on
>>> > > global `opam upgrade`, would that be enough to handle your use-case
>>> better ?
>>> > >
>>> > > Best,
>>> > > Louis
>>> > >
>>> > > > - Trevor Smith, 10/05/2015 19:55 -
>>> > > > Thanks Thomas.
>>> > > >
>>> > > > Would there be interest in making a feature to "always update this
>>> > > > dependency"? Suggested solution:
>>> > > >
>>> > > > A keyword in the version could trigger "always update". This would
>>> then
>>> > > > apply to both normal packages as well as pins. "Dev" already has
>>> meaning
>>> > > in
>>> > > > opam, perhaps "-alpha". This would then allow me to internally
>>> have a
>>> > > > single repo with normal versions alongside versions that are
>>> actively
>>> > > being
>>> > > > developed and changing multiple times per day. Eg:
>>> > > >
>>> > > > my-repo/my-package.1.0-alpha/url:
>>> > > > src: "ssh://somewhere/my-package.git"
>>> > > >
>>> > > > A dependent package (ie reverse dependency) "program" on:
>>> "my-package" {=
>>> > > > "1.0-alpha" } would then always check for updates and upgrade
>>> my-package
>>> > > > before doing anything with program. A build server could get the
>>> behavior
>>> > > > I'm looking for by "opam install --deps-only program" and getting
>>> > > whatever
>>> > > > is at head of my-package (or of the given branch as the case may
>>> be).
>>> > > >
>>> > > > I think this solution would be a nice composition of the ideas
>>> that opam
>>> > > > already has, and, I think, would be a strict improvement over the
>>> current
>>> > > > situation and does not introduce any incidental complexity. This
>>> thread
>>> > > > seems to indicate that others are interested in such a feature.
>>> > > >
>>> > > > Thoughts? Thanks!
>>> > > >
>>> > > > Trevor
>>> > > >
>>> > > >
>>> > > >
>>> > > > On Sun, May 10, 2015 at 5:50 PM, Thomas Gazagnaire <
>>> > > thomas at gazagnaire.org>
>>> > > > wrote:
>>> > > >
>>> > > > > Consider two packages: lib and program. program depends upon lib.
>>> > > > >
>>> > > > >
>>> > > > > opam install lib
>>> > > > > # Make a new commit to lib and push it
>>> > > > > # Lib is now one commit newer
>>> > > > > # NB I am making _no_ changes to the internal opam repo
>>> > > > > opam install program
>>> > > > >
>>> > > > > lib does _not_ get recompiled.
>>> > > > >
>>> > > > > Is that the information you wanted?
>>> > > > >
>>> > > > >
>>> > > > > yes, when pin/dev packages are modified, you need to tell opam
>>> that you
>>> > > > > want to use the updated version (if available), so you need to
>>> run
>>> > > `opam
>>> > > > > update -u` before `opam install program`. Opam will check if
>>> there are
>>> > > new
>>> > > > > commits and recompile what needs to be recompiled.
>>> > > > >
>>> > > > > Thomas
>>> > > > >
>>> > > > >
>>> > > > > Also: I just tried opam update program and that also did not
>>> pick up
>>> > > the
>>> > > > > fact that lib is git pinned.
>>> > > > >
>>> > > > > Thoughts? Thanks.
>>> > > > >
>>> > > > > Trevor
>>> > > > >
>>> > > > > On Sun, May 10, 2015 at 1:17 PM, Thomas Gazagnaire <
>>> > > thomas at gazagnaire.org>
>>> > > > > wrote:
>>> > > > >
>>> > > > >> I tried setting up the "option 1" -- using a repo url. This
>>> works fine
>>> > > > >> for clean installs, however it does not work for my use case for
>>> > > updates. I
>>> > > > >> didn't realize until I tried it out that this won't update upon
>>> any
>>> > > > >> dependent installation. As noted by Louis, pinning also does not
>>> > > reinstall
>>> > > > >> from a repo url when a dependent install happens -- it only
>>> updates
>>> > > the
>>> > > > >> meta-data.
>>> > > > >>
>>> > > > >> What I would like is a way (ideally within opam) to say "when
>>> this
>>> > > > >> package dependend-upon it should always be checked for update
>>> and
>>> > > upgrade".
>>> > > > >>
>>> > > > >> Am I correct in stating that currently there is no way to mark a
>>> > > package
>>> > > > >> as "update and upgrade this package whenever something that
>>> depends
>>> > > upon it
>>> > > > >> is installed"?
>>> > > > >>
>>> > > > >>
>>> > > > >> did you run `opam update -u <package>`? If a or dev or pinned
>>> package
>>> > > > >> changes it should normally trigger a recompilation of all the
>>> reverse
>>> > > > >> dependencies. how did you specify the packages in your repo?
>>> > > > >>
>>> > > > >> Thomas
>>> > > > >>
>>> > > > >>
>>> > > > >> Thanks.
>>> > > > >>
>>> > > > >> Trevor
>>> > > > >>
>>> > > > >> On Fri, May 8, 2015 at 2:24 PM, Daniel B?nzli <
>>> > > > >> daniel.buenzli at erratique.ch> wrote:
>>> > > > >>
>>> > > > >>> Le vendredi, 8 mai 2015 ? 20:09, Ashish Agarwal a ?crit :
>>> > > > >>> > Louis, thanks for your suggestions. I'm trying them out, but
>>> one
>>> > > quick
>>> > > > >>> question: how can you query with tags. I tried `opam list -e
>>> > > foobar`, and I
>>> > > > >>> seem to get the same output no matter what I write for foobar.
>>> > > > >>>
>>> > > > >>> This is not opam tags this is depexts tags (that correspond to
>>> > > > >>> platform). You can do for example:
>>> > > > >>>
>>> > > > >>>   opam search -s org:erratique
>>> > > > >>>
>>> > > > >>> But it may not be entirely precise since opam-search matches
>>> not
>>> > > only in
>>> > > > >>> tags. I think opam-list should be able to filter by tags (I
>>> actually
>>> > > > >>> thought this was possible).
>>> > > > >>>
>>> > > > >>> Best,
>>> > > > >>>
>>> > > > >>> Daniel
>>> > > > >>>
>>> > > > >>>
>>> > > > >>> _______________________________________________
>>> > > > >>> Platform mailing list
>>> > > > >>> Platform at lists.ocaml.org
>>> > > > >>> http://lists.ocaml.org/listinfo/platform
>>> > > > >>>
>>> > > > >>
>>> > > > >> _______________________________________________
>>> > > > >> Platform mailing list
>>> > > > >> Platform at lists.ocaml.org
>>> > > > >> http://lists.ocaml.org/listinfo/platform
>>> > > > >>
>>> > > > >>
>>> > > > >>
>>> > > > >
>>> > > > >
>>> > >
>>>
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150519/9df6c99c/attachment-0001.html>

From louis.gesbert at ocamlpro.com  Wed May 20 02:53:11 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Wed, 20 May 2015 10:53:11 +0900
Subject: [ocaml-platform] Dev Version as Package?
In-Reply-To: <CAG-KTt_EbjtedfQrahi=tiD+FgaLEt21ySwjAxs-KJ3LxMaNnA@mail.gmail.com>
References: <CAG-KTt8TysPNNpoBNnu+-toh6AiHHt0w4XjvhoMgOP9TPi9yWQ@mail.gmail.com>
 <CAG-KTt-KGgjXzcoh0bvjV=EPqEFAhbt9tVKyxsgxHwdHtFKOZA@mail.gmail.com>
 <CAG-KTt_EbjtedfQrahi=tiD+FgaLEt21ySwjAxs-KJ3LxMaNnA@mail.gmail.com>
Message-ID: <6921328.z6GHDAzK0a@agaric>

Indeed, `opam update my-repo` would tell OPAM to only update the git from the repository. What you expected for updating the package should work, just run `opam update` without argument, or specifying the package -- OPAM will update any repository, and any package that is bound to version control (either through pinning, or its in-repo url file) with just `opam update`.

> By inconsistent, do you mean functionally, because the VC repo would be
> updated regularly, and the rest of the meta-data wouldn't?

Pinning a package to a given source makes OPAM fetch its metadata from that source instead of the repository, if it can find any. Therefore, if we update the package from its upstream _after_ we decided to install it using some current metadata, we could get different metadata: 
if we ignore it, it's inconsistent with the normal pinning behaviour (update package & meta and keep them in sync). If we use it, it's inconsistent with the installation scheme that we computed (e.g., a dependency may have been added), and we would have to start over, which is not really a solution.

This wouldn't happen with non-pinned development packages, though (i.e. packages with an url pointing to a VCS), since those are stuck with the metadata found in the opam repository, and will ignore an `opam` file found in the source. It would make little sense on a UI prespective to do updates in this case that we don't do in the pinned case, though...

Please anyone feel free to point out stuff that was in need of clarification that emerged from this thread, as well as useful usage scenarios: I'll gladly use them to improve the documentation (PRs to the doc pages, opam.git/doc/pages also warmly welcome, if you're so inclined).

Best,
Louis

> - Trevor Smith, 19/05/2015 19:06 -
> Sorry for the multiple posts. I see now my previous post would not work,
> because it was asking to only update the repo (opam update <repo>) and not
> the package (opam update <package).
> 
> Will post again once a get a full working solution of what I want to do.
> 
> Trevor
> 
> On Tue, May 19, 2015 at 1:42 PM, Trevor Smith <trevorsummerssmith at gmail.com>
> wrote:
> 
> > I see this works with a pin just not with a package due to the url to the
> > source repo not having this same functionality currently.
> >
> > So this is why people have the per-package pins -- which is a lot of
> > overhead.
> >
> > It seems to me the only workaround that allows package B to state it wants
> > package A to always be updated is to have either a) per-package pin-file or
> > b) per-package repo. Both of these workaround seem very not ideal as it
> > requires the dependencies for a package to live in multiple files.
> >
> > Any other thoughts on workarounds for this? Louis I hear your point about
> > wanting not a lot of magic in the core commands. However it seems to me
> > that this is a use case that isn't currently covered by the system, and,
> > again seems to be very useful.
> >
> > There is also a technical issue with what you propose: solving an
> >> installation is based on the current -- static -- metadata. So that
> >> metadata can't depend on updating other metadata, or resolving an
> >> installation would become a nightmare. That doesn't apply, though, if you
> >> only update the package source and not its metadata (like would be done
> >> with a repository package pointing to a VC repository, as opposed to a
> >> pinned package) -- it would be much easier to handle in that case, although
> >> it could become a bit inconsistent.
> >
> >
> > By inconsistent, do you mean functionally, because the VC repo would be
> > updated regularly, and the rest of the meta-data wouldn't?
> >
> > Trevor
> >
> > On Tue, May 19, 2015 at 1:16 PM, Trevor Smith <
> > trevorsummerssmith at gmail.com> wrote:
> >
> >> Louis,
> >>
> >> Thanks for your responses. Apologies for my late response. I only just
> >> got time to try this all out.
> >>
> >> I tried out the workarounds but am not seeing it pick up new commits made
> >> to a git repo.
> >>
> >> Example (not using dependencies):
> >>
> >> 1) Create package "foo" in a custom repo "my-repo". With url file set to
> >> a git repo.
> >> 2) Add repo.
> >> 3) opam install foo
> >> 4) Make new commit and push to foo's repo
> >> <following your suggested workflow>
> >> 5) opam update -u my-repo
> >> <this returns Everything as up-to-date as possible.>
> >> 6) opam install foo
> >> <package is already installed>
> >>
> >> I think I am missing something from your suggestions -- perhaps this is
> >> clearly not going to work because OPAM does not ever check the upstream git
> >> repo?). Was that workflow meant to only work with a pinned version?
> >>
> >> Thanks.
> >>
> >> Trevor
> >>
> >> On Sun, May 10, 2015 at 11:13 PM, Louis Gesbert <
> >> louis.gesbert at ocamlpro.com> wrote:
> >>
> >>> > 1) I think that `opam update -u <my-internal-repo>` and then `opam
> >>> upgrade`
> >>> > would indeed do what I need as a workaround.
> >>>
> >>> `update -u` is "update then upgrade" so no need for the upgrade
> >>> afterwards :)
> >>>
> >>> > The incidental complexity the it creates isn't that big of a deal for
> >>> > one-offs on my box, but when managing a team of devs, and build boxes
> >>> one
> >>> > wants something straightforward.
> >>> > It seems though that to make that work with the build system and to not
> >>> > have unintended updates one would then need 2 internal dev repos -- one
> >>> > that had all of the git versioned ones, and another repo that had your
> >>> > normal x.y.z versions.
> >>>
> >>> Not sure I get what you are after exactly, but you could also put both
> >>> version in the same repository! Making separate repositories would be
> >>> useful if you want to easily configure hosts for the dev or release
> >>> versions.
> >>>
> >>> > 2) I like my suggested solution better because I think it adds no
> >>> > incidental complexity -- one has to describe what needs describing (ie
> >>> "I
> >>> > want this dependency always updated"), and no extra lifecycle commands
> >>> (ie
> >>> > no explicit "update" after one has already pushed code). And adds a
> >>> clear
> >>> > functionality to the tool.
> >>> >
> >>> > Agreed that updating a ton of packages could take a while -- but
> >>> having a
> >>> > clear tool (as in what I am suggesting) to define that gives the user
> >>> that
> >>> > flexibility -- it's my fault if I've decided to have 100 "alpha"
> >>> packages.
> >>> > I've asked for it.
> >>> >
> >>> > So I'm clear -- are you saying that due to how updates are currently
> >>> dealt
> >>> > with within opam that the feature I'm suggesting probably would not
> >>> happen?
> >>> > (I haven't taken a look at how opam works).
> >>>
> >>> Granted, there is already the mentionned-pinned-package-auto-update
> >>> trick, but it's quite limited in scope -- I think it's good design
> >>> otherwise to keep matters separate and provide atomic commands: the update
> >>> of the internal metadata, and the installation of packages, are clearly
> >>> distinct operations in OPAM. Higher-level operations can easily be built on
> >>> top of it, and possibly added to OPAM, but we shouldn't put too much magic
> >>> in the base operations: that makes things more difficult to handle, to
> >>> understand and to debug.
> >>>
> >>> There is also a technical issue with what you propose: solving an
> >>> installation is based on the current -- static -- metadata. So that
> >>> metadata can't depend on updating other metadata, or resolving an
> >>> installation would become a nightmare. That doesn't apply, though, if you
> >>> only update the package source and not its metadata (like would be done
> >>> with a repository package pointing to a VC repository, as opposed to a
> >>> pinned package) -- it would be much easier to handle in that case, although
> >>> it could become a bit inconsistent.
> >>>
> >>> With the fixes I mentionned earlier, a possibility would be to add a
> >>> `--update-dev` option to `install` and `upgrade`, meaning something like:
> >>> `opam install --update-dev foo`: get all installed development packages
> >>> transitively related to `foo` (dependencies or dependent), update them
> >>> first, then proceed with the installation, recompiling changed ones.
> >>>
> >>> For `install`, this would be more or less similar to `opam install foo
> >>> $(opam list --rec --required-by foo)`, once we implement the changes to do
> >>> related recompilations on install.
> >>>
> >>> Does that make sense ?
> >>>
> >>> Best,
> >>> Louis
> >>>
> >>> >
> >>> > Thanks.
> >>> >
> >>> > Trevor
> >>> >
> >>> > On Sun, May 10, 2015 at 9:07 PM, Louis Gesbert <
> >>> louis.gesbert at ocamlpro.com>
> >>> > wrote:
> >>> >
> >>> > > OPAM normally never updates its metadata outside of `opam update`;
> >>> this
> >>> > > was inconvenient for pins, so a trick was added: when a pinned
> >>> package is
> >>> > > mentionned explicitely on an install command-line, it is first
> >>> updated from
> >>> > > its upstream. Updating all the time could get very slow if you have
> >>> many
> >>> > > packages pinned to their upstream, for example (like I do).
> >>> > >
> >>> > > As for reinstallations, OPAM does the minimum reinstallations to
> >>> guarantee
> >>> > > consistency, i.e. it recompiles only packages that depend on a
> >>> changed one
> >>> > > -- not the other way around. It will, however, mark packages that
> >>> were
> >>> > > changed after an update for reinstallation. This should work in a
> >>> similar
> >>> > > way for repository and pinned packages. However, that reinstallation
> >>> will
> >>> > > only take place on an `opam upgrade` without argument; it would
> >>> probably be
> >>> > > an improvement to process it as soon as it belongs to the dependency
> >>> cone
> >>> > > of changed packages.
> >>> > >
> >>> > > Now for the dirty (and not really working) workarounds:
> >>> > > 1. `alias opam="opam update --dev; opam"`. (this would work with the
> >>> fix
> >>> > > above; and the option --dev doesn't exist at the moment, we only
> >>> have an
> >>> > > option --repositories. Adding it)
> >>> > > 2. Instead of `opam install foo`, fun `opam install $(opam list -s
> >>> --rec
> >>> > > --required-by foo) foo`. This should trigger updates due to the trick
> >>> > > above. The reinstallations are only done on `opam upgrade` though.
> >>> > >
> >>> > > So indeed, your only real option if you want to keep your stuff
> >>> up-to-date
> >>> > > is to run `opam update -u` beforehand (possibly with your dev-repo
> >>> name, or
> >>> > > --dev, depending on whether you use a custom repo or pinned
> >>> packages).
> >>> > >
> >>> > > Now, if we were to handle planned recompilations more often than
> >>> only on
> >>> > > global `opam upgrade`, would that be enough to handle your use-case
> >>> better ?
> >>> > >
> >>> > > Best,
> >>> > > Louis
> >>> > >
> >>> > > > - Trevor Smith, 10/05/2015 19:55 -
> >>> > > > Thanks Thomas.
> >>> > > >
> >>> > > > Would there be interest in making a feature to "always update this
> >>> > > > dependency"? Suggested solution:
> >>> > > >
> >>> > > > A keyword in the version could trigger "always update". This would
> >>> then
> >>> > > > apply to both normal packages as well as pins. "Dev" already has
> >>> meaning
> >>> > > in
> >>> > > > opam, perhaps "-alpha". This would then allow me to internally
> >>> have a
> >>> > > > single repo with normal versions alongside versions that are
> >>> actively
> >>> > > being
> >>> > > > developed and changing multiple times per day. Eg:
> >>> > > >
> >>> > > > my-repo/my-package.1.0-alpha/url:
> >>> > > > src: "ssh://somewhere/my-package.git"
> >>> > > >
> >>> > > > A dependent package (ie reverse dependency) "program" on:
> >>> "my-package" {=
> >>> > > > "1.0-alpha" } would then always check for updates and upgrade
> >>> my-package
> >>> > > > before doing anything with program. A build server could get the
> >>> behavior
> >>> > > > I'm looking for by "opam install --deps-only program" and getting
> >>> > > whatever
> >>> > > > is at head of my-package (or of the given branch as the case may
> >>> be).
> >>> > > >
> >>> > > > I think this solution would be a nice composition of the ideas
> >>> that opam
> >>> > > > already has, and, I think, would be a strict improvement over the
> >>> current
> >>> > > > situation and does not introduce any incidental complexity. This
> >>> thread
> >>> > > > seems to indicate that others are interested in such a feature.
> >>> > > >
> >>> > > > Thoughts? Thanks!
> >>> > > >
> >>> > > > Trevor
> >>> > > >
> >>> > > >
> >>> > > >
> >>> > > > On Sun, May 10, 2015 at 5:50 PM, Thomas Gazagnaire <
> >>> > > thomas at gazagnaire.org>
> >>> > > > wrote:
> >>> > > >
> >>> > > > > Consider two packages: lib and program. program depends upon lib.
> >>> > > > >
> >>> > > > >
> >>> > > > > opam install lib
> >>> > > > > # Make a new commit to lib and push it
> >>> > > > > # Lib is now one commit newer
> >>> > > > > # NB I am making _no_ changes to the internal opam repo
> >>> > > > > opam install program
> >>> > > > >
> >>> > > > > lib does _not_ get recompiled.
> >>> > > > >
> >>> > > > > Is that the information you wanted?
> >>> > > > >
> >>> > > > >
> >>> > > > > yes, when pin/dev packages are modified, you need to tell opam
> >>> that you
> >>> > > > > want to use the updated version (if available), so you need to
> >>> run
> >>> > > `opam
> >>> > > > > update -u` before `opam install program`. Opam will check if
> >>> there are
> >>> > > new
> >>> > > > > commits and recompile what needs to be recompiled.
> >>> > > > >
> >>> > > > > Thomas
> >>> > > > >
> >>> > > > >
> >>> > > > > Also: I just tried opam update program and that also did not
> >>> pick up
> >>> > > the
> >>> > > > > fact that lib is git pinned.
> >>> > > > >
> >>> > > > > Thoughts? Thanks.
> >>> > > > >
> >>> > > > > Trevor
> >>> > > > >
> >>> > > > > On Sun, May 10, 2015 at 1:17 PM, Thomas Gazagnaire <
> >>> > > thomas at gazagnaire.org>
> >>> > > > > wrote:
> >>> > > > >
> >>> > > > >> I tried setting up the "option 1" -- using a repo url. This
> >>> works fine
> >>> > > > >> for clean installs, however it does not work for my use case for
> >>> > > updates. I
> >>> > > > >> didn't realize until I tried it out that this won't update upon
> >>> any
> >>> > > > >> dependent installation. As noted by Louis, pinning also does not
> >>> > > reinstall
> >>> > > > >> from a repo url when a dependent install happens -- it only
> >>> updates
> >>> > > the
> >>> > > > >> meta-data.
> >>> > > > >>
> >>> > > > >> What I would like is a way (ideally within opam) to say "when
> >>> this
> >>> > > > >> package dependend-upon it should always be checked for update
> >>> and
> >>> > > upgrade".
> >>> > > > >>
> >>> > > > >> Am I correct in stating that currently there is no way to mark a
> >>> > > package
> >>> > > > >> as "update and upgrade this package whenever something that
> >>> depends
> >>> > > upon it
> >>> > > > >> is installed"?
> >>> > > > >>
> >>> > > > >>
> >>> > > > >> did you run `opam update -u <package>`? If a or dev or pinned
> >>> package
> >>> > > > >> changes it should normally trigger a recompilation of all the
> >>> reverse
> >>> > > > >> dependencies. how did you specify the packages in your repo?
> >>> > > > >>
> >>> > > > >> Thomas
> >>> > > > >>
> >>> > > > >>
> >>> > > > >> Thanks.
> >>> > > > >>
> >>> > > > >> Trevor
> >>> > > > >>
> >>> > > > >> On Fri, May 8, 2015 at 2:24 PM, Daniel B?nzli <
> >>> > > > >> daniel.buenzli at erratique.ch> wrote:
> >>> > > > >>
> >>> > > > >>> Le vendredi, 8 mai 2015 ? 20:09, Ashish Agarwal a ?crit :
> >>> > > > >>> > Louis, thanks for your suggestions. I'm trying them out, but
> >>> one
> >>> > > quick
> >>> > > > >>> question: how can you query with tags. I tried `opam list -e
> >>> > > foobar`, and I
> >>> > > > >>> seem to get the same output no matter what I write for foobar.
> >>> > > > >>>
> >>> > > > >>> This is not opam tags this is depexts tags (that correspond to
> >>> > > > >>> platform). You can do for example:
> >>> > > > >>>
> >>> > > > >>>   opam search -s org:erratique
> >>> > > > >>>
> >>> > > > >>> But it may not be entirely precise since opam-search matches
> >>> not
> >>> > > only in
> >>> > > > >>> tags. I think opam-list should be able to filter by tags (I
> >>> actually
> >>> > > > >>> thought this was possible).
> >>> > > > >>>
> >>> > > > >>> Best,
> >>> > > > >>>
> >>> > > > >>> Daniel
> >>> > > > >>>
> >>> > > > >>>
> >>> > > > >>> _______________________________________________
> >>> > > > >>> Platform mailing list
> >>> > > > >>> Platform at lists.ocaml.org
> >>> > > > >>> http://lists.ocaml.org/listinfo/platform
> >>> > > > >>>
> >>> > > > >>
> >>> > > > >> _______________________________________________
> >>> > > > >> Platform mailing list
> >>> > > > >> Platform at lists.ocaml.org
> >>> > > > >> http://lists.ocaml.org/listinfo/platform
> >>> > > > >>
> >>> > > > >>
> >>> > > > >>
> >>> > > > >
> >>> > > > >
> >>> > >
> >>>
> >>
> >>
> >
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 473 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150520/5f0f7ca3/attachment.sig>

From christoph.hoeger at tu-berlin.de  Fri May 22 06:41:49 2015
From: christoph.hoeger at tu-berlin.de (=?UTF-8?B?Q2hyaXN0b3BoIEjDtmdlcg==?=)
Date: Fri, 22 May 2015 07:41:49 +0200
Subject: [ocaml-platform] opam drybuild?
Message-ID: <555EC19D.3010607@tu-berlin.de>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

My latest update to Modelica.ml failed due to some unresolved
dependencies, that I had already installed on my system.

I am using oasis, so is there a way to check dependencies between
oasis and opam? Maby I can also completely re-generate the opam files
from oasis on every release.

However, in case you do not use oasis, how do you test your build in a
fresh environment locally? Is there some magic opam option ala
BUILDROOT or something like that?

- -- 
Christoph H?ger

Technische Universit?t Berlin
Fakult?t IV - Elektrotechnik und Informatik
?bersetzerbau und Programmiersprachen

Sekr. TEL12-2, Ernst-Reuter-Platz 7, 10587 Berlin

Tel.: +49 (30) 314-24890
E-Mail: christoph.hoeger at tu-berlin.de
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iEYEARECAAYFAlVewZ0ACgkQhMBO4cVSGS+0uwCfcsd0S2G0JF+Ura6NatSmUzxF
XTsAniHTMwmiyH9UwMUnK4Rce8Tjkq5o
=nvp+
-----END PGP SIGNATURE-----

From louis.gesbert at ocamlpro.com  Fri May 22 06:48:18 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Fri, 22 May 2015 14:48:18 +0900
Subject: [ocaml-platform] opam drybuild?
In-Reply-To: <555EC19D.3010607@tu-berlin.de>
References: <555EC19D.3010607@tu-berlin.de>
Message-ID: <1682122.xsb4McIzBB@agaric>

The easiest way to check is to try to install the package from a fresh switch, e.g.:

    opam switch test --alias-of system --no-switch
    opam install modelica --switch test
    opam switch remove test

oasis2opam may help you get the right dependencies, but I don't know of a tool to check them afterwards. OPAM itself has no knowledge of Oasis, or any other build system, for that matter.

> - Christoph H?ger, 22/05/2015 07:41 -
> My latest update to Modelica.ml failed due to some unresolved
> dependencies, that I had already installed on my system.
> 
> I am using oasis, so is there a way to check dependencies between
> oasis and opam? Maby I can also completely re-generate the opam files
> from oasis on every release.
> 
> However, in case you do not use oasis, how do you test your build in a
> fresh environment locally? Is there some magic opam option ala
> BUILDROOT or something like that?
> 
> --
> Christoph H?ger
> 
> Technische Universit?t Berlin
> Fakult?t IV - Elektrotechnik und Informatik
> ?bersetzerbau und Programmiersprachen
> 
> Sekr. TEL12-2, Ernst-Reuter-Platz 7, 10587 Berlin
> 
> Tel.: +49 (30) 314-24890
> E-Mail: christoph.hoeger at tu-berlin.de
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform
> 

