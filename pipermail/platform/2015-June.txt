From hannes at mehnert.org  Fri Jun  5 10:59:38 2015
From: hannes at mehnert.org (Hannes Mehnert)
Date: Fri, 05 Jun 2015 10:59:38 +0100
Subject: [ocaml-platform] OPAM: signing the repository
Message-ID: <5571730A.10604@mehnert.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA384

Hi all,

After a couple months of research and discussions between Louis
Gesbert and myself, the proposal for a secured OPAM repository
(featuring both end-to-end signing, and repository signing), is ready
for a wider review.

The result has just been posted at
https://opam.ocaml.org/blog/Signing-the-opam-repository/

This thread is intended as the official channel for comments and
discussion on the proposal above.

Thanks!

Louis Gesbert and Hannes Mehnert
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCQAGBQJVcXMKAAoJELyJZYjffCju+zYQAKJKhnjkVeya4TGgDNjDaVK4
sgSeZaiqpEwtx7wFIFBoCmDg2s7KfJXXNxI6XmVW93PBhU4mBNT+Xzykkpw5+DcF
cgtXe3nJqqEqTV/fPJ7FT+uXFJqCcj5CVIzUKAtdKqnKrjU1owdJiaHVIfSXcrEb
hHJ2Ij1qEWeey/oBXiJrunwQ5QkkxRBQAXdtK+7j9s71ZK7UCuRGi/g1GD/ZMxTL
9rMAMSnYggGUMSIhDPOJlAHXd9nHSlv0ME6zt48mQgZ8a3T3+bq/SZrlteRsbHOH
wJQECa62pa/EpOn57SNEqSwU0rcPKi/6BXwZ/fG4+byZdHLjet8g2zxlO+WUb3PL
T4y1oeKatKu06f64SU5Ty0EZnG6uABoRj963BKVfQHs1R5VCL3rVXIsdaXiBmecP
uth3QOehFxHN91NSm0WhMbqd7OnPetIDzpMwjGxw3b9sOzHKOx4YJhpxakYdIpU9
Yxb61vclRAyTYPFMucXJDjwQSVcDvp9weN5QdFkRoLB+wIwfcyiaheZGvb27O/Ia
9gPyVxyO0/S9Rf7sIna5IMoIFqJ4v3J7tfoTJdk3brNftfjZ0bg1ZuolshhnA93G
4lgG179pVIsfYMCpmi6II1hV23FzWOFBn4jbgM9hTvVKG+y+Ag704lXVhzygz6Gh
gCx+wKh/LuI+phhcesw7
=wOT2
-----END PGP SIGNATURE-----

From amc79 at cam.ac.uk  Fri Jun  5 11:02:10 2015
From: amc79 at cam.ac.uk (Amir Chaudhry)
Date: Fri, 5 Jun 2015 11:02:10 +0100
Subject: [ocaml-platform] OPAM: signing the repository
References: <1738503.7vA22SrKUT@agaric>
Message-ID: <21F58A62-340F-4A4E-85A7-D0CDC2BA28BB@cam.ac.uk>



> Begin forwarded message:
> 
> Hi all,
> 
> After a couple months of research and discussions between Hannes Mehnert and myself, the proposal for a secured OPAM repository (featuring both end-to-end signing, and repository signing), is ready for a wider review.
> 
> The result has just been posted at https://opam.ocaml.org/blog/Signing-the-opam-repository/
> 
> This thread is intended as the official channel for comments and discussion on the proposal above.
> 
> Thanks!
> 
> Louis Gesbert


From dwws2 at cam.ac.uk  Fri Jun  5 11:47:37 2015
From: dwws2 at cam.ac.uk (David Sheets)
Date: Fri, 05 Jun 2015 11:47:37 +0100
Subject: [ocaml-platform] OPAM: signing the repository
In-Reply-To: <5571730A.10604@mehnert.org>
References: <5571730A.10604@mehnert.org>
Message-ID: <55717E49.6010709@cam.ac.uk>

On 06/05/2015 10:59 AM, Hannes Mehnert wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA384
>
> Hi all,
>
> After a couple months of research and discussions between Louis
> Gesbert and myself, the proposal for a secured OPAM repository
> (featuring both end-to-end signing, and repository signing), is ready
> for a wider review.

Wow! This is really nice work.

I have a few questions:

1. In your linearity invariants, you say that no key may be removed (1) 
which seems sensible even if inviting a lot of cruft eventually. Then, 
you say that keys can only be modified with a signature (5) and, as a 
special exception, removal of a developer key (exception 2) is allowed. 
What happens when these events occur? Do things get re-signed? Do 
clients have to traverse the repo history to extract old keys to verify 
signatures?

2. Are the default opam root keys compiled into the binary or on-disk? I 
interpreted it both ways from a couple of mentions throughout the doc.

3. How will the uniqueness and time-limitedness of the initial-bootstrap 
key be enforced?

4. Where are RM keys stored in the repo? in keys/dev? keys/root seems to 
contain a list of the keyid/algo/key triples for RMs but there is a 
keyid uniqueness condition...? Could you clarify the distinction between 
a keyid and an author id (user at host)?

5. Can the dev (and RM) identities be designed for extensibility? It 
reads like the key files will just contain a list of key triples right 
now. Could these files contain a single field, e.g. "keys", so that 
others could be added later? Specifically, I would like to attest to my 
GitHub user id so the signatures in the repo can be used by bots to 
authorize simple actions performed by my GitHub user (e.g. rebuild this PR).

Overall, it looks very well thought out! Thanks for putting in so much 
effort to get us this far. I'm very optimistic about this system, now.

David

> The result has just been posted at
> https://opam.ocaml.org/blog/Signing-the-opam-repository/
>
> This thread is intended as the official channel for comments and
> discussion on the proposal above.
>
> Thanks!
>
> Louis Gesbert and Hannes Mehnert
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v2
>
> iQIcBAEBCQAGBQJVcXMKAAoJELyJZYjffCju+zYQAKJKhnjkVeya4TGgDNjDaVK4
> sgSeZaiqpEwtx7wFIFBoCmDg2s7KfJXXNxI6XmVW93PBhU4mBNT+Xzykkpw5+DcF
> cgtXe3nJqqEqTV/fPJ7FT+uXFJqCcj5CVIzUKAtdKqnKrjU1owdJiaHVIfSXcrEb
> hHJ2Ij1qEWeey/oBXiJrunwQ5QkkxRBQAXdtK+7j9s71ZK7UCuRGi/g1GD/ZMxTL
> 9rMAMSnYggGUMSIhDPOJlAHXd9nHSlv0ME6zt48mQgZ8a3T3+bq/SZrlteRsbHOH
> wJQECa62pa/EpOn57SNEqSwU0rcPKi/6BXwZ/fG4+byZdHLjet8g2zxlO+WUb3PL
> T4y1oeKatKu06f64SU5Ty0EZnG6uABoRj963BKVfQHs1R5VCL3rVXIsdaXiBmecP
> uth3QOehFxHN91NSm0WhMbqd7OnPetIDzpMwjGxw3b9sOzHKOx4YJhpxakYdIpU9
> Yxb61vclRAyTYPFMucXJDjwQSVcDvp9weN5QdFkRoLB+wIwfcyiaheZGvb27O/Ia
> 9gPyVxyO0/S9Rf7sIna5IMoIFqJ4v3J7tfoTJdk3brNftfjZ0bg1ZuolshhnA93G
> 4lgG179pVIsfYMCpmi6II1hV23FzWOFBn4jbgM9hTvVKG+y+Ag704lXVhzygz6Gh
> gCx+wKh/LuI+phhcesw7
> =wOT2
> -----END PGP SIGNATURE-----
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform
>


From edwin+ml-ocaml at etorok.net  Fri Jun  5 13:27:37 2015
From: edwin+ml-ocaml at etorok.net (=?windows-1252?Q?T=F6r=F6k_Edwin?=)
Date: Fri, 05 Jun 2015 15:27:37 +0300
Subject: [ocaml-platform] OPAM: signing the repository
In-Reply-To: <5571730A.10604@mehnert.org>
References: <5571730A.10604@mehnert.org>
Message-ID: <557195B9.4060401@etorok.net>

On 06/05/2015 12:59 PM, Hannes Mehnert wrote:
> Hi all,
> 
> After a couple months of research and discussions between Louis
> Gesbert and myself, the proposal for a secured OPAM repository
> (featuring both end-to-end signing, and repository signing), is ready
> for a wider review.
> 
> The result has just been posted at
> https://opam.ocaml.org/blog/Signing-the-opam-repository/
> 
> This thread is intended as the official channel for comments and
> discussion on the proposal above.

Thanks for working on this, I think this is an important piece in the opam infrastructure.

- there's been a few downgrade/MiTM attacks related to legacy cryptography in TLS or Jwt and I'd like to avoid that here.

Can we require that minimum key sizes and algorithms are always specified outside the file itself that contains the signature?
For example client-side enforcement of minimum SHA-256 [*] and RSA-2048 for the entire chain, otherwise someone could create a signed file
specifying md5 as algo, and perform an md5 collision on the signature, or introduce a weak RSA key in the delegation chain.

As long as the format supports multiple hashes you can of course still include md5, sha1 for compatibility with old opam versions,
and when you want to upgrade the algo or hash you can just bump the minimum requirement in the next opam version and provide
both signatures in the repository.
In fact its probably better to have multiple hashes even if one of them is weaker as it is probably much harder
to generate a collision with the same file for multiple hashes

- packages with git or local directory as source

These should probably not be signable with anything higher than a snapshot key, because the remote git repository
can change any time without signature verification.
And local directory sources are probably similarly unsafe (could be NFS mounted, etc.)

Package signatures with a high trust path must always contain a hash of the source tarball.

- Github PR merge security

Author of PR can push more commits (even rewrite the whole PR history with force push) which might create a race condition
between reviewing a PR and merging the PR. Can the snapshot bot add a comment to each PR after it finished the Travis build
with the Git commit hash?

- opam --trace-sigs

Perhaps you intended to include this in opam-admin, but would be useful to be able to display the full signature chain,
and all the files and signatures involved in it in the client too (think: dig +trace).

- how expensive is it to check signatures?

Will the client check each package's full chain, or just for the root and the packages that are to be installed/upgraded?

[*] I know Git uses SHA1, but that shouldn't prevent us from using SHA-2 (too) for the signatures


Best regards,
--Edwin

From hannes at mehnert.org  Fri Jun  5 13:31:41 2015
From: hannes at mehnert.org (Hannes Mehnert)
Date: Fri, 05 Jun 2015 13:31:41 +0100
Subject: [ocaml-platform] OPAM: signing the repository
In-Reply-To: <55717E49.6010709@cam.ac.uk>
References: <5571730A.10604@mehnert.org> <55717E49.6010709@cam.ac.uk>
Message-ID: <557196AD.8070005@mehnert.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA384

David,

On 06/05/2015 11:47, David Sheets wrote:
>> Wow! This is really nice work.


Thanks! And thanks for your questions!


>> 1. In your linearity invariants, you say that no key may be
>> removed (1) which seems sensible even if inviting a lot of cruft
>> eventually. Then, you say that keys can only be modified with a
>> signature (5) and, as a special exception, removal of a developer
>> key (exception 2) is allowed. What happens when these events
>> occur? Do things get re-signed? Do clients have to traverse the
>> repo history to extract old keys to verify signatures?


The first ones are the linearity invariants for each commit. Addition
is pretty straightforward.

A modification is still ok, since there can be signatures on the
modified data. Deletion is the hard bit: there is nothing afterwards -
thus the commit must contain an annotated tag storing signatures that
the deletion was intentioned.

Whenever a key is removed (on a compromise/steal event), all the
signatures done with this key are considered to be invalid. No need to
traverse history.


>> 2. Are the default opam root keys compiled into the binary or
>> on-disk? I interpreted it both ways from a couple of mentions
>> throughout the doc.


Shipped within the binary (for the main opam repository), and used to
verify the signed root file in the repository.


>> 3. How will the uniqueness and time-limitedness of the
>> initial-bootstrap key be enforced?


It will be generated once, all the things will be signed, and then
purged from its existence.


>> 4. Where are RM keys stored in the repo? in keys/dev? keys/root
>> seems to contain a list of the keyid/algo/key triples for RMs but
>> there is a keyid uniqueness condition...? Could you clarify the
>> distinction between a keyid and an author id (user at host)?


RM keys are stored in the root file. A keyid and authorid are the
same, authorids must be unique (across package and repository
maintainers, although stored at different places). Since the amount of
RMs is bounded, and their keys will be needed during most runs of opam
anyways, they will reside in memory. Thus, a lookup for a specific
keyid/authorid will first lookup in the set of RMs, then in the
package maintainer directory (keys/).


>> 5. Can the dev (and RM) identities be designed for extensibility?
>> It reads like the key files will just contain a list of key
>> triples right now. Could these files contain a single field, e.g.
>> "keys", so that others could be added later? Specifically, I
>> would like to attest to my GitHub user id so the signatures in
>> the repo can be used by bots to authorize simple actions
>> performed by my GitHub user (e.g. rebuild this PR).


Yes, we removed the not-yet-finished part about what is contained in
keys/authorid (and how certain parts of it are verified). We want to
couple them to GitHub user ids, and email addresses -- and have some
form of automatic validation (similar to keybase.io).


Hannes
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCQAGBQJVcZatAAoJELyJZYjffCjuvGwQAKayQl+94d7oj2X5NOiMyDmz
MhNbMZOxfHlWDB2HqtE+rBqv3c96bKB2j8/Pd22BEGbDin6JE1THno2ozBF1cKI1
u/nOVY4A7Br2wwmd6qaDh3nP/VNglXCyP5mUnPhTaVZpGgSBHDAa/imGE59f6f/z
PAUKseNmc0dume2Tz9GeTfYDeVNfEA2wqS+FoUbV/wpGKdVfVRTUwB6AHkWJqGsi
7cb1ry4ceSh+FWemxd60icIGW9oU8cBjEdJka11sYYwOAEd4F9XO+8JNZVvY6qfo
ZjJDK0YssQatxua7Lob0TSAL2cfcJGjlxvKr0T9ET26m+8EvuO8qYaMBzECTnB6r
EXC6jWPQC72OY3W2aXLmUndYflLH6IBTppsKwsoU+oOtwPZj7C90FpW8+shShMm/
3Ca22Qz+wEQ9/vUwT4yFqrc3tGNqZgpDPVv3Yyt8t8Pn7379THT4gsD5hSHAVZhf
R7ARlp/Gks68rK9Ix/HfE44yKMZ4I8zyz8KygjzruDdUiugBji6mCLbZ9vxS0HEU
E6b6u8GxrnOWenPyc9mAJ27Ez8SzELbnGpfffQb3eJESztU4dRNO9/CdqwuOcXyJ
yaNkLdwuld3PJjoYJ+kHHst27QfvZ3UL4Luh3tfbDHLvlHSk2ccgFS0B34TbGt0K
IeaePU2UXrd2jkBHCaXX
=ZvVJ
-----END PGP SIGNATURE-----

From daniel.buenzli at erratique.ch  Fri Jun  5 13:32:17 2015
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Fri, 5 Jun 2015 13:32:17 +0100
Subject: [ocaml-platform] OPAM: signing the repository
In-Reply-To: <5571730A.10604@mehnert.org>
References: <5571730A.10604@mehnert.org>
Message-ID: <2D849D28CFDC4840A5723D10645B3BCB@erratique.ch>

Here are a few comments.

* It seems to me that you introduce the concepts of "developer", "package maintainer" and "author" which are all the same. It would be clearer if a single name was kept and used consistently.

* I'm not sure that "Date is in the ISO 8601 standard" is what you actually want as this is an incredibly flexible standard to represent date and time (e.g. you can use a year, week number and week day). What you are likely meaning is that the date is in the RFC 3339 standard, a sane subset of the ISO 8601 standard.

* Wouldn't it be better to bring the compiler-as-package work to an end before doing this so that you don't have to special case for them (and thus reduce the complexity, attack surface, etc.) ?

Daniel



From hannes at mehnert.org  Fri Jun  5 13:43:14 2015
From: hannes at mehnert.org (Hannes Mehnert)
Date: Fri, 05 Jun 2015 13:43:14 +0100
Subject: [ocaml-platform] OPAM: signing the repository
In-Reply-To: <557195B9.4060401@etorok.net>
References: <5571730A.10604@mehnert.org> <557195B9.4060401@etorok.net>
Message-ID: <55719962.9030302@mehnert.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA384

Hi Edwin,

On 06/05/2015 13:27, T?r?k Edwin wrote:
> Thanks for working on this, I think this is an important piece in
> the opam infrastructure.
> 
> - there's been a few downgrade/MiTM attacks related to legacy
> cryptography in TLS or Jwt and I'd like to avoid that here.


I do plan to support only SHA-2 and RSA > 2048 bits. But yes, it
should be user-configurable.


> - packages with git or local directory as source


I do not plan to support signing for git / local dir (although git
versions might carry an annotated tag with signature)..


> - Github PR merge security
> 
> Author of PR can push more commits (even rewrite the whole PR
> history with force push) which might create a race condition 
> between reviewing a PR and merging the PR. Can the snapshot bot add
> a comment to each PR after it finished the Travis build with the
> Git commit hash?


The plan is to have some travis checks here (which creates a checkmark
icon on success on the commit), and then the snapshot bot which will
verify that everything is monotonic.


> - opam --trace-sigs
> 
> Perhaps you intended to include this in opam-admin, but would be
> useful to be able to display the full signature chain, and all the
> files and signatures involved in it in the client too (think: dig
> +trace).


Agreed.


> - how expensive is it to check signatures?
> 
> Will the client check each package's full chain, or just for the
> root and the packages that are to be installed/upgraded?


Before processing data, a client will first verify this data. A client
will not blindly download and verify all the tarballs, but the
metadata (opam file) will be verified before used by opam for
dependency calculation etc.


Hannes
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCQAGBQJVcZliAAoJELyJZYjffCjulwsQAKlnZwBX5xAPiP9ilQXHKrx2
NTOAI39NuFOu6M64uKU1mMWiqAT60RXtxErC+d1RiggqpytB3fyFaE58dzLsPEs0
KKxT0gwlUzytRlLQe2evLePUt/arMYzY6brpNLuCyFYtfDkNuxLL/w5eA6VIdFbC
k0VtIXuLzFR0oMfEUZJmq/LM/iQbovNmDw1gdt1I0QX+YOocgDJ7LBU+HBMzad7N
BYhEP/LgFKEFjRygedz/NNlVdn+4cKbRXVplJwqagWRmNaQMGyhbiYtpQx96m5wg
qOpTubejXhZfGXvG7XXJ4OAYouVxnyQquIx/C2yM2Xm3j6+SjvKjkH/tLkWgUvKQ
y1JHLLf+VXHy2RzG+Xg2yaXatV/BY3mdRJlCe3LaGlYiX1h4eAxVD5Latp3+S+NQ
Hm+qn4BqQuiW2QSOAi9utd2coV/23kaIzb5TP+bHKI2aTHlixf4DSfhf3XkNW0LY
2BD3HG57vmyiOOF9Irvt6Pla1pBgp85MoKBEcyR9h4mZIuLJ5ECaEYZOvQM3lB4S
JPDWXKRdLgZBpextwNmLVaReZezK31ytJb5lSdXzZN6XKn1WN/oLUqcEgWhKnG+v
+AmCZFrCTUxPlMLJaNxNPgOUnPsgbPs/kvufh4R7ceAK3Vp/1INLPpt9xz/B4T7z
OwpAEAAkV+i/A67bh7Of
=bghw
-----END PGP SIGNATURE-----

From hannes at mehnert.org  Fri Jun  5 13:45:10 2015
From: hannes at mehnert.org (Hannes Mehnert)
Date: Fri, 05 Jun 2015 13:45:10 +0100
Subject: [ocaml-platform] OPAM: signing the repository
In-Reply-To: <2D849D28CFDC4840A5723D10645B3BCB@erratique.ch>
References: <5571730A.10604@mehnert.org>
 <2D849D28CFDC4840A5723D10645B3BCB@erratique.ch>
Message-ID: <557199D6.2010802@mehnert.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA384

Daniel,

On 06/05/2015 13:32, Daniel B?nzli wrote:
> Here are a few comments.
> 
> * It seems to me that you introduce the concepts of "developer",
> "package maintainer" and "author" which are all the same. It would
> be clearer if a single name was kept and used consistently.
> 
> * I'm not sure that "Date is in the ISO 8601 standard" is what you
> actually want as this is an incredibly flexible standard to
> represent date and time (e.g. you can use a year, week number and
> week day). What you are likely meaning is that the date is in the
> RFC 3339 standard, a sane subset of the ISO 8601 standard.
> 
> * Wouldn't it be better to bring the compiler-as-package work to an
> end before doing this so that you don't have to special case for
> them (and thus reduce the complexity, attack surface, etc.) ?


Thanks. You're right on all three points. Sorry for the inconsistency.
I haven't looked too deeply into the compiler-as-package or how
compilers are handled by opam atm (and hope Louis or someone else will
have a good idea how to deal with that).


Hannes

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCQAGBQJVcZnWAAoJELyJZYjffCjuMaEP/3xhF37yHG/+UGzBwrQHmSzo
KuQ45poZZRJ3ZOtARlMmneNwsH+zTK/lMKUlDJJhgqSNOOb+2VyuC3SneKlpbbwK
10Z5GblGeX5kZ1xULvqbq/i+xO9ttP5kRDy21+O/2jqQa3TWCzAvKoRYNkkAmOmu
UT7QlBqubi3zur/hsWeFo489r420SAzJgG7375nNrMMCtg02NUh2/TPDNA/c8Ywl
F5MQUFJH2WPsuG4HUODp9+WAzbpMjtPkDeq90WNCf1TVjHNTOfPgZxOX1uq1zA8A
WD4QQ+fiPkS3UU66oNbo7+mNn5hCK6esdsBF0F5M5hGiIAhbZwcyPnR7TWCiU4yY
lYnLa3a/uMf9ijS90mcDgrxiBmmS76tEStbPPse7TkngLQmPJzDYCjAnrwcfgb8+
osf3gHuxGrokGR/u5DijBREFT4r+EpeynDINm9xdhpDx5yx8MCBS/ez92LXg9Clf
SvhyDPYUCQGo0Qvv5/rzb5i45ZghQWJDKwZ9OhjJDpYgrqIh/DulglW+A1XTs2p0
ZANn6atKwtgYMF3Rwe2DXSdtdI22dQre0X+Oi/Q7h59vIeFJ9yRtUNsxmCclvCuu
GyZZBHQeyqcblWd+1t2KX64WvWLndQlO3tAwLaLrMolg4Fj167QbiQvTNIy6yK0n
4+94lSM48nKbin8PlJVr
=DNJt
-----END PGP SIGNATURE-----

From dwws2 at cam.ac.uk  Fri Jun  5 13:46:29 2015
From: dwws2 at cam.ac.uk (David Sheets)
Date: Fri, 05 Jun 2015 13:46:29 +0100
Subject: [ocaml-platform] OPAM: signing the repository
In-Reply-To: <557196AD.8070005@mehnert.org>
References: <5571730A.10604@mehnert.org> <55717E49.6010709@cam.ac.uk>
 <557196AD.8070005@mehnert.org>
Message-ID: <55719A25.3090209@cam.ac.uk>

On 06/05/2015 01:31 PM, Hannes Mehnert wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA384
>
> David,
>
> On 06/05/2015 11:47, David Sheets wrote:
>>> Wow! This is really nice work.
>
>
> Thanks! And thanks for your questions!
>
>
>>> 1. In your linearity invariants, you say that no key may be
>>> removed (1) which seems sensible even if inviting a lot of cruft
>>> eventually. Then, you say that keys can only be modified with a
>>> signature (5) and, as a special exception, removal of a developer
>>> key (exception 2) is allowed. What happens when these events
>>> occur? Do things get re-signed? Do clients have to traverse the
>>> repo history to extract old keys to verify signatures?
>
>
> The first ones are the linearity invariants for each commit. Addition
> is pretty straightforward.
>
> A modification is still ok, since there can be signatures on the
> modified data. Deletion is the hard bit: there is nothing afterwards -
> thus the commit must contain an annotated tag storing signatures that
> the deletion was intentioned.
>
> Whenever a key is removed (on a compromise/steal event), all the
> signatures done with this key are considered to be invalid. No need to
> traverse history.

Ok. If I understand you correctly, modification of a key will require 
resigning all non-malicious objects that used to be signed by the old 
version of the key?

>>> 3. How will the uniqueness and time-limitedness of the
>>> initial-bootstrap key be enforced?
>
>
> It will be generated once, all the things will be signed, and then
> purged from its existence.

So the public initial-bootstrap key will be baked into opam like the 
root key? Will there be any safeguard against later re-use of the 
"purged" key? Maybe the snapshot bot could check that the 
initial-bootstrap key is only ever used before a specific commit?

>>> 4. Where are RM keys stored in the repo? in keys/dev? keys/root
>>> seems to contain a list of the keyid/algo/key triples for RMs but
>>> there is a keyid uniqueness condition...? Could you clarify the
>>> distinction between a keyid and an author id (user at host)?
>
>
> RM keys are stored in the root file. A keyid and authorid are the
> same, authorids must be unique (across package and repository
> maintainers, although stored at different places). Since the amount of
> RMs is bounded, and their keys will be needed during most runs of opam
> anyways, they will reside in memory. Thus, a lookup for a specific
> keyid/authorid will first lookup in the set of RMs, then in the
> package maintainer directory (keys/).

So the file keys/dev/user at host will contain triples like:
[ [ "user at host" "algo" "key" ]
   [ "user at host" "algo2" "key" ]
]

? Can the pair of keyid/algo recur? Is there a reason that keys/root 
doesn't reference the keyid/authorid in keys/dev? What happens if they 
are not equivalent?

>>> 5. Can the dev (and RM) identities be designed for extensibility?
>>> It reads like the key files will just contain a list of key
>>> triples right now. Could these files contain a single field, e.g.
>>> "keys", so that others could be added later? Specifically, I
>>> would like to attest to my GitHub user id so the signatures in
>>> the repo can be used by bots to authorize simple actions
>>> performed by my GitHub user (e.g. rebuild this PR).
>
>
> Yes, we removed the not-yet-finished part about what is contained in
> keys/authorid (and how certain parts of it are verified). We want to
> couple them to GitHub user ids, and email addresses -- and have some
> form of automatic validation (similar to keybase.io).

Cool! I look forward to that design.

Thanks,

David

> Hannes
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v2
>
> iQIcBAEBCQAGBQJVcZatAAoJELyJZYjffCjuvGwQAKayQl+94d7oj2X5NOiMyDmz
> MhNbMZOxfHlWDB2HqtE+rBqv3c96bKB2j8/Pd22BEGbDin6JE1THno2ozBF1cKI1
> u/nOVY4A7Br2wwmd6qaDh3nP/VNglXCyP5mUnPhTaVZpGgSBHDAa/imGE59f6f/z
> PAUKseNmc0dume2Tz9GeTfYDeVNfEA2wqS+FoUbV/wpGKdVfVRTUwB6AHkWJqGsi
> 7cb1ry4ceSh+FWemxd60icIGW9oU8cBjEdJka11sYYwOAEd4F9XO+8JNZVvY6qfo
> ZjJDK0YssQatxua7Lob0TSAL2cfcJGjlxvKr0T9ET26m+8EvuO8qYaMBzECTnB6r
> EXC6jWPQC72OY3W2aXLmUndYflLH6IBTppsKwsoU+oOtwPZj7C90FpW8+shShMm/
> 3Ca22Qz+wEQ9/vUwT4yFqrc3tGNqZgpDPVv3Yyt8t8Pn7379THT4gsD5hSHAVZhf
> R7ARlp/Gks68rK9Ix/HfE44yKMZ4I8zyz8KygjzruDdUiugBji6mCLbZ9vxS0HEU
> E6b6u8GxrnOWenPyc9mAJ27Ez8SzELbnGpfffQb3eJESztU4dRNO9/CdqwuOcXyJ
> yaNkLdwuld3PJjoYJ+kHHst27QfvZ3UL4Luh3tfbDHLvlHSk2ccgFS0B34TbGt0K
> IeaePU2UXrd2jkBHCaXX
> =ZvVJ
> -----END PGP SIGNATURE-----
>


From hannes at mehnert.org  Fri Jun  5 13:57:55 2015
From: hannes at mehnert.org (Hannes Mehnert)
Date: Fri, 05 Jun 2015 13:57:55 +0100
Subject: [ocaml-platform] OPAM: signing the repository
In-Reply-To: <55719A25.3090209@cam.ac.uk>
References: <5571730A.10604@mehnert.org> <55717E49.6010709@cam.ac.uk>
 <557196AD.8070005@mehnert.org> <55719A25.3090209@cam.ac.uk>
Message-ID: <55719CD3.9070304@mehnert.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA384

On 06/05/2015 13:46, David Sheets wrote:
> Ok. If I understand you correctly, modification of a key will
> require resigning all non-malicious objects that used to be signed
> by the old version of the key?


Yep.


>> It will be generated once, all the things will be signed, and
>> then purged from its existence.
> 
> So the public initial-bootstrap key will be baked into opam like
> the root key? Will there be any safeguard against later re-use of
> the "purged" key? Maybe the snapshot bot could check that the 
> initial-bootstrap key is only ever used before a specific commit?


The initial bootstrap key will be a special entry in the root file.
Making it valid only before a specific commit sounds like a good idea.


> So the file keys/dev/user at host will contain triples like: [ [
> "user at host" "algo" "key" ] [ "user at host" "algo2" "key" ] ]
> 
> ? Can the pair of keyid/algo recur?


It shouldn't. Intended is to use the user at host as identifier (thus,
uniqueness). Not sure whether there is a need for a hash over the
public key (keyid).


> Is there a reason that keys/root doesn't reference the
> keyid/authorid in keys/dev? What happens if they are not
> equivalent?


For RMs, the key will just be in keys/root rather than keys/dev. But
we could also put only the user at host ids into keys/root, and have the
RM keys in keys/dev without trouble I believe.


>> Yes, we removed the not-yet-finished part about what is contained
>> in keys/authorid (and how certain parts of it are verified). We
>> want to couple them to GitHub user ids, and email addresses --
>> and have some form of automatic validation (similar to
>> keybase.io).
> 
> Cool! I look forward to that design.


First things first.. Thus, first an implementation of the opam
signing. If you have ideas/thoughts about identities, let us know :)


Hannes
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCQAGBQJVcZzTAAoJELyJZYjffCjugsQP/2LA+4GagnipkbQynlZrm3EN
JgFJCYDUugOsvWlHUu8zlJBQEhFTix1szW8Jm2hNFU31gj0m6dDMPlpWOKSlBQsX
zb7sMp5tEaMdCbOk1it0heEzA4InfMVsP5sJJ/GNDW//Sgm8fKiQfci/od13aL0e
k8q9fWUT9bQD4Vyurppm0fcriGqTxR7NOFk2TdKh2idQ8n0tcMg9VFh29axyxIYZ
79QolOxduL342AfXXOEbj5zwAtIz4y7HefmlUzPYUCNM+BKEAU3+A2ElF/vNYh5w
ZaV21QVuQQ301i+vW+VrTD+stWZP+gPDH20XKz+/E1fr0BrDgGCQV6OOj55NgxXE
tRDnJBqNNloSDR+DhABbDl8vHYeJr3MX5g95h5KPT70SL5loewRYnNREw8XRS0DM
OYNnuxvYsYY9YzupEw9+j9L5t+uzjN96Ar+57CEWG/swttvki2aF5ILQ0lYgJGvq
IaChCyS0Rcyi0HabICXmgwCR/YTqARIQS+oDlbFOZU7j0L8TJheOxYjFWzrEsilH
Z64k+yC+wh99cf/VVB/6iEjW6iAA9sTd634DddRCTSiQt7DH+DA/hnnSBks/aZik
u7xoFdXcO0dQTtMIz4YIjrNFuxEj8YwvzPNGNdmVg5PbAbp6yseI9+tmXxd1CkKB
ppIun2X+B1W7OwnFkTVC
=hGXX
-----END PGP SIGNATURE-----

From francois.berenger at inria.fr  Fri Jun  5 14:13:37 2015
From: francois.berenger at inria.fr (Francois Berenger)
Date: Fri, 05 Jun 2015 15:13:37 +0200
Subject: [ocaml-platform] OPAM: signing the repository
In-Reply-To: <55719962.9030302@mehnert.org>
References: <5571730A.10604@mehnert.org> <557195B9.4060401@etorok.net>
 <55719962.9030302@mehnert.org>
Message-ID: <5571A081.7060200@inria.fr>

On 06/05/2015 02:43 PM, Hannes Mehnert wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA384
>
> Hi Edwin,
>
> On 06/05/2015 13:27, T?r?k Edwin wrote:
>> Thanks for working on this, I think this is an important piece in
>> the opam infrastructure.
>>
>> - there's been a few downgrade/MiTM attacks related to legacy
>> cryptography in TLS or Jwt and I'd like to avoid that here.
>
>
> I do plan to support only SHA-2 and RSA > 2048 bits. But yes, it
> should be user-configurable.
>
>
>> - packages with git or local directory as source
>
>
> I do not plan to support signing for git / local dir (although git
> versions might carry an annotated tag with signature)..
>
>
>> - Github PR merge security
>>
>> Author of PR can push more commits (even rewrite the whole PR
>> history with force push) which might create a race condition
>> between reviewing a PR and merging the PR. Can the snapshot bot add
>> a comment to each PR after it finished the Travis build with the
>> Git commit hash?
>
>
> The plan is to have some travis checks here (which creates a checkmark
> icon on success on the commit), and then the snapshot bot which will
> verify that everything is monotonic.
>
>
>> - opam --trace-sigs
>>
>> Perhaps you intended to include this in opam-admin, but would be
>> useful to be able to display the full signature chain, and all the
>> files and signatures involved in it in the client too (think: dig
>> +trace).
>
>
> Agreed.
>
>
>> - how expensive is it to check signatures?

This can easily be parallelized (w/ parmap for example).

>> Will the client check each package's full chain, or just for the
>> root and the packages that are to be installed/upgraded?
>
>
> Before processing data, a client will first verify this data. A client
> will not blindly download and verify all the tarballs, but the
> metadata (opam file) will be verified before used by opam for
> dependency calculation etc.
>
>
> Hannes
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v2
>
> iQIcBAEBCQAGBQJVcZliAAoJELyJZYjffCjulwsQAKlnZwBX5xAPiP9ilQXHKrx2
> NTOAI39NuFOu6M64uKU1mMWiqAT60RXtxErC+d1RiggqpytB3fyFaE58dzLsPEs0
> KKxT0gwlUzytRlLQe2evLePUt/arMYzY6brpNLuCyFYtfDkNuxLL/w5eA6VIdFbC
> k0VtIXuLzFR0oMfEUZJmq/LM/iQbovNmDw1gdt1I0QX+YOocgDJ7LBU+HBMzad7N
> BYhEP/LgFKEFjRygedz/NNlVdn+4cKbRXVplJwqagWRmNaQMGyhbiYtpQx96m5wg
> qOpTubejXhZfGXvG7XXJ4OAYouVxnyQquIx/C2yM2Xm3j6+SjvKjkH/tLkWgUvKQ
> y1JHLLf+VXHy2RzG+Xg2yaXatV/BY3mdRJlCe3LaGlYiX1h4eAxVD5Latp3+S+NQ
> Hm+qn4BqQuiW2QSOAi9utd2coV/23kaIzb5TP+bHKI2aTHlixf4DSfhf3XkNW0LY
> 2BD3HG57vmyiOOF9Irvt6Pla1pBgp85MoKBEcyR9h4mZIuLJ5ECaEYZOvQM3lB4S
> JPDWXKRdLgZBpextwNmLVaReZezK31ytJb5lSdXzZN6XKn1WN/oLUqcEgWhKnG+v
> +AmCZFrCTUxPlMLJaNxNPgOUnPsgbPs/kvufh4R7ceAK3Vp/1INLPpt9xz/B4T7z
> OwpAEAAkV+i/A67bh7Of
> =bghw
> -----END PGP SIGNATURE-----
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform
>

-- 
Regards,
Francois.

From louis.gesbert at ocamlpro.com  Sat Jun  6 02:36:32 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Sat, 06 Jun 2015 10:36:32 +0900
Subject: [ocaml-platform] OPAM: signing the repository
In-Reply-To: <2D849D28CFDC4840A5723D10645B3BCB@erratique.ch>
References: <5571730A.10604@mehnert.org>
 <2D849D28CFDC4840A5723D10645B3BCB@erratique.ch>
Message-ID: <2803042.tRg6iy1mDU@agaric>

> - Daniel B?nzli, 05/06/2015 13:32 -
> Here are a few comments.

Thanks!

> * It seems to me that you introduce the concepts of "developer", "package maintainer" and "author" which are all the same. It would be clearer if a single name was kept and used consistently.

Correct, indeed. Let's pin to "developer", avoiding confusion with "repostitory maintainer" (or just "maintainer" ?)

> * I'm not sure that "Date is in the ISO 8601 standard" is what you actually want as this is an incredibly flexible standard to represent date and time (e.g. you can use a year, week number and week day). What you are likely meaning is that the date is in the RFC 3339 standard, a sane subset of the ISO 8601 standard.

Hmm, I just copied that from TUF without looking into the details... Will fix with something more precise, thanks!

> * Wouldn't it be better to bring the compiler-as-package work to an end before doing this so that you don't have to special case for them (and thus reduce the complexity, attack surface, etc.) ?

The two different hierarchies and naming policies for /packages and /compilers are indeed a mess; 
that's why we suggest refactoring the /compilers hierarchy in the proposal.

Compilers-as-packages, though, doesn't completely fix the problem: in its current form, it still uses compiler definitions. The difference is that they are limited to metadata (e.g. a list of core packages, that are required and immovable), while currently compiler definitions refer to source archive and upstream patches.

Completely getting rid of compiler files would be nice, but requires some more design: adding specific tags, and maybe fields, to opam files, and handling those properly. I'll see if I can work something out, this has already been waiting for too long.

Best,
Louis
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 473 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20150606/c5f01971/attachment.sig>

From louis.gesbert at ocamlpro.com  Mon Jun  8 03:52:15 2015
From: louis.gesbert at ocamlpro.com (Louis Gesbert)
Date: Mon, 08 Jun 2015 11:52:15 +0900
Subject: [ocaml-platform] OPAM: signing the repository
In-Reply-To: <5571730A.10604@mehnert.org>
References: <5571730A.10604@mehnert.org>
Message-ID: <1904663.HTdLYqnn9n@agaric>

I just added an issue to track the needed improvements to the specification arising from the discussions here [1]. Please keep the discussion in the ML for now :) -- and thanks for the feedback!

[1] https://github.com/ocaml/opam/issues/2182

Louis

From daniel.buenzli at erratique.ch  Tue Jun 30 17:58:21 2015
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Tue, 30 Jun 2015 17:58:21 +0100
Subject: [ocaml-platform] Identifying windows ports for build systems &
 cross compiling distinctions
Message-ID: <88589CEFF4F346BBB9C699A50E198142@erratique.ch>

Hello,  

In the context of building things, one apparently needs to be able precisely identify the windows ports in order to produce build artefacts with correct extensions (see [1]). It seems that: 

1) Using the OCaml MSVC ports, windows specific extensions are used
2) Using the OCaml mingw ports, unix extensions are used
3) Using the OCaml cygwin port, unix extensions are used

The problem is that at the moment various detection bits e.g. [2] conflate 1) + 2) under a single variable, namely win32. Something is needed to distinguish them in build systems in general.

Here are a few ideas:

a) Introduce a new toolchain variable, that specifies the toolchain used, whatever that means. 
b) Distinguish an OS for the mingw ports 
c) Distinguish these 3 cases through a distribution variable [3]

I have the impression that a) is going to introduce again more noise, names and branches in the eco-system which already has plenty enough. Regarding c) I think it would be bending the semantics of the variable. Given that cygwin is already treated as an OS I would suggest that we rather use b) and introduce a "win32-mingw" or "mingw" (or whichever name windows users would find accurate) value for OS like variables. 

Besides for cross compilation of packages we need to distinguish between `build-os` and `host-os` (os on which the build products are run). It would be nice if opam could somehow provide variables for these values for build systems to use in order to configure packages properly. IIRC opam currently only has an `os` variable which has the value of `build-os` but is currently being used for `host-os` semantics. 

Note that some other variables pertaining to the capabilities of the installed OCaml compilers see [4] will also need {build,host}-os distinction (e.g. `ocaml-native` and `ocaml-native-dynlink`). In order to remain backward compatible with the current repository, I guess that the simplest is to deem all current variables as having host semantics and introduce only new variables for build semantics i.e. `build-os-ocaml-native`, `build-os-ocaml-native-dynlink`, `build-os-ocaml-version`, etc.

Best,

Daniel

P.S. To windows users. I would also be interested in knowing if there is a tool invocation that is actually able to distinguish between 1) and 2).

[1] https://github.com/dbuenzli/topkg/issues/11#issuecomment-117050094
[2] https://github.com/ocaml/opam-depext/blob/d94f9f06e1d489dc4f946fb3aa37589eb9e9a2ec/depext.ml#L62-L74
[3] https://github.com/ocaml/opam-depext/blob/d94f9f06e1d489dc4f946fb3aa37589eb9e9a2ec/depext.ml#L76-L109
[4] https://opam.ocaml.org/doc/manual/dev-manual.html#sec37



From daniel.buenzli at erratique.ch  Tue Jun 30 18:52:16 2015
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Tue, 30 Jun 2015 18:52:16 +0100
Subject: [ocaml-platform] [wg-windows] Identifying windows ports for
 build systems & cross compiling distinctions
In-Reply-To: <E51C5B015DBD1348A1D85763337FB6D9E9C9F6C4@Remus.metastack.local>
References: <88589CEFF4F346BBB9C699A50E198142@erratique.ch>
 <E51C5B015DBD1348A1D85763337FB6D9E9C9F6C4@Remus.metastack.local>
Message-ID: <76478AAD389641DE94728EC386AFFA87@erratique.ch>

Le mardi, 30 juin 2015 ? 18:13, David Allsopp a ?crit :
> $OCAMLLIB/Makefile.config defines TOOLCHAIN variable already which gives mingw or msvc.  

Ok thanks, so it can at least be discovered. On my osx machine I have cc in there, so I guess this means the C toolchain ?  

> (or with more recent OCamls by using the Config module of compiler-libs.common)
Assuming we are accessing this from a build system implemented in OCaml, I guess this fails in cross-compilation settings since you will get the values of the build-os OCaml compilers in there.


> The mingw compiler already use the form w64 for the host, so that the compilers "fake" a cross-compiling triple (e.g. i686-w64-mingw32-gcc and x86_64-w64-mingw32-gcc). Perhaps that would be better?
I don't understand what you are proposing here. Did you say we should use "mingw32" as an OS value to denote the mingw ports ?  

Best,

Daniel

From david at allsopps.net  Tue Jun 30 18:13:12 2015
From: david at allsopps.net (David Allsopp)
Date: Tue, 30 Jun 2015 17:13:12 +0000
Subject: [ocaml-platform] [wg-windows] Identifying windows ports for
 build systems & cross compiling distinctions
In-Reply-To: <88589CEFF4F346BBB9C699A50E198142@erratique.ch>
References: <88589CEFF4F346BBB9C699A50E198142@erratique.ch>
Message-ID: <E51C5B015DBD1348A1D85763337FB6D9E9C9F6C4@Remus.metastack.local>

Daniel B?nzli wrote:
> Hello,
> 
> In the context of building things, one apparently needs to be able
> precisely identify the windows ports in order to produce build artefacts
> with correct extensions (see [1]). It seems that:
> 
> 1) Using the OCaml MSVC ports, windows specific extensions are used
> 2) Using the OCaml mingw ports, unix extensions are used

Not quite: shared libraries are .dll rather than .so

> 3) Using the OCaml cygwin port, unix extensions are used

I can't remember if Cygwin uses .so.dll or just .so, but I expect whatever it does that it fakes everything to work with just .so (just as it fakes things to work without .exe) - tricks which *do not work* when dealing with mingw-compiled programs which obviously don't have the Cygwin layer.

> The problem is that at the moment various detection bits e.g. [2] conflate
> 1) + 2) under a single variable, namely win32. Something is needed to
> distinguish them in build systems in general.
> 
> Here are a few ideas:
> 
> a) Introduce a new toolchain variable, that specifies the toolchain used,
> whatever that means.

$OCAMLLIB/Makefile.config defines TOOLCHAIN variable already which gives mingw or msvc. Equally, all of the required extensions can be determined by grep'ing the output of ocamlopt -config (or with more recent OCamls by using the Config module of compiler-libs.common)

> b) Distinguish an OS for the mingw ports
> c) Distinguish these 3 cases through a distribution variable [3]
> 
> I have the impression that a) is going to introduce again more noise,
> names and branches in the eco-system which already has plenty enough.
> Regarding c) I think it would be bending the semantics of the variable.
> Given that cygwin is already treated as an OS I would suggest that we
> rather use b) and introduce a "win32-mingw" or "mingw" (or whichever name
> windows users would find accurate) value for OS like variables.
> 
> Besides for cross compilation of packages we need to distinguish between
> `build-os` and `host-os` (os on which the build products are run). It
> would be nice if opam could somehow provide variables for these values for
> build systems to use in order to configure packages properly. IIRC opam
> currently only has an `os` variable which has the value of `build-os` but
> is currently being used for `host-os` semantics.

The mingw compiler already use the form w64 for the host, so that the compilers "fake" a cross-compiling triple (e.g. i686-w64-mingw32-gcc and x86_64-w64-mingw32-gcc). Perhaps that would be better?

> Note that some other variables pertaining to the capabilities of the
> installed OCaml compilers see [4] will also need {build,host}-os
> distinction (e.g. `ocaml-native` and `ocaml-native-dynlink`). In order to
> remain backward compatible with the current repository, I guess that the
> simplest is to deem all current variables as having host semantics and
> introduce only new variables for build semantics i.e. `build-os-ocaml-
> native`, `build-os-ocaml-native-dynlink`, `build-os-ocaml-version`, etc.
> 
> Best,
> 
> Daniel
> 
> P.S. To windows users. I would also be interested in knowing if there is a
> tool invocation that is actually able to distinguish between 1) and 2).
> 
> [1] https://github.com/dbuenzli/topkg/issues/11#issuecomment-117050094
> [2] https://github.com/ocaml/opam-
> depext/blob/d94f9f06e1d489dc4f946fb3aa37589eb9e9a2ec/depext.ml#L62-L74
> [3] https://github.com/ocaml/opam-
> depext/blob/d94f9f06e1d489dc4f946fb3aa37589eb9e9a2ec/depext.ml#L76-L109
> [4] https://opam.ocaml.org/doc/manual/dev-manual.html#sec37
> 
> 
> _______________________________________________
> wg-windows mailing list
> wg-windows at lists.ocaml.org
> http://lists.ocaml.org/listinfo/wg-windows

