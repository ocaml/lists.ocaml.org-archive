From thomas at ocamlpro.com  Tue Apr  2 21:03:30 2013
From: thomas at ocamlpro.com (Thomas Gazagnaire)
Date: Tue, 2 Apr 2013 22:03:30 +0200
Subject: [ocaml-platform] the most complete package description ever ?
Message-ID: <8C0D820A-468A-4384-AE41-F89C25E787E1@ocamlpro.com>

Seems that we have a good candidate for the "most complete" package description in OPAM :-)

http://opam.ocamlpro.com/pkg/why3.0.81.html

(although the "description" field does not contain a short first-line, but this gives a good idea of what metadata are available)

I guess at one point, the "tags" should become hyperlinks, and we should get some author pages as well: that's some work to be done in https://github.com/OCamlPro/opam2web, any contribution is more than welcome.

Looking forward to see other packages (including mine) getting the same level of quality in their metadata!
Thomas


From francois.bobot at cea.fr  Wed Apr  3 10:01:42 2013
From: francois.bobot at cea.fr (=?ISO-8859-1?Q?Fran=E7ois_Bobot?=)
Date: Wed, 03 Apr 2013 11:01:42 +0200
Subject: [ocaml-platform] the most complete package description ever ?
In-Reply-To: <8C0D820A-468A-4384-AE41-F89C25E787E1@ocamlpro.com>
References: <8C0D820A-468A-4384-AE41-F89C25E787E1@ocamlpro.com>
Message-ID: <515BEFF6.5080906@cea.fr>

Le 02/04/2013 22:03, Thomas Gazagnaire a ?crit :
> Seems that we have a good candidate for the "most complete" package description in OPAM :-)
That have been possible only because of the great developer guide.

>
> (although the "description" field does not contain a short first-line, but this gives a good idea of what metadata are available)
>
I missed that in the manual.

>
> Looking forward to see other packages (including mine) getting the same level of quality in their metadata!

Thanks, but it is just a pleasure to do nice work for a great tool!

Best,

-- 
Fran?ois


From Claude.Marche at inria.fr  Wed Apr  3 09:31:32 2013
From: Claude.Marche at inria.fr (Claude Marche)
Date: Wed, 03 Apr 2013 10:31:32 +0200
Subject: [ocaml-platform] the most complete package description ever ?
In-Reply-To: <8C0D820A-468A-4384-AE41-F89C25E787E1@ocamlpro.com>
References: <8C0D820A-468A-4384-AE41-F89C25E787E1@ocamlpro.com>
Message-ID: <515BE8E4.7050908@inria.fr>


Hi all,

Le 02/04/2013 22:03, Thomas Gazagnaire a ?crit :
> Seems that we have a good candidate for the "most complete" package description in OPAM :-)
>
> http://opam.ocamlpro.com/pkg/why3.0.81.html
>
> (although the "description" field does not contain a short first-line, but this gives a good idea of what metadata are available)

You're right, there should be an empty line after the first sentence

I take this opportunity to say that we (the Why3 developers) are very 
happy that OPAM exists, and we count on this support of OCamlPro to 
provide users with a robust installation procedure, that works on many 
different architectures.

So keep up the good work with OPAM !


- Claude


-- 
Claude March?                          | tel: +33 1 72 92 59 69
INRIA Saclay - ?le-de-France           |
Universit? Paris-sud, Bat. 650         | http://www.lri.fr/~marche/
F-91405 ORSAY Cedex                    |


From yminsky at janestreet.com  Sat Apr  6 19:12:39 2013
From: yminsky at janestreet.com (Yaron Minsky)
Date: Sat, 6 Apr 2013 14:12:39 -0400
Subject: [ocaml-platform] "opam config env" and emacs
Message-ID: <CACLX4jT466nvMy291j8z0_r2jJOhiofYQJ5be16Ve=gLjABdNw@mail.gmail.com>

Does anyone know a good way of setting up emacs to point to the
appropriate site-lisp directory in OPAM?  Right now, I have a stanza
like this in my .emacs:

(add-to-list 'load-path
             (expand-file-name
"~/.opam/4.01.0dev+trunk/share/emacs/site-lisp/"))

But this is of course not at all sensitive to opam switch.  Jeremie
has some auto-detection code here:

   https://github.com/diml/utop/issues/4

Should we integrate this into OPAM somehow so people don't have to dig
this out and cut and paste it in?

y

From wojciech.meyer at gmail.com  Sat Apr  6 19:23:20 2013
From: wojciech.meyer at gmail.com (Wojciech Meyer)
Date: Sat, 06 Apr 2013 19:23:20 +0100
Subject: [ocaml-platform] "opam config env" and emacs
In-Reply-To: <CACLX4jT466nvMy291j8z0_r2jJOhiofYQJ5be16Ve=gLjABdNw@mail.gmail.com>
 (Yaron Minsky's message of "Sat, 6 Apr 2013 14:12:39 -0400")
References: <CACLX4jT466nvMy291j8z0_r2jJOhiofYQJ5be16Ve=gLjABdNw@mail.gmail.com>
Message-ID: <wfppy7h61z.fsf@gmail.com>

So the usual way of doing that is to use Emacs package manager (ELPA),
and package the lisp part of the packages separately.

http://marmalade-repo.org/

provides all the licensing goodies to make the life easier.

What would also work to call Emacs from OPAM to automatically evaluate
needed expression and install the package in Emacs, this is risky for my
configuration, but might work in majority of cases. Others might prefer
other solutions of course.

Yaron Minsky <yminsky at janestreet.com> writes:

> Does anyone know a good way of setting up emacs to point to the
> appropriate site-lisp directory in OPAM?  Right now, I have a stanza
> like this in my .emacs:
>
> (add-to-list 'load-path
>              (expand-file-name
> "~/.opam/4.01.0dev+trunk/share/emacs/site-lisp/"))
>
> But this is of course not at all sensitive to opam switch.  Jeremie
> has some auto-detection code here:
>
>    https://github.com/diml/utop/issues/4
>
> Should we integrate this into OPAM somehow so people don't have to dig
> this out and cut and paste it in?
>
> y
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform

--
Wojciech

From lpw25 at cam.ac.uk  Sat Apr  6 19:32:09 2013
From: lpw25 at cam.ac.uk (Leo White)
Date: Sat, 06 Apr 2013 19:32:09 +0100
Subject: [ocaml-platform] "opam config env" and emacs
In-Reply-To: <wfppy7h61z.fsf@gmail.com> (Wojciech Meyer's message of "Sat, 06
 Apr 2013 19:23:20 +0100")
References: <CACLX4jT466nvMy291j8z0_r2jJOhiofYQJ5be16Ve=gLjABdNw@mail.gmail.com>
 <wfppy7h61z.fsf@gmail.com>
Message-ID: <87vc7ztsra.fsf@study.localdomain>

> So the usual way of doing that is to use Emacs package manager (ELPA),
> and package the lisp part of the packages separately.

Note that ELPA was only added to Emacs in version 24. Debian testing is still on
Emacs 23, so it would be good to have a solution that worked without ELPA.

From wojciech.meyer at gmail.com  Sat Apr  6 19:53:12 2013
From: wojciech.meyer at gmail.com (Wojciech Meyer)
Date: Sat, 06 Apr 2013 19:53:12 +0100
Subject: [ocaml-platform] "opam config env" and emacs
In-Reply-To: <87vc7ztsra.fsf@study.localdomain> (Leo White's message of "Sat, 
 06 Apr 2013 19:32:09 +0100")
References: <CACLX4jT466nvMy291j8z0_r2jJOhiofYQJ5be16Ve=gLjABdNw@mail.gmail.com>
 <wfppy7h61z.fsf@gmail.com> <87vc7ztsra.fsf@study.localdomain>
Message-ID: <wfwqsffq3r.fsf@gmail.com>

Leo White <lpw25 at cam.ac.uk> writes:

>> So the usual way of doing that is to use Emacs package manager (ELPA),
>> and package the lisp part of the packages separately.
>
> Note that ELPA was only added to Emacs in version 24. Debian testing
> is still on
> Emacs 23, so it would be good to have a solution that worked without ELPA.

you are right, and I have to say I haven't been using Emacs 23.1 for a
long time. The package management in Emacs before 24 was a bit of mess
and actually when they provided ELPA I started to enjoy Emacs
again. That's said the package.el is available also separately so that
means there is a workaround (but you probably know it). Nevertheless
some people prefer to use older emacsen and myself I don't think I'd
like to be forced at any rate to use bleeding edge Emacs.

Other solution that would work, is to just install the package in
~/.emacs.d not somewhere in ~/.opam. Then there are Windows specific
considerations. Then all you need is (require 'utop).

--
Wojciech

From yminsky at gmail.com  Sat Apr  6 20:01:29 2013
From: yminsky at gmail.com (Yaron Minsky)
Date: Sat, 6 Apr 2013 15:01:29 -0400
Subject: [ocaml-platform] "opam config env" and emacs
In-Reply-To: <wfwqsffq3r.fsf@gmail.com>
References: <CACLX4jT466nvMy291j8z0_r2jJOhiofYQJ5be16Ve=gLjABdNw@mail.gmail.com>
 <wfppy7h61z.fsf@gmail.com> <87vc7ztsra.fsf@study.localdomain>
 <wfwqsffq3r.fsf@gmail.com>
Message-ID: <CADKNfhLVJ6PFDAdRPLkAXQ5euyv-L-U0y0nVE+YfuHHBA1HfUA@mail.gmail.com>

A decent start would be to standardize what Jeremie did and distribute
it with opam.

y

On Sat, Apr 6, 2013 at 2:53 PM, Wojciech Meyer <wojciech.meyer at gmail.com> wrote:
> Leo White <lpw25 at cam.ac.uk> writes:
>
>>> So the usual way of doing that is to use Emacs package manager (ELPA),
>>> and package the lisp part of the packages separately.
>>
>> Note that ELPA was only added to Emacs in version 24. Debian testing
>> is still on
>> Emacs 23, so it would be good to have a solution that worked without ELPA.
>
> you are right, and I have to say I haven't been using Emacs 23.1 for a
> long time. The package management in Emacs before 24 was a bit of mess
> and actually when they provided ELPA I started to enjoy Emacs
> again. That's said the package.el is available also separately so that
> means there is a workaround (but you probably know it). Nevertheless
> some people prefer to use older emacsen and myself I don't think I'd
> like to be forced at any rate to use bleeding edge Emacs.
>
> Other solution that would work, is to just install the package in
> ~/.emacs.d not somewhere in ~/.opam. Then there are Windows specific
> considerations. Then all you need is (require 'utop).
>
> --
> Wojciech
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform

From yallop at gmail.com  Sat Apr  6 22:29:57 2013
From: yallop at gmail.com (Jeremy Yallop)
Date: Sat, 6 Apr 2013 22:29:57 +0100
Subject: [ocaml-platform] "opam config env" and emacs
In-Reply-To: <CADKNfhLVJ6PFDAdRPLkAXQ5euyv-L-U0y0nVE+YfuHHBA1HfUA@mail.gmail.com>
References: <CACLX4jT466nvMy291j8z0_r2jJOhiofYQJ5be16Ve=gLjABdNw@mail.gmail.com>
 <wfppy7h61z.fsf@gmail.com> <87vc7ztsra.fsf@study.localdomain>
 <wfwqsffq3r.fsf@gmail.com>
 <CADKNfhLVJ6PFDAdRPLkAXQ5euyv-L-U0y0nVE+YfuHHBA1HfUA@mail.gmail.com>
Message-ID: <CAAxsn=FaF2ORw8anWn6JnoBe1hzV-0SwvAJOG00LdAhzawt6PA@mail.gmail.com>

An alternative approach is to change opam so that it maintins a
symlink to the current compiler, avoiding the need for an
emacs-specific solution.  This approach works well for Debian's
'alternatives' system, for example, and also has the advantage that
there's no need to run a second command to update the environment
after switching compilers.

I see that Raphael Proust already has a pull request along these lines:

https://github.com/OCamlPro/opam/pull/477

From yminsky at gmail.com  Sat Apr  6 22:43:13 2013
From: yminsky at gmail.com (Yaron Minsky)
Date: Sat, 6 Apr 2013 17:43:13 -0400
Subject: [ocaml-platform] "opam config env" and emacs
In-Reply-To: <CAAxsn=FaF2ORw8anWn6JnoBe1hzV-0SwvAJOG00LdAhzawt6PA@mail.gmail.com>
References: <CACLX4jT466nvMy291j8z0_r2jJOhiofYQJ5be16Ve=gLjABdNw@mail.gmail.com>
 <wfppy7h61z.fsf@gmail.com> <87vc7ztsra.fsf@study.localdomain>
 <wfwqsffq3r.fsf@gmail.com>
 <CADKNfhLVJ6PFDAdRPLkAXQ5euyv-L-U0y0nVE+YfuHHBA1HfUA@mail.gmail.com>
 <CAAxsn=FaF2ORw8anWn6JnoBe1hzV-0SwvAJOG00LdAhzawt6PA@mail.gmail.com>
Message-ID: <CADKNfhL1E7bR6byq1njN12EY7aKiwxYdVZMrXa8VDk1XaVbxsA@mail.gmail.com>

That seems great.
On Apr 6, 2013 5:30 PM, "Jeremy Yallop" <yallop at gmail.com> wrote:

> An alternative approach is to change opam so that it maintins a
> symlink to the current compiler, avoiding the need for an
> emacs-specific solution.  This approach works well for Debian's
> 'alternatives' system, for example, and also has the advantage that
> there's no need to run a second command to update the environment
> after switching compilers.
>
> I see that Raphael Proust already has a pull request along these lines:
>
> https://github.com/OCamlPro/opam/pull/477
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20130406/ef01a501/attachment-0001.html>

From Christophe.Troestler at umons.ac.be  Sat Apr  6 19:24:25 2013
From: Christophe.Troestler at umons.ac.be (Christophe TROESTLER)
Date: Sat, 6 Apr 2013 20:24:25 +0200
Subject: [ocaml-platform] "opam config env" and emacs
In-Reply-To: <CACLX4jT466nvMy291j8z0_r2jJOhiofYQJ5be16Ve=gLjABdNw@mail.gmail.com>
References: <CACLX4jT466nvMy291j8z0_r2jJOhiofYQJ5be16Ve=gLjABdNw@mail.gmail.com>
Message-ID: <20130406.202425.1990812224576849064.Christophe.Troestler@umons.ac.be>

Hi,

Maybe some ~/.opam/opam.el package would indeed be useful.  On a
related note, I have the following added to 'tuareg-mode-hook so that
the compilation (C-cC-c) uses the currently selected OPAM compiler.

    (defadvice compile (before compile-opam activate)
      "Run opam to update environment variables"
      (set (make-local-variable 'compilation-environment)
	   (with-temp-buffer
	     (ignore-errors (call-process "opam" nil t nil "config" "-env"))
	     (goto-line 1)
	     (while (re-search-forward "; *export.*$" nil t)
	       (replace-match "" nil nil))
	     (split-string (buffer-substring 1 (point-max)))
	     )))

Best,
C.

On Sat, 6 Apr 2013 14:12:39 -0400, Yaron Minsky wrote:
> 
> Does anyone know a good way of setting up emacs to point to the
> appropriate site-lisp directory in OPAM?  Right now, I have a stanza
> like this in my .emacs:
> 
> (add-to-list 'load-path
>              (expand-file-name
> "~/.opam/4.01.0dev+trunk/share/emacs/site-lisp/"))
> 
> But this is of course not at all sensitive to opam switch.  Jeremie
> has some auto-detection code here:
> 
>    https://github.com/diml/utop/issues/4
> 
> Should we integrate this into OPAM somehow so people don't have to dig
> this out and cut and paste it in?

From daniel.buenzli at erratique.ch  Mon Apr  8 10:01:58 2013
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Mon, 8 Apr 2013 10:01:58 +0100
Subject: [ocaml-platform] [opam-devel] Patching packages (was Re: A
 small script for compiler hackers: create short-lived opam switches out of
 any git branch)
In-Reply-To: <0F4674D723B446349AC4809560814966@erratique.ch>
References: <CAPFanBFcpQ8t-_HGiJxzxcsOUo6KLQ3FFoKZhGAxiLqgoaU7VA@mail.gmail.com>
 <wf620psule.fsf@gmail.com>
 <2B25C84C-22EA-4774-879C-3F852929E47C@recoil.org>
 <9669B7CC-E026-4709-9426-6697B697A118@ocamlpro.com>
 <0F4674D723B446349AC4809560814966@erratique.ch>
Message-ID: <6FF2BA5932B64A7797DD88AA2242694D@erratique.ch>

Le mardi, 19 mars 2013 ? 00:56, Daniel B?nzli a ?crit :
> Is there a way to specify patches during install ? That is patching an existing package without redoing a package.
>  
> The use case is that I have this patch [1] on ocp-indent that seems unlikely to be integrated (cf. [2]). Now I would like to be able to benefit from ocp-indent's default package updates but just apply the patch before installing.  
>  
> Is there a simple workflow to achieve that ?
The answer to my own question is yes (if you have a git repo with the patch and the package can be installed directly from the repo) :

    opam pin ocp-indent https://github.com/dbuenzli/ocp-indent.git

Just rebase the repo with the patch when needed.

Best,

Daniel



From francois.bobot at cea.fr  Wed Apr 10 15:21:06 2013
From: francois.bobot at cea.fr (=?ISO-8859-1?Q?Fran=E7ois_Bobot?=)
Date: Wed, 10 Apr 2013 16:21:06 +0200
Subject: [ocaml-platform] Coq opam package
Message-ID: <51657552.7060302@cea.fr>

Hi,

	Opam is a source-base package manager (1). It simplifies a lot the 
compilation and installation of ocaml tools and libraries but more 
importantly it helps managing the dependencies.

	I'm maintaining some packages (ie. Why3 and Frama-c packages (2)). 
Since some depend on Coq I also try to keep the Coq package up-to-date 
(3) (If someone of the Coq team wants to maintain it, it is quite easy, 
I can provide links, explanations and helps).

	I have naive questions about possibilities to mitigate the time spend 
by the compilation of Coq. Opam is source-based so you have to compile 
the Coq standard library. Moreover when a dependency of Coq change Opam 
trigger a recompilation of the package. When it is Lablgtk that changed 
the compilation of the standard library is needlessly made again. 
Lablgtk can change often because many C library are optional.

  - Is it possible to compile coqide once (make bin/coqide) and the rest 
of Coq during another compilation (2 packages)?
  - Is it possible to precompiled the standard library for specific 
ocaml versions? Then only check it with coqchk?
  - Another way?

Thank you,

Best,

(1) http://opam.ocamlpro.com/index.html
(2) http://opam.ocamlpro.com/pkg/why3.0.81.html
(3) http://opam.ocamlpro.com/pkg/coq.8.4pl1.html


-- 
Fran?ois Bobot

From monnier at iro.umontreal.ca  Wed Apr 10 18:35:49 2013
From: monnier at iro.umontreal.ca (Stefan Monnier)
Date: Wed, 10 Apr 2013 13:35:49 -0400
Subject: [ocaml-platform] [Coq-Club] Coq opam package
In-Reply-To: <51657552.7060302@cea.fr> (=?iso-8859-1?Q?=22Fran=E7ois?=
 Bobot"'s message of "Wed, 10 Apr 2013 16:21:06 +0200")
References: <51657552.7060302@cea.fr>
Message-ID: <jwvy5cqqojw.fsf-monnier+INBOX@gnu.org>

> 	I have naive questions about possibilities to mitigate the time
> spend by the compilation of Coq. Opam is source-based so you have to compile
> the Coq standard library. Moreover when a dependency of Coq change Opam
> trigger a recompilation of the package. When it is Lablgtk that changed the
> compilation of the standard library is needlessly made again. Lablgtk can
> change often because many C library are optional.

It sounds like maybe Opam would benefit from a more subtle notion of
dependency.


        Stefan

From thomas.refis at gmail.com  Wed Apr 10 21:37:11 2013
From: thomas.refis at gmail.com (Thomas Refis)
Date: Wed, 10 Apr 2013 22:37:11 +0200
Subject: [ocaml-platform] [Coq-Club] Coq opam package
In-Reply-To: <jwvy5cqqojw.fsf-monnier+INBOX@gnu.org>
References: <51657552.7060302@cea.fr> <jwvy5cqqojw.fsf-monnier+INBOX@gnu.org>
Message-ID: <CAJ_epFPG7sB-jLcGxNjbC8qGJVMa75-V+uGgE10sCCVXzPWXeQ@mail.gmail.com>

Another possibility is to not update a package right away when a knew
optional dependency is available, but wait for the next "opam
upgrade". And adding a "--ignore <package>" option to the upgrade
command would be nice as well.

The fact that you don't have a choice when installing a package to
update all the package that may use it or not, is imho really
frustrating. I have indeed had to recompile coq a few times as well,
and the experience gets more annoying every time.

Thomas.

From wojciech.meyer at gmail.com  Wed Apr 10 22:17:15 2013
From: wojciech.meyer at gmail.com (Wojciech Meyer)
Date: Wed, 10 Apr 2013 22:17:15 +0100
Subject: [ocaml-platform] [Coq-Club] Coq opam package
In-Reply-To: <CAJ_epFPG7sB-jLcGxNjbC8qGJVMa75-V+uGgE10sCCVXzPWXeQ@mail.gmail.com>
 (Thomas Refis's message of "Wed, 10 Apr 2013 22:37:11 +0200")
References: <51657552.7060302@cea.fr> <jwvy5cqqojw.fsf-monnier+INBOX@gnu.org>
 <CAJ_epFPG7sB-jLcGxNjbC8qGJVMa75-V+uGgE10sCCVXzPWXeQ@mail.gmail.com>
Message-ID: <wfzjx62ihw.fsf@gmail.com>

Thomas Refis <thomas.refis at gmail.com> writes:

> Another possibility is to not update a package right away when a knew
> optional dependency is available, but wait for the next "opam
> upgrade". And adding a "--ignore <package>" option to the upgrade
> command would be nice as well.

I agree it would be a useful feature, and might cause errors which we
really try to avoid. As a side note, I had occasions to recompile some
packages when it was *not* really required. Coq compiles quite long, and
I care about compilation time too so reducing that time would be really
good when upgrading dependent packages.

Thanks,
Wojciech

From simon.cruanes.2007 at m4x.org  Wed Apr 10 22:35:00 2013
From: simon.cruanes.2007 at m4x.org (simon cruanes)
Date: Wed, 10 Apr 2013 23:35:00 +0200
Subject: [ocaml-platform] [Coq-Club] Coq opam package
In-Reply-To: <wfzjx62ihw.fsf@gmail.com>
References: <51657552.7060302@cea.fr> <jwvy5cqqojw.fsf-monnier+INBOX@gnu.org>
 <CAJ_epFPG7sB-jLcGxNjbC8qGJVMa75-V+uGgE10sCCVXzPWXeQ@mail.gmail.com>
 <wfzjx62ihw.fsf@gmail.com>
Message-ID: <5165DB04.2070805@m4x.org>

Could it be possible for some OPAM packages to declare both an
installation, and an update target? For coq, I believe that what takes
time is compiling/type checking the standard library; this doesn't need
to be done again if coq is re-compiled with a GTK interface. If the coq
package provided something to re-compile only coq and not the stdlib,
that would make this less of a problem. But maybe that would complicate
a lot OPAM.

Cheers,

Simon

On 10/04/2013 23:17, Wojciech Meyer wrote:
> Thomas Refis <thomas.refis at gmail.com> writes:
> 
>> Another possibility is to not update a package right away when a knew
>> optional dependency is available, but wait for the next "opam
>> upgrade". And adding a "--ignore <package>" option to the upgrade
>> command would be nice as well.
> 
> I agree it would be a useful feature, and might cause errors which we
> really try to avoid. As a side note, I had occasions to recompile some
> packages when it was *not* really required. Coq compiles quite long, and
> I care about compilation time too so reducing that time would be really
> good when upgrading dependent packages.
> 
> Thanks,
> Wojciech
> _______________________________________________
> Platform mailing list
> Platform at lists.ocaml.org
> http://lists.ocaml.org/listinfo/platform
> 


From anil at recoil.org  Wed Apr 10 22:26:53 2013
From: anil at recoil.org (Anil Madhavapeddy)
Date: Wed, 10 Apr 2013 14:26:53 -0700
Subject: [ocaml-platform] [Coq-Club] Coq opam package
In-Reply-To: <CAJ_epFPG7sB-jLcGxNjbC8qGJVMa75-V+uGgE10sCCVXzPWXeQ@mail.gmail.com>
References: <51657552.7060302@cea.fr> <jwvy5cqqojw.fsf-monnier+INBOX@gnu.org>
 <CAJ_epFPG7sB-jLcGxNjbC8qGJVMa75-V+uGgE10sCCVXzPWXeQ@mail.gmail.com>
Message-ID: <8986B18F-D3DA-4C0E-A4F1-DD29E3338BDD@recoil.org>

On 10 Apr 2013, at 13:37, Thomas Refis <thomas.refis at gmail.com> wrote:

> Another possibility is to not update a package right away when a knew
> optional dependency is available, but wait for the next "opam
> upgrade". And adding a "--ignore <package>" option to the upgrade
> command would be nice as well.
> 
> The fact that you don't have a choice when installing a package to
> update all the package that may use it or not, is imho really
> frustrating. I have indeed had to recompile coq a few times as well,
> and the experience gets more annoying every time.

The issue with not recompiling dependent packages immediately is
that you leave your build environment with inconsistent packages
(since the library CRCs may no longer match).  OPAM is conservative
about not breaking ABI invariants by default, which seems wiser than
a few unnecessary recompilations at this stage.

I'd be inclined to figure out a mechanism to decouple Coq IDE from
Coq in the packaging a little more, rather than complicate the
optional dependency constraint analysis even more.

-anil

From wojciech.meyer at gmail.com  Wed Apr 10 23:12:46 2013
From: wojciech.meyer at gmail.com (Wojciech Meyer)
Date: Wed, 10 Apr 2013 23:12:46 +0100
Subject: [ocaml-platform] [Coq-Club] Coq opam package
In-Reply-To: <8986B18F-D3DA-4C0E-A4F1-DD29E3338BDD@recoil.org> (Anil
 Madhavapeddy's message of "Wed, 10 Apr 2013 14:26:53 -0700")
References: <51657552.7060302@cea.fr> <jwvy5cqqojw.fsf-monnier+INBOX@gnu.org>
 <CAJ_epFPG7sB-jLcGxNjbC8qGJVMa75-V+uGgE10sCCVXzPWXeQ@mail.gmail.com>
 <8986B18F-D3DA-4C0E-A4F1-DD29E3338BDD@recoil.org>
Message-ID: <wfehei2fxd.fsf@gmail.com>

Anil Madhavapeddy <anil at recoil.org> writes:

> The issue with not recompiling dependent packages immediately is
> that you leave your build environment with inconsistent packages
> (since the library CRCs may no longer match).  OPAM is conservative
> about not breaking ABI invariants by default, which seems wiser than
> a few unnecessary recompilations at this stage.
>
> I'd be inclined to figure out a mechanism to decouple Coq IDE from
> Coq in the packaging a little more, rather than complicate the
> optional dependency constraint analysis even more.

I think the biggest chalenge here would be to make people to use this
techniques (splitting bigger packages) when it's not always clear how it
should be done. I already started to think that Coq IDE deserves a
separate OPAM package, and my worry is that it's bit unclear how to do
this. So maybe theorems, could be also decoupled and put under different
name. Otherwise I agree, it would better.

-Wojciech

From thomas at ocamlpro.com  Thu Apr 11 11:25:19 2013
From: thomas at ocamlpro.com (Thomas Gazagnaire)
Date: Thu, 11 Apr 2013 12:25:19 +0200
Subject: [ocaml-platform] [Coq-Club] Coq opam package
In-Reply-To: <CAJ_epFPG7sB-jLcGxNjbC8qGJVMa75-V+uGgE10sCCVXzPWXeQ@mail.gmail.com>
References: <51657552.7060302@cea.fr> <jwvy5cqqojw.fsf-monnier+INBOX@gnu.org>
 <CAJ_epFPG7sB-jLcGxNjbC8qGJVMa75-V+uGgE10sCCVXzPWXeQ@mail.gmail.com>
Message-ID: <80DA5618-E936-4867-B6B4-BA5DF56AAECA@ocamlpro.com>

Hi,

> Another possibility is to not update a package right away when a knew
> optional dependency is available, but wait for the next "opam
> upgrade".

If you do that in the general case, you will have your system in a inconsistent state: if you have a library linking to both A already upgraded and B not yet upgraded, and if A uses B, then the OCaml compiler will complain (rightfully) at link time.

> And adding a "--ignore <package>" option to the upgrade
> command would be nice as well.

You can do `opam upgrade xxx` to upgrade only the package you are interested in. I've opened [1] to add a --ignore option.

[1] https://github.com/OCamlPro/opam/issues/590

> The fact that you don't have a choice when installing a package to
> update all the package that may use it or not, is imho really
> frustrating. I have indeed had to recompile coq a few times as well,
> and the experience gets more annoying every time.

The solution for coq is to declare `labgtk` as an optional build-time dependency (eg. simply remove it from the list of optional link-time dependency, but let the right option in the configure invocation).

--
Thomas


From francois.bobot at cea.fr  Thu Apr 11 14:21:46 2013
From: francois.bobot at cea.fr (=?ISO-8859-1?Q?Fran=E7ois_Bobot?=)
Date: Thu, 11 Apr 2013 15:21:46 +0200
Subject: [ocaml-platform] [Coq-Club] Coq opam package
In-Reply-To: <80DA5618-E936-4867-B6B4-BA5DF56AAECA@ocamlpro.com>
References: <51657552.7060302@cea.fr> <jwvy5cqqojw.fsf-monnier+INBOX@gnu.org>
 <CAJ_epFPG7sB-jLcGxNjbC8qGJVMa75-V+uGgE10sCCVXzPWXeQ@mail.gmail.com>
 <80DA5618-E936-4867-B6B4-BA5DF56AAECA@ocamlpro.com>
Message-ID: <5166B8EA.4070102@cea.fr>

On 11/04/2013 12:25, Thomas Gazagnaire wrote:
>
>> The fact that you don't have a choice when installing a package to
>> update all the package that may use it or not, is imho really
>> frustrating. I have indeed had to recompile coq a few times as well,
>> and the experience gets more annoying every time.
>
> The solution for coq is to declare `labgtk` as an optional build-time dependency (eg. simply remove it from the list of optional link-time dependency, but let the right option in the configure invocation).
>

Interesting, it is quite simple.

But is it right that if you do that, when there is an important fix of 
lablgtk you will have to explicitly run "opam reinstall coq" and all the 
coq stdlib will be recompiled?

If it's true it is a nice and simple halfway solution.

-- 
Fran?ois



From thomas at ocamlpro.com  Thu Apr 11 14:29:37 2013
From: thomas at ocamlpro.com (Thomas Gazagnaire)
Date: Thu, 11 Apr 2013 15:29:37 +0200
Subject: [ocaml-platform] [Coq-Club] Coq opam package
In-Reply-To: <5166B8EA.4070102@cea.fr>
References: <51657552.7060302@cea.fr> <jwvy5cqqojw.fsf-monnier+INBOX@gnu.org>
 <CAJ_epFPG7sB-jLcGxNjbC8qGJVMa75-V+uGgE10sCCVXzPWXeQ@mail.gmail.com>
 <80DA5618-E936-4867-B6B4-BA5DF56AAECA@ocamlpro.com> <5166B8EA.4070102@cea.fr>
Message-ID: <7BDE785B-B953-4E32-B5E7-8A0AC285F2B9@ocamlpro.com>

>>> The fact that you don't have a choice when installing a package to
>>> update all the package that may use it or not, is imho really
>>> frustrating. I have indeed had to recompile coq a few times as well,
>>> and the experience gets more annoying every time.
>> 
>> The solution for coq is to declare `labgtk` as an optional build-time dependency (eg. simply remove it from the list of optional link-time dependency, but let the right option in the configure invocation).
>> 
> 
> Interesting, it is quite simple.
> 
> But is it right that if you do that, when there is an important fix of lablgtk you will have to explicitly run "opam reinstall coq" and all the coq stdlib will be recompiled?
> 
> If it's true it is a nice and simple halfway solution.

If lablgtk does not appear in the list of dependencies (and optional dependencies), coq will never be recompiled automatically when you upgrade lablgtk. And if you do "opam reinstall coq" OPAM will indeed recompile the whole package.

Tracking dependencies at a finer grain that the package level requires build system hooks that OPAM doesn't have (yet?).

Best,
Thomas


From sylvain+ocaml at le-gall.net  Thu Apr 11 15:11:14 2013
From: sylvain+ocaml at le-gall.net (Sylvain Le Gall)
Date: Thu, 11 Apr 2013 16:11:14 +0200
Subject: [ocaml-platform] [Coq-Club] Coq opam package
In-Reply-To: <7BDE785B-B953-4E32-B5E7-8A0AC285F2B9@ocamlpro.com>
References: <51657552.7060302@cea.fr> <jwvy5cqqojw.fsf-monnier+INBOX@gnu.org>
 <CAJ_epFPG7sB-jLcGxNjbC8qGJVMa75-V+uGgE10sCCVXzPWXeQ@mail.gmail.com>
 <80DA5618-E936-4867-B6B4-BA5DF56AAECA@ocamlpro.com>
 <5166B8EA.4070102@cea.fr>
 <7BDE785B-B953-4E32-B5E7-8A0AC285F2B9@ocamlpro.com>
Message-ID: <CAOCAUGOJ1wYzezJV=8dLyehfrtK06pgsD_kcdU5FWK3pMo-wsg@mail.gmail.com>

2013/4/11 Thomas Gazagnaire <thomas at ocamlpro.com>:
>>>> The fact that you don't have a choice when installing a package to
>>>> update all the package that may use it or not, is imho really
>>>> frustrating. I have indeed had to recompile coq a few times as well,
>>>> and the experience gets more annoying every time.
>>>
>>> The solution for coq is to declare `labgtk` as an optional build-time dependency (eg. simply remove it from the list of optional link-time dependency, but let the right option in the configure invocation).
>>>
>>
>> Interesting, it is quite simple.
>>
>> But is it right that if you do that, when there is an important fix of lablgtk you will have to explicitly run "opam reinstall coq" and all the coq stdlib will be recompiled?
>>
>> If it's true it is a nice and simple halfway solution.
>
> If lablgtk does not appear in the list of dependencies (and optional dependencies), coq will never be recompiled automatically when you upgrade lablgtk. And if you do "opam reinstall coq" OPAM will indeed recompile the whole package.
>
> Tracking dependencies at a finer grain that the package level requires build system hooks that OPAM doesn't have (yet?).
>

Isn't it possible to keep the compiled source tree (i.e. just what you
got before make install) and restart with a "make all". If it fails
and you know you try to resume from the middle, just start again with
"make clean; configure && make all".

If the build system supports detecting changes in external libraries,
this should be fine and you'll be able to incrementally recompile coq
-- if not, you fallback to the default mode. In other words, you move
the problem to the build system without any hooks. I am pretty sure
this is not supported by ocamlbuild, but it can be good incentive to
create something that works this way.

Cheers
Sylvain

From gmalecha at eecs.harvard.edu  Wed Apr 10 22:55:24 2013
From: gmalecha at eecs.harvard.edu (Gregory Malecha)
Date: Wed, 10 Apr 2013 17:55:24 -0400
Subject: [ocaml-platform] [Coq-Club] Coq opam package
In-Reply-To: <wfzjx62ihw.fsf@gmail.com>
References: <51657552.7060302@cea.fr> <jwvy5cqqojw.fsf-monnier+INBOX@gnu.org>
 <CAJ_epFPG7sB-jLcGxNjbC8qGJVMa75-V+uGgE10sCCVXzPWXeQ@mail.gmail.com>
 <wfzjx62ihw.fsf@gmail.com>
Message-ID: <CAGraiHKiRSeRgyDUujZP7H+oiD7x=xbCgK=M0oXcDOBXxxV93Q@mail.gmail.com>

Unrelated to opam is simply the architectural decision in Coq that vo's
have strict dependencies on precise builds of Coq (including the version of
OCaml used). I understand that this is possibly eases the implementation of
Coq internals, but pulling out the actual code that saves to and reads from
a file would benefit anyone who wants to use or distribute Coq libraries.


On Wed, Apr 10, 2013 at 5:17 PM, Wojciech Meyer <wojciech.meyer at gmail.com>wrote:

> Thomas Refis <thomas.refis at gmail.com> writes:
>
> > Another possibility is to not update a package right away when a knew
> > optional dependency is available, but wait for the next "opam
> > upgrade". And adding a "--ignore <package>" option to the upgrade
> > command would be nice as well.
>
> I agree it would be a useful feature, and might cause errors which we
> really try to avoid. As a side note, I had occasions to recompile some
> packages when it was *not* really required. Coq compiles quite long, and
> I care about compilation time too so reducing that time would be really
> good when upgrading dependent packages.
>
> Thanks,
> Wojciech
>



-- 
gregory malecha
http://www.people.fas.harvard.edu/~gmalecha/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/platform/attachments/20130410/171d6511/attachment.html>

From sedrikov at gmail.com  Wed Apr 10 19:38:45 2013
From: sedrikov at gmail.com (AUGER =?UTF-8?B?Q8OpZHJpYw==?=)
Date: Wed, 10 Apr 2013 20:38:45 +0200
Subject: [ocaml-platform] [Coq-Club] Coq opam package
In-Reply-To: <51657552.7060302@cea.fr>
References: <51657552.7060302@cea.fr>
Message-ID: <20130410203845.25900678@gmail.com>

Le Wed, 10 Apr 2013 16:21:06 +0200,
Fran?ois Bobot <francois.bobot at cea.fr> a ?crit :

> Hi,
> 
> 	Opam is a source-base package manager (1). It simplifies a
> lot the compilation and installation of ocaml tools and libraries but
> more importantly it helps managing the dependencies.
> 
> 	I'm maintaining some packages (ie. Why3 and Frama-c packages
> (2)). Since some depend on Coq I also try to keep the Coq package
> up-to-date (3) (If someone of the Coq team wants to maintain it, it
> is quite easy, I can provide links, explanations and helps).
> 
> 	I have naive questions about possibilities to mitigate the
> time spend by the compilation of Coq. Opam is source-based so you
> have to compile the Coq standard library. Moreover when a dependency
> of Coq change Opam trigger a recompilation of the package. When it is
> Lablgtk that changed the compilation of the standard library is
> needlessly made again. Lablgtk can change often because many C
> library are optional.
> 
>   - Is it possible to compile coqide once (make bin/coqide) and the
> rest of Coq during another compilation (2 packages)?
>   - Is it possible to precompiled the standard library for specific 
> ocaml versions? Then only check it with coqchk?
>   - Another way?
> 
> Thank you,
> 
> Best,
> 
> (1) http://opam.ocamlpro.com/index.html
> (2) http://opam.ocamlpro.com/pkg/why3.0.81.html
> (3) http://opam.ocamlpro.com/pkg/coq.8.4pl1.html
> 
> 

For coqide, it has a special make rule (make coqide) that you can run
after having build all the rest. Plus, although I am a Coqide user, many
do not use it and prefer Proof General, so I think that having a CoqIDE
target (which would depend on Coq) is relevant and trivial to do.

For the standard library, it is another matter, as AFAIK, *.vo files
use a magic number which must match the Coq version. So new Coq => new
compilation of the standard library.

A remark I did some years ago (and an opinion I still have) is that we
could have some "pre-compiler" which reads a *.v file and generate an
other *.v file (in pure Gallina syntax) in which there are only
Notations and Definitions (I mean there are no proof scripts anymore).

Those files should not change from a version to an other, excepted if
there is a modification on the standard library (and in this case, we
could pre-compile only the modified files). Compiling those files for
the new coq version should be (a lot?) faster as the terms would be
directly given. And to increase it even more there could be some binary
format instead of pure Gallina, but which format reflects Gallina
syntax and does not change from one Coq version to an other (and in
particular should not carry some magic number).

By the way, is there some significant change in vo files from a version
of Coq to an other??

From francois.bobot at cea.fr  Wed Apr 17 10:43:40 2013
From: francois.bobot at cea.fr (=?ISO-8859-1?Q?Fran=E7ois_Bobot?=)
Date: Wed, 17 Apr 2013 11:43:40 +0200
Subject: [ocaml-platform] [Coq-Club] Coq opam package
In-Reply-To: <wfehei2fxd.fsf@gmail.com>
References: <51657552.7060302@cea.fr> <jwvy5cqqojw.fsf-monnier+INBOX@gnu.org>
 <CAJ_epFPG7sB-jLcGxNjbC8qGJVMa75-V+uGgE10sCCVXzPWXeQ@mail.gmail.com>
 <8986B18F-D3DA-4C0E-A4F1-DD29E3338BDD@recoil.org> <wfehei2fxd.fsf@gmail.com>
Message-ID: <516E6ECC.6070106@cea.fr>

On 11/04/2013 00:12, Wojciech Meyer wrote:
 > Anil Madhavapeddy<anil at recoil.org>  writes:
 > I think the biggest chalenge here would be to make people to use this
 > techniques (splitting bigger packages) when it's not always clear how
 > it
 > should be done. I already started to think that Coq IDE deserves a
 > separate OPAM package, and my worry is that it's bit unclear how to do
 > this. So maybe theorems, could be also decoupled and put under
 > different
 > name. Otherwise I agree, it would better.

I extracted coqide into its own package.

https://github.com/bobot/opam-repository/commit/4c613c9c3bdd967785b7b251bf71c186203d28ca

I tried to reduce the compilation time of the coqide package by patching 
the Makefile. The coq package compile in 15min on my computer. 'make 
coqide' compile in 2 min, I reduced it to 30s by removing many of the 
ocamldep/coqdep/.ml4 uselessly done.

branch coqide of git at github.com:bobot/opam-repository.git

If someone wants to make a try.

-- 
Fran?ois

