From rudi.grinberg@gmail.com  Sun Sep 22 16:17:24 2013
Return-Path: <rudi.grinberg@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 6B0083C366
 for <ctypes@lists.ocaml.org>; Sun, 22 Sep 2013 16:17:24 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1525204 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.223.178 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (rudi.grinberg[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-ie0-f178.google.com ([209.85.223.178]:49095)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtp id 1VNlgF-0007jA-j6 (Exim 4.80_167-5a66dd3) for
 ctypes@lists.ocaml.org
 (return-path <rudi.grinberg@gmail.com>); Sun, 22 Sep 2013 16:34:40 +0100
Received: by mail-ie0-f178.google.com with SMTP id to1so4651659ieb.37
 for <ctypes@lists.ocaml.org>; Sun, 22 Sep 2013 08:34:39 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:date:message-id:subject:from:to:content-type;
 bh=Fbf6jO2CMA4btwjSyraeAIOUKXoykXtJ5+6eutKecOI=;
 b=aEzVjyMPUzelFWxCaedgq3M2HQG7WU90U4y5AvIcFxr78rSwubn4AVDnIjytQq4uJ6
 xrYK1s89BOHyJEl4nLbmQ6af1/FpzJBZLR5/cSJLf/tSCodPAYViACXn5Qs/rCGgSTw3
 CaKWHFZet4LPGWem45kgkJS5oPcRQWwkTEt4k2XHE5HfuUgAIQmdzuZaubIHQA1ZOTOn
 LCd3NEMO67u9w0DHCEZlBBB7s9XOEnRNh7atHIO0wqwvc5npAHe7QQH4nSlgvIhdBv3K
 ltPSQWGwoiI3OGc6mWlpEYavIG2XMFUqUydj1y/vmdp1PwXZPhVeJNFER6SeTuZSBFFw
 ztUg==
MIME-Version: 1.0
X-Received: by 10.50.73.41 with SMTP id i9mr9292630igv.30.1379864078952; Sun,
 22 Sep 2013 08:34:38 -0700 (PDT)
Received: by 10.42.140.138 with HTTP; Sun, 22 Sep 2013 08:34:38 -0700 (PDT)
Date: Sun, 22 Sep 2013 11:34:38 -0400
Message-ID: <CADU9VHsADtjqihVGn3S91gU6H0yL5ewYAGsU-bw7J+zh0yvnNw@mail.gmail.com>
From: Rudi Grinberg <rudi.grinberg@gmail.com>
To: ctypes@lists.ocaml.org
Content-Type: multipart/alternative; boundary=089e013a027043b1e504e6faa494
Subject: [ocaml-ctypes] When can we expect the next version to be released?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sun, 22 Sep 2013 15:17:24 -0000

--089e013a027043b1e504e6faa494
Content-Type: text/plain; charset=ISO-8859-1

Hello,

When can we expect the version of ctypes to be released? The reason I'm
interested is that I'm already using features in bindings that I've created
that are not present in the OPAM version (0.1?), so I can't publish my
bindings as an OPAM package yet.

Thanks,
Rudi.

--089e013a027043b1e504e6faa494
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Hello,<div><br></div><div>When can we expect the version o=
f ctypes to be released? The reason I&#39;m interested is that I&#39;m alre=
ady using features in bindings that I&#39;ve created that are not present i=
n the OPAM version (0.1?), so I can&#39;t publish my bindings as an OPAM pa=
ckage yet.</div>
<div><br></div><div>Thanks,</div><div>Rudi.</div></div>

--089e013a027043b1e504e6faa494--

From phil@hagelb.org  Sun Sep 22 20:38:11 2013
Return-Path: <phil@hagelb.org>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id CE0723C366
 for <ctypes@lists.ocaml.org>; Sun, 22 Sep 2013 20:38:11 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1525204 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.160.46 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-pb0-f46.google.com ([209.85.160.46]:33413)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtp id 1VNpkd-0002zg-F8 (Exim 4.80_167-5a66dd3) for
 ctypes@lists.ocaml.org
 (return-path <phil@hagelb.org>); Sun, 22 Sep 2013 20:55:28 +0100
Received: by mail-pb0-f46.google.com with SMTP id rq2so2382944pbb.19
 for <ctypes@lists.ocaml.org>; Sun, 22 Sep 2013 12:55:26 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:from:to:subject:user-agent:date:message-id
 :mime-version:content-type;
 bh=xJEGzK6dOvjV28Hgtz9qTWndieE4aQjU+hr/mj6dMH8=;
 b=EUVD9DYgISIk78r7C+NqI7Szgchw6lc5mdS5NRToMPUxIbnZL8C9h1W6NP4hzABakf
 BUskMlSMGkMPNewgJrhjjRL+MlYuMdvAKF12kS8W5dVyVXVMeZ2MhkMZkOrefh6l6+Mz
 1ZPdaVTeJue3N0KlbvOm57B3QbzUtg0v1KN7Turea5r0DAB//yChs6ex+QauD31x99Av
 +RNZDSEbB7OdtYC5sfNLwLeR+xwPK1Yl4ReQNiEPbitVR4YYnONDYgxI0Fgo4HqLeTfm
 BJf7dfKs2NLd9dI+vV21GmhPHi+zdHZu+RD4/jCaDGG91UR+W8SHBuEcQkdrBsNneJsK
 qEhw==
X-Gm-Message-State: ALoCoQldI89xvMWdGPfeffWIFMSF6HpSx8Hzk2SD9WXGLMKu+B8H0FTUbaKTsNMdVdt7WS5Gpox9
X-Received: by 10.68.168.99 with SMTP id zv3mr3510597pbb.144.1379879726528;
 Sun, 22 Sep 2013 12:55:26 -0700 (PDT)
Received: from enigma.home.hagelb.org (71-32-95-213.tukw.qwest.net.
 [71.32.95.213])
 by mx.google.com with ESMTPSA id ve9sm29458177pbc.19.1969.12.31.16.00.00
 (version=TLSv1.2 cipher=RC4-SHA bits=128/128);
 Sun, 22 Sep 2013 12:55:25 -0700 (PDT)
From: Phil Hagelberg <phil@hagelb.org>
To: ctypes@lists.ocaml.org
User-agent: mu4e 0.9.9; emacs 24.3.50.1
Date: Sun, 22 Sep 2013 12:50:22 -0700
Message-ID: <87txhc7i0x.fsf@enigma.home.hagelb.org>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="=-=-=";
 micalg=pgp-sha1; protocol="application/pgp-signature"
Subject: [ocaml-ctypes] Setting completion function variable for Readline
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sun, 22 Sep 2013 19:38:11 -0000

--=-=-=
Content-Type: text/plain
Content-Transfer-Encoding: quoted-printable

I've been using ctypes to call into GNU Readline, and it's been working
out nicely so far. However, I'd like to implement my own custom
completer functionality, and I'm having some difficulty with
that. Readline's documentation[1] says you can set the
"rl_completion_entry_function" variable to a function pointer which can
handle your completion:

> Variable: rl_compentry_func_t * rl_completion_entry_function
>     This is a pointer to the generator function for
>     rl_completion_matches(). If the value of
>     rl_completion_entry_function is NULL then the default filename
>     generator function, rl_filename_completion_function(), is used. An
>     application-specific completion function is a function whose address
>     is assigned to rl_completion_entry_function and whose return values
>     are used to generate possible completions.=20

But I can't find any way to do this from OCaml, with or without
Ctypes. I see some mention of passing OCaml functions as arguments to C
functions, but in this case I need to put it in a variable instead. I
don't actually know C myself, or I'd imagine it'd be easy to do with a
small shim written in C. Is this possible with Ctypes?

thanks,
Phil

[1] - http://tiswww.case.edu/php/chet/readline/readline.html#SEC44

--=-=-=
Content-Type: application/pgp-signature

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (GNU/Linux)

iQEcBAEBAgAGBQJSP0n/AAoJEK9We5d3533cEn4H/2G4UNqr4eeKUxaP89I2pmVB
AX8846j1EW/jt4/zB2CDZprqnV7JS1CpCO3cuE4MCsPM5Eiy4Xj4UFMKwTw0Hm+S
LTT32l7oJNWNJXmgWE+R+y2qAshJyBizDxcT3l9c41vdr/hx6325FcZ55D/7vXne
nqT9isEmrgk5wbvklhudl0E/N1w3baOG9X+Qk1fEqZqLJHDGFkGKeVksG+gpDhWv
lonm4rnLRuh5uB6ylO0xKpb9iVq/kZz2J+f1J3wSsoOcDy01w1knRIcd4x5uCXeQ
j6jshXfiGohqYctCxRZxunhbqRL8r93PY+RKIvFtJv4vp5JE4TW+Ra9fCA1bEZc=
=fus0
-----END PGP SIGNATURE-----
--=-=-=--

From yallop@gmail.com  Mon Sep 23 07:23:19 2013
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id AB7CC3C0A0
 for <ctypes@lists.ocaml.org>; Mon, 23 Sep 2013 07:23:19 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1525332 
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.173 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-we0-f173.google.com ([74.125.82.173]:45912)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtp id 1VNzoy-0005OU-iN (Exim 4.80_167-5a66dd3) for
 ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Mon, 23 Sep 2013 07:40:37 +0100
Received: by mail-we0-f173.google.com with SMTP id w62so2698207wes.32
 for <ctypes@lists.ocaml.org>; Sun, 22 Sep 2013 23:40:36 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=LiYaPsBSWtN7uFV0VJ9mJ1xGJ8mNMK8lQiu6/HC3yOc=;
 b=kd2qObd/JM0gI64iU8Z76E+NuRsQzZpFonIly469iK1gK3EO4syP71zJ7P6lAH4llr
 TzghvunngZZmH8xoL8SbeM210d2Ob4xFBAADtzQrtGd6OQbHxoL5y/YZFcDWzPLdE2RM
 gIPzL+MAfyanyrXc8jlcy9wGOPlpEiQeEjd87rc4i6Jo1B0EAV04XwfEEEKxRMUkyvn8
 SrjBpnMFbTAEyycm2xs9qlAZSQDGwmjUtzphsYb2NsriLohtJ8zTysQUZlbfC1k+IXlB
 k5QYQ49CTzn0f0otRNF+nPX9bJCLurkGAdWzJ0qjqLNk9aoMC00A+HduIj87uTXBwob7
 cX/g==
MIME-Version: 1.0
X-Received: by 10.180.37.227 with SMTP id b3mr12155187wik.24.1379918436282;
 Sun, 22 Sep 2013 23:40:36 -0700 (PDT)
Received: by 10.216.20.79 with HTTP; Sun, 22 Sep 2013 23:40:36 -0700 (PDT)
In-Reply-To: <CADU9VHsADtjqihVGn3S91gU6H0yL5ewYAGsU-bw7J+zh0yvnNw@mail.gmail.com>
References: <CADU9VHsADtjqihVGn3S91gU6H0yL5ewYAGsU-bw7J+zh0yvnNw@mail.gmail.com>
Date: Mon, 23 Sep 2013 07:40:36 +0100
Message-ID: <CAAxsn=FVkrf-=NpeiZ2F9hONTUDjswOYdqV7Z+n41yQM4Tf_cg@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Rudi Grinberg <rudi.grinberg@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] When can we expect the next version to be
	released?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 23 Sep 2013 06:23:19 -0000

On 22 September 2013 16:34, Rudi Grinberg <rudi.grinberg@gmail.com> wrote:
> When can we expect the version of ctypes to be released? The reason I'm
> interested is that I'm already using features in bindings that I've created
> that are not present in the OPAM version (0.1?), so I can't publish my
> bindings as an OPAM package yet.

I'll look at packaging up ctypes 0.2 next week (i.e. after ICFP).

Ideally I'd like 0.2 to include a fix for issue 38
(https://github.com/ocamllabs/ocaml-ctypes/issues/38).  I don't think
there are any other blockers.

From yallop@gmail.com  Mon Sep 23 07:53:13 2013
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 3E5AA3C0A0
 for <ctypes@lists.ocaml.org>; Mon, 23 Sep 2013 07:53:13 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1525332 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.174 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f174.google.com ([209.85.212.174]:36127)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtp id 1VO0Hu-0007Hv-Eh (Exim 4.80_167-5a66dd3) for
 ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Mon, 23 Sep 2013 08:10:31 +0100
Received: by mail-wi0-f174.google.com with SMTP id hj3so1824587wib.7
 for <ctypes@lists.ocaml.org>; Mon, 23 Sep 2013 00:10:30 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=zPSyX1+sKe3Dy+QSx8aP6dSdv37TIfSpsFjXLIGXhOM=;
 b=LDQF91U8W3QnKF3ZcktqhTW/Fyuuq1gSBmcl0FWX1vso7COBzKgg+F5h3zA7NdV7Q5
 lCWxyGod0bWrzrP58S+QctCmZLj22JST1+LepDkKe0DRHD5gq4pYH2OxWnsnxG4iv+Pi
 ron4WD19U0HcyMfBRr87swCzdDkKFrg1iBwhQqmvHrmFN66znT/PItXEpfRy1S7duQ5z
 BKk+rGdN/OCI1kZ+wDiMMMqGYEIZVcn5UnuaeLt3XXRa7yw19etdp2BqN3kgiJPBQGGK
 eYsdPMYqPjuAdCMsyZ1IgjXkFTw3MnSR49pwf4CBxyTBrRCJ68sDPr/OKQG4ub41M7Wt
 Y47w==
MIME-Version: 1.0
X-Received: by 10.180.37.227 with SMTP id b3mr12241231wik.24.1379920230201;
 Mon, 23 Sep 2013 00:10:30 -0700 (PDT)
Received: by 10.216.20.79 with HTTP; Mon, 23 Sep 2013 00:10:30 -0700 (PDT)
In-Reply-To: <87txhc7i0x.fsf@enigma.home.hagelb.org>
References: <87txhc7i0x.fsf@enigma.home.hagelb.org>
Date: Mon, 23 Sep 2013 08:10:30 +0100
Message-ID: <CAAxsn=G9w7AfTYPEN0ABiXzzHAJVgvnJhYPhMkESdbnYnx9GFw@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Phil Hagelberg <phil@hagelb.org>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Setting completion function variable for Readline
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 23 Sep 2013 06:53:13 -0000

On 22 September 2013 20:50, Phil Hagelberg <phil@hagelb.org> wrote:
> I've been using ctypes to call into GNU Readline, and it's been working
> out nicely so far. However, I'd like to implement my own custom
> completer functionality, and I'm having some difficulty with
> that. Readline's documentation[1] says you can set the
> "rl_completion_entry_function" variable to a function pointer which can
> handle your completion:
>
>> Variable: rl_compentry_func_t * rl_completion_entry_function
>>     This is a pointer to the generator function for
>>     rl_completion_matches(). If the value of
>>     rl_completion_entry_function is NULL then the default filename
>>     generator function, rl_filename_completion_function(), is used. An
>>     application-specific completion function is a function whose address
>>     is assigned to rl_completion_entry_function and whose return values
>>     are used to generate possible completions.
>
> But I can't find any way to do this from OCaml, with or without
> Ctypes. I see some mention of passing OCaml functions as arguments to C
> functions, but in this case I need to put it in a variable instead. I
> don't actually know C myself, or I'd imagine it'd be easy to do with a
> small shim written in C. Is this possible with Ctypes?

Yes: you can use the foreign_value function[0] to retrieve the address
of the global, and then set it directly using the assignment operator
<-@.  I've just pushed a small but complete example which might serve
as a useful starting point:

   https://github.com/ocamllabs/ocaml-ctypes/commit/3d2e8c02f3

[0] http://ocamllabs.github.io/ocaml-ctypes/Foreign.html#VALforeign_value
[1] http://ocamllabs.github.io/ocaml-ctypes/Ctypes.html#VAL%28%3C-@%29

From phil@hagelb.org  Tue Sep 24 04:33:24 2013
Return-Path: <phil@hagelb.org>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id A5EF83C316
 for <ctypes@lists.ocaml.org>; Tue, 24 Sep 2013 04:33:24 +0100 (BST)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1525332 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.192.176 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-pd0-f176.google.com ([209.85.192.176]:58527)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1VOJe7-0004yR-37 (Exim 4.80_167-5a66dd3) for
 ctypes@lists.ocaml.org
 (return-path <phil@hagelb.org>); Tue, 24 Sep 2013 04:50:45 +0100
Received: by mail-pd0-f176.google.com with SMTP id q10so4031907pdj.21
 for <ctypes@lists.ocaml.org>; Mon, 23 Sep 2013 20:50:42 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:from:to:cc:subject:references:user-agent
 :in-reply-to:date:message-id:mime-version:content-type;
 bh=DgnQoxr+3AijHOIwfcRacTbCNjKT4aCEEa04/BCLf0Q=;
 b=CxmNaWu3gaROEfLNwjkZ41OB2gvGaGQC0nQhdQLCrGPKxrXS8oso4LeukjsyN5gsaK
 EEnztUrTenkiz/xPqicFCFp4Fzcfcq5HFzbgYcUeKUtqC4CqvfNbow9LInQdZsc1Irq+
 Zn7uUwb+7rGnYNiv3/dtuk9p793xe3accnCRHRogn3FsFkqGyj6+14/mZ/zJdEF6kRzE
 RMzK295av6Ldf214fuIlrZ3iMBoZRqlp+Eq9KEx9wM/alCkLJdjsel/rDzhPzWozrDgb
 cZyfqp0ENoyaddhoVjF/AkjFjpnSEdlu/LXyImm0FDeJ8CBqXoS7Bud/ykUJhKDGWHHB
 SwYA==
X-Gm-Message-State: ALoCoQkRgYpu5J9cKJ4ihMOIQNsoAxri07nNSsCO4QZO9o/Y8vpVV1CSRcakh12taCViDLMEr4Ja
X-Received: by 10.68.129.135 with SMTP id nw7mr3110183pbb.200.1379994641955;
 Mon, 23 Sep 2013 20:50:41 -0700 (PDT)
Received: from enigma.home.hagelb.org (71-32-95-213.tukw.qwest.net.
 [71.32.95.213])
 by mx.google.com with ESMTPSA id im8sm37651034pbc.24.1969.12.31.16.00.00
 (version=TLSv1.2 cipher=RC4-SHA bits=128/128);
 Mon, 23 Sep 2013 20:50:40 -0700 (PDT)
From: Phil Hagelberg <phil@hagelb.org>
To: "Jeremy Yallop" <yallop@gmail.com>
References: <87txhc7i0x.fsf@enigma.home.hagelb.org>,
 <CAAxsn=G9w7AfTYPEN0ABiXzzHAJVgvnJhYPhMkESdbnYnx9GFw@mail.gmail.com>
User-agent: mu4e 0.9.9; emacs 24.3.50.1
In-reply-to: <CAAxsn=G9w7AfTYPEN0ABiXzzHAJVgvnJhYPhMkESdbnYnx9GFw@mail.gmail.com>
Date: Mon, 23 Sep 2013 20:45:34 -0700
Message-ID: <87mwn27uht.fsf@enigma.home.hagelb.org>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="=-=-=";
 micalg=pgp-sha1; protocol="application/pgp-signature"
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Setting completion function variable for Readline
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 24 Sep 2013 03:33:24 -0000

--=-=-=
Content-Type: text/plain


Jeremy Yallop writes:

> Yes: you can use the foreign_value function[0] to retrieve the address
> of the global, and then set it directly using the assignment operator
> <-@.

Thanks; that looks like just the trick.

There's one twist which still has me stumped though. For custom
completion functions, Readline requires an array be returned which is
null-terminated. As far as I can tell, it's impossible to represent this
within the OCaml type system. Is this something I'd have to dip into the
Obj module to implement? What would that look like?

-Phil Hagelberg

--=-=-=
Content-Type: application/pgp-signature

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (GNU/Linux)

iQEcBAEBAgAGBQJSQQreAAoJEK9We5d3533co2YH/iBVd47snJYrrtFpbeTq4UFj
gCUJP6GW3a2UFjFj69DoV0jisjZMmUjfHDnzKaD41uBiCoL7PzRJUbUlnCGFbPlV
JcefusL7qMRuiBABKyyfxbxS0R+idvRjMcBmBvCfoSQbEy+TzL67J+EsgLEGkXCI
xq22WE4P1IPw2skYP/JiBreJm2vx2RCVeRFu3EBhHV84q6EV0/EA1GVGYYCJoUa3
4FxdIYeBGYa8tpLx8qA/2VIbFNM0ssdBN2kCNckMtbbhTTT8oeOc4QWaPBUdowW/
1PhDNiyvUN7ruhwkX8UHVmpan8r29daPmybHu+WLd603HXPSAnr2RrKaHyxy1iQ=
=H3ki
-----END PGP SIGNATURE-----
--=-=-=--

From florian.pichlmeier@mytum.de  Tue Sep 24 16:26:23 2013
Return-Path: <florian.pichlmeier@mytum.de>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id BC2963C06E
 for <ctypes@lists.ocaml.org>; Tue, 24 Sep 2013 16:26:23 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1525536 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [129.187.255.136 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mailout2.lrz.de ([129.187.255.136]:47850)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtp id 1VOUm9-0001os-iy (Exim 4.80_167-5a66dd3) for
 ctypes@lists.ocaml.org
 (return-path <florian.pichlmeier@mytum.de>); Tue, 24 Sep 2013 16:43:46 +0100
Received: from lxmhs66.srv.lrz.de (localhost [127.0.0.1])
 by mailout2.lrz.de (Postfix) with ESMTP id 3ckmsF3qCCzyY5
 for <ctypes@lists.ocaml.org>; Tue, 24 Sep 2013 17:43:45 +0200 (CEST)
X-Virus-Scanned: by amavisd-new at lrz.de in lxmhs66.srv.lrz.de
Received: from mailout2.lrz.de ([127.0.0.1])
 by lxmhs66.srv.lrz.de (lxmhs66.srv.lrz.de [127.0.0.1]) (amavisd-new,
 port 10002) with ESMTP id IRNDNbJh6cEh for <ctypes@lists.ocaml.org>;
 Tue, 24 Sep 2013 17:43:45 +0200 (CEST)
Received: from magellan1.ze.tum.de (magellan1.ze.tum.de [129.187.39.23])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mailout2.lrz.de (Postfix) with ESMTPS id 3ckmsF1Zt6zyTR
 for <ctypes@lists.ocaml.org>; Tue, 24 Sep 2013 17:43:45 +0200 (CEST)
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
From: "Florian Pichlmeier" <florian.pichlmeier@mytum.de>
To: ctypes@lists.ocaml.org
Date: Tue, 24 Sep 2013 15:43:44 -0000
Message-ID: <20130924154344.65387.32437@magellan1.ze.tum.de>
X-Mailman-Approved-At: Tue, 24 Sep 2013 21:25:11 +0100
Subject: [ocaml-ctypes] Variadic Functions
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 24 Sep 2013 15:26:23 -0000

Hi,

i am trying to write a binding to the czmq library using ctypes.

Some of these functions are variadic functions, like this one

//  Create new poller
CZMQ_EXPORT zpoller_t *
    zpoller_new (void *reader, ...);

Is there a way with ctypes to emulate this signature?

Thanks in advance,

Florian

From yallop@gmail.com  Wed Sep 25 04:10:00 2013
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-mx-f.csi.cam.ac.uk [131.111.8.149])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id D23AC3C06E
 for <ctypes@lists.ocaml.org>; Wed, 25 Sep 2013 04:10:00 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1525536 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.181 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-we0-f181.google.com ([74.125.82.181]:46174)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtp id 1VOfl6-0007zL-7o (Exim 4.80_167-5a66dd3) for
 ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Wed, 25 Sep 2013 04:27:24 +0100
Received: by mail-we0-f181.google.com with SMTP id p61so5381727wes.40
 for <ctypes@lists.ocaml.org>; Tue, 24 Sep 2013 20:27:24 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=ftEgwPsibZ9WU6yiUOKsmflGn7auf6ZsFmiRc5e4QMU=;
 b=AdmHkKaBQ3vFD1UUVKk4r1m9ZkEC1d8n8BOYel716YhCqfLFyzbG+F4psTeeAwwtcz
 fgz82yDMMk3AWhDjenllBeptKex7MTgHrSv/puc/XF3+yHZPEFCf0Rfmg6NNBX1h5KYx
 bpTjuiWWCZhnEkscDCtk3KoZEyaEplisSxXWTFwGV9UFt+nfyzNNd0vyUGAm0Qvpo2BQ
 8PZF+ikau/3UpJ8MZOXVLvWOu7GWiuyz5GGFo5Zf45zsM+fx/KPUtMB5a6coC2XY4eMS
 Ak5KLscEvSB2ZnUly/0YD9WNzTRIhmNxhrp1pgdN64Cc9yjMUyo5JA1ZoBfbNELBIVEI
 vkFA==
MIME-Version: 1.0
X-Received: by 10.181.12.75 with SMTP id eo11mr20752047wid.24.1380079643971;
 Tue, 24 Sep 2013 20:27:23 -0700 (PDT)
Received: by 10.216.20.79 with HTTP; Tue, 24 Sep 2013 20:27:23 -0700 (PDT)
In-Reply-To: <87mwn27uht.fsf@enigma.home.hagelb.org>
References: <87txhc7i0x.fsf@enigma.home.hagelb.org>
 <CAAxsn=G9w7AfTYPEN0ABiXzzHAJVgvnJhYPhMkESdbnYnx9GFw@mail.gmail.com>
 <87mwn27uht.fsf@enigma.home.hagelb.org>
Date: Wed, 25 Sep 2013 00:27:23 -0300
Message-ID: <CAAxsn=EqLgi-wZGMnKO26wFZBQj2i4vk3EnEb+_Wukbjun8pEg@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Phil Hagelberg <phil@hagelb.org>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Setting completion function variable for Readline
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 25 Sep 2013 03:10:00 -0000

On 24 September 2013 00:45, Phil Hagelberg <phil@hagelb.org> wrote:
>
> Jeremy Yallop writes:
>
>> Yes: you can use the foreign_value function[0] to retrieve the address
>> of the global, and then set it directly using the assignment operator
>> <-@.
>
> Thanks; that looks like just the trick.

There's one thing I forgot to mention: it's important to ensure that
the function you assign to the global isn't garbage collected while
there's still a possibility that it can be called by the C library.
If you use a global function everything should be fine, and you don't
need to do anything special.  It's also fine to use a non-global
function such as a closure constructed at runtime, but you'll need to
keep a reference to it around in OCaml to prevent collection.

> There's one twist which still has me stumped though. For custom
> completion functions, Readline requires an array be returned which is
> null-terminated. As far as I can tell, it's impossible to represent this
> within the OCaml type system. Is this something I'd have to dip into the
> Obj module to implement? What would that look like?

Is it an array of pointers terminated with a null pointer?  The ctypes
array type can represent that; there's a function in the fts
binding[0] in the distribution that converts an OCaml list to such an
array which might be a useful inspiration or starting point.

https://github.com/ocamllabs/ocaml-ctypes/blob/816b56081d/examples/fts/fts.ml#L234-239

From yallop@gmail.com  Mon Sep 30 14:13:21 2013
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 23AA03C331
 for <ctypes@lists.ocaml.org>; Mon, 30 Sep 2013 14:13:21 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1527286 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.48 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wg0-f48.google.com ([74.125.82.48]:49068)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtp id 1VQdZ0-00045W-DD (Exim 4.80_167-5a66dd3) for
 ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Mon, 30 Sep 2013 14:31:03 +0100
Received: by mail-wg0-f48.google.com with SMTP id n12so5546693wgh.3
 for <ctypes@lists.ocaml.org>; Mon, 30 Sep 2013 06:31:01 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=Qxdplm3ZegOppR2OKBxkp5o53qKx820wJysh++tML7Q=;
 b=SwtV2J9fEaHi9y2tIAZ+hDvxw/6MsrUFtx6bUZcp7CXXR7lUVhJXzNavJ9ONSZfqUY
 SwJipE+m8sUz6wobAdoop3gUwgRe3Cxc70PKIMaNJACSCxdbTKwcbrg0gJ6xXlfsfrc/
 oJSeEheFS7E6djiz1lINBQsPVKejNUrq5G53q1RagewlX4627BVeKYj64QTYWk9OJUEX
 OL2DwuLAOfnaUFvZQMwf8rdKc7NeoWbzHMfOsCraQSFrdSfd9PAtJakjZ2b78NXyjRwt
 QXUF9qGDtFurfGbp7PN+KoxUS++qrCFgsYdluz4dia7ytT4wpPpglZWI/mpLoNBfqhDH
 2B/g==
MIME-Version: 1.0
X-Received: by 10.194.178.166 with SMTP id cz6mr1734419wjc.53.1380547861663;
 Mon, 30 Sep 2013 06:31:01 -0700 (PDT)
Received: by 10.216.20.79 with HTTP; Mon, 30 Sep 2013 06:31:01 -0700 (PDT)
In-Reply-To: <20130924154344.65387.32437@magellan1.ze.tum.de>
References: <20130924154344.65387.32437@magellan1.ze.tum.de>
Date: Mon, 30 Sep 2013 14:31:01 +0100
Message-ID: <CAAxsn=H_JJV3yX3LruMddAcDKX_nmv-dUgb8B9ekXDgPMGx1Xg@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Florian Pichlmeier <florian.pichlmeier@mytum.de>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Variadic Functions
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 30 Sep 2013 13:13:21 -0000

On 24 September 2013 12:43, Florian Pichlmeier
<florian.pichlmeier@mytum.de> wrote:
> Some of these functions are variadic functions, like this one
>
> //  Create new poller
> CZMQ_EXPORT zpoller_t *
>     zpoller_new (void *reader, ...);
>
> Is there a way with ctypes to emulate this signature?

The short answer, unfortunately, is "no".  This type of function is
rather tricky to wrap.  This isn't due to a limitation of ctypes; it's
because there isn't a way to write wrappers for variadic functions in
standard C [0, 1]

Ideally the C library interface should provide a more wrappable
interface in addition to the variadic function, e.g.

    zpoller_t *zpoller_new_vec(void **readers);    /* argument is a
null-terminated array of pointers */

or

    zpoller_t *zpoller_new_vec(void **readers, size_t nreaders);

It might be worth sending a pull request to the czmq maintainers to
modify the interface.

If you're not too concerned by portability you can use the fact that
some C implementations (e.g. GCC on Linux) have the same calling
convention for variadic and regular functions.  Here ctypes offers an
advantage over handwritten bindings: since C types are exposed as
OCaml values you can construct a signature dynamically according to
the number of arguments you want to pass to  the function.  For
example, you might call the function using any of the signatures

    ptr void @-> returning (ptr (zpoller_t))

    ptr void @-> ptr void @-> returning (ptr (zpoller_t))

    ptr void @-> ptr void @-> ptr void @-> returning (ptr (zpoller_t))

and so on.  In fact, it ought to be possible (but probably not easy)
to write a function which accepts a list of pointers, constructs a
suitable signature for zpoller_new and calls the function.

Jeremy.

[0] http://c-faq.com/varargs/handoff.html
[1] http://c-faq.com/varargs/invvarargs.html

From agarwal1975@gmail.com  Tue Oct  1 21:34:56 2013
Return-Path: <agarwal1975@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-mx-f.csi.cam.ac.uk [131.111.8.149])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id CFBD33C1E1
 for <ctypes@lists.ocaml.org>; Tue,  1 Oct 2013 21:34:56 +0100 (BST)
X-Cam-SpamDetails: score 0.9 from SpamAssassin-3.3.2-1527487 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.215.41 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (agarwal1975[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.2 FREEMAIL_ENVFROM_END_DIGIT Envelope-from freemail username ends in
 *      digit (agarwal1975[at]gmail.com)
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-la0-f41.google.com ([209.85.215.41]:59283)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtp id 1VR6vy-0008L9-6v (Exim 4.80_167-5a66dd3) for
 ctypes@lists.ocaml.org
 (return-path <agarwal1975@gmail.com>); Tue, 01 Oct 2013 21:52:43 +0100
Received: by mail-la0-f41.google.com with SMTP id ec20so6368497lab.14
 for <ctypes@lists.ocaml.org>; Tue, 01 Oct 2013 13:52:41 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:from:date:message-id:subject:to:content-type;
 bh=pr4BiOHx64c3yoj+Td184+/4NEJDkZKM9sN/M9LCpZc=;
 b=Y6PhAIbQ5of8zTzQB+fH1CLFtGhIYYacoEcamAzYVqLiMFtvwusOucBKkFz1GNU13d
 TSIXa/nu/W6C2voaGqn0dkDUo3kn7N6rSjeLxPwUioZmnlFHUjhjjZhA+bUzzHECPvfK
 zKAh9SZYFJ9raol7niurXS2DJlK2UQaqAvm2hfzyQUFiM4acRTnyg6HqG1PSs9g7+x8J
 jRhjluvUIlaxOZtjfMqAlZQLtsFHgUxyE5UghUJLM7nSneMhI0KE1bmL/caH3XgAaytN
 hDrTWJcOS24+qwOftbBctbvzg0D9rb5fM65Btzdsh1ruYmJwBKwNgEsdrG2+jdLgp/F2
 zrLw==
X-Received: by 10.112.168.170 with SMTP id zx10mr28366514lbb.0.1380660761338; 
 Tue, 01 Oct 2013 13:52:41 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.112.198.39 with HTTP; Tue, 1 Oct 2013 13:52:21 -0700 (PDT)
From: Ashish Agarwal <agarwal1975@gmail.com>
Date: Tue, 1 Oct 2013 16:52:21 -0400
Message-ID: <CAMu2m2K0VumHyOzmiYprnY77ApB+EjSShhYiqrJ-9piOXq=n2Q@mail.gmail.com>
To: ctypes@lists.ocaml.org
Content-Type: multipart/alternative; boundary=001a11c23c883c354b04e7b42249
Subject: [ocaml-ctypes] linking with non-standard C library
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 01 Oct 2013 20:34:56 -0000

--001a11c23c883c354b04e7b42249
Content-Type: text/plain; charset=ISO-8859-1

I've managed to compile the ncurses example with the following commands:

ncurses_cmd.native: ncurses.ml ncurses.mli ncurses_cmd.ml
 ocamlfind ocamlc -c -g -annot -package unix,threads,bigarray -thread -o
ncurses.cmi ncurses.mli
ocamlfind ocamlopt -c -g -annot -package
unix,threads,bigarray,ctypes,ctypes.foreign -thread -o ncurses.cmx
ncurses.ml
 ocamlfind ocamlopt -a -cclib -lncurses ncurses.cmx -o ncurses.cmxa
ocamlfind ocamlopt -c -g -annot -package unix,threads,bigarray -thread -o
ncurses_cmd.cmx ncurses_cmd.ml
 ocamlfind ocamlopt -g -linkpkg -package
unix,threads,bigarray,ctypes,ctypes.foreign -thread ncurses.cmxa
ncurses_cmd.cmx -o ncurses_cmd.native


Now, I'm trying to mimic this to wrap a library that is not in my system's
default location. A couple of questions:

* What is the recommended way to package this? Should I include the source
of the external C library within my OCaml repo?

* What options do I have to use to link in a library in a custom location?
I've tried every variation of -cclib, -ccopt -L/path/to/lib, -linkall, and
am just guessing at this point. No matter what, I always get this error:

Fatal error: exception Dl.DL_error("dlsym(RTLD_DEFAULT, sam_open): symbol
not found")
Raised at file "src/dl.ml", line 42, characters 26-44
Called from file "src/foreign.ml", line 18, characters 25-53
Called from file "samtools.ml", line 4, characters 15-60

However, I'm pretty sure "sam_open" is exported by the library I'm using:

$ nm libbam.a | grep sam_open
0000000000000060 T _sam_open
0000000000005cf0 S _sam_open.eh
                 U _sam_open
                 U _sam_open
                 U _sam_open
                 U _sam_open

--001a11c23c883c354b04e7b42249
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">I&#39;ve managed to compile the ncurses example with the f=
ollowing commands:<div><br></div><div><div>ncurses_cmd.native: <a href=3D"h=
ttp://ncurses.ml">ncurses.ml</a> ncurses.mli <a href=3D"http://ncurses_cmd.=
ml">ncurses_cmd.ml</a></div>

<div><span class=3D"" style=3D"white-space:pre">	</span>ocamlfind ocamlc -c=
 -g -annot -package unix,threads,bigarray -thread -o ncurses.cmi ncurses.ml=
i</div><div><span class=3D"" style=3D"white-space:pre">	</span>ocamlfind oc=
amlopt -c -g -annot -package unix,threads,bigarray,ctypes,ctypes.foreign -t=
hread -o ncurses.cmx <a href=3D"http://ncurses.ml">ncurses.ml</a></div>

<div><span class=3D"" style=3D"white-space:pre">	</span>ocamlfind ocamlopt =
-a -cclib -lncurses ncurses.cmx -o ncurses.cmxa</div><div><span class=3D"" =
style=3D"white-space:pre">	</span>ocamlfind ocamlopt -c -g -annot -package =
unix,threads,bigarray -thread -o ncurses_cmd.cmx <a href=3D"http://ncurses_=
cmd.ml">ncurses_cmd.ml</a></div>

<div><span class=3D"" style=3D"white-space:pre">	</span>ocamlfind ocamlopt =
-g -linkpkg -package unix,threads,bigarray,ctypes,ctypes.foreign -thread nc=
urses.cmxa ncurses_cmd.cmx -o ncurses_cmd.native</div></div><div><br></div>

<div><br></div><div>Now, I&#39;m trying to mimic this to wrap a library tha=
t is not in my system&#39;s default location. A couple of questions:</div><=
div><br></div><div>* What is the recommended way to package this? Should I =
include the source of the external C library within my OCaml repo?</div>

<div><br></div><div>* What options do I have to use to link in a library in=
 a custom location? I&#39;ve tried every variation of -cclib, -ccopt -L/pat=
h/to/lib, -linkall, and am just guessing at this point. No matter what, I a=
lways get this error:</div>

<div><br></div><div><div>Fatal error: exception Dl.DL_error(&quot;dlsym(RTL=
D_DEFAULT, sam_open): symbol not found&quot;)</div><div>Raised at file &quo=
t;src/<a href=3D"http://dl.ml">dl.ml</a>&quot;, line 42, characters 26-44</=
div>

<div>Called from file &quot;src/<a href=3D"http://foreign.ml">foreign.ml</a=
>&quot;, line 18, characters 25-53</div><div>Called from file &quot;<a href=
=3D"http://samtools.ml">samtools.ml</a>&quot;, line 4, characters 15-60</di=
v>

</div><div><br></div><div>However, I&#39;m pretty sure &quot;sam_open&quot;=
 is exported by the library I&#39;m using:</div><div><br></div><div><div>$ =
nm libbam.a | grep sam_open</div><div>0000000000000060 T _sam_open</div>

<div>0000000000005cf0 S _sam_open.eh</div><div>=A0 =A0 =A0 =A0 =A0 =A0 =A0 =
=A0 =A0U _sam_open</div><div>=A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0U _sam_open=
</div><div>=A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0U _sam_open</div><div>=A0 =A0=
 =A0 =A0 =A0 =A0 =A0 =A0 =A0U _sam_open</div></div><div><br></div></div>


--001a11c23c883c354b04e7b42249--

From phil@hagelb.org  Thu Oct  3 18:09:58 2013
Return-Path: <phil@hagelb.org>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 5E38E3C371
 for <ctypes@lists.ocaml.org>; Thu,  3 Oct 2013 18:09:58 +0100 (BST)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1528373 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.192.177 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-pd0-f177.google.com ([209.85.192.177]:63051)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1VRmgn-0005Ty-2z (Exim 4.80_167-5a66dd3) for
 ctypes@lists.ocaml.org
 (return-path <phil@hagelb.org>); Thu, 03 Oct 2013 18:27:50 +0100
Received: by mail-pd0-f177.google.com with SMTP id y10so2783353pdj.22
 for <ctypes@lists.ocaml.org>; Thu, 03 Oct 2013 10:27:48 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:from:to:subject:user-agent:date:message-id
 :mime-version:content-type;
 bh=FMoxjXgJsJk8bj4CCzlhm9i+do2AeqhCjfo93scpTLI=;
 b=C+yk+rFQ5qjq605R+VyyGsctmUXS/NbAb+iCHmmyln97Px5pJgxN7NBnrdQsgVJ6uf
 aB3BUiiokKmorM27BWiZS+u8IEaU/dNKTh8EOl4nmcNnA9gewfrO5MP04PHm9tYVniUi
 esJbIn7TTBtXMOuF3jlXTZRAYsrqDsocJll3wSB+DSMjkQ6mjKPHHZP0oq38vT0XXC2K
 GZVdUn5yBx0w4ylGIus0a2DtWphjuUValULVHH5GNpI1wALkBev8NoK04utDdh1a/VgI
 noqgP6ww/5L1n/1bTZTFGVi63N3DrP6Vn/WHdpPXHredG4Ij7b4126KFy6G/GVyvGrkz
 xYEA==
X-Gm-Message-State: ALoCoQkfnskJRR5PZfzn/zbZCeCDKX0iAmzogBdMM09XTMp1slKghnhElIGEahFJ09H14geomXg+
X-Received: by 10.67.23.199 with SMTP id ic7mr10890269pad.73.1380821268201;
 Thu, 03 Oct 2013 10:27:48 -0700 (PDT)
Received: from enigma.home.hagelb.org (71-32-95-213.tukw.qwest.net.
 [71.32.95.213])
 by mx.google.com with ESMTPSA id va8sm9487560pbc.16.1969.12.31.16.00.00
 (version=TLSv1.2 cipher=RC4-SHA bits=128/128);
 Thu, 03 Oct 2013 10:27:45 -0700 (PDT)
From: Phil Hagelberg <phil@hagelb.org>
To: ctypes@lists.ocaml.org
User-agent: mu4e 0.9.9; emacs 24.3.50.1
Date: Thu, 03 Oct 2013 10:22:24 -0700
Message-ID: <87zjqqfewf.fsf@enigma.home.hagelb.org>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="=-=-=";
 micalg=pgp-sha1; protocol="application/pgp-signature"
Subject: [ocaml-ctypes] libffi compatibility
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 03 Oct 2013 17:09:58 -0000

--=-=-=
Content-Type: text/plain


I'm preparing to distribute my ctypes-using project to folks who don't
have OCaml installed, so I'm compiling a .native executable.

Most of what I read about distributing OCaml is that for native binaries
you can compile it on any 64-bit Linux system, and it should work on any
other 64-bit Linux. But I get the feeling libffi complicates things a
bit; my Debian-compiled binary refuses to run on newer Ubuntus ("error
while loading shared libraries: libffi.so.5: cannot open shared object
file") and straight up segfaults on Fedora 19.

So I'm guessing I'll need to compile separately for each
distribution/version I want to support? Are there any tools to make this
process more streamlined? I briefly looked at the OpenSuSE Build
Service[1], but it looks pretty complicated. What about different
versions of Mac OS X?

Also on a somewhat-related note, I have this to find the readline library:

  let libreadline = Dl.(dlopen ~filename:"libreadline.so" ~flags:[RTLD_NOW])

However, the ".so" needs to be replaced with ".dylib" for Mac OS X
compatibility. Is there a recommended way to specify dlopen filenames
portably, or should I just catch the exception and try to fall back to
.dylib if it can't find the .so?

thanks,
Phil

[1] - http://build.opensuse.org

--=-=-=
Content-Type: application/pgp-signature

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (GNU/Linux)

iQEcBAEBAgAGBQJSTafQAAoJEK9We5d3533cRQEIAM8fVgxxIhyQSvXlsqdg43j4
IW7c/AwE+uGipQFPARBRerRuGY3NzcNF/UjFIWDdvPTQPOqkJKDGcrqdq6spcpSz
qvRsnZUOjrp+P+e5l6UV0E3BHeDhv+THyTHO3a+k8OUkaB+SaNCBh7kWN+kUbNcE
o2VU1UycO3qo8AmjbJByly2/JXPz+bP1CrCSFsTDjbZE8prJYmFxsSvwlS4kKTeC
Hmx4D4l5P/DtXpFjP/5vSHazsPzNE+GJQa2d8jmXLjr+JoB9wIEKnVaV5L7h7QXQ
b0tC0lVQGftAjLh7I64UyBUr74TlNvOYYhTSufsOxykkojv5SqDnWSqyVBYUwVQ=
=F5mT
-----END PGP SIGNATURE-----
--=-=-=--

From anil@recoil.org  Fri Oct  4 09:43:25 2013
Return-Path: <anil@recoil.org>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 3FD8D3C204
 for <ctypes@lists.ocaml.org>; Fri,  4 Oct 2013 09:43:25 +0100 (BST)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1528751
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from recoil.dh.bytemark.co.uk ([89.16.177.154]:18607
 helo=dark.recoil.org)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with smtp id 1VS1GA-0005tD-hU (Exim 4.80_167-5a66dd3) for
 ctypes@lists.ocaml.org
 (return-path <anil@recoil.org>); Fri, 04 Oct 2013 10:01:19 +0100
Received: (qmail 30441 invoked by uid 634); 4 Oct 2013 09:01:14 -0000
X-Spam-Level: *
X-Spam-Status: No, hits=-1.0 required=5.0
	tests=ALL_TRUSTED
X-Spam-Check-By: dark.recoil.org
Received: from host81-149-102-120.in-addr.btopenworld.com (HELO flick.home)
 (81.149.102.120)
 (smtp-auth username remote@recoil.org, mechanism cram-md5)
 by dark.recoil.org (qpsmtpd/0.84) with ESMTPA; Fri, 04 Oct 2013 10:01:14 +0100
Content-Type: text/plain; charset=us-ascii
Mime-Version: 1.0 (Mac OS X Mail 7.0 \(1811\))
From: Anil Madhavapeddy <anil@recoil.org>
In-Reply-To: <87zjqqfewf.fsf@enigma.home.hagelb.org>
Date: Fri, 4 Oct 2013 10:01:12 +0100
Content-Transfer-Encoding: 7bit
Message-Id: <61870618-663E-4868-8862-C3E7BAFC24CA@recoil.org>
References: <87zjqqfewf.fsf@enigma.home.hagelb.org>
To: Phil Hagelberg <phil@hagelb.org>
X-Mailer: Apple Mail (2.1811)
X-Virus-Checked: Checked by ClamAV on dark.recoil.org
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] libffi compatibility
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 04 Oct 2013 08:43:25 -0000

On 3 Oct 2013, at 18:22, Phil Hagelberg <phil@hagelb.org> wrote:

> 
> I'm preparing to distribute my ctypes-using project to folks who don't
> have OCaml installed, so I'm compiling a .native executable.
> 
> Most of what I read about distributing OCaml is that for native binaries
> you can compile it on any 64-bit Linux system, and it should work on any
> other 64-bit Linux. But I get the feeling libffi complicates things a
> bit; my Debian-compiled binary refuses to run on newer Ubuntus ("error
> while loading shared libraries: libffi.so.5: cannot open shared object
> file") and straight up segfaults on Fedora 19.

Right; while static linking is (reasonably) doable on Linux, libffi
introduce a dynamic loading component.  You may want to try to link to
libffi statically from ctypes, which would link in libffi.a instead of
libffi.so.<major>.

In the longer term though, I'm finding it's easier to distribute a
source version. If your users don't have OCaml installed, would they
be satisfied with a script that outputs a native executable? For instance,
I added a 'make cold' target to OPAM 1.1 that bootstraps it without OCaml
installed, and then that's sufficient to build any OPAM library without
a compiler.  It does take a little longer though...

> So I'm guessing I'll need to compile separately for each
> distribution/version I want to support? Are there any tools to make this
> process more streamlined? I briefly looked at the OpenSuSE Build
> Service[1], but it looks pretty complicated. What about different
> versions of Mac OS X?

I've slowly been working through this for OPAM itself, and I'm afraid
there aren't really any clear services on this front that don't involve
a lot of manual gruntwork.

> Also on a somewhat-related note, I have this to find the readline library:
> 
>  let libreadline = Dl.(dlopen ~filename:"libreadline.so" ~flags:[RTLD_NOW])
> 
> However, the ".so" needs to be replaced with ".dylib" for Mac OS X
> compatibility. Is there a recommended way to specify dlopen filenames
> portably, or should I just catch the exception and try to fall back to
> .dylib if it can't find the .so?

It's probably best to embed a -cclib -lreadline that will cause the
system linker to do the right thing, rather than dlopen it manually.
Do you specifically need to do this at runtime via Dl.dlopen, or would
some build assistance help out here?

-anil


From agarwal1975@gmail.com  Fri Oct  4 14:31:24 2013
Return-Path: <agarwal1975@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 9219F3C0BB
 for <ctypes@lists.ocaml.org>; Fri,  4 Oct 2013 14:31:24 +0100 (BST)
X-Cam-SpamDetails: score 0.9 from SpamAssassin-3.3.2-1528751 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.223.169 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (agarwal1975[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.2 FREEMAIL_ENVFROM_END_DIGIT Envelope-from freemail username ends in
 *      digit (agarwal1975[at]gmail.com)
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-ie0-f169.google.com ([209.85.223.169]:58476)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1VS5kt-0007rS-04 (Exim 4.80_167-5a66dd3) for
 ctypes@lists.ocaml.org
 (return-path <agarwal1975@gmail.com>); Fri, 04 Oct 2013 14:49:19 +0100
Received: by mail-ie0-f169.google.com with SMTP id tp5so9324418ieb.28
 for <ctypes@lists.ocaml.org>; Fri, 04 Oct 2013 06:49:18 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc:content-type;
 bh=COcvItwj6BGw1nx1IOmVnFiA0pEH09j6xCbZRbaR4Tg=;
 b=v8AouPQQp/ci86+5vgzPXSqczRYTla4/hKc8XxDoc1Ti7dczs4jfu8fenydWQKxE/N
 579btzsH4gKaJmx0XREdy5DNCGSibyhQk357Enqk5aAcmITNzyk0LxL43hnnpibE58ej
 TwTRYgnIEhid179VI+dA+00kynxNExSqdariOtPaUGE5J5rtob4BI5VM156mROPy6i4m
 f5IlEKEnA2GeAAKRoEI9eFEhMLgUjjbtMKwJLsB/1PESy9TfGVI9mibvwWR4dG8HdgBR
 Za3DAFz4iFEBh2mZpAiIXOpOnXyJXapSoJ3fUU5zOjCSwFi7UbExH9XFtmynG7C4IMD8
 s6mg==
X-Received: by 10.43.152.78 with SMTP id kv14mr8601794icc.13.1380894557993;
 Fri, 04 Oct 2013 06:49:17 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.64.70.228 with HTTP; Fri, 4 Oct 2013 06:48:57 -0700 (PDT)
In-Reply-To: <87zjqqfewf.fsf@enigma.home.hagelb.org>
References: <87zjqqfewf.fsf@enigma.home.hagelb.org>
From: Ashish Agarwal <agarwal1975@gmail.com>
Date: Fri, 4 Oct 2013 09:48:57 -0400
Message-ID: <CAMu2m2+OHk+Tsx5fA_Mi7LuZuud4nKxpftpo93KCsTxgw55BKw@mail.gmail.com>
To: Phil Hagelberg <phil@hagelb.org>
Content-Type: multipart/alternative; boundary=001a11c30a849a146c04e7ea9163
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] libffi compatibility
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 04 Oct 2013 13:31:24 -0000

--001a11c30a849a146c04e7ea9163
Content-Type: text/plain; charset=ISO-8859-1

> I'm preparing to distribute my ctypes-using project

Can you please provide a link to your project.



On Thu, Oct 3, 2013 at 1:22 PM, Phil Hagelberg <phil@hagelb.org> wrote:

>
> I'm preparing to distribute my ctypes-using project to folks who don't
> have OCaml installed, so I'm compiling a .native executable.
>
> Most of what I read about distributing OCaml is that for native binaries
> you can compile it on any 64-bit Linux system, and it should work on any
> other 64-bit Linux. But I get the feeling libffi complicates things a
> bit; my Debian-compiled binary refuses to run on newer Ubuntus ("error
> while loading shared libraries: libffi.so.5: cannot open shared object
> file") and straight up segfaults on Fedora 19.
>
> So I'm guessing I'll need to compile separately for each
> distribution/version I want to support? Are there any tools to make this
> process more streamlined? I briefly looked at the OpenSuSE Build
> Service[1], but it looks pretty complicated. What about different
> versions of Mac OS X?
>
> Also on a somewhat-related note, I have this to find the readline library:
>
>   let libreadline = Dl.(dlopen ~filename:"libreadline.so"
> ~flags:[RTLD_NOW])
>
> However, the ".so" needs to be replaced with ".dylib" for Mac OS X
> compatibility. Is there a recommended way to specify dlopen filenames
> portably, or should I just catch the exception and try to fall back to
> .dylib if it can't find the .so?
>
> thanks,
> Phil
>
> [1] - http://build.opensuse.org
>
> _______________________________________________
> Ctypes mailing list
> Ctypes@lists.ocaml.org
> http://lists.ocaml.org/listinfo/ctypes
>
>

--001a11c30a849a146c04e7ea9163
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">&gt; I&#39;m preparing to distribute my ctypes-using proje=
ct<div><br></div><div>Can you please provide a link to your project.</div><=
div><br><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Th=
u, Oct 3, 2013 at 1:22 PM, Phil Hagelberg <span dir=3D"ltr">&lt;<a href=3D"=
mailto:phil@hagelb.org" target=3D"_blank">phil@hagelb.org</a>&gt;</span> wr=
ote:<br>

<blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-=
left-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;p=
adding-left:1ex"><br>
I&#39;m preparing to distribute my ctypes-using project to folks who don&#3=
9;t<br>
have OCaml installed, so I&#39;m compiling a .native executable.<br>
<br>
Most of what I read about distributing OCaml is that for native binaries<br=
>
you can compile it on any 64-bit Linux system, and it should work on any<br=
>
other 64-bit Linux. But I get the feeling libffi complicates things a<br>
bit; my Debian-compiled binary refuses to run on newer Ubuntus (&quot;error=
<br>
while loading shared libraries: libffi.so.5: cannot open shared object<br>
file&quot;) and straight up segfaults on Fedora 19.<br>
<br>
So I&#39;m guessing I&#39;ll need to compile separately for each<br>
distribution/version I want to support? Are there any tools to make this<br=
>
process more streamlined? I briefly looked at the OpenSuSE Build<br>
Service[1], but it looks pretty complicated. What about different<br>
versions of Mac OS X?<br>
<br>
Also on a somewhat-related note, I have this to find the readline library:<=
br>
<br>
=A0 let libreadline =3D Dl.(dlopen ~filename:&quot;libreadline.so&quot; ~fl=
ags:[RTLD_NOW])<br>
<br>
However, the &quot;.so&quot; needs to be replaced with &quot;.dylib&quot; f=
or Mac OS X<br>
compatibility. Is there a recommended way to specify dlopen filenames<br>
portably, or should I just catch the exception and try to fall back to<br>
.dylib if it can&#39;t find the .so?<br>
<br>
thanks,<br>
Phil<br>
<br>
[1] - <a href=3D"http://build.opensuse.org" target=3D"_blank">http://build.=
opensuse.org</a><br>
<br>_______________________________________________<br>
Ctypes mailing list<br>
<a href=3D"mailto:Ctypes@lists.ocaml.org">Ctypes@lists.ocaml.org</a><br>
<a href=3D"http://lists.ocaml.org/listinfo/ctypes" target=3D"_blank">http:/=
/lists.ocaml.org/listinfo/ctypes</a><br>
<br></blockquote></div><br></div></div></div>

--001a11c30a849a146c04e7ea9163--

From phil@hagelb.org  Fri Oct  4 18:27:11 2013
Return-Path: <phil@hagelb.org>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-mx-f.csi.cam.ac.uk [131.111.8.149])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id D66153C0BB
 for <ctypes@lists.ocaml.org>; Fri,  4 Oct 2013 18:27:11 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1528751 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.220.54 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-pa0-f54.google.com ([209.85.220.54]:60505)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtp id 1VS9R4-0002ap-8c (Exim 4.80_167-5a66dd3) for
 ctypes@lists.ocaml.org
 (return-path <phil@hagelb.org>); Fri, 04 Oct 2013 18:45:07 +0100
Received: by mail-pa0-f54.google.com with SMTP id kx10so4514213pab.41
 for <ctypes@lists.ocaml.org>; Fri, 04 Oct 2013 10:45:05 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:from:to:cc:subject:references:user-agent
 :in-reply-to:date:message-id:mime-version:content-type;
 bh=oLXqpLX2fEp3BEttc2U0xmrirpZOUYLuaCebdeV5Ff0=;
 b=P28iyqgYQr5c/crMBHqB+9jWtlOWZkOlqvswZrgLHQ5zDM9ez41d3NV0ndkrHk0YQ6
 tdY6Kax6Sgw3+nS81s6lLbQzGWqQ8flm+UBrxZTLaLw+Ly9gOcjbkN7MZ6E3mlgW3BeL
 4n//x7AwkxMNESFDuNUkqY46s5cnPqRR8nupKCvJxmhvJxgMBOIR+Cze0dN2hVDsr353
 ZufcZnwbTq1X35VHqnk02kSAZk3KYp7tZyDTivg7G766WXkjqFneHrjne9y0zGdeXaQ2
 MA1W/P84jxHKyXHhiQYQ2MxdA40hHtf++0yRfJQKa+vhdEcSqlnlVuQri9xQuRlRp3vo
 Q8Tw==
X-Gm-Message-State: ALoCoQmY5e1n1II4wEDvayxJ5parmVZafUhripUwx4T5IJPZCf5m0bG2spKPV72pFwh4wmzdZeIX
X-Received: by 10.66.118.129 with SMTP id km1mr16740432pab.127.1380908705094; 
 Fri, 04 Oct 2013 10:45:05 -0700 (PDT)
Received: from enigma.home.hagelb.org (71-32-95-213.tukw.qwest.net.
 [71.32.95.213])
 by mx.google.com with ESMTPSA id py4sm16047460pbb.33.1969.12.31.16.00.00
 (version=TLSv1.2 cipher=RC4-SHA bits=128/128);
 Fri, 04 Oct 2013 10:45:03 -0700 (PDT)
From: Phil Hagelberg <phil@hagelb.org>
To: "Anil Madhavapeddy" <anil@recoil.org>
References: <87zjqqfewf.fsf@enigma.home.hagelb.org>,
 <61870618-663E-4868-8862-C3E7BAFC24CA@recoil.org>
User-agent: mu4e 0.9.9; emacs 24.3.50.1
In-reply-to: <61870618-663E-4868-8862-C3E7BAFC24CA@recoil.org>
Date: Fri, 04 Oct 2013 10:39:41 -0700
Message-ID: <87vc1dey02.fsf@enigma.home.hagelb.org>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="=-=-=";
 micalg=pgp-sha1; protocol="application/pgp-signature"
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] libffi compatibility
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 04 Oct 2013 17:27:11 -0000

--=-=-=
Content-Type: text/plain


Anil Madhavapeddy writes:

> Right; while static linking is (reasonably) doable on Linux, libffi
> introduce a dynamic loading component.  You may want to try to link to
> libffi statically from ctypes, which would link in libffi.a instead of
> libffi.so.<major>.

That sounds promising; can you explain how it would work? I don't see it
mentioned in the ctypes documentation.

My suspicion is that readline is much more stable than libffi, so while
technically there could still be incompatibility dynamically loading
readline, in practice it would be much less common than incompatibility
arising from dynamically loading libffi. But that's just a wildly
unqualified guess.

> In the longer term though, I'm finding it's easier to distribute a
> source version. If your users don't have OCaml installed, would they
> be satisfied with a script that outputs a native executable?

It's tempting, but I think most of my users wouldn't be interested in
trying this program if the installation took half an hour. Of course
it's always an option for users on systems where I can't provide a
precompiled binary, but those people typically have more patience to
begin with. =)

>> However, the ".so" needs to be replaced with ".dylib" for Mac OS X
>> compatibility. Is there a recommended way to specify dlopen filenames
>> portably, or should I just catch the exception and try to fall back to
>> .dylib if it can't find the .so?
>
> It's probably best to embed a -cclib -lreadline that will cause the
> system linker to do the right thing, rather than dlopen it manually.
> Do you specifically need to do this at runtime via Dl.dlopen, or would
> some build assistance help out here?

I've never worked with C libraries before; I was just following the
advice I found on the issue tracker regarding a similar problem:

  https://github.com/ocamllabs/ocaml-ctypes/issues/70

Is changing my `ocamlbuild` invocation the best way to do that?

  $ ocamlbuild -use-ocamlfind -lflags -cclib,-lreadline grench.native

For context, the project in question is here:

  https://github.com/technomancy/grenchman

thanks,
Phil

--=-=-=
Content-Type: application/pgp-signature

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (GNU/Linux)

iQEcBAEBAgAGBQJSTv1dAAoJEK9We5d3533cLQkIAKuNZUfCSKNisOxkWR5ecO7B
hdxF2D2XZp2tcJ2dRf6BrSFlRjGOr22IXE1o+SKPX5GSMRYKbu/oDV9d/itMNWU9
inuSrssT8XkHJe27bsDlpHRNzFQ6DiK5OK5GrMyrT5ALGQNF3Fxm0auZNlwB8McW
VaOSfphV/NIgBvvyfNtnmsG/kvlS8stZL2aj9j/fbd9J3JOXS1YUei8ZqcKMk093
MizCWO/GjZL4FHjHhDwKvTpqVWx1KZcKq5o7BBzcx6nu0KRCEPjWIxtAjtwFdI59
fOHdWYF14uv9ns5r3pYFCZ3eGEiM1uEoFCS1ln3hoSaRsN/vawJpclLZJJCg06I=
=DlVA
-----END PGP SIGNATURE-----
--=-=-=--

From phil@hagelb.org  Tue Oct  8 23:27:07 2013
Return-Path: <phil@hagelb.org>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 0482B3C16D
 for <ctypes@lists.ocaml.org>; Tue,  8 Oct 2013 23:27:07 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1529793 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.160.53 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-pb0-f53.google.com ([209.85.160.53]:56081)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtp id 1VTg1j-0003F9-F4 (Exim 4.80_167-5a66dd3) for
 ctypes@lists.ocaml.org
 (return-path <phil@hagelb.org>); Tue, 08 Oct 2013 23:45:16 +0100
Received: by mail-pb0-f53.google.com with SMTP id up15so9242271pbc.26
 for <ctypes@lists.ocaml.org>; Tue, 08 Oct 2013 15:45:13 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:from:to:cc:subject:references:user-agent
 :in-reply-to:date:message-id:mime-version:content-type;
 bh=3MbF0xgqwNc2JAUHeueIuDHYv0sE75C0WqPM/3cJ/1o=;
 b=ZFBocH6X8I0zmAPJmctjGv0pUwuG9vQqxczF9JUZ4t2gC8bOUew+DOT+ZQaykkal3o
 J+q/+wl+aJ5MPAqEQ2StudsozPzwXxO+npNzrhGxTnLyHFa5oCZ76tNp9CF+b5qN5mxx
 lQRZzYcBFsZkE5JCGEsulU2uMe388CaV4ETPiSc04yeJUkfShodvxGWBBSV1qB3gKSeE
 CIrr7Zt+0efQVVOeQ2xz40dhiCB8W8QPYU4JxvH7y5O7BXRMWejvuQsMcRP9ORhc6ykC
 EFDYa4qTc8lNo7nixj+C80n9OUs6V3YReQWecAbB7/UWO0GPnx0eJ5l9mfMqoJWM2UDd
 QpOA==
X-Gm-Message-State: ALoCoQmUophPOrEcILcaBSR92kOAAw3nGkyhpbt57EgiNRkFQ/sJYHI/IawPxUgoe1PbcQftHWE5
X-Received: by 10.66.161.38 with SMTP id xp6mr5958282pab.145.1381272313564;
 Tue, 08 Oct 2013 15:45:13 -0700 (PDT)
Received: from enigma.home.hagelb.org (71-32-95-213.tukw.qwest.net.
 [71.32.95.213])
 by mx.google.com with ESMTPSA id gg10sm42356356pbc.46.1969.12.31.16.00.00
 (version=TLSv1.2 cipher=RC4-SHA bits=128/128);
 Tue, 08 Oct 2013 15:45:12 -0700 (PDT)
From: Phil Hagelberg <phil@hagelb.org>
To: "Anil Madhavapeddy" <anil@recoil.org>
References: <87zjqqfewf.fsf@enigma.home.hagelb.org>,
 <61870618-663E-4868-8862-C3E7BAFC24CA@recoil.org>
User-agent: mu4e 0.9.9; emacs 24.3.50.1
In-reply-to: <61870618-663E-4868-8862-C3E7BAFC24CA@recoil.org>
Date: Tue, 08 Oct 2013 15:39:43 -0700
Message-ID: <87r4bvfkuo.fsf@enigma.home.hagelb.org>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="=-=-=";
 micalg=pgp-sha1; protocol="application/pgp-signature"
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] libffi compatibility
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 08 Oct 2013 22:27:07 -0000

--=-=-=
Content-Type: text/plain


Anil Madhavapeddy writes:

> It's probably best to embed a -cclib -lreadline that will cause the
> system linker to do the right thing, rather than dlopen it manually.

I tried this[1], and it works great on my primary Debian system, but when I
try compiling it on Ubuntu (with libffi6 instead of libffi5; not sure if
that's relevant), the compilation succeeds, but I get this when I try to
run the program:

    Fatal error: exception Dl.DL_error("grench: undefined symbol: readline")
    Raised at file "src/dl.ml", line 42, characters 26-44
    Called from file "src/foreign.ml", line 18, characters 25-53

The native binary I compiled on my Debian libffi5 system doesn't work on
newer Ubuntu systems with libffi6. Do I need a different binary for each
version of libffi I want to target on Linux, or is it one for each
distro release?

I'm very new to C libraries, so I'm probably missing something obvious,
but it's not working how I expected.

-Phil

[1] - $ ocamlbuild -use-ocamlfind -lflags -cclib,-lreadline grench.native
    on https://github.com/technomancy/grenchman

--=-=-=
Content-Type: application/pgp-signature

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (GNU/Linux)

iQEcBAEBAgAGBQJSVImvAAoJEK9We5d3533cy7kIAL0zrhd8zTnUwDz91Q953Iko
okArOHArsZPohyuBAfeRGzUIG6r4UQSPYWCcvEzUJjNoE3HA7rrP344PQyJa7/0d
yMH7uGMC+XAyb8J7eJOr28vD/66GOITbcwDqXmhYx25arV4PPK+VhOBebZo8hzyD
OuurIvtERo/9D/CKQb//4snIodOkO8aWWUXDjI4yClbG8Zq3pmulm2gIYlaVqB/T
+lNlPlSKsmSnd8+fllJfS1JQEvigOxU+VutxhZKJ7NHe8Grb5aw+3rb5DVXLp0+A
FyUnlz0oj2PUL4ixolkN/Pz/qmHoG33IcB7tkm36zSBCAgTwCxPBWJWNYJizfJc=
=ur3B
-----END PGP SIGNATURE-----
--=-=-=--

From yallop@gmail.com  Mon Oct 14 14:29:27 2013
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id A55273C33A
 for <ctypes@lists.ocaml.org>; Mon, 14 Oct 2013 14:29:27 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1531636 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.49 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wg0-f49.google.com ([74.125.82.49]:34093)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1VViV1-00025m-01 (Exim 4.80_167-5a66dd3) for
 ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Mon, 14 Oct 2013 14:47:55 +0100
Received: by mail-wg0-f49.google.com with SMTP id x12so4670904wgg.16
 for <ctypes@lists.ocaml.org>; Mon, 14 Oct 2013 06:47:54 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :content-type; bh=Z/P6TuMYo+K2Wa5jMWxpCFpWqdV9PpuK1WB4bEt5v0U=;
 b=uaXp8yLzgo1kvf0YxMhVeTtTesZMSvYhD7UYRhdIgec+a/NB5CBZuY48QDKSZR2Oe/
 5d7mmeTUdqzoLEFA2B5XeINSOnb5IK5HF0hqU8RdrsdXIecAOo3Hz7KbcnsXHBEzkWHp
 jxkWqkRPbF4z8e0hChOCALpfHJt98VBZ0VB068qI5ZILornItxOzJu2kPL9wB8SHRpMJ
 B2yyINhPajzCZesjHvQQLASFjWy3wHKQvkhgkM6aLvgCrhewg2qbQgUVgDgu1oYcxbV3
 sT4I0SPBTcyRBbpxEFbufH4rqCiPEmTopT5btO1u7M38YBrdQPfj5DCGMPMMHl90+aeK
 fSjg==
MIME-Version: 1.0
X-Received: by 10.194.201.202 with SMTP id kc10mr29581998wjc.1.1381758474562; 
 Mon, 14 Oct 2013 06:47:54 -0700 (PDT)
Received: by 10.216.185.65 with HTTP; Mon, 14 Oct 2013 06:47:54 -0700 (PDT)
In-Reply-To: <20131011160736.42106.14489@andromeda1.ze.tum.de>
References: <20130924154344.65387.32437@magellan1.ze.tum.de>
 <CAAxsn=H_JJV3yX3LruMddAcDKX_nmv-dUgb8B9ekXDgPMGx1Xg@mail.gmail.com>
 <20131011144626.42098.72945@andromeda1.ze.tum.de>
 <CAAxsn=FkWOgoSoeJWVidSj9G2k00tX9rfFaz_MW2AoLuo7N_9w@mail.gmail.com>
 <20131011160736.42106.14489@andromeda1.ze.tum.de>
Date: Mon, 14 Oct 2013 14:47:54 +0100
Message-ID: <CAAxsn=HrpXqwz-K=Xv14yj7BNc98xk076ysguXXMXTfEzOdnNw@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: ctypes@lists.ocaml.org
Content-Type: text/plain; charset=UTF-8
Subject: Re: [ocaml-ctypes] Variadic Functions
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 14 Oct 2013 13:29:27 -0000

Hi Florian,

There are a few ways to approach this.  I think my preferred approach
is to use string_opt, which maps OCaml's None to a null pointer.  You
can then create null-terminated arrays pretty easily:

   # Array.of_list string_opt [Some "foo"; Some "bar"; None];;
   - : string option Array.t = { 0x27d8fc0, 0x27d9020, (nil) }

(There's a small pitfall with the string and string_opt types that you
may already be aware of: ctypes always passes a copy of OCaml strings
to C, so if the C code is writing to the strings then you should use
'char ptr' or some similar type instead.)

A slightly more raw approach, if you have an existing array of the
appropriate length, is to simply assign to the last element:

   # a;;
   - : int ptr Array.t = { 0x27d9f30, 0x27d9090 }
   # a.(Array.length a - 1) <- from_voidp int null;;
   - : unit = ()
   # a;;
   - : int ptr Array.t = { 0x27d9f30, (nil) }

Hope this helps,

Jeremy.

On 11 October 2013 17:07, Florian Pichlmeier
<florian.pichlmeier@mytum.de> wrote:
> Hi,
>
> thanks a lot for that quick response, it worked like a charm.
> The only problem now is that the other receive function expects
> the message to be null terminated. How do i get that with ctypes,
> that the last element in the array is NULL?
>
> Thanks again for your work,
>
> Florian
>
> Jeremy Yallop <yallop@gmail.com> wrote:
>
>
>> Hi Florian,
>>
>> The problem is the array argument; things should work better if you
>> change the binding to something like this:
>>
>>   let stub = foreign "zstr_sendx_array"
>>       ptr void @-> ptr string @-> size_t @-> returning int)
>>
>> You'll be able to call stub by passing 'Array.start c_array'.
>>
>> Kind regards,
>>
>> Jeremy.
>>
>> On 11 October 2013 15:46, Florian Pichlmeier
>> <florian.pichlmeier@mytum.de> wrote:
>>
>> > Hello Jeremy,
>> >
>> > i tried the approach with a more wrappable function.
>> >
>> > int
>> > zstr_sendx_array (void *socket, char **string, size_t nmsg)
>> > {
>> >     zmsg_t *msg = zmsg_new ();
>> >     for (size_t i=0;i<nmsg;i++) {
>> >         zmsg_addstr (msg, *string);
>> >         (*string)++;
>> >     }
>> >     return zmsg_send (&msg, socket);
>> > }
>> >
>> > and call it that
>> >
>> > let sendx socket msg_list =
>> >   let c_array : string Ctypes.array = Array.of_list string msg_list
>> >   in
>> >   let stub = foreign "zstr_sendx_array"
>> >     ((ptr void) @-> (array (List.length msg_list) string ) @-> size_t @-> returning int)
>> >   in
>> >   match stub socket c_array (Size_t.of_int(List.length msg_list))with
>> >   | _ -> ()
>> >
>> > But i get this error
>> >
>> > Fatal error: exception Static.Unsupported("Unsupported argument type")
>> >
>> > Do you have an idea what my mistake is?
>> >
>> > Thank you.
>> >
>> > Florian
>> >
>> > Jeremy Yallop <yallop@gmail.com> wrote:
>> >
>> >
>> >
>> > > On 24 September 2013 12:43, Florian Pichlmeier
>> > > <florian.pichlmeier@mytum.de> wrote:
>> > >
>> > >
>> > > > Some of these functions are variadic functions, like this one
>> > > >
>> > > > //  Create new poller
>> > > > CZMQ_EXPORT zpoller_t *
>> > > >     zpoller_new (void *reader, ...);
>> > > >
>> > > > Is there a way with ctypes to emulate this signature?
>> > > >
>> > > >
>> > > >
>> > > >
>> > >
>> > > The short answer, unfortunately, is "no".  This type of function is
>> > > rather tricky to wrap.  This isn't due to a limitation of ctypes; it's
>> > > because there isn't a way to write wrappers for variadic functions in
>> > > standard C [0, 1]
>> > >
>> > > Ideally the C library interface should provide a more wrappable
>> > > interface in addition to the variadic function, e.g.
>> > >
>> > >     zpoller_t *zpoller_new_vec(void **readers);    /* argument is a
>> > > null-terminated array of pointers */
>> > >
>> > > or
>> > >
>> > >     zpoller_t *zpoller_new_vec(void **readers, size_t nreaders);
>> > >
>> > > It might be worth sending a pull request to the czmq maintainers to
>> > > modify the interface.
>> > >
>> > > If you're not too concerned by portability you can use the fact that
>> > > some C implementations (e.g. GCC on Linux) have the same calling
>> > > convention for variadic and regular functions.  Here ctypes offers an
>> > > advantage over handwritten bindings: since C types are exposed as
>> > > OCaml values you can construct a signature dynamically according to
>> > > the number of arguments you want to pass to  the function.  For
>> > > example, you might call the function using any of the signatures
>> > >
>> > >     ptr void @-> returning (ptr (zpoller_t))
>> > >
>> > >     ptr void @-> ptr void @-> returning (ptr (zpoller_t))
>> > >
>> > >     ptr void @-> ptr void @-> ptr void @-> returning (ptr (zpoller_t))
>> > >
>> > > and so on.  In fact, it ought to be possible (but probably not easy)
>> > > to write a function which accepts a list of pointers, constructs a
>> > > suitable signature for zpoller_new and calls the function.
>> > >
>> > > Jeremy.
>> > >
>> > > [0] http://c-faq.com/varargs/handoff.html
>> > > [1] http://c-faq.com/varargs/invvarargs.html
>> > >
>> > >
>> > >
>> > >
>> > >
>> >
>>
>>

From daniel.buenzli@erratique.ch  Wed Dec  4 11:00:11 2013
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 48FD93C1D9
 for <ctypes@lists.ocaml.org>; Wed,  4 Dec 2013 11:00:11 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1547315
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:51607
 helo=smtp.webfaction.com)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtp id 1VoAWF-00079L-Fo (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Wed, 04 Dec 2013 11:21:28 +0000
Received: from [172.20.10.2] (42-226.197-178.cust.bluewin.ch [178.197.226.42])
 by smtp.webfaction.com (Postfix) with ESMTP id AC463223E95E
 for <ctypes@lists.ocaml.org>; Wed,  4 Dec 2013 11:21:26 +0000 (UTC)
Date: Wed, 4 Dec 2013 12:21:23 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: ctypes@lists.ocaml.org
Message-ID: <A71CECB09FED44B1A83A217E602DAD25@erratique.ch>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Subject: [ocaml-ctypes] Spinning process on osx
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 04 Dec 2013 11:00:11 -0000

Hello, 

I'm getting crazy with a kind of heisen bug that *seems* to occur only with OCaml 4.01.0 but not with 4.00.1.

I have ctypes 0.2.2, libffi 3.0.13, xcode 5 (using clang) on osx 10.8.5.

The bug is quite reproducible in different context with different (UI related) functions, it seems to be sensitive to the length of the function/program. In all the contexts where the bug occurs it eventually spins in obj_addExceptionHandler (see below), unable to get out of that it I try to step the program. 

(gdb) bt
#0 0x00007fff85f18a81 in memmove$VARIANT$sse42 ()
#1 0x00007fff90fd2abc in libunwind::CFI_Parser<libunwind::LocalAddressSpace>::parseInstructions ()
#2 0x00007fff90fd2a5e in libunwind::CFI_Parser<libunwind::LocalAddressSpace>::parseFDEInstructions ()
#3 0x00007fff90fd28db in libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::getInfoFromDwarfSection ()
#4 0x00007fff90fd0ebd in libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::setInfoBasedOnIPRegister ()
#5 0x00007fff90fd1555 in libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::step ()
#6 0x00007fff8ce8c7af in objc_addExceptionHandler ()
#7 0x00007fff87055c6c in _CFDoExceptionOperation ()
#8 0x00007fff8642724c in _NSAppKitLock ()
#9 0x00007fff863e47f7 in NSAccessibilityPostNotificationWithUserInfo ()
#10 0x00007fff865058db in -[NSApplication sendEvent:] ()
#11 0x00000001001f3b84 in Cocoa_PumpEvents ()
#12 0x000000010019ba3e in SDL_PumpEvents ()
#13 0x0000000100172354 in ffi_call_unix64 ()


This is with a program that has the following source, it gets stuck in the call to Sdl.pump_events (). If I try to comment out any part (and dependents) of this program the bug disappears. Especially, if I comment out one of the `video +` in main(), the bug disappears (`+` is `Unsigned.UInt32.logor`). So I suspect some kind of stack alignement issue. 

let test () = 
  match Sdl.create_window "Test" ~w:640 ~h:480 Sdl.Window.resizable with  
  | `Error -> ()
  | `Ok w ->
      Sdl.pump_events ();
      let e = Sdl.Event.create () in
      let s = Sdl.get_event_state Sdl.Event.window_event in
      Printf.printf "Event state: %s" begin match s with 
      | s when s = Sdl.Event.disable -> "disable" 
      | s when s = Sdl.Event.enable -> "enable" 
      | _ -> assert false
      end;
      ignore (Sdl.wait_event_timeout e 1);
      Sdl.destroy_window w;
      ()

let main () = match Sdl.init Sdl.Init.(video + video + events) with 
| `Error -> exit 1
| `Ok -> test (); exit 0

let () = main ()


That's just a first probe if anybody has something obvious in mind. I will provide more info and a fully reproducible test case. But for now I think I'll stick with ocaml 4.00.1 (hoping it's not there but just hiding more deeply) as I need to get some work done. 

Best,

Daniel


P.S. Also I do get the following warnings when I install ctypes

clang: warning: argument unused during compilation: '-fno-defer-pop'
../../../src/ctypes/type_info_stubs.c:134:48: warning: format specifies type 'short' but the argument has type 'int' [-Wformat]
case Short: snprintf(buf, sizeof buf, "%hd", Int_val(v)); break;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~
%d
/Users/dbuenzli/.opam/4.01.0/lib/ocaml/caml/mlvalues.h:76:20: note: expanded from macro 'Int_val'
#define Int_val(x) ((int) Long_val(x))
^
/usr/include/secure/_stdio.h:56:62: note: expanded from macro 'snprintf'
__builtin___snprintf_chk (str, len, 0, __darwin_obsz(str), __VA_ARGS__)
^
../../../src/ctypes/type_info_stubs.c:143:53: warning: format specifies type 'char' but the argument has type 'int' [-Wformat]
case Int8_t: snprintf(buf, sizeof buf, "%" PRId8, Int_val(v)); break;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~
/Users/dbuenzli/.opam/4.01.0/lib/ocaml/caml/mlvalues.h:76:20: note: expanded from macro 'Int_val'
#define Int_val(x) ((int) Long_val(x))
^
/usr/include/secure/_stdio.h:56:62: note: expanded from macro 'snprintf'
__builtin___snprintf_chk (str, len, 0, __darwin_obsz(str), __VA_ARGS__)
^
../../../src/ctypes/type_info_stubs.c:144:55: warning: format specifies type 'short' but the argument has type 'int' [-Wformat]
case Int16_t: snprintf(buf, sizeof buf, "%" PRId16, Int_val(v)); break;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~
/Users/dbuenzli/.opam/4.01.0/lib/ocaml/caml/mlvalues.h:76:20: note: expanded from macro 'Int_val'
#define Int_val(x) ((int) Long_val(x))
^
/usr/include/secure/_stdio.h:56:62: note: expanded from macro 'snprintf'
__builtin___snprintf_chk (str, len, 0, __darwin_obsz(str), __VA_ARGS__)
^
../../../src/ctypes/type_info_stubs.c:146:55: warning: format specifies type 'long long' but the argument has type 'int64' (aka 'long') [-Wformat]
case Int64_t: snprintf(buf, sizeof buf, "%" PRId64, Int64_val(v)); break;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~
/Users/dbuenzli/.opam/4.01.0/lib/ocaml/caml/mlvalues.h:268:22: note: expanded from macro 'Int64_val'
#define Int64_val(v) (*((int64 *) Data_custom_val(v)))
^
/usr/include/secure/_stdio.h:56:62: note: expanded from macro 'snprintf'
__builtin___snprintf_chk (str, len, 0, __darwin_obsz(str), __VA_ARGS__)


From daniel.buenzli@erratique.ch  Wed Dec  4 17:51:52 2013
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 65C7C3C1D3
 for <ctypes@lists.ocaml.org>; Wed,  4 Dec 2013 17:51:52 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1547315
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:55921
 helo=smtp.webfaction.com)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1VoGwf-0004nj-2X (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Wed, 04 Dec 2013 18:13:10 +0000
Received: from [172.20.10.2] (119-227.197-178.cust.bluewin.ch
 [178.197.227.119])
 by smtp.webfaction.com (Postfix) with ESMTP id 8152021F7B48
 for <ctypes@lists.ocaml.org>; Wed,  4 Dec 2013 18:13:08 +0000 (UTC)
Date: Wed, 4 Dec 2013 19:13:06 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: ctypes@lists.ocaml.org
Message-ID: <640E61C2E0B047FB8767E4449732F174@erratique.ch>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Subject: [ocaml-ctypes] Bigarray typing problem
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 04 Dec 2013 17:51:52 -0000

Hello,

Suppose I have a C function like this that takes a 256 element array prototyped like this:  

  void write (Uint16 *a); 

I would like to expose it as 

  val write : (int, Bigarray.int16_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t -> unit

tried something along 

  let write = foreign "write" (ptr uint16_t @-> returning void) 
  let write a = write (bigarray_start array1 a) 

But it fails on the second line with (for the parenthised expression) : 

  Error: This expression has type int Ctypes.ptr
  but an expression was expected of type Unsigned.uint16 Ctypes.ptr


It seems to me that bigarray_start has the wrong type, it should map to a pointer of the *storage* type of the bigarray, not the type used to read/write the bigarray. 

Besides I can't see how you can do that without introducing phantom witness values to make the translation from bigarray storage types to ctypes storage types (i.e. in that case from Bigarray.int16_unsigned_elt to uint16_t). 

I could just coerce the damn thing, but something feels wrong here. Am I missing something ? 

Thanks,

Daniel



From yallop@gmail.com  Thu Dec  5 10:47:18 2013
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id AB7933C1DF
 for <ctypes@lists.ocaml.org>; Thu,  5 Dec 2013 10:47:18 +0000 (GMT)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1547729 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.172 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-we0-f172.google.com ([74.125.82.172]:57066)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1VoWnO-0005i8-2F (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Thu, 05 Dec 2013 11:08:39 +0000
Received: by mail-we0-f172.google.com with SMTP id w62so10872869wes.3
 for <ctypes@lists.ocaml.org>; Thu, 05 Dec 2013 03:08:38 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type:content-transfer-encoding;
 bh=rkCrh//G1lsRaTqS9UwRkoSzZ5+ewp/2qpYnhAReXN4=;
 b=zhh+zgNnuGn4Tf1ZfzCMiGRAMXHIBdGmE/K0cwLD79zYzLGLtzcyExnZPRoRtQLr8Q
 TyH9Le9TnyAyb483INddqW5ilec53hTtB3U812HIA8Oa98Bm3ImgRyP6sOAZXtZENxwS
 QDRthSwmG6Hx3xT29iEskAF3gNeENn6ei4nMXjk5th+DsClUK8loxuqzmf/EY3xnrZ8P
 ppxqqaGvJALs+gTcvOjZYejkhn+ybW3WlG+oxXDwOH9KjoQCTbQ4YM3D+c3ZDToVqfw5
 6mBmELUfL4Y6d4EwFSyIcTffe1aHN3DN7n216C/ocmG1b4TdlzIc0vpy2kWuMOymeNS3
 VHOA==
MIME-Version: 1.0
X-Received: by 10.194.170.133 with SMTP id am5mr16166620wjc.42.1386241718369; 
 Thu, 05 Dec 2013 03:08:38 -0800 (PST)
Received: by 10.216.185.65 with HTTP; Thu, 5 Dec 2013 03:08:38 -0800 (PST)
In-Reply-To: <640E61C2E0B047FB8767E4449732F174@erratique.ch>
References: <640E61C2E0B047FB8767E4449732F174@erratique.ch>
Date: Thu, 5 Dec 2013 11:08:38 +0000
Message-ID: <CAAxsn=FjEKS1rqA902XbxjMp+p89FU9b4xXwrtZuXxX7Zio1Ww@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: =?UTF-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Bigarray typing problem
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 05 Dec 2013 10:47:18 -0000

Hi Daniel,

On 4 December 2013 18:13, Daniel B=C3=BCnzli <daniel.buenzli@erratique.ch> =
wrote:
> Suppose I have a C function like this that takes a 256 element array prot=
otyped like this:
>
>   void write (Uint16 *a);
>
> I would like to expose it as
>
>   val write : (int, Bigarray.int16_unsigned_elt, Bigarray.c_layout) Bigar=
ray.Array1.t -> unit
>
> tried something along
>
>   let write =3D foreign "write" (ptr uint16_t @-> returning void)
>   let write a =3D write (bigarray_start array1 a)
>
> But it fails on the second line with (for the parenthised expression) :
>
>   Error: This expression has type int Ctypes.ptr
>   but an expression was expected of type Unsigned.uint16 Ctypes.ptr

Right: this is by design, although I'm not certain that it's the best
possible design to use.  The intention is to have the ctypes Bigarray
interface imitate the design of Bigarray itself, with a distinction
between storage behaviour and read/write type.  For instance, using
the type in question,

   ((int, Bigarray.int16_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t=
)

the Bigarray modules stores the elements as 16-bit integers, but
exposes them (through indexing functions etc.) as ints.  Ctypes does
the same: when you ask for a pointer into the bigarray you get back a
pointer that gives you an int when you dereference it, but behaves as
a pointer to 16-bit integers for purposes of arithmetic etc.:

    # let ba =3D Array1.create int16_unsigned c_layout 5;;
    val ba : (int, int16_unsigned_elt, c_layout) Array1.t =3D <abstr>
    # let p =3D bigarray_start array1 ba;;
    val p : int ptr =3D (int16_t*) 0xe5cb40

The type of p indicates that dereferencing gives you an int, but the
way the value of p is printed indicates that it's treated as a pointer
into an array of 16-bit integers.  (There's a bug relating to
signedness -- the value should be "(uint16_t*) 0xe5cb40", but that's a
separate issue.  I'll note it on the issue tracker.).  You can see
that pointer arithmetic (for example) behaves correctly by accessing
bigarray elements through both the array and the pointer:

   # for i =3D 0 to 4 do ba.{i} <- i done;;
   - : unit =3D ()
   # for i =3D 0 to 4 do Printf.printf "%d " !@(p +@ i) done;;
   0 1 2 3 4 - : unit =3D ()

Similarly,

   # sizeof (reference_type p);;
   - : int =3D 2

> It seems to me that bigarray_start has the wrong type, it should map to a=
 pointer of the *storage* type of the bigarray, not the type used to read/w=
rite the bigarray.

That would be a reasonable approach as well.  I suppose it depends on
whether you want a bigarray-like interface or simply an interface that
accesses bigarray-managed memory.

I've tried changing the interface so that bigarray_start etc. return
pointers to storage types rather than to read/write types.  You can
find it on the bigarray-kinds branch on my repository:

   https://github.com/yallop/ocaml-ctypes/commit/0d15800310

(It appears to work, but it's only lightly tested and not polished.
It may be possible to simplify the types.)

The main changes are:

   * there's now a family of bigarray_kind values -- ba_float32,
ba_float64, etc. -- that correspond to the kind values in the Bigarray
module.  These should be used in place of Bigarray.kind values in the
ctypes Bigarray interface.

   * the type of bigarray_class now includes an extra field for the
ctypes equivalent of the storage type

   * bigarray_start and array_of_bigarray now take an additional
argument of type bigarray_kind to indicate the storage type of the
bigarray

With these changes in place you have the behaviour you were expecting:

   # let write =3D foreign "write" (ptr uint16_t @-> returning void);;
   val write : Unsigned.uint16 ptr -> unit =3D <fun>
   # let write a =3D write (bigarray_start array1 ba_int16_unsigned a);;
   val write : (int, int16_unsigned_elt, c_layout) Array1.t -> unit =3D <fu=
n>

As I said, I'm not sure which interface is preferable overall.
Perhaps it's worth providing both.

Jeremy.

From daniel.buenzli@erratique.ch  Thu Dec  5 13:52:16 2013
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 598813C1D9
 for <ctypes@lists.ocaml.org>; Thu,  5 Dec 2013 13:52:16 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1547729
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:39935
 helo=smtp.webfaction.com)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtp id 1VoZgP-0003JA-g7 (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Thu, 05 Dec 2013 14:13:37 +0000
Received: from [172.20.10.2] (63-228.197-178.cust.bluewin.ch [178.197.228.63])
 by smtp.webfaction.com (Postfix) with ESMTP id A4AF821E58F6;
 Thu,  5 Dec 2013 14:13:35 +0000 (UTC)
Date: Thu, 5 Dec 2013 15:13:33 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Jeremy Yallop <yallop@gmail.com>
Message-ID: <19B60FCEA4AA40D1ACD2E7EA052BD36F@erratique.ch>
In-Reply-To: <CAAxsn=FjEKS1rqA902XbxjMp+p89FU9b4xXwrtZuXxX7Zio1Ww@mail.gmail.com>
References: <640E61C2E0B047FB8767E4449732F174@erratique.ch>
 <CAAxsn=FjEKS1rqA902XbxjMp+p89FU9b4xXwrtZuXxX7Zio1Ww@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Bigarray typing problem
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 05 Dec 2013 13:52:16 -0000


> the Bigarray modules stores the elements as 16-bit integers, but
> exposes them (through indexing functions etc.) as ints. Ctypes does
> the same: when you ask for a pointer into the bigarray you get back a
> pointer that gives you an int when you dereference it, but behaves as
> a pointer to 16-bit integers for purposes of arithmetic etc.:

Ok it makes sense. As you said maybe it's worth providing both, but I think I'll keep making coercions for now. I expect my following weeks to be ctypes heavy, maybe things will become clearer to me and we can have a more thorough look at that with real examples in hand. 
 
That being said maybe what feels odd in that particular case is that ctypes has:

  val uint16_t : uint16 typ

and not 

  val uint16_t : int typ

i.e. it "disagrees" with bigarrays. In practice I'd prefer the latter for unsigned types smaller than 31 bits as it avoids having to use the Unsigned.UIntX.of_int functions if you try to avoid leaking ctypes types in your interface. My intuition was that you did it that way so that you can be more precise typewise (but it then asks the question why we have `val int16_t : int typ` and not some `val int16_t : int16 typ` that you have to convert aswell). 

Best,

Daniel



From yallop@gmail.com  Sat Dec  7 22:12:58 2013
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 959DF3C16D
 for <ctypes@lists.ocaml.org>; Sat,  7 Dec 2013 22:12:58 +0000 (GMT)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1548435 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.45 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wg0-f45.google.com ([74.125.82.45]:56865)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1VpQSB-0000wj-gR (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Sat, 07 Dec 2013 22:34:27 +0000
Received: by mail-wg0-f45.google.com with SMTP id y10so2014804wgg.0
 for <ctypes@lists.ocaml.org>; Sat, 07 Dec 2013 14:34:26 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type:content-transfer-encoding;
 bh=SHGJTNjCSEJuJ0GCF9mibS/Ya/wzbl59+N/oNYEQp4A=;
 b=z559ez1GCg09Erl6WEU92gCutr1qJAyd1qL5ok806CT+SwGOB5QMtoYvV0IKbx5sPY
 VRdRlMm+Ft7wpLzBmesCZ9PIWIb4aDwB8ONz1NSdS6hvh99+rzMgtxw8DOZQuxuHZM9i
 Pa7np8Lv5+S52FnJsoATcc617E+/kmxF7n5PU/dXc8RMg7saxC8pNyYAlEkByabr4o1p
 P+S5cOM8MvJsrgaKE4w7r5TRjl3lZTiCzQ6M3CcWLFKFysykO54WENg/KRBG5NnLaG4B
 RURU6wtdcBii2zlGust0WM4EdbwdsiCmJ7yyM3auZdNTurDMZpvt0zQc5wkVd/nyJbjQ
 fMpg==
MIME-Version: 1.0
X-Received: by 10.194.48.115 with SMTP id k19mr28649608wjn.47.1386455666640;
 Sat, 07 Dec 2013 14:34:26 -0800 (PST)
Received: by 10.216.33.4 with HTTP; Sat, 7 Dec 2013 14:34:26 -0800 (PST)
In-Reply-To: <19B60FCEA4AA40D1ACD2E7EA052BD36F@erratique.ch>
References: <640E61C2E0B047FB8767E4449732F174@erratique.ch>
 <CAAxsn=FjEKS1rqA902XbxjMp+p89FU9b4xXwrtZuXxX7Zio1Ww@mail.gmail.com>
 <19B60FCEA4AA40D1ACD2E7EA052BD36F@erratique.ch>
Date: Sat, 7 Dec 2013 22:34:26 +0000
Message-ID: <CAAxsn=FPEY3+f7hxsx9=gAqDCkqAwgLGj08V18wcDqbgAbH_BQ@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: =?UTF-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Bigarray typing problem
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sat, 07 Dec 2013 22:12:58 -0000

On 5 December 2013 14:13, Daniel B=C3=BCnzli <daniel.buenzli@erratique.ch> =
wrote:
> That being said maybe what feels odd in that particular case is that ctyp=
es has:
>
>   val uint16_t : uint16 typ
>
> and not
>
>   val uint16_t : int typ
>
> i.e. it "disagrees" with bigarrays.

Yes, it's a little unfortunate.  The reason is that ctypes aims to
support platforms where int is 16 bits (which is permitted by C)
whereas bigarray is written under the assumption that int is at least
32 bits.

From yallop@gmail.com  Sat Dec  7 22:26:53 2013
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 88D5E3C16D
 for <ctypes@lists.ocaml.org>; Sat,  7 Dec 2013 22:26:53 +0000 (GMT)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1548435 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.177 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-we0-f177.google.com ([74.125.82.177]:33920)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1VpQfd-0004Og-j3 (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Sat, 07 Dec 2013 22:48:22 +0000
Received: by mail-we0-f177.google.com with SMTP id u56so2077336wes.36
 for <ctypes@lists.ocaml.org>; Sat, 07 Dec 2013 14:48:21 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type:content-transfer-encoding;
 bh=v5mEW2hwluSvEvSKKQ7eGf1UFaVHMkpR87JNeMlPFpM=;
 b=eWwDLyNZa3px1iGaPYsvtPtwvcJax5n1kN85+jq6t9lfUUyX7N9fTdTxR97vdmagYs
 BXUSsGaDSIj2+wm+aOAXivTaD0dB/wiIpvMBHxLfvjZXBxDyIWLJfqlwPiO4AglfVt4K
 0gR+T50vFT0fIkbnY5WQkhZx0PFzmO4rTHU2J5j7IVLtiUyuwxlC0JaJ09y/JptLACLs
 AZLiQ6pMlj1Fk6pW5iu+Eed5AfeQw1Cy1gcXfEvXUIKN4tdYRR7IYXB4uOKTkDRcZCYu
 ofvAoewGLpYRQPjiZ5ZNO0Cu7cRcRxpWwpJ4xUl/uFoZOI1to0iNPSZGqTSRDzPUgOjf
 V7JA==
MIME-Version: 1.0
X-Received: by 10.194.122.131 with SMTP id ls3mr9348322wjb.0.1386456501558;
 Sat, 07 Dec 2013 14:48:21 -0800 (PST)
Received: by 10.216.33.4 with HTTP; Sat, 7 Dec 2013 14:48:21 -0800 (PST)
In-Reply-To: <A71CECB09FED44B1A83A217E602DAD25@erratique.ch>
References: <A71CECB09FED44B1A83A217E602DAD25@erratique.ch>
Date: Sat, 7 Dec 2013 22:48:21 +0000
Message-ID: <CAAxsn=GoMSn2hEydg_ND46+1h-H3uYSUieFeKNZwvw9T=YzRGw@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: =?UTF-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Spinning process on osx
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sat, 07 Dec 2013 22:26:53 -0000

On 4 December 2013 11:21, Daniel B=C3=BCnzli <daniel.buenzli@erratique.ch> =
wrote:
> I'm getting crazy with a kind of heisen bug that *seems* to occur only wi=
th OCaml 4.01.0 but not with 4.00.1.

If the bug can be triggered by a script it'd be interesting to see the
results of running the script under 'git bisect' on the OCaml compiler
repository.

> P.S. Also I do get the following warnings when I install ctypes

Thanks.  I've added a note to the issue tracker:
https://github.com/ocamllabs/ocaml-ctypes/issues/108

From daniel.buenzli@erratique.ch  Sat Dec  7 23:16:06 2013
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 80D803C16D
 for <ctypes@lists.ocaml.org>; Sat,  7 Dec 2013 23:16:06 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1548435
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:57002
 helo=smtp.webfaction.com)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtp id 1VpRRH-0003ux-Da (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Sat, 07 Dec 2013 23:37:35 +0000
Received: from [172.20.10.2] (52-237.197-178.cust.bluewin.ch [178.197.237.52])
 by smtp.webfaction.com (Postfix) with ESMTP id 747862090C88;
 Sat,  7 Dec 2013 23:37:33 +0000 (UTC)
Date: Sun, 8 Dec 2013 00:37:29 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Jeremy Yallop <yallop@gmail.com>
Message-ID: <77A6ADA6A1CE4CCE874F266EAA9324DF@erratique.ch>
In-Reply-To: <CAAxsn=GoMSn2hEydg_ND46+1h-H3uYSUieFeKNZwvw9T=YzRGw@mail.gmail.com>
References: <A71CECB09FED44B1A83A217E602DAD25@erratique.ch>
 <CAAxsn=GoMSn2hEydg_ND46+1h-H3uYSUieFeKNZwvw9T=YzRGw@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Spinning process on osx
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sat, 07 Dec 2013 23:16:06 -0000

Le samedi, 7 d=C3=A9cembre 2013 =C3=A0 23:48, Jeremy Yallop a =C3=A9crit =
:
> If the bug can be triggered by a script it'd be interesting to see the
> results of running the script under 'git bisect' on the OCaml compiler
> repository.

Will give you that during next week when the binding I'm working on will =
be repoified. =20

Best,

Daniel



From daniel.buenzli@erratique.ch  Thu Dec 12 17:58:39 2013
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 998E23C0E5
 for <ctypes@lists.ocaml.org>; Thu, 12 Dec 2013 17:58:39 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1550073
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:37728
 helo=smtp.webfaction.com)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtp id 1VrAs4-0004pN-E5 (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Thu, 12 Dec 2013 18:20:24 +0000
Received: from [172.20.10.2] (3-237.197-178.cust.bluewin.ch [178.197.237.3])
 by smtp.webfaction.com (Postfix) with ESMTP id 331C022414D8
 for <ctypes@lists.ocaml.org>; Thu, 12 Dec 2013 18:20:22 +0000 (UTC)
Date: Thu, 12 Dec 2013 19:20:19 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: ctypes@lists.ocaml.org
Message-ID: <727FB4E96BBF452885966D6FB6A6A350@erratique.ch>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Subject: [ocaml-ctypes] Stack allocated structs ?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 12 Dec 2013 17:58:39 -0000

Hello, 

Is returning stack allocated structs unsupported ? When I try to do this I get this exception:

Fatal error: exception Static.Unsupported("libffi does not support passing arrays")

(the struct has a single field with an array 16 uint8_t))

Best,

Daniel 



From yallop@gmail.com  Thu Dec 12 18:22:35 2013
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 83FBC3C0E5
 for <ctypes@lists.ocaml.org>; Thu, 12 Dec 2013 18:22:35 +0000 (GMT)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1550073 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.47 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wg0-f47.google.com ([74.125.82.47]:59753)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1VrBFB-0000GF-0l (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Thu, 12 Dec 2013 18:44:20 +0000
Received: by mail-wg0-f47.google.com with SMTP id n12so845556wgh.26
 for <ctypes@lists.ocaml.org>; Thu, 12 Dec 2013 10:44:16 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type:content-transfer-encoding;
 bh=cCANODmRjbukIrQcfvwn4q5mX0KU2j29o5rUB+V/KDo=;
 b=HwkJOec1wjb34+z8EuPeMoG1NVV4ZalNgAXQOET2G2kjrQjO4gvWMdg3xFbI1Lux6+
 4dHQkRKZK1HxMx6MjMl6x9Pz9FSfmTymlNqtsk9fUgwS1v2UUcdAx+sl16XK3JCFJlNR
 fBsYNL4sHPGGR6O0P1ogbLP+KqW4vsrNQW5x4NblYTjNfGz0TlOKwFg+bsxBo3UQp2RX
 Eips9HjuG2ZVoMGDnnXoRFrs4+p0yXez0RORJDonlYW05YnWdHeEUdCWVw1/KFHIdaoq
 U0jSOsjLHZfOL1wnFXMdA9zsBjmJiDSXVCyccbIrbD4EsEmDmuPuxvRKAgqkia0JGcpp
 Paiw==
MIME-Version: 1.0
X-Received: by 10.194.89.138 with SMTP id bo10mr570511wjb.91.1386873856762;
 Thu, 12 Dec 2013 10:44:16 -0800 (PST)
Received: by 10.216.33.4 with HTTP; Thu, 12 Dec 2013 10:44:16 -0800 (PST)
In-Reply-To: <727FB4E96BBF452885966D6FB6A6A350@erratique.ch>
References: <727FB4E96BBF452885966D6FB6A6A350@erratique.ch>
Date: Thu, 12 Dec 2013 18:44:16 +0000
Message-ID: <CAAxsn=Ef24RPQnSs2WJMH0M=Oarn-LHGSbM5L41tvdsvvvcFkg@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: =?UTF-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Stack allocated structs ?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 12 Dec 2013 18:22:35 -0000

On 12 December 2013 18:20, Daniel B=C3=BCnzli <daniel.buenzli@erratique.ch>=
 wrote:
> Is returning stack allocated structs unsupported ? When I try to do this =
I get this exception:
>
> Fatal error: exception Static.Unsupported("libffi does not support passin=
g arrays")
>
> (the struct has a single field with an array 16 uint8_t))

There's some support for returning stack-allocated structs, but (as
you've discovered) that doesn't include array members for the moment.
This is another thing that'll certainly improve once we have stub
generation.

It might be possible to add the missing support before that, though,
if it's safe to assume that a struct with a member of type T[n] is
passed in the same way as a struct with n members of type T.  I've
added an issue as a reminder to investigate:

https://github.com/ocamllabs/ocaml-ctypes/issues/113

From daniel.buenzli@erratique.ch  Thu Dec 12 19:08:41 2013
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 492293C0E5
 for <ctypes@lists.ocaml.org>; Thu, 12 Dec 2013 19:08:41 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1550073
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:54878
 helo=smtp.webfaction.com)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtp id 1VrBxq-0001Rh-7D (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Thu, 12 Dec 2013 19:30:26 +0000
Received: from [172.20.10.2] (3-237.197-178.cust.bluewin.ch [178.197.237.3])
 by smtp.webfaction.com (Postfix) with ESMTP id B6D3466EB5CB;
 Thu, 12 Dec 2013 19:30:24 +0000 (UTC)
Date: Thu, 12 Dec 2013 20:30:20 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Jeremy Yallop <yallop@gmail.com>
Message-ID: <DBA50C9B48B645B98557164A83C91A10@erratique.ch>
In-Reply-To: <CAAxsn=Ef24RPQnSs2WJMH0M=Oarn-LHGSbM5L41tvdsvvvcFkg@mail.gmail.com>
References: <727FB4E96BBF452885966D6FB6A6A350@erratique.ch>
 <CAAxsn=Ef24RPQnSs2WJMH0M=Oarn-LHGSbM5L41tvdsvvvcFkg@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Stack allocated structs ?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 12 Dec 2013 19:08:41 -0000

Le jeudi, 12 d=C3=A9cembre 2013 =C3=A0 19:44, Jeremy Yallop a =C3=A9crit =
:
> It might be possible to add the missing support before that, though,
> if it's safe to assume that a struct with a member of type T=5Bn=5D is
> passed in the same way as a struct with n members of type T. =20

Thanks for the tip, didn't think far enough (tried to use the array direc=
tly but that didn't work either). Note that it's a very marginal case in =
the api in I'm binding to. =20

Best,

Daniel




From daniel.buenzli@erratique.ch  Sun Dec 15 23:29:26 2013
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 293253CC52
 for <ctypes@lists.ocaml.org>; Sun, 15 Dec 2013 23:29:26 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1550902
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:52600
 helo=smtp.webfaction.com)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1VsLSz-0007Yb-11 (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Sun, 15 Dec 2013 23:51:22 +0000
Received: from [172.20.10.2] (3-237.197-178.cust.bluewin.ch [178.197.237.3])
 by smtp.webfaction.com (Postfix) with ESMTP id CBE0521E0FC2;
 Sun, 15 Dec 2013 23:51:19 +0000 (UTC)
Date: Mon, 16 Dec 2013 00:51:15 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Jeremy Yallop <yallop@gmail.com>
Message-ID: <135488FED1734DFAA716632056B33BE7@erratique.ch>
In-Reply-To: <CAAxsn=FjEKS1rqA902XbxjMp+p89FU9b4xXwrtZuXxX7Zio1Ww@mail.gmail.com>
References: <640E61C2E0B047FB8767E4449732F174@erratique.ch>
 <CAAxsn=FjEKS1rqA902XbxjMp+p89FU9b4xXwrtZuXxX7Zio1Ww@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Bigarray typing problem
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sun, 15 Dec 2013 23:29:26 -0000



Le jeudi, 5 d=C3=A9cembre 2013 =C3=A0 12:08, Jeremy Yallop a =C3=A9crit :=


> I've tried changing the interface so that bigarray=5Fstart etc. return
> pointers to storage types rather than to read/write types. You can
> find it on the bigarray-kinds branch on my repository:
> =20
> https://github.com/yallop/ocaml-ctypes/commit/0d15800310
> =20
> (It appears to work, but it's only lightly tested and not polished.
> It may be possible to simplify the types.)

The patch seems rather big and typed-involved for what it brings. So far =
I was fine simply working with coercions. =20

However I now have another problem which is the other way round. I would =
like to be able to see a chunk of (void *) memory as a Bigarray.Array1.t =
of a given, client-defined, kind (failing if there are size alignment iss=
ue). =20

Here's an example:

  val get=5Fpixels : t -> ('a, 'b) kind -> ('a, 'b, Bigarray.c=5Flayout) =
Bigarray.Array1.t

=46or that I need to use Ctypes.bigarray=5Fof=5Fptr, however to remain ge=
neric I need to coerce my (void *) pointer to the right type according to=
 the bigarray kind. =46or that I wrote this function, just in order to ma=
tch the access types (is that ok or should I match the storage aswell =3F=
):

let access=5Fptr=5Ftyp=5Fof=5Fba=5Fkind : ('a, 'b) Bigarray.kind -> 'a pt=
r typ =3D fun k -> =20
  let open Bigarray in =20
  match Obj.magic k with =20
  =7C k when k =3D float32 =7C=7C k =3D float64 -> Obj.magic (ptr Ctypes.=
double)
  =7C k when k =3D complex32 =7C=7C k =3D complex64 -> Obj.magic (ptr Cty=
pes.complex64)
  =7C k when k =3D int8=5Fsigned =7C=7C k =3D int8=5Funsigned =7C=7C k =3D=
 int16=5Fsigned =7C=7C =20
           k =3D int16=5Funsigned =7C=7C k =3D int -> Obj.magic (ptr Ctyp=
es.camlint)
  =7C k when k =3D int32 -> Obj.magic (ptr Ctypes.int32=5Ft)
  =7C k when k =3D int64 -> Obj.magic (ptr Ctypes.int64=5Ft)
  =7C k when k =3D nativeint -> Obj.magic (ptr Ctypes.nativeint)
  =7C k when k =3D char -> Obj.magic (ptr Ctypes.char)
  =7C k -> assert false =20


This allows me to write: =20

let get=5Fpixels v kind =3D =20
  let () =3D =E2=80=A6 (* check num of pixels is aligned on kind type *) =
=20
  let pixels : unit Ctypes.ptr =3D ... (* get void pointer on pixels *)
  let pixels =3D coerce (ptr void) (access=5Fptr=5Ftype=5Fof=5Fba=5Fkind =
kind) ptr in =20
  bigarray=5Fof=5Fptr array1 size kind pixels
 =20
Is that correct =3F If it is and there's no other way I think it would be=
 nice to have the above function in ctypes. =20

Best,

Daniel

From travis.brady@gmail.com  Tue Dec 17 04:24:16 2013
Return-Path: <travis.brady@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id BD8C73CC3F
 for <ctypes@lists.ocaml.org>; Tue, 17 Dec 2013 04:24:16 +0000 (GMT)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1551131 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.128.47 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (travis.brady[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qe0-f47.google.com ([209.85.128.47]:34102)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1VsmXw-0003RE-18 (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <travis.brady@gmail.com>); Tue, 17 Dec 2013 04:46:16 +0000
Received: by mail-qe0-f47.google.com with SMTP id t7so4612620qeb.6
 for <ctypes@lists.ocaml.org>; Mon, 16 Dec 2013 20:46:15 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:date:message-id:subject:from:to:content-type;
 bh=obKa7aJ9ozFa2kNjBbnEwzG2oAycFn4GRCnUTas8eYk=;
 b=0FmDS7sRaG3V11YKtlIiA4AXi4qldYzvk+XvJP+DlTblDgeb7E9mOaRRl9s2LpYQeS
 cjZOFEZ8nfOA4FRXDazHAwKDNqmRsMx+75Qr9swlyj57/MuKbhK0QLmXvYsAXBTGkAkK
 TGX3fhcDqT7mb8Lr80JKthyXKu+5F2jNo48bRY1EBDq/+smynlEOg/t4u6ytTzO7cIaW
 MxuO6+l+Hunta4B3M4Bq+HzLwf4NbPl8CpzuRDlVImodRy6h8GLjGigO7G7BnuZmY3d1
 j/l/zNmCW4vrkr/OHT+1jNAYOoII8eIUYrzJN2C48Esc7UaCVn1XulNcr2140o09xRTe
 S+UQ==
MIME-Version: 1.0
X-Received: by 10.224.124.195 with SMTP id v3mr3813524qar.55.1387255575212;
 Mon, 16 Dec 2013 20:46:15 -0800 (PST)
Received: by 10.96.100.168 with HTTP; Mon, 16 Dec 2013 20:46:15 -0800 (PST)
Date: Mon, 16 Dec 2013 22:46:15 -0600
Message-ID: <CABHK4nVYayyS00_DAn6t3=0t11Gh2fYfuhcViQ7os7=4fDWZFg@mail.gmail.com>
From: Travis Brady <travis.brady@gmail.com>
To: ctypes@lists.ocaml.org
Content-Type: multipart/alternative; boundary=001a11c3b114c619c904edb39b6a
Subject: [ocaml-ctypes] Structs with malloc allocated fields
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 17 Dec 2013 04:24:16 -0000

--001a11c3b114c619c904edb39b6a
Content-Type: text/plain; charset=ISO-8859-1

I'm wrapping a simple library that contains a few functions that call
malloc or realloc internally to allocate a few struct members and I'm
wondering how to make those behave with Ctypes and the GC.

The library exposes structname_free functions where applicable, but I'm not
certain how to tell Ctypes how to use them or if I even need to at all.

I've read through the ctypes examples, tests and other code from onanomsg
and ocaml-libnl to no avail.

Anyone mind sharing any tips here?

thank you

--001a11c3b114c619c904edb39b6a
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">I&#39;m wrapping a simple library that contains a few func=
tions that call malloc or realloc internally to allocate a few struct membe=
rs and I&#39;m wondering how to make those behave with Ctypes and the GC.<d=
iv>
<br></div><div>The library exposes structname_free functions where applicab=
le, but I&#39;m not certain how to tell Ctypes how to use them or if I even=
 need to at all.</div><div><br></div><div>I&#39;ve read through the ctypes =
examples, tests and other code from onanomsg and ocaml-libnl to no avail.</=
div>
<div><br></div><div>Anyone mind sharing any tips here?</div><div><br></div>=
<div>thank you</div><div><br></div><div><br></div><div><br></div><div><br><=
/div></div>

--001a11c3b114c619c904edb39b6a--

From daniel.buenzli@erratique.ch  Tue Dec 17 05:19:17 2013
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 776463CC3F
 for <ctypes@lists.ocaml.org>; Tue, 17 Dec 2013 05:19:17 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1551131
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:48388
 helo=smtp.webfaction.com)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtp id 1VsnPA-00006T-9c (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Tue, 17 Dec 2013 05:41:17 +0000
Received: from [172.20.10.2] (170-225.197-178.cust.bluewin.ch
 [178.197.225.170])
 by smtp.webfaction.com (Postfix) with ESMTP id 6143F22437B3;
 Tue, 17 Dec 2013 05:41:15 +0000 (UTC)
Date: Tue, 17 Dec 2013 06:41:12 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Jeremy Yallop <yallop@gmail.com>
Message-ID: <C0BECBDE584E4730A1FEA585A1EA59AF@erratique.ch>
In-Reply-To: <77A6ADA6A1CE4CCE874F266EAA9324DF@erratique.ch>
References: <A71CECB09FED44B1A83A217E602DAD25@erratique.ch>
 <CAAxsn=GoMSn2hEydg_ND46+1h-H3uYSUieFeKNZwvw9T=YzRGw@mail.gmail.com>
 <77A6ADA6A1CE4CCE874F266EAA9324DF@erratique.ch>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Spinning process on osx
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 17 Dec 2013 05:19:17 -0000

Le dimanche, 8 d=C3=A9cembre 2013 =C3=A0 00:37, Daniel B=C3=BCnzli a =C3=A9=
crit :
> Le samedi, 7 d=C3=A9cembre 2013 =C3=A0 23:48, Jeremy Yallop a =C3=A9cri=
t :
> > If the bug can be triggered by a script it'd be interesting to see th=
e
> > results of running the script under 'git bisect' on the OCaml compile=
r
> > repository.
> =20

Okay so here you have. =46irst a few preliminaries.

  brew update && brew install sdl2
  opam repo add erratique-u http://erratique.ch/software/opam/unreleased
  opam update && opam install tsdl
  curl http://erratique.ch/tmp/tsdl=5Fbug.ml > /tmp/tsdl=5Fbug.ml

Then test that the bug exists on your machine. This assumes OCaml 4.01.0 =
is in your environment (and here I'm on osx 10.8.5 with xcode 5.0.2 which=
 implies clang).

  cd /tmp/
  ocamlbuild -use-ocamlfind -tag =22package(tsdl)=22 tsdl=5Fbug.native
  ./tsdl=5Fbug.native =23 black window pops up, runs forever, pizza of de=
ath
  killall -9 tsdl=5Fbug.native =23 in another terminal

If the bug exists then with that setup you can use the following script, =
it builds and runs the issue. If the program spins it exits with 1 otherw=
ise with 0. It assumes the built compilers are in the environment. =20

=23=21/bin/sh
opam remove tsdl
opam install tsdl
cd /tmp/
ocamlbuild -clean =20
ocamlbuild -use-ocamlfind -tag =22package(tsdl)=22 tsdl=5Fbug.native

(./tsdl=5Fbug.native) & pid=3D=24=21
sleep 2
kill -9 =24pid 2>/dev/null
if =5B =22=24=3F=22 =3D =220=22 =5D; then =20
=23 Killed we were spinning.
exit 1
else
=23 Not killed we finished, no bug
exit 0
fi

Best,

Daniel

P.S. With 4.01.0 tsdl.cmx is a breeze to compile, on 4.00.1 it takes appr=
ox. 8 min on my machine. 

From daniel.buenzli@erratique.ch  Tue Dec 17 16:31:49 2013
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 579423C0A3
 for <ctypes@lists.ocaml.org>; Tue, 17 Dec 2013 16:31:49 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1551131
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:56380
 helo=smtp.webfaction.com)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtp id 1Vsxu2-0005yb-hC (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Tue, 17 Dec 2013 16:53:51 +0000
Received: from [172.20.10.2] (170-225.197-178.cust.bluewin.ch
 [178.197.225.170])
 by smtp.webfaction.com (Postfix) with ESMTP id 0C41721E3BA9
 for <ctypes@lists.ocaml.org>; Tue, 17 Dec 2013 16:53:48 +0000 (UTC)
Date: Tue, 17 Dec 2013 17:53:46 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: ctypes@lists.ocaml.org
Message-ID: <BC23E84946594E78B04718BF093A8550@erratique.ch>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Subject: [ocaml-ctypes] Calling from C into OCaml
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 17 Dec 2013 16:31:49 -0000

Hello, 

How does ctypes handle callback closures from C when they are stored in C structures ? 

  1) Do they respect the OCaml runtime lock ? 
  2) Are they ensured of not being gc'd ?

In tsdl I did that once for the audio callback which gets called on another thread, it *worked* but I wonder if what I do is safe or if it works by chance (tried to Gc.compact () in the callback but the world didn't explode...).

For reference here are the various bits:

The OCaml record where you specify your callback:
http://erratique.ch/software/tsdl/doc/Tsdl.Sdl.html#TYPEaudio_spec

Callback and C structure holding it:
http://hg.libsdl.org/SDL/file/default/include/SDL_audio.h#l159

ocaml-ctypes translation:
https://github.com/dbuenzli/tsdl/blob/master/src/tsdl.ml#L4305

Translation of the OCaml record to a C struct that has a pointer on the callback:
https://github.com/dbuenzli/tsdl/blob/master/src/tsdl.ml#L4333

Example of use (440Hz sin wave):
https://github.com/dbuenzli/tsdl/blob/master/test/test.ml#L1250

Best,

Daniel

From yallop@gmail.com  Tue Dec 17 21:55:02 2013
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id A052A3C0A3
 for <ctypes@lists.ocaml.org>; Tue, 17 Dec 2013 21:55:02 +0000 (GMT)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1551131 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.170 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f170.google.com ([209.85.212.170]:51056)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1Vt2wp-0003kk-89 (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 17 Dec 2013 22:17:04 +0000
Received: by mail-wi0-f170.google.com with SMTP id hq4so4273850wib.5
 for <ctypes@lists.ocaml.org>; Tue, 17 Dec 2013 14:17:03 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type:content-transfer-encoding;
 bh=1U/fAQw36WARNmw/u4WZaI7JgXjyqsPSx4DFOx2388g=;
 b=DPxFxEK1UhYcM6VICWqqJKVpKDs+WjptYeDnwruFGZYHUQOPGBon3csLcvAA1xX0dA
 SpYjgTB3Zvvp5cObdHWwgU2WNSEP4qjKdvjTTJWqr39tROQ9zh8i+heUM3kW4rkwc1cw
 VEA4fzoYERQ8UdSWjiGt4Jeh5DqLIpCyQI92O05QbuQHRr7XXpXcZpDPdQWfGJfw5LjA
 PhUbvkJ94ATudF+/8qkeLcUfMXf1NxmpFKKdoULEPRphO9rjUe2BKnvMfsOv7G/2ce0m
 1eqINliVTgziiXSZMTvrxBJ2nScfowbuZVY3M5T8OgBLRLL3vUi7Bkg/vniDuMMqtSOA
 wFMQ==
MIME-Version: 1.0
X-Received: by 10.180.78.35 with SMTP id y3mr5204074wiw.39.1387318623089; Tue,
 17 Dec 2013 14:17:03 -0800 (PST)
Received: by 10.216.33.4 with HTTP; Tue, 17 Dec 2013 14:17:03 -0800 (PST)
In-Reply-To: <135488FED1734DFAA716632056B33BE7@erratique.ch>
References: <640E61C2E0B047FB8767E4449732F174@erratique.ch>
 <CAAxsn=FjEKS1rqA902XbxjMp+p89FU9b4xXwrtZuXxX7Zio1Ww@mail.gmail.com>
 <135488FED1734DFAA716632056B33BE7@erratique.ch>
Date: Tue, 17 Dec 2013 22:17:03 +0000
Message-ID: <CAAxsn=H0vh157L7hv+EJ36KmozNNo92NQH11LCc5wdEOCQH4=w@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: =?UTF-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Bigarray typing problem
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 17 Dec 2013 21:55:02 -0000

On 15 December 2013 23:51, Daniel B=C3=BCnzli <daniel.buenzli@erratique.ch>=
 wrote:
> However I now have another problem which is the other way round. I would =
like to be able to see a chunk of (void *) memory as a Bigarray.Array1.t of=
 a given, client-defined, kind (failing if there are size alignment issue).
>
> Here's an example:
>
>   val get_pixels : t -> ('a, 'b) kind -> ('a, 'b, Bigarray.c_layout) Biga=
rray.Array1.t
>
> For that I need to use Ctypes.bigarray_of_ptr, however to remain generic =
I need to coerce my (void *) pointer to the right type according to the big=
array kind. For that I wrote this function, just in order to match the acce=
ss types (is that ok or should I match the storage aswell ?):

Yes, you need to consider the storage type as well.  The following
should be about right:

  let access_ptr_typ_of_ba_kind : ('a, 'b) Bigarray.kind -> 'a ptr typ
=3D fun k ->
    let open Bigarray in
    match Obj.magic k with
    | k when k =3D float32 -> Obj.magic (ptr Ctypes.float)
    | k when k =3D float64 -> Obj.magic (ptr Ctypes.double)
    | k when k =3D complex32 -> Obj.magic (ptr Ctypes.complex32)
    | k when k =3D complex64 -> Obj.magic (ptr Ctypes.complex64)
    | k when k =3D int8_signed -> Obj.magic (ptr Ctypes.int8_t)
    | k when k =3D int8_unsigned -> Obj.magic (ptr Ctypes.uint8_t)
    | k when k =3D int16_signed -> Obj.magic (ptr Ctypes.int16_t)
    | k when k =3D int16_unsigned -> Obj.magic (ptr Ctypes.uint16_t)
    | k when k =3D int -> Obj.magic (ptr Ctypes.camlint)
    | k when k =3D int32 -> Obj.magic (ptr Ctypes.int32_t)
    | k when k =3D int64 -> Obj.magic (ptr Ctypes.int64_t)
    | k when k =3D nativeint -> Obj.magic (ptr Ctypes.nativeint)
    | k when k =3D char -> Obj.magic (ptr Ctypes.char)
    | _ -> assert false

> Is that correct ?

It looks reasonable to me.

> If it is and there's no other way I think it would be nice to have the ab=
ove function in ctypes.

Agreed: it's both needed in the interface for completeness, and much
simpler to implement internally:

   https://github.com/ocamllabs/ocaml-ctypes/pull/114/files

It should be in the next release.

Jeremy.

From yallop@gmail.com  Tue Dec 17 23:11:52 2013
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 596633C0A3
 for <ctypes@lists.ocaml.org>; Tue, 17 Dec 2013 23:11:52 +0000 (GMT)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1551131 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.173 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-we0-f173.google.com ([74.125.82.173]:55577)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1Vt49C-0007tL-E6 (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 17 Dec 2013 23:33:55 +0000
Received: by mail-we0-f173.google.com with SMTP id u57so6916261wes.32
 for <ctypes@lists.ocaml.org>; Tue, 17 Dec 2013 15:33:53 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=ZSz7U1qGdmgkXNkY9ktRIHcmlkVeR4xvpq9IXpZwl3s=;
 b=n+X3irMeCQf9b24VO+DQeTbr7c4QCaHZIJPcr0u2/hQPbLu6DB9YmWR9hf1prMiGcE
 9TSfwLMsFKBFCooryd9+C0DBzDr2hS9w5MnD3TKO4Wzglox1nV3Lg4SOb+EbPYJoIL8i
 VCU5wXv4/I8q8CdjORhzB51mBWUknPJzFIpPjRmlxqpfnYL6UatYycRipZDh8GgSP+iQ
 PgqKf0p5QAFzgGkX/V+wFiWdTAXEFoRHY30vJXIMg+rJdn26ls57hg7+gDzzCVTOtFvS
 lQbHDNyuursdzpmBOD1J0QgRhxpv8LDPHKNVY4SYoVb8ONhOmfLx8T7AXDZqzY9KU2Gl
 s/Yg==
MIME-Version: 1.0
X-Received: by 10.194.23.201 with SMTP id o9mr15002725wjf.67.1387323233897;
 Tue, 17 Dec 2013 15:33:53 -0800 (PST)
Received: by 10.216.33.4 with HTTP; Tue, 17 Dec 2013 15:33:53 -0800 (PST)
In-Reply-To: <CABHK4nVYayyS00_DAn6t3=0t11Gh2fYfuhcViQ7os7=4fDWZFg@mail.gmail.com>
References: <CABHK4nVYayyS00_DAn6t3=0t11Gh2fYfuhcViQ7os7=4fDWZFg@mail.gmail.com>
Date: Tue, 17 Dec 2013 23:33:53 +0000
Message-ID: <CAAxsn=HtWu=5rZNSLS9OkZgBMhBqAzfDgK2JZN3UM1SgYMMjGw@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Travis Brady <travis.brady@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Structs with malloc allocated fields
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 17 Dec 2013 23:11:52 -0000

On 17 December 2013 04:46, Travis Brady <travis.brady@gmail.com> wrote:
> I'm wrapping a simple library that contains a few functions that call malloc
> or realloc internally to allocate a few struct members and I'm wondering how
> to make those behave with Ctypes and the GC.
>
> The library exposes structname_free functions where applicable, but I'm not
> certain how to tell Ctypes how to use them or if I even need to at all.

There are several possible approaches to consider.  One approach is to
simply write C-style code in OCaml, binding the structname_free
functions and explicitly calling them when you know that it's safe to
do so.  This will probably work best if the lifetime of the struct is
easy to predict -- for example, if it's associated with a file
descriptor or other resource that also needs to be explicitly
released.

Another approach is to register the destructor functions with the GC
so that they're called automatically when ctypes no longer has a
reference to the memory.  This approach should work well where you're
allocating the memory from ctypes, since the hooks for registering
destructor functions are currently associated with the ctypes
allocation functions such as make
(http://ocamllabs.github.io/ocaml-ctypes/Ctypes.html#VALmake).

Here's a simple example with a struct whose fields point to memory
dynamically allocated by C code.  The unmanaged_person function shows
the C-style approach, with explicit deallocation; the managed_person
function shows the GC-based approach, using the finaliser argument to
the make function to register the destructor:

   $ cat example_stubs.c
   #include <stdlib.h>
   #include <string.h>
   #include <stdio.h>

   struct person { char *name; int age; };

   void initialize_person(struct person *p, const char *name, int age)
   {
     p->name = malloc(strlen(name) + 1);
     strcpy(p->name, name);
     p->age = age;
   }

   void destroy_person(struct person *p)
   {
     printf("goodbye %s (age %d)\n", p->name, p->age);
     free(p->name);
   }
   $ cat example.ml
   open Ctypes
   open Foreign

   type person
   let person : person structure typ = structure "person"
   let name = field person "name" string
   let age = field person "age" int
   let () = seal person

   let initialize_person = foreign "initialize_person"
     (ptr person @-> string @-> int @-> returning void)

   let destroy_person = foreign "destroy_person"
     (ptr person @-> returning void)

   (* Allocate a `person' value, registering the destructor function
with the GC *)
   let managed_person ~name ~age =
     let p = make ~finalise:(fun p -> destroy_person (addr p)) person in
     initialize_person (addr p) name age;
     p

   (* Allocate a `person' value that must be explicitly deallocated *)
   let unmanaged_person ~name ~age =
     let p = make person in
     initialize_person (addr p) name age;
     p
   $ ocamlfind ocamlc -c -package ctypes example_stubs.c example.ml
   $ ocamlmklib -o example example_stubs.o example.cmo
   $ ocaml
           OCaml version 4.01.0

   # #use "topfind";;
   [...]
   # #require "ctypes.foreign";;
   [...]
   # #load "example.cma";;
   # open Example;;
   # let mcc = unmanaged_person "Mrs McCave" 40;;
   val mcc : (Example.person, [ `Struct ]) Ctypes.structured = <abstr>
   # let () = for i = 1 to 23 do ignore (managed_person ~name:"Dave"
~age:i) done;;
   # Gc.full_major ();;
   goodbye Dave (age 23)
   goodbye Dave (age 22)
   goodbye Dave (age 21)
   goodbye Dave (age 20)
   goodbye Dave (age 19)
   goodbye Dave (age 18)
   goodbye Dave (age 17)
   goodbye Dave (age 16)
   goodbye Dave (age 15)
   goodbye Dave (age 14)
   goodbye Dave (age 13)
   goodbye Dave (age 12)
   goodbye Dave (age 11)
   goodbye Dave (age 10)
   goodbye Dave (age 9)
   goodbye Dave (age 8)
   goodbye Dave (age 7)
   goodbye Dave (age 6)
   goodbye Dave (age 5)
   goodbye Dave (age 4)
   goodbye Dave (age 3)
   goodbye Dave (age 2)
   goodbye Dave (age 1)
   - : unit = ()
   # destroy_person (Ctypes.addr mcc);;
   goodbye Mrs McCave (age 40)
   - : unit = ()

From florian.pichlmeier@mytum.de  Wed Dec 18 12:06:50 2013
Return-Path: <florian.pichlmeier@mytum.de>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id A7E243C161
 for <ctypes@lists.ocaml.org>; Wed, 18 Dec 2013 12:06:50 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1551487 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [129.187.255.136 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mailout2.lrz.de ([129.187.255.136]:55807)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:DHE-RSA-AES256-GCM-SHA384:256)
 id 1VtGFC-0001K9-2f (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <florian.pichlmeier@mytum.de>); Wed, 18 Dec 2013 12:28:55 +0000
Received: from lxmhs66.srv.lrz.de (localhost [127.0.0.1])
 by mailout2.lrz.de (Postfix) with ESMTP id 3dkwWB2Pb8zyS6
 for <ctypes@lists.ocaml.org>; Wed, 18 Dec 2013 13:28:54 +0100 (CET)
X-Virus-Scanned: by amavisd-new at lrz.de in lxmhs66.srv.lrz.de
Received: from mailout2.lrz.de ([127.0.0.1])
 by lxmhs66.srv.lrz.de (lxmhs66.srv.lrz.de [127.0.0.1]) (amavisd-new,
 port 10002) with ESMTP id MU9_JUZXVRFW for <ctypes@lists.ocaml.org>;
 Wed, 18 Dec 2013 13:28:54 +0100 (CET)
Received: from andromeda1.ze.tum.de (andromeda1.ze.tum.de [129.187.39.15])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mailout2.lrz.de (Postfix) with ESMTPS id 3dkwWB0b5SzyRs
 for <ctypes@lists.ocaml.org>; Wed, 18 Dec 2013 13:28:54 +0100 (CET)
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
From: "Florian Pichlmeier" <florian.pichlmeier@mytum.de>
To: ctypes@lists.ocaml.org
Date: Wed, 18 Dec 2013 12:28:53 -0000
Message-ID: <20131218122853.76253.92260@andromeda1.ze.tum.de>
Subject: [ocaml-ctypes] ptr ptr argument
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 18 Dec 2013 12:06:50 -0000

Hi,

i am trying to call this function from ocaml

CZMQ_EXPORT int
    zframe_send (zframe_t **self_p, void *socket, int flags);

The function i use to create a new zframe_t is

let create msg =
  let stub = foreign "zframe_new"
    (string @-> size_t @-> returning (ptr_opt Structs._zframe_t))
  in
  let msg_size =  Size_t.of_int (String.length msg) in
  stub msg msg_size

and the structure is defined this way

type zframe_t
let _zframe_t : zframe_t structure typ = structure "_zframe_t"

The problem is with the pointer to pointer argument in the zframe_send function
call.

let send frame socket flags =
  let stub = foreign "zframe_send"
    ((ptr (ptr Structs._zframe_t)) @-> ptr void @-> int @-> returning int)
  in
  match flags with
  | More -> stub (addr frame) socket 1
  | Dontwait -> stub (addr frame) socket 4 
  | More_Dontwait -> stub (addr frame) socket 42

Does someone see, how i can fix my send function to work properly?

Thanks a lot

Florian

From daniel.buenzli@erratique.ch  Wed Dec 18 15:59:41 2013
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 2A8A93C161
 for <ctypes@lists.ocaml.org>; Wed, 18 Dec 2013 15:59:41 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1551487
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:54837
 helo=smtp.webfaction.com)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1VtJsX-0007PD-2Q (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Wed, 18 Dec 2013 16:21:46 +0000
Received: from [172.20.10.2] (138-225.197-178.cust.bluewin.ch
 [178.197.225.138])
 by smtp.webfaction.com (Postfix) with ESMTP id 5C8C020FF25F;
 Wed, 18 Dec 2013 16:21:44 +0000 (UTC)
Date: Wed, 18 Dec 2013 17:21:42 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Florian Pichlmeier <florian.pichlmeier@mytum.de>
Message-ID: <34EA8E022A7045929C6101585361B6DB@erratique.ch>
In-Reply-To: <20131218122853.76253.92260@andromeda1.ze.tum.de>
References: <20131218122853.76253.92260@andromeda1.ze.tum.de>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] ptr ptr argument
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 18 Dec 2013 15:59:41 -0000

Not sure what is your problem is exactly (be more specific in your questions). But the following notes may answer. 

First if zframe is abstract (and since it always seem to be allocated allocated by the C side) there no need to actually describe it as structure, just declare it that way:

type zframe = unit ptr
let zframe : zframe typ = ptr void
let zframe_opt : zframe option typ = ptr_opt void



we're using zframe to denote pointer on zframe_t, then:

> let create msg =
> let stub = foreign "zframe_new"
> (string @-> size_t @-> returning (ptr_opt Structs._zframe_t))
> in
> let msg_size = Size_t.of_int (String.length msg) in
> stub msg msg_size

This will generate the binding to zframe_new on each call to create. Better is to do: 

let zframe_new = 
  foreign "zframe_new" (string @-> size_t @-> returning zframe_opt)

let zframe_new data = 
  zframe_new data (Size_t.of_int (String.length data))

Then 

let zframe_send = 
  foreign "zframe_send" (ptr zframe @-> ptr void @-> int @-> returning int)

let zframe_send frame socket flags = 
  let fptr = allocate (ptr zframe) frame in 
  zframe_end fptr socket flags

Best,

Daniel

From daniel.buenzli@erratique.ch  Thu Dec 19 14:59:50 2013
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id AE8263C1D3
 for <ctypes@lists.ocaml.org>; Thu, 19 Dec 2013 14:59:50 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1551881
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:48092
 helo=smtp.webfaction.com)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1VtfQD-0004Xb-3D (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Thu, 19 Dec 2013 15:21:58 +0000
Received: from [172.20.10.2] (15-237.197-178.cust.bluewin.ch [178.197.237.15])
 by smtp.webfaction.com (Postfix) with ESMTP id CDDAC224D31F
 for <ctypes@lists.ocaml.org>; Thu, 19 Dec 2013 15:21:56 +0000 (UTC)
Date: Thu, 19 Dec 2013 16:21:53 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: ctypes@lists.ocaml.org
Message-ID: <A5F3DFD047FF469CBAB8B43EDDCA4CE4@erratique.ch>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Subject: [ocaml-ctypes] Less copying, a hybrid approach
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 19 Dec 2013 14:59:50 -0000

Hello, 

In certain cases I would really like to avoid copying the data passed to C (see [1]). Main uses cases are strings and arrays and records of unboxed floats (on architectures that have ARCH_ALIGN_DOUBLE undefined, see [2]). Since I don't want to wait on the promise of stub generation I have devised the following approach.

The idea is to use ctypes to get the function pointer and pass it to a regular stub just to apply the function. What's the point will you tell me ? Why don't you immediately make a stub for the function then ? 

First I'm still using "regular" ctypes for other parts of the binding. Second, I'm also using ctypes for the dll functionality, this means that I don't need to handle that in the C part will all the configure business it would entail; I piggyback on a correct install of ctypes for handling that and for the rest of the C that is needed I just need a correct install of ocaml. 

I would like to get feedback on this approach, I think it should work on both 32 bits and 64 bits platform. To make it more easy to implement the only thing that is missing in ctypes now is `val ptr_to_raw_address : unit ptr -> int64`. In my example below I bypassed that by directly using the "ctypes_dlsym" stub.

Below I show the approach on unsetenv(3) at the end of the ml file. Note that you need only one stub per function *type*.

Any thoughts ? 

Daniel


[1] https://github.com/ocamllabs/ocaml-ctypes/issues/106
[2] http://caml.inria.fr/pub/ml-archives/caml-list/2006/01/a8a5a8a9ee7fd2b71cc74835c2f7b924.en.html

The ml file:

------test.ml---------
open Ctypes;;
open Foreign;;

type fun_ptr = int64

external app_str_int : fun_ptr -> string -> int = "mlapp_str_int" "noalloc"

external dlsym : ?handle:Dl.library -> symbol:string -> int64 option = 
  "ctypes_dlsym"

let unsetenv_fun_ptr : fun_ptr = match dlsym "unsetenv" with 
| None -> assert false 
| Some addr -> addr

let unsetenv : string -> int = fun s -> app_str_int unsetenv_fun_ptr s 

let () = 
  assert (try ignore (Sys.getenv "HOME"); true with Not_found -> false);
  assert (unsetenv "HOME" = 0); 
  assert (try ignore (Sys.getenv "HOME"); false with Not_found -> true);
  ()

-------------

The C stub:

------test_stub.c---------
#include <caml/mlvalues.h>

typedef int (*str_int)(char *);

value mlapp_str_int (value *fun_ptr, value *str)
{  
  str_int f = *(str_int)(Int64_val(fun_ptr)); 
  char *s = String_val(str);
  return Val_int(f (s));
}

------------------------------




From yallop@gmail.com  Thu Dec 19 15:33:33 2013
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 717A23C1D3
 for <ctypes@lists.ocaml.org>; Thu, 19 Dec 2013 15:33:33 +0000 (GMT)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1551881 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.51 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wg0-f51.google.com ([74.125.82.51]:52864)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1Vtfwr-000569-0P (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Thu, 19 Dec 2013 15:55:41 +0000
Received: by mail-wg0-f51.google.com with SMTP id b13so1247381wgh.6
 for <ctypes@lists.ocaml.org>; Thu, 19 Dec 2013 07:55:40 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type:content-transfer-encoding;
 bh=u+mNnq9KtoBMSwomelVhZZKLikv6m1ZzUk4jNeKqL7Y=;
 b=CItVVIj1pe3dL4f6ePvqCf9JGBOxgfEdFEf59evvHnGRuq/pabIYsnElPt3utW00ri
 sK+mZiK/sXR8SAO7EKSj8JDxWJQYf5KzJxeYRX3BlnqKMkqFAupDHxwUzmIj9tY+Vh7G
 x552E7eTXE2zuY33NMvJJgvSmk6zqD5CGf3upDO9dUI66ph6WEUy49r/+wMLMn0zVTee
 j3Ml8IQZCifnn6I3QQm7tfj9vXqWdHqQuCvhr8qHPuXGTNFhmvBDb+Cn9i0jkaUdb9Oe
 LxZvBM82hgPwpkD2+8nCtZ4XiGMKjejV6DtVlhzN/MYvBArJIBa118Za+zBkjF95F4Xk
 Xrww==
MIME-Version: 1.0
X-Received: by 10.180.12.70 with SMTP id w6mr3126179wib.4.1387468540580; Thu,
 19 Dec 2013 07:55:40 -0800 (PST)
Received: by 10.216.33.4 with HTTP; Thu, 19 Dec 2013 07:55:40 -0800 (PST)
In-Reply-To: <A5F3DFD047FF469CBAB8B43EDDCA4CE4@erratique.ch>
References: <A5F3DFD047FF469CBAB8B43EDDCA4CE4@erratique.ch>
Date: Thu, 19 Dec 2013 15:55:40 +0000
Message-ID: <CAAxsn=GGb-hjfzftO4aSdU4ctXA12SKLRSMGM8NS0dzYQRdP-g@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: =?UTF-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Less copying, a hybrid approach
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 19 Dec 2013 15:33:33 -0000

On 19 December 2013 15:21, Daniel B=C3=BCnzli <daniel.buenzli@erratique.ch>=
 wrote:
> I would like to get feedback on this approach, I think it should work on =
both 32 bits and 64 bits platform. To make it more easy to implement the on=
ly thing that is missing in ctypes now is `val ptr_to_raw_address : unit pt=
r -> int64`. In my example below I bypassed that by directly using the "cty=
pes_dlsym" stub.

It looks fine to me.  I've added the missing function here:

   https://github.com/ocamllabs/ocaml-ctypes/pull/116

> value mlapp_str_int (value *fun_ptr, value *str)

Shouldn't this be

   value mlapp_str_int (value fun_ptr, value str)

?

From daniel.buenzli@erratique.ch  Thu Dec 19 15:44:23 2013
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 5B3FF3C1D3
 for <ctypes@lists.ocaml.org>; Thu, 19 Dec 2013 15:44:23 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1551881
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:34619
 helo=smtp.webfaction.com)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1Vtg7L-00026X-06 (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Thu, 19 Dec 2013 16:06:31 +0000
Received: from [172.20.10.2] (15-237.197-178.cust.bluewin.ch [178.197.237.15])
 by smtp.webfaction.com (Postfix) with ESMTP id C54A720AF671;
 Thu, 19 Dec 2013 16:06:29 +0000 (UTC)
Date: Thu, 19 Dec 2013 17:06:26 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Jeremy Yallop <yallop@gmail.com>
Message-ID: <0AD2F3D84C71488FB317B4E1B9794067@erratique.ch>
In-Reply-To: <CAAxsn=GGb-hjfzftO4aSdU4ctXA12SKLRSMGM8NS0dzYQRdP-g@mail.gmail.com>
References: <A5F3DFD047FF469CBAB8B43EDDCA4CE4@erratique.ch>
 <CAAxsn=GGb-hjfzftO4aSdU4ctXA12SKLRSMGM8NS0dzYQRdP-g@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Less copying, a hybrid approach
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 19 Dec 2013 15:44:23 -0000

Le jeudi, 19 d=C3=A9cembre 2013 =C3=A0 16:55, Jeremy Yallop a =C3=A9crit =
:
> It looks fine to me. I've added the missing function here:
> =20
> https://github.com/ocamllabs/ocaml-ctypes/pull/116
Thanks.

> > value mlapp=5Fstr=5Fint (value *fun=5Fptr, value *str)
> Shouldn't this be
> =20
> value mlapp=5Fstr=5Fint (value fun=5Fptr, value str)
> =20
> =3F =20
Yes you're right. Thanks.  =20

Daniel

From daniel.buenzli@erratique.ch  Sun Dec 22 01:25:37 2013
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id D02513C1DF
 for <ctypes@lists.ocaml.org>; Sun, 22 Dec 2013 01:25:37 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1552541
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:38805
 helo=smtp.webfaction.com)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtp id 1VuY93-0004dr-F1 (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Sun, 22 Dec 2013 01:47:54 +0000
Received: from [172.20.10.2] (156-225.197-178.cust.bluewin.ch
 [178.197.225.156])
 by smtp.webfaction.com (Postfix) with ESMTP id 898E021E1A69
 for <ctypes@lists.ocaml.org>; Sun, 22 Dec 2013 01:47:51 +0000 (UTC)
Date: Sun, 22 Dec 2013 02:47:48 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: ctypes@lists.ocaml.org
Message-ID: <7BA79A45059547C28F16604D4F47F8CC@erratique.ch>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Subject: [ocaml-ctypes] Unsigned int smaller than 32 bits
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sun, 22 Dec 2013 01:25:37 -0000

Hello,

Is there any particular reason why signed int smaller than 32 bits are accessed as ocaml ints but unsigned ints smaller than 32 bits are not ? 

In both cases you need to care about the range if you represent them as ocaml ints, and in both cases you want to represent them by ocaml ints if you don't want ctypes types to leak in the interface. I must be missing something. 

Best, 

Daniel

P.S. Already tired of writing:

let int_as_uint8_t = 
  view ~read:Unsigned.UInt8.to_int ~write:Unsigned.UInt8.of_int uint8_t

let int_as_uint16_t = 
  view ~read:Unsigned.UInt16.to_int ~write:Unsigned.UInt16.of_int uint16_t




From yallop@gmail.com  Sun Dec 22 01:50:36 2013
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 467C23C1DF
 for <ctypes@lists.ocaml.org>; Sun, 22 Dec 2013 01:50:36 +0000 (GMT)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1552541 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.47 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wg0-f47.google.com ([74.125.82.47]:57756)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1VuYXD-0000lf-Fw (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Sun, 22 Dec 2013 02:12:52 +0000
Received: by mail-wg0-f47.google.com with SMTP id n12so3868087wgh.14
 for <ctypes@lists.ocaml.org>; Sat, 21 Dec 2013 18:12:51 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type:content-transfer-encoding;
 bh=hQUJyLWzp4f4CNLR/18M2Uo3gJNmluB0OXcaltepQ5A=;
 b=EsMfNNuaI51pVHFELlPwu6ta2SsRcm4OTr9gO73b/h428wdImejS6gRFOdNFsJAlHC
 ke82DCjHJKv7/xOmJroO7vmGdNnK7c/AS5piNdqB+aTtiTAX3l2u8929qwHFtT+1/P8U
 sqP115eI4jiL3LUBVPtSUwd7ZCgQRm+LakVjrRWmHEbA8uOvhBMrJZsAIGCyc5f+EQOX
 hrleOC9IwLeVzXS1MFGD/XJQGUqPHnlLywWtQBb6AKV61GIvRlQ4Infg9HWkXl7r5M2K
 5i6mTknxG1lqym3GJYjw5XrvE6YSbwJJ776HYdbJmJFFC9O9Srsv28ahNy3/VnDq/PGg
 XUQg==
MIME-Version: 1.0
X-Received: by 10.194.63.228 with SMTP id j4mr13259737wjs.34.1387678371339;
 Sat, 21 Dec 2013 18:12:51 -0800 (PST)
Received: by 10.216.33.4 with HTTP; Sat, 21 Dec 2013 18:12:51 -0800 (PST)
In-Reply-To: <7BA79A45059547C28F16604D4F47F8CC@erratique.ch>
References: <7BA79A45059547C28F16604D4F47F8CC@erratique.ch>
Date: Sun, 22 Dec 2013 02:12:51 +0000
Message-ID: <CAAxsn=H2tWcR=v-seJEcLcy1vsBm7_rf0cxqthw+fBq7diypMw@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: =?UTF-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Unsigned int smaller than 32 bits
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sun, 22 Dec 2013 01:50:36 -0000

On 22 December 2013 01:47, Daniel B=C3=BCnzli <daniel.buenzli@erratique.ch>=
 wrote:
> Is there any particular reason why signed int smaller than 32 bits are ac=
cessed as ocaml ints but unsigned ints smaller than 32 bits are not ?

Well, there's a rationale for uint16_t being a distinct type, since
the C (signed) int type can be as small as 16 bits.  I don't see why
uint8_t needs to be a distinct type, though.

> P.S. Already tired of writing:
>
> let int_as_uint8_t =3D
>   view ~read:Unsigned.UInt8.to_int ~write:Unsigned.UInt8.of_int uint8_t

Yes, this is pretty annoying.  Perhaps we should have multiple views
for a single C type in the Ctypes interface; something like this:

   module Uint8 :
   sig
     val t : uint8_t typ   (* access C uint8_t values using the OCaml
uint8_t type *)
     val int : int typ       (* access C uint8_t values using the
OCaml int type *)
   end

Then Ctypes.Uint8.t would behave like the current Ctypes.uint8_t, and
Ctypes.Uint8.int would behave like your int_as_uint8_t (except that it
could be made a little more efficient).

Feedback welcome.  If this approach is reasonable then it could also
might also lead to resolutions for the following issues:

    Expose arithmetic operations for POSIX arithmetic types
    https://github.com/ocamllabs/ocaml-ctypes/issues/87

    ptrdiff_t ?
    https://github.com/ocamllabs/ocaml-ctypes/issues/117

Jeremy

From daniel.buenzli@erratique.ch  Sat Dec 28 01:17:14 2013
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 59CF63C0E5
 for <ctypes@lists.ocaml.org>; Sat, 28 Dec 2013 01:17:14 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1553460
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:60467
 helo=smtp.webfaction.com)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1VwisX-0005D7-2S (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Sat, 28 Dec 2013 01:39:50 +0000
Received: from [172.20.10.2] (143-236.197-178.cust.bluewin.ch
 [178.197.236.143])
 by smtp.webfaction.com (Postfix) with ESMTP id 16DBA22470F2;
 Sat, 28 Dec 2013 01:39:47 +0000 (UTC)
Date: Sat, 28 Dec 2013 02:39:44 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Jeremy Yallop <yallop@gmail.com>
Message-ID: <A6CC3EBBE41841E79519A7AC9F97544A@erratique.ch>
In-Reply-To: <C0BECBDE584E4730A1FEA585A1EA59AF@erratique.ch>
References: <A71CECB09FED44B1A83A217E602DAD25@erratique.ch>
 <CAAxsn=GoMSn2hEydg_ND46+1h-H3uYSUieFeKNZwvw9T=YzRGw@mail.gmail.com>
 <77A6ADA6A1CE4CCE874F266EAA9324DF@erratique.ch>
 <C0BECBDE584E4730A1FEA585A1EA59AF@erratique.ch>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Spinning process on osx
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sat, 28 Dec 2013 01:17:14 -0000

Ok this thing is too annoying, either my code runs an infinite loop (4.01) or I have to wait over 6 minutes for my code to compile (4.00.1). 

So I gave it a go, making a full script this time that works in an ocaml repo checkout, see the end of this message. Note that in practice doing a bisect is not as easy as 

   git bisect start 4.00.1 4.01.0
   git bisect run script

since you tend to fall on commits in which ocaml doesn't build which screws the search procedure. So in practice you have to watch carefully which checkouts fail because ocaml fails to build and which because of your actual don't so you can restart at slightly different points (e.g. parent or successor of a bad, good commit) to avoid falling on the checkouts that fail for other reasons than your bug. So I guess I really understand now the benefits of CI. 

In any case the offending commit is: 

    https://github.com/ocaml/ocaml/commit/b2636c22d55b15f55a02b3

Before I submit something upstream does that ring a bell to anyone ? Do you think it's maybe a specific libffi issue/interaction ? 

Daniel


The bug happens with:

> gcc -v
Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1
Apple LLVM version 5.0 (clang-500.2.79) (based on LLVM 3.3svn)
Target: x86_64-apple-darwin12.5.0
Thread model: posix



> uname -a
Darwin hehey.local 12.5.0 Darwin Kernel Version 12.5.0: Sun Sep 29 13:33:47 PDT 2013; root:xnu-2050.48.12~1/RELEASE_X86_64 x86_64



To reproduce let $T be a directory (change the $T variable accordingly in the script).

brew update && brew install sdl2
cd $T 
git clone https://github.com/ocaml/ocaml
cd ocaml
git checkout trunk
$T/sdlspin.sh # exits with 0 if there is no bug

---- sdlspin.sh ----
#!/bin/sh

T=/Users/dbuenzli/tmp
cd $T/ocaml

# OCaml
./configure --prefix $T/ocaml
make world.opt 
make install

export PATH="$T/ocaml/bin:$PATH"

# Findlib 
curl -O http://download.camlcity.org/download/findlib-1.4.tar.gz
tar -xvzf findlib-1.4.tar.gz
cd findlib-1.4
./configure \
 -bindir $T/ocaml/bin \
 -mandir $T/ocaml/man \
 -sitelib $T/ocaml/lib/ocaml/site-lib \
 -config $T/ocaml/findlib.conf
make all opt install
cd ..
curl -O -L \
 https://github.com/ocamllabs/ocaml-ctypes/archive/ocaml-ctypes-0.2.2.tar.gz

# Ctypes 
tar -xvzf ocaml-ctypes-0.2.2.tar.gz 
cd ocaml-ctypes-ocaml-ctypes-0.2.2 # WTF
make
make install 
cd ..

# Tsdl overwrite test.ml with bug so we can directly compile
git clone https://github.com/dbuenzli/tsdl.git
curl http://erratique.ch/tmp/tsdl_bug.ml > tsdl/test/test.ml
cd tsdl 
./build test.native

(./test.native) & pid=$!
sleep 2
kill -9 $pid 2>/dev/null
if [ "$?" = "0" ]; then  
  echo "Spinning, bug" 
  # Killed we were spinning.
  EXIT=1
else
  # Not killed we finished, no bug
  echo "No spinning, no bug"
  EXIT=0
fi
cd ..

# Cleanup 
git clean -q -f -d -x 
rm -rf tsdl

exit $EXIT
-------------------------



From yallop@gmail.com  Sat Dec 28 20:01:14 2013
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id C9DC13C0DF
 for <ctypes@lists.ocaml.org>; Sat, 28 Dec 2013 20:01:14 +0000 (GMT)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1553646 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.170 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-we0-f170.google.com ([74.125.82.170]:65003)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1Vx0QK-0006pe-j1 (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Sat, 28 Dec 2013 20:23:53 +0000
Received: by mail-we0-f170.google.com with SMTP id w61so9211384wes.15
 for <ctypes@lists.ocaml.org>; Sat, 28 Dec 2013 12:23:52 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type:content-transfer-encoding;
 bh=ZJnJMB2XTSmYG8gL/uPThYcFDgOqszk2gfKcKE2wTJ4=;
 b=nxuWb1NqDlPhKsz2bkhSIPzez8Bgg0uNBbb7GbUy9qOIh1pj1b3kyaLZCXT2UFL7Ug
 MXOO8xvnWMm3X6rMENzRqCdaaZ6lxhdbKD0MShQAYJx0VZUxePq8EE4AYwOKGYIIyWRb
 Ywp4GTL0daM9aBjXIdFZk9Lbr8aGGIxKhw3AYWfbKuTBQuKULfZLwvRx6SvPSNI9SyHL
 W4iWLZNzItN5+uNBS+B4KoepFn6Lf63GB/nLCiME0zdbD+kLF0nzbmAQFND50mA/wEqr
 Qp4s8h8amfYTLWD4SC7YFLDpjF8D6PTn2LCr/wHhX4N8h8g6UsP4CnZj9KEaiZoK8s3Q
 1UOg==
MIME-Version: 1.0
X-Received: by 10.180.12.70 with SMTP id w6mr38259464wib.4.1388262232444; Sat,
 28 Dec 2013 12:23:52 -0800 (PST)
Received: by 10.216.33.4 with HTTP; Sat, 28 Dec 2013 12:23:52 -0800 (PST)
In-Reply-To: <A6CC3EBBE41841E79519A7AC9F97544A@erratique.ch>
References: <A71CECB09FED44B1A83A217E602DAD25@erratique.ch>
 <CAAxsn=GoMSn2hEydg_ND46+1h-H3uYSUieFeKNZwvw9T=YzRGw@mail.gmail.com>
 <77A6ADA6A1CE4CCE874F266EAA9324DF@erratique.ch>
 <C0BECBDE584E4730A1FEA585A1EA59AF@erratique.ch>
 <A6CC3EBBE41841E79519A7AC9F97544A@erratique.ch>
Date: Sat, 28 Dec 2013 20:23:52 +0000
Message-ID: <CAAxsn=EgYG_v1_b6pNeqUbbVvDdOPNK6iyazOm9YqTZyNVRQsA@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: =?UTF-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Spinning process on osx
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sat, 28 Dec 2013 20:01:14 -0000

On 28 December 2013 01:39, Daniel B=C3=BCnzli <daniel.buenzli@erratique.ch>=
 wrote:
> In any case the offending commit is:
>
>     https://github.com/ocaml/ocaml/commit/b2636c22d55b15f55a02b3
>
> Before I submit something upstream does that ring a bell to anyone ? Do y=
ou think it's maybe a specific libffi issue/interaction ?

There do seem to have been some issues with -no_compact_unwind and libffi:

    https://ghc.haskell.org/trac/ghc/ticket/5019

From cgaebel@janestreet.com  Tue Jan  7 13:22:42 2014
Return-Path: <cgaebel@janestreet.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 0C8813C0BF
 for <ctypes@lists.ocaml.org>; Tue,  7 Jan 2014 13:22:42 +0000 (GMT)
X-Cam-SpamDetails: score 0.1 from SpamAssassin-3.3.2-1555697 
 * -0.0 RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mx5.janestreet.com ([38.105.200.229]:52233
 helo=tot-dmz-mxout1.janestreet.com)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1:DHE-RSA-AES256-SHA:256)
 id 1W0WyZ-0003CA-G1 (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <cgaebel@janestreet.com>); Tue, 07 Jan 2014 13:45:53 +0000
Received: from tot-oib-smtp1.delacy.com ([172.27.22.15] helo=tot-smtp)
 by tot-dmz-mxout1.janestreet.com with esmtp (Exim 4.76)
 (envelope-from <cgaebel@janestreet.com>) id 1W0Wy9-0002z3-Hc
 for ctypes@lists.ocaml.org; Tue, 07 Jan 2014 08:45:21 -0500
Received: from tot-dmz-mxgoog1.delacy.com ([172.27.224.14]
 helo=mxgoog2.janestreet.com)
 by tot-smtp with esmtps (TLSv1:AES256-SHA:256) (Exim 4.72)
 (envelope-from <cgaebel@janestreet.com>) id 1W0Wy9-0000Bc-Gp
 for ctypes@lists.ocaml.org; Tue, 07 Jan 2014 08:45:21 -0500
Received: from mail-we0-f177.google.com ([74.125.82.177])
 by mxgoog2.janestreet.com with esmtp (Exim 4.76)
 (envelope-from <cgaebel@janestreet.com>) id 1W0Wy9-0002TG-CU
 for ctypes@lists.ocaml.org; Tue, 07 Jan 2014 08:45:21 -0500
Received: by mail-we0-f177.google.com with SMTP id u56so155516wes.36
 for <ctypes@lists.ocaml.org>; Tue, 07 Jan 2014 05:45:20 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=janestreet.com; s=google;
 h=mime-version:date:message-id:subject:from:to:content-type;
 bh=NTNiAxKZt4NtYgM88z7FFA0M7G5cP/ONihjD2z/LPTE=;
 b=xu2VFNvUBfkxzsrIdVH2AQlJRcXhjRQVjYKKAKlwZydSQaWIkeTsCL396Hu7UspwjQ
 6oQLle049+MWxQh8/8JYX26wAC6UpmcaN9k4HXHJY3w/oCramZcauLLk1IqCF9+EXHMp
 SC0Pv4PhAhl/8Vfyl6h5l9CqpJNqeP7R29WIo=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:date:message-id:subject:from:to
 :content-type;
 bh=NTNiAxKZt4NtYgM88z7FFA0M7G5cP/ONihjD2z/LPTE=;
 b=YyNCmCtS/MRe50uuPmb1jTucxxXO5qRoFVRJ0isfXdy3ENEhJVy10vfzSR+OTXYpvA
 NH0cmszygoIHXFEwvx/nrmPDn2z/aSkXaUpqlvEid3HTwmX47+b9VuD8W1Alqft8Hn9b
 7qQLDZKuBnhawxDVOeZkJXd55vAdHNUIkGX+jTETwxEVil9Ll673Fb4t80CzzznbeT9x
 tlw1DUUm+OS7FMETWF3aAu2MchVtNGh080erXGHFrPLTS9XZvBvEq8YZHnIf+nqVFHDC
 SCyWYBXb6RqrsDSxJ8s/tgqx7TJkkqew29z+QiOw3Kj+bht/1MCVti3q2mtDBfF80IXe
 nTQQ==
X-Gm-Message-State: ALoCoQl7aAGD/DdEgCvmoKo7U/JJUOuYPmlzR8V6FZDOx1O2kUYh0bo0jmkE58YBLo6Gt0TIgKUNrb2yF37EQPd0yjReOoaH/5G4v0dZtnQXauRh6CtE7tFz02gMvGVJhdzZkevXwwxtwhMgCipt6E0QGm8R2HRp7A==
X-Received: by 10.194.78.97 with SMTP id a1mr47431wjx.95.1389102320917;
 Tue, 07 Jan 2014 05:45:20 -0800 (PST)
MIME-Version: 1.0
X-Received: by 10.194.78.97 with SMTP id a1mr47413wjx.95.1389102320742; Tue,
 07 Jan 2014 05:45:20 -0800 (PST)
Received: by 10.216.46.199 with HTTP; Tue, 7 Jan 2014 05:45:20 -0800 (PST)
Date: Tue, 7 Jan 2014 08:45:20 -0500
Message-ID: <CAG8p3yU+Uj571E2VSd=QKGmemetP3UbkNu9psD0VnRFuqdzRyg@mail.gmail.com>
From: Clark Gaebel <cgaebel@janestreet.com>
To: ctypes@lists.ocaml.org
Content-Type: multipart/alternative; boundary=047d7bfcf7d0628d5c04ef619680
Subject: [ocaml-ctypes] Arrays from C to Ocaml
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 07 Jan 2014 13:22:42 -0000

--047d7bfcf7d0628d5c04ef619680
Content-Type: text/plain; charset=ISO-8859-1

What's the proper way in ctypes to interface with the following api:

void read_some_data(context* ctx, void* buffer, int length);

where read_some_data pulls some private data out of the given opaque
context and writes it into the given buffer, without blocking internally.

Ideally, I'd want something in OCaml that looks like:

val read_some_data : ctx -> len:int -> string

and the only way I see of doing this is going through bigstring first. But
this means two copies: one from C -> bigstring and one from bigstring ->
string.

Is there a better way?

  - Clark

--047d7bfcf7d0628d5c04ef619680
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div><div><div><div><div><div>What&#39;s the proper way in=
 ctypes to interface with the following api:<br><br></div>void read_some_da=
ta(context* ctx, void* buffer, int length);<br><br></div>where read_some_da=
ta pulls some private data out of the given opaque context and writes it in=
to the given buffer, without blocking internally.<br>
<br></div>Ideally, I&#39;d want something in OCaml that looks like:<br><br>=
</div>val read_some_data : ctx -&gt; len:int -&gt; string<br><br></div>and =
the only way I see of doing this is going through bigstring first. But this=
 means two copies: one from C -&gt; bigstring and one from bigstring -&gt; =
string.<br>
<br>Is there a better way?<br><br></div>=A0 - Clark<br></div>

--047d7bfcf7d0628d5c04ef619680--

From yallop@gmail.com  Tue Jan  7 15:41:47 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 825453C0BF
 for <ctypes@lists.ocaml.org>; Tue,  7 Jan 2014 15:41:47 +0000 (GMT)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1555697 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.49 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wg0-f49.google.com ([74.125.82.49]:35458)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1W0Z9F-0008It-Fq (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 07 Jan 2014 16:04:58 +0000
Received: by mail-wg0-f49.google.com with SMTP id x12so327823wgg.28
 for <ctypes@lists.ocaml.org>; Tue, 07 Jan 2014 08:04:57 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=XVdaAfYt9JrEb3+xK0meTzApmD5WVOXDLw8XsWhnfVI=;
 b=NI1nKuIH7H2MKZU7Okjq88Kwf3YccJNF+NYC6mlWl5eqO5ufYeHlKXSbJCCzrD1e+h
 AoERuFMFe2UyTpQ42AbgNU5WxznKA8Hp/yfidf+ROofbVFvY0mXnTtQi6PXbCI6qbllC
 dPUxB6BjE0P+MfGWRvj0Inq+5GWwaMb7TgsNVLI5PNJ/T+gLhK/6TgVs7Ts4HLRBLQqg
 PEYsmpkMZIStm+Qmk/ZK1L1NL34sq1QumJgB5Y3940HJZy9G7c68pEb807HINKv3IcsZ
 g9lPOPiuqZBRETa4N6lF1Ls/kyIlJMIDq+5THzoTAAa0m7012JRHzhDYFjEV1sxLMC5V
 wvkg==
MIME-Version: 1.0
X-Received: by 10.180.14.7 with SMTP id l7mr17352748wic.23.1389110697386; Tue,
 07 Jan 2014 08:04:57 -0800 (PST)
Received: by 10.216.33.4 with HTTP; Tue, 7 Jan 2014 08:04:57 -0800 (PST)
In-Reply-To: <CAG8p3yU+Uj571E2VSd=QKGmemetP3UbkNu9psD0VnRFuqdzRyg@mail.gmail.com>
References: <CAG8p3yU+Uj571E2VSd=QKGmemetP3UbkNu9psD0VnRFuqdzRyg@mail.gmail.com>
Date: Tue, 7 Jan 2014 16:04:57 +0000
Message-ID: <CAAxsn=EcYi+5-J3gBDzXsTKkup3Y9q7zZ+QzBAz500Uq8Sk2kw@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Clark Gaebel <cgaebel@janestreet.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Arrays from C to Ocaml
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 07 Jan 2014 15:41:47 -0000

On 7 January 2014 13:45, Clark Gaebel <cgaebel@janestreet.com> wrote:
> What's the proper way in ctypes to interface with the following api:
>
> void read_some_data(context* ctx, void* buffer, int length);
>
> where read_some_data pulls some private data out of the given opaque context
> and writes it into the given buffer, without blocking internally.
>
> Ideally, I'd want something in OCaml that looks like:
>
> val read_some_data : ctx -> len:int -> string
>
> and the only way I see of doing this is going through bigstring first. But
> this means two copies: one from C -> bigstring and one from bigstring ->
> string.

For the moment ctypes doesn't provide any way to pass OCaml heap
addresses to C, so moving between OCaml strings and C arrays always
involves a copy.

From travis.brady@gmail.com  Tue Jan  7 16:26:28 2014
Return-Path: <travis.brady@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 278F93C0BF
 for <ctypes@lists.ocaml.org>; Tue,  7 Jan 2014 16:26:28 +0000 (GMT)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1555697 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.216.179 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (travis.brady[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qc0-f179.google.com ([209.85.216.179]:39678)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1W0ZqU-0006xt-j3 (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <travis.brady@gmail.com>); Tue, 07 Jan 2014 16:49:39 +0000
Received: by mail-qc0-f179.google.com with SMTP id i8so377428qcq.24
 for <ctypes@lists.ocaml.org>; Tue, 07 Jan 2014 08:49:37 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=ad2vtZfoBxM02WvAQ5kMD4xe2nsgMxrhMvpCBErciqY=;
 b=ZijSmTM8C0Ss6Hc2nmEWhigWUDq2iJt5TGSrwDAyJVCpwzbCP564kbOnvq1dV+fqgx
 5RqJsrFw7U9aY+tEk1tWbfHHrkYd4qQC/K0GBJoo40pN2USIll8aPmT3kqggcmbfYIF4
 8BxSQoRtMPHjepBOET+nh4+viWZSVgyjqWfspu1ZiUrjRTqqONKRxcMA4nsJ5uaQt7N7
 nNpIT/+PnNRut3ifDNfn/ugYWBL4EQIiqBdAhPC1dB1M8iPH+E7aFrNcH97IFIspJgQl
 69Rck+fWdsYuhTcAof6e3geGlUQ12RUq4OkVvp/ro3z0TX5XNqAdt+cGA6Oo4zCVfRap
 BOSQ==
MIME-Version: 1.0
X-Received: by 10.49.81.178 with SMTP id b18mr200317160qey.0.1389113377714;
 Tue, 07 Jan 2014 08:49:37 -0800 (PST)
Received: by 10.96.100.168 with HTTP; Tue, 7 Jan 2014 08:49:37 -0800 (PST)
In-Reply-To: <CAAxsn=HtWu=5rZNSLS9OkZgBMhBqAzfDgK2JZN3UM1SgYMMjGw@mail.gmail.com>
References: <CABHK4nVYayyS00_DAn6t3=0t11Gh2fYfuhcViQ7os7=4fDWZFg@mail.gmail.com>
 <CAAxsn=HtWu=5rZNSLS9OkZgBMhBqAzfDgK2JZN3UM1SgYMMjGw@mail.gmail.com>
Date: Tue, 7 Jan 2014 10:49:37 -0600
Message-ID: <CABHK4nUf4==a2Am2wJonnpT0zdE3HQRoQKns35henYczuKyvug@mail.gmail.com>
From: Travis Brady <travis.brady@gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Content-Type: multipart/alternative; boundary=047d7b6d9e7e6e76b604ef6429b3
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Structs with malloc allocated fields
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 07 Jan 2014 16:26:28 -0000

--047d7b6d9e7e6e76b604ef6429b3
Content-Type: text/plain; charset=ISO-8859-1

Thank you, Jeremy.  This is exactly what I needed.

Thank you as well for Ctypes, from my brief use so far it seems great.

Travis


On Tue, Dec 17, 2013 at 5:33 PM, Jeremy Yallop <yallop@gmail.com> wrote:

> On 17 December 2013 04:46, Travis Brady <travis.brady@gmail.com> wrote:
> > I'm wrapping a simple library that contains a few functions that call
> malloc
> > or realloc internally to allocate a few struct members and I'm wondering
> how
> > to make those behave with Ctypes and the GC.
> >
> > The library exposes structname_free functions where applicable, but I'm
> not
> > certain how to tell Ctypes how to use them or if I even need to at all.
>
> There are several possible approaches to consider.  One approach is to
> simply write C-style code in OCaml, binding the structname_free
> functions and explicitly calling them when you know that it's safe to
> do so.  This will probably work best if the lifetime of the struct is
> easy to predict -- for example, if it's associated with a file
> descriptor or other resource that also needs to be explicitly
> released.
>
> Another approach is to register the destructor functions with the GC
> so that they're called automatically when ctypes no longer has a
> reference to the memory.  This approach should work well where you're
> allocating the memory from ctypes, since the hooks for registering
> destructor functions are currently associated with the ctypes
> allocation functions such as make
> (http://ocamllabs.github.io/ocaml-ctypes/Ctypes.html#VALmake).
>
> Here's a simple example with a struct whose fields point to memory
> dynamically allocated by C code.  The unmanaged_person function shows
> the C-style approach, with explicit deallocation; the managed_person
> function shows the GC-based approach, using the finaliser argument to
> the make function to register the destructor:
>
>    $ cat example_stubs.c
>    #include <stdlib.h>
>    #include <string.h>
>    #include <stdio.h>
>
>    struct person { char *name; int age; };
>
>    void initialize_person(struct person *p, const char *name, int age)
>    {
>      p->name = malloc(strlen(name) + 1);
>      strcpy(p->name, name);
>      p->age = age;
>    }
>
>    void destroy_person(struct person *p)
>    {
>      printf("goodbye %s (age %d)\n", p->name, p->age);
>      free(p->name);
>    }
>    $ cat example.ml
>    open Ctypes
>    open Foreign
>
>    type person
>    let person : person structure typ = structure "person"
>    let name = field person "name" string
>    let age = field person "age" int
>    let () = seal person
>
>    let initialize_person = foreign "initialize_person"
>      (ptr person @-> string @-> int @-> returning void)
>
>    let destroy_person = foreign "destroy_person"
>      (ptr person @-> returning void)
>
>    (* Allocate a `person' value, registering the destructor function
> with the GC *)
>    let managed_person ~name ~age =
>      let p = make ~finalise:(fun p -> destroy_person (addr p)) person in
>      initialize_person (addr p) name age;
>      p
>
>    (* Allocate a `person' value that must be explicitly deallocated *)
>    let unmanaged_person ~name ~age =
>      let p = make person in
>      initialize_person (addr p) name age;
>      p
>    $ ocamlfind ocamlc -c -package ctypes example_stubs.c example.ml
>    $ ocamlmklib -o example example_stubs.o example.cmo
>    $ ocaml
>            OCaml version 4.01.0
>
>    # #use "topfind";;
>    [...]
>    # #require "ctypes.foreign";;
>    [...]
>    # #load "example.cma";;
>    # open Example;;
>    # let mcc = unmanaged_person "Mrs McCave" 40;;
>    val mcc : (Example.person, [ `Struct ]) Ctypes.structured = <abstr>
>    # let () = for i = 1 to 23 do ignore (managed_person ~name:"Dave"
> ~age:i) done;;
>    # Gc.full_major ();;
>    goodbye Dave (age 23)
>    goodbye Dave (age 22)
>    goodbye Dave (age 21)
>    goodbye Dave (age 20)
>    goodbye Dave (age 19)
>    goodbye Dave (age 18)
>    goodbye Dave (age 17)
>    goodbye Dave (age 16)
>    goodbye Dave (age 15)
>    goodbye Dave (age 14)
>    goodbye Dave (age 13)
>    goodbye Dave (age 12)
>    goodbye Dave (age 11)
>    goodbye Dave (age 10)
>    goodbye Dave (age 9)
>    goodbye Dave (age 8)
>    goodbye Dave (age 7)
>    goodbye Dave (age 6)
>    goodbye Dave (age 5)
>    goodbye Dave (age 4)
>    goodbye Dave (age 3)
>    goodbye Dave (age 2)
>    goodbye Dave (age 1)
>    - : unit = ()
>    # destroy_person (Ctypes.addr mcc);;
>    goodbye Mrs McCave (age 40)
>    - : unit = ()
>

--047d7b6d9e7e6e76b604ef6429b3
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Thank you, Jeremy. =A0This is exactly what I needed.<div><=
br></div><div>Thank you as well for Ctypes, from my brief use so far it see=
ms great.</div><div><br></div><div>Travis</div></div><div class=3D"gmail_ex=
tra">
<br><br><div class=3D"gmail_quote">On Tue, Dec 17, 2013 at 5:33 PM, Jeremy =
Yallop <span dir=3D"ltr">&lt;<a href=3D"mailto:yallop@gmail.com" target=3D"=
_blank">yallop@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmai=
l_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left=
:1ex">
<div class=3D"im">On 17 December 2013 04:46, Travis Brady &lt;<a href=3D"ma=
ilto:travis.brady@gmail.com">travis.brady@gmail.com</a>&gt; wrote:<br>
&gt; I&#39;m wrapping a simple library that contains a few functions that c=
all malloc<br>
&gt; or realloc internally to allocate a few struct members and I&#39;m won=
dering how<br>
&gt; to make those behave with Ctypes and the GC.<br>
&gt;<br>
&gt; The library exposes structname_free functions where applicable, but I&=
#39;m not<br>
&gt; certain how to tell Ctypes how to use them or if I even need to at all=
.<br>
<br>
</div>There are several possible approaches to consider. =A0One approach is=
 to<br>
simply write C-style code in OCaml, binding the structname_free<br>
functions and explicitly calling them when you know that it&#39;s safe to<b=
r>
do so. =A0This will probably work best if the lifetime of the struct is<br>
easy to predict -- for example, if it&#39;s associated with a file<br>
descriptor or other resource that also needs to be explicitly<br>
released.<br>
<br>
Another approach is to register the destructor functions with the GC<br>
so that they&#39;re called automatically when ctypes no longer has a<br>
reference to the memory. =A0This approach should work well where you&#39;re=
<br>
allocating the memory from ctypes, since the hooks for registering<br>
destructor functions are currently associated with the ctypes<br>
allocation functions such as make<br>
(<a href=3D"http://ocamllabs.github.io/ocaml-ctypes/Ctypes.html#VALmake" ta=
rget=3D"_blank">http://ocamllabs.github.io/ocaml-ctypes/Ctypes.html#VALmake=
</a>).<br>
<br>
Here&#39;s a simple example with a struct whose fields point to memory<br>
dynamically allocated by C code. =A0The unmanaged_person function shows<br>
the C-style approach, with explicit deallocation; the managed_person<br>
function shows the GC-based approach, using the finaliser argument to<br>
the make function to register the destructor:<br>
<br>
=A0 =A0$ cat example_stubs.c<br>
=A0 =A0#include &lt;stdlib.h&gt;<br>
=A0 =A0#include &lt;string.h&gt;<br>
=A0 =A0#include &lt;stdio.h&gt;<br>
<br>
=A0 =A0struct person { char *name; int age; };<br>
<br>
=A0 =A0void initialize_person(struct person *p, const char *name, int age)<=
br>
=A0 =A0{<br>
=A0 =A0 =A0p-&gt;name =3D malloc(strlen(name) + 1);<br>
=A0 =A0 =A0strcpy(p-&gt;name, name);<br>
=A0 =A0 =A0p-&gt;age =3D age;<br>
=A0 =A0}<br>
<br>
=A0 =A0void destroy_person(struct person *p)<br>
=A0 =A0{<br>
=A0 =A0 =A0printf(&quot;goodbye %s (age %d)\n&quot;, p-&gt;name, p-&gt;age)=
;<br>
=A0 =A0 =A0free(p-&gt;name);<br>
=A0 =A0}<br>
=A0 =A0$ cat <a href=3D"http://example.ml" target=3D"_blank">example.ml</a>=
<br>
=A0 =A0open Ctypes<br>
=A0 =A0open Foreign<br>
<br>
=A0 =A0type person<br>
=A0 =A0let person : person structure typ =3D structure &quot;person&quot;<b=
r>
=A0 =A0let name =3D field person &quot;name&quot; string<br>
=A0 =A0let age =3D field person &quot;age&quot; int<br>
=A0 =A0let () =3D seal person<br>
<br>
=A0 =A0let initialize_person =3D foreign &quot;initialize_person&quot;<br>
=A0 =A0 =A0(ptr person @-&gt; string @-&gt; int @-&gt; returning void)<br>
<br>
=A0 =A0let destroy_person =3D foreign &quot;destroy_person&quot;<br>
=A0 =A0 =A0(ptr person @-&gt; returning void)<br>
<br>
=A0 =A0(* Allocate a `person&#39; value, registering the destructor functio=
n<br>
with the GC *)<br>
=A0 =A0let managed_person ~name ~age =3D<br>
=A0 =A0 =A0let p =3D make ~finalise:(fun p -&gt; destroy_person (addr p)) p=
erson in<br>
=A0 =A0 =A0initialize_person (addr p) name age;<br>
=A0 =A0 =A0p<br>
<br>
=A0 =A0(* Allocate a `person&#39; value that must be explicitly deallocated=
 *)<br>
=A0 =A0let unmanaged_person ~name ~age =3D<br>
=A0 =A0 =A0let p =3D make person in<br>
=A0 =A0 =A0initialize_person (addr p) name age;<br>
=A0 =A0 =A0p<br>
=A0 =A0$ ocamlfind ocamlc -c -package ctypes example_stubs.c <a href=3D"htt=
p://example.ml" target=3D"_blank">example.ml</a><br>
=A0 =A0$ ocamlmklib -o example example_stubs.o example.cmo<br>
=A0 =A0$ ocaml<br>
=A0 =A0 =A0 =A0 =A0 =A0OCaml version 4.01.0<br>
<br>
=A0 =A0# #use &quot;topfind&quot;;;<br>
=A0 =A0[...]<br>
=A0 =A0# #require &quot;ctypes.foreign&quot;;;<br>
=A0 =A0[...]<br>
=A0 =A0# #load &quot;example.cma&quot;;;<br>
=A0 =A0# open Example;;<br>
=A0 =A0# let mcc =3D unmanaged_person &quot;Mrs McCave&quot; 40;;<br>
=A0 =A0val mcc : (Example.person, [ `Struct ]) Ctypes.structured =3D &lt;ab=
str&gt;<br>
=A0 =A0# let () =3D for i =3D 1 to 23 do ignore (managed_person ~name:&quot=
;Dave&quot;<br>
~age:i) done;;<br>
=A0 =A0# Gc.full_major ();;<br>
=A0 =A0goodbye Dave (age 23)<br>
=A0 =A0goodbye Dave (age 22)<br>
=A0 =A0goodbye Dave (age 21)<br>
=A0 =A0goodbye Dave (age 20)<br>
=A0 =A0goodbye Dave (age 19)<br>
=A0 =A0goodbye Dave (age 18)<br>
=A0 =A0goodbye Dave (age 17)<br>
=A0 =A0goodbye Dave (age 16)<br>
=A0 =A0goodbye Dave (age 15)<br>
=A0 =A0goodbye Dave (age 14)<br>
=A0 =A0goodbye Dave (age 13)<br>
=A0 =A0goodbye Dave (age 12)<br>
=A0 =A0goodbye Dave (age 11)<br>
=A0 =A0goodbye Dave (age 10)<br>
=A0 =A0goodbye Dave (age 9)<br>
=A0 =A0goodbye Dave (age 8)<br>
=A0 =A0goodbye Dave (age 7)<br>
=A0 =A0goodbye Dave (age 6)<br>
=A0 =A0goodbye Dave (age 5)<br>
=A0 =A0goodbye Dave (age 4)<br>
=A0 =A0goodbye Dave (age 3)<br>
=A0 =A0goodbye Dave (age 2)<br>
=A0 =A0goodbye Dave (age 1)<br>
=A0 =A0- : unit =3D ()<br>
=A0 =A0# destroy_person (Ctypes.addr mcc);;<br>
=A0 =A0goodbye Mrs McCave (age 40)<br>
=A0 =A0- : unit =3D ()<br>
</blockquote></div><br></div>

--047d7b6d9e7e6e76b604ef6429b3--

From cgaebel@janestreet.com  Tue Jan  7 19:11:53 2014
Return-Path: <cgaebel@janestreet.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 4968D3C0BF
 for <ctypes@lists.ocaml.org>; Tue,  7 Jan 2014 19:11:53 +0000 (GMT)
X-Cam-SpamDetails: score 0.1 from SpamAssassin-3.3.2-1555697 
 * -0.0 RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mx5.janestreet.com ([38.105.200.229]:57448
 helo=tot-dmz-mxout1.janestreet.com)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1:DHE-RSA-AES256-SHA:256)
 id 1W0cQV-00031X-ib (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <cgaebel@janestreet.com>); Tue, 07 Jan 2014 19:35:05 +0000
Received: from tot-oib-smtp1.delacy.com ([172.27.22.15] helo=tot-smtp)
 by tot-dmz-mxout1.janestreet.com with esmtp (Exim 4.76)
 (envelope-from <cgaebel@janestreet.com>) id 1W0cQ4-0003Dm-Em
 for ctypes@lists.ocaml.org; Tue, 07 Jan 2014 14:34:32 -0500
Received: from tot-dmz-mxgoog1.delacy.com ([172.27.224.14]
 helo=mxgoog2.janestreet.com)
 by tot-smtp with esmtps (TLSv1:AES256-SHA:256) (Exim 4.72)
 (envelope-from <cgaebel@janestreet.com>) id 1W0cQ4-0000rd-Dl
 for ctypes@lists.ocaml.org; Tue, 07 Jan 2014 14:34:32 -0500
Received: from mail-wi0-f175.google.com ([209.85.212.175])
 by mxgoog2.janestreet.com with esmtp (Exim 4.76)
 (envelope-from <cgaebel@janestreet.com>) id 1W0cQ4-0000vg-61
 for ctypes@lists.ocaml.org; Tue, 07 Jan 2014 14:34:32 -0500
Received: by mail-wi0-f175.google.com with SMTP id hi5so4614693wib.8
 for <ctypes@lists.ocaml.org>; Tue, 07 Jan 2014 11:34:31 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=janestreet.com; s=google;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=nW2ITqLzLE+qZIkv39Nzix2sBsiLysl4QvNB9siEAPc=;
 b=HqPHSEaFpP+/4Z/Qd13MwDxZev/70n9ym3penclTj/7waZHg7BZPAuSRoGUeqo09ER
 HqjPpSKkN2zs38kft2+9vFc0izuN67DDDMTKNfLUh9JMoblpyAfqONkZDeDdSS8l1+Og
 uuDX0ejMSPrcBK2qoc/DPNi4YqP27Z0vGLl2Y=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:in-reply-to:references:date
 :message-id:subject:from:to:cc:content-type;
 bh=nW2ITqLzLE+qZIkv39Nzix2sBsiLysl4QvNB9siEAPc=;
 b=hHtF07eal4+c9/w70Df8OXaNWMSXPoVG23v7DbxOh26HApFI01T1DKeAyzEDEU5Ear
 Dt9QKrSjS6FYrzaR2FH/MWtZjqXWPpZfA/yp3+4YYRm+HQY6zpLqJykmFbMFHXDziOid
 0G3dYSVr/E1bLeKIDuO28JsIdP/nVuYlTIn4Apxgce187EwTjML+SY2zqJMBh9Kc9mge
 nnDiwaAdDIGmzWZKGFl5JXpKUxenP6RF2XxnJkBgP4/wRnoIkjTb+plRXkjHRHcGwf51
 eYStgtiweXuiiP6OafmD4oLsZzV9jNf1JIjtjhKd08if4pWf2nts/TPK68urNkLw/79F
 TrMg==
X-Gm-Message-State: ALoCoQnPNQSoZ9vZiyY2SLGjlOQoG8Hc7ZkdZnHkRor4OpdZUgSyT5YxhZhgu6P4qxMsiQfH5L2jmRFXwlWcU25YzvTGoxv6+wPFehiD/0SSQOmfDhdUSG09cKxSV7te/n63eQ15JimxvMTn9M3HjpEbeuP7pkYyog==
X-Received: by 10.180.92.233 with SMTP id cp9mr18078277wib.21.1389123271697;
 Tue, 07 Jan 2014 11:34:31 -0800 (PST)
MIME-Version: 1.0
X-Received: by 10.180.92.233 with SMTP id cp9mr18078269wib.21.1389123271550;
 Tue, 07 Jan 2014 11:34:31 -0800 (PST)
Received: by 10.216.46.199 with HTTP; Tue, 7 Jan 2014 11:34:31 -0800 (PST)
In-Reply-To: <CAAxsn=EcYi+5-J3gBDzXsTKkup3Y9q7zZ+QzBAz500Uq8Sk2kw@mail.gmail.com>
References: <CAG8p3yU+Uj571E2VSd=QKGmemetP3UbkNu9psD0VnRFuqdzRyg@mail.gmail.com>
 <CAAxsn=EcYi+5-J3gBDzXsTKkup3Y9q7zZ+QzBAz500Uq8Sk2kw@mail.gmail.com>
Date: Tue, 7 Jan 2014 14:34:31 -0500
Message-ID: <CAG8p3yXD2PvwK6i2knqy-ZBEeKhE8fibggSPYZh8_6vCb74WGQ@mail.gmail.com>
From: Clark Gaebel <cgaebel@janestreet.com>
To: Jeremy Yallop <yallop@gmail.com>
Content-Type: multipart/alternative; boundary=f46d04388e5d26841804ef66777f
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Arrays from C to Ocaml
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 07 Jan 2014 19:11:53 -0000

--f46d04388e5d26841804ef66777f
Content-Type: text/plain; charset=ISO-8859-1

Ok. Thanks anyways!

  - Clark


On Tue, Jan 7, 2014 at 11:04 AM, Jeremy Yallop <yallop@gmail.com> wrote:

> On 7 January 2014 13:45, Clark Gaebel <cgaebel@janestreet.com> wrote:
> > What's the proper way in ctypes to interface with the following api:
> >
> > void read_some_data(context* ctx, void* buffer, int length);
> >
> > where read_some_data pulls some private data out of the given opaque
> context
> > and writes it into the given buffer, without blocking internally.
> >
> > Ideally, I'd want something in OCaml that looks like:
> >
> > val read_some_data : ctx -> len:int -> string
> >
> > and the only way I see of doing this is going through bigstring first.
> But
> > this means two copies: one from C -> bigstring and one from bigstring ->
> > string.
>
> For the moment ctypes doesn't provide any way to pass OCaml heap
> addresses to C, so moving between OCaml strings and C arrays always
> involves a copy.
>

--f46d04388e5d26841804ef66777f
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>Ok. Thanks anyways!<br><br></div>=A0 - Clark<br></div=
><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Tue, Jan =
7, 2014 at 11:04 AM, Jeremy Yallop <span dir=3D"ltr">&lt;<a href=3D"mailto:=
yallop@gmail.com" target=3D"_blank">yallop@gmail.com</a>&gt;</span> wrote:<=
br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div class=3D"HOEnZb"><div class=3D"h5">On 7=
 January 2014 13:45, Clark Gaebel &lt;<a href=3D"mailto:cgaebel@janestreet.=
com">cgaebel@janestreet.com</a>&gt; wrote:<br>

&gt; What&#39;s the proper way in ctypes to interface with the following ap=
i:<br>
&gt;<br>
&gt; void read_some_data(context* ctx, void* buffer, int length);<br>
&gt;<br>
&gt; where read_some_data pulls some private data out of the given opaque c=
ontext<br>
&gt; and writes it into the given buffer, without blocking internally.<br>
&gt;<br>
&gt; Ideally, I&#39;d want something in OCaml that looks like:<br>
&gt;<br>
&gt; val read_some_data : ctx -&gt; len:int -&gt; string<br>
&gt;<br>
&gt; and the only way I see of doing this is going through bigstring first.=
 But<br>
&gt; this means two copies: one from C -&gt; bigstring and one from bigstri=
ng -&gt;<br>
&gt; string.<br>
<br>
</div></div>For the moment ctypes doesn&#39;t provide any way to pass OCaml=
 heap<br>
addresses to C, so moving between OCaml strings and C arrays always<br>
involves a copy.<br>
</blockquote></div><br></div>

--f46d04388e5d26841804ef66777f--

From daniel.buenzli@erratique.ch  Wed Jan 29 10:14:25 2014
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id A22383C1F1
 for <ctypes@lists.ocaml.org>; Wed, 29 Jan 2014 10:14:25 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1562007
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:41080
 helo=smtp.webfaction.com)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtp id 1W8SXi-0004i5-DF (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Wed, 29 Jan 2014 10:38:50 +0000
Received: from [172.20.10.2] (100-224.197-178.cust.bluewin.ch
 [178.197.224.100])
 by smtp.webfaction.com (Postfix) with ESMTP id 8C0B02221F9B
 for <ctypes@lists.ocaml.org>; Wed, 29 Jan 2014 10:38:48 +0000 (UTC)
Date: Wed, 29 Jan 2014 11:38:44 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: ctypes@lists.ocaml.org
Message-ID: <DC1A5D8122554149A593278594B9025F@erratique.ch>
In-Reply-To: <CAAxsn=EgYG_v1_b6pNeqUbbVvDdOPNK6iyazOm9YqTZyNVRQsA@mail.gmail.com>
References: <A71CECB09FED44B1A83A217E602DAD25@erratique.ch>
 <CAAxsn=GoMSn2hEydg_ND46+1h-H3uYSUieFeKNZwvw9T=YzRGw@mail.gmail.com>
 <77A6ADA6A1CE4CCE874F266EAA9324DF@erratique.ch>
 <C0BECBDE584E4730A1FEA585A1EA59AF@erratique.ch>
 <A6CC3EBBE41841E79519A7AC9F97544A@erratique.ch>
 <CAAxsn=EgYG_v1_b6pNeqUbbVvDdOPNK6iyazOm9YqTZyNVRQsA@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Subject: Re: [ocaml-ctypes] Spinning process on osx
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 29 Jan 2014 10:14:25 -0000

Le samedi, 28 d=C3=A9cembre 2013 =C3=A0 21:23, Jeremy Yallop a =C3=A9crit=
 :
> There do seem to have been some issues with -no=5Fcompact=5Funwind and =
libffi:
> =20
> https://ghc.haskell.org/trac/ghc/ticket/5019 =20

This is becoming slightly annoying for me as I would like to use a 4.01.0=
 feature only (Printexc.get=5Fcallstack). =20

I have to admit I have a very poor understanding of the issue, -no=5Fcomp=
act=5Funwind is not documented in man ld, but the option -warn=5Fcompact=5F=
unwind says this =5B1=5D. Here are the options I'm contemplating, I'll gl=
adly take comments before I spend time on this. =20

* Patch the compiler to remove the option, what will it entail =3F =20
* Try with libffi HEAD to see if the issue was maybe fixed. To brew exper=
ts, is there an quick easy way/pointer to instructions of doing that with=
 brew =3F I'm spoilt by opam pin.

Thanks, =20

Daniel

=5B1=5D
-warn=5Fcompact=5Funwind
When producing a final linked image, the linker processes the
=5F=5Feh=5Fframe section and produces an =5F=5Funwind=5Finfo section.
Most =46DE entries in the =5F=5Feh=5Fframe can be represented by a
32-bit value in the =5F=5Funwind=5Finfo section. The option issues
a warning for any function whose =46DE cannot be expressed in
the compact unwind format.




From anil@recoil.org  Wed Jan 29 10:58:25 2014
Return-Path: <anil@recoil.org>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 7BA003C1F1
 for <ctypes@lists.ocaml.org>; Wed, 29 Jan 2014 10:58:25 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1562007
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from recoil.dh.bytemark.co.uk ([89.16.177.154]:24482
 helo=dark.recoil.org)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with smtp id 1W8TEI-0001oY-DL (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <anil@recoil.org>); Wed, 29 Jan 2014 11:22:50 +0000
Received: (qmail 31515 invoked by uid 634); 29 Jan 2014 11:22:49 -0000
X-Spam-Level: *
X-Spam-Status: No, hits=-1.0 required=5.0
	tests=ALL_TRUSTED
X-Spam-Check-By: dark.recoil.org
Received: from volstagg-0.srg.cl.cam.ac.uk (HELO flick.office) (128.232.32.232)
 (smtp-auth username remote@recoil.org, mechanism cram-md5)
 by dark.recoil.org (qpsmtpd/0.84) with ESMTPA; Wed, 29 Jan 2014 11:22:48 +0000
Content-Type: text/plain; charset=iso-8859-1
Mime-Version: 1.0 (Mac OS X Mail 7.0 \(1812\))
From: Anil Madhavapeddy <anil@recoil.org>
In-Reply-To: <DC1A5D8122554149A593278594B9025F@erratique.ch>
Date: Wed, 29 Jan 2014 11:22:45 +0000
Content-Transfer-Encoding: quoted-printable
Message-Id: <9D16F320-1A31-47CD-AC2E-8D235A2DB984@recoil.org>
References: <A71CECB09FED44B1A83A217E602DAD25@erratique.ch>
 <CAAxsn=GoMSn2hEydg_ND46+1h-H3uYSUieFeKNZwvw9T=YzRGw@mail.gmail.com>
 <77A6ADA6A1CE4CCE874F266EAA9324DF@erratique.ch>
 <C0BECBDE584E4730A1FEA585A1EA59AF@erratique.ch>
 <A6CC3EBBE41841E79519A7AC9F97544A@erratique.ch>
 <CAAxsn=EgYG_v1_b6pNeqUbbVvDdOPNK6iyazOm9YqTZyNVRQsA@mail.gmail.com>
 <DC1A5D8122554149A593278594B9025F@erratique.ch>
To: =?iso-8859-1?Q?Daniel_B=FCnzli?= <daniel.buenzli@erratique.ch>
X-Mailer: Apple Mail (2.1812)
X-Virus-Checked: Checked by ClamAV on dark.recoil.org
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Spinning process on osx
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 29 Jan 2014 10:58:25 -0000

On 29 Jan 2014, at 10:38, Daniel B=FCnzli <daniel.buenzli@erratique.ch> =
wrote:

> Le samedi, 28 d=E9cembre 2013 =E0 21:23, Jeremy Yallop a =E9crit :
>> There do seem to have been some issues with -no_compact_unwind and =
libffi:
>>=20
>> https://ghc.haskell.org/trac/ghc/ticket/5019 =20
>=20
> This is becoming slightly annoying for me as I would like to use a =
4.01.0 feature only (Printexc.get_callstack). =20

One immediate alternative is to experiment with the stub generation =
that's entered ctypes-trunk, as part of =
https://github.com/ocamllabs/ocaml-ctypes/pull/124

The Makefiles are the most complex part of stub generation =
(predictably), but it should give you a mode where your bindings can be =
output as static C code and linked in as normal C stubs are.  It will =
avoid the dependency on libffi and sidestep your bug, and give us the =
time to track it down properly.

(It would also be very useful to ensure that your use of ctypes is =
compatible with stub generation, as that's an important goal of the =
library)

-anil=

From kosmo.zb@gmail.com  Wed Jan 29 11:17:25 2014
Return-Path: <kosmo.zb@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 69B5F3C1F1
 for <ctypes@lists.ocaml.org>; Wed, 29 Jan 2014 11:17:25 +0000 (GMT)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1562007 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.215.52 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (kosmo.zb[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-la0-f52.google.com ([209.85.215.52]:60088)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1W8TWg-0005zB-gK (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <kosmo.zb@gmail.com>); Wed, 29 Jan 2014 11:41:50 +0000
Received: by mail-la0-f52.google.com with SMTP id c6so1355718lan.39
 for <ctypes@lists.ocaml.org>; Wed, 29 Jan 2014 03:41:49 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type:content-transfer-encoding;
 bh=6pXwPS3Qa5aEvJcCduCMaKmEMMhxiwCaPC0uQa+KnGI=;
 b=TmXwUUGESnFzm1ytVH9bJ4A2+AwPXsyec6xfKFnMQTu+fRGUI5wCPbAQUUzaDY1RGF
 WLqfMHrFDFYh1myCv8Ji7IW36j0QF9gpT3TOlLMveTMpvrPvqpnRC1W+a1KgY8cTkpJl
 k2E0XXXDFdi84wzdg7x4dfiQuYoUn1Yv+So7vUDv3gXwSYQXqiXFhT+punInqd25SpXO
 rLCj8xvJhBXi0288sm+HeQZI5SsC7vVUz6UYoBPFoY7mdDtff+il5fd9gucANiUsJsVD
 SV/qPsN5nQBRctSMSmY5xvOkVEcpSoLDbedHIS+8g9EjTvErXyzNXKkrvmPQ6l+uF6Uj
 3a6A==
MIME-Version: 1.0
X-Received: by 10.152.21.4 with SMTP id r4mr713117lae.51.1390995709241; Wed,
 29 Jan 2014 03:41:49 -0800 (PST)
Received: by 10.112.215.76 with HTTP; Wed, 29 Jan 2014 03:41:49 -0800 (PST)
In-Reply-To: <DC1A5D8122554149A593278594B9025F@erratique.ch>
References: <A71CECB09FED44B1A83A217E602DAD25@erratique.ch>
 <CAAxsn=GoMSn2hEydg_ND46+1h-H3uYSUieFeKNZwvw9T=YzRGw@mail.gmail.com>
 <77A6ADA6A1CE4CCE874F266EAA9324DF@erratique.ch>
 <C0BECBDE584E4730A1FEA585A1EA59AF@erratique.ch>
 <A6CC3EBBE41841E79519A7AC9F97544A@erratique.ch>
 <CAAxsn=EgYG_v1_b6pNeqUbbVvDdOPNK6iyazOm9YqTZyNVRQsA@mail.gmail.com>
 <DC1A5D8122554149A593278594B9025F@erratique.ch>
Date: Wed, 29 Jan 2014 11:41:49 +0000
Message-ID: <CAAWM5TxUgQQFFs_oFt-OnJSu8mUwBbUAwpifhF7YdsOSLY0gag@mail.gmail.com>
From: David Sheets <kosmo.zb@gmail.com>
To: =?ISO-8859-1?Q?Daniel_B=FCnzli?= <daniel.buenzli@erratique.ch>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
X-Mailman-Approved-At: Wed, 29 Jan 2014 11:21:02 +0000
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Spinning process on osx
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 29 Jan 2014 11:17:25 -0000

On Wed, Jan 29, 2014 at 10:38 AM, Daniel B=FCnzli
<daniel.buenzli@erratique.ch> wrote:
> Le samedi, 28 d=E9cembre 2013 =E0 21:23, Jeremy Yallop a =E9crit :
>> There do seem to have been some issues with -no_compact_unwind and libff=
i:
>>
>> https://ghc.haskell.org/trac/ghc/ticket/5019
>
> This is becoming slightly annoying for me as I would like to use a 4.01.0=
 feature only (Printexc.get_callstack).
>
> I have to admit I have a very poor understanding of the issue, -no_compac=
t_unwind is not documented in man ld, but the option -warn_compact_unwind s=
ays this [1]. Here are the options I'm contemplating, I'll gladly take comm=
ents before I spend time on this.
>
> * Patch the compiler to remove the option, what will it entail ?
> * Try with libffi HEAD to see if the issue was maybe fixed. To brew exper=
ts, is there an quick easy way/pointer to instructions of doing that with b=
rew ? I'm spoilt by opam pin.

We did this for libsodium a few months ago. See
<https://github.com/amirmc/homebrew/commit/f1ae9826cd61cb0ae3b2ea0271dee666=
99c53734>.
To understand the magic, I used the wiki enterable via
<https://github.com/Homebrew/homebrew/wiki/Formula-Cookbook>. Good
luck, it's Ruby.

David

> Thanks,
>
> Daniel
>
> [1]
> -warn_compact_unwind
> When producing a final linked image, the linker processes the
> __eh_frame section and produces an __unwind_info section.
> Most FDE entries in the __eh_frame can be represented by a
> 32-bit value in the __unwind_info section. The option issues
> a warning for any function whose FDE cannot be expressed in
> the compact unwind format.
>
>
>
> _______________________________________________
> Ctypes mailing list
> Ctypes@lists.ocaml.org
> http://lists.ocaml.org/listinfo/ctypes

From daniel.buenzli@erratique.ch  Wed Jan 29 12:11:23 2014
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id BB5F13C0BD
 for <ctypes@lists.ocaml.org>; Wed, 29 Jan 2014 12:11:23 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1562007
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:43913
 helo=smtp.webfaction.com)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtp id 1W8UMu-0002uD-EN (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Wed, 29 Jan 2014 12:35:49 +0000
Received: from [172.20.10.2] (100-224.197-178.cust.bluewin.ch
 [178.197.224.100])
 by smtp.webfaction.com (Postfix) with ESMTP id 5064622511D8
 for <ctypes@lists.ocaml.org>; Wed, 29 Jan 2014 12:35:47 +0000 (UTC)
Date: Wed, 29 Jan 2014 13:35:44 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: ctypes@lists.ocaml.org
Message-ID: <206B0BFA9D924551916F19AF9B333A3B@erratique.ch>
In-Reply-To: <9D16F320-1A31-47CD-AC2E-8D235A2DB984@recoil.org>
References: <A71CECB09FED44B1A83A217E602DAD25@erratique.ch>
 <CAAxsn=GoMSn2hEydg_ND46+1h-H3uYSUieFeKNZwvw9T=YzRGw@mail.gmail.com>
 <77A6ADA6A1CE4CCE874F266EAA9324DF@erratique.ch>
 <C0BECBDE584E4730A1FEA585A1EA59AF@erratique.ch>
 <A6CC3EBBE41841E79519A7AC9F97544A@erratique.ch>
 <CAAxsn=EgYG_v1_b6pNeqUbbVvDdOPNK6iyazOm9YqTZyNVRQsA@mail.gmail.com>
 <DC1A5D8122554149A593278594B9025F@erratique.ch>
 <9D16F320-1A31-47CD-AC2E-8D235A2DB984@recoil.org>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Subject: Re: [ocaml-ctypes] Spinning process on osx
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 29 Jan 2014 12:11:23 -0000

Le mercredi, 29 janvier 2014 =C3=A0 12:22, Anil Madhavapeddy a =C3=A9crit=
 :
> One immediate alternative is to experiment with the stub generation tha=
t's entered ctypes-trunk, as part of https://github.com/ocamllabs/ocaml-c=
types/pull/124

Yes I thought about this and I will certainly do it eventually, but I'm k=
ind on a tight schedule right now and I fear it may take me too much time=
.

One question about that though: in the tgls library I have to lookup symb=
ols dynamically and that =60stub=60 argument in =60=46oreign.foreign=60 =5B=
1=5D is very handy for that. Do I still get that support =22for free=22 =3F=
 Had no time to look into the details, prefer to wait for proper docs...


Le mercredi, 29 janvier 2014 =C3=A0 12:41, David Sheets a =C3=A9crit :
> To understand the magic, I used the wiki enterable via



> <https://github.com/Homebrew/homebrew/wiki/=46ormula-Cookbook>. Good


Thanks David. =20

Will report about my investigations when I get into that, I'll at least c=
heck in the following weeks that the bug still with the libffi's head.

Daniel

=5B1=5D http://ocamllabs.github.io/ocaml-ctypes/=46oreign.html=23VALforei=
gn



From yallop@gmail.com  Thu Jan 30 10:15:18 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 59A733C0A3
 for <ctypes@lists.ocaml.org>; Thu, 30 Jan 2014 10:15:18 +0000 (GMT)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1562377 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.216.45 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qa0-f45.google.com ([209.85.216.45]:55738)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtp id 1W8p2A-0004QU-75 (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Thu, 30 Jan 2014 10:39:46 +0000
Received: by mail-qa0-f45.google.com with SMTP id ii20so4000956qab.4
 for <ctypes@lists.ocaml.org>; Thu, 30 Jan 2014 02:39:45 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type:content-transfer-encoding;
 bh=vG+k+Ky3qcY7o8H+pwxL5xlHjLPYMNFmzpgpZ+EQCy8=;
 b=k35SqtqOe1Cn0CvdGTUd6lyjKaSJQSPFxrGfDRJU10p/t69CHrMhphqRke3HOpTPAR
 LPnda/o3zsHyUGeVyc3Y7My2prGZrKSPl1yeAtVOFXyq+Y/VCdAF6LauND2HQcQTL22/
 lzKodMR5AovPvnUd+aXet9UZMcbSd+1coZpVx2eTyrIcfpmR/YO6JxYmgZVs8bg/TRqd
 WfOSDkoJ+66cky3o87nW0jJqmLltwbyeHCFBPS4acvY1Qd+g9rUcStxKU3GURckS9pIl
 HXzkOM/Qh66fgf7+/PmoqAhGp7op5oRzFsBCmrHfNFiIMpjrmCBodDe33e7fkulEnb4O
 fQ2A==
MIME-Version: 1.0
X-Received: by 10.224.55.197 with SMTP id v5mr20509939qag.9.1391078385411;
 Thu, 30 Jan 2014 02:39:45 -0800 (PST)
Received: by 10.229.231.73 with HTTP; Thu, 30 Jan 2014 02:39:45 -0800 (PST)
In-Reply-To: <206B0BFA9D924551916F19AF9B333A3B@erratique.ch>
References: <A71CECB09FED44B1A83A217E602DAD25@erratique.ch>
 <CAAxsn=GoMSn2hEydg_ND46+1h-H3uYSUieFeKNZwvw9T=YzRGw@mail.gmail.com>
 <77A6ADA6A1CE4CCE874F266EAA9324DF@erratique.ch>
 <C0BECBDE584E4730A1FEA585A1EA59AF@erratique.ch>
 <A6CC3EBBE41841E79519A7AC9F97544A@erratique.ch>
 <CAAxsn=EgYG_v1_b6pNeqUbbVvDdOPNK6iyazOm9YqTZyNVRQsA@mail.gmail.com>
 <DC1A5D8122554149A593278594B9025F@erratique.ch>
 <9D16F320-1A31-47CD-AC2E-8D235A2DB984@recoil.org>
 <206B0BFA9D924551916F19AF9B333A3B@erratique.ch>
Date: Thu, 30 Jan 2014 10:39:45 +0000
Message-ID: <CAAxsn=Hiq7xVRQib0pFNyRxPryt=4WaUKopYiVRwNnfqFBCRzA@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: =?UTF-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Spinning process on osx
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 30 Jan 2014 10:15:18 -0000

On 29 January 2014 12:35, Daniel B=C3=BCnzli <daniel.buenzli@erratique.ch> =
wrote:
> Le mercredi, 29 janvier 2014 =C3=A0 12:22, Anil Madhavapeddy a =C3=A9crit=
 :
>> One immediate alternative is to experiment with the stub generation that=
's entered ctypes-trunk, as part of https://github.com/ocamllabs/ocaml-ctyp=
es/pull/124
>
> Yes I thought about this and I will certainly do it eventually, but I'm k=
ind on a tight schedule right now and I fear it may take me too much time.
>
> One question about that though: in the tgls library I have to lookup symb=
ols dynamically and that `stub` argument in `Foreign.foreign` [1] is very h=
andy for that. Do I still get that support "for free" ? Had no time to look=
 into the details, prefer to wait for proper docs...

Looking up symbols dynamically will probably be trickier out of the
box, since stub generation tries to move as much as possible to
compile time.  If your goal is to have functions which look the same
whether the underlying symbol is available or not, and which raise an
exception when called then things are straightforward enough.  Here's
an example that checks function availability during stub generation
and generates either a working stub or a function that raises an
exception.

$ cat optstubgen.ml
let candidates =3D
  let open Ctypes in [
    "dirname", (string @-> returning string);
    "basename", (string @-> returning string);
    "getExtension", (string @-> returning string);
  ]

let exists symbol =3D
  try let _ =3D Dl.dlsym ?handle:None ~symbol in true
  with Dl.DL_error _ -> false

let with_formatter filename fn =3D
  let outch =3D open_out filename in
  let cleanup () =3D close_out outch in
  try let fmt =3D Format.formatter_of_out_channel outch in
      fn fmt;
      Format.pp_print_flush fmt ();
      cleanup ()
  with e ->
    cleanup (); raise e

let c_header =3D "
#include <libgen.h>
#include \"ctypes/cstubs_internals.h\"
"

let () =3D
  begin
    with_formatter "bindings.ml" (fun mlfmt ->
    with_formatter "bindings.mli" (fun mlifmt ->
    with_formatter "bindings_stubs.c" (fun cfmt ->
      Format.fprintf cfmt "%s@\n" c_header;
      ListLabels.iter candidates
        ~f:(fun (cname, fn) ->
         let open Cstubs in
         let stub_name =3D "test_stub_" ^ cname in
          write_signature cname mlifmt fn;
          if exists cname then begin
            write_c ~cname ~stub_name cfmt fn;
            write_ml ~stub_name ~external_name:cname mlfmt fn
          end else
            Format.fprintf mlfmt "let %s _ =3D failwith \"%s unavailable\""
              cname cname))))
  end
$ ocamlfind opt -package ctypes.stubs,ctypes.foreign -linkpkg
optstubgen.ml -o optstubgen
$ ./optstubgen
$ ocamlfind ocamlmktop -o bindings.top -custom  -linkpkg -package
ctypes.stubs -I `ocamlc -where`/.. bindings_stubs.c bindings.mli
bindings.ml
$ ./bindings.top
        OCaml version 4.01.0

# module Bindings =3D Bindings;;
module Bindings :
  sig
    val dirname : string -> string
    val basename : string -> string
    val getExtension : string -> string
  end
# Bindings.dirname "/tmp/blah.c";;
- : string =3D "/tmp"
# Bindings.basename "/tmp/blah.c";;
- : string =3D "blah.c"
# Bindings.getExtension "/tmp/blah.c";;
Exception: Failure "getExtension unavailable".
#

From daniel.buenzli@erratique.ch  Thu Jan 30 12:34:42 2014
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id B21653C1F1
 for <ctypes@lists.ocaml.org>; Thu, 30 Jan 2014 12:34:42 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1562377
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:50509
 helo=smtp.webfaction.com)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtp id 1W8rD4-00089L-iy (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Thu, 30 Jan 2014 12:59:11 +0000
Received: from [172.20.10.2] (240-236.197-178.cust.bluewin.ch
 [178.197.236.240])
 by smtp.webfaction.com (Postfix) with ESMTP id 6F204207CEA2;
 Thu, 30 Jan 2014 12:59:09 +0000 (UTC)
Date: Thu, 30 Jan 2014 13:59:05 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Jeremy Yallop <yallop@gmail.com>
Message-ID: <FC739AD5BE5248CAACE4BD9145BAC6EE@erratique.ch>
In-Reply-To: <CAAxsn=Hiq7xVRQib0pFNyRxPryt=4WaUKopYiVRwNnfqFBCRzA@mail.gmail.com>
References: <A71CECB09FED44B1A83A217E602DAD25@erratique.ch>
 <CAAxsn=GoMSn2hEydg_ND46+1h-H3uYSUieFeKNZwvw9T=YzRGw@mail.gmail.com>
 <77A6ADA6A1CE4CCE874F266EAA9324DF@erratique.ch>
 <C0BECBDE584E4730A1FEA585A1EA59AF@erratique.ch>
 <A6CC3EBBE41841E79519A7AC9F97544A@erratique.ch>
 <CAAxsn=EgYG_v1_b6pNeqUbbVvDdOPNK6iyazOm9YqTZyNVRQsA@mail.gmail.com>
 <DC1A5D8122554149A593278594B9025F@erratique.ch>
 <9D16F320-1A31-47CD-AC2E-8D235A2DB984@recoil.org>
 <206B0BFA9D924551916F19AF9B333A3B@erratique.ch>
 <CAAxsn=Hiq7xVRQib0pFNyRxPryt=4WaUKopYiVRwNnfqFBCRzA@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Spinning process on osx
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 30 Jan 2014 12:34:42 -0000

Le jeudi, 30 janvier 2014 =C3=A0 11:39, Jeremy Yallop a =C3=A9crit :
> Here's an example that checks function availability during stub generat=
ion
> and generates either a working stub or a function that raises an
> exception.

In fact you really need to look them up dynamically (e.g. if you want to =
distribute binaries). What do you think about this approach (which is bas=
ically the technique I wrote about here =5B1=5D). Would I be able doable =
with the current stub generation =3F

1) Lookup function pointer with Dl.dlsym. which results in an otptional f=
un ptr.
2) Generate stub that has a fun ptr as a first argument, in the stub if f=
un ptr is None, raise, otherwise invoke. =20

Best,

Daniel

=5B1=5D http://lists.ocaml.org/pipermail/ctypes/2013-December/000033.html

From yallop@gmail.com  Thu Jan 30 13:10:39 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 693E03C1F1
 for <ctypes@lists.ocaml.org>; Thu, 30 Jan 2014 13:10:39 +0000 (GMT)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1562377 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.216.174 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qc0-f174.google.com ([209.85.216.174]:49686)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1W8rlr-0005Dk-2r (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Thu, 30 Jan 2014 13:35:08 +0000
Received: by mail-qc0-f174.google.com with SMTP id x13so4775728qcv.5
 for <ctypes@lists.ocaml.org>; Thu, 30 Jan 2014 05:35:06 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type:content-transfer-encoding;
 bh=WDWdkjqqKvqdarliHnEGuBFq4Pf+0SKR18QdQ56PH/Y=;
 b=h7YKuAzknZ2ZZnRQphVNDaHDu4INWFAgQue1kHcMbbzaSEyaueZGpIiZU1dltgM2LN
 sylD36puiz4Tr4zbv4Gdwhnqty1wzwXS65mFHxs4iSKjWp7T/g61iXOmfsmhifWQLmWm
 RMjRaKZv3a7DYIaPBdPQ89RC5ubdYn6YgNmdxGPNP9vpKfF89etpXk/xjwnm+N6Ls2I0
 5M9OjULJWMiBjoNyIXtUjNmdgmLScy/0+WhJhJkasl72BOvUe9LYa4dd6b5ihgSfIxfo
 HJbDwDnSHcWxXaDmcStevSBxiA+RXvZ1mqK99NoREh4Brg48wNdKhQbmRFtsItznyUwp
 +78Q==
MIME-Version: 1.0
X-Received: by 10.224.26.143 with SMTP id e15mr21551327qac.3.1391088904004;
 Thu, 30 Jan 2014 05:35:04 -0800 (PST)
Received: by 10.229.231.73 with HTTP; Thu, 30 Jan 2014 05:35:03 -0800 (PST)
In-Reply-To: <FC739AD5BE5248CAACE4BD9145BAC6EE@erratique.ch>
References: <A71CECB09FED44B1A83A217E602DAD25@erratique.ch>
 <CAAxsn=GoMSn2hEydg_ND46+1h-H3uYSUieFeKNZwvw9T=YzRGw@mail.gmail.com>
 <77A6ADA6A1CE4CCE874F266EAA9324DF@erratique.ch>
 <C0BECBDE584E4730A1FEA585A1EA59AF@erratique.ch>
 <A6CC3EBBE41841E79519A7AC9F97544A@erratique.ch>
 <CAAxsn=EgYG_v1_b6pNeqUbbVvDdOPNK6iyazOm9YqTZyNVRQsA@mail.gmail.com>
 <DC1A5D8122554149A593278594B9025F@erratique.ch>
 <9D16F320-1A31-47CD-AC2E-8D235A2DB984@recoil.org>
 <206B0BFA9D924551916F19AF9B333A3B@erratique.ch>
 <CAAxsn=Hiq7xVRQib0pFNyRxPryt=4WaUKopYiVRwNnfqFBCRzA@mail.gmail.com>
 <FC739AD5BE5248CAACE4BD9145BAC6EE@erratique.ch>
Date: Thu, 30 Jan 2014 13:35:03 +0000
Message-ID: <CAAxsn=E2+5nY=5g5sJ=Y8+MxxTGBaXZy9cy_O7VautXMWs5GrA@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: =?UTF-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Spinning process on osx
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 30 Jan 2014 13:10:39 -0000

On 30 January 2014 12:59, Daniel B=C3=BCnzli <daniel.buenzli@erratique.ch> =
wrote:
> Le jeudi, 30 janvier 2014 =C3=A0 11:39, Jeremy Yallop a =C3=A9crit :
>> Here's an example that checks function availability during stub generati=
on
>> and generates either a working stub or a function that raises an
>> exception.
>
> In fact you really need to look them up dynamically (e.g. if you want to =
distribute binaries). What do you think about this approach (which is basic=
ally the technique I wrote about here [1]). Would I be able doable with the=
 current stub generation ?
>
> 1) Lookup function pointer with Dl.dlsym. which results in an otptional f=
un ptr.
> 2) Generate stub that has a fun ptr as a first argument, in the stub if f=
un ptr is None, raise, otherwise invoke.

Yes, I think that could be made to work.  If you have C99- or
GCC-style variadic macros, then you could probably generate one stub
per type wrapping a function application macro:

   #define funcall(f, args...) f(args)

Each generated stub would then accept a function pointer and its
arguments, unwrap them at the appropriate type, and apply the
function.  You could keep the check for whether the function pointer
is null in OCaml (my preference), or extend the macro to perform null
checking as well.

Using Foreign.funptr for the function argument would work, but then
you'd still have the dependency on libffi.  It should be possible to
write a simpler version of funptr that only wraps C function pointers
(e.g. as returned from dlsym) rather than OCaml functions, which would
make it possible to eliminate libffi altogether.  Let me know if some
example code would be useful.

From daniel.buenzli@erratique.ch  Wed Feb  5 13:31:45 2014
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 7942E3C213
 for <ctypes@lists.ocaml.org>; Wed,  5 Feb 2014 13:31:45 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1564230
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:46667
 helo=smtp.webfaction.com)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtp id 1WB2xt-0007YB-FH (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Wed, 05 Feb 2014 13:56:34 +0000
Received: from [172.20.10.2] (174-226.197-178.cust.bluewin.ch
 [178.197.226.174])
 by smtp.webfaction.com (Postfix) with ESMTP id 4DC2F21B29DA
 for <ctypes@lists.ocaml.org>; Wed,  5 Feb 2014 13:56:32 +0000 (UTC)
Date: Wed, 5 Feb 2014 14:56:28 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: ctypes@lists.ocaml.org
Message-ID: <53CA4642851346998E750105E7F129C8@erratique.ch>
In-Reply-To: <206B0BFA9D924551916F19AF9B333A3B@erratique.ch>
References: <A71CECB09FED44B1A83A217E602DAD25@erratique.ch>
 <CAAxsn=GoMSn2hEydg_ND46+1h-H3uYSUieFeKNZwvw9T=YzRGw@mail.gmail.com>
 <77A6ADA6A1CE4CCE874F266EAA9324DF@erratique.ch>
 <C0BECBDE584E4730A1FEA585A1EA59AF@erratique.ch>
 <A6CC3EBBE41841E79519A7AC9F97544A@erratique.ch>
 <CAAxsn=EgYG_v1_b6pNeqUbbVvDdOPNK6iyazOm9YqTZyNVRQsA@mail.gmail.com>
 <DC1A5D8122554149A593278594B9025F@erratique.ch>
 <9D16F320-1A31-47CD-AC2E-8D235A2DB984@recoil.org>
 <206B0BFA9D924551916F19AF9B333A3B@erratique.ch>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Subject: Re: [ocaml-ctypes] Spinning process on osx
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 05 Feb 2014 13:31:45 -0000

So I tried with libffi's head [1] and the bug still there. 

Daniel

[1] https://github.com/atgreen/libffi/commit/3dc3f32c35db5ab995a835225f6815369735ceb7

For the record that was easier than I expected. I just did 

> brew remove libffi
> brew edit libffi 
# in the url field point to the archive of a github commit
# compute the sha1 of the archive and add it to the sha1 field
> brew install libffi 
> opam remove ctypes # don't now if its needed but just in case 
> opam install ctypes


From daniel.buenzli@erratique.ch  Wed Feb  5 14:32:51 2014
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 46DEB3C213
 for <ctypes@lists.ocaml.org>; Wed,  5 Feb 2014 14:32:51 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1564230
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:59751
 helo=smtp.webfaction.com)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1WB3v1-0006wI-1x (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Wed, 05 Feb 2014 14:57:40 +0000
Received: from [172.20.10.2] (174-226.197-178.cust.bluewin.ch
 [178.197.226.174])
 by smtp.webfaction.com (Postfix) with ESMTP id 30B7859A422C
 for <ctypes@lists.ocaml.org>; Wed,  5 Feb 2014 14:57:37 +0000 (UTC)
Date: Wed, 5 Feb 2014 15:57:33 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: ctypes@lists.ocaml.org
Message-ID: <2A07CF0FFC334833B56877C484ECD38D@erratique.ch>
In-Reply-To: <53CA4642851346998E750105E7F129C8@erratique.ch>
References: <A71CECB09FED44B1A83A217E602DAD25@erratique.ch>
 <CAAxsn=GoMSn2hEydg_ND46+1h-H3uYSUieFeKNZwvw9T=YzRGw@mail.gmail.com>
 <77A6ADA6A1CE4CCE874F266EAA9324DF@erratique.ch>
 <C0BECBDE584E4730A1FEA585A1EA59AF@erratique.ch>
 <A6CC3EBBE41841E79519A7AC9F97544A@erratique.ch>
 <CAAxsn=EgYG_v1_b6pNeqUbbVvDdOPNK6iyazOm9YqTZyNVRQsA@mail.gmail.com>
 <DC1A5D8122554149A593278594B9025F@erratique.ch>
 <9D16F320-1A31-47CD-AC2E-8D235A2DB984@recoil.org>
 <206B0BFA9D924551916F19AF9B333A3B@erratique.ch>
 <53CA4642851346998E750105E7F129C8@erratique.ch>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Subject: Re: [ocaml-ctypes] Spinning process on osx
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 05 Feb 2014 14:32:51 -0000

Le mercredi, 5 f=C3=A9vrier 2014 =C3=A0 14:56, Daniel B=C3=BCnzli a =C3=A9=
crit :
> So I tried with libffi's head =5B1=5D and the bug still there.

So now I did a switch that reverts b2636c22d55b15f55a02b3 (https://github=
.com/ocaml/ocaml/commit/b2636c22d55b15f55a02b3) with http://erratique.ch/=
tmp/4.01.0+nouwc.patch =20

So far everything seems to work well. The only =22drawback=22 is that I g=
et what it it seems a huge number of warnings (one per function linked in=
 it seems) at link time. These all have this form:

ld: warning: could not create compact unwind for =5FcamlTsdl=5F=5Fget=5Fs=
urface=5Fsize=5F1917: stack subq instruction is too different from dwarf =
stack size

Any idea if I can try to add something to my patch for silencing that war=
ning =3F There's an option for turning it *on* (-warn=5Fcompact=5Funwind)=
 or I can turn all warnings (-w), is that a good idea =3F =20

Best,

Daniel



From daniel.buenzli@erratique.ch  Wed Feb  5 15:15:59 2014
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 593C13C213
 for <ctypes@lists.ocaml.org>; Wed,  5 Feb 2014 15:15:59 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1564230
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:52056
 helo=smtp.webfaction.com)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtp id 1WB4al-0007qg-9Z (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Wed, 05 Feb 2014 15:40:48 +0000
Received: from [172.20.10.2] (174-226.197-178.cust.bluewin.ch
 [178.197.226.174])
 by smtp.webfaction.com (Postfix) with ESMTP id 96FDE2091348
 for <ctypes@lists.ocaml.org>; Wed,  5 Feb 2014 15:40:46 +0000 (UTC)
Date: Wed, 5 Feb 2014 16:40:42 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: ctypes@lists.ocaml.org
Message-ID: <AFAA0F3EDF0B4690B8448F9A97797453@erratique.ch>
In-Reply-To: <2A07CF0FFC334833B56877C484ECD38D@erratique.ch>
References: <A71CECB09FED44B1A83A217E602DAD25@erratique.ch>
 <CAAxsn=GoMSn2hEydg_ND46+1h-H3uYSUieFeKNZwvw9T=YzRGw@mail.gmail.com>
 <77A6ADA6A1CE4CCE874F266EAA9324DF@erratique.ch>
 <C0BECBDE584E4730A1FEA585A1EA59AF@erratique.ch>
 <A6CC3EBBE41841E79519A7AC9F97544A@erratique.ch>
 <CAAxsn=EgYG_v1_b6pNeqUbbVvDdOPNK6iyazOm9YqTZyNVRQsA@mail.gmail.com>
 <DC1A5D8122554149A593278594B9025F@erratique.ch>
 <9D16F320-1A31-47CD-AC2E-8D235A2DB984@recoil.org>
 <206B0BFA9D924551916F19AF9B333A3B@erratique.ch>
 <53CA4642851346998E750105E7F129C8@erratique.ch>
 <2A07CF0FFC334833B56877C484ECD38D@erratique.ch>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Subject: Re: [ocaml-ctypes] Spinning process on osx
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 05 Feb 2014 15:15:59 -0000

Le mercredi, 5 f=C3=A9vrier 2014 =C3=A0 15:57, Daniel B=C3=BCnzli a =C3=A9=
crit :
> Any idea if I can try to add something to my patch for silencing that w=
arning =3F There's an option for turning it *on* (-warn=5Fcompact=5Funwin=
d) or I can turn all warnings (-w), is that a good idea =3F

That's what I did, these warnings were slowing down my compilation times =
(the emacs compilation window is so slow on osx). So here's the patch I u=
se in my switch:
> http://erratique.ch/tmp/4.01.0+nouwc2.patch


In situations like this, I bless opam's existence...

Best,

Daniel

From daniel.buenzli@erratique.ch  Mon Feb 10 22:47:51 2014
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id DBD2B3C0D2
 for <ctypes@lists.ocaml.org>; Mon, 10 Feb 2014 22:47:51 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1566251
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:42572
 helo=smtp.webfaction.com)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtp id 1WD025-0002VC-Fe (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Mon, 10 Feb 2014 23:12:58 +0000
Received: from [172.20.10.2] (206-236.197-178.cust.bluewin.ch
 [178.197.236.206])
 by smtp.webfaction.com (Postfix) with ESMTP id 89724207D146
 for <ctypes@lists.ocaml.org>; Mon, 10 Feb 2014 23:12:56 +0000 (UTC)
Date: Tue, 11 Feb 2014 00:12:52 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: ctypes@lists.ocaml.org
Message-ID: <9E88480F53F844D49C67E488AAEC8B5D@erratique.ch>
In-Reply-To: <AFAA0F3EDF0B4690B8448F9A97797453@erratique.ch>
References: <A71CECB09FED44B1A83A217E602DAD25@erratique.ch>
 <CAAxsn=GoMSn2hEydg_ND46+1h-H3uYSUieFeKNZwvw9T=YzRGw@mail.gmail.com>
 <77A6ADA6A1CE4CCE874F266EAA9324DF@erratique.ch>
 <C0BECBDE584E4730A1FEA585A1EA59AF@erratique.ch>
 <A6CC3EBBE41841E79519A7AC9F97544A@erratique.ch>
 <CAAxsn=EgYG_v1_b6pNeqUbbVvDdOPNK6iyazOm9YqTZyNVRQsA@mail.gmail.com>
 <DC1A5D8122554149A593278594B9025F@erratique.ch>
 <9D16F320-1A31-47CD-AC2E-8D235A2DB984@recoil.org>
 <206B0BFA9D924551916F19AF9B333A3B@erratique.ch>
 <53CA4642851346998E750105E7F129C8@erratique.ch>
 <2A07CF0FFC334833B56877C484ECD38D@erratique.ch>
 <AFAA0F3EDF0B4690B8448F9A97797453@erratique.ch>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Subject: Re: [ocaml-ctypes] Spinning process on osx
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 10 Feb 2014 22:47:51 -0000

This thing is driving me crazy. In fact I reached to wrong conclusions about 4.00.1. The problem also exists there. I realized by running some programs for long enough, eventually they'd always exit with bus error 10. 

I now have a short repro case that works for both 4.00.1 and 4.01.1 [1]. It exits with bus error 10:

Exception Type: EXC_BAD_ACCESS (SIGBUS)
Exception Codes: KERN_PROTECTION_FAILURE at 0x0000000100c4f3e8

after entering the loop. I checked that a corresponding pure C program has no problem.

I rechecked the bindings of all the functions used until error [2]. Note that just adding something like a printf statement to the loop may make the program work (or at least for a longer time).

I'm at loss.

Daniel


[1]
-----min.ml-------
(* 
    Minimal OCaml SDL example. This code is in the public domain. 
    Compile with:
    ocamlfind ocamlc -package tsdl -linkpkg -o min.byte min.ml
    ocamlfind ocamlopt -package tsdl -linkpkg -o min.native min.ml
*)

open Tsdl

let main () = match Sdl.init Sdl.Init.video with 
| `Error -> exit 1
| `Ok () -> 
    match Sdl.create_window ~w:640 ~h:480 "SDL OpenGL" Sdl.Window.opengl with 
    | `Error -> exit 1
    | `Ok w ->
        Printf.printf "Enter%!";
        while true do Sdl.gl_swap_window w done;
        Sdl.destroy_window w; 
        Sdl.quit (); 
        exit 0

        let () = main ()
--------------------

[2]
https://hg.libsdl.org/SDL/file/e749005cfd72/include/SDL.h#l129
https://github.com/dbuenzli/tsdl/blob/master/src/tsdl.ml#L187

https://hg.libsdl.org/SDL/file/e749005cfd72/include/SDL_video.h#l408
https://github.com/dbuenzli/tsdl/blob/master/src/tsdl.ml#L1675

https://hg.libsdl.org/SDL/file/e749005cfd72/include/SDL_video.h#l959
https://github.com/dbuenzli/tsdl/blob/master/src/tsdl.ml#L1986



From daniel.buenzli@erratique.ch  Tue Feb 11 15:53:34 2014
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 4D9673C007
 for <ctypes@lists.ocaml.org>; Tue, 11 Feb 2014 15:53:34 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1566528
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:40779
 helo=smtp.webfaction.com)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtp id 1WDG2k-0004q5-Eq (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Tue, 11 Feb 2014 16:18:43 +0000
Received: from [172.20.10.2] (226-236.197-178.cust.bluewin.ch
 [178.197.236.226])
 by smtp.webfaction.com (Postfix) with ESMTP id 2F98259A3D31;
 Tue, 11 Feb 2014 16:18:40 +0000 (UTC)
Date: Tue, 11 Feb 2014 17:18:36 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Jeremy Yallop <yallop@gmail.com>
Message-ID: <8E00A7387FE74F49B548B18409A08BD2@erratique.ch>
In-Reply-To: <9EBE8A8685A7419099B2D422D091783E@erratique.ch>
References: <A71CECB09FED44B1A83A217E602DAD25@erratique.ch>
 <CAAxsn=GoMSn2hEydg_ND46+1h-H3uYSUieFeKNZwvw9T=YzRGw@mail.gmail.com>
 <77A6ADA6A1CE4CCE874F266EAA9324DF@erratique.ch>
 <C0BECBDE584E4730A1FEA585A1EA59AF@erratique.ch>
 <A6CC3EBBE41841E79519A7AC9F97544A@erratique.ch>
 <CAAxsn=EgYG_v1_b6pNeqUbbVvDdOPNK6iyazOm9YqTZyNVRQsA@mail.gmail.com>
 <DC1A5D8122554149A593278594B9025F@erratique.ch>
 <9D16F320-1A31-47CD-AC2E-8D235A2DB984@recoil.org>
 <206B0BFA9D924551916F19AF9B333A3B@erratique.ch>
 <53CA4642851346998E750105E7F129C8@erratique.ch>
 <2A07CF0FFC334833B56877C484ECD38D@erratique.ch>
 <AFAA0F3EDF0B4690B8448F9A97797453@erratique.ch>
 <9E88480F53F844D49C67E488AAEC8B5D@erratique.ch>
 <CAAxsn=GawQUD1P7tYOi2-bZqFaZbKab8-SjpEhRZ=q4kz0khLQ@mail.gmail.com>
 <9EBE8A8685A7419099B2D422D091783E@erratique.ch>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Spinning process on osx
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 11 Feb 2014 15:53:34 -0000

I managed to get a little bit more info by compiling libffi with `--enable-debug` and everything compiled with -g under ocaml.

Using lldb it seems something bad happens during the setup of ffi_call call in ctypes's ctypes_call function. See the `->' in the second disassemble below which points to this line:

https://github.com/ocamllabs/ocaml-ctypes/blob/ocaml-ctypes-0.2.2/src/ctypes-foreign-base/ffi_call_stubs.c#L302

Daniel

> lldb bug.native 
Current executable set to 'bug.native' (x86_64).
(lldb) run
Process 43924 launched: '/Users/dbuenzli/bug/bug.native' (x86_64)
Process 43924 stopped
* thread #1: tid = 0x26ff7d, 0x00000001007a37b0, queue = 'com.apple.main-thread, stop reason = EXC_BAD_ACCESS (code=2, address=0x1007a37b0)
    frame #0: 0x00000001007a37b0
-> 0x1007a37b0:  xorb   %ch, 65539(%rbx)
   0x1007a37b6:  addb   %al, (%rax)
   0x1007a37b8:  addl   (%rax), %eax
   0x1007a37ba:  addb   %al, (%rax)
(lldb) bt
* thread #1: tid = 0x26ff7d, 0x00000001007a37b0, queue = 'com.apple.main-thread, stop reason = EXC_BAD_ACCESS (code=2, address=0x1007a37b0)
    frame #0: 0x00000001007a37b0
    frame #1: 0x0000000100076d50 bug.native`ctypes_call(function=4303202416, callspec_=4303295728, argwriter=4302976944, rvreader=4303196432) + 304 at ffi_call_stubs.c:298
    frame #2: 0x000000010003ae3c bug.native`.L141 + 24
(lldb) up
frame #1: 0x0000000100076d50 bug.native`ctypes_call(function=4303202416, callspec_=4303295728, argwriter=4302976944, rvreader=4303196432) + 304 at ffi_call_stubs.c:298
(lldb) di --mixed -c 13 -s $pc-20
bug.native`ctypes_call + 284 at ffi_call_stubs.c:293
   0x100076d3c:  clc    
   0x100076d3d:  addq   %rdi, %r15
bug.native`ctypes_call + 288 at ffi_call_stubs.c:298
   0x100076d40:  callq  0x1000870c0               ; caml_copy_int64
   0x100076d45:  movq   %r14, %rdi
   0x100076d48:  movq   %rax, %rsi
   0x100076d4b:  callq  0x100094bd0               ; caml_callback
bug.native`ctypes_call + 304 at ffi_call_stubs.c:302
-> 0x100076d50:  movq   -64(%rbp), %rax
   0x100076d54:  movq   64(%rax), %rdi
bug.native`ctypes_call + 312 at ffi_call_stubs.c:300
   0x100076d58:  movq   -56(%rbp), %rax
   0x100076d5c:  movq   8(%rax), %rsi
bug.native`ctypes_call + 320 at ffi_call_stubs.c:302
   0x100076d60:  movq   %r15, %rdx
   0x100076d63:  movq   %r13, %rcx
   0x100076d66:  callq  0x1000979f0               ; symbol stub for: caml_system__code_end
(lldb) frame variable
(value) function = 4303202416
(value) callspec_ = 4303295728
(value) argwriter = 4302976944
(value) rvreader = 4303196432
(caml__roots_block) caml__roots_function = {
  next = 0x0000000000000000
  ntables = 4
  nitems = 1
  tables = {
    [0] = 0x00007fff5fbff6d8
    [1] = 0x00007fff5fbff6d0
    [2] = 0x00007fff5fbff6c8
    [3] = 0x00007fff5fbff6c0
    [4] = 0x000000010003ad20
  }
}
(caml__roots_block) caml__roots_function = {
  next = 0x0000000000000000
  ntables = 4
  nitems = 1
  tables = {
    [0] = 0x00007fff5fbff6d8
    [1] = 0x00007fff5fbff6d0
    [2] = 0x00007fff5fbff6c8
    [3] = 0x00007fff5fbff6c0
    [4] = 0x000000010003ad20
  }
}
(caml__roots_block *) caml__frame = <register r12 is not available>
(int) caml__dummy_function = 0
(size_t) arg_array_offset = <variable not available>
(char *) return_slot = <register r15 is not available>
(void (*)()) cfunction = <variable not available>
(callspec *) callspec = <no location, value may have been optimized out>
(int) roffset = <no location, value may have been optimized out>
(size_t) bytes = <no location, value may have been optimized out>
(char *) callbuffer = <no location, value may have been optimized out>



From daniel.buenzli@erratique.ch  Tue Feb 11 17:58:59 2014
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id DD3CC3C007
 for <ctypes@lists.ocaml.org>; Tue, 11 Feb 2014 17:58:59 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1566528
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:49183
 helo=smtp.webfaction.com)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtp id 1WDI08-0007as-iZ (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Tue, 11 Feb 2014 18:24:09 +0000
Received: from [172.20.10.2] (226-236.197-178.cust.bluewin.ch
 [178.197.236.226])
 by smtp.webfaction.com (Postfix) with ESMTP id 849F120796AA;
 Tue, 11 Feb 2014 18:24:07 +0000 (UTC)
Date: Tue, 11 Feb 2014 19:24:03 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Jeremy Yallop <yallop@gmail.com>
Message-ID: <B2264E2AC0E846F6888AB6E20455C557@erratique.ch>
In-Reply-To: <8E00A7387FE74F49B548B18409A08BD2@erratique.ch>
References: <A71CECB09FED44B1A83A217E602DAD25@erratique.ch>
 <CAAxsn=GoMSn2hEydg_ND46+1h-H3uYSUieFeKNZwvw9T=YzRGw@mail.gmail.com>
 <77A6ADA6A1CE4CCE874F266EAA9324DF@erratique.ch>
 <C0BECBDE584E4730A1FEA585A1EA59AF@erratique.ch>
 <A6CC3EBBE41841E79519A7AC9F97544A@erratique.ch>
 <CAAxsn=EgYG_v1_b6pNeqUbbVvDdOPNK6iyazOm9YqTZyNVRQsA@mail.gmail.com>
 <DC1A5D8122554149A593278594B9025F@erratique.ch>
 <9D16F320-1A31-47CD-AC2E-8D235A2DB984@recoil.org>
 <206B0BFA9D924551916F19AF9B333A3B@erratique.ch>
 <53CA4642851346998E750105E7F129C8@erratique.ch>
 <2A07CF0FFC334833B56877C484ECD38D@erratique.ch>
 <AFAA0F3EDF0B4690B8448F9A97797453@erratique.ch>
 <9E88480F53F844D49C67E488AAEC8B5D@erratique.ch>
 <CAAxsn=GawQUD1P7tYOi2-bZqFaZbKab8-SjpEhRZ=q4kz0khLQ@mail.gmail.com>
 <9EBE8A8685A7419099B2D422D091783E@erratique.ch>
 <8E00A7387FE74F49B548B18409A08BD2@erratique.ch>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Spinning process on osx
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 11 Feb 2014 17:58:59 -0000

In order to reduce the investigation surface I made the bug self contained so that you just need ctypes, the C library libsdl2 and this file (i.e. no need for the whole tsdl):

http://erratique.ch/tmp/bug.ml

So here are the steps:

brew install sdl2
opam install ctypes
cd /tmp
curl -O http://erratique.ch/tmp/bug.ml
ocamlfind ocamlopt -ccopt "`sdl2-config --libs`" \
             -package ctypes,ctypes.foreign -linkpkg \
             -o bug.native bug.ml

./bug.native # booom

Best,

Daniel

From daniel.buenzli@erratique.ch  Tue Feb 11 18:48:40 2014
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 8C56F3C007
 for <ctypes@lists.ocaml.org>; Tue, 11 Feb 2014 18:48:40 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1566528
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:56855
 helo=smtp.webfaction.com)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1WDImD-0007W5-1A (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Tue, 11 Feb 2014 19:13:50 +0000
Received: from [172.20.10.2] (226-236.197-178.cust.bluewin.ch
 [178.197.236.226])
 by smtp.webfaction.com (Postfix) with ESMTP id 149252079A36;
 Tue, 11 Feb 2014 19:13:47 +0000 (UTC)
Date: Tue, 11 Feb 2014 20:13:44 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Jeremy Yallop <yallop@gmail.com>
Message-ID: <B7804DEE997D42D5A92F02B6B333E297@erratique.ch>
In-Reply-To: <B2264E2AC0E846F6888AB6E20455C557@erratique.ch>
References: <A71CECB09FED44B1A83A217E602DAD25@erratique.ch>
 <CAAxsn=GoMSn2hEydg_ND46+1h-H3uYSUieFeKNZwvw9T=YzRGw@mail.gmail.com>
 <77A6ADA6A1CE4CCE874F266EAA9324DF@erratique.ch>
 <C0BECBDE584E4730A1FEA585A1EA59AF@erratique.ch>
 <A6CC3EBBE41841E79519A7AC9F97544A@erratique.ch>
 <CAAxsn=EgYG_v1_b6pNeqUbbVvDdOPNK6iyazOm9YqTZyNVRQsA@mail.gmail.com>
 <DC1A5D8122554149A593278594B9025F@erratique.ch>
 <9D16F320-1A31-47CD-AC2E-8D235A2DB984@recoil.org>
 <206B0BFA9D924551916F19AF9B333A3B@erratique.ch>
 <53CA4642851346998E750105E7F129C8@erratique.ch>
 <2A07CF0FFC334833B56877C484ECD38D@erratique.ch>
 <AFAA0F3EDF0B4690B8448F9A97797453@erratique.ch>
 <9E88480F53F844D49C67E488AAEC8B5D@erratique.ch>
 <CAAxsn=GawQUD1P7tYOi2-bZqFaZbKab8-SjpEhRZ=q4kz0khLQ@mail.gmail.com>
 <9EBE8A8685A7419099B2D422D091783E@erratique.ch>
 <8E00A7387FE74F49B548B18409A08BD2@erratique.ch>
 <B2264E2AC0E846F6888AB6E20455C557@erratique.ch>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Spinning process on osx
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 11 Feb 2014 18:48:40 -0000

Excellent ! I can now even rule out SDL, mach_absolute_time [1] does the job. 

The minimal so far, completely self-contained is at the end of the file. Note that slightly tweaking the program (e.g. print the results in the loop) makes the program work.

Best,

Daniel

[1] http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/osfmk/mach/mach_time.h


--- bug.ml ---
(* 
   The annoying bug.
   Compile with
   ocamlfind ocamlopt -package ctypes,ctypes.foreign -linkpkg \
             -o bug.native bug.ml
*)

open Ctypes
open Foreign

let mach_absolute_time = 
  foreign "mach_absolute_time" (void @-> returning uint64_t)

let main () = 
  Printf.printf "Enter%!";
  while true do ignore (mach_absolute_time ()) done
          
let () = main ()

----







From markus.weissmann@in.tum.de  Wed Feb 12 07:34:35 2014
Return-Path: <markus.weissmann@in.tum.de>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id B3C793C1F1
 for <ctypes@lists.ocaml.org>; Wed, 12 Feb 2014 07:34:35 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1567012 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [131.159.0.8 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-out1.informatik.tu-muenchen.de ([131.159.0.8]:48603
 helo=smtp1.informatik.tu-muenchen.de)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1:DHE-RSA-AES256-SHA:256)
 id 1WDUjN-0007qv-EQ (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <markus.weissmann@in.tum.de>); Wed, 12 Feb 2014 07:59:47 +0000
Received: from webmail.in.tum.de (localhost [127.0.0.1])
 by vmwebmail1.informatik.tu-muenchen.de (Postfix) with ESMTP id 83D9D240315
 for <ctypes@lists.ocaml.org>; Wed, 12 Feb 2014 08:59:13 +0100 (CET)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8;
 format=flowed
Content-Transfer-Encoding: 8bit
Date: Wed, 12 Feb 2014 08:59:13 +0100
From: =?UTF-8?Q?Markus_Wei=C3=9Fmann?= <markus.weissmann@in.tum.de>
To: <ctypes@lists.ocaml.org>
Message-ID: <210eb5fd94b2c416eaa888ec860b8a74@in.tum.de>
X-Sender: markus.weissmann@in.tum.de
User-Agent: Roundcube Webmail/0.8.1
Subject: [ocaml-ctypes] C-array of fixed size,
	#defines and C11 anonymous unions
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 12 Feb 2014 07:34:35 -0000

Hello ctypes list,

1.) I was wondering how fixed-size C-arrays should be handled in 
ctypes;
there exist several APIs that use a fixed-size array as part of a 
struct, e.g. ifreq (used to configure network interfaces via ioctl(2) on 
linux)

struct ifreq {
   union {
     char ifrn_name[16];
   } ifr_ifrn;
...

How do I handle that in ctypes?


2.) Is there a "clever" way of handling C-#defines? One obvious 
possibility is to look them up manually and then hope that e.g. BUFSIZ 
is the same on all machines used;
another would be to introduce a stub.c file just to handle the 
#defines... defeating somehow the purpose of ctypes.
Something that would work, too, is to write a generator in C that 
creates a defines.ml for me (e.g. "printf("let bufsiz = %d\n", BUFSIZ))
Has someone found the holy grail (tm) for this problem?


3.) The C11 standard allows for unnamed unions -- not a concrete 
problem right now, but is there a more elegant way than to introduce a 
new name for the union in my ocaml/ctypes code?

typedef struct {
   union {
     float f;
     int i;
   };
} some_t;
...
some_t x;
x.f = 4.5;
printf("%d", x.i);


Best regards,

-Markus

-- 
Markus Weißmann, M.Sc.
Technische Universität München
Institut für Informatik
Boltzmannstr. 3
D-85748 Garching
Germany
http://wwwknoll.in.tum.de/


From daniel.buenzli@erratique.ch  Wed Feb 12 09:06:39 2014
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 45D2A3C0BD
 for <ctypes@lists.ocaml.org>; Wed, 12 Feb 2014 09:06:39 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1567012
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:38042
 helo=smtp.webfaction.com)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1WDWAX-00080J-30 (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Wed, 12 Feb 2014 09:31:50 +0000
Received: from [172.20.10.2] (226-236.197-178.cust.bluewin.ch
 [178.197.236.226])
 by smtp.webfaction.com (Postfix) with ESMTP id A915B21B3F72;
 Wed, 12 Feb 2014 09:31:48 +0000 (UTC)
Date: Wed, 12 Feb 2014 10:31:46 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: =?utf-8?Q?Markus_Wei=C3=9Fmann?= <markus.weissmann@in.tum.de>
Message-ID: <03B6501ECCA442A99BA007901CD424A8@erratique.ch>
In-Reply-To: <210eb5fd94b2c416eaa888ec860b8a74@in.tum.de>
References: <210eb5fd94b2c416eaa888ec860b8a74@in.tum.de>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] C-array of fixed size,
 #defines and C11 anonymous unions
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 12 Feb 2014 09:06:39 -0000

Regarding you questions 1) and 2) you can have a look at my answer to this question on stackoverflow: 

http://stackoverflow.com/questions/20851390/passing-a-string-to-a-c-library-from-ocaml-using-ctypes-and-foreign/

Best,

Daniel

From florian.pichlmeier@mytum.de  Wed Feb 12 09:58:48 2014
Return-Path: <florian.pichlmeier@mytum.de>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 5B19E3C0BD
 for <ctypes@lists.ocaml.org>; Wed, 12 Feb 2014 09:58:48 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1567012 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [129.187.255.135 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mailout1.lrz.de ([129.187.255.135]:57113)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:DHE-RSA-AES256-GCM-SHA384:256)
 id 1WDWz0-0000us-0j (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <florian.pichlmeier@mytum.de>); Wed, 12 Feb 2014 10:23:58 +0000
Received: from lxmhs65.srv.lrz.de (localhost [127.0.0.1])
 by mailout1.lrz.de (Postfix) with ESMTP id 3fPH5916s4z1xsT
 for <ctypes@lists.ocaml.org>; Wed, 12 Feb 2014 11:23:57 +0100 (CET)
X-Virus-Scanned: by amavisd-new at lrz.de in lxmhs65.srv.lrz.de
Received: from mailout1.lrz.de ([127.0.0.1])
 by lxmhs65.srv.lrz.de (lxmhs65.srv.lrz.de [127.0.0.1]) (amavisd-new,
 port 10002) with ESMTP id KGs4J5U2K7wW for <ctypes@lists.ocaml.org>;
 Wed, 12 Feb 2014 11:23:56 +0100 (CET)
Received: from magellan1.ze.tum.de (magellan1.ze.tum.de [129.187.39.23])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mailout1.lrz.de (Postfix) with ESMTPS id 3fPH586RW6z1xsm
 for <ctypes@lists.ocaml.org>; Wed, 12 Feb 2014 11:23:56 +0100 (CET)
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
From: "Florian Pichlmeier" <florian.pichlmeier@mytum.de>
To: ctypes@lists.ocaml.org
Date: Wed, 12 Feb 2014 10:23:56 -0000
Message-ID: <20140212102356.63302.28414@magellan1.ze.tum.de>
Subject: [ocaml-ctypes] ctypes oasis
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 12 Feb 2014 09:58:48 -0000

Hi,

i am still writing on my small zeromq binding, and thanks to your contributions it grows, but
i still have problems with runtime exceptions like this one

Fatal error: exception Dl.DL_error("./bin-client: undefined symbol: zauth_new")

I was wondering if the reason for this problem lies with in my oasis file

OASISFormat: 0.3
Name:        czmq
Version:     0.1.0
Synopsis:    OCaml binding for the High-level C Binding for Zeromq
Authors:     Florian Pichlmeier
License:     LGPL-3.0 with OCaml linking exception
Plugins:     META (0.3), StdFiles (0.3), DevFiles (0.3)

BuildDepends:
  ctypes.foreign,
  threads

PreInstallCommand: cc -shared -o _build/lib/dllczmq_stubs.so -lsodium -lczmq -lzmq

Library "czmq"
  Path:       lib
  BuildTools: ocamlbuild
  Modules:    Czmq
  InternalModules: Context,
              Socket,
              Poller,
              Directory,
              Auth,
              Beacon,
              Cert,
              Certstore,
              Config,
              Clock,
              Frame,
              Msg
#             Sys Structs,
  CSources:   czmq.c
  CCOpt:      -cclib,-Xlinker,-cclib,-no-as-needed,-Wl
  CCLib:      -lsodium -lczmq -lzmq
  DllLib:     -lczmq_stubs

I have added the no-as-needed part to it but it still doesnt work. 

Is there an obvious mistake in my oasis file?

Best regards,

Florian 

From daniel.buenzli@erratique.ch  Wed Feb 12 12:21:35 2014
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id DA4373C20E
 for <ctypes@lists.ocaml.org>; Wed, 12 Feb 2014 12:21:35 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1567012
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:57958
 helo=smtp.webfaction.com)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1WDZDD-0007Ux-15 (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Wed, 12 Feb 2014 12:46:47 +0000
Received: from [172.20.10.2] (226-236.197-178.cust.bluewin.ch
 [178.197.236.226])
 by smtp.webfaction.com (Postfix) with ESMTP id B2B07225F0CD;
 Wed, 12 Feb 2014 12:46:45 +0000 (UTC)
Date: Wed, 12 Feb 2014 13:46:42 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Florian Pichlmeier <florian.pichlmeier@mytum.de>
Message-ID: <D7BD24AA2C2144B58A73D227D0A9EA57@erratique.ch>
In-Reply-To: <20140212102356.63302.28414@magellan1.ze.tum.de>
References: <20140212102356.63302.28414@magellan1.ze.tum.de>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] ctypes oasis
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 12 Feb 2014 12:21:35 -0000

Le mercredi, 12 f=C3=A9vrier 2014 =C3=A0 11:23, =46lorian Pichlmeier a =C3=
=A9crit :
> =46atal error: exception Dl.DL=5Ferror(=22./bin-client: undefined symbo=
l: zauth=5Fnew=22)
> =20
> I was wondering if the reason for this problem lies with in my oasis fi=
le
I can't help you with oasis and I would rather suggest you to drop it (it=
 doesn't bring you much anyways), so that you actually know what you are =
doing build-wise. By following the steps I describe here: =20

https://github.com/ocamllabs/ocaml-ctypes/issues/51=23issuecomment-307296=
75

You should get to something that will handle dynamic linking for byte and=
 native code and in the toplevel, all this by just using the ocamlfind pa=
ckage. =20

=46eel free to ask me any question about it. =20

Best,

Daniel



From kosmo.zb@gmail.com  Wed Feb 12 13:25:44 2014
Return-Path: <kosmo.zb@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id E2C103C20E
 for <ctypes@lists.ocaml.org>; Wed, 12 Feb 2014 13:25:44 +0000 (GMT)
X-Cam-SpamDetails: score -0.6 from SpamAssassin-3.3.2-1567012 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.215.54 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (kosmo.zb[at]gmail.com)
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-la0-f54.google.com ([209.85.215.54]:41837)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1WDaDH-00071H-F9 (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <kosmo.zb@gmail.com>); Wed, 12 Feb 2014 13:50:57 +0000
Received: by mail-la0-f54.google.com with SMTP id y1so7265234lam.27
 for <ctypes@lists.ocaml.org>; Wed, 12 Feb 2014 05:50:55 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:sender:in-reply-to:references:date:message-id:subject
 :from:to:cc:content-type;
 bh=5qaUA6pdXYLKWKef6weXwpdjsWswLyMm3HrJfI92yTw=;
 b=mJkqjhqprejGDP2qyJ1wUD348fsPknRB2848VPgZQ3eUS3z1oK1rWKiaCVsSyiyIs2
 g98GGI5d0Z9Kb/g3QxfvNJi7dZst5fqe/Cs4moSyOQV/OVCyQ46aazvzJRDdlDWiCB8u
 OBUGFOycReZcjmwhrVCGTwOohn5C8GzFLPjQiQ4g3hTwPEQrDfoFok4jRrtnpZOTxJwR
 jIsfYdSgmBuljAThz/llT9d1Sx0F8KgwZVeBRVj/cEpToSB2eUe76ASZstC8MrsJU2p9
 oJCqaM3r5inc63eCBvrJmW0RPWYCwfIwsclaaP1ecoF2NfsMvlwjlCv8AmyR5JdPcmNg
 DuGA==
MIME-Version: 1.0
X-Received: by 10.112.211.233 with SMTP id nf9mr1903574lbc.50.1392213054656;
 Wed, 12 Feb 2014 05:50:54 -0800 (PST)
Sender: kosmo.zb@gmail.com
Received: by 10.112.149.132 with HTTP; Wed, 12 Feb 2014 05:50:54 -0800 (PST)
In-Reply-To: <20140212102356.63302.28414@magellan1.ze.tum.de>
References: <20140212102356.63302.28414@magellan1.ze.tum.de>
Date: Wed, 12 Feb 2014 13:50:54 +0000
X-Google-Sender-Auth: 0_gbQvbPq1plVWXewKjLMSThb4k
Message-ID: <CAAWM5TzcY5eE28a6UVYaPOfFs2_f48ct+EKDwDpcP2twMV06+A@mail.gmail.com>
From: David Sheets <sheets@alum.mit.edu>
To: Florian Pichlmeier <florian.pichlmeier@mytum.de>
Content-Type: text/plain; charset=ISO-8859-1
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] ctypes oasis
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 12 Feb 2014 13:25:45 -0000

On Wed, Feb 12, 2014 at 10:23 AM, Florian Pichlmeier
<florian.pichlmeier@mytum.de> wrote:
> Hi,
>
> i am still writing on my small zeromq binding, and thanks to your contributions it grows, but
> i still have problems with runtime exceptions like this one
>
> Fatal error: exception Dl.DL_error("./bin-client: undefined symbol: zauth_new")
>
> I was wondering if the reason for this problem lies with in my oasis file
>
> OASISFormat: 0.3
> Name:        czmq
> Version:     0.1.0
> Synopsis:    OCaml binding for the High-level C Binding for Zeromq
> Authors:     Florian Pichlmeier
> License:     LGPL-3.0 with OCaml linking exception
> Plugins:     META (0.3), StdFiles (0.3), DevFiles (0.3)
>
> BuildDepends:
>   ctypes.foreign,
>   threads
>
> PreInstallCommand: cc -shared -o _build/lib/dllczmq_stubs.so -lsodium -lczmq -lzmq
>
> Library "czmq"
>   Path:       lib
>   BuildTools: ocamlbuild
>   Modules:    Czmq
>   InternalModules: Context,
>               Socket,
>               Poller,
>               Directory,
>               Auth,
>               Beacon,
>               Cert,
>               Certstore,
>               Config,
>               Clock,
>               Frame,
>               Msg
> #             Sys Structs,
>   CSources:   czmq.c
>   CCOpt:      -cclib,-Xlinker,-cclib,-no-as-needed,-Wl
>   CCLib:      -lsodium -lczmq -lzmq
>   DllLib:     -lczmq_stubs
>
> I have added the no-as-needed part to it but it still doesnt work.
>
> Is there an obvious mistake in my oasis file?

Hi Florian,

Please provide a link to the repository and revision/branch of the
buggy code so that interested parties can independently investigate
the build- and run-time behavior.

Thanks,

David

> Best regards,
>
> Florian
> _______________________________________________
> Ctypes mailing list
> Ctypes@lists.ocaml.org
> http://lists.ocaml.org/listinfo/ctypes

From florian.pichlmeier@mytum.de  Wed Feb 12 13:56:09 2014
Return-Path: <florian.pichlmeier@mytum.de>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 9CACF3C20E
 for <ctypes@lists.ocaml.org>; Wed, 12 Feb 2014 13:56:09 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1567012 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [129.187.255.136 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mailout2.lrz.de ([129.187.255.136]:46449)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:DHE-RSA-AES256-GCM-SHA384:256)
 id 1WDagj-0005Vd-7T (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <florian.pichlmeier@mytum.de>); Wed, 12 Feb 2014 14:21:21 +0000
Received: from lxmhs66.srv.lrz.de (localhost [127.0.0.1])
 by mailout2.lrz.de (Postfix) with ESMTP id 3fPNM44ZTnzyVL;
 Wed, 12 Feb 2014 15:21:20 +0100 (CET)
X-Virus-Scanned: by amavisd-new at lrz.de in lxmhs66.srv.lrz.de
Received: from mailout2.lrz.de ([127.0.0.1])
 by lxmhs66.srv.lrz.de (lxmhs66.srv.lrz.de [127.0.0.1]) (amavisd-new,
 port 10002)
 with ESMTP id DNDG-EMWMOFe; Wed, 12 Feb 2014 15:21:20 +0100 (CET)
Received: from magellan1.ze.tum.de (magellan1.ze.tum.de [129.187.39.23])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mailout2.lrz.de (Postfix) with ESMTPS id 3fPNM41vhLzySR;
 Wed, 12 Feb 2014 15:21:19 +0100 (CET)
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
From: "Florian Pichlmeier" <florian.pichlmeier@mytum.de>
To: "David Sheets" <sheets@alum.mit.edu>, ctypes@lists.ocaml.org
In-reply-to: <CAAWM5TzcY5eE28a6UVYaPOfFs2_f48ct+EKDwDpcP2twMV06+A@mail.gmail.com>
References: <CAAWM5TzcY5eE28a6UVYaPOfFs2_f48ct+EKDwDpcP2twMV06+A@mail.gmail.com>
 <20140212102356.63302.28414@magellan1.ze.tum.de>
Date: Wed, 12 Feb 2014 14:21:19 -0000
Message-ID: <20140212142119.63302.30212@magellan1.ze.tum.de>
Subject: Re: [ocaml-ctypes] ctypes oasis
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 12 Feb 2014 13:56:09 -0000

Hi David,

thats the link to my test branch

https://github.com/fmp88/ocaml-czmq/tree/zmqv4_exp

I have added a small test scenario, to reproduce my bug

https://github.com/fmp88/ocaml-czmq/tree/zmqv4_exp/examples/hello_world

Thanks,

Florian

David Sheets <sheets@alum.mit.edu> wrote:


> On Wed, Feb 12, 2014 at 10:23 AM, Florian Pichlmeier
> <florian.pichlmeier@mytum.de> wrote:
> 
> > Hi,
> > 
> > i am still writing on my small zeromq binding, and thanks to your contributions it grows, but
> > i still have problems with runtime exceptions like this one
> > 
> > Fatal error: exception Dl.DL_error("./bin-client: undefined symbol: zauth_new")
> > 
> > I was wondering if the reason for this problem lies with in my oasis file
> > 
> > OASISFormat: 0.3
> > Name:        czmq
> > Version:     0.1.0
> > Synopsis:    OCaml binding for the High-level C Binding for Zeromq
> > Authors:     Florian Pichlmeier
> > License:     LGPL-3.0 with OCaml linking exception
> > Plugins:     META (0.3), StdFiles (0.3), DevFiles (0.3)
> > 
> > BuildDepends:
> >   ctypes.foreign,
> >   threads
> > 
> > PreInstallCommand: cc -shared -o _build/lib/dllczmq_stubs.so -lsodium -lczmq -lzmq
> > 
> > Library "czmq"
> >   Path:       lib
> >   BuildTools: ocamlbuild
> >   Modules:    Czmq
> >   InternalModules: Context,
> >               Socket,
> >               Poller,
> >               Directory,
> >               Auth,
> >               Beacon,
> >               Cert,
> >               Certstore,
> >               Config,
> >               Clock,
> >               Frame,
> >               Msg
> > #             Sys Structs,
> >   CSources:   czmq.c
> >   CCOpt:      -cclib,-Xlinker,-cclib,-no-as-needed,-Wl
> >   CCLib:      -lsodium -lczmq -lzmq
> >   DllLib:     -lczmq_stubs
> > 
> > I have added the no-as-needed part to it but it still doesnt work.
> > 
> > Is there an obvious mistake in my oasis file?
> > 
> > 
> 
> Hi Florian,
> 
> Please provide a link to the repository and revision/branch of the
> buggy code so that interested parties can independently investigate
> the build- and run-time behavior.
> 
> Thanks,
> 
> David
> 
> 
> > Best regards,
> > 
> > Florian
> > _______________________________________________
> > Ctypes mailing list
> > Ctypes@lists.ocaml.org
> > http://lists.ocaml.org/listinfo/ctypes
> > 
> > 
> 
> 

From yallop@gmail.com  Fri Feb 14 11:38:39 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 5A4043C577
 for <ctypes@lists.ocaml.org>; Fri, 14 Feb 2014 11:38:39 +0000 (GMT)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1567864 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.216.173 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qc0-f173.google.com ([209.85.216.173]:50982)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1WEHUr-0001dm-1x (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Fri, 14 Feb 2014 12:03:58 +0000
Received: by mail-qc0-f173.google.com with SMTP id i8so19526937qcq.4
 for <ctypes@lists.ocaml.org>; Fri, 14 Feb 2014 04:03:56 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type:content-transfer-encoding;
 bh=2FJSv6SCrE1tiDsOjj8pYpMdTtaV4hOd0RSMJtJUp2s=;
 b=UFPnuppqtsT/b+8Q5ctiY/cHLaht8aKFVcgD56tL96WA+bBml4xu0IGP2fKIY8oHuI
 0wwMoabSy64L5G2q2NSZx95sS4bso5VqxeU0jIRH6j3GWzGFhGNv2AvXZRTLrCohazBS
 DbJwTHYU4jg233BZy0iymPZXraI5JqSqimFY8LV8/C7UXUkbwx3DME3xaOMxXLu90pnj
 wSe6TGLGQ6RqRseY8gyAdgCO1CNXFOvBjFseiXQXMbDgodLmFqcwofTZ7yeskr82HInw
 KJCdMjloPtFok9cmElPQHTgHufzKb0TgsNnUXdT+/tWj5YowfSOqdsuRN1LQpts1JoAe
 fHuA==
MIME-Version: 1.0
X-Received: by 10.140.94.214 with SMTP id g80mr11478608qge.19.1392379436329;
 Fri, 14 Feb 2014 04:03:56 -0800 (PST)
Received: by 10.229.131.65 with HTTP; Fri, 14 Feb 2014 04:03:56 -0800 (PST)
In-Reply-To: <210eb5fd94b2c416eaa888ec860b8a74@in.tum.de>
References: <210eb5fd94b2c416eaa888ec860b8a74@in.tum.de>
Date: Fri, 14 Feb 2014 12:03:56 +0000
Message-ID: <CAAxsn=GYmZwcjmHqWKV-OPHyRtHm9Qbxo4_Ku_qRpTt0-QSJMg@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: ctypes@lists.ocaml.org
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Subject: Re: [ocaml-ctypes] C-array of fixed size,
	#defines and C11 anonymous unions
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 14 Feb 2014 11:38:39 -0000

On 12/02/2014, Markus Wei=C3=9Fmann <markus.weissmann@in.tum.de> wrote:
> 1.) I was wondering how fixed-size C-arrays should be handled in
> ctypes;
> there exist several APIs that use a fixed-size array as part of a
> struct, e.g. ifreq (used to configure network interfaces via ioctl(2) on
> linux)
>
> struct ifreq {
>    union {
>      char ifrn_name[16];
>    } ifr_ifrn;
> ...
>
> How do I handle that in ctypes?

Array members are supported without the need to do anything special.

  type ifreq
  let ifreq : ifreq structure typ =3D structure "ifreq"
  let ifr_ifrn =3D field ifreq "ifr_ifrn" (array 16 char)

> 2.) Is there a "clever" way of handling C-#defines?
[...]
> Something that would work, too, is to write a generator in C that
> creates a defines.ml for me (e.g. "printf("let bufsiz =3D %d\n", BUFSIZ))

This is probably the best approach at the moment.  It's likely that
there'll eventually be some support for this in ctypes itself.  The
stub generation code (in trunk, but not yet released) already supports
some function-like macros; it may eventually handle unparameterized
macros like BUFSIZ as well.

> 3.) The C11 standard allows for unnamed unions -- not a concrete
> problem right now, but is there a more elegant way than to introduce a
> new name for the union in my ocaml/ctypes code?
>
> typedef struct {
>    union {
>      float f;
>      int i;
>    };
> } some_t;
> ...
> some_t x;
> x.f =3D 4.5;
> printf("%d", x.i);

I think that naming the union is the best approach with the current
ctypes release.  Things will improve when we have support for
retrieving the struct layout from C (issue #62).  At that point making
'f' and 'i' members of the surrounding struct (some_t) will give you
something that behaves like the anonymous union, since C will report
that the offsets of the fields are the same.

From yallop@gmail.com  Mon Feb 17 09:17:45 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 71F2E3C214
 for <ctypes@lists.ocaml.org>; Mon, 17 Feb 2014 09:17:45 +0000 (GMT)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1568594 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.216.179 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qc0-f179.google.com ([209.85.216.179]:60116)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1WFKjI-00007Z-9L (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Mon, 17 Feb 2014 09:43:13 +0000
Received: by mail-qc0-f179.google.com with SMTP id e16so23761728qcx.10
 for <ctypes@lists.ocaml.org>; Mon, 17 Feb 2014 01:43:11 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=0i4uyDY2lWRhytnMYQt1+n5H26MfWwy3SB0CgHdWN+Y=;
 b=o6oVjtjIau4fDt3LdqTMO/9Kh/A3Pjg4e4U7j0/Wsx7gFDBvIl7IvqnqXe3Dsz/4ze
 /llRgJwsniqCOJ8ojO5KqkJ5EwEybbevNaUoMGj4gAY3J6RxYjGFooRYzVPk/9St/sRT
 BueaB/emGjlMRnn6uCJX/PMeucaK1roUVyObYm3wl2pJE8SH9sjmNxyyimHtHjnhPTCW
 hkYJ8J+SoCliEgKWkxUcR7IoDFM7nOUuzTqaaYKCkO2tcjVj6l0YvOu9/Vi6Yua2lDTG
 vWpHi0+6x/2y9STmxzB3wHSjCJF/jMIiRHkJwf28BQe7aqarA8p5LyUf4Eitf+riUHhN
 taHQ==
MIME-Version: 1.0
X-Received: by 10.140.94.214 with SMTP id g80mr31320696qge.19.1392630191774;
 Mon, 17 Feb 2014 01:43:11 -0800 (PST)
Received: by 10.229.131.65 with HTTP; Mon, 17 Feb 2014 01:43:11 -0800 (PST)
In-Reply-To: <B7804DEE997D42D5A92F02B6B333E297@erratique.ch>
References: <A71CECB09FED44B1A83A217E602DAD25@erratique.ch>
 <CAAxsn=GoMSn2hEydg_ND46+1h-H3uYSUieFeKNZwvw9T=YzRGw@mail.gmail.com>
 <77A6ADA6A1CE4CCE874F266EAA9324DF@erratique.ch>
 <C0BECBDE584E4730A1FEA585A1EA59AF@erratique.ch>
 <A6CC3EBBE41841E79519A7AC9F97544A@erratique.ch>
 <CAAxsn=EgYG_v1_b6pNeqUbbVvDdOPNK6iyazOm9YqTZyNVRQsA@mail.gmail.com>
 <DC1A5D8122554149A593278594B9025F@erratique.ch>
 <9D16F320-1A31-47CD-AC2E-8D235A2DB984@recoil.org>
 <206B0BFA9D924551916F19AF9B333A3B@erratique.ch>
 <53CA4642851346998E750105E7F129C8@erratique.ch>
 <2A07CF0FFC334833B56877C484ECD38D@erratique.ch>
 <AFAA0F3EDF0B4690B8448F9A97797453@erratique.ch>
 <9E88480F53F844D49C67E488AAEC8B5D@erratique.ch>
 <CAAxsn=GawQUD1P7tYOi2-bZqFaZbKab8-SjpEhRZ=q4kz0khLQ@mail.gmail.com>
 <9EBE8A8685A7419099B2D422D091783E@erratique.ch>
 <8E00A7387FE74F49B548B18409A08BD2@erratique.ch>
 <B2264E2AC0E846F6888AB6E20455C557@erratique.ch>
 <B7804DEE997D42D5A92F02B6B333E297@erratique.ch>
Date: Mon, 17 Feb 2014 09:43:11 +0000
Message-ID: <CAAxsn=EFkVQgtDeQAJmy1-SyxEJbKTh_s+FBF0-3aziH6OvOsQ@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: ctypes@lists.ocaml.org
Content-Type: text/plain; charset=UTF-8
Subject: Re: [ocaml-ctypes] Spinning process on osx
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 17 Feb 2014 09:17:45 -0000

Ok, so I finally got a Mac set up to take a look at this, and tracked
down the source of the problem.  The following commit appears to fix
both the SDL and mach_absolute_time examples:

   https://github.com/yallop/ocaml-ctypes/commit/df51a59356

You can try it out using my opam-repository fork:

  opam remote add yallop https://github.com/yallop/opam-repository.git
  opam install ctypes.0.2.3 tsdl

Let me know if this fixes things, and I'll push 0.2.3 to the main
opam-repository.

Thanks for your patience, and for the precise and detailed bug report!

From daniel.buenzli@erratique.ch  Mon Feb 17 13:53:16 2014
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 0CB2B3C328
 for <ctypes@lists.ocaml.org>; Mon, 17 Feb 2014 13:53:16 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1568594
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:45985
 helo=smtp.webfaction.com)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1WFP1w-0007kX-0B (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Mon, 17 Feb 2014 14:18:44 +0000
Received: from [172.20.10.2] (19-237.197-178.cust.bluewin.ch [178.197.237.19])
 by smtp.webfaction.com (Postfix) with ESMTP id 0D47C66E9FC4;
 Mon, 17 Feb 2014 14:18:41 +0000 (UTC)
Date: Mon, 17 Feb 2014 15:18:37 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Jeremy Yallop <yallop@gmail.com>
Message-ID: <BF507EE0992B4A97B78626EB85FE56A3@erratique.ch>
In-Reply-To: <CAAxsn=EFkVQgtDeQAJmy1-SyxEJbKTh_s+FBF0-3aziH6OvOsQ@mail.gmail.com>
References: <A71CECB09FED44B1A83A217E602DAD25@erratique.ch>
 <CAAxsn=GoMSn2hEydg_ND46+1h-H3uYSUieFeKNZwvw9T=YzRGw@mail.gmail.com>
 <77A6ADA6A1CE4CCE874F266EAA9324DF@erratique.ch>
 <C0BECBDE584E4730A1FEA585A1EA59AF@erratique.ch>
 <A6CC3EBBE41841E79519A7AC9F97544A@erratique.ch>
 <CAAxsn=EgYG_v1_b6pNeqUbbVvDdOPNK6iyazOm9YqTZyNVRQsA@mail.gmail.com>
 <DC1A5D8122554149A593278594B9025F@erratique.ch>
 <9D16F320-1A31-47CD-AC2E-8D235A2DB984@recoil.org>
 <206B0BFA9D924551916F19AF9B333A3B@erratique.ch>
 <53CA4642851346998E750105E7F129C8@erratique.ch>
 <2A07CF0FFC334833B56877C484ECD38D@erratique.ch>
 <AFAA0F3EDF0B4690B8448F9A97797453@erratique.ch>
 <9E88480F53F844D49C67E488AAEC8B5D@erratique.ch>
 <CAAxsn=GawQUD1P7tYOi2-bZqFaZbKab8-SjpEhRZ=q4kz0khLQ@mail.gmail.com>
 <9EBE8A8685A7419099B2D422D091783E@erratique.ch>
 <8E00A7387FE74F49B548B18409A08BD2@erratique.ch>
 <B2264E2AC0E846F6888AB6E20455C557@erratique.ch>
 <B7804DEE997D42D5A92F02B6B333E297@erratique.ch>
 <CAAxsn=EFkVQgtDeQAJmy1-SyxEJbKTh_s+FBF0-3aziH6OvOsQ@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Spinning process on osx
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 17 Feb 2014 13:53:16 -0000

Le lundi, 17 f=C3=A9vrier 2014 =C3=A0 10:43, Jeremy Yallop a =C3=A9crit :=

> Let me know if this fixes things, and I'll push 0.2.3 to the main
> opam-repository.


Thanks for looking into that =21 So, there is some good news and bad news=
. I think we were facing two separate issues in this discussion. =20

The good news is that I confirm the examples I gave and other tsdl progra=
ms I have do now survive more than 20s and don't show any bug occuring in=
 ctypes=5Fcall. That's already a huge step since it actually allows me to=
 use tsdl/tgsl on osx and I think you should already push that fix.

The bad news is that my initial report, as the title of the thread indica=
tes, was about a spinning process. And the working tsdl programs I mentio=
n above while they work, can't be exited when compiled with 4.01.0, they =
end up spinning, taking 100% cpu time, in that unwind thing. =20

=46or that my analysis about 4.00.1 vs 4.01.0 and the bissect to ocaml's =
b2636c22d55b15f55a02b3 still holds. A mildly good news (since I don't rea=
lly understand what I'm doing) is that if I use my switch that applies th=
is patch to 4.01.0:

  https://gist.github.com/dbuenzli/9050340

the programs do not spin on exit. The smallest repro case I have for now =
is here:

  https://gist.github.com/dbuenzli/9050445

If there is no bug, this program exits immediately otherwise it spins =5B=
1=5D. It should be noted that the bug still has a very heisenbug nature -=
-- which make me nervously wonder if it could still not suddenly show up =
on 4.00.1 or on 4.01.0 with my patch. =46or example if I remove the usele=
ss =60video=60 addition of line:

  https://gist.github.com/dbuenzli/9050445=23file-spin-ml-L29

which equates to ctypes's Unsigned.UInt32.logor, see:

  https://github.com/dbuenzli/tsdl/blob/a3ee691e75ef0635ee4304732aeae53f8=
352b4b7/src/tsdl.ml=23L178

the spin doesn't occur. Trying to remove any other instruction, like the =
useless call to Sdl.get=5Fevent=5Fstate followed by the match, to make th=
e test case smaller also make the spin disappear. =20

=46inally it should also be noted that the spin occurs in the call to Sdl=
.pump=5Fevents before all the other calls so I don't think it's a case of=
 buggy bindings.

Best,

Daniel


=5B1=5D It spins in there:

> lldb spin.native =20
Current executable set to 'spin.native' (x86=5F64).
(lldb) run
Process 39079 launched: '/Users/dbuenzli/bug/spin.native' (x86=5F64)
Pump...
Process 39079 stopped
* thread =231: tid =3D 0x3b2271, 0x00007fff8f27a334 libunwind.dylib=60lib=
unwind::DwarfInstructions<libunwind::LocalAddressSpace, libunwind::Regist=
ers=5Fx86=5F64>::getSavedRegister(libunwind::LocalAddressSpace&, libunwin=
d::Registers=5Fx86=5F64 const&, unsigned long long, libunwind::C=46I=5FPa=
rser<libunwind::LocalAddressSpace>::RegisterLocation const&), queue =3D '=
com.apple.main-thread, stop reason =3D signal SIGSTOP
frame =230: 0x00007fff8f27a334 libunwind.dylib=60libunwind::DwarfInstruct=
ions<libunwind::LocalAddressSpace, libunwind::Registers=5Fx86=5F64>::getS=
avedRegister(libunwind::LocalAddressSpace&, libunwind::Registers=5Fx86=5F=
64 const&, unsigned long long, libunwind::C=46I=5FParser<libunwind::Local=
AddressSpace>::RegisterLocation const&)
libunwind.dylib=60libunwind::DwarfInstructions<libunwind::LocalAddressSpa=
ce, libunwind::Registers=5Fx86=5F64>::getSavedRegister(libunwind::LocalAd=
dressSpace&, libunwind::Registers=5Fx86=5F64 const&, unsigned long long, =
libunwind::C=46I=5FParser<libunwind::LocalAddressSpace>::RegisterLocation=
 const&):
-> 0x7fff8f27a334: pushq %rbp
0x7fff8f27a335: movq %rsp, %rbp
0x7fff8f27a338: movq %rcx, %rax
0x7fff8f27a33b: movq %rdx, %rcx
(lldb) bt
* thread =231: tid =3D 0x3b2271, 0x00007fff8f27a334 libunwind.dylib=60lib=
unwind::DwarfInstructions<libunwind::LocalAddressSpace, libunwind::Regist=
ers=5Fx86=5F64>::getSavedRegister(libunwind::LocalAddressSpace&, libunwin=
d::Registers=5Fx86=5F64 const&, unsigned long long, libunwind::C=46I=5FPa=
rser<libunwind::LocalAddressSpace>::RegisterLocation const&), queue =3D '=
com.apple.main-thread, stop reason =3D signal SIGSTOP
frame =230: 0x00007fff8f27a334 libunwind.dylib=60libunwind::DwarfInstruct=
ions<libunwind::LocalAddressSpace, libunwind::Registers=5Fx86=5F64>::getS=
avedRegister(libunwind::LocalAddressSpace&, libunwind::Registers=5Fx86=5F=
64 const&, unsigned long long, libunwind::C=46I=5FParser<libunwind::Local=
AddressSpace>::RegisterLocation const&)
frame =231: 0x00007fff8f27a07b libunwind.dylib=60libunwind::DwarfInstruct=
ions<libunwind::LocalAddressSpace, libunwind::Registers=5Fx86=5F64>::step=
WithDwarf(libunwind::LocalAddressSpace&, unsigned long long, unsigned lon=
g long, libunwind::Registers=5Fx86=5F64&) + 287
frame =232: 0x00007fff8f277538 libunwind.dylib=60libunwind::UnwindCursor<=
libunwind::LocalAddressSpace, libunwind::Registers=5Fx86=5F64>::step() + =
100
frame =233: 0x00007fff916e37af libobjc.A.dylib=60objc=5FaddExceptionHandl=
er + 79
frame =234: 0x00007fff8d6c5c6c Core=46oundation=60=5FC=46DoExceptionOpera=
tion + 380
frame =235: 0x00007fff888ea24c AppKit=60=5FNSAppKitLock + 77
frame =236: 0x00007fff888a77f7 AppKit=60NSAccessibilityPostNotificationWi=
thUserInfo + 70
frame =237: 0x00007fff889c88db AppKit=60-=5BNSApplication sendEvent:=5D +=
 2328
frame =238: 0x0000000100244b84 libSDL2-2.0.0.dylib=60Cocoa=5FPumpEvents +=
 171
frame =239: 0x00000001001eca3e libSDL2-2.0.0.dylib=60SDL=5FPumpEvents + 2=
3
frame =2310: 0x0000000100299124 libffi.6.dylib=60ffi=5Fcall=5Funix64 + 76=

frame =2311: 0x00000001002989f6 libffi.6.dylib=60ffi=5Fcall + 854
frame =2312: 0x0000000100076ad2 spin.native=60ctypes=5Fcall + 434
frame =2313: 0x000000010003ab5c spin.native=60.L139 + 24


From daniel.buenzli@erratique.ch  Wed Feb 19 11:47:51 2014
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id BB9163C213
 for <ctypes@lists.ocaml.org>; Wed, 19 Feb 2014 11:47:51 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1568594
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:33207
 helo=smtp.webfaction.com)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtp id 1WG61m-0003pm-Dy (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Wed, 19 Feb 2014 12:13:27 +0000
Received: from [172.20.10.2] (38-237.197-178.cust.bluewin.ch [178.197.237.38])
 by smtp.webfaction.com (Postfix) with ESMTP id 34917220945E;
 Wed, 19 Feb 2014 12:11:12 +0000 (UTC)
Date: Wed, 19 Feb 2014 13:11:08 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Jeremy Yallop <yallop@gmail.com>
Message-ID: <1D4C9456BA144ECCA5526D4B15A12D1E@erratique.ch>
In-Reply-To: <CAAxsn=EFkVQgtDeQAJmy1-SyxEJbKTh_s+FBF0-3aziH6OvOsQ@mail.gmail.com>
References: <A71CECB09FED44B1A83A217E602DAD25@erratique.ch>
 <CAAxsn=GoMSn2hEydg_ND46+1h-H3uYSUieFeKNZwvw9T=YzRGw@mail.gmail.com>
 <77A6ADA6A1CE4CCE874F266EAA9324DF@erratique.ch>
 <C0BECBDE584E4730A1FEA585A1EA59AF@erratique.ch>
 <A6CC3EBBE41841E79519A7AC9F97544A@erratique.ch>
 <CAAxsn=EgYG_v1_b6pNeqUbbVvDdOPNK6iyazOm9YqTZyNVRQsA@mail.gmail.com>
 <DC1A5D8122554149A593278594B9025F@erratique.ch>
 <9D16F320-1A31-47CD-AC2E-8D235A2DB984@recoil.org>
 <206B0BFA9D924551916F19AF9B333A3B@erratique.ch>
 <53CA4642851346998E750105E7F129C8@erratique.ch>
 <2A07CF0FFC334833B56877C484ECD38D@erratique.ch>
 <AFAA0F3EDF0B4690B8448F9A97797453@erratique.ch>
 <9E88480F53F844D49C67E488AAEC8B5D@erratique.ch>
 <CAAxsn=GawQUD1P7tYOi2-bZqFaZbKab8-SjpEhRZ=q4kz0khLQ@mail.gmail.com>
 <9EBE8A8685A7419099B2D422D091783E@erratique.ch>
 <8E00A7387FE74F49B548B18409A08BD2@erratique.ch>
 <B2264E2AC0E846F6888AB6E20455C557@erratique.ch>
 <B7804DEE997D42D5A92F02B6B333E297@erratique.ch>
 <CAAxsn=EFkVQgtDeQAJmy1-SyxEJbKTh_s+FBF0-3aziH6OvOsQ@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Spinning process on osx
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 19 Feb 2014 11:47:51 -0000

Le lundi, 17 f=C3=A9vrier 2014 =C3=A0 10:43, Jeremy Yallop a =C3=A9crit :=

> https://github.com/yallop/ocaml-ctypes/commit/df51a59356
> =20
> You can try it out using my opam-repository fork:
> =20
> opam remote add yallop https://github.com/yallop/opam-repository.git
> opam install ctypes.0.2.3 tsdl

Just one note, having to use an opam-repository fork to test fixes brings=
 too much confusion, for one thing it insulates you from new updates of t=
he regular opam repo as it shadows *all* packages.  =20

Especially since I need the fix to be able work, I cannot just try your o=
pam-repository and remove it. =20

It's better to provide pin instructions which in this case are =20

 opam pin --force ctypes https://github.com/yallop/ocaml-ctypes=230.2-fix=
es
 opam update
 opam reinstall ctypes


Best,

Daniel

From yallop@gmail.com  Fri Feb 21 01:46:01 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 5AD3C3C213
 for <ctypes@lists.ocaml.org>; Fri, 21 Feb 2014 01:46:01 +0000 (GMT)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1569660 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.172 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f172.google.com ([209.85.212.172]:52302)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1WGfaX-0000YI-7a (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Fri, 21 Feb 2014 02:11:41 +0000
Received: by mail-wi0-f172.google.com with SMTP id e4so346306wiv.5
 for <ctypes@lists.ocaml.org>; Thu, 20 Feb 2014 18:11:41 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type:content-transfer-encoding;
 bh=LYqaiYxA1+Ih8aqLJN9Z3VqnqmeAxU74uSnq8ihL/yg=;
 b=nuQzwIu/fxCW1h+E7IwxFyGXnVRgpPO2lS6IYfXlKXIsNc4ksme5jDGVCXsxx6xhBA
 nNrZxtmuY5Bz6EGMuzb/xKIW/SWLILWDFVfseGAo3CJCdvwCh0vuOoSRgK2I0xOVivE2
 BMqdrl6+cbXzIYboeMJw3jVH2H3Mr53D8Ln/MPMo2qAZCLUu26/UudKeWskgm6+6uaQT
 +8040XHwJU6sYYSXLQx4fiqFBhYuwrW/rmTIAtqFZhwHgF/0P+nStqXZbf06UCgya9el
 xON6pgk7n9d9N5J+QUA8ziVpGgKLaXU3wrab0eud53tSKeJxfGYf8gA077ysduqc0arR
 lnHw==
MIME-Version: 1.0
X-Received: by 10.180.11.36 with SMTP id n4mr1143147wib.4.1392948700935; Thu,
 20 Feb 2014 18:11:40 -0800 (PST)
Received: by 10.217.117.4 with HTTP; Thu, 20 Feb 2014 18:11:40 -0800 (PST)
In-Reply-To: <BF507EE0992B4A97B78626EB85FE56A3@erratique.ch>
References: <A71CECB09FED44B1A83A217E602DAD25@erratique.ch>
 <CAAxsn=GoMSn2hEydg_ND46+1h-H3uYSUieFeKNZwvw9T=YzRGw@mail.gmail.com>
 <77A6ADA6A1CE4CCE874F266EAA9324DF@erratique.ch>
 <C0BECBDE584E4730A1FEA585A1EA59AF@erratique.ch>
 <A6CC3EBBE41841E79519A7AC9F97544A@erratique.ch>
 <CAAxsn=EgYG_v1_b6pNeqUbbVvDdOPNK6iyazOm9YqTZyNVRQsA@mail.gmail.com>
 <DC1A5D8122554149A593278594B9025F@erratique.ch>
 <9D16F320-1A31-47CD-AC2E-8D235A2DB984@recoil.org>
 <206B0BFA9D924551916F19AF9B333A3B@erratique.ch>
 <53CA4642851346998E750105E7F129C8@erratique.ch>
 <2A07CF0FFC334833B56877C484ECD38D@erratique.ch>
 <AFAA0F3EDF0B4690B8448F9A97797453@erratique.ch>
 <9E88480F53F844D49C67E488AAEC8B5D@erratique.ch>
 <CAAxsn=GawQUD1P7tYOi2-bZqFaZbKab8-SjpEhRZ=q4kz0khLQ@mail.gmail.com>
 <9EBE8A8685A7419099B2D422D091783E@erratique.ch>
 <8E00A7387FE74F49B548B18409A08BD2@erratique.ch>
 <B2264E2AC0E846F6888AB6E20455C557@erratique.ch>
 <B7804DEE997D42D5A92F02B6B333E297@erratique.ch>
 <CAAxsn=EFkVQgtDeQAJmy1-SyxEJbKTh_s+FBF0-3aziH6OvOsQ@mail.gmail.com>
 <BF507EE0992B4A97B78626EB85FE56A3@erratique.ch>
Date: Fri, 21 Feb 2014 02:11:40 +0000
Message-ID: <CAAxsn=EPYZRWMGjSVOGqeh3JcdHz8v2AJGTvpfXh3vfV=LktXA@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: =?UTF-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Spinning process on osx
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 21 Feb 2014 01:46:01 -0000

On 17 February 2014 14:18, Daniel B=C3=BCnzli <daniel.buenzli@erratique.ch>=
 wrote:
> The bad news is that my initial report, as the title of the thread indica=
tes, was about a spinning process. And the working tsdl programs I mention =
above while they work, can't be exited when compiled with 4.01.0, they end =
up spinning, taking 100% cpu time, in that unwind thing.
>
> For that my analysis about 4.00.1 vs 4.01.0 and the bissect to ocaml's b2=
636c22d55b15f55a02b3 still holds. A mildly good news (since I don't really =
understand what I'm doing) is that if I use my switch that applies this pat=
ch to 4.01.0:
>
>   https://gist.github.com/dbuenzli/9050340
>
> the programs do not spin on exit. The smallest repro case I have for now =
is here:
>
>   https://gist.github.com/dbuenzli/9050445

Thanks!  I can reliably reproduce this.  I've started looking into it,
and will have some more time to look at it in a couple of days.  I'll
report back once I know more.

From anil@recoil.org  Sun Mar  2 13:27:16 2014
Return-Path: <anil@recoil.org>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 62B263C20F
 for <ctypes@lists.ocaml.org>; Sun,  2 Mar 2014 13:27:16 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1573137
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from recoil.dh.bytemark.co.uk ([89.16.177.154]:43615
 helo=dark.recoil.org)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with smtp id 1WK6pb-0005eO-lk (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <anil@recoil.org>); Sun, 02 Mar 2014 13:53:28 +0000
Received: (qmail 17187 invoked by uid 634); 2 Mar 2014 13:53:27 -0000
X-Spam-Level: *
X-Spam-Status: No, hits=-1.0 required=5.0
	tests=ALL_TRUSTED
X-Spam-Check-By: dark.recoil.org
Received: from cpc7-cmbg14-2-0-cust238.5-4.cable.virginm.net (HELO
 [192.168.1.110]) (86.30.244.239)
 (smtp-auth username remote@recoil.org, mechanism cram-md5)
 by dark.recoil.org (qpsmtpd/0.84) with ESMTPA; Sun, 02 Mar 2014 13:53:26 +0000
Content-Type: text/plain; charset=iso-8859-1
Mime-Version: 1.0 (Mac OS X Mail 7.0 \(1812\))
From: Anil Madhavapeddy <anil@recoil.org>
In-Reply-To: <CANE7k9cpuh6Rs6vE0sTCjFxHfqsry+L-kx=ZR+GuGsJPXvp6og@mail.gmail.com>
Date: Sun, 2 Mar 2014 13:53:26 +0000
Content-Transfer-Encoding: quoted-printable
Message-Id: <6B63BE07-96EA-4125-BDF8-7982FD5B9EB8@recoil.org>
References: <CANE7k9cpuh6Rs6vE0sTCjFxHfqsry+L-kx=ZR+GuGsJPXvp6og@mail.gmail.com>
To: "ocaml-core@googlegroups.com" <ocaml-core@googlegroups.com>
X-Mailer: Apple Mail (2.1812)
X-Virus-Checked: Checked by ClamAV on dark.recoil.org
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Foreign function interface support
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sun, 02 Mar 2014 13:27:16 -0000

Hi Pavel (CCing the ctypes mailing list as well).

When linking the program, ctypes needs to know how to open the shared
library.  One way to do this is by specifying the "-lpicosat" in the
link options, as you've done below.

Unfortunately, the Ubuntu linker has a mode where it decides to not
link in the library if it's not explicitly referenced in the =
application,
so you also need to pass the "-Wl,--no-as-needed" on Ubuntu.

However, before going further, the below link line should have worked
on MacOS X.  Could you confirm whether it only fails on Ubuntu, or if
it also doesn't work on MacOS X?

-anil

On 2 Mar 2014, at 07:25, Pavel Zaichenkov <zaichenkov@gmail.com> wrote:

> Hi,
>=20
> I would be very grateful if someone can help me to create OCaml
> bindings for PicoSAT SAT solver (http://fmv.jku.at/picosat/). I used
> the version 936 that is available in Ubuntu repository.
>=20
> I started with studying the corresponding chapter in RWC book
> =
(https://realworldocaml.org/v1/en/html/foreign-function-interface.html)
> and came up with the following picosat.ml file (a minimal working
> example):
>=20
> open Ctypes
> type picosat =3D unit ptr
> let picosat : picosat typ =3D ptr void
> open Foreign
> let init =3D foreign "picosat_init" (void @-> returning void)
>=20
> This one is a simple program that shouldn't throw an error if binding
> actually works:
>=20
> open Picosat
> let _ =3D init ()
>=20
> The example is compiled using the command from the guide:
>=20
> corebuild -pkg ctypes.foreign -lflags -cclib,lpicosat test.native
>=20
> Command executes successfully, however execution of test.native throws
> an exception "undefined symbol: picosat_init".
>=20
> I have tried to perform this on two platforms that I need to support:
> OS X and Ubuntu. I am pretty sure that headers and library itself are
> installed and are seen in the system path, as I managed to run an
> example on C using the library. I also checked the library and
> corresponding symbol names inside the library using "readelf -Ws".
>=20
> Since there is enough evidence that library itself exists and can be
> successfully linked, I am out of ideas what I miss here and why this
> binding doesn't work. Are there any suggestions?
>=20
> Thanks.
>=20
>=20
> Pavel
>=20
> --=20
> You received this message because you are subscribed to the Google =
Groups "ocaml-core" group.
> To unsubscribe from this group and stop receiving emails from it, send =
an email to ocaml-core+unsubscribe@googlegroups.com.
> For more options, visit https://groups.google.com/groups/opt_out.
>=20


From zaichenkov@gmail.com  Tue Mar  4 01:28:05 2014
Return-Path: <zaichenkov@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-51.csi.cam.ac.uk (ppsw-51.csi.cam.ac.uk [131.111.8.151])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 1F7253C32C
 for <ctypes@lists.ocaml.org>; Tue,  4 Mar 2014 01:28:05 +0000 (GMT)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1573272 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.216.172 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (zaichenkov[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qc0-f172.google.com ([209.85.216.172]:62433)
 by ppsw-51.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1WKeYn-0005cY-XF (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <zaichenkov@gmail.com>); Tue, 04 Mar 2014 01:54:22 +0000
Received: by mail-qc0-f172.google.com with SMTP id i8so4795214qcq.3
 for <ctypes@lists.ocaml.org>; Mon, 03 Mar 2014 17:54:20 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=vFgL6aZD8BppAxKWFzVeVSiEejc6qm/8vxOBKuhzRTQ=;
 b=iMQrzkRPpieIgjhiGqZXeLJTb3DkbxbFPaSJkd/sR/ws+BT4/2rYsQh6vd0ivubMDC
 jXCVyUWpdN5ZYdArjzrYS0bgw/BHgds+4NUgOXXAyGK/6VekPe8NS/HifCFgj3jDjyZi
 PzBe6YW0oEizlMPFwprHP0Xa9gvScKHTkmlEcgUnmRo+d6pFfSaVavKiCaJ79aP7E+0g
 R25dIBfI9pT+kJoVLwRh4xfQoDhIkKymdPI+Fr1tZGthuzGrcfBnV8cug1Mvf4Cde9jO
 B+szchkwXWzjrD3VQf+sVWNEUHF9mAi8UzuXpqeOPP6cN34OCldKrztyyjp4Xq2aULxO
 91iA==
MIME-Version: 1.0
X-Received: by 10.140.51.109 with SMTP id t100mr26335282qga.50.1393898060136; 
 Mon, 03 Mar 2014 17:54:20 -0800 (PST)
Received: by 10.140.100.129 with HTTP; Mon, 3 Mar 2014 17:54:19 -0800 (PST)
In-Reply-To: <6B63BE07-96EA-4125-BDF8-7982FD5B9EB8@recoil.org>
References: <CANE7k9cpuh6Rs6vE0sTCjFxHfqsry+L-kx=ZR+GuGsJPXvp6og@mail.gmail.com>
 <6B63BE07-96EA-4125-BDF8-7982FD5B9EB8@recoil.org>
Date: Tue, 4 Mar 2014 01:54:19 +0000
Message-ID: <CANE7k9d0B1deaZVt67s5G18cZFRd+h02bqkZLTC1=Bo3NSfosA@mail.gmail.com>
From: Pavel Zaichenkov <zaichenkov@gmail.com>
To: ocaml-core@googlegroups.com
Content-Type: text/plain; charset=ISO-8859-1
X-Mailman-Approved-At: Tue, 04 Mar 2014 07:56:00 +0000
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Foreign function interface support
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 04 Mar 2014 01:28:05 -0000

Hi Anil,

It fails for both OS X and Ubuntu.

Regarding Ubuntu. How would you pass "-Wl,--no-as-needed" to
corebuild? hello (ncurses) example doesn't work on Ubuntu, so this
could be the case. I want to try it also for minisat library, which is
available from the repository.

Although I don't know what is wrong with it in OS X.

Btw, I get "Unbound value returning_checking_errno" error for datetime
example in both systems.

Thanks for your help.


Pavel

On 2 March 2014 13:53, Anil Madhavapeddy <anil@recoil.org> wrote:
> Hi Pavel (CCing the ctypes mailing list as well).
>
> When linking the program, ctypes needs to know how to open the shared
> library.  One way to do this is by specifying the "-lpicosat" in the
> link options, as you've done below.
>
> Unfortunately, the Ubuntu linker has a mode where it decides to not
> link in the library if it's not explicitly referenced in the application,
> so you also need to pass the "-Wl,--no-as-needed" on Ubuntu.
>
> However, before going further, the below link line should have worked
> on MacOS X.  Could you confirm whether it only fails on Ubuntu, or if
> it also doesn't work on MacOS X?
>
> -anil
>
> On 2 Mar 2014, at 07:25, Pavel Zaichenkov <zaichenkov@gmail.com> wrote:
>
>> Hi,
>>
>> I would be very grateful if someone can help me to create OCaml
>> bindings for PicoSAT SAT solver (http://fmv.jku.at/picosat/). I used
>> the version 936 that is available in Ubuntu repository.
>>
>> I started with studying the corresponding chapter in RWC book
>> (https://realworldocaml.org/v1/en/html/foreign-function-interface.html)
>> and came up with the following picosat.ml file (a minimal working
>> example):
>>
>> open Ctypes
>> type picosat = unit ptr
>> let picosat : picosat typ = ptr void
>> open Foreign
>> let init = foreign "picosat_init" (void @-> returning void)
>>
>> This one is a simple program that shouldn't throw an error if binding
>> actually works:
>>
>> open Picosat
>> let _ = init ()
>>
>> The example is compiled using the command from the guide:
>>
>> corebuild -pkg ctypes.foreign -lflags -cclib,lpicosat test.native
>>
>> Command executes successfully, however execution of test.native throws
>> an exception "undefined symbol: picosat_init".
>>
>> I have tried to perform this on two platforms that I need to support:
>> OS X and Ubuntu. I am pretty sure that headers and library itself are
>> installed and are seen in the system path, as I managed to run an
>> example on C using the library. I also checked the library and
>> corresponding symbol names inside the library using "readelf -Ws".
>>
>> Since there is enough evidence that library itself exists and can be
>> successfully linked, I am out of ideas what I miss here and why this
>> binding doesn't work. Are there any suggestions?
>>
>> Thanks.
>>
>>
>> Pavel
>>
>> --
>> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
>> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe@googlegroups.com.
>> For more options, visit https://groups.google.com/groups/opt_out.
>>
>
> --
> You received this message because you are subscribed to the Google Groups "ocaml-core" group.
> To unsubscribe from this group and stop receiving emails from it, send an email to ocaml-core+unsubscribe@googlegroups.com.
> For more options, visit https://groups.google.com/groups/opt_out.

From anil@recoil.org  Tue Mar  4 09:20:55 2014
Return-Path: <anil@recoil.org>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 6CD653C214
 for <ctypes@lists.ocaml.org>; Tue,  4 Mar 2014 09:20:55 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1573480
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from recoil.dh.bytemark.co.uk ([89.16.177.154]:41431
 helo=dark.recoil.org)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with smtp id 1WKlwO-0007Yn-sH (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <anil@recoil.org>); Tue, 04 Mar 2014 09:47:13 +0000
Received: (qmail 11619 invoked by uid 634); 4 Mar 2014 09:47:12 -0000
X-Spam-Level: *
X-Spam-Status: No, hits=-1.0 required=5.0
	tests=ALL_TRUSTED
X-Spam-Check-By: dark.recoil.org
Received: from host81-149-102-120.in-addr.btopenworld.com (HELO [10.0.0.108])
 (81.149.102.120)
 (smtp-auth username remote@recoil.org, mechanism cram-md5)
 by dark.recoil.org (qpsmtpd/0.84) with ESMTPA; Tue, 04 Mar 2014 09:47:11 +0000
Content-Type: text/plain; charset=us-ascii
Mime-Version: 1.0 (Mac OS X Mail 7.0 \(1812\))
From: Anil Madhavapeddy <anil@recoil.org>
In-Reply-To: <CANE7k9d0B1deaZVt67s5G18cZFRd+h02bqkZLTC1=Bo3NSfosA@mail.gmail.com>
Date: Tue, 4 Mar 2014 09:47:10 +0000
Content-Transfer-Encoding: quoted-printable
Message-Id: <FABF7142-84B2-4635-92A8-B399077F1E41@recoil.org>
References: <CANE7k9cpuh6Rs6vE0sTCjFxHfqsry+L-kx=ZR+GuGsJPXvp6og@mail.gmail.com>
 <6B63BE07-96EA-4125-BDF8-7982FD5B9EB8@recoil.org>
 <CANE7k9d0B1deaZVt67s5G18cZFRd+h02bqkZLTC1=Bo3NSfosA@mail.gmail.com>
To: Pavel Zaichenkov <zaichenkov@gmail.com>
X-Mailer: Apple Mail (2.1812)
X-Virus-Checked: Checked by ClamAV on dark.recoil.org
Cc: ctypes@lists.ocaml.org,
 "ocaml-core@googlegroups.com" <ocaml-core@googlegroups.com>
Subject: Re: [ocaml-ctypes] Foreign function interface support
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 04 Mar 2014 09:20:55 -0000

On 4 Mar 2014, at 01:54, Pavel Zaichenkov <zaichenkov@gmail.com> wrote:

> Hi Anil,
>=20
> It fails for both OS X and Ubuntu.

Should investigate this separately then -- can you manually write a
trivial C binding that successfully links on MacOS X?
>=20
> Regarding Ubuntu. How would you pass "-Wl,--no-as-needed" to
> corebuild? hello (ncurses) example doesn't work on Ubuntu, so this
> could be the case. I want to try it also for minisat library, which is
> available from the repository.
>=20
> Although I don't know what is wrong with it in OS X.
>=20
> Btw, I get "Unbound value returning_checking_errno" error for datetime
> example in both systems.

I don't have access to an Ubuntu machine to verify this at the moment,
but I suspect that there's some minor interface breakage in RWO due
to the recent Ctypes updates.  I'll rebuild the RWO examples repository
later and update the online examples (print errata will take a little =
longer)

Off the top of my head, you need something like

-cclib,-Xlinker,-cclib,--no-as-needed,-Wl

to corebuild

(see https://github.com/rgrinberg/onanomsg/blob/master/_oasis for an =
OASIS example)

The complication is that this will *not* work on MacOS X, since LLVM =
doesn't support that linker flag. C stub generation will greatly help =
reduce this complexity when that lands in Ctypes.

-anil=

From daniel.buenzli@erratique.ch  Tue Mar  4 09:47:20 2014
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 6E7A03C214
 for <ctypes@lists.ocaml.org>; Tue,  4 Mar 2014 09:47:20 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1573480
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:51140
 helo=smtp.webfaction.com)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtp id 1WKmLx-0007DF-rm (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Tue, 04 Mar 2014 10:13:38 +0000
Received: from [172.20.10.2] (56-227.197-178.cust.bluewin.ch [178.197.227.56])
 by smtp.webfaction.com (Postfix) with ESMTP id 5E7CD59B4813;
 Tue,  4 Mar 2014 10:13:35 +0000 (UTC)
Date: Tue, 4 Mar 2014 11:13:30 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Anil Madhavapeddy <anil@recoil.org>
Message-ID: <10C65B61B1A143A7A45535E07E36A857@erratique.ch>
In-Reply-To: <FABF7142-84B2-4635-92A8-B399077F1E41@recoil.org>
References: <CANE7k9cpuh6Rs6vE0sTCjFxHfqsry+L-kx=ZR+GuGsJPXvp6og@mail.gmail.com>
 <6B63BE07-96EA-4125-BDF8-7982FD5B9EB8@recoil.org>
 <CANE7k9d0B1deaZVt67s5G18cZFRd+h02bqkZLTC1=Bo3NSfosA@mail.gmail.com>
 <FABF7142-84B2-4635-92A8-B399077F1E41@recoil.org>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Cc: ctypes@lists.ocaml.org,
 "=?utf-8?Q?ocaml-core=40googlegroups.com?=" <ocaml-core@googlegroups.com>,
 Pavel Zaichenkov <zaichenkov@gmail.com>
Subject: Re: [ocaml-ctypes] Foreign function interface support
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 04 Mar 2014 09:47:20 -0000

Le mardi, 4 mars 2014 =C3=A0 02:54, Pavel Zaichenkov a =C3=A9crit :
> Btw, I get =22Unbound value returning=5Fchecking=5Ferrno=22 error for d=
atetime
> example in both systems.


This is a ctypes API issue, that function doesn't exist anymore. See:

https://github.com/ocamllabs/ocaml-ctypes/commit/c4887ca35b40a9d53ef52642=
eb025262821ca245


Le mardi, 4 mars 2014 =C3=A0 10:47, Anil Madhavapeddy a =C3=A9crit :
> (see https://github.com/rgrinberg/onanomsg/blob/master/=5Foasis for an =
OASIS example)
> =20
> The complication is that this will *not* work on MacOS X, since LLVM do=
esn't support that linker flag. =20
Well it's again oasis that renders things complicated... If you have full=
 control over your build system it's quite easy follow the link below, th=
e myocamlbuild.ml linked to is generic:

https://github.com/ocamllabs/ocaml-ctypes/issues/51=23issuecomment-307296=
75

Best,

Daniel

From ygrek@autistici.org  Tue Mar  4 10:03:28 2014
Return-Path: <ygrek@autistici.org>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-41.csi.cam.ac.uk (ppsw-41.csi.cam.ac.uk [131.111.8.141])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 22A7B3C214
 for <ctypes@lists.ocaml.org>; Tue,  4 Mar 2014 10:03:28 +0000 (GMT)
X-Cam-SpamScore: s
X-Cam-SpamDetails: score 1.2 from SpamAssassin-3.3.2-1573480 
 *  1.1 DKIM_ADSP_ALL No valid author signature, domain signs all mail
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from latitanza.investici.org ([82.94.249.234]:49093)
 by ppsw-41.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1.2:DHE-RSA-AES256-GCM-SHA384:256)
 id 1WKmba-0003vy-Pq (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <ygrek@autistici.org>); Tue, 04 Mar 2014 10:29:46 +0000
Received: from [82.94.249.234] (latitanza [82.94.249.234]) (Authenticated
 sender: ygrek@autistici.org) by localhost (Postfix) with ESMTPSA id
 E2F55981B5; Tue,  4 Mar 2014 10:29:42 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=autistici.org;
 s=stigmate; t=1393928984;
 bh=iO78LZaENfl+fTqx1/3W2RSBCFugTB0349vSjGjA4vw=;
 h=Date:From:To:Cc:Subject:In-Reply-To:References;
 b=okKhwaXRd9y/wyoXjmup6H3WedNaYVvY0HZfse8fTOqs9ABjz4BYhVaUxccBvbzrg
 bcJX6fteISEd3Ivzisi4UTpBQMZ5jaNUcekSbCzEf3jR36XcRR85UOdxJnSDIvmi/J
 KVlF+FRYFBPBGOIxfq9tOJTWfAAvCxHY1Ofi3G98=
Date: Tue, 4 Mar 2014 18:29:37 +0800
From: ygrek <ygrek@autistici.org>
To: ctypes@lists.ocaml.org
Message-ID: <20140304182937.0af6ba47@kiwi.local.tld>
In-Reply-To: <10C65B61B1A143A7A45535E07E36A857@erratique.ch>
References: <CANE7k9cpuh6Rs6vE0sTCjFxHfqsry+L-kx=ZR+GuGsJPXvp6og@mail.gmail.com>
 <6B63BE07-96EA-4125-BDF8-7982FD5B9EB8@recoil.org>
 <CANE7k9d0B1deaZVt67s5G18cZFRd+h02bqkZLTC1=Bo3NSfosA@mail.gmail.com>
 <FABF7142-84B2-4635-92A8-B399077F1E41@recoil.org>
 <10C65B61B1A143A7A45535E07E36A857@erratique.ch>
X-Mailer: Claws Mail 3.9.3 (GTK+ 2.24.10; x86_64-pc-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Cc: "ocaml-core@googlegroups.com" <ocaml-core@googlegroups.com>
Subject: Re: [ocaml-ctypes] Foreign function interface support
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 04 Mar 2014 10:03:28 -0000

On Tue, 4 Mar 2014 11:13:30 +0100
Daniel B=C3=BCnzli <daniel.buenzli@erratique.ch> wrote:

> Well it's again oasis that renders things complicated... If you have full=
 control over your build system it's quite easy follow the link below, the =
myocamlbuild.ml linked to is generic:

oasis is meant to be used for "standard" build setups. For simple projects =
it is more than adequate. For large/hairy/experimental/complicated projects
one is free to use what better suits the task, especially if one masters oc=
aml build tools and different OS peculiarities, but for the ocaml
novice oasis does the job pretty well.

--=20

From ygrek@autistici.org  Tue Mar  4 10:15:34 2014
Return-Path: <ygrek@autistici.org>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 9E6453C214
 for <ctypes@lists.ocaml.org>; Tue,  4 Mar 2014 10:15:34 +0000 (GMT)
X-Cam-SpamScore: ss
X-Cam-SpamDetails: score 2.4 from SpamAssassin-3.3.2-1573480 
 *  1.1 DKIM_ADSP_ALL No valid author signature, domain signs all mail
 *  1.2 MISSING_HEADERS Missing To: header
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from latitanza.investici.org ([82.94.249.234]:30634)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:DHE-RSA-AES256-GCM-SHA384:256)
 id 1WKmnH-0000Zo-sK (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <ygrek@autistici.org>); Tue, 04 Mar 2014 10:41:52 +0000
Received: from [82.94.249.234] (latitanza [82.94.249.234]) (Authenticated
 sender: ygrek@autistici.org) by localhost (Postfix) with ESMTPSA id
 D9AC99827C; Tue,  4 Mar 2014 10:41:49 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=autistici.org;
 s=stigmate; t=1393929711;
 bh=/If47phV1dclV+gwlA4ph0Q4+AyyrSngxrL0hf9+JiU=;
 h=Date:From:Cc:Subject:In-Reply-To:References;
 b=dkR5/1dHqWHy2q7mPt/ddq7mMLqpjx62y79ByQSWKuMOCFomm6oEeKhE0bIb9Uagv
 DUdJymDPfjSjQ1nwHpkA6mZEt5CyGI8aSkHgHQDyXeJdh1mI3qVeR/Tqm2SEkL72zP
 CColDzzV+ykUOwsxoidS7iWcrN7VSQYNaQIfSPDc=
Date: Tue, 4 Mar 2014 18:41:46 +0800
From: ygrek <ygrek@autistici.org>
Message-ID: <20140304184146.6d2f512e@kiwi.local.tld>
In-Reply-To: <FABF7142-84B2-4635-92A8-B399077F1E41@recoil.org>
References: <CANE7k9cpuh6Rs6vE0sTCjFxHfqsry+L-kx=ZR+GuGsJPXvp6og@mail.gmail.com>
 <6B63BE07-96EA-4125-BDF8-7982FD5B9EB8@recoil.org>
 <CANE7k9d0B1deaZVt67s5G18cZFRd+h02bqkZLTC1=Bo3NSfosA@mail.gmail.com>
 <FABF7142-84B2-4635-92A8-B399077F1E41@recoil.org>
X-Mailer: Claws Mail 3.9.3 (GTK+ 2.24.10; x86_64-pc-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Cc: ctypes@lists.ocaml.org,
 "ocaml-core@googlegroups.com" <ocaml-core@googlegroups.com>
Subject: Re: [ocaml-ctypes] Foreign function interface support
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 04 Mar 2014 10:15:34 -0000

On Tue, 4 Mar 2014 09:47:10 +0000
Anil Madhavapeddy <anil@recoil.org> wrote:

> Off the top of my head, you need something like
> 
> -cclib,-Xlinker,-cclib,--no-as-needed,-Wl
> 
> to corebuild
> 
> (see https://github.com/rgrinberg/onanomsg/blob/master/_oasis for an OASIS example)
> 
> The complication is that this will *not* work on MacOS X, since LLVM doesn't support that linker flag. C stub generation will greatly help reduce this complexity when that lands in Ctypes.

OASIS allows conditional fields, so you can have a dynamic test whether linker supports this option, that will set some
oasis flag and then test that flag with

  if flag(xxx)
    CCLib: -Xlinker --no-as-needed

hth

-- 

From yallop@gmail.com  Tue Mar  4 11:08:34 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-41.csi.cam.ac.uk (ppsw-41.csi.cam.ac.uk [131.111.8.141])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 586FE3C214
 for <ctypes@lists.ocaml.org>; Tue,  4 Mar 2014 11:08:34 +0000 (GMT)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1573480 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.173 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-we0-f173.google.com ([74.125.82.173]:64183)
 by ppsw-41.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1WKnca-0001Rd-Qx (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 04 Mar 2014 11:34:52 +0000
Received: by mail-we0-f173.google.com with SMTP id w61so4752637wes.32
 for <ctypes@lists.ocaml.org>; Tue, 04 Mar 2014 03:34:51 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=jQt7YdshdKHxdJmqRr36CTR89Zyf29LZFr+i8SKhbgk=;
 b=BisswC+HV6mJ+LDyKT2ZbC944cqC3ZFzmBgfYMAcro3Vf422iTQI/2ktNk+ZVxIIs/
 Obz/zYnyyK09kcy1SCbI4HamUoxbeDeWwyL5nQPAnpaAo+dI/RQ5oLrcMWcv93J8lXh1
 6ee2jqpmikw/GHLTWfY5GK1enlCJc8f8X2cykic1NBhWo+L4xXUVMVLiIaiJSTvF3mE9
 HPMwrdi7lUxlqqzv/4hZOzwL+FDPt8KUf1Lb5l2HrYiI+PC5PWp/qHfajv+N5UTzQ/+P
 eUHi2flAKej8Ykb7xMWAx5v90+xtQoqfQ67GjlCYrnk6z7Z0fUVskMp7RXeGNC4joH88
 EwpQ==
MIME-Version: 1.0
X-Received: by 10.195.13.234 with SMTP id fb10mr18320664wjd.50.1393932891864; 
 Tue, 04 Mar 2014 03:34:51 -0800 (PST)
Received: by 10.216.199.137 with HTTP; Tue, 4 Mar 2014 03:34:51 -0800 (PST)
In-Reply-To: <CANE7k9d0B1deaZVt67s5G18cZFRd+h02bqkZLTC1=Bo3NSfosA@mail.gmail.com>
References: <CANE7k9cpuh6Rs6vE0sTCjFxHfqsry+L-kx=ZR+GuGsJPXvp6og@mail.gmail.com>
 <6B63BE07-96EA-4125-BDF8-7982FD5B9EB8@recoil.org>
 <CANE7k9d0B1deaZVt67s5G18cZFRd+h02bqkZLTC1=Bo3NSfosA@mail.gmail.com>
Date: Tue, 4 Mar 2014 11:34:51 +0000
Message-ID: <CAAxsn=GZo0p4wutP3Q8HF8SdOSkCV2Z95_fq-cApe4P9+Sb4+A@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Pavel Zaichenkov <zaichenkov@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes@lists.ocaml.org, ocaml-core@googlegroups.com
Subject: Re: [ocaml-ctypes] Foreign function interface support
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 04 Mar 2014 11:08:34 -0000

On 04/03/2014, Pavel Zaichenkov <zaichenkov@gmail.com> wrote:
> It fails for both OS X and Ubuntu.

Passing -Wl,--no-as-needed should fix the problem on Ubuntu.  Here's a
full example that works (for me) on both Ubuntu and OS X.  I'm calling
ocamlfind directly rather than using corebuild, but perhaps this'll be
some help in constructing a corebuild command that does what you need.
 (The '-verbose 1' corebuild option will show you the commands that
corebuild is executing.)

In both cases picosat.ml and test.ml contain exactly the code that you posted.

On Ubuntu:

  $ ocamlfind opt -a -cclib -lpicosat -cclib -Wl,--no-as-needed
-package ctypes.foreign picosat.ml -o picosat.cmxa
  $ ocamlfind opt    -cclib -lpicosat -cclib -Wl,--no-as-needed
-package ctypes.foreign -linkpkg picosat.cmxa test.ml -o test.native

On OS X

  $ ocamlfind opt -a -cclib -lpicosat -package ctypes.foreign
picosat.ml -o picosat.cmxa
  $ ocamlfind opt    -cclib -lpicosat -package ctypes.foreign -linkpkg
picosat.cmxa test.ml -o test.native

You can check that the picosat library has been linked in using 'ldd
test.native' on Ubuntu or 'otool -L test.native' on OS X; you should
see a line like this:

   libpicosat.so.1 => /usr/lib/libpicosat.so.1 (0x00007fa11567d000)

or like this:

   libpicosat.dylib (compatibility version 0.0.0, current version 0.0.0)

> Btw, I get "Unbound value returning_checking_errno" error for datetime
> example in both systems.

As Daniel said, this is due to an API change in ctypes between 0.1.X
(which is described in RWO) and 0.2.X (which is what OPAM now installs
by default).  It's still possible to install 0.1.1 using OPAM if you
want a version of ctypes that's fully compatible with the RWO text,
but the API changes are actually fairly few, so it may be worth
persisting with the latest version.  In this case the change you need
is to change

   foreign "gettimeofday"
      (ptr timeval @-> ptr timezone @-> returning_checking_errno int)

to

   foreign "gettimeofday" ~check_errno:true
      (ptr timeval @-> ptr timezone @-> returning int)

Hope that helps,

Jeremy.

From zaichenkov@gmail.com  Sun Mar  9 00:48:59 2014
Return-Path: <zaichenkov@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-51.csi.cam.ac.uk (ppsw-51.csi.cam.ac.uk [131.111.8.151])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 243D63C0BF
 for <ctypes@lists.ocaml.org>; Sun,  9 Mar 2014 00:48:59 +0000 (GMT)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1575209 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.216.48 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (zaichenkov[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qa0-f48.google.com ([209.85.216.48]:39702)
 by ppsw-51.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1WMSKx-0005SX-ZL (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <zaichenkov@gmail.com>); Sun, 09 Mar 2014 01:15:32 +0000
Received: by mail-qa0-f48.google.com with SMTP id m5so5533736qaj.7
 for <ctypes@lists.ocaml.org>; Sat, 08 Mar 2014 17:15:30 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=Cp9rhShAVtwKkWk2FVdOW1SYRHwzDgmn5XwkisKAkBc=;
 b=CfzL8bmM6MPqxIsTx2UaYoecG+5o13b7L8j1RRHe58GPqDDcappdpvp58cjOffGYFx
 nVijVx50yVwmKAbcTK0p7wRXAuIOfCG0XHjCPudIpkD4XMXLxIf6X1aCVLG5ee5H8kEG
 u4xOn8soRIgjb6yO2Mah3eQneRpFxq9l3Yx3gQIaTKSE9q9+C2L7Ije2Fk/mNsibSuQJ
 2OlMjqS5pcgCNsESnq8zCgDOrLygtRQvt8zPtqHWWUVdkwYo+ZkRWOx5hZNpeUvzAIsC
 6oXyZberlrKJw91uku/G2IokaoAUMpTwHfm2O0SrHh6kND5vf2a8FFjO7X4oAXd9VryV
 +CpA==
MIME-Version: 1.0
X-Received: by 10.224.137.202 with SMTP id x10mr46165qat.80.1394327730769;
 Sat, 08 Mar 2014 17:15:30 -0800 (PST)
Received: by 10.140.94.176 with HTTP; Sat, 8 Mar 2014 17:15:30 -0800 (PST)
In-Reply-To: <CAAxsn=GZo0p4wutP3Q8HF8SdOSkCV2Z95_fq-cApe4P9+Sb4+A@mail.gmail.com>
References: <CANE7k9cpuh6Rs6vE0sTCjFxHfqsry+L-kx=ZR+GuGsJPXvp6og@mail.gmail.com>
 <6B63BE07-96EA-4125-BDF8-7982FD5B9EB8@recoil.org>
 <CANE7k9d0B1deaZVt67s5G18cZFRd+h02bqkZLTC1=Bo3NSfosA@mail.gmail.com>
 <CAAxsn=GZo0p4wutP3Q8HF8SdOSkCV2Z95_fq-cApe4P9+Sb4+A@mail.gmail.com>
Date: Sun, 9 Mar 2014 01:15:30 +0000
Message-ID: <CANE7k9dvDnU3aE+zzFZMS2io-YhRScVek8n6a+bf043PF0XmbA@mail.gmail.com>
From: Pavel Zaichenkov <zaichenkov@gmail.com>
To: yallop@gmail.com
Content-Type: text/plain; charset=ISO-8859-1
Cc: ctypes@lists.ocaml.org, ocaml-core@googlegroups.com
Subject: Re: [ocaml-ctypes] Foreign function interface support
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sun, 09 Mar 2014 00:48:59 -0000

Your suggestions helped me indeed.

I finally made picosat bindings work.
If you are interested, here is the repository:
https://github.com/zayac/ocaml-picosat. This works for OS X only yet,
but I will add relevant flags for Ubuntu later.

On 4 March 2014 11:34, Jeremy Yallop <yallop@gmail.com> wrote:
> On 04/03/2014, Pavel Zaichenkov <zaichenkov@gmail.com> wrote:
>> It fails for both OS X and Ubuntu.
>
> Passing -Wl,--no-as-needed should fix the problem on Ubuntu.  Here's a
> full example that works (for me) on both Ubuntu and OS X.  I'm calling
> ocamlfind directly rather than using corebuild, but perhaps this'll be
> some help in constructing a corebuild command that does what you need.
>  (The '-verbose 1' corebuild option will show you the commands that
> corebuild is executing.)
>
> In both cases picosat.ml and test.ml contain exactly the code that you posted.
>
> On Ubuntu:
>
>   $ ocamlfind opt -a -cclib -lpicosat -cclib -Wl,--no-as-needed
> -package ctypes.foreign picosat.ml -o picosat.cmxa
>   $ ocamlfind opt    -cclib -lpicosat -cclib -Wl,--no-as-needed
> -package ctypes.foreign -linkpkg picosat.cmxa test.ml -o test.native
>
> On OS X
>
>   $ ocamlfind opt -a -cclib -lpicosat -package ctypes.foreign
> picosat.ml -o picosat.cmxa
>   $ ocamlfind opt    -cclib -lpicosat -package ctypes.foreign -linkpkg
> picosat.cmxa test.ml -o test.native
>
> You can check that the picosat library has been linked in using 'ldd
> test.native' on Ubuntu or 'otool -L test.native' on OS X; you should
> see a line like this:
>
>    libpicosat.so.1 => /usr/lib/libpicosat.so.1 (0x00007fa11567d000)
>
> or like this:
>
>    libpicosat.dylib (compatibility version 0.0.0, current version 0.0.0)
>
>> Btw, I get "Unbound value returning_checking_errno" error for datetime
>> example in both systems.
>
> As Daniel said, this is due to an API change in ctypes between 0.1.X
> (which is described in RWO) and 0.2.X (which is what OPAM now installs
> by default).  It's still possible to install 0.1.1 using OPAM if you
> want a version of ctypes that's fully compatible with the RWO text,
> but the API changes are actually fairly few, so it may be worth
> persisting with the latest version.  In this case the change you need
> is to change
>
>    foreign "gettimeofday"
>       (ptr timeval @-> ptr timezone @-> returning_checking_errno int)
>
> to
>
>    foreign "gettimeofday" ~check_errno:true
>       (ptr timeval @-> ptr timezone @-> returning int)
>
> Hope that helps,
>
> Jeremy.

From florian.pichlmeier@mytum.de  Wed Apr 30 16:50:37 2014
Return-Path: <florian.pichlmeier@mytum.de>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id C69483C316
 for <ctypes@lists.ocaml.org>; Wed, 30 Apr 2014 16:50:37 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1588424 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [129.187.255.136 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mailout2.lrz.de ([129.187.255.136]:44187)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:DHE-RSA-AES256-GCM-SHA384:256)
 id 1WfXEr-0006e5-ru (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <florian.pichlmeier@mytum.de>); Wed, 30 Apr 2014 17:20:06 +0100
Received: from lxmhs66.srv.lrz.de (localhost [127.0.0.1])
 by mailout2.lrz.de (Postfix) with ESMTP id 3gJlLX6mndzydV
 for <ctypes@lists.ocaml.org>; Wed, 30 Apr 2014 18:20:04 +0200 (CEST)
X-Virus-Scanned: by amavisd-new at lrz.de in lxmhs66.srv.lrz.de
Received: from mailout2.lrz.de ([127.0.0.1])
 by lxmhs66.srv.lrz.de (lxmhs66.srv.lrz.de [127.0.0.1]) (amavisd-new,
 port 10002) with ESMTP id 94xkKJR9Y1IU for <ctypes@lists.ocaml.org>;
 Wed, 30 Apr 2014 18:20:04 +0200 (CEST)
Received: from andromeda1.ze.tum.de (andromeda1.ze.tum.de [129.187.39.15])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mailout2.lrz.de (Postfix) with ESMTPS id 3gJlKm2TbWzybL
 for <ctypes@lists.ocaml.org>; Wed, 30 Apr 2014 18:19:24 +0200 (CEST)
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
From: "Florian Pichlmeier" <florian.pichlmeier@mytum.de>
To: ctypes@lists.ocaml.org
Date: Wed, 30 Apr 2014 16:19:24 -0000
Message-ID: <20140430161924.28903.96399@andromeda1.ze.tum.de>
Subject: [ocaml-ctypes] Finalising data
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 30 Apr 2014 15:50:37 -0000

Hello,

i have this create function

type t = unit ptr
let zframe : t typ = ptr void 
let zframe_opt : t option typ = ptr_opt void

let create msg = 
  let stub = foreign "zframe_new"
      (string @-> size_t @-> returning zframe_opt)
  in
  let msg_size =  Size_t.of_int (String.length msg) in
  match stub msg msg_size with 
  | None -> raise Frame_creation
  | Some x -> x

How can i tell the garbage collector to call my specific 
destroy function?

Any thougts?

Florian

From philippe.veber@gmail.com  Fri May 16 05:59:02 2014
Return-Path: <philippe.veber@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 911DE3C250
 for <ctypes@lists.ocaml.org>; Fri, 16 May 2014 05:59:02 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1588424 
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (philippe.veber[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.41 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wg0-f41.google.com ([74.125.82.41]:64101)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1WlAhu-0002e4-qB (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <philippe.veber@gmail.com>); Fri, 16 May 2014 06:29:22 +0100
Received: by mail-wg0-f41.google.com with SMTP id z12so4367513wgg.0
 for <ctypes@lists.ocaml.org>; Thu, 15 May 2014 22:29:20 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:from:date:message-id:subject:to:content-type;
 bh=NbgYJYeSMRFus6WdWEYxm3ZKjMtOfml7jjRZU3dupBY=;
 b=hGTRQVxqmDWyEaqE/sPK+9YZ++bxTENpPvakhQQSXTtD5qN2u8h51WSEz9+5tggi1d
 8E74VJM/0ozSPeWyWj5HRNXJCB25Fo2LOonGKWegxK8QvbUM822+JVCrLDKSqERbKTqI
 +Mg6T1vFjXETjUmP7UVln7z3p9rE2I9LS8q2O+H1LYRDCBbvw4FZaLGijNhg3uS3Idsc
 DVE7HGzn7wNcQZO2O/3ff+V04iVuAAtMtM8bYuZo+VurhLpNFKwVTKQdtifITOUL5qpb
 bFdHKwz9Dqwl54E6piE5vMye6KygoTbVvg04IfYZt/wKCNu0b4p1DFZjVkjjjZZFEW1u
 L6kw==
X-Received: by 10.194.78.4 with SMTP id x4mr301318wjw.58.1400218159835; Thu,
 15 May 2014 22:29:19 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.194.239.100 with HTTP; Thu, 15 May 2014 22:28:59 -0700 (PDT)
From: Philippe Veber <philippe.veber@gmail.com>
Date: Fri, 16 May 2014 07:28:59 +0200
Message-ID: <CAOOOohT-=sHsgD2AHsGQ8oS9cc=OvhsJdbn96LcYAwtQieH-Tg@mail.gmail.com>
To: ctypes@lists.ocaml.org
Content-Type: multipart/alternative; boundary=047d7bfcf91406717e04f97db236
Subject: [ocaml-ctypes] Bit field encoding.
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 16 May 2014 04:59:02 -0000

--047d7bfcf91406717e04f97db236
Content-Type: text/plain; charset=ISO-8859-1

Hi everyone,

Has ctypes some support for bit fields in C struct? If not is it correct to
encode:

typedef struct {
   int32_t pos;
   uint32_t bin:16, qual:8, l_qname:8;
   ...
} bam1_core_t

as:

   type bam1_core_t
   let bam1_core_t : bam1_core_t structure typ = structure "bam1_core_t"
   let bam1_core_t_pos_f = field bam1_core_t "pos" int32_t
   let bam1_core_t_props_f = field bam1_core_t "props" int32_t
   ...
   let () = seal bam1_core_t

and then play with the fake "props" field directly?

Cheers,
  Philippe.

--047d7bfcf91406717e04f97db236
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Hi everyone,<br><br>Has ctypes some support for bit fields=
 in C struct? If not is it correct to encode:<br><br><span style=3D"font-fa=
mily:courier new,monospace">typedef struct {<br>=A0=A0 int32_t pos;<br>=A0=
=A0 uint32_t bin:16, qual:8, l_qname:8;<br>

=A0=A0 ...<br>} bam1_core_t<br></span><br>as:<br><br><span style=3D"font-fa=
mily:courier new,monospace">=A0=A0 type bam1_core_t<br>=A0=A0 let bam1_core=
_t : bam1_core_t structure typ =3D structure &quot;bam1_core_t&quot;<br>=A0=
=A0 let bam1_core_t_pos_f =3D field bam1_core_t &quot;pos&quot; int32_t<br>

=A0=A0 let bam1_core_t_props_f =3D field bam1_core_t &quot;props&quot; int3=
2_t<br>=A0=A0 ...<br>=A0=A0 let () =3D seal bam1_core_t<br></span><br>and t=
hen play with the fake &quot;props&quot; field directly?<br><br>Cheers,<br>=
=A0 Philippe.<br>

<br></div>

--047d7bfcf91406717e04f97db236--

From yallop@gmail.com  Sat May 17 00:21:53 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 8E11D3C150
 for <ctypes@lists.ocaml.org>; Sat, 17 May 2014 00:21:53 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1588424 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.174 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-we0-f174.google.com ([74.125.82.174]:49041)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1WlRvC-0002S8-lJ (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Sat, 17 May 2014 00:52:16 +0100
Received: by mail-we0-f174.google.com with SMTP id k48so3183787wev.5
 for <ctypes@lists.ocaml.org>; Fri, 16 May 2014 16:52:14 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=79rcDcz5o3/dS8BAvBXJUaEbZGSaFYvD2uPW0BGDLWc=;
 b=fDemVBMjYXKs0DO1KOqUYYUro/vdP599hzzJKGiOl4P+nqIY1ImQ/kAhu2tPQcjQSE
 mBL3Rn0WSvbuKsuk7rL7C9xrvV8xKGNvOfS6iW7Dk0kAtKUU0nYv/vhB1LHBOcrV4hfr
 0WLW63tHFfp0KQZxlMsT5JfoCToLD/N0o5aWcL75QJY0z5O3Ar3Su7mEP9zb5Tn+kVr8
 XuiW0aF9ahfiyy3tHc+kRd7w3L9/dmqwvwlR0QaAhWI0j1xYoxYYmeuJ+oq5Dm46gAyY
 VEMSYw2igHl/aXr+Ytph6wPCilnaI7O8UEJVbZaGDtRE2L+sg6zvVJJIPpT3BIQjD/XW
 rDPw==
MIME-Version: 1.0
X-Received: by 10.180.12.135 with SMTP id y7mr554405wib.39.1400284334106; Fri,
 16 May 2014 16:52:14 -0700 (PDT)
Received: by 10.217.5.65 with HTTP; Fri, 16 May 2014 16:52:13 -0700 (PDT)
In-Reply-To: <20140430161924.28903.96399@andromeda1.ze.tum.de>
References: <20140430161924.28903.96399@andromeda1.ze.tum.de>
Date: Sat, 17 May 2014 00:52:13 +0100
Message-ID: <CAAxsn=Fwu8Qhp6tr92XVUTj52mvWOSyNMFmdTTmMXS8zkTgeAA@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Florian Pichlmeier <florian.pichlmeier@mytum.de>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Finalising data
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 16 May 2014 23:21:53 -0000

Dear Florian,

On 30/04/2014, Florian Pichlmeier <florian.pichlmeier@mytum.de> wrote:
> i have this create function
>
> type t = unit ptr
> let zframe : t typ = ptr void
> let zframe_opt : t option typ = ptr_opt void
>
> let create msg =
>   let stub = foreign "zframe_new"
>       (string @-> size_t @-> returning zframe_opt)
>   in
>   let msg_size =  Size_t.of_int (String.length msg) in
>   match stub msg msg_size with
>   | None -> raise Frame_creation
>   | Some x -> x
>
> How can i tell the garbage collector to call my specific
> destroy function?

You can attach a finaliser, either to the zframe value itself, or to
another object which has the same lifetime as the zframe.  The
drawback of attaching the finaliser directly to the zframe is that a
number of ctypes functions (e.g. the functions for pointer arithmetic)
create new ptr values, so you may end up destroying the object while
you still have a pointer to it.  For example:

    let zf = create msg in
    let () = Gc.finalise destroy_zframe zf in
      (zf +@ 0)
    (* At this point you still have a pointer to the zframe you
       created, but the original Ctypes.ptr value has gone, so the
       GC is free to run the finaliser attached to it. *)

If you're already wrapping the zframe in a larger OCaml value, such as
a record, it would probably be wiser to attach the finaliser to that
value instead, since you can see more easily in your own code exactly
when copies are made.  If you want even stronger guarantees, you
should make sure that the type you use to wrap the zframe has a
mutable field, since the runtime is free to make copies of immutable
values.

It may be more advisable to consider an alternative interface that
makes the lifetime of your zframes deterministic and explicit.  One
simple approach is to follow the design of the channel interfaces in
the standard library, and expose a pair of functions

   val create : string -> t
   val destroy : t -> unit

then leave it up to the user to ensure that destroy_zframe is closed
at an appropriate moment (but perhaps catching other errors, such as
double closes).

An alternative approach is to follow the design often used in Scheme,
and expose a single higher-order function that manages the lifetime of
the frame.  For example, if you have a function with the following
interface

   val with_zframe : string -> (t -> 'a) -> 'a

then you might call it as follows

   with_zframe msg
     (fun zframe ->
         (* body: the zframe value is "live" here *)
     )

and the user can be confident that -- whether the body finishes
normally or with an exception -- with_zframe will destroy the value in
a timely way.  This approach is used in the Batteries library to
manage files: see with_file_in and with_file_out, for example:

   http://ocaml-batteries-team.github.io/batteries-included/hdoc2/BatFile.html#VALwith_file_in
   http://ocaml-batteries-team.github.io/batteries-included/hdoc2/BatFile.html#VALwith_file_out

I hope that helps,

Jeremy.

From yallop@gmail.com  Sat May 17 00:44:12 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 5C22B3C150
 for <ctypes@lists.ocaml.org>; Sat, 17 May 2014 00:44:12 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1588424 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.176 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f176.google.com ([209.85.212.176]:43729)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1WlSGo-0003D4-l4 (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Sat, 17 May 2014 01:14:34 +0100
Received: by mail-wi0-f176.google.com with SMTP id n15so1720583wiw.9
 for <ctypes@lists.ocaml.org>; Fri, 16 May 2014 17:14:34 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=uI7HpupTTcr436J7bK9dDTSqS/lh48XErfLigrTgUco=;
 b=UIGPPveG8NuKtv5YSXD07YrESEhIkJaKrl24jSCW85O8rjcE1gpo3kY7XvdA2MG8Ya
 qUUoXRxx3XB1jOVgEvBZbWDEM/JXq8yNf1j00gH0l87/q/Oc64I5ZmbAhvNpizhDzaOG
 Appt8384Bkec9S/GQqvNQ7+Iy+IJaB0MpsW0PnfWoJDA4LOTlZ3xTQqN5QhwFPrkhWzj
 rIWHv+wm/s23og23viLrL+6jdgPpcpwKniGXD6EgdZOQiWg3f2/SLZa1sDC0R/Z/7pqw
 JC+dt55c6WUrBjy+BDXwAa/JBgcLogEpZCpfER7dB00XdbMzRaGe7IvIS8YMtbFwP/aK
 4jKA==
MIME-Version: 1.0
X-Received: by 10.194.92.81 with SMTP id ck17mr16828919wjb.14.1400285674204;
 Fri, 16 May 2014 17:14:34 -0700 (PDT)
Received: by 10.217.5.65 with HTTP; Fri, 16 May 2014 17:14:34 -0700 (PDT)
In-Reply-To: <CAOOOohT-=sHsgD2AHsGQ8oS9cc=OvhsJdbn96LcYAwtQieH-Tg@mail.gmail.com>
References: <CAOOOohT-=sHsgD2AHsGQ8oS9cc=OvhsJdbn96LcYAwtQieH-Tg@mail.gmail.com>
Date: Sat, 17 May 2014 01:14:34 +0100
Message-ID: <CAAxsn=Ennh6-MWja5M3QnAHDurTmi1P7wWijTTU3MhoTqUdhQA@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Philippe Veber <philippe.veber@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Bit field encoding.
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 16 May 2014 23:44:12 -0000

Dear Philippe,

On 16/05/2014, Philippe Veber <philippe.veber@gmail.com> wrote:
> Has ctypes some support for bit fields in C struct?

Not yet, I'm afraid.

> If not is it correct to
> encode:
>
> typedef struct {
>    int32_t pos;
>    uint32_t bin:16, qual:8, l_qname:8;
>    ...
> } bam1_core_t
>
> as:
>
>    type bam1_core_t
>    let bam1_core_t : bam1_core_t structure typ = structure "bam1_core_t"
>    let bam1_core_t_pos_f = field bam1_core_t "pos" int32_t
>    let bam1_core_t_props_f = field bam1_core_t "props" int32_t
>    ...
>    let () = seal bam1_core_t
>
> and then play with the fake "props" field directly?

It's quite likely to work but it's not guaranteed, since the C
standard gives compilers a fair amount of freedom in laying out
bit-fields.  The good news is that the standard also requires
compilers to document how bit-fields are laid out, so your compiler
documentation may have helpful details.

Kind regards,

Jeremy.

From florian.pichlmeier@mytum.de  Mon May 19 14:49:56 2014
Return-Path: <florian.pichlmeier@mytum.de>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-41.csi.cam.ac.uk (ppsw-41.csi.cam.ac.uk [131.111.8.141])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 2F6F73C19B
 for <ctypes@lists.ocaml.org>; Mon, 19 May 2014 14:49:56 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1588424 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [129.187.255.135 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mailout1.lrz.de ([129.187.255.135]:47280)
 by ppsw-41.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1.2:DHE-RSA-AES256-GCM-SHA384:256)
 id 1WmOQU-00044V-Qc (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <florian.pichlmeier@mytum.de>); Mon, 19 May 2014 15:20:27 +0100
Received: from lxmhs65.srv.lrz.de (localhost [127.0.0.1])
 by mailout1.lrz.de (Postfix) with ESMTP id 3gXMnj4qqRz1xsD;
 Mon, 19 May 2014 16:20:25 +0200 (CEST)
X-Virus-Scanned: by amavisd-new at lrz.de in lxmhs65.srv.lrz.de
Received: from mailout1.lrz.de ([127.0.0.1])
 by lxmhs65.srv.lrz.de (lxmhs65.srv.lrz.de [127.0.0.1]) (amavisd-new,
 port 10002)
 with ESMTP id ho1vDIdurW63; Mon, 19 May 2014 16:20:25 +0200 (CEST)
Received: from andromeda1.ze.tum.de (andromeda1.ze.tum.de [129.187.39.15])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mailout1.lrz.de (Postfix) with ESMTPS id 3gXMnj1Ywxz1xrm;
 Mon, 19 May 2014 16:20:25 +0200 (CEST)
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
From: "Florian Pichlmeier" <florian.pichlmeier@mytum.de>
To: yallop@gmail.com
In-reply-to: <CAAxsn=Fwu8Qhp6tr92XVUTj52mvWOSyNMFmdTTmMXS8zkTgeAA@mail.gmail.com>
References: <CAAxsn=Fwu8Qhp6tr92XVUTj52mvWOSyNMFmdTTmMXS8zkTgeAA@mail.gmail.com>
 <20140430161924.28903.96399@andromeda1.ze.tum.de>
Date: Mon, 19 May 2014 14:20:25 -0000
Message-ID: <20140519142025.2757.70984@andromeda1.ze.tum.de>
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Finalising data
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 19 May 2014 13:49:56 -0000

Dear Jeremy,

thanks a lot for your comprehensive response.

I will change my api to include explicit destroy 
functions for messages.

But now i have encountered a new problem.
Zeromq uses incomplete types for many data types,
like the frame type
typedef struct _zframe_t zframe_t;

On the OCaml side i use void pointer to represent 
these data types, and thats where the problem arose.

The frame destroy function call for example is that
    zframe_destroy (zframe_t **self_p);
with the corresponding ocaml function

let destroy (msg : t) = 
let stub = foreign "zframe_destroy" (ptr void @-> returning int) in
stub (msg +@ 0)

The problem is the msg +@ 0 part.

Do you know a way around this problem?

Thanks again for your efforts,

Florian
 
Jeremy Yallop <yallop@gmail.com> wrote:


> Dear Florian,
> 
> On 30/04/2014, Florian Pichlmeier <florian.pichlmeier@mytum.de> wrote:
> 
> > i have this create function
> > 
> > type t = unit ptr
> > let zframe : t typ = ptr void
> > let zframe_opt : t option typ = ptr_opt void
> > 
> > let create msg =
> >   let stub = foreign "zframe_new"
> >       (string @-> size_t @-> returning zframe_opt)
> >   in
> >   let msg_size =  Size_t.of_int (String.length msg) in
> >   match stub msg msg_size with
> >   | None -> raise Frame_creation
> >   | Some x -> x
> > 
> > How can i tell the garbage collector to call my specific
> > destroy function?
> > 
> > 
> 
> You can attach a finaliser, either to the zframe value itself, or to
> another object which has the same lifetime as the zframe.  The
> drawback of attaching the finaliser directly to the zframe is that a
> number of ctypes functions (e.g. the functions for pointer arithmetic)
> create new ptr values, so you may end up destroying the object while
> you still have a pointer to it.  For example:
> 
>     let zf = create msg in
>     let () = Gc.finalise destroy_zframe zf in
>       (zf +@ 0)
>     (* At this point you still have a pointer to the zframe you
>        created, but the original Ctypes.ptr value has gone, so the
>        GC is free to run the finaliser attached to it. *)
> 
> If you're already wrapping the zframe in a larger OCaml value, such as
> a record, it would probably be wiser to attach the finaliser to that
> value instead, since you can see more easily in your own code exactly
> when copies are made.  If you want even stronger guarantees, you
> should make sure that the type you use to wrap the zframe has a
> mutable field, since the runtime is free to make copies of immutable
> values.
> 
> It may be more advisable to consider an alternative interface that
> makes the lifetime of your zframes deterministic and explicit.  One
> simple approach is to follow the design of the channel interfaces in
> the standard library, and expose a pair of functions
> 
>    val create : string -> t
>    val destroy : t -> unit
> 
> then leave it up to the user to ensure that destroy_zframe is closed
> at an appropriate moment (but perhaps catching other errors, such as
> double closes).
> 
> An alternative approach is to follow the design often used in Scheme,
> and expose a single higher-order function that manages the lifetime of
> the frame.  For example, if you have a function with the following
> interface
> 
>    val with_zframe : string -> (t -> 'a) -> 'a
> 
> then you might call it as follows
> 
>    with_zframe msg
>      (fun zframe ->
>          (* body: the zframe value is "live" here *)
>      )
> 
> and the user can be confident that -- whether the body finishes
> normally or with an exception -- with_zframe will destroy the value in
> a timely way.  This approach is used in the Batteries library to
> manage files: see with_file_in and with_file_out, for example:
> 
>    http://ocaml-batteries-team.github.io/batteries-included/hdoc2/BatFile.html#VALwith_file_in
>    http://ocaml-batteries-team.github.io/batteries-included/hdoc2/BatFile.html#VALwith_file_out
> 
> I hope that helps,
> 
> Jeremy.
> 
> 
> 

From yallop@gmail.com  Mon May 19 15:21:59 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-41.csi.cam.ac.uk (ppsw-41.csi.cam.ac.uk [131.111.8.141])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 9F0FD3C19B
 for <ctypes@lists.ocaml.org>; Mon, 19 May 2014 15:21:59 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1588424 
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.42 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wg0-f42.google.com ([74.125.82.42]:43505)
 by ppsw-41.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1WmOvW-000259-RF (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Mon, 19 May 2014 15:52:30 +0100
Received: by mail-wg0-f42.google.com with SMTP id y10so7852505wgg.1
 for <ctypes@lists.ocaml.org>; Mon, 19 May 2014 07:52:30 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=ys7vMYlxABAHuyqgqWZdy+XXZCyrMTPdS77xPnLQ+q8=;
 b=EPxH/OU/yo2weoxAvgBxk/aLEC6yv3ei1QWzAtLPnPOc3bkElnPaALreH4vRrxJIJj
 1x4CU1DKs+WOb0OsSnYRrjd1cA/jnTbByq0j3RLiQUmj+gdKw3DzhpL2OHaNauVZm51x
 wui7XDHjzs1lAr/NUa45n07gDlnZZTyuXUFvOX6vOIyKWPhrxe+B+I6TaHVKw5gIXsRz
 InogeCu86AuDqLlESrIojeapm21fld2Z0VEGxxiqaCUjtc7Efx+vuZiA02yHlvyZbrxW
 2H+l2GD9u788qxNgKUFtObvAIEfihgMI7xj7rxSKvOurKgbx/J0Y73yXfiWiG2DNZU/K
 Dzvg==
MIME-Version: 1.0
X-Received: by 10.194.92.228 with SMTP id cp4mr17184795wjb.28.1400511149931;
 Mon, 19 May 2014 07:52:29 -0700 (PDT)
Received: by 10.217.5.65 with HTTP; Mon, 19 May 2014 07:52:29 -0700 (PDT)
In-Reply-To: <20140519142025.2757.70984@andromeda1.ze.tum.de>
References: <20140430161924.28903.96399@andromeda1.ze.tum.de>
 <CAAxsn=Fwu8Qhp6tr92XVUTj52mvWOSyNMFmdTTmMXS8zkTgeAA@mail.gmail.com>
 <20140519142025.2757.70984@andromeda1.ze.tum.de>
Date: Mon, 19 May 2014 15:52:29 +0100
Message-ID: <CAAxsn=F+WC2uM4kaL4hPdNduamppPxG-9rCz45LOHdE5Wy8PfA@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Florian Pichlmeier <florian.pichlmeier@mytum.de>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Finalising data
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 19 May 2014 14:21:59 -0000

Dear Florian,

On 19/05/2014, Florian Pichlmeier <florian.pichlmeier@mytum.de> wrote:
> But now i have encountered a new problem.
> Zeromq uses incomplete types for many data types,
> like the frame type
> typedef struct _zframe_t zframe_t;
>
> On the OCaml side i use void pointer to represent
> these data types, and thats where the problem arose.
>
> The frame destroy function call for example is that
>     zframe_destroy (zframe_t **self_p);
> with the corresponding ocaml function
>
> let destroy (msg : t) =
> let stub = foreign "zframe_destroy" (ptr void @-> returning int) in
> stub (msg +@ 0)
>
> The problem is the msg +@ 0 part.

The ctypes equivalent of zeromq's incomplete struct declaration is a
call to the 'structure' function without a corresponding call to
'seal'.  For example, you can represent zframe_t as follows:

    (* struct _zframe_t *)
    let zframe_t = structure "_zframe_t"

This allows you to give a more precise type to the zframe_destroy binding:

    let zframe_destroy = foreign "zframe_destroy"
        (ptr (ptr zframe_t) @-> returning int)

Although 'zframe_t' is incomplete, 'ptr zframe_t' (i.e. zframe_t*) is
complete, so pointer arithmetic (with +@ etc.) should work as you
expect.

I hope that helps,

Jeremy.

From philippe.veber@gmail.com  Tue May 20 06:22:54 2014
Return-Path: <philippe.veber@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id A19AE3C19B
 for <ctypes@lists.ocaml.org>; Tue, 20 May 2014 06:22:54 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1588424 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.170 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (philippe.veber[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f170.google.com ([209.85.212.170]:53386)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1WmczP-0000WQ-rb (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <philippe.veber@gmail.com>); Tue, 20 May 2014 06:53:28 +0100
Received: by mail-wi0-f170.google.com with SMTP id bs8so6254123wib.1
 for <ctypes@lists.ocaml.org>; Mon, 19 May 2014 22:53:27 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc:content-type;
 bh=UoC5ulIbe2WNrJ4o5uuCahRlQa8n8HLN9UzQQHb1g+Y=;
 b=JYA6G2CHw4s1GIBN9oAhcQORixhj6LPIgop/Pl7Qo9dIHVofLuP8urdXhZnJV1ybsy
 kS8K76h0koHCA7rghkQPM95AEKDmT+rJU6oRxP/oCqpd/cd99599DEWJS0ctK5/FVLqJ
 0eWPj3dUXOA7eJ+sCE399OteaZ38uCAyHg2z6IIhoRK4waOlfptesQRhwXae+wc30Efv
 E57Aox3/11bfDuN2b+/f7rVVzXRlLak979qLaXH9Mfl67nA5P80kLEutxfxvFuFMECXh
 KsoXhmQAmxlsUv/xgvNv1zvNLegc1X0Io0dPy9/YOWpGSCOrB6ldGTrYGavfpIswEw+l
 ePZg==
X-Received: by 10.194.108.5 with SMTP id hg5mr3067151wjb.57.1400565206988;
 Mon, 19 May 2014 22:53:26 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.194.239.100 with HTTP; Mon, 19 May 2014 22:53:06 -0700 (PDT)
In-Reply-To: <CAAxsn=Ennh6-MWja5M3QnAHDurTmi1P7wWijTTU3MhoTqUdhQA@mail.gmail.com>
References: <CAOOOohT-=sHsgD2AHsGQ8oS9cc=OvhsJdbn96LcYAwtQieH-Tg@mail.gmail.com>
 <CAAxsn=Ennh6-MWja5M3QnAHDurTmi1P7wWijTTU3MhoTqUdhQA@mail.gmail.com>
From: Philippe Veber <philippe.veber@gmail.com>
Date: Tue, 20 May 2014 07:53:06 +0200
Message-ID: <CAOOOohRA3Sj0+k1KxPBV7Bgk1MQfpzfqBNeuUtmZ2mQ2eE1VSQ@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Content-Type: multipart/alternative; boundary=089e0103defaa5bf1b04f9ce7f96
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Bit field encoding.
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 20 May 2014 05:22:54 -0000

--089e0103defaa5bf1b04f9ce7f96
Content-Type: text/plain; charset=ISO-8859-1

Thanks a lot Jeremy for your answer! I have chosen to write helper C
functions to access the records containing bitfields, so that I let the
compiler do its business without caring too much. I guess that no field
after a bitfield definition in a struct can be reliably accessed either
(with ctypes), even if it's not a bitfield itself (as there is no means to
know if the bitfield was packed or padded). Is that right?


2014-05-17 2:14 GMT+02:00 Jeremy Yallop <yallop@gmail.com>:

> Dear Philippe,
>
> On 16/05/2014, Philippe Veber <philippe.veber@gmail.com> wrote:
> > Has ctypes some support for bit fields in C struct?
>
> Not yet, I'm afraid.
>
> > If not is it correct to
> > encode:
> >
> > typedef struct {
> >    int32_t pos;
> >    uint32_t bin:16, qual:8, l_qname:8;
> >    ...
> > } bam1_core_t
> >
> > as:
> >
> >    type bam1_core_t
> >    let bam1_core_t : bam1_core_t structure typ = structure "bam1_core_t"
> >    let bam1_core_t_pos_f = field bam1_core_t "pos" int32_t
> >    let bam1_core_t_props_f = field bam1_core_t "props" int32_t
> >    ...
> >    let () = seal bam1_core_t
> >
> > and then play with the fake "props" field directly?
>
> It's quite likely to work but it's not guaranteed, since the C
> standard gives compilers a fair amount of freedom in laying out
> bit-fields.  The good news is that the standard also requires
> compilers to document how bit-fields are laid out, so your compiler
> documentation may have helpful details.
>
> Kind regards,
>
> Jeremy.
>

--089e0103defaa5bf1b04f9ce7f96
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Thanks a lot Jeremy for your answer! I have chosen to writ=
e helper C functions to access the records containing bitfields, so that I =
let the compiler do its business without caring too much. I guess that no f=
ield after a bitfield definition in a struct can be reliably accessed eithe=
r (with ctypes), even if it&#39;s not a bitfield itself (as there is no mea=
ns to know if the bitfield was packed or padded). Is that right?<br>

</div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">2014-05=
-17 2:14 GMT+02:00 Jeremy Yallop <span dir=3D"ltr">&lt;<a href=3D"mailto:ya=
llop@gmail.com" target=3D"_blank">yallop@gmail.com</a>&gt;</span>:<br><bloc=
kquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #cc=
c solid;padding-left:1ex">

Dear Philippe,<br>
<div class=3D""><br>
On 16/05/2014, Philippe Veber &lt;<a href=3D"mailto:philippe.veber@gmail.co=
m">philippe.veber@gmail.com</a>&gt; wrote:<br>
&gt; Has ctypes some support for bit fields in C struct?<br>
<br>
</div>Not yet, I&#39;m afraid.<br>
<div class=3D""><br>
&gt; If not is it correct to<br>
&gt; encode:<br>
&gt;<br>
&gt; typedef struct {<br>
&gt; =A0 =A0int32_t pos;<br>
&gt; =A0 =A0uint32_t bin:16, qual:8, l_qname:8;<br>
&gt; =A0 =A0...<br>
&gt; } bam1_core_t<br>
&gt;<br>
&gt; as:<br>
&gt;<br>
&gt; =A0 =A0type bam1_core_t<br>
&gt; =A0 =A0let bam1_core_t : bam1_core_t structure typ =3D structure &quot=
;bam1_core_t&quot;<br>
&gt; =A0 =A0let bam1_core_t_pos_f =3D field bam1_core_t &quot;pos&quot; int=
32_t<br>
&gt; =A0 =A0let bam1_core_t_props_f =3D field bam1_core_t &quot;props&quot;=
 int32_t<br>
&gt; =A0 =A0...<br>
&gt; =A0 =A0let () =3D seal bam1_core_t<br>
&gt;<br>
&gt; and then play with the fake &quot;props&quot; field directly?<br>
<br>
</div>It&#39;s quite likely to work but it&#39;s not guaranteed, since the =
C<br>
standard gives compilers a fair amount of freedom in laying out<br>
bit-fields. =A0The good news is that the standard also requires<br>
compilers to document how bit-fields are laid out, so your compiler<br>
documentation may have helpful details.<br>
<br>
Kind regards,<br>
<br>
Jeremy.<br>
</blockquote></div><br></div>

--089e0103defaa5bf1b04f9ce7f96--

From yallop@gmail.com  Thu May 22 08:54:01 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 441463C1C3
 for <ctypes@lists.ocaml.org>; Thu, 22 May 2014 08:54:01 +0100 (BST)
X-Cam-SpamScore: s
X-Cam-SpamDetails: score 1.3 from SpamAssassin-3.3.2-1588424 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.192.48 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qg0-f48.google.com ([209.85.192.48]:38622)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1WnOIq-0003wC-jo (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Thu, 22 May 2014 09:24:41 +0100
Received: by mail-qg0-f48.google.com with SMTP id i50so5068935qgf.7
 for <ctypes@lists.ocaml.org>; Thu, 22 May 2014 01:24:39 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:date:message-id:subject:from:to:content-type
 :content-transfer-encoding;
 bh=ILaMYH0EiPPioFmOGmGIC6OOW919I0ctYGfJo2b9vX0=;
 b=cevMEwICDsqCCEOuXxeORSkg+hWaIggbGVgpMcpaPJlWUYUXSgDp0G1mTbbOT8VV4f
 x774esvj1rIAuDaclk/h/cM5WpSYQpglHttHn0UEchy0CfjXdZDxB7HPBd+ZEYD5oPTV
 wo0rB3o+w6DRebCVfQ4Lnz/t8jHc9/FetxO8U2T0ITcnmYxCjqlysEXPYHmrCC5py3S4
 ZoaZQNzHmUuXcyin0UDBjMxr4tB3PYFsaGpEiGz748QGYRtukcACL24jKTreQifYyeID
 2kqz4sDeU/8cempuEP15k6pmU74i1b2Z8aVM5bnmKWQ6XWDeEDabDOKPDPkpGgCv37or
 ipbA==
MIME-Version: 1.0
X-Received: by 10.229.125.130 with SMTP id y2mr11230245qcr.22.1400747079035;
 Thu, 22 May 2014 01:24:39 -0700 (PDT)
Received: by 10.96.189.225 with HTTP; Thu, 22 May 2014 01:24:38 -0700 (PDT)
Date: Thu, 22 May 2014 09:24:38 +0100
Message-ID: <CAAxsn=FVPcwDWUZ9JsqRFOaWP+iDKfK6AK9jt5Zt9dv+_fG4ow@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Caml List <caml-list@inria.fr>, ctypes@lists.ocaml.org
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Subject: [ocaml-ctypes] ANN: ocaml-ctypes 0.3
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 22 May 2014 07:54:01 -0000

I'm pleased to announce the release of ocaml-ctypes 0.3, which is now
available on OPAM and for download from GitHub:

    https://github.com/ocamllabs/ocaml-ctypes/releases/

The ocaml-ctypes library makes it possible to call C functions
directly from OCaml without writing any C code.  For example, you can
bind C's "puts" function by supplying its name and type:

   # let puts =3D foreign "puts" (string @-> returning int);;
   val puts : string -> int =3D <fun>

You can then call the function immediately:

   # puts "Hello, world!";;
   Hello, world!
   - : int =3D 14

This is a simple example, but you can use the library to describe most
standard C types -- scalars, functions, structs, unions, arrays, and
pointers to values and functions -- making it possible to bind and
call almost any C function without leaving OCaml.

The ocaml-ctypes 0.1 release was announced on caml-list last summer:

   https://sympa.inria.fr/sympa/arc/caml-list/2013-06/msg00046.html

Since then the library has acquired a number of new features, including

 * Stub generation for functions.

   In addition to the dynamic binding mode illustrated with "puts"
above, ocaml-ctypes now supports generating stub code which can be
statically linked into your program.  The interface for stub
generation is close to the existing interface for dynamic binding, so
it should be easy to adapt existing code that uses ctypes to use stub
generation.  The pull request that introduced stub generation
describes the interface:

   https://github.com/ocamllabs/ocaml-ctypes/pull/129

   The release notes link to a number of examples:

   https://github.com/ocamllabs/ocaml-ctypes/releases/tag/ocaml-ctypes-0.3

 * Support for inverse stub generation.

   Stub generation can also operate in reverse, turning OCaml code
into a shared library that can be used from C.  There is an example
available which exposes a simple subset of Xmlm's XML-parsing API to C
(all without actually writing any C, of course):

   https://github.com/yallop/ocaml-ctypes-inverted-stubs-example/

 * Support for bigarrays.

 * Support for passing OCaml strings directly to C. (Patch by Peter Zotov.)

 * Top-level printing for C types and values: you can now build a
representation of a C type or a value and see its C printed form:

    # void @-> returning (ptr (array 10 (funptr (void @-> returning char)))=
);;
    - : (unit -> (unit -> char) carray ptr) fn =3D char(*(*(void))[10])(voi=
d)

    # struct_value ;;
    - : (s, [ `Struct ]) structured =3D { i =3D 10, d =3D 3.5  }

The release notes for this release and for ocaml-ctypes 0.2 list a
number of other newly-available features.  There is also one
backwards-incompatible change: what was previously the Ctypes.Array
module is now called Ctypes.CArray.

I'm grateful to the following people for contributions to the 0.2 and
0.3 releases:
   Daniel B=C3=BCnzli
   Ivan Gotovchits
   Rob Hoes
   Anil Madhavapeddy
   Mike McClurg
   Greg Perkins
   David Sheets
   Peter Zotov

Jeremy.

From florian.pichlmeier@mytum.de  Mon May 26 16:53:41 2014
Return-Path: <florian.pichlmeier@mytum.de>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id E80CE3C1B1
 for <ctypes@lists.ocaml.org>; Mon, 26 May 2014 16:53:41 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1588424 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [129.187.255.136 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mailout2.lrz.de ([129.187.255.136]:53492)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:DHE-RSA-AES256-GCM-SHA384:256)
 id 1WoxhU-0002w4-qt (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <florian.pichlmeier@mytum.de>); Mon, 26 May 2014 17:24:36 +0100
Received: from lxmhs66.srv.lrz.de (localhost [127.0.0.1])
 by mailout2.lrz.de (Postfix) with ESMTP id 3gckCl64c4zyVX;
 Mon, 26 May 2014 18:24:35 +0200 (CEST)
X-Virus-Scanned: by amavisd-new at lrz.de in lxmhs66.srv.lrz.de
Received: from mailout2.lrz.de ([127.0.0.1])
 by lxmhs66.srv.lrz.de (lxmhs66.srv.lrz.de [127.0.0.1]) (amavisd-new,
 port 10002)
 with ESMTP id eOW8qQPJhy7v; Mon, 26 May 2014 18:24:35 +0200 (CEST)
Received: from andromeda1.ze.tum.de (andromeda1.ze.tum.de [129.187.39.15])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mailout2.lrz.de (Postfix) with ESMTPS id 3gck7f1tl5zyZ4;
 Mon, 26 May 2014 18:21:02 +0200 (CEST)
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
From: "Florian Pichlmeier" <florian.pichlmeier@mytum.de>
To: "Jeremy Yallop" <yallop@gmail.com>
In-reply-to: <CAAxsn=F+WC2uM4kaL4hPdNduamppPxG-9rCz45LOHdE5Wy8PfA@mail.gmail.com>
References: <CAAxsn=F+WC2uM4kaL4hPdNduamppPxG-9rCz45LOHdE5Wy8PfA@mail.gmail.com>
 <20140430161924.28903.96399@andromeda1.ze.tum.de>
 <CAAxsn=Fwu8Qhp6tr92XVUTj52mvWOSyNMFmdTTmMXS8zkTgeAA@mail.gmail.com>
 <20140519142025.2757.70984@andromeda1.ze.tum.de>
Date: Mon, 26 May 2014 16:21:02 -0000
Message-ID: <20140526162102.56256.19915@andromeda1.ze.tum.de>
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Finalising data
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 26 May 2014 15:53:42 -0000

Dear Jeremy,

i changed the representation of zframe_t

type frame
type t = frame structure ptr
let zframe_t : frame structure typ = structure "_zframe_t"

> Although 'zframe_t' is incomplete, 'ptr zframe_t' (i.e. zframe_t*) is
> complete, so pointer arithmetic (with +@ etc.) should work as you
> expect.

I tried this approach with pointer arithmetic (+@), but i still get
the Static.IncompleteType exception when i call the destroy function.
 
let destroy (msg : t) =
  let stub = foreign "zframe_destroy" ((ptr zframe_t) @-> returning int) in
  stub (msg +@ 0)

Another problem is, that the zframe_destroy function expects **zframe_t as input,
but with msg +@ 0 i only get *zframe_t. Does it suffice to declare the function
like i did above, or do i need another approach?

Again, many thanks for your efforts.

Florian

Jeremy Yallop <yallop@gmail.com> wrote:


> Dear Florian,
> 
> On 19/05/2014, Florian Pichlmeier <florian.pichlmeier@mytum.de> wrote:
> 
> > But now i have encountered a new problem.
> > Zeromq uses incomplete types for many data types,
> > like the frame type
> > typedef struct _zframe_t zframe_t;
> > 
> > On the OCaml side i use void pointer to represent
> > these data types, and thats where the problem arose.
> > 
> > The frame destroy function call for example is that
> >     zframe_destroy (zframe_t **self_p);
> > with the corresponding ocaml function
> > 
> > let destroy (msg : t) =
> > let stub = foreign "zframe_destroy" (ptr void @-> returning int) in
> > stub (msg +@ 0)
> > 
> > The problem is the msg +@ 0 part.
> > 
> > 
> 
> The ctypes equivalent of zeromq's incomplete struct declaration is a
> call to the 'structure' function without a corresponding call to
> 'seal'.  For example, you can represent zframe_t as follows:
> 
>     (* struct _zframe_t *)
>     let zframe_t = structure "_zframe_t"
> 
> This allows you to give a more precise type to the zframe_destroy binding:
> 
>     let zframe_destroy = foreign "zframe_destroy"
>         (ptr (ptr zframe_t) @-> returning int)
> 
> Although 'zframe_t' is incomplete, 'ptr zframe_t' (i.e. zframe_t*) is
> complete, so pointer arithmetic (with +@ etc.) should work as you
> expect.
> 
> I hope that helps,
> 
> Jeremy.
> 
> 
> 

From yallop@gmail.com  Wed May 28 03:06:00 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-51.csi.cam.ac.uk (ppsw-51.csi.cam.ac.uk [131.111.8.151])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 887263C261
 for <ctypes@lists.ocaml.org>; Wed, 28 May 2014 03:06:00 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1588424 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.43 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wg0-f43.google.com ([74.125.82.43]:61336)
 by ppsw-51.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1WpTjf-0002kG-YT (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Wed, 28 May 2014 03:37:00 +0100
Received: by mail-wg0-f43.google.com with SMTP id l18so10216762wgh.2
 for <ctypes@lists.ocaml.org>; Tue, 27 May 2014 19:36:59 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=LWy8KlFQg9kDHsPG1TeS6cU5dGQbf81RWAlx/Dy29yg=;
 b=SrRMvxnnkSdN9a+wFn40+vOlBFGUFZe3kBDqXg7yCTUWGgnFWlC7IPthqrCxZkOF9Y
 UuwBWz1ufCARlSbQhy0HupjBgnny1CGBhF55w6yz4L9vrf9Ma9PnqDo5F6L1Tvt7pV6Y
 JhRAnYCNy/AWm0SLMlm+z7YNPgGze90Ge5+aRAw+wMXTPze9QxelNB0IkJ8Ef9XjZ/Ou
 J04ZXpS+BbLTWEGgnwCc3W+yHQlziTSG1Np/23rKDNEKp9dHw8kOeAiZ5k+EUCTxdvZ/
 UKFL5FU/In/i2FSyW+PO4AMATI1izmCcHVxiy3jRxU/fQJta3IpnOopGHM9WyMH0JbPt
 jqvQ==
MIME-Version: 1.0
X-Received: by 10.180.186.8 with SMTP id fg8mr44066409wic.39.1401244619171;
 Tue, 27 May 2014 19:36:59 -0700 (PDT)
Received: by 10.217.5.65 with HTTP; Tue, 27 May 2014 19:36:59 -0700 (PDT)
In-Reply-To: <CAOOOohRA3Sj0+k1KxPBV7Bgk1MQfpzfqBNeuUtmZ2mQ2eE1VSQ@mail.gmail.com>
References: <CAOOOohT-=sHsgD2AHsGQ8oS9cc=OvhsJdbn96LcYAwtQieH-Tg@mail.gmail.com>
 <CAAxsn=Ennh6-MWja5M3QnAHDurTmi1P7wWijTTU3MhoTqUdhQA@mail.gmail.com>
 <CAOOOohRA3Sj0+k1KxPBV7Bgk1MQfpzfqBNeuUtmZ2mQ2eE1VSQ@mail.gmail.com>
Date: Wed, 28 May 2014 11:36:59 +0900
Message-ID: <CAAxsn=HS_+vNGNb9_ZcnChyBMK8QNCQo-jGrD1tgbtefEMNRGA@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Philippe Veber <philippe.veber@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Bit field encoding.
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 28 May 2014 02:06:00 -0000

On 20 May 2014 14:53, Philippe Veber <philippe.veber@gmail.com> wrote:
> Thanks a lot Jeremy for your answer! I have chosen to write helper C
> functions to access the records containing bitfields, so that I let the
> compiler do its business without caring too much. I guess that no field
> after a bitfield definition in a struct can be reliably accessed either
> (with ctypes), even if it's not a bitfield itself (as there is no means to
> know if the bitfield was packed or padded). Is that right?

Yes, I think that's strictly true, although it's probably possible to
predict how things will be laid out in particular cases.

In a future release there'll be the option to query the C compiler
about struct layout directly, at which point we should have better
guarantees about access to structs with bitfields:

   https://github.com/ocamllabs/ocaml-ctypes/pull/62

Jeremy.

From yallop@gmail.com  Wed May 28 03:16:30 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 49DCC3C261
 for <ctypes@lists.ocaml.org>; Wed, 28 May 2014 03:16:30 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1588424 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.176 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-we0-f176.google.com ([74.125.82.176]:65144)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1WpTtp-0004R6-km (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Wed, 28 May 2014 03:47:29 +0100
Received: by mail-we0-f176.google.com with SMTP id q59so10236562wes.7
 for <ctypes@lists.ocaml.org>; Tue, 27 May 2014 19:47:29 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=bSV7s5tNxQZLY75iLlB2kbUZcKWUa6UYg9RFamNi5ok=;
 b=h+M+DMUGyP5ZDU2IcsN6G7WRfbgqDSQB/Z4Yz71IE/mbwchGnDcf895A4DhngqURkV
 rlXOlTMOPNvMaYXoGMGF8sux4Xpq5Ipje4oS13FqSUvzS4ptDonaBs3PVrwvTnxLFbdB
 2RTXP/H4w3E1O+zGPk49BCk7fWkJ2nq2n6IFYfDxsnkNG1apHj8M2Xfo4yj0ctGOhwjn
 zCVd325nG9kEpYMcN+HMvhqsce0bdBpzKWQ9JKCUGpAKln1sopaj3zyvA7d+PCMbmz54
 jLg+8GNbSjkPtak5zSYmfjTtLrFuikWmIJVbcoXN4sEJnJPCn3SivFuRPwS6TERhexkm
 JYtw==
MIME-Version: 1.0
X-Received: by 10.194.91.144 with SMTP id ce16mr46226399wjb.18.1401245248892; 
 Tue, 27 May 2014 19:47:28 -0700 (PDT)
Received: by 10.217.5.65 with HTTP; Tue, 27 May 2014 19:47:28 -0700 (PDT)
In-Reply-To: <20140526162102.56256.19915@andromeda1.ze.tum.de>
References: <20140430161924.28903.96399@andromeda1.ze.tum.de>
 <CAAxsn=Fwu8Qhp6tr92XVUTj52mvWOSyNMFmdTTmMXS8zkTgeAA@mail.gmail.com>
 <20140519142025.2757.70984@andromeda1.ze.tum.de>
 <CAAxsn=F+WC2uM4kaL4hPdNduamppPxG-9rCz45LOHdE5Wy8PfA@mail.gmail.com>
 <20140526162102.56256.19915@andromeda1.ze.tum.de>
Date: Wed, 28 May 2014 11:47:28 +0900
Message-ID: <CAAxsn=Gyt-XhDdSm0Xw5E-L+gFTdvX52T3-mUB+2GY266XfUOA@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Florian Pichlmeier <florian.pichlmeier@mytum.de>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Finalising data
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 28 May 2014 02:16:30 -0000

On 27 May 2014 01:21, Florian Pichlmeier <florian.pichlmeier@mytum.de> wrote:
> i changed the representation of zframe_t
>
> type frame
> type t = frame structure ptr
> let zframe_t : frame structure typ = structure "_zframe_t"

Looks good!

>> Although 'zframe_t' is incomplete, 'ptr zframe_t' (i.e. zframe_t*) is
>> complete, so pointer arithmetic (with +@ etc.) should work as you
>> expect.
>
> I tried this approach with pointer arithmetic (+@), but i still get
> the Static.IncompleteType exception when i call the destroy function.
>
> let destroy (msg : t) =
>   let stub = foreign "zframe_destroy" ((ptr zframe_t) @-> returning int) in
>   stub (msg +@ 0)
>
> Another problem is, that the zframe_destroy function expects **zframe_t as input,
> but with msg +@ 0 i only get *zframe_t. Does it suffice to declare the function
> like i did above, or do i need another approach?

Right: this is the source of the difficulty.  The argument to the C
function is a pointer to pointer:

   void zframe_destroy(frame_t **)

and so the argument in the ctypes binding needs two 'ptr' applications:

   let stub = foreign "zframe_destroy" (ptr (ptr zframe_t) @-> returning void)

In order to call the function you'll need to store the argument in
addressable memory.  For example, you might write:

  let p = allocate (ptr zframe_t) msg in
  stub p

Jeremy.

From philippe.veber@gmail.com  Wed May 28 06:43:21 2014
Return-Path: <philippe.veber@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 739603C250
 for <ctypes@lists.ocaml.org>; Wed, 28 May 2014 06:43:21 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1588424 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.177 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (philippe.veber[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f177.google.com ([209.85.212.177]:35982)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1WpX80-0005oI-so (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <philippe.veber@gmail.com>); Wed, 28 May 2014 07:14:21 +0100
Received: by mail-wi0-f177.google.com with SMTP id f8so3007685wiw.10
 for <ctypes@lists.ocaml.org>; Tue, 27 May 2014 23:14:20 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc:content-type;
 bh=AcbCnMCReQKn5f/dTmCkXiRNT/K/+q1HPDJzvpbCV/Q=;
 b=x/RKHnvR8rAe09RL+b2o1fZLhmRHo8MTeadqI1txbMKL9WTnTMla25MyOAlqYsbw1e
 zXiXwwMMj6hWwzxVAKOo6aovEnZMKLAA4Izcsq6bTo9meJfdUwJ/sG0XdfDmCdeWvMa1
 7VJkKcD5rFLWi1wIQnaAnYk6CkB7UZB1CN832J33IdHslikmUGRX+4S1zyzktSyXuhhh
 Sgk6GzboKBD+/paV11qOvZYnznOjYSQUFWsxcm8Kp0ULZvDNtjByNTmQpTOA9xMd4jdv
 1r7VBCzR3ZH0uvCfx17spOZo12fHt4FzRwK2o70q/mn6an6OEL/8lJE32p2GilwpdBuM
 rgaQ==
X-Received: by 10.180.7.227 with SMTP id m3mr44774514wia.59.1401257660442;
 Tue, 27 May 2014 23:14:20 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.194.239.100 with HTTP; Tue, 27 May 2014 23:14:00 -0700 (PDT)
In-Reply-To: <CAAxsn=HS_+vNGNb9_ZcnChyBMK8QNCQo-jGrD1tgbtefEMNRGA@mail.gmail.com>
References: <CAOOOohT-=sHsgD2AHsGQ8oS9cc=OvhsJdbn96LcYAwtQieH-Tg@mail.gmail.com>
 <CAAxsn=Ennh6-MWja5M3QnAHDurTmi1P7wWijTTU3MhoTqUdhQA@mail.gmail.com>
 <CAOOOohRA3Sj0+k1KxPBV7Bgk1MQfpzfqBNeuUtmZ2mQ2eE1VSQ@mail.gmail.com>
 <CAAxsn=HS_+vNGNb9_ZcnChyBMK8QNCQo-jGrD1tgbtefEMNRGA@mail.gmail.com>
From: Philippe Veber <philippe.veber@gmail.com>
Date: Wed, 28 May 2014 08:14:00 +0200
Message-ID: <CAOOOohTG=MPr6a+QM=sxodY4EUQ03XHem_U+pyJEEicRuprkow@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Content-Type: multipart/alternative; boundary=f46d0444020816f1bb04fa6fb9a7
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Bit field encoding.
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 28 May 2014 05:43:21 -0000

--f46d0444020816f1bb04fa6fb9a7
Content-Type: text/plain; charset=ISO-8859-1

This looks really promising. Thanks!



2014-05-28 4:36 GMT+02:00 Jeremy Yallop <yallop@gmail.com>:

> On 20 May 2014 14:53, Philippe Veber <philippe.veber@gmail.com> wrote:
> > Thanks a lot Jeremy for your answer! I have chosen to write helper C
> > functions to access the records containing bitfields, so that I let the
> > compiler do its business without caring too much. I guess that no field
> > after a bitfield definition in a struct can be reliably accessed either
> > (with ctypes), even if it's not a bitfield itself (as there is no means
> to
> > know if the bitfield was packed or padded). Is that right?
>
> Yes, I think that's strictly true, although it's probably possible to
> predict how things will be laid out in particular cases.
>
> In a future release there'll be the option to query the C compiler
> about struct layout directly, at which point we should have better
> guarantees about access to structs with bitfields:
>
>    https://github.com/ocamllabs/ocaml-ctypes/pull/62
>
> Jeremy.
>

--f46d0444020816f1bb04fa6fb9a7
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">This looks really promising. Thanks!<br><br></div><div cla=
ss=3D"gmail_extra"><br><br><div class=3D"gmail_quote">2014-05-28 4:36 GMT+0=
2:00 Jeremy Yallop <span dir=3D"ltr">&lt;<a href=3D"mailto:yallop@gmail.com=
" target=3D"_blank">yallop@gmail.com</a>&gt;</span>:<br>

<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div class=3D"">On 20 May 2014 14:53, Philip=
pe Veber &lt;<a href=3D"mailto:philippe.veber@gmail.com">philippe.veber@gma=
il.com</a>&gt; wrote:<br>


&gt; Thanks a lot Jeremy for your answer! I have chosen to write helper C<b=
r>
&gt; functions to access the records containing bitfields, so that I let th=
e<br>
&gt; compiler do its business without caring too much. I guess that no fiel=
d<br>
&gt; after a bitfield definition in a struct can be reliably accessed eithe=
r<br>
&gt; (with ctypes), even if it&#39;s not a bitfield itself (as there is no =
means to<br>
&gt; know if the bitfield was packed or padded). Is that right?<br>
<br>
</div>Yes, I think that&#39;s strictly true, although it&#39;s probably pos=
sible to<br>
predict how things will be laid out in particular cases.<br>
<br>
In a future release there&#39;ll be the option to query the C compiler<br>
about struct layout directly, at which point we should have better<br>
guarantees about access to structs with bitfields:<br>
<br>
=A0 =A0<a href=3D"https://github.com/ocamllabs/ocaml-ctypes/pull/62" target=
=3D"_blank">https://github.com/ocamllabs/ocaml-ctypes/pull/62</a><br>
<span class=3D"HOEnZb"><font color=3D"#888888"><br>
Jeremy.<br>
</font></span></blockquote></div><br></div>

--f46d0444020816f1bb04fa6fb9a7--

From yallop@gmail.com  Wed May 28 07:22:43 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-51.csi.cam.ac.uk (ppsw-51.csi.cam.ac.uk [131.111.8.151])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 0AB9E3C250
 for <ctypes@lists.ocaml.org>; Wed, 28 May 2014 07:22:43 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1588424 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.50 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wg0-f50.google.com ([74.125.82.50]:45088)
 by ppsw-51.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1WpXk6-00064f-YX (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Wed, 28 May 2014 07:53:43 +0100
Received: by mail-wg0-f50.google.com with SMTP id x12so10861086wgg.9
 for <ctypes@lists.ocaml.org>; Tue, 27 May 2014 23:53:42 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type:content-transfer-encoding;
 bh=Vu5Q2HcWFTLvgLMSdLeJX6ciigj0PPSKJ4EpS5S27yQ=;
 b=WPS7tic4OM+rFslnNV6KhvojdYi8xpoKEOnjiA4RFqKrfaA7EAehcUBgGkpYMmNq5n
 sQ3RgCrraLF9g6r+44cQAl+ExcG3KI8QJo81GmbQ06u2VzeaDkBiu4MBekUeXQxqgu89
 lqfWjb//PTR2U3o5CCL1K1dKk2BKjiM4bmTKa7JGXr1CA2JI43+MK6wQQOntSLzTSKBT
 vj4NpjG0RWd4EmI52liklO6GGxVi8XzRmJdpc+55cp4rAlP0c5LWtGqjBkqDbqreJzSq
 J3JZKzJ0eTB/TVAa3VBKJ+p6g8YhuegZPKQtA+jUSvNyEuRNgx7hMZZ5QASqJ8J0C2iJ
 K/QA==
MIME-Version: 1.0
X-Received: by 10.180.186.8 with SMTP id fg8mr45849715wic.39.1401260022341;
 Tue, 27 May 2014 23:53:42 -0700 (PDT)
Received: by 10.217.5.65 with HTTP; Tue, 27 May 2014 23:53:42 -0700 (PDT)
In-Reply-To: <CAAxsn=Gyt-XhDdSm0Xw5E-L+gFTdvX52T3-mUB+2GY266XfUOA@mail.gmail.com>
References: <20140430161924.28903.96399@andromeda1.ze.tum.de>
 <CAAxsn=Fwu8Qhp6tr92XVUTj52mvWOSyNMFmdTTmMXS8zkTgeAA@mail.gmail.com>
 <20140519142025.2757.70984@andromeda1.ze.tum.de>
 <CAAxsn=F+WC2uM4kaL4hPdNduamppPxG-9rCz45LOHdE5Wy8PfA@mail.gmail.com>
 <20140526162102.56256.19915@andromeda1.ze.tum.de>
 <CAAxsn=Gyt-XhDdSm0Xw5E-L+gFTdvX52T3-mUB+2GY266XfUOA@mail.gmail.com>
Date: Wed, 28 May 2014 15:53:42 +0900
Message-ID: <CAAxsn=Ekr+GWfBWcBOK3o1m-eC4vuG3BkOAkG5ZMqDMhqTUKMw@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Florian Pichlmeier <florian.pichlmeier@mytum.de>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Finalising data
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 28 May 2014 06:22:43 -0000

On 28 May 2014 11:47, Jeremy Yallop <yallop@gmail.com> wrote:
> On 27 May 2014 01:21, Florian Pichlmeier <florian.pichlmeier@mytum.de> wr=
ote:
>> i changed the representation of zframe_t
>>
>> type frame
>> type t =3D frame structure ptr
>> let zframe_t : frame structure typ =3D structure "_zframe_t"
>
> Looks good!
>
>>> Although 'zframe_t' is incomplete, 'ptr zframe_t' (i.e. zframe_t*) is
>>> complete, so pointer arithmetic (with +@ etc.) should work as you
>>> expect.
>>
>> I tried this approach with pointer arithmetic (+@), but i still get
>> the Static.IncompleteType exception when i call the destroy function.
>>
>> let destroy (msg : t) =3D
>>   let stub =3D foreign "zframe_destroy" ((ptr zframe_t) @-> returning in=
t) in
>>   stub (msg +@ 0)
>>
>> Another problem is, that the zframe_destroy function expects **zframe_t =
as input,
>> but with msg +@ 0 i only get *zframe_t. Does it suffice to declare the f=
unction
>> like i did above, or do i need another approach?
>
> Right: this is the source of the difficulty.  The argument to the C
> function is a pointer to pointer:
>
>    void zframe_destroy(frame_t **)
>
> and so the argument in the ctypes binding needs two 'ptr' applications:
>
>    let stub =3D foreign "zframe_destroy" (ptr (ptr zframe_t) @-> returnin=
g void)

By the way, the new stub generation facility in 0.3 catches the error
during compilation.

Here's your binding, moved inside a functor to make it available for
stub generation:

    $ cat czmq.ml
    open Ctypes
    type frame
    type t =3D frame structure ptr
    let zframe_t : frame structure typ =3D structure "_zframe_t"

    module Bindings(F : Cstubs.FOREIGN) =3D
    struct
      let zframe_destroy =3D F.foreign "zframe_destroy" (ptr zframe_t
@-> returning void)
    end

You also need a simple driver for generating C code from the bindings:

    $ cat generate.ml
    let () =3D
      Format.printf "#include <czmq.h>\n";
      Cstubs.write_c ~prefix:"czmq" Format.std_formatter (module Czmq.Bindi=
ngs)

Now you can build the generator and run it to generate the C stubs:

    $ ocamlfind ocamlc -o gen -package ctypes.stubs -linkpkg czmq.ml genera=
te.ml
    $ ./gen > czmq_stubs.c

Finally, compiling the generated stub results in a useful diagnostic
from the C compiler:

    $ ocamlc -c -I $(ocamlc -where)/.. czmq_stubs.c
    czmq_stubs.c: In function =E2=80=98czmq_1_zframe_destroy=E2=80=99:
    czmq_stubs.c:7:4: warning: passing argument 1 of =E2=80=98zframe_destro=
y=E2=80=99
from incompatible pointer type [enabled by default]
        zframe_destroy(x2);
        ^
    In file included from /usr/local/include/czmq.h:36:0,
             from czmq_stubs.c:1:
    /usr/local/include/zframe.h:39:5: note: expected =E2=80=98struct zframe=
_t
**=E2=80=99 but argument is of type =E2=80=98struct _zframe_t *=E2=80=99
        zframe_destroy (zframe_t **self_p);
        ^

Jeremy

From costel.person@gmail.com  Thu Jun  5 19:49:10 2014
Return-Path: <costel.person@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-51.csi.cam.ac.uk (ppsw-51.csi.cam.ac.uk [131.111.8.151])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 859003C293
 for <ctypes@lists.ocaml.org>; Thu,  5 Jun 2014 19:49:10 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1588424 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.215.47 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (costel.person[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-la0-f47.google.com ([209.85.215.47]:37963)
 by ppsw-51.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1WsdDJ-0002xF-ZP (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <costel.person@gmail.com>); Thu, 05 Jun 2014 20:20:39 +0100
Received: by mail-la0-f47.google.com with SMTP id pn19so872987lab.6
 for <ctypes@lists.ocaml.org>; Thu, 05 Jun 2014 12:20:37 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:date:message-id:subject:from:to:content-type;
 bh=YMMe9qcceGD7YtkVSdNwnR9/b27ZLOam3ZLg4M2aohg=;
 b=XBPQRxbhvnEme0URFK2FbelyeuOMcFdHOFnCcX7uNraZW8UultZsqzCi8penXxU/oe
 kzF1YPMY/ilawuiLtfM9VOMGIjai87LoFbEJRVCL3dfvsfOJsKNmZpsHakaQNLYhc1BE
 aGU8QI4A+fUvVvdX4GwJd+J/g6S9gOH1q6vYmj1fs04cYgcnYvzKLDPd9+kyO5wwKqtP
 xe+IVwgNzfK2sviZpLpTtNr9pmMDoT8P1s5JvAvcUTwILZXSBftnGXDbMlIXD3VeMXER
 OxRMlwGhdDPMYXBGmE/QZE4GwA9ruSxrDuC7ZaKTJrLBQ/R0P2fOsIcUEZWqtLhHlW7H
 3Qfw==
MIME-Version: 1.0
X-Received: by 10.112.64.33 with SMTP id l1mr3524857lbs.79.1401996037045; Thu,
 05 Jun 2014 12:20:37 -0700 (PDT)
Received: by 10.112.239.41 with HTTP; Thu, 5 Jun 2014 12:20:37 -0700 (PDT)
Date: Thu, 5 Jun 2014 12:20:37 -0700
Message-ID: <CAATUEDK6JBKFqUq5xcj=yGhAnEVfHfRGbtJdKK45BtKT_xvXpw@mail.gmail.com>
From: Costel Person <costel.person@gmail.com>
To: ctypes@lists.ocaml.org
Content-Type: multipart/alternative; boundary=001a11c3ec0ec3c5a204fb1ba347
X-Mailman-Approved-At: Thu, 05 Jun 2014 23:19:31 +0100
Subject: [ocaml-ctypes] Converting from int to file_descr
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 05 Jun 2014 18:49:10 -0000

--001a11c3ec0ec3c5a204fb1ba347
Content-Type: text/plain; charset=UTF-8

I am trying to call forkpty
pid_t forkpty(int *amaster, char *name, const struct termios *termp, const
struct winsize *winp);

Only care about file descriptor 'amaster' and result : pid_t

All is good:
  let forkpty = foreign "forkpty" (ptr int @-> ptr void @-> ptr void @->
ptr void @-> returning int)

    let amaster : int ptr = allocate int -1 in
    let pid = forkpty amaster null null null in
    let pipefd = !@ amaster

Do not understand how to convert the int representing file descriptor to
 Unix.file_descr

Or use a view to pass a Unix.file_descr as an int to forkpty ?

Any help appreciated ...

--001a11c3ec0ec3c5a204fb1ba347
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>I am trying to call forkpty</div><div>pid_t forkpty(i=
nt *amaster, char *name, const struct termios *termp, const struct winsize =
*winp);</div><div><br></div><div>Only care about file descriptor &#39;amast=
er&#39; and result : pid_t</div>
<div><br></div><div>All is good:</div><div><div>=C2=A0 let forkpty =3D fore=
ign &quot;forkpty&quot; (ptr int @-&gt; ptr void @-&gt; ptr void @-&gt; ptr=
 void @-&gt; returning int)</div></div><div><br></div><div><div>=C2=A0 =C2=
=A0 let amaster : int ptr =3D allocate int -1 in</div>
<div>=C2=A0 =C2=A0 let pid =3D forkpty amaster null null null in</div></div=
><div>=C2=A0 =C2=A0 let pipefd =3D !@ amaster=C2=A0<br></div><div><br></div=
><div>Do not understand how to convert the int representing file descriptor=
 to =C2=A0Unix.file_descr</div>
<div><br></div><div>Or use a view to pass a Unix.file_descr as an int to fo=
rkpty ?</div><div><br></div><div>Any help appreciated ...</div><div><br></d=
iv></div>

--001a11c3ec0ec3c5a204fb1ba347--

From kosmo.zb@gmail.com  Fri Jun  6 10:59:12 2014
Return-Path: <kosmo.zb@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 1919C3C2F7
 for <ctypes@lists.ocaml.org>; Fri,  6 Jun 2014 10:59:12 +0100 (BST)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-la0-f49.google.com ([209.85.215.49]:61710)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1WsrQ2-00078T-rb (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <kosmo.zb@gmail.com>); Fri, 06 Jun 2014 11:30:42 +0100
Received: by mail-la0-f49.google.com with SMTP id pv20so1393591lab.36
 for <ctypes@lists.ocaml.org>; Fri, 06 Jun 2014 03:30:41 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:sender:in-reply-to:references:date:message-id:subject
 :from:to:cc:content-type;
 bh=hPegCR8v9xtzPGmtt9wVqY6Ef+9F4Aa5M2Sw8E1IGro=;
 b=JUDUYYqM9k3T+TnuppMQoGqpz7WOgQ/pzUMOCOEb5nZeKEqGorHW87p7aNUzp9BJnZ
 jZH0LUgylxGWTG35fDCg9SG2DKF6GJFmFL4MFOzTqil2ONXcuUBsF7tsoKDKWTICOQgH
 zlaZVJXgj1j/tI8WAgEl1PMlRclTkQgSCRN54W+knFUh/8TP1KQcrIgJrXuNCfcwksoE
 HIvhRzceOILU2iQjaxU7JWcCv8lKPh/4buQe193XZjv6genlX1Y0Yr/ycIDC/j/8PUoK
 ONFiy0OnrZbTOtgtXOwkm1uA2XNJxk5gax4htSIc3wps0m9L0n4kFJCKHRPpS/WCYkiV
 H/RA==
MIME-Version: 1.0
X-Received: by 10.152.121.97 with SMTP id lj1mr829146lab.84.1402050641577;
 Fri, 06 Jun 2014 03:30:41 -0700 (PDT)
Sender: kosmo.zb@gmail.com
Received: by 10.112.133.226 with HTTP; Fri, 6 Jun 2014 03:30:41 -0700 (PDT)
In-Reply-To: <CAATUEDK6JBKFqUq5xcj=yGhAnEVfHfRGbtJdKK45BtKT_xvXpw@mail.gmail.com>
References: <CAATUEDK6JBKFqUq5xcj=yGhAnEVfHfRGbtJdKK45BtKT_xvXpw@mail.gmail.com>
Date: Fri, 6 Jun 2014 11:30:41 +0100
X-Google-Sender-Auth: 96--53FhuAO8tKC43gjuzZA4_Pk
Message-ID: <CAAWM5TxK1AT2HedVXf+Mwn12SbgQ+Pe2jhxieck3Cjto0MJ4sA@mail.gmail.com>
From: David Sheets <sheets@alum.mit.edu>
To: Costel Person <costel.person@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Converting from int to file_descr
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 06 Jun 2014 09:59:12 -0000

On Thu, Jun 5, 2014 at 8:20 PM, Costel Person <costel.person@gmail.com> wrote:
> I am trying to call forkpty
> pid_t forkpty(int *amaster, char *name, const struct termios *termp, const
> struct winsize *winp);
>
> Only care about file descriptor 'amaster' and result : pid_t
>
> All is good:
>   let forkpty = foreign "forkpty" (ptr int @-> ptr void @-> ptr void @-> ptr
> void @-> returning int)
>
>     let amaster : int ptr = allocate int -1 in
>     let pid = forkpty amaster null null null in
>     let pipefd = !@ amaster
>
> Do not understand how to convert the int representing file descriptor to
> Unix.file_descr
>
> Or use a view to pass a Unix.file_descr as an int to forkpty ?
>
> Any help appreciated ...

Hi Costel,

I use the fd-send-recv package in opam for this coercion. The function
to use is Fd_send_recv.int_of_fd. You can easily create a ctypes view
for Unix.file_descr with

Ctypes.view ~read:Fd_send_recv.fd_of_int ~write:Fd_send_recv.int_of_fd
Ctypes.int

Internally, file descriptors are just OCaml ints as you can see from
<https://github.com/djs55/ocaml-fd-send-recv/blob/master/lib/fd_send_recv.ml#L22>.
Because of this, you could also easily implement this coercion
yourself. I prefer to adopt the tiny fd-send-recv dependency and
abstract this dirty Obj.magic business.

Hope this helps,

David Sheets

From anil@recoil.org  Mon Jun 16 09:56:35 2014
Return-Path: <anil@recoil.org>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 269F33C23F
 for <ctypes@lists.ocaml.org>; Mon, 16 Jun 2014 09:56:35 +0100 (BST)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1588859
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from recoil.dh.bytemark.co.uk ([89.16.177.154]:11784
 helo=dark.recoil.org)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with smtp id 1WwTDS-0000t6-k6 (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <anil@recoil.org>); Mon, 16 Jun 2014 10:28:38 +0100
Received: (qmail 13299 invoked by uid 634); 16 Jun 2014 09:28:37 -0000
X-Spam-Level: *
X-Spam-Status: No, hits=-1.0 required=5.0
	tests=ALL_TRUSTED
X-Spam-Check-By: dark.recoil.org
Received: from cpc11-belf9-2-0-cust355.2-1.cable.virginm.net (HELO
 [10.0.1.15]) (86.24.61.100)
 (smtp-auth username remote@recoil.org, mechanism cram-md5)
 by dark.recoil.org (qpsmtpd/0.84) with ESMTPA; Mon, 16 Jun 2014 10:28:37 +0100
From: Anil Madhavapeddy <anil@recoil.org>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: quoted-printable
Date: Mon, 16 Jun 2014 10:28:36 +0100
Message-Id: <32FCAC5D-2EE4-47AE-B3EB-E7CA3BDB44A6@recoil.org>
To: ctypes@lists.ocaml.org
Mime-Version: 1.0 (Mac OS X Mail 7.2 \(1874\))
X-Mailer: Apple Mail (2.1874)
X-Virus-Checked: Checked by ClamAV on dark.recoil.org
Cc: =?iso-8859-1?Q?St=E9phane_Glondu?= <steph@glondu.net>
Subject: [ocaml-ctypes] ctypes 0.2.3 in debian sid
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 16 Jun 2014 08:56:35 -0000

I notice that Stephane Glondu (CCed) kindly uploaded Ctypes 0.2.3 into =
Debian;=20
https://packages.debian.org/unstable/main/libctypes-ocaml

I'm not sure what the process for keeping you informed of releases is, =
but there's a Ctypes 0.3.0 release now that supports C stub generation, =
and would be good to get into distributions  as well.

https://github.com/ocamllabs/ocaml-ctypes/releases/tag/0.3

-anil=

From thomas.braibant@gmail.com  Thu Sep 11 08:55:22 2014
Return-Path: <thomas.braibant@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 6B30F3C20E
 for <ctypes@lists.ocaml.org>; Thu, 11 Sep 2014 08:55:22 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1623939 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.174 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (thomas.braibant[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-we0-f174.google.com ([74.125.82.174]:34864)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XRznd-0005iX-Ej (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <thomas.braibant@gmail.com>); Thu, 11 Sep 2014 09:32:17 +0100
Received: by mail-we0-f174.google.com with SMTP id t60so5256863wes.5
 for <ctypes@lists.ocaml.org>; Thu, 11 Sep 2014 01:32:17 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:from:date:message-id:subject:to:content-type;
 bh=aljvy5OIExWm0NAOpo+M+VD1oJqy1Yrwor2NzJzxuuU=;
 b=BQ0vlXEUsG0XDYXialtqIuDaeO8NpiBsXNFzi/mPrScy47tKMsAk6fCwqzUwO9zTn6
 DyA4APXEpNdJ4ND+6H5h1SuK0jF/J4YnubAL1GanA9LKQGqC7Sqh+kcVepoa4l7beo9p
 yV+LPHj3pkMOFPlRI2GOjeJla11YdCBbjm+JimafGhVrIShRhyapThT0Pe3twT65tWQz
 2ZrHDsgxd3c5/Pw1JgSPZbCWtzMyCUhdtccLRDUbKCw/8kJCdYadQYgoKSAmQIP9Zguq
 gS1h2WFqRKsYhaj+wvU8YMWQ4rU230oBrxMo7bZDdll1IswULLfnC3q/+pnClNCWI7Xt
 n8TA==
X-Received: by 10.180.95.66 with SMTP id di2mr392563wib.60.1410424337155; Thu,
 11 Sep 2014 01:32:17 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.194.79.231 with HTTP; Thu, 11 Sep 2014 01:31:57 -0700 (PDT)
From: Thomas Braibant <thomas.braibant@gmail.com>
Date: Thu, 11 Sep 2014 10:31:57 +0200
Message-ID: <CAHR=VkysmtmrLFxBk0DyW27Ztvywk3nKxOMtQek7UQMeUvmRqw@mail.gmail.com>
To: ctypes@lists.ocaml.org
Content-Type: text/plain; charset=UTF-8
Subject: [ocaml-ctypes] Passing a pointer to a struct by address
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 11 Sep 2014 07:55:22 -0000

Hi list,

I am struggling with one part of a binding I am working on, which
requires me to give a pointer to a pointer to a struct as an argument
to a function. The idea is that this corresponds to giving a pointer
to a struct by address to the function, which is free to use its
return type to return error codes.

What would be the correct idiom to do that? I could not find a way to
get the address of a pointer in Ctypes itself, and I wonder if that
would even be possible?

Best,
Thomas

(My subscription to this list is still in limbo, so do not forget to CC me ;))

From thomas.braibant@gmail.com  Thu Sep 11 09:17:20 2014
Return-Path: <thomas.braibant@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 364D93C1F3
 for <ctypes@lists.ocaml.org>; Thu, 11 Sep 2014 09:17:20 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1623939 
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (thomas.braibant[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.182 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-we0-f182.google.com ([74.125.82.182]:59269)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XS08t-0008G5-qr (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <thomas.braibant@gmail.com>); Thu, 11 Sep 2014 09:54:15 +0100
Received: by mail-we0-f182.google.com with SMTP id k48so4144919wev.41
 for <ctypes@lists.ocaml.org>; Thu, 11 Sep 2014 01:54:15 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :content-type; bh=KjOjAxdgGQ4DKQhgrz9yWL1Uzn9YxQPrxMi8DYj8eiM=;
 b=OhF0Ifaz0VsIwXXIgO6yqeYtNIt4ecODarxgxOzoKoS+zl284TvyicZTJuOldaS55h
 9qtji9EJkK8e+WFJpqhx8a19wujdSwpNNxa8Vg7d3ek2H4zjIcdTpEmCr/B+S0S2LlLs
 pVzl5WJPkzrCR6ETcAdceRBKh14NBVe9jdKTemtzY259/EqViAui8jckM1MjCT1cJVjr
 3nPdqHRJDb5IYurhH4uVSXyveiemkX9YMzXH7tv3iUb3BMWGr8PpzGXiq1LNqG8gXYBf
 nSkvc6lnaL+fbKfxIWpdOK8viJxrDsV7GsGHJ6vAJZ6CSpomAYU6gMKiNRT0RQ1x0iiB
 WjsQ==
X-Received: by 10.194.243.230 with SMTP id xb6mr9736214wjc.100.1410425654994; 
 Thu, 11 Sep 2014 01:54:14 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.194.79.231 with HTTP; Thu, 11 Sep 2014 01:53:54 -0700 (PDT)
In-Reply-To: <CAHR=VkysmtmrLFxBk0DyW27Ztvywk3nKxOMtQek7UQMeUvmRqw@mail.gmail.com>
References: <CAHR=VkysmtmrLFxBk0DyW27Ztvywk3nKxOMtQek7UQMeUvmRqw@mail.gmail.com>
From: Thomas Braibant <thomas.braibant@gmail.com>
Date: Thu, 11 Sep 2014 10:53:54 +0200
Message-ID: <CAHR=VkzLooUNDLOcXu1fNqXCGu=8D2Pbf7Dgb2NhzKW_i8r+PA@mail.gmail.com>
To: ctypes@lists.ocaml.org
Content-Type: text/plain; charset=UTF-8
Subject: Re: [ocaml-ctypes] Passing a pointer to a struct by address
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 11 Sep 2014 08:17:20 -0000

Answering my own question, it appears that
let p = allocate_n ~count:1 ((ptr my_struct)) in
let rv = f p in
    ....

does what I want. Sorry for the noise.

On Thu, Sep 11, 2014 at 10:31 AM, Thomas Braibant
<thomas.braibant@gmail.com> wrote:
> Hi list,
>
> I am struggling with one part of a binding I am working on, which
> requires me to give a pointer to a pointer to a struct as an argument
> to a function. The idea is that this corresponds to giving a pointer
> to a struct by address to the function, which is free to use its
> return type to return error codes.
>
> What would be the correct idiom to do that? I could not find a way to
> get the address of a pointer in Ctypes itself, and I wonder if that
> would even be possible?
>
> Best,
> Thomas
>
> (My subscription to this list is still in limbo, so do not forget to CC me ;))

From thomas.braibant@gmail.com  Fri Sep 12 09:38:38 2014
Return-Path: <thomas.braibant@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-41.csi.cam.ac.uk (ppsw-41.csi.cam.ac.uk [131.111.8.141])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 619F33C20E
 for <ctypes@lists.ocaml.org>; Fri, 12 Sep 2014 09:38:38 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1624227 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.181 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (thomas.braibant[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-we0-f181.google.com ([74.125.82.181]:50812)
 by ppsw-41.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XSMx6-00025I-SY (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <thomas.braibant@gmail.com>); Fri, 12 Sep 2014 10:15:37 +0100
Received: by mail-we0-f181.google.com with SMTP id w62so413494wes.26
 for <ctypes@lists.ocaml.org>; Fri, 12 Sep 2014 02:15:36 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:from:date:message-id:subject:to:content-type;
 bh=QmponQUaMBdm1B4HTt+g1nSdSn7H7/CXmWlOHboXxTM=;
 b=PgJubfRlImjg8uHD3hogIs8dw7dPvjoPwIzLe0x1IPEqlDODdGnbtBr5+MghLPtGOT
 yAFBTv6Kcpt4Wnioilg2UrX73TU0UDSchXQ/cOnD5dws48PUf0MEXPuCjNns4K1cbuSN
 M3rBhqY/mfHoWaEwLhPM1UQEs73fSixD4x4WNDjIrI+7sTLMyx6a40oWlcdBkRhy3xwt
 CzzLbDv48uGhNEF3Nf8sOw9xOiqQLytdbmij/66/kjPDhtibeX/jbgIqnUJEJjF5ooWQ
 Iu4K2wZBCOA6f/0lnm57bzkI+UqyUQWdklX0/iHj3couPFNmW73Ja/g+rs/bKT3D7Mq9
 lA3Q==
X-Received: by 10.195.13.2 with SMTP id eu2mr3505481wjd.88.1410513335081; Fri,
 12 Sep 2014 02:15:35 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.194.73.2 with HTTP; Fri, 12 Sep 2014 02:15:14 -0700 (PDT)
From: Thomas Braibant <thomas.braibant@gmail.com>
Date: Fri, 12 Sep 2014 11:15:14 +0200
Message-ID: <CAHR=Vkwc9Usp4fQc7+hx14j9b07BKEDzXBdSKLOdWyF=5gyWRg@mail.gmail.com>
To: ctypes@lists.ocaml.org
Content-Type: text/plain; charset=UTF-8
Subject: [ocaml-ctypes] Logging function calls
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 12 Sep 2014 08:38:38 -0000

Hi list,

I would like to log function calls using something like the following code:

let rec log:
type a. a fn -> a -> a =
    function
    | Static.Returns ty ->
       fun result ->
       Printf.printf "<- %s\n%!" (string_of ty result);
       result
    | Static.Function (ty, fn) ->
       fun f x ->
       Printf.printf "-> %s\n%!" (string_of ty x);
       log fn (f x)

This works beautifully for simple enough function arguments. However,
I would also like to display a bit more than what is currently
available.
Two quick examples come to mind.

First, printing the name of manifest constants (e.g., defined in C
using #define FOO 0x0001337). I would like to log FOO rather than its
integer value. If I provide a correct printing function, it might even
produces correct C code.

Second, a bit more akward, printing the content of structs that are
passed by reference to functions. I do not see a way to print that
information as valid C, but it would be tremendously useful in my
logs.

Both cases can probably be solved by redefining string_of using
suitable extension points in my bindings, but I wonder if someone on
this list has done something similar.

Best,
Thomas

From yallop@gmail.com  Sat Sep 13 11:43:24 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 97D183C36E
 for <ctypes@lists.ocaml.org>; Sat, 13 Sep 2014 11:43:24 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1624477 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.169 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f169.google.com ([209.85.212.169]:39231)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XSlNS-000722-Dh (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Sat, 13 Sep 2014 12:20:27 +0100
Received: by mail-wi0-f169.google.com with SMTP id cc10so437701wib.4
 for <ctypes@lists.ocaml.org>; Sat, 13 Sep 2014 04:20:25 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=Y/6pIwiHlZOReMx0pPWGMKhwHCYwlVdpQP87IHdJpHs=;
 b=E/hlni5FW0RfW7eF53P7aeyQBdLERBnZ83nqxNEv8MRWez/rCxpUwrQgABYasM6u0G
 Jp14NYw2hKlSfhmnBSR3CwPnpRHMnIPMoM8qj82OB1Bb/QYIwKR0YAUbeU2f9CWIuoTV
 uQOv3zwPhBbkdyOgh+h8jL/3epr3d7ntVoBUgNLwceKIfVQFgvA0Ah9ZIhb9+op0g6jx
 WjfmYfLwMS+ucrxjyVw8rKjOwWI1YszAP3bKyLHDVGpV/S/Qo2mw47wY4X62Pd3mckNu
 nKb3pcGSVbwS8U6QImoBocUVWPyRZoJ5Qu6PP2I5xWV2vMJ1M5Trln8te+7XA+d1AWVz
 fGTA==
MIME-Version: 1.0
X-Received: by 10.180.9.144 with SMTP id z16mr9959389wia.26.1410607225449;
 Sat, 13 Sep 2014 04:20:25 -0700 (PDT)
Received: by 10.217.129.194 with HTTP; Sat, 13 Sep 2014 04:20:25 -0700 (PDT)
In-Reply-To: <CAHR=Vkwc9Usp4fQc7+hx14j9b07BKEDzXBdSKLOdWyF=5gyWRg@mail.gmail.com>
References: <CAHR=Vkwc9Usp4fQc7+hx14j9b07BKEDzXBdSKLOdWyF=5gyWRg@mail.gmail.com>
Date: Sat, 13 Sep 2014 12:20:25 +0100
Message-ID: <CAAxsn=FPsgeT7mb8zY5wDpwCJ2MJ+AkpgKDT3vh63qYxAjziUQ@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Thomas Braibant <thomas.braibant@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Logging function calls
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sat, 13 Sep 2014 10:43:24 -0000

On 12 September 2014 10:15, Thomas Braibant <thomas.braibant@gmail.com> wrote:
> I would like to log function calls using something like the following code:
>
> let rec log:
> type a. a fn -> a -> a =
>     function
>     | Static.Returns ty ->
>        fun result ->
>        Printf.printf "<- %s\n%!" (string_of ty result);
>        result
>     | Static.Function (ty, fn) ->
>        fun f x ->
>        Printf.printf "-> %s\n%!" (string_of ty x);
>        log fn (f x)
>
> This works beautifully for simple enough function arguments. However,
> I would also like to display a bit more than what is currently
> available.
> Two quick examples come to mind.
>
> First, printing the name of manifest constants (e.g., defined in C
> using #define FOO 0x0001337). I would like to log FOO rather than its
> integer value. If I provide a correct printing function, it might even
> produces correct C code.
>
> Second, a bit more akward, printing the content of structs that are
> passed by reference to functions. I do not see a way to print that
> information as valid C, but it would be tremendously useful in my
> logs.

I think that you can do what you want by matching a little deeper on
"ty".  Here's a function that prints C values, dereferencing
pointers-to-structures rather than just printing their addresses:

  let rec format_val : type a. a typ -> Format.formatter -> a -> unit =
    fun t fmt -> let open Static in match t with
    | Pointer (Struct _ as s) ->
       fun v -> Format.fprintf fmt "pointer to %a" (format_val s) !@v
    | t -> Ctypes.format t fmt

You can then call format_val instead of string_of inside your log function:

  let rec log:
    type a. a fn -> a -> a =
      function
      | Static.Returns ty ->
         fun result ->
         Format.(fprintf std_formatter) "<- @[%a@]@\n%!" (format_val ty) result;
         result
      | Static.Function (ty, fn) ->
         fun f x ->
         Format.(fprintf std_formatter) "-> @[%a@]@\n%!" (format_val ty) x;
         log fn (f x)

Here are the results, logging the results of passing the address of an
uninitialized struct to the identity function:

   # let s = structure "s";;
   val s : '_a structure typ = struct s
   # let i = field s "i" int;;
   val i : (int, ('_a, [ `Struct ]) structured) field = <abstr>
   # let j = field s "j" float;;
   val j : (float, ('_a, [ `Struct ]) structured) field = <abstr>
   # let () = seal s;;
   # let v = make s;;
   val v : ('_a, [ `Struct ]) structured = {
       i = -486857096, j = 4.5857492245e-41
     }
   # log (ptr s @-> returning (ptr s)) (fun x -> x) (addr v);;
   -> pointer to { i = -486857096, j = 4.5857492245e-41  }
   <- pointer to { i = -486857096, j = 4.5857492245e-41  }
   - : '_a structure ptr = (struct s*) 0x95fc40

From thomas.braibant@gmail.com  Mon Sep 15 09:29:39 2014
Return-Path: <thomas.braibant@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id EB48E3C1D1
 for <ctypes@lists.ocaml.org>; Mon, 15 Sep 2014 09:29:39 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1624812 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.177 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (thomas.braibant[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f177.google.com ([209.85.212.177]:57468)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XTSFE-0004du-r9 (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <thomas.braibant@gmail.com>); Mon, 15 Sep 2014 10:06:48 +0100
Received: by mail-wi0-f177.google.com with SMTP id em10so3720662wid.16
 for <ctypes@lists.ocaml.org>; Mon, 15 Sep 2014 02:06:46 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc:content-type;
 bh=pLk3MaDaiwe2MTO8GS8evBATz3JX9m7aNKJK8DfnUI0=;
 b=pYg2CePtdopfnkIS2cUia53Fcr7abfuHpnvQHA/x1pRB++9pNTD7XmqbTMlBBozFhV
 GJAcmLslpv06LYKlMsKIzz3+JTMd3v7m2bp2r5TCWR8pYFR3I4gTpcvTXWx89DWLlYkj
 lRNKMKJOQET8caYsTkEkQlrr+ZwwABGRm2WrebQLSQKQqShsVpzuQ9pkFaCC+VZ8kgLB
 r5NyldP1K5tC/W5l3eziE585iCUtIyA1zF5471R91SA1nFbXwqc/rgHWIWz+rgSD0bS6
 T0Jvn9IdtiZS8qQBRgZe0eSsOxvznh7ySG2Vzc+bIZUo5YOCTjESfL3JfY62gF065Hr1
 tb9w==
X-Received: by 10.194.200.74 with SMTP id jq10mr1968213wjc.110.1410771691856; 
 Mon, 15 Sep 2014 02:01:31 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.194.73.2 with HTTP; Mon, 15 Sep 2014 02:01:11 -0700 (PDT)
In-Reply-To: <CAAxsn=FPsgeT7mb8zY5wDpwCJ2MJ+AkpgKDT3vh63qYxAjziUQ@mail.gmail.com>
References: <CAHR=Vkwc9Usp4fQc7+hx14j9b07BKEDzXBdSKLOdWyF=5gyWRg@mail.gmail.com>
 <CAAxsn=FPsgeT7mb8zY5wDpwCJ2MJ+AkpgKDT3vh63qYxAjziUQ@mail.gmail.com>
From: Thomas Braibant <thomas.braibant@gmail.com>
Date: Mon, 15 Sep 2014 11:01:11 +0200
Message-ID: <CAHR=VkzROsicg=o-+2fQOwwoinvsMaVg1dO=YXjhFQEcZFGM6w@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Logging function calls
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 15 Sep 2014 08:29:40 -0000

Hi Jeremy,

Thanks for your reply. Your proposal is quite close to what I had in
mind. Yet, I am a bit puzzled about the dereferencing of the pointer
in format_val. Shouldn't we test if it is the null-pointer before
doing that? In that case, is testing if p = Ctypes.null the preferred
way to do that? (I spotted that pattern somewhere in memory.ml I
think.)

Regarding my other use case, what I miss is a way to tag a view (with
the identity coercion both way) with a name, and be able to use that
name to pick the right pretty printer (for flags, and so on). That
would be a tiny bit more convenient than reading the integer value of
(FLAG_BAR | FLAG_FOO) in my log, but I can cope with that.

Best,
Thomas


On Sat, Sep 13, 2014 at 1:20 PM, Jeremy Yallop <yallop@gmail.com> wrote:
> On 12 September 2014 10:15, Thomas Braibant <thomas.braibant@gmail.com> wrote:
>> I would like to log function calls using something like the following code:
>>
>> let rec log:
>> type a. a fn -> a -> a =
>>     function
>>     | Static.Returns ty ->
>>        fun result ->
>>        Printf.printf "<- %s\n%!" (string_of ty result);
>>        result
>>     | Static.Function (ty, fn) ->
>>        fun f x ->
>>        Printf.printf "-> %s\n%!" (string_of ty x);
>>        log fn (f x)
>>
>> This works beautifully for simple enough function arguments. However,
>> I would also like to display a bit more than what is currently
>> available.
>> Two quick examples come to mind.
>>
>> First, printing the name of manifest constants (e.g., defined in C
>> using #define FOO 0x0001337). I would like to log FOO rather than its
>> integer value. If I provide a correct printing function, it might even
>> produces correct C code.
>>
>> Second, a bit more akward, printing the content of structs that are
>> passed by reference to functions. I do not see a way to print that
>> information as valid C, but it would be tremendously useful in my
>> logs.
>
> I think that you can do what you want by matching a little deeper on
> "ty".  Here's a function that prints C values, dereferencing
> pointers-to-structures rather than just printing their addresses:
>
>   let rec format_val : type a. a typ -> Format.formatter -> a -> unit =
>     fun t fmt -> let open Static in match t with
>     | Pointer (Struct _ as s) ->
>        fun v -> Format.fprintf fmt "pointer to %a" (format_val s) !@v
>     | t -> Ctypes.format t fmt
>
> You can then call format_val instead of string_of inside your log function:
>
>   let rec log:
>     type a. a fn -> a -> a =
>       function
>       | Static.Returns ty ->
>          fun result ->
>          Format.(fprintf std_formatter) "<- @[%a@]@\n%!" (format_val ty) result;
>          result
>       | Static.Function (ty, fn) ->
>          fun f x ->
>          Format.(fprintf std_formatter) "-> @[%a@]@\n%!" (format_val ty) x;
>          log fn (f x)
>
> Here are the results, logging the results of passing the address of an
> uninitialized struct to the identity function:
>
>    # let s = structure "s";;
>    val s : '_a structure typ = struct s
>    # let i = field s "i" int;;
>    val i : (int, ('_a, [ `Struct ]) structured) field = <abstr>
>    # let j = field s "j" float;;
>    val j : (float, ('_a, [ `Struct ]) structured) field = <abstr>
>    # let () = seal s;;
>    # let v = make s;;
>    val v : ('_a, [ `Struct ]) structured = {
>        i = -486857096, j = 4.5857492245e-41
>      }
>    # log (ptr s @-> returning (ptr s)) (fun x -> x) (addr v);;
>    -> pointer to { i = -486857096, j = 4.5857492245e-41  }
>    <- pointer to { i = -486857096, j = 4.5857492245e-41  }
>    - : '_a structure ptr = (struct s*) 0x95fc40

From yallop@gmail.com  Tue Sep 16 09:44:17 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-41.csi.cam.ac.uk (ppsw-41.csi.cam.ac.uk [131.111.8.141])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 631B53C1DE
 for <ctypes@lists.ocaml.org>; Tue, 16 Sep 2014 09:44:17 +0100 (BST)
X-Cam-SpamDetails: score 0.9 from SpamAssassin-3.3.2-1624971 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.175 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.3 URIBL_RHS_DOB Contains an URI of a new domain (Day Old Bread)
 *      [URIs: memory.ml]
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-we0-f175.google.com ([74.125.82.175]:36298)
 by ppsw-41.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XTowz-00029f-Qy (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 16 Sep 2014 10:21:29 +0100
Received: by mail-we0-f175.google.com with SMTP id w61so5391920wes.20
 for <ctypes@lists.ocaml.org>; Tue, 16 Sep 2014 02:21:28 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=3+ewQ+KeGW1n5XlX6rb2GdH3eDXn32L3UE7si0itaJA=;
 b=oLJUSfvzRcvzZ8f1ifddRpcDO6qGB48k20bVQkVpXpLSNG1OMI+b6b4fL7WgYW5Jxp
 6FWAvZzOycoJ422QdtXg6SyjrwkdFj5Oi0Ml7nXpoW2VYxsPMfiiPQhVSafqJWbUnWD0
 roKR6NNOc0TpOwTJwKMxpD0F3TCyXfuRZgnI2dnIHA+jl+l/VWSbLvMi5YIN16vtrzIQ
 G4/yo9DmGkKSVEsUr2ZVe9N1Wh02zJWrpwaAUIwdnPZ4r38IiBNY2FI8ZAsSBiKqjfmN
 mpjDrllGpIMtCRJw/h0ZUMGirX/iUhfZ6RnMdQkZcWz6dje68Q2Wk/VlCPqz9lejb9n9
 6ZXQ==
MIME-Version: 1.0
X-Received: by 10.194.3.106 with SMTP id b10mr40602603wjb.3.1410859288845;
 Tue, 16 Sep 2014 02:21:28 -0700 (PDT)
Received: by 10.217.129.194 with HTTP; Tue, 16 Sep 2014 02:21:28 -0700 (PDT)
In-Reply-To: <CAHR=VkzROsicg=o-+2fQOwwoinvsMaVg1dO=YXjhFQEcZFGM6w@mail.gmail.com>
References: <CAHR=Vkwc9Usp4fQc7+hx14j9b07BKEDzXBdSKLOdWyF=5gyWRg@mail.gmail.com>
 <CAAxsn=FPsgeT7mb8zY5wDpwCJ2MJ+AkpgKDT3vh63qYxAjziUQ@mail.gmail.com>
 <CAHR=VkzROsicg=o-+2fQOwwoinvsMaVg1dO=YXjhFQEcZFGM6w@mail.gmail.com>
Date: Tue, 16 Sep 2014 10:21:28 +0100
Message-ID: <CAAxsn=FOcQF7pVfuvE-PGdyXRnjhKwJndvZPzr_SwW1Fnu5cbw@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Thomas Braibant <thomas.braibant@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Logging function calls
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 16 Sep 2014 08:44:17 -0000

On 15 September 2014 10:01, Thomas Braibant <thomas.braibant@gmail.com> wrote:
> Thanks for your reply. Your proposal is quite close to what I had in
> mind. Yet, I am a bit puzzled about the dereferencing of the pointer
> in format_val. Shouldn't we test if it is the null-pointer before
> doing that?

Sure: there are different opinions on this, but I agree that a test
for null would be reasonable here.

> In that case, is testing if p = Ctypes.null the preferred
> way to do that? (I spotted that pattern somewhere in memory.ml I
> think.)

It's better in general to use Ctypes.ptr_compare, since ptr is an
abstract type and the values contain extra data besides the raw
address.  (I think polymorphic equality will do what you expect for
the special case of comparing to Ctypes.null, but in general you can
have two Ctypes.ptr values referencing the same object but not
considered equal by =.)

Even better, if your pointers are nullable you might use
Ctypes.ptr_opt to construct them, and pattern matching against
Some/None to check for null.

> Regarding my other use case, what I miss is a way to tag a view (with
> the identity coercion both way) with a name, and be able to use that
> name to pick the right pretty printer (for flags, and so on). That
> would be a tiny bit more convenient than reading the integer value of
> (FLAG_BAR | FLAG_FOO) in my log, but I can cope with that.

It'd be convenient to have a way to add custom value printers for
views, along similar lines to the format_typ optional argument to the
view function.  I think that would actually solve both your problems
neatly: you could have a view with a custom printer for your flags
which turned integers into symbolic names, and a view with a custom
printer for your pointer-to-struct arguments which printed out the
pointed-to values rather than the addresses.  Pull requests welcome!
(or feel free to raise an issue, if you prefer).

From thomas.braibant@gmail.com  Tue Sep 30 10:31:51 2014
Return-Path: <thomas.braibant@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 339BF3C1D1
 for <ctypes@lists.ocaml.org>; Tue, 30 Sep 2014 10:31:51 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1628137 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.49 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (thomas.braibant[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wg0-f49.google.com ([74.125.82.49]:58994)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XYuNS-0002C5-kh (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <thomas.braibant@gmail.com>); Tue, 30 Sep 2014 11:09:50 +0100
Received: by mail-wg0-f49.google.com with SMTP id x12so2026693wgg.8
 for <ctypes@lists.ocaml.org>; Tue, 30 Sep 2014 03:09:50 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:from:date:message-id:subject:to:content-type;
 bh=ip9wbaXMqEguTZx2seN/6Vl1teflG+HHAhUi6xrSxgg=;
 b=Zt94Q0DUgXgyjaRpKNFQjDdaoYvdG1jsNmjudOdr9SPQ2WTdBnQZL/WLFQ6jHE11Z4
 AqobtWVh9nfAT6FgPkQtoIGhW/Ih7T+7be+jkWiJ6yDUq+h0m25pSn3IgNfSjtRd4DkX
 yhYXAMt4gvk1QosB+g/kFE6AyfhcPsPo60dH0++cbGhsMOyNKmr5cmbLOIaEa18Ah6LF
 EvgMIbCAiDOqSXoojGmUayqqrnH5FPbfbRDjxuTO/Lq/JAQZITjx91Hts3Kdbd04tjN8
 ZrNC20vcUcCzNAf1jbaiXlK0EJx/SJbxgTH70lfxvBpiGIGC/OPT+KikCDJsNuCVSXyQ
 n6sQ==
X-Received: by 10.194.243.230 with SMTP id xb6mr18069635wjc.100.1412071790105; 
 Tue, 30 Sep 2014 03:09:50 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.194.82.39 with HTTP; Tue, 30 Sep 2014 03:09:30 -0700 (PDT)
From: Thomas Braibant <thomas.braibant@gmail.com>
Date: Tue, 30 Sep 2014 12:09:30 +0200
Message-ID: <CAHR=VkyzSt_EwWdyHdir=B_2h0XGmeCSC5BCga4V0TkcB3noMQ@mail.gmail.com>
To: ctypes <ctypes@lists.ocaml.org>
Content-Type: text/plain; charset=UTF-8
Subject: [ocaml-ctypes] Inverted stubs
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 30 Sep 2014 09:31:51 -0000

Hi list,

First, I would like to report that my first attempt to make bindings
using Ctypes for a sizable library was a success, and I would like to
congratulate the people behind Ctypes for making such a wonderful
library.

Now, I would like to generate inverted stubs that match a third party
C header file (the same one that I used to make my bindings in the
first place). Generally speaking, this should be possible I suppose.
However, one of the functions from this interface returns a struct
that contains function pointers to all the other functions exposed in
the interface. I am reasonably convinced that it is out of the scope
of what Ctypes can do, but I wanted to be sure about that.

Then, I think my best chance is to write a shim in C that does just
the last step of implementing "the function that returns a struct that
contains function pointers to all the other functions". If anyone has
an opinion on this, I would quite happy to hear about it.

Best,
Thomas

From yallop@gmail.com  Wed Oct  1 09:45:59 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 045063C1DE
 for <ctypes@lists.ocaml.org>; Wed,  1 Oct 2014 09:45:59 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1628373 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.43 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wg0-f43.google.com ([74.125.82.43]:38870)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XZG8f-0004jQ-jP (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Wed, 01 Oct 2014 10:24:01 +0100
Received: by mail-wg0-f43.google.com with SMTP id k14so627696wgh.26
 for <ctypes@lists.ocaml.org>; Wed, 01 Oct 2014 02:24:00 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=kVkijn+TcKJ1PKpBfHUH17zmVObCD6sdtKB28BtO5hk=;
 b=j3UNeQKznVarnYd8g4oymw44hoMpQX+e99YXFySlf+9IWzTcY/tVIeNPImbwguuwox
 Nl3UE1nL5cdHiFuaOJxfRmvsmR/77Hvc464iO0nabzfQ44T3BmSxPOAzq8A9lqwrxVEL
 Y6zuI/R8QgtfFD3dx0OO2RBuNGnOdHgDMADYdrK980rQiCe8Vc38OelFlQ0oULkvE6B5
 dhEvE6JPbgmlmP/D+dHXl/NBSyP0qciq54jPHdk7Un4QBKD+ZmXqhc4zBUGiNi8SyWQf
 8c4xpluKJEwilv4/erhJhNgJP1agLECOZKxwXS5ELhfPqKdaXosWYHJaexQm/LpXfH1+
 +x2A==
MIME-Version: 1.0
X-Received: by 10.180.103.131 with SMTP id fw3mr12387774wib.77.1412155440725; 
 Wed, 01 Oct 2014 02:24:00 -0700 (PDT)
Received: by 10.217.129.194 with HTTP; Wed, 1 Oct 2014 02:24:00 -0700 (PDT)
In-Reply-To: <CAHR=VkyzSt_EwWdyHdir=B_2h0XGmeCSC5BCga4V0TkcB3noMQ@mail.gmail.com>
References: <CAHR=VkyzSt_EwWdyHdir=B_2h0XGmeCSC5BCga4V0TkcB3noMQ@mail.gmail.com>
Date: Wed, 1 Oct 2014 10:24:00 +0100
Message-ID: <CAAxsn=EDF_w3cBdD4OQNszZBquQVqHsd3-otmWVbOW=5jwWarw@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Thomas Braibant <thomas.braibant@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Inverted stubs
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 01 Oct 2014 08:45:59 -0000

On 30 September 2014 11:09, Thomas Braibant <thomas.braibant@gmail.com> wrote:
> First, I would like to report that my first attempt to make bindings
> using Ctypes for a sizable library was a success, and I would like to
> congratulate the people behind Ctypes for making such a wonderful
> library.

Thanks!  We're very glad to hear of your success.

> Now, I would like to generate inverted stubs that match a third party
> C header file (the same one that I used to make my bindings in the
> first place). Generally speaking, this should be possible I suppose.
> However, one of the functions from this interface returns a struct
> that contains function pointers to all the other functions exposed in
> the interface. I am reasonably convinced that it is out of the scope
> of what Ctypes can do, but I wanted to be sure about that.

I think this is something that ctypes can handle.  The trickiest part
is likely to be the memory management: when you pass an OCaml object
to C you need to be careful to ensure that the GC can still see it.
The inverted stubs support is still at an early stage, and in time I
think we'll develop techniques to make memory management easier.

On to the example.  If I understand correctly you'd like to build an
interface that looks something like this:

   struct callbacks {
      int (*arith)(int, int);
      int (*print)(char *);
   };

   struct callbacks *build(int id);

Here's how to build a library with the above interface using ctypes.
First, a definition for the struct:

   (* bindings.ml *)
   open Ctypes

   let callbacks : [`callback] structure typ = structure "callbacks"
   let arith = field callbacks "arith"
                       (Foreign.funptr (int @-> int @-> returning int))
   let print = field callbacks "print"
                       (Foreign.funptr (string @-> returning void))
   let () = seal callbacks

For this example I'll use the simplest possible memory management
strategy: a cache which holds references to OCaml values returned from
the 'build' function:

   type state = { arith: int -> int -> int; print: string -> unit }
   let cache : ([`callback] structure  * state) list ref = ref []

The build function itself allocates and initializes a struct, adds it
to the cache, and returns it:

   let build id =
     let state = { arith = (+);
                   print = Printf.printf "id: %d; msg: %s\n%!" id } in
     let c = make callbacks in
     begin
       setf c arith state.arith;
       setf c print state.print;
       cache := (c, state) :: !cache;
       addr c
     end

The external interface is described with a functor in the usual way.
We expose a single function, "build", by passing name, type, and
implementation to the "internal" function.

    module Bindings(I: Cstubs_inverted.INTERNAL) =
    struct
      let _ = I.internal "build" (int @-> returning (ptr callbacks)) build
    end

I won't post all the build details here, but I've put them in a gist
so that you can compile and run the example.

   https://gist.github.com/yallop/d196fee1607883493876

It's worth just showing a use of the library here.  Here's a little test client:

   #include "callback_stubs.h"
   #include <caml/callback.h>
   #include <stdio.h>

   int main(int argc, char **argv)
   {
     /* Initialize the OCaml runtime before calling the library. */
     char *caml_argv[1] = { NULL };
     caml_startup(caml_argv);

     struct callbacks *c0 = build(0);
     struct callbacks *c1 = build(1);

     printf("c0->arith(10, 20) => %d\n", c0->arith(10, 20));
     printf("c1->arith(30, 40) => %d\n", c0->arith(30, 40));
     c0->print("printing via c0");
     c1->print("printing via c1");

     return 0;
   }

The output is as you'd expect:

   c0->arith(10, 20) => 30
   c1->arith(30, 40) => 70
   id: 0; msg: printing via c0
   id: 1; msg: printing via c1

I hope that helps,

Jeremy.

From hez@0ok.org  Wed Oct  8 13:41:56 2014
Return-Path: <hez@0ok.org>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 99CB73C14A
 for <ctypes@lists.ocaml.org>; Wed,  8 Oct 2014 13:41:56 +0100 (BST)
X-Cam-SpamDetails: score 0.1 from SpamAssassin-3.3.2-1629824 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [69.163.253.135 listed in list.dnswl.dnsbl.ja.net]
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from sub4.mail.dreamhost.com ([69.163.253.135]:40271
 helo=homiemail-a32.g.dreamhost.com)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1XbrAE-0008Lb-lY (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <hez@0ok.org>); Wed, 08 Oct 2014 14:20:23 +0100
Received: from homiemail-a32.g.dreamhost.com (localhost [127.0.0.1])
 by homiemail-a32.g.dreamhost.com (Postfix) with ESMTP id B365B584065
 for <ctypes@lists.ocaml.org>; Wed,  8 Oct 2014 06:20:20 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha1; c=relaxed; d=0ok.org; h=mime-version
 :from:date:message-id:subject:to:content-type; s=0ok.org; bh=Bm1
 R70jAJK3Zi2UpjYb5xehweCg=; b=WjooP8qgN0XEM0WE03oDMInr7uXwG2lSD/9
 tbOgUpUsuCreJF7CnPMWVG5+eSMQqH7+xQ36R1sdix63txljpt9CAB1m99bW40P4
 /zr1Bd9WnXrwsUe1lh7iMMx+RaRxoDGGMTMAw4jEugvCuNCdf2iM/YulzcQkWQZ3
 QySyhRWs=
Received: from mail-la0-f44.google.com (mail-la0-f44.google.com
 [209.85.215.44]) (using TLSv1 with cipher RC4-SHA (128/128 bits))
 (No client certificate requested) (Authenticated sender: hez@0ok.org)
 by homiemail-a32.g.dreamhost.com (Postfix) with ESMTPSA id 4FC2D584057
 for <ctypes@lists.ocaml.org>; Wed,  8 Oct 2014 06:20:20 -0700 (PDT)
Received: by mail-la0-f44.google.com with SMTP id gb8so8469420lab.31
 for <ctypes@lists.ocaml.org>; Wed, 08 Oct 2014 06:20:18 -0700 (PDT)
X-Gm-Message-State: ALoCoQl7HiHWqZPOzyXi7DCizjGsA/BOAmexDpiNQ0eZWAYK33RbtPxxf91Tdq7YolR9Nn7aPSkh
X-Received: by 10.152.4.194 with SMTP id m2mr11647984lam.63.1412774418007;
 Wed, 08 Oct 2014 06:20:18 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.25.148.212 with HTTP; Wed, 8 Oct 2014 06:19:57 -0700 (PDT)
From: "Hezekiah M. Carty" <hez@0ok.org>
Date: Wed, 8 Oct 2014 09:19:57 -0400
Message-ID: <CAMfPyLBzmU=PnN+83hQ94BZSM2_ujUGSMMgG_7SvkKKBi6uJ-g@mail.gmail.com>
To: ctypes@lists.ocaml.org
Content-Type: text/plain; charset=UTF-8
Subject: [ocaml-ctypes] Binding that works in bytecode,
	segfaults in native code
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 08 Oct 2014 12:41:56 -0000

Hello,

I have been working on and off on ctypes-based OCaml bindings for the
GDAL library (http://gdal.org).  The process has been quite pleasant
so far.  The bindings are available here:
https://github.com/hcarty/ocaml-gdal

I've run into what I expect is a memory management issue with my
bindings to GDAL's raster warping API.  This section of GDAL handles
reshaping an image to fit different physical dimensions and/or
coordinate systems.  This involves a lot of calls from OCaml to C to
OCaml to C.  The call to the C library involves building and passing
in a large struct defined here:

http://www.gdal.org/structGDALWarpOptions.html

with the corresponding ctypes binding here:

https://github.com/hcarty/ocaml-gdal/blob/master/src/gdal/warp.ml#L26

examples/warptut.ml in the ocaml-gdal repository is meant to
illustrate how to use the Warp module.  When warptut.ml is compiled to
a bytecode executable on my system I can run it without issue.
However I get a consistent segfault when trying to run the same
program compiled to native code.  Running both under gdb shows that
the correct/expected code path within GDAL is taken in the bytecode
case while an incorrect path involving callbacks to unexpected
functions is taken in the native code case.

warptut.ml is sprinkled with Gc.full_major calls to try to locate the
source of the problem.  The actual segfault happens here:

https://github.com/hcarty/ocaml-gdal/blob/master/examples/warptut.ml#L97

A sample input file to test the warptut.{byte, native} is available here:

http://0ok.org/ocaml/rtma2p5.t06z.2dvaranl_ndfd.grb2

You can test warptut with:

./warptut.native rtma2p5.t06z.2dvaranl_ndfd.grb2 out.tif

Running

ocamlbuild warptut.byte

will give the equivalent bytecode executable which can be run the same way.

If anyone is interested in helping debug this issue I'm happy to
provide more information on how the bindings are structured.  In the
mean time are there any suggestions or techniques you can recommend to
help track down the cause of this segfault?  I've tried to ensure that
I am keeping references to data passed to C on the OCaml end to avoid
data disappearing but I must have missed something.

The system I've been testing this on is running 64bit Ubuntu 12.04,
OCaml 4.01.0 and 4.02.0, and the latest ctypes from opam.

Thank you,

Hez

From yallop@gmail.com  Tue Oct 14 11:30:22 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-51.csi.cam.ac.uk (ppsw-51.csi.cam.ac.uk [131.111.8.151])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 25F393C206
 for <ctypes@lists.ocaml.org>; Tue, 14 Oct 2014 11:30:22 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1631318 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.175 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f175.google.com ([209.85.212.175]:63919)
 by ppsw-51.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XdzyW-000848-YR (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 14 Oct 2014 12:09:09 +0100
Received: by mail-wi0-f175.google.com with SMTP id d1so9747951wiv.14
 for <ctypes@lists.ocaml.org>; Tue, 14 Oct 2014 04:09:08 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=SyAvDObETzOOKQuF8lEK358Fq8AsQiKdO+7Cg/9z6pg=;
 b=sY145P6A1zZmoE7ziJfV01Dnz+yl7tATUKr/hmNzseL1oDpfQ2GvbBARbI887v2FvG
 mc6o777DQG8tn9E/b/BteCExZbWjFL3rykXzJU2qKTtn5dog3KDr7JtaT3ue2a4rOZxr
 lkTSooWrpuwFM8tZ+pxmoF5Yr/HOutNVb1AM/0tgXrgh8ZYR9GQt24SLWR7BTNIfF435
 xV4PwKencnB3Ruxdmp2D3Wx7AukISHEQs/DZBx5iYpWqpd+iAcF5CG19QQgmZCFHInHn
 fsibFxKMlNaWFWvPC111/+QZNwuIhCTSAt5gE2y3FAx0oSu13AogkRBo4PnXCGv1zWIP
 V6/Q==
MIME-Version: 1.0
X-Received: by 10.194.216.232 with SMTP id ot8mr4503409wjc.74.1413284948258;
 Tue, 14 Oct 2014 04:09:08 -0700 (PDT)
Received: by 10.217.115.5 with HTTP; Tue, 14 Oct 2014 04:09:08 -0700 (PDT)
In-Reply-To: <CAMfPyLBzmU=PnN+83hQ94BZSM2_ujUGSMMgG_7SvkKKBi6uJ-g@mail.gmail.com>
References: <CAMfPyLBzmU=PnN+83hQ94BZSM2_ujUGSMMgG_7SvkKKBi6uJ-g@mail.gmail.com>
Date: Tue, 14 Oct 2014 12:09:08 +0100
Message-ID: <CAAxsn=G9T=rHGtZLwNHz4W_VYWg=KywdJTGkB+feWqA7-bCPUA@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: "Hezekiah M. Carty" <hez@0ok.org>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Binding that works in bytecode,
 segfaults in native code
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 14 Oct 2014 10:30:22 -0000

On 8 October 2014 14:19, Hezekiah M. Carty <hez@0ok.org> wrote:
> In the mean time are there any suggestions or techniques you can recommend to
> help track down the cause of this segfault?

I think A. Hauptmann's advice elsewhere is worth repeating here, for
the benefit of anyone who runs into similar issues:

    "Use Gc.compact, not just Gc.full_major. And put it in a often
called function of your library code, not only at application level. I
always overlay any suspicious function with a wrapper of this scheme:

     let f .. =
       Gc.compact ();
       let x = f .. in
       Gc.compact ();
       x

    And then run your application with valgrind. Valgrind did find
this error instantly."
    (https://github.com/hcarty/ocaml-gdal/pull/3)

From trevorsummerssmith@gmail.com  Fri Oct 17 11:56:49 2014
Return-Path: <trevorsummerssmith@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 7DE043C0A4
 for <ctypes@lists.ocaml.org>; Fri, 17 Oct 2014 11:56:49 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1632248 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.214.180 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (trevorsummerssmith[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-ob0-f180.google.com ([209.85.214.180]:49835)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1Xf5ow-0008Fw-jM (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <trevorsummerssmith@gmail.com>); Fri, 17 Oct 2014 12:35:46 +0100
Received: by mail-ob0-f180.google.com with SMTP id va2so430327obc.39
 for <ctypes@lists.ocaml.org>; Fri, 17 Oct 2014 04:35:44 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:date:message-id:subject:from:to:content-type;
 bh=3Gz1sy//mNs20jztT5DfEi6h92NiifNXpjZqAq/vRXU=;
 b=O5uaYOX1nXbDZYhaUXEpr01rAHlGAcaYZkes0TNqg1e4zccfLxXBMpkn414sMmJcQE
 dHdLKCx6TJORMbue7ca9SytexQdE7UOicU17r/9Vc2Hiid5/mO5A+Fq1QhllOQq4Cidy
 6cSyQbxIkuTGGpCoQPDp+9HFYU8bTyJwKi5KYZIc3d5uNbnhgh3it229hxcxJiVErdWg
 j+gTZqd/lye8psc5x1E2B/qOTO1oBiFAeWz1Fer4VLVQAgaEjz9KWCGHzI7xlNL4pRV+
 C4hyxFapw8jAqMRygPKvU862oMiYVvX7sBEVxfQXcewZMSaqiQUNrXICvC0a2/GDoxFs
 r7Gg==
MIME-Version: 1.0
X-Received: by 10.60.47.84 with SMTP id b20mr1340129oen.55.1413545744609; Fri,
 17 Oct 2014 04:35:44 -0700 (PDT)
Received: by 10.182.174.5 with HTTP; Fri, 17 Oct 2014 04:35:44 -0700 (PDT)
Date: Fri, 17 Oct 2014 07:35:44 -0400
Message-ID: <CAG-KTt9684d_SCqp_MtaGSuqAhnZ0mNSmGwdw7LQZm_81ShnRQ@mail.gmail.com>
From: Trevor Smith <trevorsummerssmith@gmail.com>
To: ctypes@lists.ocaml.org
Content-Type: multipart/alternative; boundary=001a11c20b44fb35e005059cc35c
Subject: [ocaml-ctypes] Defines, and Structs with platform-specific fields
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 17 Oct 2014 10:56:49 -0000

--001a11c20b44fb35e005059cc35c
Content-Type: text/plain; charset=UTF-8

Hello,

I am working on a ctypes binding to libuv [https://github.com/joyent/libuv],
and I have two questions:

1) Is the recommended way to interact with C-defines the way described in
this thread?
http://lists.ocaml.org/pipermail/ctypes/2014-February/000064.html

2) What is the recommended way to deal with struct fields that vary
depending upon platform?

Libuv is a cross platform library, and has platform-specific fields for its
structs. For example see the struct uv_loop_s.

Defined here https://github.com/joyent/libuv/blob/v1.0.0-rc1/include/uv.h
Unix specific fields:
https://github.com/joyent/libuv/blob/v1.0.0-rc1/include/uv-unix.h
Windows specific fields:
https://github.com/joyent/libuv/blob/v1.0.0-rc1/include/uv-win.h

Thank you.

Trevor

--001a11c20b44fb35e005059cc35c
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Hello,<div><br></div><div>I am working on a ctypes binding=
 to libuv [<a href=3D"https://github.com/joyent/libuv">https://github.com/j=
oyent/libuv</a>], and I have two questions:</div><div><br></div><div>1) Is =
the recommended way to interact with C-defines the way described in this th=
read?=C2=A0<a href=3D"http://lists.ocaml.org/pipermail/ctypes/2014-February=
/000064.html">http://lists.ocaml.org/pipermail/ctypes/2014-February/000064.=
html</a></div><div><br></div><div>2) What is the recommended way to deal wi=
th struct fields that vary depending upon platform?</div><div><br></div><di=
v>Libuv is a cross platform library, and has platform-specific fields for i=
ts structs. For example see the struct uv_loop_s.</div><div><br></div><div>=
Defined here=C2=A0<a href=3D"https://github.com/joyent/libuv/blob/v1.0.0-rc=
1/include/uv.h">https://github.com/joyent/libuv/blob/v1.0.0-rc1/include/uv.=
h</a></div><div>Unix specific fields: <a href=3D"https://github.com/joyent/=
libuv/blob/v1.0.0-rc1/include/uv-unix.h">https://github.com/joyent/libuv/bl=
ob/v1.0.0-rc1/include/uv-unix.h</a></div><div>Windows specific fields: <a h=
ref=3D"https://github.com/joyent/libuv/blob/v1.0.0-rc1/include/uv-win.h">ht=
tps://github.com/joyent/libuv/blob/v1.0.0-rc1/include/uv-win.h</a></div><di=
v><br></div><div>Thank you.</div><div><br>Trevor</div></div>

--001a11c20b44fb35e005059cc35c--

From daniel.buenzli@erratique.ch  Fri Oct 17 14:07:17 2014
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 2A9B83C1DE
 for <ctypes@lists.ocaml.org>; Fri, 17 Oct 2014 14:07:17 +0100 (BST)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1632248
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:58729
 helo=smtp.webfaction.com)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1Xf7rC-0006Tm-jC (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Fri, 17 Oct 2014 14:46:14 +0100
Received: from [172.20.10.2] (232-236.197-178.cust.bluewin.ch
 [178.197.236.232])
 by smtp.webfaction.com (Postfix) with ESMTP id 0DDD52118531;
 Fri, 17 Oct 2014 13:46:11 +0000 (UTC)
Date: Fri, 17 Oct 2014 15:46:12 +0200
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Trevor Smith <trevorsummerssmith@gmail.com>
Message-ID: <1B1F99FDB4384237A2DC7B1F4C87E4E2@erratique.ch>
In-Reply-To: <CAG-KTt9684d_SCqp_MtaGSuqAhnZ0mNSmGwdw7LQZm_81ShnRQ@mail.gmail.com>
References: <CAG-KTt9684d_SCqp_MtaGSuqAhnZ0mNSmGwdw7LQZm_81ShnRQ@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Defines,
 and Structs with platform-specific fields
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 17 Oct 2014 13:07:17 -0000

Le vendredi, 17 octobre 2014 =C3=A0 13:35, Trevor Smith a =C3=A9crit :
> Hello,
> =20
> I am working on a ctypes binding to libuv =5Bhttps://github.com/joyent/=
libuv=5D, and I have two questions:
> =20
> 1) Is the recommended way to interact with C-defines the way described =
in this thread=3F http://lists.ocaml.org/pipermail/ctypes/2014-=46ebruary=
/000064.html
I think so. If you want to pattern match you can have a look here:

https://github.com/dbuenzli/tsdl/tree/master/support
https://github.com/dbuenzli/tsdl/blob/master/myocamlbuild.ml=23L39

> 2) What is the recommended way to deal with struct fields that vary dep=
ending upon platform=3F
> =20
> Libuv is a cross platform library, and has platform-specific fields for=
 its structs. =46or example see the struct uv=5Floop=5Fs.
I'm not familiar with the API but having a look at: =20

https://github.com/joyent/libuv/blob/v1.0.0-rc1/include/uv.h=23L1381

Then I wouldn't bother at all about the private fields, just describe the=
 constant part of the struct (and do you even need to =3F It seems only s=
top=5Fflag is interesting here, you could aswell treat the struct as an a=
bstract data type). Now if really needed I would define C accessors for e=
ach private field and raise if the field is not available for the platfor=
m and ctypes-bind to these accessors.

Best,

Daniel



From trevorsummerssmith@gmail.com  Fri Oct 17 18:14:58 2014
Return-Path: <trevorsummerssmith@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 74D7E3C1DE
 for <ctypes@lists.ocaml.org>; Fri, 17 Oct 2014 18:14:58 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1632248 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.214.169 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (trevorsummerssmith[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-ob0-f169.google.com ([209.85.214.169]:45940)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XfBit-0001KW-Eo (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <trevorsummerssmith@gmail.com>); Fri, 17 Oct 2014 18:53:56 +0100
Received: by mail-ob0-f169.google.com with SMTP id m8so1019745obr.14
 for <ctypes@lists.ocaml.org>; Fri, 17 Oct 2014 10:53:54 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=CtkUxI321uXJ2dTuGw8dx9NlV3EftIANOS0iDDj/0wA=;
 b=AKeBpAowmkIHUEa5IM7p2CC7Sl+KThYO6doswzlaRPte+gz6QAkBI+FpampshvOCEA
 jSKplbrxuGwtTmGM2YALaJ4KIi9ZEhgbn5ep6qNSGo9z5TpeU7EIyivqmmeuaZQrezVR
 PTrQ8HnESmj56FZJ30+kzBWsyQs/IOtHkVBaaD7sC7LRrh3WmGtClSUfl7Akn2h83Ch/
 5kEgB6DW/fUPWvIe+HpUHt2RrWdqJqggVt4B5gkOLmsSuQjjaHBAdh75cjX84IUv5bK9
 cO6hP7utJHJkIiLVHdaunYxbvhjh2YYhFhp7Ii4qeF2d/EBWcbhHVw196qzlmNVz5HJd
 faig==
MIME-Version: 1.0
X-Received: by 10.60.47.84 with SMTP id b20mr3007262oen.55.1413568434142; Fri,
 17 Oct 2014 10:53:54 -0700 (PDT)
Received: by 10.182.174.5 with HTTP; Fri, 17 Oct 2014 10:53:54 -0700 (PDT)
In-Reply-To: <1B1F99FDB4384237A2DC7B1F4C87E4E2@erratique.ch>
References: <CAG-KTt9684d_SCqp_MtaGSuqAhnZ0mNSmGwdw7LQZm_81ShnRQ@mail.gmail.com>
 <1B1F99FDB4384237A2DC7B1F4C87E4E2@erratique.ch>
Date: Fri, 17 Oct 2014 13:53:54 -0400
Message-ID: <CAG-KTt9yHoZiAwiJ-vMmSHt5LMTOhHX3rCjv2FTrvzuEd-YTZw@mail.gmail.com>
From: Trevor Smith <trevorsummerssmith@gmail.com>
To: =?UTF-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
Content-Type: multipart/alternative; boundary=001a11c20b4462037d0505a20c92
Cc: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Defines,
	and Structs with platform-specific fields
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 17 Oct 2014 17:14:58 -0000

--001a11c20b4462037d0505a20c92
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Thank you for your reply Daniel.

About the structs: perhaps I have a fundamental misconception about how
ctypes works. Libuv functions expect that the caller allocate the memory
for the struct. My understanding was that adding fields to the struct in
ctypes would affect the memory that struct takes up. Therefore, the
different platforms would actually need these separate fields**.

**Some library maintainers get around this by allocating an area for
extension of a fixed size. This is not the case with libuv.

You are correct though that I don't need to expose many (actually probably
none) of the Loop's internal fields.

Thoughts?

Trevor

On Friday, October 17, 2014, Daniel B=C3=BCnzli <daniel.buenzli@erratique.c=
h>
wrote:

> Le vendredi, 17 octobre 2014 =C3=A0 13:35, Trevor Smith a =C3=A9crit :
> > Hello,
> >
> > I am working on a ctypes binding to libuv [
> https://github.com/joyent/libuv], and I have two questions:
> >
> > 1) Is the recommended way to interact with C-defines the way described
> in this thread?
> http://lists.ocaml.org/pipermail/ctypes/2014-February/000064.html
> I think so. If you want to pattern match you can have a look here:
>
> https://github.com/dbuenzli/tsdl/tree/master/support
> https://github.com/dbuenzli/tsdl/blob/master/myocamlbuild.ml#L39
>
> > 2) What is the recommended way to deal with struct fields that vary
> depending upon platform?
> >
> > Libuv is a cross platform library, and has platform-specific fields for
> its structs. For example see the struct uv_loop_s.
> I'm not familiar with the API but having a look at:
>
> https://github.com/joyent/libuv/blob/v1.0.0-rc1/include/uv.h#L1381
>
> Then I wouldn't bother at all about the private fields, just describe the
> constant part of the struct (and do you even need to ? It seems only
> stop_flag is interesting here, you could aswell treat the struct as an
> abstract data type). Now if really needed I would define C accessors for
> each private field and raise if the field is not available for the platfo=
rm
> and ctypes-bind to these accessors.
>
> Best,
>
> Daniel
>
>
>

--001a11c20b4462037d0505a20c92
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Thank you for your reply Daniel.<div><br></div><div>About =
the structs: perhaps I have a fundamental misconception about how ctypes wo=
rks. Libuv functions expect that the caller allocate the memory for the str=
uct. My understanding was that adding fields to the struct in ctypes would =
affect the memory that struct takes up. Therefore, the different platforms =
would actually need these separate fields**.</div><div><br></div><div>**Som=
e library maintainers get around this by allocating an area for extension o=
f a fixed size. This is not the case with libuv.</div><div><br></div><div>Y=
ou are correct though that I don&#39;t need to expose many (actually probab=
ly none) of the Loop&#39;s internal fields.</div><div><br></div><div>Though=
ts?</div><div><br></div><div>Trevor<br><br>On Friday, October 17, 2014, Dan=
iel B=C3=BCnzli &lt;<a href=3D"mailto:daniel.buenzli@erratique.ch" target=
=3D"_blank">daniel.buenzli@erratique.ch</a>&gt; wrote:<br><blockquote class=
=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padd=
ing-left:1ex">Le vendredi, 17 octobre 2014 =C3=A0 13:35, Trevor Smith a =C3=
=A9crit :<br>
&gt; Hello,<br>
&gt;<br>
&gt; I am working on a ctypes binding to libuv [<a href=3D"https://github.c=
om/joyent/libuv" target=3D"_blank">https://github.com/joyent/libuv</a>], an=
d I have two questions:<br>
&gt;<br>
&gt; 1) Is the recommended way to interact with C-defines the way described=
 in this thread? <a href=3D"http://lists.ocaml.org/pipermail/ctypes/2014-Fe=
bruary/000064.html" target=3D"_blank">http://lists.ocaml.org/pipermail/ctyp=
es/2014-February/000064.html</a><br>
I think so. If you want to pattern match you can have a look here:<br>
<br>
<a href=3D"https://github.com/dbuenzli/tsdl/tree/master/support" target=3D"=
_blank">https://github.com/dbuenzli/tsdl/tree/master/support</a><br>
<a href=3D"https://github.com/dbuenzli/tsdl/blob/master/myocamlbuild.ml#L39=
" target=3D"_blank">https://github.com/dbuenzli/tsdl/blob/master/myocamlbui=
ld.ml#L39</a><br>
<br>
&gt; 2) What is the recommended way to deal with struct fields that vary de=
pending upon platform?<br>
&gt;<br>
&gt; Libuv is a cross platform library, and has platform-specific fields fo=
r its structs. For example see the struct uv_loop_s.<br>
I&#39;m not familiar with the API but having a look at:<br>
<br>
<a href=3D"https://github.com/joyent/libuv/blob/v1.0.0-rc1/include/uv.h#L13=
81" target=3D"_blank">https://github.com/joyent/libuv/blob/v1.0.0-rc1/inclu=
de/uv.h#L1381</a><br>
<br>
Then I wouldn&#39;t bother at all about the private fields, just describe t=
he constant part of the struct (and do you even need to ? It seems only sto=
p_flag is interesting here, you could aswell treat the struct as an abstrac=
t data type). Now if really needed I would define C accessors for each priv=
ate field and raise if the field is not available for the platform and ctyp=
es-bind to these accessors.<br>
<br>
Best,<br>
<br>
Daniel<br>
<br>
<br>
</blockquote></div>
</div>

--001a11c20b4462037d0505a20c92--

From daniel.buenzli@erratique.ch  Sat Oct 18 09:55:21 2014
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 1B1903C350
 for <ctypes@lists.ocaml.org>; Sat, 18 Oct 2014 09:55:21 +0100 (BST)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1632514
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:41566
 helo=smtp.webfaction.com)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1XfQOy-0001in-mD (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Sat, 18 Oct 2014 10:34:21 +0100
Received: from [172.20.10.2] (161-228.197-178.cust.bluewin.ch
 [178.197.228.161])
 by smtp.webfaction.com (Postfix) with ESMTP id 98D4E223F971;
 Sat, 18 Oct 2014 09:34:19 +0000 (UTC)
Date: Sat, 18 Oct 2014 11:34:17 +0200
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Trevor Smith <trevorsummerssmith@gmail.com>
Message-ID: <B36B4944FE38422AB6DD2EAF2F50CE64@erratique.ch>
In-Reply-To: <CAG-KTt9yHoZiAwiJ-vMmSHt5LMTOhHX3rCjv2FTrvzuEd-YTZw@mail.gmail.com>
References: <CAG-KTt9684d_SCqp_MtaGSuqAhnZ0mNSmGwdw7LQZm_81ShnRQ@mail.gmail.com>
 <1B1F99FDB4384237A2DC7B1F4C87E4E2@erratique.ch>
 <CAG-KTt9yHoZiAwiJ-vMmSHt5LMTOhHX3rCjv2FTrvzuEd-YTZw@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Cc: "=?utf-8?Q?ctypes=40lists.ocaml.org?=" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Defines,
	and Structs with platform-specific fields
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sat, 18 Oct 2014 08:55:21 -0000



Le vendredi, 17 octobre 2014 =C3=A0 19:53, Trevor Smith a =C3=A9crit :

> Thank you for your reply Daniel.
> =20
> About the structs: perhaps I have a fundamental misconception about how=
 ctypes works. Libuv functions expect that the caller allocate the memory=
 for the struct. My understanding was that adding fields to the struct in=
 ctypes would affect the memory that struct takes up.
That's correct if you allocate it with ctypes, but you don't need to. Jus=
t make a C function that allocates the struct and bind to that function. =
=20

Daniel



From trevorsummerssmith@gmail.com  Sat Oct 18 12:10:19 2014
Return-Path: <trevorsummerssmith@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 2F1C43C0A4
 for <ctypes@lists.ocaml.org>; Sat, 18 Oct 2014 12:10:19 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1632514 
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (trevorsummerssmith[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.218.46 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-oi0-f46.google.com ([209.85.218.46]:59338)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XfSVb-0006dp-qT (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <trevorsummerssmith@gmail.com>); Sat, 18 Oct 2014 12:49:19 +0100
Received: by mail-oi0-f46.google.com with SMTP id h136so1733953oig.33
 for <ctypes@lists.ocaml.org>; Sat, 18 Oct 2014 04:49:18 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=GxC74jv30xkM5lrc2V4N3m0+Rd7O4JSOXp1JdSjDnZs=;
 b=0cTs4agBCQrlbndl9NAkp0829HrhrqWWS3aUQz7kntP46q5mnWDB3VVEuUNXyE6I8G
 FLiPPx1hmGQDWUziFK70lvV/o6P/D5qr1AQtWHVs0v3LbmdrPNCzh0lI5OAEoWw/UOj9
 uM0NvoTZvh6PdkxPiharJyQPLlNhLp63n9VR52eMmTW4Q+dgjp1lwvhjBPX+hFAOCWMu
 56VlERic3PSLpfdYjxNqG5F2buPynvresik1SF2ol0jBWa7JmfY8aOW34IDg83J8DuVj
 +8/Tr3pRCtJXTO/XxC7r0z++3LIwN5/BNaaxfS8r3QHsHBXXLEVp4NnIBTT7Ol8zxbAq
 ENdg==
MIME-Version: 1.0
X-Received: by 10.202.1.80 with SMTP id 77mr11579077oib.31.1413632957831; Sat,
 18 Oct 2014 04:49:17 -0700 (PDT)
Received: by 10.182.174.5 with HTTP; Sat, 18 Oct 2014 04:49:17 -0700 (PDT)
In-Reply-To: <B36B4944FE38422AB6DD2EAF2F50CE64@erratique.ch>
References: <CAG-KTt9684d_SCqp_MtaGSuqAhnZ0mNSmGwdw7LQZm_81ShnRQ@mail.gmail.com>
 <1B1F99FDB4384237A2DC7B1F4C87E4E2@erratique.ch>
 <CAG-KTt9yHoZiAwiJ-vMmSHt5LMTOhHX3rCjv2FTrvzuEd-YTZw@mail.gmail.com>
 <B36B4944FE38422AB6DD2EAF2F50CE64@erratique.ch>
Date: Sat, 18 Oct 2014 07:49:17 -0400
Message-ID: <CAG-KTt86Xoa6TG0ohXwCcWJ8+C+-Fkv_OCCqyOrSB4M8DyowiQ@mail.gmail.com>
From: Trevor Smith <trevorsummerssmith@gmail.com>
To: =?UTF-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
Content-Type: multipart/alternative; boundary=001a1137d4ce4b67eb0505b112ca
Cc: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Defines,
	and Structs with platform-specific fields
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sat, 18 Oct 2014 11:10:19 -0000

--001a1137d4ce4b67eb0505b112ca
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Daniel,

Your suggestion makes sense. If I were to do that -- any suggestions of how
to deal with freeing that memory? Ideally, without adding a lifecycle
"free" call to the user library. My thoughts would be to store the cstruct
reference (malloced by C) in a ref in OCaml, then attach a finalizer to the
OCaml ref that would call the corresponding C free. I suggest the ref
because my understanding is that his would be guaranteed to be finalized
once (as opposed to a normal value which might get copied multiple times).
Thoughts on this?

Aside: I wonder if ctypes could be extended to deal with this cross
platform issue fully in ctypes-land? Have others thought about this?

Also: are the maintainers open to documentation contributions? I noticed
that a lot of these questions on the FAQ are currently unanswered. I would
be happy to throw a couple commits with documentation suggestions for the
problems that I am running into.

Trevor

On Sat, Oct 18, 2014 at 5:34 AM, Daniel B=C3=BCnzli <daniel.buenzli@erratiq=
ue.ch>
wrote:

>
>
> Le vendredi, 17 octobre 2014 =C3=A0 19:53, Trevor Smith a =C3=A9crit :
>
> > Thank you for your reply Daniel.
> >
> > About the structs: perhaps I have a fundamental misconception about how
> ctypes works. Libuv functions expect that the caller allocate the memory
> for the struct. My understanding was that adding fields to the struct in
> ctypes would affect the memory that struct takes up.
> That's correct if you allocate it with ctypes, but you don't need to. Jus=
t
> make a C function that allocates the struct and bind to that function.
>
> Daniel
>
>
>

--001a1137d4ce4b67eb0505b112ca
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Daniel,<div><br></div><div>Your suggestion makes sense. If=
 I were to do that -- any suggestions of how to deal with freeing that memo=
ry? Ideally, without adding a lifecycle &quot;free&quot; call to the user l=
ibrary. My thoughts would be to store the cstruct reference (malloced by C)=
 in a ref in OCaml, then attach a finalizer to the OCaml ref that would cal=
l the corresponding C free. I suggest the ref because my understanding is t=
hat his would be guaranteed to be finalized once (as opposed to a normal va=
lue which might get copied multiple times). Thoughts on this?</div><div><br=
></div><div>Aside: I wonder if ctypes could be extended to deal with this c=
ross platform issue fully in ctypes-land? Have others thought about this?</=
div><div><br></div><div>Also: are the maintainers open to documentation con=
tributions? I noticed that a lot of these questions on the FAQ are currentl=
y unanswered. I would be happy to throw a couple commits with documentation=
 suggestions for the problems that I am running into.</div><div><br></div><=
div>Trevor</div></div><div class=3D"gmail_extra"><br><div class=3D"gmail_qu=
ote">On Sat, Oct 18, 2014 at 5:34 AM, Daniel B=C3=BCnzli <span dir=3D"ltr">=
&lt;<a href=3D"mailto:daniel.buenzli@erratique.ch" target=3D"_blank">daniel=
.buenzli@erratique.ch</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_q=
uote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1e=
x"><br>
<br>
Le vendredi, 17 octobre 2014 =C3=A0 19:53, Trevor Smith a =C3=A9crit :<br>
<span class=3D""><br>
&gt; Thank you for your reply Daniel.<br>
&gt;<br>
&gt; About the structs: perhaps I have a fundamental misconception about ho=
w ctypes works. Libuv functions expect that the caller allocate the memory =
for the struct. My understanding was that adding fields to the struct in ct=
ypes would affect the memory that struct takes up.<br>
</span>That&#39;s correct if you allocate it with ctypes, but you don&#39;t=
 need to. Just make a C function that allocates the struct and bind to that=
 function.<br>
<span class=3D"HOEnZb"><font color=3D"#888888"><br>
Daniel<br>
<br>
<br>
</font></span></blockquote></div><br></div>

--001a1137d4ce4b67eb0505b112ca--

From yallop@gmail.com  Mon Oct 20 08:45:54 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-51.csi.cam.ac.uk (ppsw-51.csi.cam.ac.uk [131.111.8.151])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id B3EE23C01B
 for <ctypes@lists.ocaml.org>; Mon, 20 Oct 2014 08:45:54 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1632884 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.174 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f174.google.com ([209.85.212.174]:51141)
 by ppsw-51.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1Xg8Gz-0002PM-WT (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Mon, 20 Oct 2014 09:25:01 +0100
Received: by mail-wi0-f174.google.com with SMTP id h11so7073461wiw.7
 for <ctypes@lists.ocaml.org>; Mon, 20 Oct 2014 01:25:00 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=ow895GICDYvQXfVKgfHg/JVmQRKciDmG0lz2HV8k79w=;
 b=feWQ64qHIRlq/swv+aqQIVR3cTnrn4HSN0RSmECe0h+fgaJEKBQMCxmJViH/KHputm
 XWt8M6acXuYYohsviXhCudwNtXfajQtESZGMwFM8tfGUydLjIQnsJkdXZZXp/qcU0hAw
 Wj3rWR8l+a+Y/G247CGouSoUXcG5AHy5DdDhQmgB03fM/RRp1deAldKvN8KiFwkNRSx7
 toUAzkQvxy8+/mJM7Rkav7ogwIFf8XXWsdRjBqOsZMafsHevYhBTPp3tWZfk2j8VmQ5P
 Qeom0p40HjVkln2WJf37R/2+Qi+1gAAjsb2owRXUcthcY9pvoZVwpyj2ATEK7J5p1HPt
 PoVw==
MIME-Version: 1.0
X-Received: by 10.180.79.228 with SMTP id m4mr2483956wix.26.1413793500710;
 Mon, 20 Oct 2014 01:25:00 -0700 (PDT)
Received: by 10.217.115.5 with HTTP; Mon, 20 Oct 2014 01:25:00 -0700 (PDT)
In-Reply-To: <CAG-KTt86Xoa6TG0ohXwCcWJ8+C+-Fkv_OCCqyOrSB4M8DyowiQ@mail.gmail.com>
References: <CAG-KTt9684d_SCqp_MtaGSuqAhnZ0mNSmGwdw7LQZm_81ShnRQ@mail.gmail.com>
 <1B1F99FDB4384237A2DC7B1F4C87E4E2@erratique.ch>
 <CAG-KTt9yHoZiAwiJ-vMmSHt5LMTOhHX3rCjv2FTrvzuEd-YTZw@mail.gmail.com>
 <B36B4944FE38422AB6DD2EAF2F50CE64@erratique.ch>
 <CAG-KTt86Xoa6TG0ohXwCcWJ8+C+-Fkv_OCCqyOrSB4M8DyowiQ@mail.gmail.com>
Date: Mon, 20 Oct 2014 09:25:00 +0100
Message-ID: <CAAxsn=FPsO2QHVLzNJ09cuLaut-AgsTaXzS0G98j6Nxgn5isAA@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Trevor Smith <trevorsummerssmith@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Defines,
	and Structs with platform-specific fields
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 20 Oct 2014 07:45:54 -0000

On 18 October 2014 12:49, Trevor Smith <trevorsummerssmith@gmail.com> wrote:
> Your suggestion makes sense. If I were to do that -- any suggestions of how
> to deal with freeing that memory? Ideally, without adding a lifecycle "free"
> call to the user library. My thoughts would be to store the cstruct
> reference (malloced by C) in a ref in OCaml, then attach a finalizer to the
> OCaml ref that would call the corresponding C free.

That approach should work, I think.

Another possibility to allocate the struct using Ctypes.allocate or
Ctypes.allocate_n -- e.g. by allocating an array of char and coercing
the result:

    val allocate : ?finalise:('a ptr -> unit) -> 'a typ -> 'a -> 'a ptr
    http://ocamllabs.github.io/ocaml-ctypes/Ctypes.html#VALallocate

    val allocate_n : ?finalise:('a ptr -> unit) -> 'a typ -> count:int -> 'a ptr
    http://ocamllabs.github.io/ocaml-ctypes/Ctypes.html#VALallocate_n

    val coerce : 'a typ -> 'b typ -> 'a -> 'b
    http://ocamllabs.github.io/ocaml-ctypes/Ctypes.html#VALcoerce

The memory allocated by 'allocate' will be freed automatically when
there are no OCaml references to the object.  The optional 'finalise'
argument is for associating additional cleanup functions, not for
freeing the memory.  You may be able to use it to call uv_loop_close,
for example.

> Aside: I wonder if ctypes could be extended to deal with this cross platform
> issue fully in ctypes-land? Have others thought about this?

Yes: we're planning to add support for obtaining struct layout from C,
much as generated functions stubs are checked against C declarations:

    https://github.com/ocamllabs/ocaml-ctypes/issues/62

The feature is taking a little while longer than anticipated to land,
unfortunately.

> Also: are the maintainers open to documentation contributions? I noticed
> that a lot of these questions on the FAQ are currently unanswered. I would
> be happy to throw a couple commits with documentation suggestions for the
> problems that I am running into.

Yes: documentation contributions are very welcome.

From yallop@gmail.com  Mon Oct 20 10:05:38 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 3172C3C0B1
 for <ctypes@lists.ocaml.org>; Mon, 20 Oct 2014 10:05:38 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1632884 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.43 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wg0-f43.google.com ([74.125.82.43]:59550)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1Xg9W8-0003Nr-kx (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Mon, 20 Oct 2014 10:44:45 +0100
Received: by mail-wg0-f43.google.com with SMTP id m15so5002917wgh.14
 for <ctypes@lists.ocaml.org>; Mon, 20 Oct 2014 02:44:44 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=cJm8gv5TwCrlc9W177FM5deFY2lWVrLYe1l8tTxSEXE=;
 b=Jwdl4jdBqjlgetMqGe8u9Z22wJqeEbGsmRSmN3StG71EJL6DOO0655fc5Q5LgNn1pY
 N8F+2eSC9GODz+oEZg3AhiDwgv5ybwmCrlkbnA8J2C1syj3JPbkUn84eVfCfWPC30KZW
 SfKs111DSuUhLp4e8drOzZAzcRtN1nNJljDGVmnCzFuilOiKooxR5qYXs8eQq5J5aHcc
 ZPanbzQ0CSrqJEjjbRO7cfl5Kcv2cNdIW9oI6sJYZiqtjmrEJkdieRybJoheiEBYu8He
 Vl7wau45eO2VmLy4qNf6anafPxfJZmWjrddptR1bZMgdcyY13++dlwmsX85O+tCyrmTx
 FLdg==
MIME-Version: 1.0
X-Received: by 10.194.90.15 with SMTP id bs15mr30964575wjb.47.1413798284086;
 Mon, 20 Oct 2014 02:44:44 -0700 (PDT)
Received: by 10.217.115.5 with HTTP; Mon, 20 Oct 2014 02:44:44 -0700 (PDT)
In-Reply-To: <CAK7rcp8PgQzdu4ZDRGaqutzvYqCdyR0wE_APQTTrmj7iS=kyEw@mail.gmail.com>
References: <CAK7rcp-tsu08M3vOVEDhB5EnUBR29PTVdwmrgR-i3KTMe6jnJQ@mail.gmail.com>
 <CAK7rcp--ebebx=6fT1P-2LLhsc+JxngYaySDU-2UqTGC90-W0A@mail.gmail.com>
 <A3165F85-CD87-4C67-90D9-4695A7A8BA75@x9c.fr>
 <CAK7rcp8PgQzdu4ZDRGaqutzvYqCdyR0wE_APQTTrmj7iS=kyEw@mail.gmail.com>
Date: Mon, 20 Oct 2014 10:44:44 +0100
Message-ID: <CAAxsn=EO-ZfK03+i2s5DQRfmLv0OK4SbhJyiDVyrvSLb8Zkp6A@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Kenneth Adam Miller <kennethadammiller@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes@lists.ocaml.org, caml-list@inria.fr
Subject: Re: [ocaml-ctypes] [Caml-list] Library recompilation with OCamljava
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 20 Oct 2014 09:05:38 -0000

[+cc ctypes@lists.ocaml.org]

On Sat, Oct 18, 2014 at 5:09 AM, forum@x9c.fr <forum@x9c.fr> wrote:
>> I think a neat way to use a C library from an ocamljava-compiled
>> program would be to have a Java "backend" for Jeremy Yallop's
>> ctypes (https://github.com/ocamllabs/ocaml-ctypes).  I never had
>> the time to implement that, but toyed with this idea and think the
>> best way to implement it would be to go through JNA
>> (https://github.com/twall/jna) rather than JNI.  JNA includes a
>> "dlopen"-like mechanism, and automatically maps simple types from
>> Java to C. My knowledge of ctypes is quite limited, but I see no
>> showstopper.

On 18/10/2014, Kenneth Adam Miller <kennethadammiller@gmail.com> wrote:
> Precisely! ocaml-ctypes is exactly what's being used by the library
> that I'm porting to call into C sub libraries. It would be really
> sweet if the ocamljava compiler could detect the ocaml-ctypes and
> generate these mappings automatically. This would eliminate a lot of
> error prone code, since C code tends to interpret data raw at some
> point... How might I got about writing this to boot? I'm moderately
> new to ocaml, lacking deep expertise in it, but I'm an aggressive
> learner. Please explain the best path forward, I want to create a
> robust and reusable solution.

OCaml-Java support is on the wish list for ctypes

    https://github.com/ocamllabs/ocaml-ctypes/issues/13

but we don't have the resources to implement it at present.  Adding
support would mostly likely only involve changing ctypes itself, not
OCaml-Java, and is likely to involve writing OCaml-Java
implementations of the following components:

  (1) memory access, i.e. functions for allocating blocks, for reading
and writing scalar values to arbitrary addresses, and for viewing C
objects as bigarrays:
     https://github.com/ocamllabs/ocaml-ctypes/blob/master/src/ctypes/memory_stubs.ml
     https://github.com/ocamllabs/ocaml-ctypes/blob/master/src/ctypes/bigarray_stubs.ml

  (2) functions for printing primitive (scalar) values:
     https://github.com/ocamllabs/ocaml-ctypes/blob/master/src/ctypes/value_printing_stubs.ml

  (3) implementations of signed and unsigned integer types of various sizes:
     https://github.com/ocamllabs/ocaml-ctypes/blob/master/src/ctypes/signed.ml
     https://github.com/ocamllabs/ocaml-ctypes/blob/master/src/ctypes/unsigned.ml

  (4) functions for converting between OCaml and C string representations
     https://github.com/ocamllabs/ocaml-ctypes/blob/master/src/ctypes/std_view_stubs.ml

plus one of the following approaches for calling functions

  (a) a "dynamic" approach, which resolves symbols and constructs call
frames at runtime, like the ctypes Foreign module.  This involves two
components: a dynamic loading interface along the
      following lines
      https://github.com/ocamllabs/ocaml-ctypes/blob/master/src/ctypes-foreign-base/dl.mli
      and primitives for dynamically constructing and making calls:
      https://github.com/ocamllabs/ocaml-ctypes/blob/master/src/ctypes-foreign-base/ffi_stubs.ml

  (b) a "static" approach, which generates code to be compiled by the
standard toolchain:
      https://github.com/ocamllabs/ocaml-ctypes/blob/master/src/cstubs/cstubs.mli

Note that most of the links above are to internal Ctypes modules, not
to the interface, which I'd expect to remain largely unchanged.

As Xavier suggests, JNA may be a good starting point for some or all
of the above.  If someone would like to look at adding OCaml-Java
support, please feel free to ask questions, either on the GitHub issue
tracker, or on the ctypes mailing list.

Jeremy.

From hez@0ok.org  Mon Oct 20 11:00:28 2014
Return-Path: <hez@0ok.org>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 45C503C0B1
 for <ctypes@lists.ocaml.org>; Mon, 20 Oct 2014 11:00:28 +0100 (BST)
X-Cam-SpamDetails: score 0.1 from SpamAssassin-3.3.2-1632884 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [69.163.253.135 listed in list.dnswl.dnsbl.ja.net]
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from sub4.mail.dreamhost.com ([69.163.253.135]:55718
 helo=homiemail-a96.g.dreamhost.com)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtp id 1XgAN8-0002lk-EF (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <hez@0ok.org>); Mon, 20 Oct 2014 11:39:35 +0100
Received: from homiemail-a96.g.dreamhost.com (localhost [127.0.0.1])
 by homiemail-a96.g.dreamhost.com (Postfix) with ESMTP id 40C123B8069
 for <ctypes@lists.ocaml.org>; Mon, 20 Oct 2014 03:39:29 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha1; c=relaxed; d=0ok.org; h=mime-version
 :in-reply-to:references:from:date:message-id:subject:to:cc:
 content-type; s=0ok.org; bh=l+S1nYDPNKVUNDpxe9aHhbGS2vQ=; b=hQsx
 1dwPwHajTdd2iJMWLG/nXGILTe9O3NvSeVtXBdWMz63eOyyko9QAJB50U60XNGfX
 9H62nF3d1wixcr0rjlt1e8OymczimikZjCb4OUyar1b7EW+R0boJkLHQfP5/Vr6f
 WMJFF94BzcDc+8vZGrbJVJLkLcbKqw0VhyF2cJE=
Received: from mail-lb0-f179.google.com (mail-lb0-f179.google.com
 [209.85.217.179]) (using TLSv1 with cipher RC4-SHA (128/128 bits))
 (No client certificate requested) (Authenticated sender: hez@0ok.org)
 by homiemail-a96.g.dreamhost.com (Postfix) with ESMTPSA id D26BF3B805B
 for <ctypes@lists.ocaml.org>; Mon, 20 Oct 2014 03:39:28 -0700 (PDT)
Received: by mail-lb0-f179.google.com with SMTP id l4so3584014lbv.24
 for <ctypes@lists.ocaml.org>; Mon, 20 Oct 2014 03:39:26 -0700 (PDT)
X-Gm-Message-State: ALoCoQkO0uM08LaODbWHuYq1ibCn4fwuxxY1w7g+lG1aCFMGlRjreVhDxJiP6RjNcGZhhH9JmaP2
X-Received: by 10.112.167.38 with SMTP id zl6mr26394711lbb.34.1413801566558;
 Mon, 20 Oct 2014 03:39:26 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.25.148.212 with HTTP; Mon, 20 Oct 2014 03:39:06 -0700 (PDT)
In-Reply-To: <CAAxsn=G9T=rHGtZLwNHz4W_VYWg=KywdJTGkB+feWqA7-bCPUA@mail.gmail.com>
References: <CAMfPyLBzmU=PnN+83hQ94BZSM2_ujUGSMMgG_7SvkKKBi6uJ-g@mail.gmail.com>
 <CAAxsn=G9T=rHGtZLwNHz4W_VYWg=KywdJTGkB+feWqA7-bCPUA@mail.gmail.com>
From: "Hezekiah M. Carty" <hez@0ok.org>
Date: Mon, 20 Oct 2014 06:39:06 -0400
Message-ID: <CAMfPyLCRpBJsczxSJjRiuYdMgcnYYvt9AxfyZkiw7mNgaaXwhQ@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Binding that works in bytecode,
 segfaults in native code
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 20 Oct 2014 10:00:28 -0000

On Tue, Oct 14, 2014 at 7:09 AM, Jeremy Yallop <yallop@gmail.com> wrote:
> On 8 October 2014 14:19, Hezekiah M. Carty <hez@0ok.org> wrote:
>> In the mean time are there any suggestions or techniques you can recommend to
>> help track down the cause of this segfault?
>
> I think A. Hauptmann's advice elsewhere is worth repeating here, for
> the benefit of anyone who runs into similar issues:
>
>     "Use Gc.compact, not just Gc.full_major. And put it in a often
> called function of your library code, not only at application level. I
> always overlay any suspicious function with a wrapper of this scheme:
>
>      let f .. =
>        Gc.compact ();
>        let x = f .. in
>        Gc.compact ();
>        x
>
>     And then run your application with valgrind. Valgrind did find
> this error instantly."
>     (https://github.com/hcarty/ocaml-gdal/pull/3)

To follow up on the specifics for this case: A finalization/free
function provided by GDAL was freeing memory I had allocated from
ctypes leading to a double free.  As A. Hauptmann pointed out in the
pull request link above, valgrind picked up the mistake and its source
immediately.  For this crash removing the GDAL-provided finalization
function was enough to avoid the issue - OCaml + ctypes were already
freeing everything the finalizer would have freed.

I'm rather embarrassed that I didn't use valgrind in the first place.
Thanks to A Hauptmann for getting me back on track with these
bindings.

Hez

From trevorsummerssmith@gmail.com  Mon Oct 20 11:50:35 2014
Return-Path: <trevorsummerssmith@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 8E4F93C0B1
 for <ctypes@lists.ocaml.org>; Mon, 20 Oct 2014 11:50:35 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1632884 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.214.174 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (trevorsummerssmith[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-ob0-f174.google.com ([209.85.214.174]:44094)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XgB9h-0000aA-sS (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <trevorsummerssmith@gmail.com>); Mon, 20 Oct 2014 12:29:42 +0100
Received: by mail-ob0-f174.google.com with SMTP id wp18so3579652obc.5
 for <ctypes@lists.ocaml.org>; Mon, 20 Oct 2014 04:29:40 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=VoK75ADeXdm0ncH4NUCq3g6dqp90QgIWpeeyKFijh2c=;
 b=YT6KdcvyvsnI5d0Vw3O1KgwAqjRKktfjzWaO1i7t99K2gtxg0Fkkh/dwlLoRVYpbrB
 QJJZLwgpnQQiUvI4RyrIsTSGmagDdzyhAhww69R1COCh2V5Ogkd82WJKxVNDy9BHctoY
 kXYF9pFzXSc2+1ZUL7zudOM+hIFAzPh8iK3kPSKMPnB4MX1xUjwFlppK17J+1asseQ7U
 PPJGUUwJOpOfM8PKkH+USTwntamN5XSksZN0jJhYS1+vMwcnFpnKurd+215Nr4FqYs2Q
 KxOY8Y9Wh3+lp+d9uBypbkHSOsBPg4x2E+SROFeCZ8MSAs/dMh9qqCSncY4U+OHlyODR
 J1qA==
MIME-Version: 1.0
X-Received: by 10.202.60.3 with SMTP id j3mr1475117oia.62.1413804580357; Mon,
 20 Oct 2014 04:29:40 -0700 (PDT)
Received: by 10.182.174.5 with HTTP; Mon, 20 Oct 2014 04:29:40 -0700 (PDT)
In-Reply-To: <CAAxsn=FPsO2QHVLzNJ09cuLaut-AgsTaXzS0G98j6Nxgn5isAA@mail.gmail.com>
References: <CAG-KTt9684d_SCqp_MtaGSuqAhnZ0mNSmGwdw7LQZm_81ShnRQ@mail.gmail.com>
 <1B1F99FDB4384237A2DC7B1F4C87E4E2@erratique.ch>
 <CAG-KTt9yHoZiAwiJ-vMmSHt5LMTOhHX3rCjv2FTrvzuEd-YTZw@mail.gmail.com>
 <B36B4944FE38422AB6DD2EAF2F50CE64@erratique.ch>
 <CAG-KTt86Xoa6TG0ohXwCcWJ8+C+-Fkv_OCCqyOrSB4M8DyowiQ@mail.gmail.com>
 <CAAxsn=FPsO2QHVLzNJ09cuLaut-AgsTaXzS0G98j6Nxgn5isAA@mail.gmail.com>
Date: Mon, 20 Oct 2014 07:29:40 -0400
Message-ID: <CAG-KTt_N653_=hG1bj3LENXA8fYbS=9mfi49Sr8y4-rmi9vqPQ@mail.gmail.com>
From: Trevor Smith <trevorsummerssmith@gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Content-Type: multipart/alternative; boundary=001a113cd1a2cb4d290505d9079d
Cc: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Defines,
	and Structs with platform-specific fields
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 20 Oct 2014 10:50:35 -0000

--001a113cd1a2cb4d290505d9079d
Content-Type: text/plain; charset=UTF-8

Jeremy,

The allocate/coerce idea sounds great, however that won't play nicely with
my cross-platform needs... (unless I am misunderstanding something).

Do you have a vague-eta for the struct-layout-from-C-work? Depending on the
timeline, perhaps it is better for me to finish up the library for unix
then deal with porting it after that feature is ready.

Thank you.

Trevor

On Mon, Oct 20, 2014 at 4:25 AM, Jeremy Yallop <yallop@gmail.com> wrote:

> On 18 October 2014 12:49, Trevor Smith <trevorsummerssmith@gmail.com>
> wrote:
> > Your suggestion makes sense. If I were to do that -- any suggestions of
> how
> > to deal with freeing that memory? Ideally, without adding a lifecycle
> "free"
> > call to the user library. My thoughts would be to store the cstruct
> > reference (malloced by C) in a ref in OCaml, then attach a finalizer to
> the
> > OCaml ref that would call the corresponding C free.
>
> That approach should work, I think.
>
> Another possibility to allocate the struct using Ctypes.allocate or
> Ctypes.allocate_n -- e.g. by allocating an array of char and coercing
> the result:
>
>     val allocate : ?finalise:('a ptr -> unit) -> 'a typ -> 'a -> 'a ptr
>     http://ocamllabs.github.io/ocaml-ctypes/Ctypes.html#VALallocate
>
>     val allocate_n : ?finalise:('a ptr -> unit) -> 'a typ -> count:int ->
> 'a ptr
>     http://ocamllabs.github.io/ocaml-ctypes/Ctypes.html#VALallocate_n
>
>     val coerce : 'a typ -> 'b typ -> 'a -> 'b
>     http://ocamllabs.github.io/ocaml-ctypes/Ctypes.html#VALcoerce
>
> The memory allocated by 'allocate' will be freed automatically when
> there are no OCaml references to the object.  The optional 'finalise'
> argument is for associating additional cleanup functions, not for
> freeing the memory.  You may be able to use it to call uv_loop_close,
> for example.
>
> > Aside: I wonder if ctypes could be extended to deal with this cross
> platform
> > issue fully in ctypes-land? Have others thought about this?
>
> Yes: we're planning to add support for obtaining struct layout from C,
> much as generated functions stubs are checked against C declarations:
>
>     https://github.com/ocamllabs/ocaml-ctypes/issues/62
>
> The feature is taking a little while longer than anticipated to land,
> unfortunately.
>
> > Also: are the maintainers open to documentation contributions? I noticed
> > that a lot of these questions on the FAQ are currently unanswered. I
> would
> > be happy to throw a couple commits with documentation suggestions for the
> > problems that I am running into.
>
> Yes: documentation contributions are very welcome.
>

--001a113cd1a2cb4d290505d9079d
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Jeremy,<div><br></div><div>The allocate/coerce idea sounds=
 great, however that won&#39;t play nicely with my cross-platform needs... =
(unless I am misunderstanding something).</div><div><br></div><div>Do you h=
ave a vague-eta for the struct-layout-from-C-work? Depending on the timelin=
e, perhaps it is better for me to finish up the library for unix then deal =
with porting it after that feature is ready.</div><div><br></div><div>Thank=
 you.</div><div><br></div><div>Trevor</div></div><div class=3D"gmail_extra"=
><br><div class=3D"gmail_quote">On Mon, Oct 20, 2014 at 4:25 AM, Jeremy Yal=
lop <span dir=3D"ltr">&lt;<a href=3D"mailto:yallop@gmail.com" target=3D"_bl=
ank">yallop@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_q=
uote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1e=
x"><span class=3D"">On 18 October 2014 12:49, Trevor Smith &lt;<a href=3D"m=
ailto:trevorsummerssmith@gmail.com">trevorsummerssmith@gmail.com</a>&gt; wr=
ote:<br>
&gt; Your suggestion makes sense. If I were to do that -- any suggestions o=
f how<br>
&gt; to deal with freeing that memory? Ideally, without adding a lifecycle =
&quot;free&quot;<br>
&gt; call to the user library. My thoughts would be to store the cstruct<br=
>
&gt; reference (malloced by C) in a ref in OCaml, then attach a finalizer t=
o the<br>
&gt; OCaml ref that would call the corresponding C free.<br>
<br>
</span>That approach should work, I think.<br>
<br>
Another possibility to allocate the struct using Ctypes.allocate or<br>
Ctypes.allocate_n -- e.g. by allocating an array of char and coercing<br>
the result:<br>
<br>
=C2=A0 =C2=A0 val allocate : ?finalise:(&#39;a ptr -&gt; unit) -&gt; &#39;a=
 typ -&gt; &#39;a -&gt; &#39;a ptr<br>
=C2=A0 =C2=A0 <a href=3D"http://ocamllabs.github.io/ocaml-ctypes/Ctypes.htm=
l#VALallocate" target=3D"_blank">http://ocamllabs.github.io/ocaml-ctypes/Ct=
ypes.html#VALallocate</a><br>
<br>
=C2=A0 =C2=A0 val allocate_n : ?finalise:(&#39;a ptr -&gt; unit) -&gt; &#39=
;a typ -&gt; count:int -&gt; &#39;a ptr<br>
=C2=A0 =C2=A0 <a href=3D"http://ocamllabs.github.io/ocaml-ctypes/Ctypes.htm=
l#VALallocate_n" target=3D"_blank">http://ocamllabs.github.io/ocaml-ctypes/=
Ctypes.html#VALallocate_n</a><br>
<br>
=C2=A0 =C2=A0 val coerce : &#39;a typ -&gt; &#39;b typ -&gt; &#39;a -&gt; &=
#39;b<br>
=C2=A0 =C2=A0 <a href=3D"http://ocamllabs.github.io/ocaml-ctypes/Ctypes.htm=
l#VALcoerce" target=3D"_blank">http://ocamllabs.github.io/ocaml-ctypes/Ctyp=
es.html#VALcoerce</a><br>
<br>
The memory allocated by &#39;allocate&#39; will be freed automatically when=
<br>
there are no OCaml references to the object.=C2=A0 The optional &#39;finali=
se&#39;<br>
argument is for associating additional cleanup functions, not for<br>
freeing the memory.=C2=A0 You may be able to use it to call uv_loop_close,<=
br>
for example.<br>
<span class=3D""><br>
&gt; Aside: I wonder if ctypes could be extended to deal with this cross pl=
atform<br>
&gt; issue fully in ctypes-land? Have others thought about this?<br>
<br>
</span>Yes: we&#39;re planning to add support for obtaining struct layout f=
rom C,<br>
much as generated functions stubs are checked against C declarations:<br>
<br>
=C2=A0 =C2=A0 <a href=3D"https://github.com/ocamllabs/ocaml-ctypes/issues/6=
2" target=3D"_blank">https://github.com/ocamllabs/ocaml-ctypes/issues/62</a=
><br>
<br>
The feature is taking a little while longer than anticipated to land,<br>
unfortunately.<br>
<span class=3D""><br>
&gt; Also: are the maintainers open to documentation contributions? I notic=
ed<br>
&gt; that a lot of these questions on the FAQ are currently unanswered. I w=
ould<br>
&gt; be happy to throw a couple commits with documentation suggestions for =
the<br>
&gt; problems that I am running into.<br>
<br>
</span>Yes: documentation contributions are very welcome.<br>
</blockquote></div><br></div>

--001a113cd1a2cb4d290505d9079d--

From daniel.buenzli@erratique.ch  Mon Oct 20 11:55:02 2014
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 8ED4F3C0B1
 for <ctypes@lists.ocaml.org>; Mon, 20 Oct 2014 11:55:02 +0100 (BST)
X-Cam-SpamScore: ss
X-Cam-SpamDetails: score 2.7 from SpamAssassin-3.3.2-1632884 
 *  2.7 RCVD_IN_PSBL RBL: Received via a relay in PSBL
 *      [74.55.86.74 listed in psbl.surriel.com]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:50370
 helo=smtp.webfaction.com)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtp id 1XgBE0-0005e3-D2 (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Mon, 20 Oct 2014 12:34:09 +0100
Received: from [172.20.10.2] (22-225.197-178.cust.bluewin.ch [178.197.225.22])
 by smtp.webfaction.com (Postfix) with ESMTP id 7613F22CEF67;
 Mon, 20 Oct 2014 11:34:06 +0000 (UTC)
Date: Mon, 20 Oct 2014 13:34:03 +0200
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Trevor Smith <trevorsummerssmith@gmail.com>
Message-ID: <5A4C5CC8DE874B259CD0BFDE48DB80A3@erratique.ch>
In-Reply-To: <CAG-KTt_N653_=hG1bj3LENXA8fYbS=9mfi49Sr8y4-rmi9vqPQ@mail.gmail.com>
References: <CAG-KTt9684d_SCqp_MtaGSuqAhnZ0mNSmGwdw7LQZm_81ShnRQ@mail.gmail.com>
 <1B1F99FDB4384237A2DC7B1F4C87E4E2@erratique.ch>
 <CAG-KTt9yHoZiAwiJ-vMmSHt5LMTOhHX3rCjv2FTrvzuEd-YTZw@mail.gmail.com>
 <B36B4944FE38422AB6DD2EAF2F50CE64@erratique.ch>
 <CAG-KTt86Xoa6TG0ohXwCcWJ8+C+-Fkv_OCCqyOrSB4M8DyowiQ@mail.gmail.com>
 <CAAxsn=FPsO2QHVLzNJ09cuLaut-AgsTaXzS0G98j6Nxgn5isAA@mail.gmail.com>
 <CAG-KTt_N653_=hG1bj3LENXA8fYbS=9mfi49Sr8y4-rmi9vqPQ@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Cc: "=?utf-8?Q?ctypes=40lists.ocaml.org?=" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Defines,
 and Structs with platform-specific fields
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 20 Oct 2014 10:55:02 -0000



Le lundi, 20 octobre 2014 =C3=A0 13:29, Trevor Smith a =C3=A9crit :

> Jeremy,
> =20
> The allocate/coerce idea sounds great, however that won't play nicely w=
ith my cross-platform needs... (unless I am misunderstanding something).
If you are talking about the size of the struct, just write it with the =23=
define constants and/or make a function that returns the size of the stru=
ct. With that number you can then follow Jeremy's proposal. =20

Daniel



From trevorsummerssmith@gmail.com  Mon Oct 20 11:58:31 2014
Return-Path: <trevorsummerssmith@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id AA3003C0B1
 for <ctypes@lists.ocaml.org>; Mon, 20 Oct 2014 11:58:31 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1632884 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.214.182 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (trevorsummerssmith[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-ob0-f182.google.com ([209.85.214.182]:57410)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XgBHO-00030C-rN (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <trevorsummerssmith@gmail.com>); Mon, 20 Oct 2014 12:37:38 +0100
Received: by mail-ob0-f182.google.com with SMTP id uy5so3661943obc.13
 for <ctypes@lists.ocaml.org>; Mon, 20 Oct 2014 04:37:37 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=eX7ARz6HYtOXzCcGy5nPvD9ov+dbLBcWPe62O2f3l+w=;
 b=G3muOA3ptzjsNELtAR53czbIGllj0ieQ0aq363+GAegYCFNddeszeegtPXhhFGBoTR
 KLF0WNEmsvxJTg9pq4+s0PEuKyZqBnklkz3QkMLNB509s8VVmXaDhxK5ZxpRZfy7WT/D
 hxF+Yxf+5pVHNbFh1JKWSzTX+CAhi+o7EBPcaUZQyolppkypU1rTQQmnaWxKRh5STR4g
 hP35Y5FC3Sx3rHZVMmqBGOmtv1lwen17yxnTuW0/MkgbsdbgVwkvov37JDKigkvq+WJA
 SBkwODcI/op1nN6ksmDFEoXLzXvTS2/Fp7FHcKJAk1iFtmVStRQpwA/zES8qYz98/nmH
 Urzw==
MIME-Version: 1.0
X-Received: by 10.202.69.134 with SMTP id s128mr21688733oia.18.1413805057392; 
 Mon, 20 Oct 2014 04:37:37 -0700 (PDT)
Received: by 10.182.174.5 with HTTP; Mon, 20 Oct 2014 04:37:37 -0700 (PDT)
In-Reply-To: <5A4C5CC8DE874B259CD0BFDE48DB80A3@erratique.ch>
References: <CAG-KTt9684d_SCqp_MtaGSuqAhnZ0mNSmGwdw7LQZm_81ShnRQ@mail.gmail.com>
 <1B1F99FDB4384237A2DC7B1F4C87E4E2@erratique.ch>
 <CAG-KTt9yHoZiAwiJ-vMmSHt5LMTOhHX3rCjv2FTrvzuEd-YTZw@mail.gmail.com>
 <B36B4944FE38422AB6DD2EAF2F50CE64@erratique.ch>
 <CAG-KTt86Xoa6TG0ohXwCcWJ8+C+-Fkv_OCCqyOrSB4M8DyowiQ@mail.gmail.com>
 <CAAxsn=FPsO2QHVLzNJ09cuLaut-AgsTaXzS0G98j6Nxgn5isAA@mail.gmail.com>
 <CAG-KTt_N653_=hG1bj3LENXA8fYbS=9mfi49Sr8y4-rmi9vqPQ@mail.gmail.com>
 <5A4C5CC8DE874B259CD0BFDE48DB80A3@erratique.ch>
Date: Mon, 20 Oct 2014 07:37:37 -0400
Message-ID: <CAG-KTt9yDUrb8K9fXQTojp=TLUxTZWi14KPWMeSx_uuPRq_rWQ@mail.gmail.com>
From: Trevor Smith <trevorsummerssmith@gmail.com>
To: =?UTF-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
Content-Type: multipart/alternative; boundary=001a113dc9a23a47260505d92497
Cc: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Defines,
	and Structs with platform-specific fields
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 20 Oct 2014 10:58:31 -0000

--001a113dc9a23a47260505d92497
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Of course! Thanks Daniel.

On Mon, Oct 20, 2014 at 7:34 AM, Daniel B=C3=BCnzli <daniel.buenzli@erratiq=
ue.ch>
wrote:

>
>
> Le lundi, 20 octobre 2014 =C3=A0 13:29, Trevor Smith a =C3=A9crit :
>
> > Jeremy,
> >
> > The allocate/coerce idea sounds great, however that won't play nicely
> with my cross-platform needs... (unless I am misunderstanding something).
> If you are talking about the size of the struct, just write it with the
> #define constants and/or make a function that returns the size of the
> struct. With that number you can then follow Jeremy's proposal.
>
> Daniel
>
>
>

--001a113dc9a23a47260505d92497
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Of course! Thanks Daniel.</div><div class=3D"gmail_extra">=
<br><div class=3D"gmail_quote">On Mon, Oct 20, 2014 at 7:34 AM, Daniel B=C3=
=BCnzli <span dir=3D"ltr">&lt;<a href=3D"mailto:daniel.buenzli@erratique.ch=
" target=3D"_blank">daniel.buenzli@erratique.ch</a>&gt;</span> wrote:<br><b=
lockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px =
#ccc solid;padding-left:1ex"><br>
<br>
Le lundi, 20 octobre 2014 =C3=A0 13:29, Trevor Smith a =C3=A9crit :<br>
<span class=3D""><br>
&gt; Jeremy,<br>
&gt;<br>
&gt; The allocate/coerce idea sounds great, however that won&#39;t play nic=
ely with my cross-platform needs... (unless I am misunderstanding something=
).<br>
</span>If you are talking about the size of the struct, just write it with =
the #define constants and/or make a function that returns the size of the s=
truct. With that number you can then follow Jeremy&#39;s proposal.<br>
<span class=3D"HOEnZb"><font color=3D"#888888"><br>
Daniel<br>
<br>
<br>
</font></span></blockquote></div><br></div>

--001a113dc9a23a47260505d92497--

From yallop@gmail.com  Mon Oct 20 14:31:37 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id B25473C373
 for <ctypes@lists.ocaml.org>; Mon, 20 Oct 2014 14:31:37 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1632884 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.45 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wg0-f45.google.com ([74.125.82.45]:52817)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XgDfZ-00064n-D1 (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Mon, 20 Oct 2014 15:10:45 +0100
Received: by mail-wg0-f45.google.com with SMTP id m15so5459453wgh.28
 for <ctypes@lists.ocaml.org>; Mon, 20 Oct 2014 07:10:42 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=GB3C6jgJAVNh7EzpNZNcvryvyqSD4A5CSjZi59pCcjc=;
 b=FwLFm/23RaRHZfqAa0kPx1IIuo/bdWtNsbRNe8Vgl+0oLcmIk03f8kAraV/g4iRdkb
 TXHu65jMK1YnaZ+D5Fv6B352wnHo5rZskgXyuoZTJ7wPYkdmMPYMqu2UQE1UMQ9X4jFw
 7jFSpiJ6YSadsEdxkbar74c0ARuYhy8ypgLk/kV8w3INMBDoI48j4MlCQ2qzKxOEzzAU
 D4KKeA5bBFZKZ/pU4YzYvx6oOXj0o8rkjoItXj82gMIU+AJcELySJzNuML4HYZ4xgYI+
 mP8NkkuXQKgkfEhydJ/yjM5TCxmOu1L52ysjNtj3LUAnY0c5lDDtEz6kZ0X22QSjsOZ2
 qvBg==
MIME-Version: 1.0
X-Received: by 10.181.27.197 with SMTP id ji5mr20559910wid.26.1413814242618;
 Mon, 20 Oct 2014 07:10:42 -0700 (PDT)
Received: by 10.217.115.5 with HTTP; Mon, 20 Oct 2014 07:10:42 -0700 (PDT)
In-Reply-To: <CAAxsn=FPsO2QHVLzNJ09cuLaut-AgsTaXzS0G98j6Nxgn5isAA@mail.gmail.com>
References: <CAG-KTt9684d_SCqp_MtaGSuqAhnZ0mNSmGwdw7LQZm_81ShnRQ@mail.gmail.com>
 <1B1F99FDB4384237A2DC7B1F4C87E4E2@erratique.ch>
 <CAG-KTt9yHoZiAwiJ-vMmSHt5LMTOhHX3rCjv2FTrvzuEd-YTZw@mail.gmail.com>
 <B36B4944FE38422AB6DD2EAF2F50CE64@erratique.ch>
 <CAG-KTt86Xoa6TG0ohXwCcWJ8+C+-Fkv_OCCqyOrSB4M8DyowiQ@mail.gmail.com>
 <CAAxsn=FPsO2QHVLzNJ09cuLaut-AgsTaXzS0G98j6Nxgn5isAA@mail.gmail.com>
Date: Mon, 20 Oct 2014 15:10:42 +0100
Message-ID: <CAAxsn=Hp5ZB8dE+wJi1ZMfbPJ_wbL_vFN+-=VXJRs8NhKU3N9g@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Trevor Smith <trevorsummerssmith@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Defines,
	and Structs with platform-specific fields
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 20 Oct 2014 13:31:37 -0000

On 20 October 2014 09:25, Jeremy Yallop <yallop@gmail.com> wrote:
> On 18 October 2014 12:49, Trevor Smith <trevorsummerssmith@gmail.com> wrote:
>> Your suggestion makes sense. If I were to do that -- any suggestions of how
>> to deal with freeing that memory? Ideally, without adding a lifecycle "free"
>> call to the user library. My thoughts would be to store the cstruct
>> reference (malloced by C) in a ref in OCaml, then attach a finalizer to the
>> OCaml ref that would call the corresponding C free.
>
> That approach should work, I think.
>
> Another possibility to allocate the struct using Ctypes.allocate or
> Ctypes.allocate_n

Yet another possibility: you can avoid the need to write C altogether
by defining the public interface as a module type, defining the
platform-specific struct definitions as implementations, and using
first-class modules (or the build system, if you prefer) to pick an
appropriate definition for the platform.

For example, you might define the public interface of the uv_loop_s
structure as follows:

  module type UV_LOOP =
  sig
    type t
    val t : t structure typ

    (* Define the public fields of the struct here *)
    val data : (unit ptr, t structure) field
    val active_handles : (uint, t structure) field
    (* ... other public fields ... *)
  end

This exposes the fact that the underlying type is a structure, and
that data, active_handles etc. are fields, so you can use the various
ctypes functions that deal with structs (make, getf, setf, etc.).

You can then give a platform-specific definition of the struct that
matches the UV_LOOP interface, and includes (but does not expose) the
private fields:

  module Uv_loop_windows : Uv_loop =
  struct
    type t
    let t = structure "uv_loop_s"
    let data = field t "data" (ptr void)
    let active_handles = field t "active_handles" uint
    (* ... other public and private fields ... *)
    let time = field t "time" uint64_t
    let () = seal t
  end

Finally, first-class modules make it possible to pick an appropriate
implementation for the platform:

  module Uv_loop =
   (val if Sys.os_type = "win32"
         then (module Uv_loop_windows : UV_LOOP)
        else if Sys.os_type = "unix"
         then (module Uv_loop_unix : UV_LOOP)
        ...
        else failwith "Unsupported platform")

If you're not keen on first-class modules, an alternative approach is
to simply use an interface file uv.mli and an implementation file
uv.ml which is selected from various platform-specific alternatives
(uv_windows.ml, uv_unix.ml etc.) by the build system.

From daniel.buenzli@erratique.ch  Mon Oct 20 15:01:05 2014
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id E28E43C373
 for <ctypes@lists.ocaml.org>; Mon, 20 Oct 2014 15:01:05 +0100 (BST)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1632884
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:46820
 helo=smtp.webfaction.com)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtp id 1XgE85-0000h8-DM (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Mon, 20 Oct 2014 15:40:13 +0100
Received: from [172.20.10.2] (22-225.197-178.cust.bluewin.ch [178.197.225.22])
 by smtp.webfaction.com (Postfix) with ESMTP id 6513022DB3D7;
 Mon, 20 Oct 2014 14:40:11 +0000 (UTC)
Date: Mon, 20 Oct 2014 16:40:13 +0200
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Jeremy Yallop <yallop@gmail.com>
Message-ID: <673FCD9F382E4A61A547AE5D74100B12@erratique.ch>
In-Reply-To: <CAAxsn=Hp5ZB8dE+wJi1ZMfbPJ_wbL_vFN+-=VXJRs8NhKU3N9g@mail.gmail.com>
References: <CAG-KTt9684d_SCqp_MtaGSuqAhnZ0mNSmGwdw7LQZm_81ShnRQ@mail.gmail.com>
 <1B1F99FDB4384237A2DC7B1F4C87E4E2@erratique.ch>
 <CAG-KTt9yHoZiAwiJ-vMmSHt5LMTOhHX3rCjv2FTrvzuEd-YTZw@mail.gmail.com>
 <B36B4944FE38422AB6DD2EAF2F50CE64@erratique.ch>
 <CAG-KTt86Xoa6TG0ohXwCcWJ8+C+-Fkv_OCCqyOrSB4M8DyowiQ@mail.gmail.com>
 <CAAxsn=FPsO2QHVLzNJ09cuLaut-AgsTaXzS0G98j6Nxgn5isAA@mail.gmail.com>
 <CAAxsn=Hp5ZB8dE+wJi1ZMfbPJ_wbL_vFN+-=VXJRs8NhKU3N9g@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Cc: "=?utf-8?Q?ctypes=40lists.ocaml.org?=" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Defines,
 and Structs with platform-specific fields
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 20 Oct 2014 14:01:06 -0000

Le lundi, 20 octobre 2014 =C3=A0 16:10, Jeremy Yallop a =C3=A9crit :
> Yet another possibility: you can avoid the need to write C altogether
> by defining the public interface as a module type, defining the
> platform-specific struct definitions as implementations, and using
> first-class modules (or the build system, if you prefer) to pick an
> appropriate definition for the platform.

While Jeremy's approach is sound, I would advise against it from a mainte=
nance point of view. =20

These platform specific fields are labelled as *private* fields in the C =
interface which means that each time libuv makes a new release you will h=
ave to manually check that your description of the c struct in your ctype=
s is still accurate. =20

If the libuv project is well managed you can assume public field changes =
will be documented in release notes so you'll be warned when you need to =
do changes. However changes to these privates fields are unlikely to be d=
escribed so it will be more work for you in the long term. =20

Best,

Daniel



From trevorsummerssmith@gmail.com  Mon Oct 20 15:49:37 2014
Return-Path: <trevorsummerssmith@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 837B53C373
 for <ctypes@lists.ocaml.org>; Mon, 20 Oct 2014 15:49:37 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1632884 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.214.173 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (trevorsummerssmith[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-ob0-f173.google.com ([209.85.214.173]:54656)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XgEt2-0001kw-m2 (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <trevorsummerssmith@gmail.com>); Mon, 20 Oct 2014 16:28:45 +0100
Received: by mail-ob0-f173.google.com with SMTP id wp4so4055101obc.32
 for <ctypes@lists.ocaml.org>; Mon, 20 Oct 2014 08:28:43 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=o319Fm1hzKd5ev9sxv6E/Xw7lwrH1152xxYVcv6GDGk=;
 b=Ax8s344DKcFO/yK4WON/oD9NPZJxw4a9hk1rkBjcJRyBCnwD75EqO3Y/HTjqhkbhxz
 sGtao9xH5n0JfEy1iMK5PdqUwKnHpxA5NSMLJoj/5FI1Nmmm17hZhENp67QOGCyAhWOV
 gesKztVWvm3pkmF8/WxTNOBq9iMnw8N+jk+G0sFUtmczzlIy00KG5nc6lOA6AYee3r94
 YLeuqkHrCrooct3IHIQ4frZaPhWjGW8XANFuJ1j/xgT1sjlUBvLXGGWOWyOPODn+SBWW
 XK9O09VNr6JTn+JdUAZacDrMlor0tICD/zhz0aGfv/xO+mQb0OV2Dq+DLqXRw6s9TxXT
 w9vQ==
MIME-Version: 1.0
X-Received: by 10.202.90.68 with SMTP id o65mr794203oib.124.1413818923186;
 Mon, 20 Oct 2014 08:28:43 -0700 (PDT)
Received: by 10.182.174.5 with HTTP; Mon, 20 Oct 2014 08:28:43 -0700 (PDT)
In-Reply-To: <673FCD9F382E4A61A547AE5D74100B12@erratique.ch>
References: <CAG-KTt9684d_SCqp_MtaGSuqAhnZ0mNSmGwdw7LQZm_81ShnRQ@mail.gmail.com>
 <1B1F99FDB4384237A2DC7B1F4C87E4E2@erratique.ch>
 <CAG-KTt9yHoZiAwiJ-vMmSHt5LMTOhHX3rCjv2FTrvzuEd-YTZw@mail.gmail.com>
 <B36B4944FE38422AB6DD2EAF2F50CE64@erratique.ch>
 <CAG-KTt86Xoa6TG0ohXwCcWJ8+C+-Fkv_OCCqyOrSB4M8DyowiQ@mail.gmail.com>
 <CAAxsn=FPsO2QHVLzNJ09cuLaut-AgsTaXzS0G98j6Nxgn5isAA@mail.gmail.com>
 <CAAxsn=Hp5ZB8dE+wJi1ZMfbPJ_wbL_vFN+-=VXJRs8NhKU3N9g@mail.gmail.com>
 <673FCD9F382E4A61A547AE5D74100B12@erratique.ch>
Date: Mon, 20 Oct 2014 11:28:43 -0400
Message-ID: <CAG-KTt8xjcYZ877-_oSVepgAqAfFq7g8zLtcM8BZDRB=oTtfSQ@mail.gmail.com>
From: Trevor Smith <trevorsummerssmith@gmail.com>
To: =?UTF-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
Content-Type: multipart/alternative; boundary=001a113d5692b181250505dc5e0d
Cc: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Defines,
	and Structs with platform-specific fields
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 20 Oct 2014 14:49:37 -0000

--001a113d5692b181250505dc5e0d
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Jeremy -- I like the functor idea + first class modules: it is elegant.
However I agree with Daniel's point about maintainability.

If I use the allocate w/ a c function that returns the size of the struct I
will be good to go. Then have ctypes reference public fields and make
strong wording in the implementation to never allocate a ctype struct using
make. I think this is a solid plan.

Thanks for all of the help!

Trevor

On Mon, Oct 20, 2014 at 10:40 AM, Daniel B=C3=BCnzli <daniel.buenzli@errati=
que.ch
> wrote:

> Le lundi, 20 octobre 2014 =C3=A0 16:10, Jeremy Yallop a =C3=A9crit :
> > Yet another possibility: you can avoid the need to write C altogether
> > by defining the public interface as a module type, defining the
> > platform-specific struct definitions as implementations, and using
> > first-class modules (or the build system, if you prefer) to pick an
> > appropriate definition for the platform.
>
> While Jeremy's approach is sound, I would advise against it from a
> maintenance point of view.
>
> These platform specific fields are labelled as *private* fields in the C
> interface which means that each time libuv makes a new release you will
> have to manually check that your description of the c struct in your ctyp=
es
> is still accurate.
>
> If the libuv project is well managed you can assume public field changes
> will be documented in release notes so you'll be warned when you need to =
do
> changes. However changes to these privates fields are unlikely to be
> described so it will be more work for you in the long term.
>
> Best,
>
> Daniel
>
>
>

--001a113d5692b181250505dc5e0d
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Jeremy -- I like the functor idea + first class modules: i=
t is elegant. However I agree with Daniel&#39;s point about maintainability=
.<div><br></div><div>If I use the allocate w/ a c function that returns the=
 size of the struct I will be good to go. Then have ctypes reference public=
 fields and make strong wording in the implementation to never allocate a c=
type struct using make. I think this is a solid plan.</div><div><br></div><=
div>Thanks for all of the help!</div><div><br></div><div>Trevor</div></div>=
<div class=3D"gmail_extra"><br><div class=3D"gmail_quote">On Mon, Oct 20, 2=
014 at 10:40 AM, Daniel B=C3=BCnzli <span dir=3D"ltr">&lt;<a href=3D"mailto=
:daniel.buenzli@erratique.ch" target=3D"_blank">daniel.buenzli@erratique.ch=
</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin=
:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">Le lundi, 20 octob=
re 2014 =C3=A0 16:10, Jeremy Yallop a =C3=A9crit :<br>
<span class=3D"">&gt; Yet another possibility: you can avoid the need to wr=
ite C altogether<br>
&gt; by defining the public interface as a module type, defining the<br>
&gt; platform-specific struct definitions as implementations, and using<br>
&gt; first-class modules (or the build system, if you prefer) to pick an<br=
>
&gt; appropriate definition for the platform.<br>
<br>
</span>While Jeremy&#39;s approach is sound, I would advise against it from=
 a maintenance point of view.<br>
<br>
These platform specific fields are labelled as *private* fields in the C in=
terface which means that each time libuv makes a new release you will have =
to manually check that your description of the c struct in your ctypes is s=
till accurate.<br>
<br>
If the libuv project is well managed you can assume public field changes wi=
ll be documented in release notes so you&#39;ll be warned when you need to =
do changes. However changes to these privates fields are unlikely to be des=
cribed so it will be more work for you in the long term.<br>
<br>
Best,<br>
<br>
Daniel<br>
<br>
<br>
</blockquote></div><br></div>

--001a113d5692b181250505dc5e0d--

From daniel.buenzli@erratique.ch  Mon Oct 20 16:08:44 2014
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id A71BC3C373
 for <ctypes@lists.ocaml.org>; Mon, 20 Oct 2014 16:08:44 +0100 (BST)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1632884
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:36212
 helo=smtp.webfaction.com)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1XgFBU-0005CX-m4 (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Mon, 20 Oct 2014 16:47:52 +0100
Received: from [172.20.10.2] (22-225.197-178.cust.bluewin.ch [178.197.225.22])
 by smtp.webfaction.com (Postfix) with ESMTP id 26C5222D894F;
 Mon, 20 Oct 2014 15:47:46 +0000 (UTC)
Date: Mon, 20 Oct 2014 17:47:51 +0200
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Trevor Smith <trevorsummerssmith@gmail.com>
Message-ID: <42AC86B8F25C47E4BED078D5E20F9696@erratique.ch>
In-Reply-To: <CAG-KTt8xjcYZ877-_oSVepgAqAfFq7g8zLtcM8BZDRB=oTtfSQ@mail.gmail.com>
References: <CAG-KTt9684d_SCqp_MtaGSuqAhnZ0mNSmGwdw7LQZm_81ShnRQ@mail.gmail.com>
 <1B1F99FDB4384237A2DC7B1F4C87E4E2@erratique.ch>
 <CAG-KTt9yHoZiAwiJ-vMmSHt5LMTOhHX3rCjv2FTrvzuEd-YTZw@mail.gmail.com>
 <B36B4944FE38422AB6DD2EAF2F50CE64@erratique.ch>
 <CAG-KTt86Xoa6TG0ohXwCcWJ8+C+-Fkv_OCCqyOrSB4M8DyowiQ@mail.gmail.com>
 <CAAxsn=FPsO2QHVLzNJ09cuLaut-AgsTaXzS0G98j6Nxgn5isAA@mail.gmail.com>
 <CAAxsn=Hp5ZB8dE+wJi1ZMfbPJ_wbL_vFN+-=VXJRs8NhKU3N9g@mail.gmail.com>
 <673FCD9F382E4A61A547AE5D74100B12@erratique.ch>
 <CAG-KTt8xjcYZ877-_oSVepgAqAfFq7g8zLtcM8BZDRB=oTtfSQ@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Cc: "=?utf-8?Q?ctypes=40lists.ocaml.org?=" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Defines,
 and Structs with platform-specific fields
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 20 Oct 2014 15:08:44 -0000

Le lundi, 20 octobre 2014 =C3=A0 17:28, Trevor Smith a =C3=A9crit :
> Jeremy -- I like the functor idea + first class modules: it is elegant.=
 However I agree with Daniel's point about maintainability.
> =20
> If I use the allocate w/ a c function that returns the size of the stru=
ct I will be good to go. Then have ctypes reference public fields and mak=
e strong wording in the implementation to never allocate a ctype struct u=
sing make. =20
Keep all these things abstract from OCaml's point of view: we don't want =
to program in C, we want to program in OCaml. Treat each struct pointer a=
s an abstract type and defines getter/accessors and creation functions on=
 values of these type. Don't make any of the ctypes types leak in the int=
erface.

See for example the way I handled the SDL=5FEvent type which is a union o=
f many structs:

http://hg.libsdl.org/SDL/file/704a0bfecf75/include/SDL=5Fevents.h=23l498

Here:

http://erratique.ch/software/tsdl/doc/Tsdl.Sdl.Event.html
https://github.com/dbuenzli/tsdl/blob/bc18d14b1a28af99ebc30b61e303ee53040=
55d31/src/tsdl.ml=23L3287

Best,

Daniel



From yallop@gmail.com  Mon Oct 20 21:07:18 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id DCD223C373
 for <ctypes@lists.ocaml.org>; Mon, 20 Oct 2014 21:07:18 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1632884 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.171 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f171.google.com ([209.85.212.171]:43612)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XgJqV-0007oX-qK (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Mon, 20 Oct 2014 21:46:27 +0100
Received: by mail-wi0-f171.google.com with SMTP id em10so8253802wid.4
 for <ctypes@lists.ocaml.org>; Mon, 20 Oct 2014 13:46:26 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=UWOmFPFbbj/x8ZG9RynPcVIBxgPAhg+f3nOIqW/UKP8=;
 b=HnDXm9TqN95dd5Yr4GQWGwdXGEJnWAScIjKK2uH2faA67AuUpslmhmm1ZWU4PUISP0
 MnVpjRiMR2cqlsmzITKFvSvLAXnyCibrSv4X1+0kP+1Wsj0JDCE1Jk8PhjYeMQ7PPr2B
 tla2CaeakGXgd5s/Sy3/Ix/tfZuSds2kMtPmc1qSWfXsj8C48gs7wn02o/5InFuhjh+6
 21aRn31Cq9MeNtjN0Rn5pvEwJVHx0EQPzLYIkap6rvXxwI88jmMd7nIaA6LPGkRaegAX
 ewRLD1r9rWLVGhnm10joa2wj7sph2DRWVSnce5nI9Yfj8imJIGVKsNvqADzzWyK59T5r
 Gv8w==
MIME-Version: 1.0
X-Received: by 10.194.90.15 with SMTP id bs15mr35817968wjb.47.1413837986285;
 Mon, 20 Oct 2014 13:46:26 -0700 (PDT)
Received: by 10.217.115.5 with HTTP; Mon, 20 Oct 2014 13:46:26 -0700 (PDT)
In-Reply-To: <CAG-KTt8xjcYZ877-_oSVepgAqAfFq7g8zLtcM8BZDRB=oTtfSQ@mail.gmail.com>
References: <CAG-KTt9684d_SCqp_MtaGSuqAhnZ0mNSmGwdw7LQZm_81ShnRQ@mail.gmail.com>
 <1B1F99FDB4384237A2DC7B1F4C87E4E2@erratique.ch>
 <CAG-KTt9yHoZiAwiJ-vMmSHt5LMTOhHX3rCjv2FTrvzuEd-YTZw@mail.gmail.com>
 <B36B4944FE38422AB6DD2EAF2F50CE64@erratique.ch>
 <CAG-KTt86Xoa6TG0ohXwCcWJ8+C+-Fkv_OCCqyOrSB4M8DyowiQ@mail.gmail.com>
 <CAAxsn=FPsO2QHVLzNJ09cuLaut-AgsTaXzS0G98j6Nxgn5isAA@mail.gmail.com>
 <CAAxsn=Hp5ZB8dE+wJi1ZMfbPJ_wbL_vFN+-=VXJRs8NhKU3N9g@mail.gmail.com>
 <673FCD9F382E4A61A547AE5D74100B12@erratique.ch>
 <CAG-KTt8xjcYZ877-_oSVepgAqAfFq7g8zLtcM8BZDRB=oTtfSQ@mail.gmail.com>
Date: Mon, 20 Oct 2014 21:46:26 +0100
Message-ID: <CAAxsn=FLvwohow+HKO34PLdVjnDEYJi7ecUA29uA_CgBM8w4_w@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Trevor Smith <trevorsummerssmith@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Defines,
	and Structs with platform-specific fields
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 20 Oct 2014 20:07:18 -0000

On 20 October 2014 16:28, Trevor Smith <trevorsummerssmith@gmail.com> wrote:
> Jeremy -- I like the functor idea + first class modules: it is elegant.
> However I agree with Daniel's point about maintainability.

Yes, the need to keep things in sync with a potentially changing
implementation is certainly a drawback.

> If I use the allocate w/ a c function that returns the size of the struct I
> will be good to go. Then have ctypes reference public fields

Careful: giving a partial definition of the struct in ctypes will work
well as long as you're dealing with a prefix -- i.e. when the public
fields are all at the beginning of the struct.  That doesn't appear to
be the case with libuv, where public and private fields are sometimes
interleaved.  The other approaches Daniel suggests -- either defining
accessors in C, or treating the struct types as abstract -- should
work well, though.

This discussion is a useful reminder that ctypes really needs support
for retrieving struct layout details from the declared API.  I'll look
at how to add that support later this week and report back.

From trevorsummerssmith@gmail.com  Tue Oct 21 12:45:33 2014
Return-Path: <trevorsummerssmith@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id A4FC03C0B1
 for <ctypes@lists.ocaml.org>; Tue, 21 Oct 2014 12:45:33 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1633078 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.214.180 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (trevorsummerssmith[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-ob0-f180.google.com ([209.85.214.180]:34275)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XgYUV-0008Pd-F6 (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <trevorsummerssmith@gmail.com>); Tue, 21 Oct 2014 13:24:44 +0100
Received: by mail-ob0-f180.google.com with SMTP id va2so850041obc.39
 for <ctypes@lists.ocaml.org>; Tue, 21 Oct 2014 05:24:42 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:date:message-id:subject:from:to:content-type;
 bh=fT3lEpVBE+PLSrmBYvAZijz4Y5p+fribnjTFn68DMLo=;
 b=PWjxErxwGZvj+/AcSvQfuQ+ldtYxBoI1lDH7JOVvnOaI4ogyJWv5ER7TrMqrkYZHUv
 7DfQ3PZyK0uL/9447hr+Y5ZB7+GvE/N9jO3TBPY+xiWNBqer/Vj9uAcZrBZLvRBOwvJK
 vVXNmIad/YgoajbRfgGNChJSOJlcNkNstc0yLg/Hxx2Gp/f7g4puSWcGKuJvb/6p7e/l
 cAYfDn3TiNsPjDGNkrcT7QKVF5p6cnO2H2eEYnqdH1FAhxwlF0geZRyuGrhc543ZlBI0
 oKMTLq2wKUggezMIekXB5Qi2udjvTMbAKWVNfHP0dp0KR4q9J4AOnzFsVuhbIYkVzPvF
 sVVg==
MIME-Version: 1.0
X-Received: by 10.202.171.204 with SMTP id u195mr3734505oie.24.1413894281880; 
 Tue, 21 Oct 2014 05:24:41 -0700 (PDT)
Received: by 10.182.174.5 with HTTP; Tue, 21 Oct 2014 05:24:41 -0700 (PDT)
Date: Tue, 21 Oct 2014 08:24:41 -0400
Message-ID: <CAG-KTt_cv9RPtoM9Tn_t3Sa+3c0==u6h5r=YQ36_YLd9KaD4FA@mail.gmail.com>
From: Trevor Smith <trevorsummerssmith@gmail.com>
To: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Content-Type: multipart/alternative; boundary=001a113ce41c6bf7ea0505edea82
Subject: [ocaml-ctypes] Lifecycle of a callback?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 21 Oct 2014 11:45:33 -0000

--001a113ce41c6bf7ea0505edea82
Content-Type: text/plain; charset=UTF-8

Hi all,

In the libuv bindings I am working on there is need for user callbacks. A
user registers the callback with a function, and then at an arbitrary point
in time later, the callback code is actually ran (started when the user
starts the libuv event loop). I had naively thought that I would need to
keep a reference to the user callback and then release this reference after
the user callback was actually called (because the callback would be used
at an arbitrary point in the future and could get gc'd).

I made an example this morning to test this out, however I cannot get it to
fail (ie throw an CallToExpiredClosure).

Perhaps my assumption is wrong, and I do not have to keep around a
reference? Or my test is not testing what I think it is?

I see similar discussion that doesn't have a clear resolution here:
https://github.com/dbuenzli/tgls/issues/6 and
http://lists.ocaml.org/pipermail/ctypes/2013-December/000028.html

My test code is here:
https://github.com/trevorsummerssmith/ocaml-libuv/blob/test-lifecycle/test/test_lifecycle.ml

Test it: make && make tests # valgrind seems happy with it

I am running with libuv-1.0.0-rc1
https://github.com/joyent/libuv/tree/v1.0.0-rc1/ OCaml 4.0.2.1 and on a Mac
10.9.5

Thanks!

Trevor

--001a113ce41c6bf7ea0505edea82
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Hi all,<div><br></div><div>In the libuv bindings I am work=
ing on there is need for user callbacks. A user registers the callback with=
 a function, and then at an arbitrary point in time later, the callback cod=
e is actually ran (started when the user starts the libuv event loop). I ha=
d naively thought that I would need to keep a reference to the user callbac=
k and then release this reference after the user callback was actually call=
ed (because the callback would be used at an arbitrary point in the future =
and could get gc&#39;d).</div><div><br></div><div>I made an example this mo=
rning to test this out, however I cannot get it to fail (ie throw an CallTo=
ExpiredClosure).</div><div><br></div><div>Perhaps my assumption is wrong, a=
nd I do not have to keep around a reference? Or my test is not testing what=
 I think it is?</div><div><br></div><div>I see similar discussion that does=
n&#39;t have a clear resolution here:=C2=A0<a href=3D"https://github.com/db=
uenzli/tgls/issues/6">https://github.com/dbuenzli/tgls/issues/6</a> and=C2=
=A0<a href=3D"http://lists.ocaml.org/pipermail/ctypes/2013-December/000028.=
html">http://lists.ocaml.org/pipermail/ctypes/2013-December/000028.html</a>=
</div><div><br></div><div>My test code is here:=C2=A0<a href=3D"https://git=
hub.com/trevorsummerssmith/ocaml-libuv/blob/test-lifecycle/test/test_lifecy=
cle.ml">https://github.com/trevorsummerssmith/ocaml-libuv/blob/test-lifecyc=
le/test/test_lifecycle.ml</a></div><div><br></div><div>Test it: make &amp;&=
amp; make tests # valgrind seems happy with it</div><div><br></div><div>I a=
m running with libuv-1.0.0-rc1=C2=A0<a href=3D"https://github.com/joyent/li=
buv/tree/v1.0.0-rc1/">https://github.com/joyent/libuv/tree/v1.0.0-rc1/</a> =
OCaml 4.0.2.1 and on a Mac 10.9.5</div><div><br></div><div>Thanks!</div><di=
v><br>Trevor</div></div>

--001a113ce41c6bf7ea0505edea82--

From yallop@gmail.com  Tue Oct 21 13:34:15 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 53F693C0B1
 for <ctypes@lists.ocaml.org>; Tue, 21 Oct 2014 13:34:15 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1633078 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.48 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wg0-f48.google.com ([74.125.82.48]:48653)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XgZFa-00029y-sJ (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 21 Oct 2014 14:13:26 +0100
Received: by mail-wg0-f48.google.com with SMTP id k14so1323356wgh.31
 for <ctypes@lists.ocaml.org>; Tue, 21 Oct 2014 06:13:22 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=OPJCPPwStYMgIFUdJ879fpvFdyqDU5EZmLxfs5HDo3c=;
 b=sbnIHWKKU0rpgD/46epxcDPIbn0/kri/NsZIO4SzEdybQwgCSiqajgk49wyBlUO9n+
 0KIo23deTtexyeXgZxfVW+t9g4mXaikFdsIzw0L/NvIYHwtD42lb7zv4FpPmNYZT5tg3
 IPmyl0Mk7ciSL/dNhH17vZI8VOdVCtPjoVZ64xPiTNAQ/OOEpF+rk/6sC7lUVpvj3hn3
 p2nhxi4WFV7kNVff5XeodiuD2jrk15Ad1YncpbpduMWVfcfu2FPAFcfvhAQIIxaL/1mN
 PYHuZBsYt+SLqEfk4UU4Js4iUZl4N5OzkMmB3Fsz4Nf3IoJ/cqVb48+ERAnXYhc0Csla
 wO4w==
MIME-Version: 1.0
X-Received: by 10.180.79.228 with SMTP id m4mr13224343wix.26.1413897201503;
 Tue, 21 Oct 2014 06:13:21 -0700 (PDT)
Received: by 10.217.115.5 with HTTP; Tue, 21 Oct 2014 06:13:21 -0700 (PDT)
In-Reply-To: <CAG-KTt_cv9RPtoM9Tn_t3Sa+3c0==u6h5r=YQ36_YLd9KaD4FA@mail.gmail.com>
References: <CAG-KTt_cv9RPtoM9Tn_t3Sa+3c0==u6h5r=YQ36_YLd9KaD4FA@mail.gmail.com>
Date: Tue, 21 Oct 2014 14:13:21 +0100
Message-ID: <CAAxsn=GTsKzC78PSZhuQFaG2c-DnZmkaaWkOxT773JDyrFSacw@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Trevor Smith <trevorsummerssmith@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Lifecycle of a callback?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 21 Oct 2014 12:34:15 -0000

On 21 October 2014 13:24, Trevor Smith <trevorsummerssmith@gmail.com> wrote:
> In the libuv bindings I am working on there is need for user callbacks. A
> user registers the callback with a function, and then at an arbitrary point
> in time later, the callback code is actually ran (started when the user
> starts the libuv event loop). I had naively thought that I would need to
> keep a reference to the user callback and then release this reference after
> the user callback was actually called (because the callback would be used at
> an arbitrary point in the future and could get gc'd).

Yes, that's exactly right.

> I made an example this morning to test this out, however I cannot get it to
> fail (ie throw an CallToExpiredClosure).
>
> Perhaps my assumption is wrong, and I do not have to keep around a
> reference? Or my test is not testing what I think it is?

It's the latter.  Your callback function

    let cb fs = Printf.printf "XXX Called '%s'\n" (getf !@fs C._path) in

doesn't reference anything from the local environment, so no closure
is allocated, and there's nothing for the GC to collect.  If you
change the function to reference the local environment -- for example,
by adding a dummy use of 'data'

    let cb fs =
       let _ = Obj.repr data in
       Printf.printf "XXX Called '%s'\n" (getf !@fs C._path) in

then the test fails with CallToExpiredClosure as expected.  Besides
inspecting the source of the function, you can check whether a closure
is allocated by attempting to add a finaliser to the function, which
will fail for non-closures, or by inspecting the generated cmm (using
-dcmm), which looks like this for the non-closure case

      (let
        (cb/1325 "camlTest_lifecycle__17"

(i.e. cb is just a reference to a static function), and like this for
the closure case:

      (let
        (cb/1325 (alloc 3319 "camlTest_lifecycle__cb_1325" 3 data/1324)

I hope that helps,

Jeremy.

From daniel.buenzli@erratique.ch  Tue Oct 21 13:35:46 2014
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-51.csi.cam.ac.uk (ppsw-51.csi.cam.ac.uk [131.111.8.151])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 5B2B63C0B1
 for <ctypes@lists.ocaml.org>; Tue, 21 Oct 2014 13:35:46 +0100 (BST)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1633078
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:48306
 helo=smtp.webfaction.com)
 by ppsw-51.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtp id 1XgZH6-0005bV-YM (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Tue, 21 Oct 2014 14:14:57 +0100
Received: from [172.20.10.2] (108-227.197-178.cust.bluewin.ch
 [178.197.227.108])
 by smtp.webfaction.com (Postfix) with ESMTP id 0340122B8F14;
 Tue, 21 Oct 2014 13:14:54 +0000 (UTC)
Date: Tue, 21 Oct 2014 15:14:52 +0200
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Trevor Smith <trevorsummerssmith@gmail.com>
Message-ID: <93C139362C0B442299F3217C69D1611D@erratique.ch>
In-Reply-To: <CAG-KTt_cv9RPtoM9Tn_t3Sa+3c0==u6h5r=YQ36_YLd9KaD4FA@mail.gmail.com>
References: <CAG-KTt_cv9RPtoM9Tn_t3Sa+3c0==u6h5r=YQ36_YLd9KaD4FA@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Cc: "=?utf-8?Q?ctypes=40lists.ocaml.org?=" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Lifecycle of a callback?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 21 Oct 2014 12:35:46 -0000



Le mardi, 21 octobre 2014 =C3=A0 14:24, Trevor Smith a =C3=A9crit :

> In the libuv bindings I am working on there is need for user callbacks.=
 A user registers the callback with a function, and then at an arbitrary =
point in time later, the callback code is actually ran (started when the =
user starts the libuv event loop). I had naively thought that I would nee=
d to keep a reference to the user callback and then release this referenc=
e after the user callback was actually called (because the callback would=
 be used at an arbitrary point in the future and could get gc'd).

This doesn't answer you question but just another thing to think about, i=
f the callbacks may occur on another thread you should also be careful on=
 acquiring OCaml's runtime lock see for example here:

https://github.com/dbuenzli/tsdl/issues/13

I don't know if the support Jeremy mentions in that discussion was eventu=
ally merged in a published version since ctypes's release notes are a lit=
tle bit hard to track down. =20

Best,

Daniel

P.S. Just one comment dont do =60let =5F =3D ...=60 you will soon or late=
r loose a lot of time because you only partially applied a function while=
 you thought the application was total. Use =60let () =3D ...=60 and use =
=60ignore=60 if you need to ignore a result =E2=80=94 and sequencing with=
 ; is fine too.
 =20


From yallop@gmail.com  Tue Oct 21 14:33:26 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-51.csi.cam.ac.uk (ppsw-51.csi.cam.ac.uk [131.111.8.151])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 69C0C3C0B1
 for <ctypes@lists.ocaml.org>; Tue, 21 Oct 2014 14:33:26 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1633078 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.170 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f170.google.com ([209.85.212.170]:59670)
 by ppsw-51.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XgaAv-0000oR-WN (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 21 Oct 2014 15:12:37 +0100
Received: by mail-wi0-f170.google.com with SMTP id hi2so11157090wib.1
 for <ctypes@lists.ocaml.org>; Tue, 21 Oct 2014 07:12:35 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type:content-transfer-encoding;
 bh=qvTvVF1QsliDwRwaA6kSmmDm74WduizWbCsYCPI/Pp0=;
 b=ryBve5jBa0bLLTYIf639VCy98zLQPpdpIRe7eQEhyTs5bDgGfIs3rzwZvcfgZpbMfz
 uRUUmM5D+glvyXHP5CAiEHpBkgInMPyvrak4ePNCctWgtUsrQpfiYVvEKUxj2LfPXUZs
 KkbJAgmYK6LmgzGwNNyLE3giBxSbOAYw3rhy1jxWvN/0wj0euQ8S8eipdnN5qwqPn5U8
 jkJEftB8dqO9+wGOaPd3NS0h6fNYwSD8Nmh8NU96Ig/siRv6pJMYvxbUmGrlEj81iYj2
 uMmuKq266ctoxXJAkMods/iBNLkVoAs4VhnOfmvJon4MRIKDGfwj6iNVfPQOwunI3QTu
 d/5Q==
MIME-Version: 1.0
X-Received: by 10.180.88.162 with SMTP id bh2mr29429690wib.77.1413900753867;
 Tue, 21 Oct 2014 07:12:33 -0700 (PDT)
Received: by 10.217.115.5 with HTTP; Tue, 21 Oct 2014 07:12:33 -0700 (PDT)
In-Reply-To: <93C139362C0B442299F3217C69D1611D@erratique.ch>
References: <CAG-KTt_cv9RPtoM9Tn_t3Sa+3c0==u6h5r=YQ36_YLd9KaD4FA@mail.gmail.com>
 <93C139362C0B442299F3217C69D1611D@erratique.ch>
Date: Tue, 21 Oct 2014 15:12:33 +0100
Message-ID: <CAAxsn=Gz8=FKXFk9C_K9sBqNs4ZTK+2N7aFydOudOg62ZS7J3A@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: =?UTF-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Cc: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Lifecycle of a callback?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 21 Oct 2014 13:33:26 -0000

On 21 October 2014 14:14, Daniel B=C3=BCnzli <daniel.buenzli@erratique.ch> =
wrote:
> This doesn't answer you question but just another thing to think about, i=
f the callbacks may occur on another thread you should also be careful on a=
cquiring OCaml's runtime lock see for example here:
>
> https://github.com/dbuenzli/tsdl/issues/13
>
> I don't know if the support Jeremy mentions in that discussion was eventu=
ally merged in a published version since ctypes's release notes are a littl=
e bit hard to track down.

It's in the master branch, but not in a release yet.  It should be
included in 0.4.

From trevorsummerssmith@gmail.com  Tue Oct 21 15:22:20 2014
Return-Path: <trevorsummerssmith@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id E3A403C0B1
 for <ctypes@lists.ocaml.org>; Tue, 21 Oct 2014 15:22:20 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1633078 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.218.41 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (trevorsummerssmith[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-oi0-f41.google.com ([209.85.218.41]:45044)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XgawC-0006zJ-kc (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <trevorsummerssmith@gmail.com>); Tue, 21 Oct 2014 16:01:32 +0100
Received: by mail-oi0-f41.google.com with SMTP id u20so1079544oif.14
 for <ctypes@lists.ocaml.org>; Tue, 21 Oct 2014 08:01:27 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=PoZg5ZnHAHGERda8B8MDHjgKKDs0F2m4W2ZoglKg7ZI=;
 b=S7oOtQ7Yvnm9sMn2ZX9FUgQPe1AYz/uEHP7bp66ToI4TN8KdHyW/0cPkO8O/fUnL3S
 lU+NQDzAgL1QV0/2L3e74FVvwGpBiteEyfMpwVtqLNfdcMdHqvlG7wGyzA/0eDA5v42l
 D7/RUkPmxnvzgT+FIEt5NWSmPH5BG82aqHQs7UoRm7dVT8ThzDBzYiS4XGuNJRPGv5gY
 R5rEKnCts4dIDIjgNhRfxQvDWvAhPKdhz65zjTietCJUH1C7Z6HIsak5nvpHSO/SAVoT
 mb+HoIYsQ7ckGqT9LjtmlKkV9a4Hl9ic3DExvib7mN9Z9DFh/AcNrHCL/YdcAO0EJgAl
 iJxA==
MIME-Version: 1.0
X-Received: by 10.202.95.197 with SMTP id t188mr28598088oib.40.1413903687199; 
 Tue, 21 Oct 2014 08:01:27 -0700 (PDT)
Received: by 10.182.174.5 with HTTP; Tue, 21 Oct 2014 08:01:27 -0700 (PDT)
In-Reply-To: <CAAxsn=Gz8=FKXFk9C_K9sBqNs4ZTK+2N7aFydOudOg62ZS7J3A@mail.gmail.com>
References: <CAG-KTt_cv9RPtoM9Tn_t3Sa+3c0==u6h5r=YQ36_YLd9KaD4FA@mail.gmail.com>
 <93C139362C0B442299F3217C69D1611D@erratique.ch>
 <CAAxsn=Gz8=FKXFk9C_K9sBqNs4ZTK+2N7aFydOudOg62ZS7J3A@mail.gmail.com>
Date: Tue, 21 Oct 2014 11:01:27 -0400
Message-ID: <CAG-KTt8pUceFsGALVZZ0oSDs8OtE1y6mvdfaWj=vwKyp8YgeYA@mail.gmail.com>
From: Trevor Smith <trevorsummerssmith@gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Content-Type: multipart/alternative; boundary=001a113cdfd005b0820505f01bd0
Cc: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Lifecycle of a callback?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 21 Oct 2014 14:22:21 -0000

--001a113cdfd005b0820505f01bd0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Thanks for all the input!

Jeremy is there an eta for 0.4? For now I will work off of master.
Thanks
Trevor

On Tuesday, October 21, 2014, Jeremy Yallop <yallop@gmail.com> wrote:

> On 21 October 2014 14:14, Daniel B=C3=BCnzli <daniel.buenzli@erratique.ch
> <javascript:;>> wrote:
> > This doesn't answer you question but just another thing to think about,
> if the callbacks may occur on another thread you should also be careful o=
n
> acquiring OCaml's runtime lock see for example here:
> >
> > https://github.com/dbuenzli/tsdl/issues/13
> >
> > I don't know if the support Jeremy mentions in that discussion was
> eventually merged in a published version since ctypes's release notes are=
 a
> little bit hard to track down.
>
> It's in the master branch, but not in a release yet.  It should be
> included in 0.4.
>

--001a113cdfd005b0820505f01bd0
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Thanks for all the input!<div><br></div><div>Jeremy is there an eta for 0.4=
? For now I will work off of master.</div><div>Thanks</div><div>Trevor<span=
></span><br><br>On Tuesday, October 21, 2014, Jeremy Yallop &lt;<a href=3D"=
mailto:yallop@gmail.com">yallop@gmail.com</a>&gt; wrote:<br><blockquote cla=
ss=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;pa=
dding-left:1ex">On 21 October 2014 14:14, Daniel B=C3=BCnzli &lt;<a href=3D=
"javascript:;" onclick=3D"_e(event, &#39;cvml&#39;, &#39;daniel.buenzli@err=
atique.ch&#39;)">daniel.buenzli@erratique.ch</a>&gt; wrote:<br>
&gt; This doesn&#39;t answer you question but just another thing to think a=
bout, if the callbacks may occur on another thread you should also be caref=
ul on acquiring OCaml&#39;s runtime lock see for example here:<br>
&gt;<br>
&gt; <a href=3D"https://github.com/dbuenzli/tsdl/issues/13" target=3D"_blan=
k">https://github.com/dbuenzli/tsdl/issues/13</a><br>
&gt;<br>
&gt; I don&#39;t know if the support Jeremy mentions in that discussion was=
 eventually merged in a published version since ctypes&#39;s release notes =
are a little bit hard to track down.<br>
<br>
It&#39;s in the master branch, but not in a release yet.=C2=A0 It should be=
<br>
included in 0.4.<br>
</blockquote></div>

--001a113cdfd005b0820505f01bd0--

From yallop@gmail.com  Tue Oct 21 15:26:20 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 29AA83C0B1
 for <ctypes@lists.ocaml.org>; Tue, 21 Oct 2014 15:26:20 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1633078 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.180 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f180.google.com ([209.85.212.180]:56608)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1Xgb06-00053E-mC (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 21 Oct 2014 16:05:31 +0100
Received: by mail-wi0-f180.google.com with SMTP id em10so2099619wid.7
 for <ctypes@lists.ocaml.org>; Tue, 21 Oct 2014 08:05:28 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=b/ghlK/++s9X3dgtERWbhjYvauQCTqNk9putZKAe+iQ=;
 b=l+cf9oA0XjY1hUyog9coCiZXcJOHjRfhMvVEv5d1wje+Fnspxzkjg0Twx0l9yxeIl2
 PlycnXj3CX4nBPRr+sP09K8UukN0YrV9aJjtW148Q+ekURj22TJZDy4lxb/Ii1FQfd7g
 e+fZys2dbusq1d1H/imkdAg2AArFgBoWZ/rKvywpgbeJ3zbGqEZUEzZLG/oAZbmPIjPD
 GW9iN/dSJc6lwFqXMfbOuwdFdIL5FZQbKGdbC6+pJwas38+Wxt7jj8KU4XAm2yjOo8/1
 MXr82xZ1xDv53Yxchk6r3otOOV4+rjhq234cnVq2Kn8rnWLYpWrdl6vvc0T3NysKnXvx
 idcw==
MIME-Version: 1.0
X-Received: by 10.194.90.15 with SMTP id bs15mr42628089wjb.47.1413903927476;
 Tue, 21 Oct 2014 08:05:27 -0700 (PDT)
Received: by 10.217.115.5 with HTTP; Tue, 21 Oct 2014 08:05:27 -0700 (PDT)
In-Reply-To: <CAG-KTt8pUceFsGALVZZ0oSDs8OtE1y6mvdfaWj=vwKyp8YgeYA@mail.gmail.com>
References: <CAG-KTt_cv9RPtoM9Tn_t3Sa+3c0==u6h5r=YQ36_YLd9KaD4FA@mail.gmail.com>
 <93C139362C0B442299F3217C69D1611D@erratique.ch>
 <CAAxsn=Gz8=FKXFk9C_K9sBqNs4ZTK+2N7aFydOudOg62ZS7J3A@mail.gmail.com>
 <CAG-KTt8pUceFsGALVZZ0oSDs8OtE1y6mvdfaWj=vwKyp8YgeYA@mail.gmail.com>
Date: Tue, 21 Oct 2014 16:05:27 +0100
Message-ID: <CAAxsn=EWHQ-JJ5uUY8h0anvDvrttOTPOz7KogohbCeWq_=6Bsw@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Trevor Smith <trevorsummerssmith@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Lifecycle of a callback?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 21 Oct 2014 14:26:20 -0000

On 21 October 2014 16:01, Trevor Smith <trevorsummerssmith@gmail.com> wrote:
> Jeremy is there an eta for 0.4?

There's no ETA, but there is a list of outstanding issues:

   https://github.com/ocamllabs/ocaml-ctypes/milestones/ctypes%200.4

From trevorsummerssmith@gmail.com  Thu Oct 23 11:09:05 2014
Return-Path: <trevorsummerssmith@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 8A3503C1D2
 for <ctypes@lists.ocaml.org>; Thu, 23 Oct 2014 11:09:05 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1633562 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.214.178 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (trevorsummerssmith[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-ob0-f178.google.com ([209.85.214.178]:59687)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XhFwM-0002Hf-px (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <trevorsummerssmith@gmail.com>); Thu, 23 Oct 2014 11:48:22 +0100
Received: by mail-ob0-f178.google.com with SMTP id wn1so509108obc.23
 for <ctypes@lists.ocaml.org>; Thu, 23 Oct 2014 03:48:20 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=kEk5r77B5Eel21oH6HcZwIiPOeFXFEJiGim+ggrypKA=;
 b=PTOXYTkN0kPSLtNSempVYjrXe+e01XeejC38bwsSiBWlB8f+Xj02nr9ozqFPfMvXPB
 GU3jS22zZZAyoZqraKe/HasC7dNO9E00yzjiXRdbfDKZS+tkrXRtqEmAMUlM1V+kW8Uk
 NyVeWFpVi26XkeuSYenpUKTg9KIoFDeWAdJgfHkgLRrbTz/z/bEtTLkNZjoXypYU2OIW
 9ywfNQNtJaPHimRt4IKam7//KfelKNR79hYGEcaotJ1StcSwDbS277E4UNhUxU1gylQC
 2ebtx6zx7VaCPOt8G6Szn+yy5wz0QTtd1lxXwFeuoKJEipoYsuA/2QbZC9q4gW1pls81
 yQ9A==
MIME-Version: 1.0
X-Received: by 10.182.89.194 with SMTP id bq2mr3622109obb.12.1414061300707;
 Thu, 23 Oct 2014 03:48:20 -0700 (PDT)
Received: by 10.182.174.5 with HTTP; Thu, 23 Oct 2014 03:48:20 -0700 (PDT)
In-Reply-To: <CAAxsn=EWHQ-JJ5uUY8h0anvDvrttOTPOz7KogohbCeWq_=6Bsw@mail.gmail.com>
References: <CAG-KTt_cv9RPtoM9Tn_t3Sa+3c0==u6h5r=YQ36_YLd9KaD4FA@mail.gmail.com>
 <93C139362C0B442299F3217C69D1611D@erratique.ch>
 <CAAxsn=Gz8=FKXFk9C_K9sBqNs4ZTK+2N7aFydOudOg62ZS7J3A@mail.gmail.com>
 <CAG-KTt8pUceFsGALVZZ0oSDs8OtE1y6mvdfaWj=vwKyp8YgeYA@mail.gmail.com>
 <CAAxsn=EWHQ-JJ5uUY8h0anvDvrttOTPOz7KogohbCeWq_=6Bsw@mail.gmail.com>
Date: Thu, 23 Oct 2014 06:48:20 -0400
Message-ID: <CAG-KTt_tcJDLRRUEztxcdTd_A3rP7myB7T5f-F1B4mze9gD7Zg@mail.gmail.com>
From: Trevor Smith <trevorsummerssmith@gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Content-Type: multipart/alternative; boundary=089e013cc45e85066d050614cd7f
Cc: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Lifecycle of a callback?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 23 Oct 2014 10:09:05 -0000

--089e013cc45e85066d050614cd7f
Content-Type: text/plain; charset=UTF-8

Following up on the earlier conversation of using c-based accessors:

I tried this out this morning. However I am seeing strange behavior with
the memory addresses. In native code, whenever I pass a pointer through the
accessor I receive a different address than the original address --
however, in valgrind the addresses are the same.

Relevant code:
git clone git@github.com:trevorsummerssmith/ocaml-libuv.git && cd
ocaml-libuv && git checkout origin/test-lifecycle && make tests

I see, eg:

loop: 0x109d76800
Handle: 0x9d76800
Handle: 0x9d76800
F.
==============================================================================
Failure: handle suite:0:accessors

The loop address always starts with '10'. However in valgrind the addresses
are the same.

The c accessors are in lib_gen/lib_accessors.c, the test is in test/
test_handle.ml

Thoughts on this? Thanks!

Trevor

On Tue, Oct 21, 2014 at 11:05 AM, Jeremy Yallop <yallop@gmail.com> wrote:

> On 21 October 2014 16:01, Trevor Smith <trevorsummerssmith@gmail.com>
> wrote:
> > Jeremy is there an eta for 0.4?
>
> There's no ETA, but there is a list of outstanding issues:
>
>    https://github.com/ocamllabs/ocaml-ctypes/milestones/ctypes%200.4
>

--089e013cc45e85066d050614cd7f
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Following up on the earlier conversation of using c-based =
accessors:<div><br></div><div>I tried this out this morning. However I am s=
eeing strange behavior with the memory addresses. In native code, whenever =
I pass a pointer through the accessor I receive a different address than th=
e original address -- however, in valgrind the addresses are the same.</div=
><div><br></div><div>Relevant code:</div><div>git clone git@github.com:trev=
orsummerssmith/ocaml-libuv.git &amp;&amp; cd ocaml-libuv &amp;&amp; git che=
ckout origin/test-lifecycle &amp;&amp; make tests</div><div><br></div><div>=
I see, eg:</div><div><br></div><div><div>loop: 0x109d76800</div><div>Handle=
: 0x9d76800</div><div>Handle: 0x9d76800</div><div>F.</div><div>=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D</d=
iv><div>Failure: handle suite:0:accessors</div></div><div><br></div><div>Th=
e loop address always starts with &#39;10&#39;. However in valgrind the add=
resses are the same.</div><div><br></div><div>The c accessors are in lib_ge=
n/lib_accessors.c, the test is in test/<a href=3D"http://test_handle.ml">te=
st_handle.ml</a></div><div><br></div><div>Thoughts on this? Thanks!</div><d=
iv><br></div><div>Trevor</div></div><div class=3D"gmail_extra"><br><div cla=
ss=3D"gmail_quote">On Tue, Oct 21, 2014 at 11:05 AM, Jeremy Yallop <span di=
r=3D"ltr">&lt;<a href=3D"mailto:yallop@gmail.com" target=3D"_blank">yallop@=
gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=
=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><span cl=
ass=3D"">On 21 October 2014 16:01, Trevor Smith &lt;<a href=3D"mailto:trevo=
rsummerssmith@gmail.com">trevorsummerssmith@gmail.com</a>&gt; wrote:<br>
&gt; Jeremy is there an eta for 0.4?<br>
<br>
</span>There&#39;s no ETA, but there is a list of outstanding issues:<br>
<br>
=C2=A0 =C2=A0<a href=3D"https://github.com/ocamllabs/ocaml-ctypes/milestone=
s/ctypes%200.4" target=3D"_blank">https://github.com/ocamllabs/ocaml-ctypes=
/milestones/ctypes%200.4</a><br>
</blockquote></div><br></div>

--089e013cc45e85066d050614cd7f--

From yallop@gmail.com  Thu Oct 23 12:19:18 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 5FE533C14A
 for <ctypes@lists.ocaml.org>; Thu, 23 Oct 2014 12:19:18 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1633562 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.171 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f171.google.com ([209.85.212.171]:59833)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XhH2J-0004HY-rh (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Thu, 23 Oct 2014 12:58:35 +0100
Received: by mail-wi0-f171.google.com with SMTP id em10so3909646wid.4
 for <ctypes@lists.ocaml.org>; Thu, 23 Oct 2014 04:58:35 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=T+jiwWGLyIkY1JgBtlikwRseDR5b2vjMO3wgYvE6bM0=;
 b=Bd5BRjtJ2t59Kx+ur3hwFEoHLYcnz77DoftyEzpLog2oafpdU9dyUAZurg0w2yf6ea
 iAOnoDIQjFLlf36imNKRvKzSj2z5rBgDJ4s0tOrmP4Bpzsv6c5/BgHq9oQTN+dXeNcHT
 l8qvvl37yVoXKZP1AZJrqE7hYvTHHn/0Tp1ypDfyIlzNPY9stTRb01855jj0Fw1CKyng
 nt9ruMzmoVuaKsUpzWcm+NjF4fYU+0ipsgj0aFZYjvs3+k8pe4mDDvpsJv4zSaAs+wVP
 GyREV3BO93Py9PNKJd5ek/thKI+UJCMYWyp/oGffySlvfx8JjlCmWjwdIdVWNzq1rVUE
 IwZQ==
MIME-Version: 1.0
X-Received: by 10.180.88.162 with SMTP id bh2mr12390013wib.77.1414065515266;
 Thu, 23 Oct 2014 04:58:35 -0700 (PDT)
Received: by 10.217.115.5 with HTTP; Thu, 23 Oct 2014 04:58:35 -0700 (PDT)
In-Reply-To: <CAG-KTt_tcJDLRRUEztxcdTd_A3rP7myB7T5f-F1B4mze9gD7Zg@mail.gmail.com>
References: <CAG-KTt_cv9RPtoM9Tn_t3Sa+3c0==u6h5r=YQ36_YLd9KaD4FA@mail.gmail.com>
 <93C139362C0B442299F3217C69D1611D@erratique.ch>
 <CAAxsn=Gz8=FKXFk9C_K9sBqNs4ZTK+2N7aFydOudOg62ZS7J3A@mail.gmail.com>
 <CAG-KTt8pUceFsGALVZZ0oSDs8OtE1y6mvdfaWj=vwKyp8YgeYA@mail.gmail.com>
 <CAAxsn=EWHQ-JJ5uUY8h0anvDvrttOTPOz7KogohbCeWq_=6Bsw@mail.gmail.com>
 <CAG-KTt_tcJDLRRUEztxcdTd_A3rP7myB7T5f-F1B4mze9gD7Zg@mail.gmail.com>
Date: Thu, 23 Oct 2014 12:58:35 +0100
Message-ID: <CAAxsn=GSp4MtqKRd0YRSrcV3YcV0tK6GY_Haqzun1yAEpHdBKg@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Trevor Smith <trevorsummerssmith@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Lifecycle of a callback?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 23 Oct 2014 11:19:18 -0000

On 23 October 2014 11:48, Trevor Smith <trevorsummerssmith@gmail.com> wrote:
> I tried this out this morning. However I am seeing strange behavior with the
> memory addresses. In native code, whenever I pass a pointer through the
> accessor I receive a different address than the original address -- however,
> in valgrind the addresses are the same.
>
> Relevant code:
> git clone git@github.com:trevorsummerssmith/ocaml-libuv.git && cd
> ocaml-libuv && git checkout origin/test-lifecycle && make tests
>
> I see, eg:
>
> loop: 0x109d76800
> Handle: 0x9d76800
> Handle: 0x9d76800
> F.
> ==============================================================================
> Failure: handle suite:0:accessors
>
> The loop address always starts with '10'. However in valgrind the addresses
> are the same.
>
> The c accessors are in lib_gen/lib_accessors.c, the test is in
> test/test_handle.ml

The code generated by ctypes doesn't have declarations  for your
accessor functions in scope, so the C compiler helpfully assumes that
the functions return (32-bit) ints rather than (64-bit) pointers,
leading to garbage in the upper bits.  You should be able to fix the
problem by outputting suitable declarations (perhaps by including a
header) in libuv_bindgen.ml.

From trevorsummerssmith@gmail.com  Thu Oct 23 12:22:15 2014
Return-Path: <trevorsummerssmith@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id DE61A3C14A
 for <ctypes@lists.ocaml.org>; Thu, 23 Oct 2014 12:22:15 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1633562 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.214.175 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (trevorsummerssmith[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-ob0-f175.google.com ([209.85.214.175]:63458)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XhH5A-0006VO-FM (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <trevorsummerssmith@gmail.com>); Thu, 23 Oct 2014 13:01:33 +0100
Received: by mail-ob0-f175.google.com with SMTP id wn1so599374obc.20
 for <ctypes@lists.ocaml.org>; Thu, 23 Oct 2014 05:01:31 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=cKUobpbjSQTEx1PWBWnONzUB+qHGSJHPtTpK/hQqsKE=;
 b=EY3D31eE1L/KhjpCiNdl7Je/5nlA1LIjo7jTaVbakpQhpqTh8+VN6UnSc8rDCAHvRL
 gZknpfX8L5dyJHh+jIOA9agtw4wm+2NYrDqTOFQFbenIlsGooT8UOIvWzLWSdLyErq0i
 hHrT+COLnMMJfwvSykLSHDKQmWIoGSF60m2HAlGUTRmLQFiqqk3Hcplz2y1wfwfZDUqO
 tIB1WYcfbDIAEIXhJevzaka4gELw7yPPw1OgoSRCKet/Tc3MFJdZE2/jYZGEcwv7jFnD
 CyHwBj53gtegkVrDbZPw1SHte/w834WFMUAWkqScisdRSALay8bEiYbcqK1gdrihpEX4
 2+sA==
MIME-Version: 1.0
X-Received: by 10.202.209.74 with SMTP id i71mr3684084oig.6.1414065691378;
 Thu, 23 Oct 2014 05:01:31 -0700 (PDT)
Received: by 10.182.174.5 with HTTP; Thu, 23 Oct 2014 05:01:31 -0700 (PDT)
In-Reply-To: <CAAxsn=GSp4MtqKRd0YRSrcV3YcV0tK6GY_Haqzun1yAEpHdBKg@mail.gmail.com>
References: <CAG-KTt_cv9RPtoM9Tn_t3Sa+3c0==u6h5r=YQ36_YLd9KaD4FA@mail.gmail.com>
 <93C139362C0B442299F3217C69D1611D@erratique.ch>
 <CAAxsn=Gz8=FKXFk9C_K9sBqNs4ZTK+2N7aFydOudOg62ZS7J3A@mail.gmail.com>
 <CAG-KTt8pUceFsGALVZZ0oSDs8OtE1y6mvdfaWj=vwKyp8YgeYA@mail.gmail.com>
 <CAAxsn=EWHQ-JJ5uUY8h0anvDvrttOTPOz7KogohbCeWq_=6Bsw@mail.gmail.com>
 <CAG-KTt_tcJDLRRUEztxcdTd_A3rP7myB7T5f-F1B4mze9gD7Zg@mail.gmail.com>
 <CAAxsn=GSp4MtqKRd0YRSrcV3YcV0tK6GY_Haqzun1yAEpHdBKg@mail.gmail.com>
Date: Thu, 23 Oct 2014 08:01:31 -0400
Message-ID: <CAG-KTt_KhjAOb2n7Ln7Z81wcc0_n8u0W-fzm23WKU-97QF8czw@mail.gmail.com>
From: Trevor Smith <trevorsummerssmith@gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Content-Type: multipart/alternative; boundary=001a113d2bf2394cad050615d382
Cc: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Lifecycle of a callback?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 23 Oct 2014 11:22:15 -0000

--001a113d2bf2394cad050615d382
Content-Type: text/plain; charset=UTF-8

Thanks for the quick response Jeremy.

On Thursday, October 23, 2014, Jeremy Yallop <yallop@gmail.com> wrote:

> On 23 October 2014 11:48, Trevor Smith <trevorsummerssmith@gmail.com
> <javascript:;>> wrote:
> > I tried this out this morning. However I am seeing strange behavior with
> the
> > memory addresses. In native code, whenever I pass a pointer through the
> > accessor I receive a different address than the original address --
> however,
> > in valgrind the addresses are the same.
> >
> > Relevant code:
> > git clone git@github.com:trevorsummerssmith/ocaml-libuv.git && cd
> > ocaml-libuv && git checkout origin/test-lifecycle && make tests
> >
> > I see, eg:
> >
> > loop: 0x109d76800
> > Handle: 0x9d76800
> > Handle: 0x9d76800
> > F.
> >
> ==============================================================================
> > Failure: handle suite:0:accessors
> >
> > The loop address always starts with '10'. However in valgrind the
> addresses
> > are the same.
> >
> > The c accessors are in lib_gen/lib_accessors.c, the test is in
> > test/test_handle.ml
>
> The code generated by ctypes doesn't have declarations  for your
> accessor functions in scope, so the C compiler helpfully assumes that
> the functions return (32-bit) ints rather than (64-bit) pointers,
> leading to garbage in the upper bits.  You should be able to fix the
> problem by outputting suitable declarations (perhaps by including a
> header) in libuv_bindgen.ml.
>

--001a113d2bf2394cad050615d382
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Thanks for the quick response Jeremy.<span></span><br><br>On Thursday, Octo=
ber 23, 2014, Jeremy Yallop &lt;<a href=3D"mailto:yallop@gmail.com">yallop@=
gmail.com</a>&gt; wrote:<br><blockquote class=3D"gmail_quote" style=3D"marg=
in:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">On 23 October 20=
14 11:48, Trevor Smith &lt;<a href=3D"javascript:;" onclick=3D"_e(event, &#=
39;cvml&#39;, &#39;trevorsummerssmith@gmail.com&#39;)">trevorsummerssmith@g=
mail.com</a>&gt; wrote:<br>
&gt; I tried this out this morning. However I am seeing strange behavior wi=
th the<br>
&gt; memory addresses. In native code, whenever I pass a pointer through th=
e<br>
&gt; accessor I receive a different address than the original address -- ho=
wever,<br>
&gt; in valgrind the addresses are the same.<br>
&gt;<br>
&gt; Relevant code:<br>
&gt; git clone git@github.com:trevorsummerssmith/ocaml-libuv.git &amp;&amp;=
 cd<br>
&gt; ocaml-libuv &amp;&amp; git checkout origin/test-lifecycle &amp;&amp; m=
ake tests<br>
&gt;<br>
&gt; I see, eg:<br>
&gt;<br>
&gt; loop: 0x109d76800<br>
&gt; Handle: 0x9d76800<br>
&gt; Handle: 0x9d76800<br>
&gt; F.<br>
&gt; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D<br>
&gt; Failure: handle suite:0:accessors<br>
&gt;<br>
&gt; The loop address always starts with &#39;10&#39;. However in valgrind =
the addresses<br>
&gt; are the same.<br>
&gt;<br>
&gt; The c accessors are in lib_gen/lib_accessors.c, the test is in<br>
&gt; test/<a href=3D"http://test_handle.ml" target=3D"_blank">test_handle.m=
l</a><br>
<br>
The code generated by ctypes doesn&#39;t have declarations=C2=A0 for your<b=
r>
accessor functions in scope, so the C compiler helpfully assumes that<br>
the functions return (32-bit) ints rather than (64-bit) pointers,<br>
leading to garbage in the upper bits.=C2=A0 You should be able to fix the<b=
r>
problem by outputting suitable declarations (perhaps by including a<br>
header) in <a href=3D"http://libuv_bindgen.ml" target=3D"_blank">libuv_bind=
gen.ml</a>.<br>
</blockquote>

--001a113d2bf2394cad050615d382--

From yallop@gmail.com  Sat Oct 25 18:51:41 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-51.csi.cam.ac.uk (ppsw-51.csi.cam.ac.uk [131.111.8.151])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id BD1FA3C0D2
 for <ctypes@lists.ocaml.org>; Sat, 25 Oct 2014 18:51:41 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1634030 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.174 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f174.google.com ([209.85.212.174]:48886)
 by ppsw-51.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1Xi67G-0003LY-XI (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Sat, 25 Oct 2014 19:31:07 +0100
Received: by mail-wi0-f174.google.com with SMTP id q5so3473612wiv.1
 for <ctypes@lists.ocaml.org>; Sat, 25 Oct 2014 11:31:06 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=y5Xoy/gHL84IKzfSsnBCo9WUTUS8+ziqry7PwZvjCmE=;
 b=udGyNcb3YEN98ZJ8+U4Ihr4w0Qo7JqFzcUTcEBcOnMzerBl02IR8oeenLWhP9okUhe
 sTZMk55dhwsVAbS3UrPo+G9oQ93wNiw6l19OmFYO4aPPIhVsYW4b2giHcUl6pjze05/F
 FHVQ7pJv1ZCPQB2xvykhWGSBZRuHdrE5E+y5cqLJVlXZGcqohrSV1+nkmHzqd4DL1Ex8
 myDVoz0Cu96IdbBCIQnPnlbq/BWzEXql+PEYtmmkt3yu2vQ4Q2i855wkuPMM5e+utKPU
 gwH79/s+ViCMDfsYgKKksGfRErj8jyEERdm3Li+1CwbOlLaz2TvdwHwMv0LRr+EDx/s8
 v4HA==
MIME-Version: 1.0
X-Received: by 10.180.99.105 with SMTP id ep9mr3717399wib.82.1414261865984;
 Sat, 25 Oct 2014 11:31:05 -0700 (PDT)
Received: by 10.217.115.5 with HTTP; Sat, 25 Oct 2014 11:31:05 -0700 (PDT)
In-Reply-To: <CAAxsn=FLvwohow+HKO34PLdVjnDEYJi7ecUA29uA_CgBM8w4_w@mail.gmail.com>
References: <CAG-KTt9684d_SCqp_MtaGSuqAhnZ0mNSmGwdw7LQZm_81ShnRQ@mail.gmail.com>
 <1B1F99FDB4384237A2DC7B1F4C87E4E2@erratique.ch>
 <CAG-KTt9yHoZiAwiJ-vMmSHt5LMTOhHX3rCjv2FTrvzuEd-YTZw@mail.gmail.com>
 <B36B4944FE38422AB6DD2EAF2F50CE64@erratique.ch>
 <CAG-KTt86Xoa6TG0ohXwCcWJ8+C+-Fkv_OCCqyOrSB4M8DyowiQ@mail.gmail.com>
 <CAAxsn=FPsO2QHVLzNJ09cuLaut-AgsTaXzS0G98j6Nxgn5isAA@mail.gmail.com>
 <CAAxsn=Hp5ZB8dE+wJi1ZMfbPJ_wbL_vFN+-=VXJRs8NhKU3N9g@mail.gmail.com>
 <673FCD9F382E4A61A547AE5D74100B12@erratique.ch>
 <CAG-KTt8xjcYZ877-_oSVepgAqAfFq7g8zLtcM8BZDRB=oTtfSQ@mail.gmail.com>
 <CAAxsn=FLvwohow+HKO34PLdVjnDEYJi7ecUA29uA_CgBM8w4_w@mail.gmail.com>
Date: Sat, 25 Oct 2014 19:31:05 +0100
Message-ID: <CAAxsn=GrfdjkfALb5czrtLYMCLacV5EZbGtK4doVSyWqha8pCg@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Trevor Smith <trevorsummerssmith@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Defines,
	and Structs with platform-specific fields
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sat, 25 Oct 2014 17:51:41 -0000

On 20 October 2014 21:46, Jeremy Yallop <yallop@gmail.com> wrote:
> This discussion is a useful reminder that ctypes really needs support
> for retrieving struct layout details from the declared API.  I'll look
> at how to add that support later this week and report back.

I've added support for retrieving struct layout from C in a pull request:

    https://github.com/ocamllabs/ocaml-ctypes/pull/62

It works in a very similar fashion to cstubs: you put your struct
declaration inside a functor

  module Bindings(S : Cstubs_structs.STRUCT) =
  struct
    open S
    let cell       = structure "cell"
    let payload = field cell int "payload"
    let next      = field cell (ptr cell) "next"
    let ()          = seal cell
  end

and then call Cstubs_structs.write_c to generate an ML module with
which to instantiate the functor.

The pull request has more details and some illustrative tests.

From ag400@leicester.ac.uk  Mon Oct 27 11:29:10 2014
Return-Path: <ag400@leicester.ac.uk>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id DD3543C0D8
 for <ctypes@lists.ocaml.org>; Mon, 27 Oct 2014 11:29:10 +0000 (GMT)
X-Cam-SpamDetails: score -2.3 from SpamAssassin-3.3.2-1634279 
 * -2.3 RCVD_IN_DNSWL_MED RBL: Sender listed at http://www.dnswl.org/,
 *      medium trust
 *      [143.210.16.37 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from gemsbok.le.ac.uk ([143.210.16.37]:39410)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:DHE-RSA-AES128-SHA:128)
 id 1Xij6E-0001gF-Ek (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <ag400@leicester.ac.uk>); Mon, 27 Oct 2014 12:08:41 +0000
Received: from host-161-157.eduroam-local.wifi.le.ac.uk
 ([143.210.161.157]:58051)
 by gemsbok.le.ac.uk with esmtpsa (TLS1.2:DHE_RSA_AES_128_CBC_SHA1:128)
 (Exim 4.80) (envelope-from <ag400@leicester.ac.uk>)
 id 1Xij6E-0000kS-3x
 for ctypes@lists.ocaml.org; Mon, 27 Oct 2014 12:08:38 +0000
Message-ID: <544E35C7.1060003@le.ac.uk>
Date: Mon, 27 Oct 2014 12:08:39 +0000
From: Andrea Giugliano <ag400@leicester.ac.uk>
User-Agent: Mozilla/5.0 (X11; Linux x86_64;
 rv:31.0) Gecko/20100101 Thunderbird/31.2.0
MIME-Version: 1.0
To: ctypes@lists.ocaml.org
Content-Type: multipart/mixed; boundary="------------070808010105000400080003"
X-UoL-Id: 538c69963f1f2c28a571238e48fddf93@1Xij6E-0000kS-3x@gemsbok.le.ac.uk
X-Authenticated-User: ag400
X-Mailman-Approved-At: Mon, 27 Oct 2014 11:31:45 +0000
Subject: [ocaml-ctypes] Cheating on Foreign.foreign to use Unix.stat stubs
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 27 Oct 2014 11:29:11 -0000

This is a multi-part message in MIME format.
--------------070808010105000400080003
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 7bit

Hello everyone,

I am using ctypes in order to passing null pointers as input of Unix 
syscalls.
So far we used the Unix OCaml library to use syscalls (open, chdir, stat),
but it does not allow passing null pointers as input paths of the 
syscalls (i.e. mkdir NULL is not possible using OCaml Unix.mkdir).

The thing is I would like to avoid implementing again the logic of Unix 
operations after having create ctypes stubs,
instead I was successful so far in using the Unix stubs as my C 
functions. For instance I can have:

let my_mkdir = Foreign.foreign "unix_mkdir" ~checkerrno:true (string_opt 
@-> returning int)

Now this does not work with the stat syscall, because it returns a data 
structure.
The data structure returned is an OCaml type (indeed it is a Unix C stub 
I am using),
ctypes expects a C structure, and I convert the expected C structure in 
a OCaml type again.

The question is: did anyone of you try to cheat too?
Is that just a completely wrong use case of ctypes (poor -lazy- me I 
must implement again the logic of Unix!)?
Thanks a lot,

Andrea

P.S: I attach the code I was trying to run for the stat function: it 
worst case it can be used as "don't do this!"

--------------070808010105000400080003
Content-Type: text/plain; charset=UTF-8;
 name="stat.ml"
Content-Transfer-Encoding: base64
Content-Disposition: attachment;
 filename="stat.ml"

b3BlbiBDdHlwZXMKb3BlbiBQb3NpeFR5cGVzCm9wZW4gVW5zaWduZWQKCnR5cGUgc3RhdHMK
bGV0IHN0YXRzIDogc3RhdHMgc3RydWN0dXJlIHR5cCA9IHN0cnVjdHVyZSAiU3RhdCIKbGV0
ICggLToqICkgcyB4ID0gZmllbGQgc3RhdHMgcyB4CmxldCBzdF9kZXYgPSAic3RfZGV2IiAt
OiogZGV2X3QKbGV0IHN0X2lubyA9ICJzdF9pbm8iIC06KiBpbnQKbGV0IHN0X2tpbmQ9ICJz
dF9raW5kIiAtOiogaW50CmxldCBzdF9wZXJtPSAic3RfcGVybSIgLToqIGludApsZXQgc3Rf
bmxpbmsgPSAic3RfbmxpbmsiIC06KiBpbnQKbGV0IHN0X3VpZCA9ICJzdF91aWQiIC06KiBp
bnQKbGV0IHN0X2dpZCA9ICJzdF9naWQiIC06KiBpbnQKbGV0IHN0X3JkZXYgPSAic3RfcmRl
diIgLToqIGludApsZXQgc3Rfc2l6ZSA9ICJzdF9zaXplIiAtOiogaW50NjRfdApsZXQgc3Rf
YXRpbWUgPSAic3RfYXRpbWUiIC06KiBkb3VibGUKbGV0IHN0X210aW1lID0gInN0X210aW1l
IiAtOiogZG91YmxlCmxldCBzdF9jdGltZSA9ICJzdF9jdGltZSIgLToqIGRvdWJsZQpsZXQg
KCkgPSBzZWFsIHN0YXRzCgpsZXQgc3RfZGV2X2ludCBzID0gVUludDY0LnRvX2ludCAoY29l
cmNlIGRldl90IHVpbnQ2NF90IChnZXRmIHMgc3RfZGV2KSkKbGV0IHN0X2lub19pbnQgcyA9
ICAoZ2V0ZiBzIHN0X2lubykKbGV0IHN0X25saW5rX2ludCBzID0gKGdldGYgcyBzdF9ubGlu
aykKbGV0IHN0X3Blcm1faW50IHMgPSAoZ2V0ZiBzIHN0X3Blcm0pCmxldCBzdF9raW5kX2tp
bmQgcyA9IG1hdGNoIChnZXRmIHMgc3Rfa2luZCkgd2l0aCB8IF8gLT4gU19SRUcKbGV0IHN0
X3VpZF9pbnQgcyA9ICAgKGdldGYgcyBzdF91aWQpCmxldCBzdF9naWRfaW50IHMgPSAgKGdl
dGYgcyBzdF9naWQpCmxldCBzdF9yZGV2X2ludCBzID0gKGdldGYgcyBzdF9yZGV2KQpsZXQg
c3Rfc2l6ZV9pbnQgcyA9IChnZXRmIHMgc3Rfc2l6ZSkKbGV0IHN0X2F0aW1lX2Zsb2F0IHMg
PSAoZ2V0ZiBzIHN0X2F0aW1lKQpsZXQgc3RfbXRpbWVfZmxvYXQgcyA9IChnZXRmIHMgc3Rf
bXRpbWUpCmxldCBzdF9jdGltZV9mbG9hdCBzID0gIChnZXRmIHMgc3RfY3RpbWUpCgoKbGV0
IHRvX3VuaXggdCA9IEN0eXBlcy4oVW5peC5MYXJnZUZpbGUuKHsKICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICBzdF9kZXYgID0gc3RfZGV2X2ludCB0OwogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0X2lubyAgPSBzdF9pbm9f
aW50IHQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Rfa2lu
ZCA9IHN0X2tpbmRfa2luZCB0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIHN0X3Blcm0gPSBzdF9wZXJtX2ludCB0OwogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIHN0X25saW5rPSBzdF9ubGlua19pbnQgdDsKICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdF91aWQgID0gc3RfdWlkX2ludCB0
OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0X2dpZCAgPSBz
dF9naWRfaW50IHQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
c3RfcmRldiA9IHN0X3JkZXZfaW50IHQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgc3Rfc2l6ZSA9IHN0X3NpemVfaW50IHQ7CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgc3RfYXRpbWU9IHN0X2F0aW1lX2Zsb2F0IHQ7CiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RfbXRpbWU9IHN0X210
aW1lX2Zsb2F0IHQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
c3RfY3RpbWU9IHN0X2N0aW1lX2Zsb2F0IHQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIH0pKQpsZXQgc3RhdCA9IEZvcmVpZ24uZm9yZWlnbiAidW5peF9zdGF0
XzY0IiB+Y2hlY2tfZXJybm86dHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAoc3Ry
aW5nX29wdCBALT4gcmV0dXJuaW5nIChwdHIgc3RhdHMpKQo=
--------------070808010105000400080003--

From yallop@gmail.com  Tue Oct 28 21:21:03 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 3DC113C0D8
 for <ctypes@lists.ocaml.org>; Tue, 28 Oct 2014 21:21:03 +0000 (GMT)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1634476 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.45 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wg0-f45.google.com ([74.125.82.45]:63732)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XjEog-00023H-rI (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 28 Oct 2014 22:00:39 +0000
Received: by mail-wg0-f45.google.com with SMTP id x12so547680wgg.32
 for <ctypes@lists.ocaml.org>; Tue, 28 Oct 2014 15:00:38 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=KuM/Y/6QSV3Z66VxXr8s72UPc6s/rsTo19aIw08HshM=;
 b=d9OxLWhfhHssy/sU1wKvtXae/9+p0qiAzm42zbjv7lTAxQt0LN41NhRtAdaHmWY1g8
 Ht2oiZRXyJtzBwVAXCbCVOT8aeSDNW3+GkJQJ1qHD0sa1F8y9bndv7mGwOXRmHvFFgki
 SvBCPipl3k8nnBUbOvT8aNIEwWODJC2umRyo4QCII8jGlUwjsQ3hPaUb7e89zTDIuOdm
 CysfnS7fdL/6W03Rqy+T46YNxLVDHMvw1mw4mj5qXKQ+09pN7gLwv9Z9dTZdx8idN6NG
 +Xg9UfUSEgNt9M1lI2ZtD4HjHmV1vQIg5l8I96+sUOSf8NITAHCac6QG+myTXF64w5nJ
 r64g==
MIME-Version: 1.0
X-Received: by 10.180.99.105 with SMTP id ep9mr8208036wib.82.1414533638133;
 Tue, 28 Oct 2014 15:00:38 -0700 (PDT)
Received: by 10.217.115.5 with HTTP; Tue, 28 Oct 2014 15:00:38 -0700 (PDT)
In-Reply-To: <544E35C7.1060003@le.ac.uk>
References: <544E35C7.1060003@le.ac.uk>
Date: Tue, 28 Oct 2014 22:00:38 +0000
Message-ID: <CAAxsn=HPW9RjjG+afjW3jNUxvwENCKm4CqrQqmonqY3Z+hzCDw@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Andrea Giugliano <ag400@leicester.ac.uk>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Cheating on Foreign.foreign to use Unix.stat
	stubs
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 28 Oct 2014 21:21:03 -0000

On 27 October 2014 12:08, Andrea Giugliano <ag400@leicester.ac.uk> wrote:
> I am using ctypes in order to passing null pointers as input of Unix
> syscalls.
> So far we used the Unix OCaml library to use syscalls (open, chdir, stat),
> but it does not allow passing null pointers as input paths of the syscalls
> (i.e. mkdir NULL is not possible using OCaml Unix.mkdir).
>
> The thing is I would like to avoid implementing again the logic of Unix
> operations after having create ctypes stubs,
> instead I was successful so far in using the Unix stubs as my C functions.
> For instance I can have:
>
> let my_mkdir = Foreign.foreign "unix_mkdir" ~checkerrno:true (string_opt @->
> returning int)

While this approach works to some extent, it's not recommended.  The
unix_mkdir function accepts and returns 'value' values, not strings
and ints:

   value unix_mkdir(value path, value perm)
   https://github.com/ocaml/ocaml/blob/98e0051f/otherlibs/unix/mkdir.c#L21

Now, an OCaml string stored in a 'value' is represented similarly to a
C string -- i.e. as a pointer to the first byte of an array of char --
so some C functions that accept a 'value' will work as you expect when
you pass then a string using ctypes.  However, you're likely to run
into unexpected behaviour very quickly:

   # let string_length = Foreign.foreign "caml_string_length"  (string
@-> returning int);;
   val string_length : string -> int = <fun>
   # string_length "abc";;
   - : int = -1

There's good news, though: the Unix stubs in the standard library are
only thin wrappers around system calls, so you won't lose much by
binding to the system calls directly.  Further, David Sheets has
already written ctypes bindings to some of the functions you need; his
bindings don't currently accept null pointers, but you may be able to
adapt them to your needs:

   https://github.com/dsheets/ocaml-unix-sys-stat/blob/master/lib/ctypes/unix_sys_stat.mli

From trevorsummerssmith@gmail.com  Thu Oct 30 11:55:09 2014
Return-Path: <trevorsummerssmith@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 333AD3C1D1
 for <ctypes@lists.ocaml.org>; Thu, 30 Oct 2014 11:55:09 +0000 (GMT)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1634816 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.218.41 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (trevorsummerssmith[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-oi0-f41.google.com ([209.85.218.41]:54928)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XjowD-0007bV-ES (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <trevorsummerssmith@gmail.com>); Thu, 30 Oct 2014 12:34:50 +0000
Received: by mail-oi0-f41.google.com with SMTP id e131so3950141oig.0
 for <ctypes@lists.ocaml.org>; Thu, 30 Oct 2014 05:34:48 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=8OHB0ZhykcQesyzmh+i2xMQ5cjnNuyvlXgPMKNsw5sc=;
 b=F7fiwk4zjosRxd3oYz3CZH1hMFZ+OsR5DzmwQ2mKcAf/iafhthn5CfU+B/olei62DR
 qSS58su7oR5C9H88tg9zWrWOpTn9fFxseUBidtWP169Z4vNNbxC/o0RZT7zOXWF+M9R8
 tsmBR/7tq9x0SyeMotb76oOKIsc10TBWXVQ5ncR7JcoIYbicT7YnlFAoXv7OP7eadsJZ
 Jjh+8rKPoKXqsDzS5Fi2H9II2n5NdX47cDG8+YcVhDnG0LnxAXaLu36LwH3PLmyyQBhy
 HD54xa7nDigZr+etAE3EXQXtCwDY7DvfoOx2FXSRfEDKx+nD+fBqf+kS0BbZ/cE2QB3v
 kcLg==
MIME-Version: 1.0
X-Received: by 10.202.224.65 with SMTP id x62mr606185oig.91.1414672488100;
 Thu, 30 Oct 2014 05:34:48 -0700 (PDT)
Received: by 10.182.130.229 with HTTP; Thu, 30 Oct 2014 05:34:48 -0700 (PDT)
In-Reply-To: <CAAxsn=GrfdjkfALb5czrtLYMCLacV5EZbGtK4doVSyWqha8pCg@mail.gmail.com>
References: <CAG-KTt9684d_SCqp_MtaGSuqAhnZ0mNSmGwdw7LQZm_81ShnRQ@mail.gmail.com>
 <1B1F99FDB4384237A2DC7B1F4C87E4E2@erratique.ch>
 <CAG-KTt9yHoZiAwiJ-vMmSHt5LMTOhHX3rCjv2FTrvzuEd-YTZw@mail.gmail.com>
 <B36B4944FE38422AB6DD2EAF2F50CE64@erratique.ch>
 <CAG-KTt86Xoa6TG0ohXwCcWJ8+C+-Fkv_OCCqyOrSB4M8DyowiQ@mail.gmail.com>
 <CAAxsn=FPsO2QHVLzNJ09cuLaut-AgsTaXzS0G98j6Nxgn5isAA@mail.gmail.com>
 <CAAxsn=Hp5ZB8dE+wJi1ZMfbPJ_wbL_vFN+-=VXJRs8NhKU3N9g@mail.gmail.com>
 <673FCD9F382E4A61A547AE5D74100B12@erratique.ch>
 <CAG-KTt8xjcYZ877-_oSVepgAqAfFq7g8zLtcM8BZDRB=oTtfSQ@mail.gmail.com>
 <CAAxsn=FLvwohow+HKO34PLdVjnDEYJi7ecUA29uA_CgBM8w4_w@mail.gmail.com>
 <CAAxsn=GrfdjkfALb5czrtLYMCLacV5EZbGtK4doVSyWqha8pCg@mail.gmail.com>
Date: Thu, 30 Oct 2014 08:34:48 -0400
Message-ID: <CAG-KTt8bARJ7_dNr9qhinnzMMC6ER6YCkAmdCWwoBD4JMZp7tA@mail.gmail.com>
From: Trevor Smith <trevorsummerssmith@gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Content-Type: multipart/alternative; boundary=001a113d2bba207c4f0506a31b92
Cc: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Defines,
	and Structs with platform-specific fields
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 30 Oct 2014 11:55:09 -0000

--001a113d2bba207c4f0506a31b92
Content-Type: text/plain; charset=UTF-8

Jeremy,

Thanks for this work! I just got a chance this morning to take a look. This
work should save me a ton of time.

I'm having problems referencing a cstub'd struct within another cstub'd
struct. Looking at the types it doesn't seem that this would work  - the
cstubs typ is different than the Ctypes.typ. I reproduced a tiny example in
the cstubs test files (diff below).

Thoughts? Thanks.

Trevor

Diff:

diff --git a/tests/clib/test_functions.h b/tests/clib/test_functions.h
index 17ec554..ec0e449 100644
--- a/tests/clib/test_functions.h
+++ b/tests/clib/test_functions.h
@@ -164,7 +164,7 @@ void post1_wait2(void);
 void post2_wait1(void);

 struct s1 { int x1, x2, x3, x4; };
-struct s2 { int y1, y2, y3, y4; };
+struct s2 { int y1, y2, y3, y4; struct s1 foo; };

 size_t sizeof_s1(void);
 size_t alignmentof_s1(void);
diff --git a/tests/test-structs/stubs/types.ml b/tests/test-structs/stubs/
types.ml
index d03f497..fc54f25 100644
--- a/tests/test-structs/stubs/types.ml
+++ b/tests/test-structs/stubs/types.ml
@@ -21,5 +21,6 @@ struct
   let s2 : [`s2] structure typ = structure "s2"
   let y2 = field s2 "y2" int
   let y1 = field s2 "y1" int
+  let foo = field s2 "foo" s1
   let () = seal s2
 end

Build error:

File "tests/test-structs/stubs/types.ml", line 24, characters 32-34:
Error: This expression has type [ `s1 ] Ctypes.structure S.typ
       but an expression was expected of type 'a Ctypes.typ = 'a Static.typ


On Sat, Oct 25, 2014 at 2:31 PM, Jeremy Yallop <yallop@gmail.com> wrote:

> On 20 October 2014 21:46, Jeremy Yallop <yallop@gmail.com> wrote:
> > This discussion is a useful reminder that ctypes really needs support
> > for retrieving struct layout details from the declared API.  I'll look
> > at how to add that support later this week and report back.
>
> I've added support for retrieving struct layout from C in a pull request:
>
>     https://github.com/ocamllabs/ocaml-ctypes/pull/62
>
> It works in a very similar fashion to cstubs: you put your struct
> declaration inside a functor
>
>   module Bindings(S : Cstubs_structs.STRUCT) =
>   struct
>     open S
>     let cell       = structure "cell"
>     let payload = field cell int "payload"
>     let next      = field cell (ptr cell) "next"
>     let ()          = seal cell
>   end
>
> and then call Cstubs_structs.write_c to generate an ML module with
> which to instantiate the functor.
>
> The pull request has more details and some illustrative tests.
>

--001a113d2bba207c4f0506a31b92
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Jeremy,<div><br></div><div>Thanks for this work! I just go=
t a chance this morning to take a look. This work should save me a ton of t=
ime.</div><div><br></div><div>I&#39;m having problems referencing a cstub&#=
39;d struct within another cstub&#39;d struct. Looking at the types it does=
n&#39;t seem that this would work =C2=A0- the cstubs typ is different than =
the Ctypes.typ. I reproduced a tiny example in the cstubs test files (diff =
below).</div><div><br></div><div>Thoughts? Thanks.</div><div><br></div><div=
>Trevor</div><div><br></div><div>Diff:</div><div><br></div><div><div>diff -=
-git a/tests/clib/test_functions.h b/tests/clib/test_functions.h</div><div>=
index 17ec554..ec0e449 100644</div><div>--- a/tests/clib/test_functions.h</=
div><div>+++ b/tests/clib/test_functions.h</div><div>@@ -164,7 +164,7 @@ vo=
id post1_wait2(void);</div><div>=C2=A0void post2_wait1(void);</div><div><br=
></div><div>=C2=A0struct s1 { int x1, x2, x3, x4; };</div><div>-struct s2 {=
 int y1, y2, y3, y4; };</div><div>+struct s2 { int y1, y2, y3, y4; struct s=
1 foo; };</div><div><br></div><div>=C2=A0size_t sizeof_s1(void);</div><div>=
=C2=A0size_t alignmentof_s1(void);</div><div>diff --git a/tests/test-struct=
s/stubs/<a href=3D"http://types.ml">types.ml</a> b/tests/test-structs/stubs=
/<a href=3D"http://types.ml">types.ml</a></div><div>index d03f497..fc54f25 =
100644</div><div>--- a/tests/test-structs/stubs/<a href=3D"http://types.ml"=
>types.ml</a></div><div>+++ b/tests/test-structs/stubs/<a href=3D"http://ty=
pes.ml">types.ml</a></div><div>@@ -21,5 +21,6 @@ struct</div><div>=C2=A0 =
=C2=A0let s2 : [`s2] structure typ =3D structure &quot;s2&quot;</div><div>=
=C2=A0 =C2=A0let y2 =3D field s2 &quot;y2&quot; int</div><div>=C2=A0 =C2=A0=
let y1 =3D field s2 &quot;y1&quot; int</div><div>+ =C2=A0let foo =3D field =
s2 &quot;foo&quot; s1</div><div>=C2=A0 =C2=A0let () =3D seal s2</div><div>=
=C2=A0end</div></div><div><br></div><div>Build error:</div><div><br></div><=
div><div>File &quot;tests/test-structs/stubs/<a href=3D"http://types.ml">ty=
pes.ml</a>&quot;, line 24, characters 32-34:</div><div>Error: This expressi=
on has type [ `s1 ] Ctypes.structure S.typ</div><div>=C2=A0 =C2=A0 =C2=A0 =
=C2=A0but an expression was expected of type &#39;a Ctypes.typ =3D &#39;a S=
tatic.typ</div></div><div><br></div></div><div class=3D"gmail_extra"><br><d=
iv class=3D"gmail_quote">On Sat, Oct 25, 2014 at 2:31 PM, Jeremy Yallop <sp=
an dir=3D"ltr">&lt;<a href=3D"mailto:yallop@gmail.com" target=3D"_blank">ya=
llop@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" s=
tyle=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><spa=
n class=3D"">On 20 October 2014 21:46, Jeremy Yallop &lt;<a href=3D"mailto:=
yallop@gmail.com">yallop@gmail.com</a>&gt; wrote:<br>
&gt; This discussion is a useful reminder that ctypes really needs support<=
br>
&gt; for retrieving struct layout details from the declared API.=C2=A0 I&#3=
9;ll look<br>
&gt; at how to add that support later this week and report back.<br>
<br>
</span>I&#39;ve added support for retrieving struct layout from C in a pull=
 request:<br>
<br>
=C2=A0 =C2=A0 <a href=3D"https://github.com/ocamllabs/ocaml-ctypes/pull/62"=
 target=3D"_blank">https://github.com/ocamllabs/ocaml-ctypes/pull/62</a><br=
>
<br>
It works in a very similar fashion to cstubs: you put your struct<br>
declaration inside a functor<br>
<br>
=C2=A0 module Bindings(S : Cstubs_structs.STRUCT) =3D<br>
=C2=A0 struct<br>
=C2=A0 =C2=A0 open S<br>
=C2=A0 =C2=A0 let cell=C2=A0 =C2=A0 =C2=A0 =C2=A0=3D structure &quot;cell&q=
uot;<br>
=C2=A0 =C2=A0 let payload =3D field cell int &quot;payload&quot;<br>
=C2=A0 =C2=A0 let next=C2=A0 =C2=A0 =C2=A0 =3D field cell (ptr cell) &quot;=
next&quot;<br>
=C2=A0 =C2=A0 let ()=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =3D seal cell<br>
=C2=A0 end<br>
<br>
and then call Cstubs_structs.write_c to generate an ML module with<br>
which to instantiate the functor.<br>
<br>
The pull request has more details and some illustrative tests.<br>
</blockquote></div><br></div>

--001a113d2bba207c4f0506a31b92--

From yallop@gmail.com  Mon Nov  3 15:06:05 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 07F163C258
 for <ctypes@lists.ocaml.org>; Mon,  3 Nov 2014 15:06:05 +0000 (GMT)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1634816 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.49 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wg0-f49.google.com ([74.125.82.49]:39173)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XlJpP-0001PV-lS (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Mon, 03 Nov 2014 15:46:00 +0000
Received: by mail-wg0-f49.google.com with SMTP id x13so11353300wgg.36
 for <ctypes@lists.ocaml.org>; Mon, 03 Nov 2014 07:45:59 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=DcB2Lr5gmIDKOm6pgdd8GLZgSRTalf0bDxMBHPqJ/wY=;
 b=d/I+yjz9I7ZZfuQ5AAVO4nvEO1c0z7YjOgZIbqz5yFmJK/TBuBIH9MuINCcHqpKo7C
 dtVM861zWhKQq51taZ+EjB/gX6Mc+rD0hqvd8Co6ccDk133wBSPR9EPark02hylY7YAR
 NHRsOKEoK1Pk8s8e91IZeSFnXmxdN7WoOqQIOsW1Rv/VJxUuC0OjM0GWtKBNGZ/Mrw7v
 iWgdCpqbQNF1wP1jWgKAeLq+AO6JSEEaKEplpYFXzO+49jDwrK3UdqhaOFxIec+4LJU0
 mnIuHb6DFtzjo+gos2a+eanc81onCYtRg7NdKP4UAVD0Yruf/RzjiTnDvvceCclY3RO1
 W4CQ==
MIME-Version: 1.0
X-Received: by 10.194.222.162 with SMTP id qn2mr49380157wjc.74.1415029559336; 
 Mon, 03 Nov 2014 07:45:59 -0800 (PST)
Received: by 10.217.115.5 with HTTP; Mon, 3 Nov 2014 07:45:59 -0800 (PST)
In-Reply-To: <CAG-KTt8bARJ7_dNr9qhinnzMMC6ER6YCkAmdCWwoBD4JMZp7tA@mail.gmail.com>
References: <CAG-KTt9684d_SCqp_MtaGSuqAhnZ0mNSmGwdw7LQZm_81ShnRQ@mail.gmail.com>
 <1B1F99FDB4384237A2DC7B1F4C87E4E2@erratique.ch>
 <CAG-KTt9yHoZiAwiJ-vMmSHt5LMTOhHX3rCjv2FTrvzuEd-YTZw@mail.gmail.com>
 <B36B4944FE38422AB6DD2EAF2F50CE64@erratique.ch>
 <CAG-KTt86Xoa6TG0ohXwCcWJ8+C+-Fkv_OCCqyOrSB4M8DyowiQ@mail.gmail.com>
 <CAAxsn=FPsO2QHVLzNJ09cuLaut-AgsTaXzS0G98j6Nxgn5isAA@mail.gmail.com>
 <CAAxsn=Hp5ZB8dE+wJi1ZMfbPJ_wbL_vFN+-=VXJRs8NhKU3N9g@mail.gmail.com>
 <673FCD9F382E4A61A547AE5D74100B12@erratique.ch>
 <CAG-KTt8xjcYZ877-_oSVepgAqAfFq7g8zLtcM8BZDRB=oTtfSQ@mail.gmail.com>
 <CAAxsn=FLvwohow+HKO34PLdVjnDEYJi7ecUA29uA_CgBM8w4_w@mail.gmail.com>
 <CAAxsn=GrfdjkfALb5czrtLYMCLacV5EZbGtK4doVSyWqha8pCg@mail.gmail.com>
 <CAG-KTt8bARJ7_dNr9qhinnzMMC6ER6YCkAmdCWwoBD4JMZp7tA@mail.gmail.com>
Date: Mon, 3 Nov 2014 15:45:59 +0000
Message-ID: <CAAxsn=EdMC_C8A-JDx29-jVSHOJk50AZVXtUJjmq0vU+CUbRHw@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Trevor Smith <trevorsummerssmith@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Defines,
	and Structs with platform-specific fields
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 03 Nov 2014 15:06:05 -0000

On 30 October 2014 12:34, Trevor Smith <trevorsummerssmith@gmail.com> wrote:
> Thanks for this work! I just got a chance this morning to take a look. This
> work should save me a ton of time.
>
> I'm having problems referencing a cstub'd struct within another cstub'd
> struct. Looking at the types it doesn't seem that this would work  - the
> cstubs typ is different than the Ctypes.typ. I reproduced a tiny example in
> the cstubs test files (diff below).

Right: this is a difficulty with the current approach.  You can work
round it, of course, by generating each struct via a separate functor,
but that's terribly clunky, especially where there are self references
involved.

We really need to embrace the fact that the stub generation approach
involves staging, and make that explicit in the interface somehow.
David Sheets and I have considered adding an 'applicative' for staging
in the past, but I've been reluctant because it makes the interface
more complicated.

An interface with staging might work as follows: values, and
specifically values that represent types, are classified as either
'present' or 'future' according to whether we know about them now or
whether we have to generate some code to learn about them.  For
example, 'int' is present, since we know its size etc. now, but
'struct uv_loop_s' is future: we have to generate some C code to
determine its properties.  Present values can be used to build either
present or future values, but future values can only be used to build
future values: we don't get access to the future in advance.

The interface looks like this:

    https://github.com/yallop/ocaml-ctypes/blob/staged-struct-stubs/src/cstubs/cstubs_structs.mli

There are a couple of extra functions !^ and <*> for lifting present
values into the future and for future application, and the structure,
union, etc. functions now create future typ values rather than values
of an abstract type.  In practice it looks much the same as before,
except for a little extra syntactic noise when you use a present value
in a future definition -- for example, when you build a future struct
definition with an int field:

   https://github.com/yallop/ocaml-ctypes/blob/staged-struct-stubs/src/cstubs/cstubs_structs.mli#L16-L17

Is this approach intelligible?  Overly complex?  Thoughts welcome.

From daniel.buenzli@erratique.ch  Mon Nov  3 15:29:46 2014
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id E203A3C258
 for <ctypes@lists.ocaml.org>; Mon,  3 Nov 2014 15:29:46 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1634816
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:57626
 helo=smtp.webfaction.com)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtp id 1XlKCL-0001gW-FW (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Mon, 03 Nov 2014 16:09:42 +0000
Received: from [172.20.10.2] (196-236.197-178.cust.bluewin.ch
 [178.197.236.196])
 by smtp.webfaction.com (Postfix) with ESMTP id 0540A2085EFD;
 Mon,  3 Nov 2014 16:09:39 +0000 (UTC)
Date: Mon, 3 Nov 2014 17:09:42 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Jeremy Yallop <yallop@gmail.com>
Message-ID: <D7E3406B113240F0866BA7FA46B2FD99@erratique.ch>
In-Reply-To: <CAAxsn=EdMC_C8A-JDx29-jVSHOJk50AZVXtUJjmq0vU+CUbRHw@mail.gmail.com>
References: <CAG-KTt9684d_SCqp_MtaGSuqAhnZ0mNSmGwdw7LQZm_81ShnRQ@mail.gmail.com>
 <1B1F99FDB4384237A2DC7B1F4C87E4E2@erratique.ch>
 <CAG-KTt9yHoZiAwiJ-vMmSHt5LMTOhHX3rCjv2FTrvzuEd-YTZw@mail.gmail.com>
 <B36B4944FE38422AB6DD2EAF2F50CE64@erratique.ch>
 <CAG-KTt86Xoa6TG0ohXwCcWJ8+C+-Fkv_OCCqyOrSB4M8DyowiQ@mail.gmail.com>
 <CAAxsn=FPsO2QHVLzNJ09cuLaut-AgsTaXzS0G98j6Nxgn5isAA@mail.gmail.com>
 <CAAxsn=Hp5ZB8dE+wJi1ZMfbPJ_wbL_vFN+-=VXJRs8NhKU3N9g@mail.gmail.com>
 <673FCD9F382E4A61A547AE5D74100B12@erratique.ch>
 <CAG-KTt8xjcYZ877-_oSVepgAqAfFq7g8zLtcM8BZDRB=oTtfSQ@mail.gmail.com>
 <CAAxsn=FLvwohow+HKO34PLdVjnDEYJi7ecUA29uA_CgBM8w4_w@mail.gmail.com>
 <CAAxsn=GrfdjkfALb5czrtLYMCLacV5EZbGtK4doVSyWqha8pCg@mail.gmail.com>
 <CAG-KTt8bARJ7_dNr9qhinnzMMC6ER6YCkAmdCWwoBD4JMZp7tA@mail.gmail.com>
 <CAAxsn=EdMC_C8A-JDx29-jVSHOJk50AZVXtUJjmq0vU+CUbRHw@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Cc: "=?utf-8?Q?ctypes=40lists.ocaml.org?=" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Defines,
 and Structs with platform-specific fields
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 03 Nov 2014 15:29:47 -0000

Le lundi, 3 novembre 2014 =C3=A0 16:45, Jeremy Yallop a =C3=A9crit :
> Is this approach intelligible=3F Overly complex=3F Thoughts welcome.


I think the litmus test for these kind of things is whether you get intel=
ligible type error messages.  Understanding those depends both on having =
good documentation strings for the types and not overly nested types and/=
or huge polyvars which seems to look ok here. =20

But please don't use too many operators, I'd rather have =60future=60 tha=
n =60=5E=21=60, so when I *read* code like:

future f <*> field =22bla=22  =20

then well, I know I'm dealing with the future. Having =5E=21 is one other=
 operator to mix-up with the couple of ones ctypes provides.

Best,

Daniel =20



From trevorsummerssmith@gmail.com  Mon Nov  3 20:22:40 2014
Return-Path: <trevorsummerssmith@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id EC84F3C258
 for <ctypes@lists.ocaml.org>; Mon,  3 Nov 2014 20:22:39 +0000 (GMT)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1634816 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.214.174 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (trevorsummerssmith[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-ob0-f174.google.com ([209.85.214.174]:56915)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XlOlm-0002FR-sU (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <trevorsummerssmith@gmail.com>); Mon, 03 Nov 2014 21:02:35 +0000
Received: by mail-ob0-f174.google.com with SMTP id uz6so9612427obc.5
 for <ctypes@lists.ocaml.org>; Mon, 03 Nov 2014 13:02:33 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=DXdCSuZuQbdp1df9YqWWkU7O6xxvmlM2MzNt/vQdwA0=;
 b=dNZFeSM55K6/nl8xBWgbhgqKjOOPX8QjcnptEFnSjyc5h2KhoghT4SGbjvOlIlvh0p
 BZakWzW2Zbi7Z0L1bqQJG05addX4nHoImyZpdXzFK8szhK9pr6KZY+251cx4nELnjYLv
 pSl/z2BG2S62RrM7+t+Q9bLWvt2DeaKcd/buQtdDlvE18v9zZizSOUBng4tc7KkYqY9E
 0hLKA/TFba9qs10ZmqWOkkkJZeJhbtbfZ0xcdOTXbDF8Eej+z+Bn6cJYA5CIOw3QlNn/
 0SUb7f1CcDlhNWilB62jS6p5KGz6Brq+cj5WNQBMufhOdU4Zm7+dO4PT+XYxVa1rIrS/
 A5hg==
MIME-Version: 1.0
X-Received: by 10.182.81.234 with SMTP id d10mr1997626oby.75.1415048553397;
 Mon, 03 Nov 2014 13:02:33 -0800 (PST)
Received: by 10.182.130.229 with HTTP; Mon, 3 Nov 2014 13:02:33 -0800 (PST)
In-Reply-To: <CAAxsn=EdMC_C8A-JDx29-jVSHOJk50AZVXtUJjmq0vU+CUbRHw@mail.gmail.com>
References: <CAG-KTt9684d_SCqp_MtaGSuqAhnZ0mNSmGwdw7LQZm_81ShnRQ@mail.gmail.com>
 <1B1F99FDB4384237A2DC7B1F4C87E4E2@erratique.ch>
 <CAG-KTt9yHoZiAwiJ-vMmSHt5LMTOhHX3rCjv2FTrvzuEd-YTZw@mail.gmail.com>
 <B36B4944FE38422AB6DD2EAF2F50CE64@erratique.ch>
 <CAG-KTt86Xoa6TG0ohXwCcWJ8+C+-Fkv_OCCqyOrSB4M8DyowiQ@mail.gmail.com>
 <CAAxsn=FPsO2QHVLzNJ09cuLaut-AgsTaXzS0G98j6Nxgn5isAA@mail.gmail.com>
 <CAAxsn=Hp5ZB8dE+wJi1ZMfbPJ_wbL_vFN+-=VXJRs8NhKU3N9g@mail.gmail.com>
 <673FCD9F382E4A61A547AE5D74100B12@erratique.ch>
 <CAG-KTt8xjcYZ877-_oSVepgAqAfFq7g8zLtcM8BZDRB=oTtfSQ@mail.gmail.com>
 <CAAxsn=FLvwohow+HKO34PLdVjnDEYJi7ecUA29uA_CgBM8w4_w@mail.gmail.com>
 <CAAxsn=GrfdjkfALb5czrtLYMCLacV5EZbGtK4doVSyWqha8pCg@mail.gmail.com>
 <CAG-KTt8bARJ7_dNr9qhinnzMMC6ER6YCkAmdCWwoBD4JMZp7tA@mail.gmail.com>
 <CAAxsn=EdMC_C8A-JDx29-jVSHOJk50AZVXtUJjmq0vU+CUbRHw@mail.gmail.com>
Date: Mon, 3 Nov 2014 16:02:33 -0500
Message-ID: <CAG-KTt_D6JUniMmURLFMfRjyRVT8rvtBgQKu6k0+ZEU0g+1kLA@mail.gmail.com>
From: Trevor Smith <trevorsummerssmith@gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Content-Type: multipart/alternative; boundary=047d7b2e40525d824e0506faaabc
Cc: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Defines,
	and Structs with platform-specific fields
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 03 Nov 2014 20:22:40 -0000

--047d7b2e40525d824e0506faaabc
Content-Type: text/plain; charset=UTF-8

Jeremy,

Your interface is kind of cool! There's something kind of fun about your
futures. However, I do think it adds complexity that perhaps is not needed.

I actually like the approach you suggested (earlier on this thread) of
using an abstract type and hand-creating accessors to the needed fields. I
like this approach because it does not add new ideas to the client's head.
Specifically, it would reuse the notion of an abstract type (which they
already are familiar with). Then the user needs to 1) ferry the size of the
type into Ocaml (my example does not currently do this, but this is
straightforward) and 2) generate the accessor functions (accessor generation
<https://github.com/trevorsummerssmith/ocaml-libuv/blob/test-lifecycle/lib_gen/libuv_accessor_gen.ml>
, ml accessors
<https://github.com/trevorsummerssmith/ocaml-libuv/blob/test-lifecycle/lib_gen/libuv_bindings.ml#L267>).
The code I wrote is a straightforward proof of concept that repeats a lot
of information.

However, *hand wave*, I think cstubs could be extended in a relatively
straightforward manor to generate this staged information, without
introducing new paradigms into the cstubs interface.

Thoughts? Thanks.

Trevor

On Mon, Nov 3, 2014 at 10:45 AM, Jeremy Yallop <yallop@gmail.com> wrote:

> On 30 October 2014 12:34, Trevor Smith <trevorsummerssmith@gmail.com>
> wrote:
> > Thanks for this work! I just got a chance this morning to take a look.
> This
> > work should save me a ton of time.
> >
> > I'm having problems referencing a cstub'd struct within another cstub'd
> > struct. Looking at the types it doesn't seem that this would work  - the
> > cstubs typ is different than the Ctypes.typ. I reproduced a tiny example
> in
> > the cstubs test files (diff below).
>
> Right: this is a difficulty with the current approach.  You can work
> round it, of course, by generating each struct via a separate functor,
> but that's terribly clunky, especially where there are self references
> involved.
>
> We really need to embrace the fact that the stub generation approach
> involves staging, and make that explicit in the interface somehow.
> David Sheets and I have considered adding an 'applicative' for staging
> in the past, but I've been reluctant because it makes the interface
> more complicated.
>
> An interface with staging might work as follows: values, and
> specifically values that represent types, are classified as either
> 'present' or 'future' according to whether we know about them now or
> whether we have to generate some code to learn about them.  For
> example, 'int' is present, since we know its size etc. now, but
> 'struct uv_loop_s' is future: we have to generate some C code to
> determine its properties.  Present values can be used to build either
> present or future values, but future values can only be used to build
> future values: we don't get access to the future in advance.
>
> The interface looks like this:
>
>
> https://github.com/yallop/ocaml-ctypes/blob/staged-struct-stubs/src/cstubs/cstubs_structs.mli
>
> There are a couple of extra functions !^ and <*> for lifting present
> values into the future and for future application, and the structure,
> union, etc. functions now create future typ values rather than values
> of an abstract type.  In practice it looks much the same as before,
> except for a little extra syntactic noise when you use a present value
> in a future definition -- for example, when you build a future struct
> definition with an int field:
>
>
> https://github.com/yallop/ocaml-ctypes/blob/staged-struct-stubs/src/cstubs/cstubs_structs.mli#L16-L17
>
> Is this approach intelligible?  Overly complex?  Thoughts welcome.
>

--047d7b2e40525d824e0506faaabc
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Jeremy,<div><br></div><div>Your interface is kind of cool!=
 There&#39;s something kind of fun about your futures. However, I do think =
it adds complexity that perhaps is not needed.</div><div><br></div><div>I a=
ctually like the approach you suggested (earlier on this thread) of using a=
n abstract type and hand-creating accessors to the needed fields. I like th=
is approach because it does not add new ideas to the client&#39;s head. Spe=
cifically, it would reuse the notion of an abstract type (which they alread=
y are familiar with). Then the user needs to 1) ferry the size of the type =
into Ocaml (my example does not currently do this, but this is straightforw=
ard) and 2) generate the accessor functions (<a href=3D"https://github.com/=
trevorsummerssmith/ocaml-libuv/blob/test-lifecycle/lib_gen/libuv_accessor_g=
en.ml">accessor generation</a>,=C2=A0<a href=3D"https://github.com/trevorsu=
mmerssmith/ocaml-libuv/blob/test-lifecycle/lib_gen/libuv_bindings.ml#L267">=
ml accessors</a>). The code I wrote is a straightforward proof of concept t=
hat repeats a lot of information.=C2=A0</div><div><br></div><div>However, *=
hand wave*, I think cstubs could be extended in a relatively straightforwar=
d manor to generate this staged information, without introducing new paradi=
gms into the cstubs interface.</div><div><br></div><div>Thoughts? Thanks.</=
div><div><br></div><div>Trevor</div></div><div class=3D"gmail_extra"><br><d=
iv class=3D"gmail_quote">On Mon, Nov 3, 2014 at 10:45 AM, Jeremy Yallop <sp=
an dir=3D"ltr">&lt;<a href=3D"mailto:yallop@gmail.com" target=3D"_blank">ya=
llop@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" s=
tyle=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><spa=
n class=3D"">On 30 October 2014 12:34, Trevor Smith &lt;<a href=3D"mailto:t=
revorsummerssmith@gmail.com">trevorsummerssmith@gmail.com</a>&gt; wrote:<br=
>
&gt; Thanks for this work! I just got a chance this morning to take a look.=
 This<br>
&gt; work should save me a ton of time.<br>
&gt;<br>
&gt; I&#39;m having problems referencing a cstub&#39;d struct within anothe=
r cstub&#39;d<br>
&gt; struct. Looking at the types it doesn&#39;t seem that this would work=
=C2=A0 - the<br>
&gt; cstubs typ is different than the Ctypes.typ. I reproduced a tiny examp=
le in<br>
&gt; the cstubs test files (diff below).<br>
<br>
</span>Right: this is a difficulty with the current approach.=C2=A0 You can=
 work<br>
round it, of course, by generating each struct via a separate functor,<br>
but that&#39;s terribly clunky, especially where there are self references<=
br>
involved.<br>
<br>
We really need to embrace the fact that the stub generation approach<br>
involves staging, and make that explicit in the interface somehow.<br>
David Sheets and I have considered adding an &#39;applicative&#39; for stag=
ing<br>
in the past, but I&#39;ve been reluctant because it makes the interface<br>
more complicated.<br>
<br>
An interface with staging might work as follows: values, and<br>
specifically values that represent types, are classified as either<br>
&#39;present&#39; or &#39;future&#39; according to whether we know about th=
em now or<br>
whether we have to generate some code to learn about them.=C2=A0 For<br>
example, &#39;int&#39; is present, since we know its size etc. now, but<br>
&#39;struct uv_loop_s&#39; is future: we have to generate some C code to<br=
>
determine its properties.=C2=A0 Present values can be used to build either<=
br>
present or future values, but future values can only be used to build<br>
future values: we don&#39;t get access to the future in advance.<br>
<br>
The interface looks like this:<br>
<br>
=C2=A0 =C2=A0 <a href=3D"https://github.com/yallop/ocaml-ctypes/blob/staged=
-struct-stubs/src/cstubs/cstubs_structs.mli" target=3D"_blank">https://gith=
ub.com/yallop/ocaml-ctypes/blob/staged-struct-stubs/src/cstubs/cstubs_struc=
ts.mli</a><br>
<br>
There are a couple of extra functions !^ and &lt;*&gt; for lifting present<=
br>
values into the future and for future application, and the structure,<br>
union, etc. functions now create future typ values rather than values<br>
of an abstract type.=C2=A0 In practice it looks much the same as before,<br=
>
except for a little extra syntactic noise when you use a present value<br>
in a future definition -- for example, when you build a future struct<br>
definition with an int field:<br>
<br>
=C2=A0 =C2=A0<a href=3D"https://github.com/yallop/ocaml-ctypes/blob/staged-=
struct-stubs/src/cstubs/cstubs_structs.mli#L16-L17" target=3D"_blank">https=
://github.com/yallop/ocaml-ctypes/blob/staged-struct-stubs/src/cstubs/cstub=
s_structs.mli#L16-L17</a><br>
<br>
Is this approach intelligible?=C2=A0 Overly complex?=C2=A0 Thoughts welcome=
.<br>
</blockquote></div><br></div>

--047d7b2e40525d824e0506faaabc--

From trevorsummerssmith@gmail.com  Fri Nov 28 17:08:51 2014
Return-Path: <trevorsummerssmith@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-51.csi.cam.ac.uk (ppsw-51.csi.cam.ac.uk [131.111.8.151])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id B78A23C0CF
 for <ctypes@lists.ocaml.org>; Fri, 28 Nov 2014 17:08:51 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1642043 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.218.48 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (trevorsummerssmith[at]gmail.com)
 *  0.0 HTML_MESSAGE BODY: HTML included in message
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-oi0-f48.google.com ([209.85.218.48]:56249)
 by ppsw-51.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XuP3L-0005pR-Wl (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <trevorsummerssmith@gmail.com>); Fri, 28 Nov 2014 17:09:56 +0000
Received: by mail-oi0-f48.google.com with SMTP id u20so4828983oif.35
 for <ctypes@lists.ocaml.org>; Fri, 28 Nov 2014 09:09:54 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:date:message-id:subject:from:to:content-type;
 bh=g7A4V+CSxs68+my+cUTRvpZMWbK2rXp9J92h7GnfKD0=;
 b=JIX9WTWS6xSeC/ELafe8H8nux1iDlfp30TrMlUSNlYEBWY3DtYcxMnRx86OlnfK5O3
 99Jmm+PpKiyK2mB8ibEIhQElar2XBPw6sJFsY58Oqv5z3Ed6h7/h+rhPRlJcE+HuMuSP
 F2DMVoIkdWokaL9jtW8qUuAM0PxhSH9N9KAorHRBSpMOL63/z/7ZJ8NZ0sEz7hoNw8uy
 PwGn9qzfWs2Em4GniISQDniOZEgcQRgmlh2S8+HbzahnwhkSEob5ZFPXw97+sbCazjc/
 pgGRnLGadB804njzoq/jZUxcFkIxwVHUkznOBMbIjQWIWD5DA7rADO7mtjCk53KaiCeU
 HnJg==
MIME-Version: 1.0
X-Received: by 10.60.68.108 with SMTP id v12mr26696001oet.69.1417194593905;
 Fri, 28 Nov 2014 09:09:53 -0800 (PST)
Received: by 10.182.130.229 with HTTP; Fri, 28 Nov 2014 09:09:53 -0800 (PST)
Date: Fri, 28 Nov 2014 12:09:53 -0500
Message-ID: <CAG-KTt_iuHwhasWS4t-ZvqkBE=+8A1mSYjnBtOtLjHkdfxAH6g@mail.gmail.com>
From: Trevor Smith <trevorsummerssmith@gmail.com>
To: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Content-Type: multipart/alternative; boundary=001a11330d5e58f4020508ee5403
Subject: [ocaml-ctypes] Runtime Lock
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 28 Nov 2014 17:08:51 -0000

--001a11330d5e58f4020508ee5403
Content-Type: text/plain; charset=UTF-8

Hello,

Following up from a thread "Lifecycle of a callback?" discussed on this
list: I want to double check my thinking.

The C functions I am calling in libuv mostly do one thing: put a struct
representing the system call to call, and the callback to run once the
system call is called, on a queue that another thread will work on. If my
understanding is correct, the runtime lock would need to be re-acquired
when the OCaml callback is ran. However, it's not clear to me how to do
this.

Thoughts? Thanks.

Trevor

--001a11330d5e58f4020508ee5403
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Hello,<div><br></div><div>Following up from a thread &quot=
;Lifecycle of a callback?&quot; discussed on this list: I want to double ch=
eck my thinking.</div><div><br></div><div>The C functions I am calling in l=
ibuv mostly do one thing: put a struct representing the system call to call=
, and the callback to run once the system call is called, on a queue that a=
nother thread will work on. If my understanding is correct, the runtime loc=
k would need to be re-acquired when the OCaml callback is ran. However, it&=
#39;s not clear to me how to do this.</div><div><br></div><div>Thoughts? Th=
anks.</div><div><div><br>Trevor</div></div></div>

--001a11330d5e58f4020508ee5403--

From trevorsummerssmith@gmail.com  Tue Dec  2 13:24:09 2014
Return-Path: <trevorsummerssmith@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id C4AAA3C19B
 for <ctypes@lists.ocaml.org>; Tue,  2 Dec 2014 13:24:09 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1642648 
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (trevorsummerssmith[at]gmail.com)
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.218.50 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 HTML_MESSAGE BODY: HTML included in message
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-oi0-f50.google.com ([209.85.218.50]:36296)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1XvnSI-0001t8-js (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <trevorsummerssmith@gmail.com>); Tue, 02 Dec 2014 13:25:28 +0000
Received: by mail-oi0-f50.google.com with SMTP id a141so9082870oig.9
 for <ctypes@lists.ocaml.org>; Tue, 02 Dec 2014 05:25:25 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :content-type; bh=xo42JmLBZAZk68zjJ4xXLt2WmOmP7sJsElWZcKWzMYE=;
 b=r7ir3UDwKOdclLM+FzTinIhjTj4/SETf4q3vyNt+8EwoCS1a25Re2qzep1m2AF+PFt
 e2mxvY6Hg5RQ4LXm2xy05TsPq9gcbzzp6WPh/a3KsiJJ7WHMwVP38lvET0j9YxfNG7tM
 N9lYq3pyzscglYTSW0c60OZhN5l5+1tvbr1PXya+BWbn5FBS6P8T7ddqlKPQ+QSOIohL
 V5JWPqDF06DgqvVBf0ptELmyHKge8tFl4w+j8yCgMh7svGzvK93/ZQBAGj7l3tMqSjN7
 XuWRHt0MF4MtvPVaZpLTokm/hdTSZvK+0h97QPOMUHz5cwr4hl1ObVszUVktbRY3ich5
 AnGg==
MIME-Version: 1.0
X-Received: by 10.202.200.143 with SMTP id y137mr37791883oif.38.1417526724988; 
 Tue, 02 Dec 2014 05:25:24 -0800 (PST)
Received: by 10.182.130.229 with HTTP; Tue, 2 Dec 2014 05:25:24 -0800 (PST)
In-Reply-To: <CAG-KTt_iuHwhasWS4t-ZvqkBE=+8A1mSYjnBtOtLjHkdfxAH6g@mail.gmail.com>
References: <CAG-KTt_iuHwhasWS4t-ZvqkBE=+8A1mSYjnBtOtLjHkdfxAH6g@mail.gmail.com>
Date: Tue, 2 Dec 2014 08:25:24 -0500
Message-ID: <CAG-KTt9eL63Rx8WMJ6_AnP1VXUnU554xdHunsJ=vtoMbqeQhRA@mail.gmail.com>
From: Trevor Smith <trevorsummerssmith@gmail.com>
To: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Content-Type: multipart/alternative; boundary=001a1137b4bee7169605093ba8f7
Subject: Re: [ocaml-ctypes] Runtime Lock
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 02 Dec 2014 13:24:09 -0000

--001a1137b4bee7169605093ba8f7
Content-Type: text/plain; charset=UTF-8

Hello,

I thought I'd try to clarify my question.

1) C-function in thread A will be called from OCaml, and places an OCaml
callback cb onto a queue.
2) C-function in thread B will asynchronously receive the callback on the
queue, do some computation, then run cb.

My understanding is that I need to re-acquire the runtime lock when cb is
ran in thread B. Is that correct? If that is correct, I was thinking one
could make an OCaml function to call `caml_release_runtime_system` and
`caml_acquire_runtime_system`, then wrap the user callback cb:

let cb' arg =
  let () = caml_acquire_runtime_system () in
  let () = cb arg in
  caml_release_runtime_system ()

This cb' would then be passed to the thread B, instead of the user's cb.

I think this would work iff the callback returns unit, and we don't want to
do anything with the return value. Also, my understanding is that the lock
calls are _not_ reentrant, so the acquire/release set are needed.

Does that make sense? Any thoughts? Thanks!

Trevor


On Fri, Nov 28, 2014 at 12:09 PM, Trevor Smith <trevorsummerssmith@gmail.com
> wrote:

> Hello,
>
> Following up from a thread "Lifecycle of a callback?" discussed on this
> list: I want to double check my thinking.
>
> The C functions I am calling in libuv mostly do one thing: put a struct
> representing the system call to call, and the callback to run once the
> system call is called, on a queue that another thread will work on. If my
> understanding is correct, the runtime lock would need to be re-acquired
> when the OCaml callback is ran. However, it's not clear to me how to do
> this.
>
> Thoughts? Thanks.
>
> Trevor
>

--001a1137b4bee7169605093ba8f7
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Hello,<div><br></div><div>I thought I&#39;d try to clarify=
 my question.</div><div><br></div><div>1) C-function in thread A will be ca=
lled from OCaml, and places an OCaml callback cb onto a queue.</div><div>2)=
 C-function in thread B will asynchronously receive the callback on the que=
ue, do some computation, then run cb.</div><div><br></div><div>My understan=
ding is that I need to re-acquire the runtime lock when cb is ran in thread=
 B. Is that correct? If that is correct, I was thinking one could make an O=
Caml function to call `caml_release_runtime_system` and `caml_acquire_runti=
me_system`, then wrap the user callback cb:</div><div><br></div><div>let cb=
&#39; arg =3D</div><div>=C2=A0 let () =3D caml_acquire_runtime_system () in=
</div><div>=C2=A0 let () =3D cb arg in</div><div>=C2=A0 caml_release_runtim=
e_system ()</div><div><br></div><div>This cb&#39; would then be passed to t=
he thread B, instead of the user&#39;s cb.</div><div><br></div><div>I think=
 this would work iff the callback returns unit, and we don&#39;t want to do=
 anything with the return value. Also, my understanding is that the lock ca=
lls are _not_ reentrant, so the acquire/release set are needed.</div><div><=
br></div><div>Does that make sense? Any thoughts? Thanks!</div><div><br></d=
iv><div>Trevor</div><div><br></div></div><div class=3D"gmail_extra"><br><di=
v class=3D"gmail_quote">On Fri, Nov 28, 2014 at 12:09 PM, Trevor Smith <spa=
n dir=3D"ltr">&lt;<a href=3D"mailto:trevorsummerssmith@gmail.com" target=3D=
"_blank">trevorsummerssmith@gmail.com</a>&gt;</span> wrote:<br><blockquote =
class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid=
;padding-left:1ex"><div dir=3D"ltr">Hello,<div><br></div><div>Following up =
from a thread &quot;Lifecycle of a callback?&quot; discussed on this list: =
I want to double check my thinking.</div><div><br></div><div>The C function=
s I am calling in libuv mostly do one thing: put a struct representing the =
system call to call, and the callback to run once the system call is called=
, on a queue that another thread will work on. If my understanding is corre=
ct, the runtime lock would need to be re-acquired when the OCaml callback i=
s ran. However, it&#39;s not clear to me how to do this.</div><div><br></di=
v><div>Thoughts? Thanks.</div><span class=3D"HOEnZb"><font color=3D"#888888=
"><div><div><br>Trevor</div></div></font></span></div>
</blockquote></div><br></div>

--001a1137b4bee7169605093ba8f7--

From yallop@gmail.com  Tue Dec  2 17:05:58 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 607CB3C19B
 for <ctypes@lists.ocaml.org>; Tue,  2 Dec 2014 17:05:58 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1642648 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.175 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f175.google.com ([209.85.212.175]:41172)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1Xvquy-00048h-kj (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 02 Dec 2014 17:07:17 +0000
Received: by mail-wi0-f175.google.com with SMTP id l15so28767762wiw.14
 for <ctypes@lists.ocaml.org>; Tue, 02 Dec 2014 09:07:16 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=c5y0JRo3bwC2dAPDDy3kP3/bExSeK1FkHEwmp/AtrXU=;
 b=w4hU011cytPuWinplVowg1abauaamvNOTfAXzE1Rcsl11l0MGzjLJMXmlgrHcDq1Qa
 K7tforoDcbbs3WsHZmOeC7P+HAxRBa/NVhwBZ3Hpgl+C1aNAS/ZBThp1lKmK/aN/8yr/
 V4cJqtNlqlQfOOCLruWQi1BBOAIEF4rTtrmvok1+W4pWJwDEUr2ODXicPagFBNIr3+gC
 XQQjpvM3MW269hP9LvXh8USzaq4lRK+y10Rf4yEVYQnEUhOzN8OJQGox8fsU+X7ifg2B
 OyJAhgYNwCYOdThlPZciAdMasl69ztftwePssAgsxK/sOf7MPGcYjmcvWCSOADLtV+UJ
 kxYQ==
MIME-Version: 1.0
X-Received: by 10.194.62.163 with SMTP id z3mr484246wjr.74.1417540034669; Tue,
 02 Dec 2014 09:07:14 -0800 (PST)
Received: by 10.217.115.5 with HTTP; Tue, 2 Dec 2014 09:07:14 -0800 (PST)
In-Reply-To: <CAG-KTt9eL63Rx8WMJ6_AnP1VXUnU554xdHunsJ=vtoMbqeQhRA@mail.gmail.com>
References: <CAG-KTt_iuHwhasWS4t-ZvqkBE=+8A1mSYjnBtOtLjHkdfxAH6g@mail.gmail.com>
 <CAG-KTt9eL63Rx8WMJ6_AnP1VXUnU554xdHunsJ=vtoMbqeQhRA@mail.gmail.com>
Date: Tue, 2 Dec 2014 17:07:14 +0000
Message-ID: <CAAxsn=FmraD5QjcxJL5_-kHuEs+1Wmt-nEbibfh6xw4jc_cSew@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Trevor Smith <trevorsummerssmith@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Runtime Lock
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 02 Dec 2014 17:05:58 -0000

On 2 December 2014 at 13:25, Trevor Smith <trevorsummerssmith@gmail.com> wrote:
> 1) C-function in thread A will be called from OCaml, and places an OCaml
> callback cb onto a queue.
> 2) C-function in thread B will asynchronously receive the callback on the
> queue, do some computation, then run cb.
>
> My understanding is that I need to re-acquire the runtime lock when cb is
> ran in thread B. Is that correct?

Yes.  You should be able to use the "runtime_lock" argument to funptr
to indicate that the lock should be (re)acquired when calling back
into OCaml from C:

  https://github.com/ocamllabs/ocaml-ctypes/blob/e190603a4/src/ctypes-foreign-threaded/foreign.mli#L53
  https://github.com/ocamllabs/ocaml-ctypes/blob/e190603a4/src/ctypes-foreign-threaded/foreign.mli#L72-L74

You probably also need to call caml_c_thread_register() from your C
code to register the thread that's going to be calling back into
OCaml:

   http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual033.html#toc151

(It's worth reading that whole "Advanced topic: multithreading"
section of the OCaml manual, if you haven't already.)

> Also, my understanding is that the lock
> calls are _not_ reentrant, so the acquire/release set are needed.

Right.

From trevorsummerssmith@gmail.com  Tue Dec  2 17:18:40 2014
Return-Path: <trevorsummerssmith@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 8B9043C19B
 for <ctypes@lists.ocaml.org>; Tue,  2 Dec 2014 17:18:40 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1642648 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.214.178 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (trevorsummerssmith[at]gmail.com)
 *  0.0 HTML_MESSAGE BODY: HTML included in message
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-ob0-f178.google.com ([209.85.214.178]:63819)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1Xvr7G-0007hb-Ee (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <trevorsummerssmith@gmail.com>); Tue, 02 Dec 2014 17:19:59 +0000
Received: by mail-ob0-f178.google.com with SMTP id gq1so10066583obb.23
 for <ctypes@lists.ocaml.org>; Tue, 02 Dec 2014 09:19:57 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=vTqV7ROuTWq6ZO4FbN/0xMDENB4xeomfI7OmsaIM154=;
 b=wR8T04ueyt1O0ERwWjXscBMktgy6M70xbqxcMjHfF25eyfxQFEshc94I+JxfpZOWZZ
 AoU7B3foO5ipJRKKJ3x8vFzGScp93yZJlLRwl5WivsXUiARVu+xoT84x2MhCmgHRSoFe
 xGPZW54TLl/LP6FlWW+7RBpl8nteOJAGM5Z6svHPvjYnn9CeFSMKaScXmhWKqArg9Q5F
 BaeTh2oYx2P45TRCT/Xo4jvHXVFeRdaryqh7nTGxnbsdiSqZ9zv4R1vGwagNxbEZd4B5
 teb3YELFAizpsahdVzHS9mMgvqBc/TGhUzm1wQBqNPLi8rZ0iyFoRKrscprMRUig6wAQ
 iVVQ==
MIME-Version: 1.0
X-Received: by 10.202.50.84 with SMTP id y81mr212835oiy.122.1417540796960;
 Tue, 02 Dec 2014 09:19:56 -0800 (PST)
Received: by 10.182.130.229 with HTTP; Tue, 2 Dec 2014 09:19:56 -0800 (PST)
In-Reply-To: <CAAxsn=FmraD5QjcxJL5_-kHuEs+1Wmt-nEbibfh6xw4jc_cSew@mail.gmail.com>
References: <CAG-KTt_iuHwhasWS4t-ZvqkBE=+8A1mSYjnBtOtLjHkdfxAH6g@mail.gmail.com>
 <CAG-KTt9eL63Rx8WMJ6_AnP1VXUnU554xdHunsJ=vtoMbqeQhRA@mail.gmail.com>
 <CAAxsn=FmraD5QjcxJL5_-kHuEs+1Wmt-nEbibfh6xw4jc_cSew@mail.gmail.com>
Date: Tue, 2 Dec 2014 12:19:56 -0500
Message-ID: <CAG-KTt8mAX4PfcwpquGatV7Yw4BEgQpEKGPJcHOP4EiW9Dmwaw@mail.gmail.com>
From: Trevor Smith <trevorsummerssmith@gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Content-Type: multipart/alternative; boundary=001a113cae1ca876e505093eef92
Cc: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Runtime Lock
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 02 Dec 2014 17:18:40 -0000

--001a113cae1ca876e505093eef92
Content-Type: text/plain; charset=UTF-8

Jeremy,

Thanks. What you said makes sense. I think I misunderstood the funptr
argument but it is very clear now.

I saw that "Advanced topic: multithreading". Given that the library I'm
linking in -- libuv -- spawns the threads itself we will need to be
creative about getting them to call the caml register function. That's next
on my list.

Thanks!

Trevor

On Tue, Dec 2, 2014 at 12:07 PM, Jeremy Yallop <yallop@gmail.com> wrote:

> On 2 December 2014 at 13:25, Trevor Smith <trevorsummerssmith@gmail.com>
> wrote:
> > 1) C-function in thread A will be called from OCaml, and places an OCaml
> > callback cb onto a queue.
> > 2) C-function in thread B will asynchronously receive the callback on the
> > queue, do some computation, then run cb.
> >
> > My understanding is that I need to re-acquire the runtime lock when cb is
> > ran in thread B. Is that correct?
>
> Yes.  You should be able to use the "runtime_lock" argument to funptr
> to indicate that the lock should be (re)acquired when calling back
> into OCaml from C:
>
>
> https://github.com/ocamllabs/ocaml-ctypes/blob/e190603a4/src/ctypes-foreign-threaded/foreign.mli#L53
>
> https://github.com/ocamllabs/ocaml-ctypes/blob/e190603a4/src/ctypes-foreign-threaded/foreign.mli#L72-L74
>
> You probably also need to call caml_c_thread_register() from your C
> code to register the thread that's going to be calling back into
> OCaml:
>
>    http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual033.html#toc151
>
> (It's worth reading that whole "Advanced topic: multithreading"
> section of the OCaml manual, if you haven't already.)
>
> > Also, my understanding is that the lock
> > calls are _not_ reentrant, so the acquire/release set are needed.
>
> Right.
>

--001a113cae1ca876e505093eef92
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Jeremy,<div><br></div><div>Thanks. What you said makes sen=
se. I think I misunderstood the funptr argument but it is very clear now.</=
div><div><br></div><div>I saw that &quot;Advanced topic: multithreading&quo=
t;. Given that the library I&#39;m linking in -- libuv -- spawns the thread=
s itself we will need to be creative about getting them to call the caml re=
gister function. That&#39;s next on my list.</div><div><br></div><div>Thank=
s!</div><div><br></div><div>Trevor</div></div><div class=3D"gmail_extra"><b=
r><div class=3D"gmail_quote">On Tue, Dec 2, 2014 at 12:07 PM, Jeremy Yallop=
 <span dir=3D"ltr">&lt;<a href=3D"mailto:yallop@gmail.com" target=3D"_blank=
">yallop@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quot=
e" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">=
<span class=3D"">On 2 December 2014 at 13:25, Trevor Smith &lt;<a href=3D"m=
ailto:trevorsummerssmith@gmail.com">trevorsummerssmith@gmail.com</a>&gt; wr=
ote:<br>
&gt; 1) C-function in thread A will be called from OCaml, and places an OCa=
ml<br>
&gt; callback cb onto a queue.<br>
&gt; 2) C-function in thread B will asynchronously receive the callback on =
the<br>
&gt; queue, do some computation, then run cb.<br>
&gt;<br>
&gt; My understanding is that I need to re-acquire the runtime lock when cb=
 is<br>
&gt; ran in thread B. Is that correct?<br>
<br>
</span>Yes.=C2=A0 You should be able to use the &quot;runtime_lock&quot; ar=
gument to funptr<br>
to indicate that the lock should be (re)acquired when calling back<br>
into OCaml from C:<br>
<br>
=C2=A0 <a href=3D"https://github.com/ocamllabs/ocaml-ctypes/blob/e190603a4/=
src/ctypes-foreign-threaded/foreign.mli#L53" target=3D"_blank">https://gith=
ub.com/ocamllabs/ocaml-ctypes/blob/e190603a4/src/ctypes-foreign-threaded/fo=
reign.mli#L53</a><br>
=C2=A0 <a href=3D"https://github.com/ocamllabs/ocaml-ctypes/blob/e190603a4/=
src/ctypes-foreign-threaded/foreign.mli#L72-L74" target=3D"_blank">https://=
github.com/ocamllabs/ocaml-ctypes/blob/e190603a4/src/ctypes-foreign-threade=
d/foreign.mli#L72-L74</a><br>
<br>
You probably also need to call caml_c_thread_register() from your C<br>
code to register the thread that&#39;s going to be calling back into<br>
OCaml:<br>
<br>
=C2=A0 =C2=A0<a href=3D"http://caml.inria.fr/pub/docs/manual-ocaml-4.00/man=
ual033.html#toc151" target=3D"_blank">http://caml.inria.fr/pub/docs/manual-=
ocaml-4.00/manual033.html#toc151</a><br>
<br>
(It&#39;s worth reading that whole &quot;Advanced topic: multithreading&quo=
t;<br>
section of the OCaml manual, if you haven&#39;t already.)<br>
<span class=3D""><br>
&gt; Also, my understanding is that the lock<br>
&gt; calls are _not_ reentrant, so the acquire/release set are needed.<br>
<br>
</span>Right.<br>
</blockquote></div><br></div>

--001a113cae1ca876e505093eef92--

From dbenjamin@janestreet.com  Tue Dec  2 19:37:57 2014
Return-Path: <dbenjamin@janestreet.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 944973C19B
 for <ctypes@lists.ocaml.org>; Tue,  2 Dec 2014 19:37:57 +0000 (GMT)
X-Cam-SpamDetails: score -0.0 from SpamAssassin-3.3.2-1642648 
 * -0.0 T_RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 *  0.0 HTML_MESSAGE BODY: HTML included in message
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mxout1.mail.janestreet.com ([38.105.200.112]:45751)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:DHE-RSA-AES256-GCM-SHA384:256)
 id 1XvtI4-0003yO-jn (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <dbenjamin@janestreet.com>); Tue, 02 Dec 2014 19:39:16 +0000
Received: from [172.27.56.106] (helo=tot-qpr-mailcore2)
 by mxout1.mail.janestreet.com with smtp (Exim 4.82)
 (envelope-from <dbenjamin@janestreet.com>) id 1XvtI2-0003yZ-Br
 for ctypes@lists.ocaml.org; Tue, 02 Dec 2014 14:39:14 -0500
X-JS-Flow: external
X-JS-Message-Tracking-Id: tracked/2014-12-02_14-39-14.339205/25345e62-0155-3d1c-20b3-6313c818ecfa
Received: by tot-qpr-mailcore2 with JS-mailcore (0.1)
 (envelope-from <dbenjamin@janestreet.com>)
 id BUfhVi-AAABS2-K5; 2014-12-02 14:39:14.349699-05:00
Received: from mail-qa0-f45.google.com ([209.85.216.45])
 by mxgoog1.mail.janestreet.com with esmtps (TLSv1:RC4-SHA:128)
 (Exim 4.72) (envelope-from <dbenjamin@janestreet.com>)
 id 1XvtI2-0007z0-7O
 for ctypes@lists.ocaml.org; Tue, 02 Dec 2014 14:39:14 -0500
Received: by mail-qa0-f45.google.com with SMTP id x12so9338202qac.32
 for <ctypes@lists.ocaml.org>; Tue, 02 Dec 2014 11:39:14 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=janestreet.com; s=google;
 h=mime-version:date:message-id:subject:from:to:cc:content-type;
 bh=YlisWicSu4jYbw1bxXtIcghVkHb5SSIhyReelD5mWlQ=;
 b=TEbCfyM9EYJPtsVLiN9OT4stoYE1hxiTzom7jjYWb/aGiWQ0Lho2AD8QbwaNKKDwyf
 qeSmtDL/T16tZYx92RJEtpFJrnivBzRURQd8t/tZYeAOSggsnX5ZN3Xzsy7PFA+xE/PN
 tHVKsD2QU9MvrVANq1E2SEIBDCMsmr+A7co0g=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:date:message-id:subject:from:to:cc
 :content-type;
 bh=YlisWicSu4jYbw1bxXtIcghVkHb5SSIhyReelD5mWlQ=;
 b=MNjDD6ugHrmNzDIHTwZ7tvlFODnw/GXqeSD9a5RWAfN80nTj+XPEbJXcqSjlFif6b3
 Yht5a9pENG5uUio0B4aQQnhpsuLgFvtxT5T4daEqbg6ZmruJQQGwAcu8kZShpB8YtBTc
 MRCvL4x+cMDYFzKhGeuW7JmVzZeUI3qaMu2EF1659IQvR0twgS4Xsx+Xz4RvNhq6WCBF
 3Pe6DK1XOAOBC+941uErEMxl+oACzGc3f7TScfDKcrjsBwu+Md/PoI3MdEkIgos5bXic
 HvQ4CEX7+bHEnBAyurNjDelhBRselV0dgWNDQdviZOIVG0dyqAegIUJ5m+XdajrkWues
 T7Og==
X-Gm-Message-State: ALoCoQmfOn0KsxgRAHHt1q9NVH1VQA/x/fTKSvt5Np/Q5yECTDrSpeErpnP+kNFW3+xkQ74z2+k3ObIhaWd2hh4hVNnw/4vjESR8V4RmtJuf2yy9arwyqBbwMOW6yTbbZvc2v27NPBDSZHOODO9RvwGg4KUBMfFO6A==
X-Received: by 10.140.81.242 with SMTP id f105mr1367402qgd.60.1417549154045;
 Tue, 02 Dec 2014 11:39:14 -0800 (PST)
MIME-Version: 1.0
X-Received: by 10.140.81.242 with SMTP id f105mr1367382qgd.60.1417549153881;
 Tue, 02 Dec 2014 11:39:13 -0800 (PST)
Received: by 10.229.170.131 with HTTP; Tue, 2 Dec 2014 11:39:13 -0800 (PST)
Date: Tue, 2 Dec 2014 14:39:13 -0500
Message-ID: <CACKEwpbouJdGjQ31teym8vgr1pbE2s0mhRr4=NyH78wKg5-=TA@mail.gmail.com>
From: Dan Benjamin <dbenjamin@janestreet.com>
To: ctypes@lists.ocaml.org
Content-Type: multipart/alternative; boundary=001a11c13c12c4fe98050940e1fe
X-JS-Processed-by: mailcore
X-Mailman-Approved-At: Tue, 02 Dec 2014 19:40:24 +0000
Cc: Dan Nuffer <dnuffer@janestreet.com>, Nicolas Ford <nford@janestreet.com>
Subject: [ocaml-ctypes] Next release?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 02 Dec 2014 19:37:57 -0000

--001a11c13c12c4fe98050940e1fe
Content-Type: text/plain; charset=UTF-8

Hi,

We've got a piece of code that could really benefit from the new
[release_runtime_lock] argument to [Foreign.foreign], and we were wondering
if there might be a new release coming soon.

Thanks,
Dan Benjamin
Jane Street

--001a11c13c12c4fe98050940e1fe
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div><div>Hi,<br><br></div>We&#39;ve got a piece of code t=
hat could really benefit from the new [release_runtime_lock] argument to [F=
oreign.foreign], and we were wondering if there might be a new release comi=
ng soon.<br><br></div>Thanks,<br>Dan Benjamin<br>Jane Street=C2=A0 <br></di=
v>

--001a11c13c12c4fe98050940e1fe--

From yallop@gmail.com  Tue Dec  2 21:30:16 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-51.csi.cam.ac.uk (ppsw-51.csi.cam.ac.uk [131.111.8.151])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 8414B3C19B
 for <ctypes@lists.ocaml.org>; Tue,  2 Dec 2014 21:30:16 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1642648 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.170 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f170.google.com ([209.85.212.170]:61032)
 by ppsw-51.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1Xvv2l-0006MG-X9 (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 02 Dec 2014 21:31:35 +0000
Received: by mail-wi0-f170.google.com with SMTP id bs8so31066393wib.1
 for <ctypes@lists.ocaml.org>; Tue, 02 Dec 2014 13:31:34 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=onf5dyRsr8kEzs/YzPM1yLRT7FRiTYT1VacGH3QL9fE=;
 b=tXJMnk0Pwbgdla5Y4MWcLcIruwIsP63ToWt8HM0rQq25h1XcqtLZ3aQP1fLqzybHGQ
 NmDU18GZMPEO/tes1gKYTYtvOwGlHAOAGz1JqrSzlTK7Dj8CcA4Ch60DWlMOqeampcez
 0Ji92dEuGvBeJ0n7g5nKOI1ureVsBLoqrCFYyn87S7feuxpyCuBMRS108PUWVGNPtkA3
 Klns9Fy9qd/OXA77cLvYuSrnfBoLdT7IraKn3tsNbXwT7Zj2Xy8u7LQKkTkxZd+rh6pU
 eFb/DCCC2MmtWik73MJCzBgyXQCpGDUqVLgqVrrXEHh2HpUg/MSAuQh8D37aOwZ9ozER
 vHOQ==
MIME-Version: 1.0
X-Received: by 10.180.106.33 with SMTP id gr1mr8370709wib.82.1417555894810;
 Tue, 02 Dec 2014 13:31:34 -0800 (PST)
Received: by 10.217.115.5 with HTTP; Tue, 2 Dec 2014 13:31:34 -0800 (PST)
In-Reply-To: <CACKEwpbouJdGjQ31teym8vgr1pbE2s0mhRr4=NyH78wKg5-=TA@mail.gmail.com>
References: <CACKEwpbouJdGjQ31teym8vgr1pbE2s0mhRr4=NyH78wKg5-=TA@mail.gmail.com>
Date: Tue, 2 Dec 2014 21:31:34 +0000
Message-ID: <CAAxsn=GP5Bo_VBBKfmVBHLOk6PRKnE_fKZaCCgemxtRV_P6W_Q@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Dan Benjamin <dbenjamin@janestreet.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>, Dan Nuffer <dnuffer@janestreet.com>,
 Nicolas Ford <nford@janestreet.com>
Subject: Re: [ocaml-ctypes] Next release?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 02 Dec 2014 21:30:16 -0000

On 2 December 2014 at 19:39, Dan Benjamin <dbenjamin@janestreet.com> wrote:
> We've got a piece of code that could really benefit from the new
> [release_runtime_lock] argument to [Foreign.foreign], and we were wondering
> if there might be a new release coming soon.

Yes: there's a release due soon, once a few outstanding packaging
issues have been resolved.  Here's the milestone:

   <https://github.com/ocamllabs/ocaml-ctypes/milestones/ctypes 0.4>

From yallop@gmail.com  Tue Dec  2 21:32:50 2014
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 5AE113C19B
 for <ctypes@lists.ocaml.org>; Tue,  2 Dec 2014 21:32:50 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1642648 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.181 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f181.google.com ([209.85.212.181]:44068)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1Xvv5F-0005fn-pt (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 02 Dec 2014 21:34:09 +0000
Received: by mail-wi0-f181.google.com with SMTP id r20so22397470wiv.2
 for <ctypes@lists.ocaml.org>; Tue, 02 Dec 2014 13:34:08 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=J6QRah38VjhGLkaSoaZ+ysUMN56XOoYiMy5JAlR0VN4=;
 b=h4sKWK+DZB5GWXRc4PzbE4PEtQkDmKL6A9noPkniq4qGTugDddTl0ydj4Cu4yzLXgs
 gkE2RUZJEOAzuGIQ7Hv/JdDf8pS5yn9/U+7RYa1KxsCAHkX5u5IHtcbpr95bUN8VRZYC
 DSN22BzNMhZEIeBg5UwhfZqekCOQmIF4Dfphem0lSICTzRWoJ/X9+jaWfBCSKg6jTzdX
 t5f+l9OsFgMiq/wQfsVt//zuILTxacMTVihxLXmSwcT90kR/ZKATIHOcxR6K90u4op6v
 A4evRqCo3xNhbgUa4FsdUGmeofBvN1fcNmcEfGvG7X+hXR0L63DMpjshZhibbZeNCCol
 DKfg==
MIME-Version: 1.0
X-Received: by 10.180.85.6 with SMTP id d6mr96975957wiz.82.1417556048775; Tue,
 02 Dec 2014 13:34:08 -0800 (PST)
Received: by 10.217.115.5 with HTTP; Tue, 2 Dec 2014 13:34:08 -0800 (PST)
In-Reply-To: <CAAxsn=GP5Bo_VBBKfmVBHLOk6PRKnE_fKZaCCgemxtRV_P6W_Q@mail.gmail.com>
References: <CACKEwpbouJdGjQ31teym8vgr1pbE2s0mhRr4=NyH78wKg5-=TA@mail.gmail.com>
 <CAAxsn=GP5Bo_VBBKfmVBHLOk6PRKnE_fKZaCCgemxtRV_P6W_Q@mail.gmail.com>
Date: Tue, 2 Dec 2014 21:34:08 +0000
Message-ID: <CAAxsn=FYyi-hr8KTU8738QOSzMEstu6WHkvQAhTVm1j02zjM=Q@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Dan Benjamin <dbenjamin@janestreet.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>, Dan Nuffer <dnuffer@janestreet.com>,
 Nicolas Ford <nford@janestreet.com>
Subject: Re: [ocaml-ctypes] Next release?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 02 Dec 2014 21:32:50 -0000

On 2 December 2014 at 21:31, Jeremy Yallop <yallop@gmail.com> wrote:
> On 2 December 2014 at 19:39, Dan Benjamin <dbenjamin@janestreet.com> wrote:
>> We've got a piece of code that could really benefit from the new
>> [release_runtime_lock] argument to [Foreign.foreign], and we were wondering
>> if there might be a new release coming soon.
>
> Yes: there's a release due soon, once a few outstanding packaging
> issues have been resolved.  Here's the milestone:
>
>    <https://github.com/ocamllabs/ocaml-ctypes/milestones/ctypes 0.4>

and here it is URL-encoded:

      <https://github.com/ocamllabs/ocaml-ctypes/milestones/ctypes%200.4>

From timmcgil@gmail.com  Fri Jan  2 23:01:00 2015
Return-Path: <timmcgil@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 8F24E3C372
 for <ctypes@lists.ocaml.org>; Fri,  2 Jan 2015 23:01:00 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1648800 
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (timmcgil[at]gmail.com)
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.192.171 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.0 HTML_FONT_LOW_CONTRAST BODY: HTML font color similar or identical
 *      to background
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-pd0-f171.google.com ([209.85.192.171]:63569)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1Y7BE7-0006nw-l6 (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <timmcgil@gmail.com>); Fri, 02 Jan 2015 23:01:52 +0000
Received: by mail-pd0-f171.google.com with SMTP id y13so24428986pdi.30
 for <ctypes@lists.ocaml.org>; Fri, 02 Jan 2015 15:01:50 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=from:content-type:subject:message-id:date:to:mime-version;
 bh=Z9iqkxBP7k3NDeVjMmhm3DRtN3+VXr3O2hZhdWXZb9Q=;
 b=gbiDYufTszzmCfOz8qec1S6kvqGIHheQ5RioxAX7wOTbFU5VuUVhjEq3FSrlZRW2a9
 CG3XQjiM/Qd4mU0PGiCb6Byc+kamTi/K+ruZsDdwA27xBMk3HttCha+0WJitzhnLpFJq
 Zv98NaMuEEXbnrPId1X+qqsfQ6wX6ANgXyTDRlES2/ywlYyK8IqSZNjgjsGOSaDkUD9y
 EK7VqShfB8lhkIN6/IiHj63Ugx6CB7MSan/LUuSjrj5yj39gRTdOxTPnk8NTfJ0GIijb
 PAcwUWsrtMwh1eEps1Y8Fuq9LhdYds7Zr0ZYU8urTJrbRGwiLJ7nNuM27b0jBI2JVZ1D
 4G5g==
X-Received: by 10.70.33.177 with SMTP id s17mr64652373pdi.9.1420239709798;
 Fri, 02 Jan 2015 15:01:49 -0800 (PST)
Received: from [192.168.2.7] (124-149-170-136.dyn.iinet.net.au.
 [124.149.170.136])
 by mx.google.com with ESMTPSA id u4sm47456118pbs.60.2015.01.02.15.01.47
 for <ctypes@lists.ocaml.org>
 (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);
 Fri, 02 Jan 2015 15:01:49 -0800 (PST)
From: Tim McGilchrist <timmcgil@gmail.com>
Content-Type: multipart/alternative;
 boundary="Apple-Mail=_05CB952A-DB0E-489D-ADD6-014EE6A3325C"
Message-Id: <8D6EEB96-346B-4532-B859-014D36D27503@gmail.com>
Date: Sat, 3 Jan 2015 10:01:43 +1100
To: ctypes@lists.ocaml.org
Mime-Version: 1.0 (Mac OS X Mail 7.3 \(1878.6\))
X-Mailer: Apple Mail (2.1878.6)
Subject: [ocaml-ctypes] OCaml Ctypes and allocating a pointer to a type
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 02 Jan 2015 23:01:00 -0000


--Apple-Mail=_05CB952A-DB0E-489D-ADD6-014EE6A3325C
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain;
	charset=us-ascii

I'm trying to call some C code from OCaml where I need to supply an =
allocated pointer to my type yaml_parser_t. But I'm not sure how I =
should be allocating a valid pointer. The example code is below.

Ideally I'd like to not have to supply a concrete implementation for =
yaml_parser_t as well, since I don't need to inspect it's internals, =
just pass it into and out of various functions. Plus the description of =
yaml_parser_t is large and I don't want to spend my time mapping it if I =
don't have to. I was initially following the time_t example from Real =
World OCaml but they seem to be using the time function to allocate =
which I don't have here.=20

open PosixTypes;;
open Ctypes;;
open Foreign;;

type yaml_parser_t =3D unit;;
let yaml_parser_t : yaml_parser_t typ =3D void;;

(* To get it working in utop, specify the name of the library *)
let libyaml =3D Dl.(dlopen ~filename:"libyaml.dylib" =
~flags:[RTLD_NOW]);;

let init =3D foreign "yaml_parser_initialize" (ptr yaml_parser_t @-> =
returning int);;

let make =3D
    let p_ptr =3D allocate yaml_parser_t (from_voidp yaml_parser) in
    let _ =3D init p_ptr in
    p_ptr;;

How can I allocate a yaml_parser_t without having to map the entire =
structure in ctypes?

Thanks

-----------------------------------------------------
Tim McGilchrist

@lambda_foo
http://github.com/tmcgilchrist


--Apple-Mail=_05CB952A-DB0E-489D-ADD6-014EE6A3325C
Content-Transfer-Encoding: quoted-printable
Content-Type: text/html;
	charset=us-ascii

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html =
charset=3Dus-ascii"></head><body style=3D"word-wrap: break-word; =
-webkit-nbsp-mode: space; -webkit-line-break: after-white-space;"><p =
style=3D"margin: 0px 0px 1em; padding: 0px; border: 0px; font-size: =
14px; vertical-align: baseline; clear: both; font-family: Arial, =
'Liberation Sans', 'DejaVu Sans', sans-serif; line-height: =
17.804800033569336px;">I'm trying to call some C code from OCaml where I =
need to supply an allocated pointer to my type&nbsp;<code style=3D"margin:=
 0px; padding: 1px 5px; border: 0px; vertical-align: baseline; =
background-color: rgb(238, 238, 238); font-family: Consolas, Menlo, =
Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', =
'Bitstream Vera Sans Mono', 'Courier New', monospace, serif; =
white-space: pre-wrap;">yaml_parser_t</code>. But I'm not sure how I =
should be allocating a valid pointer. The example code is below.</p><p =
style=3D"margin: 0px 0px 1em; padding: 0px; border: 0px; font-size: =
14px; vertical-align: baseline; clear: both; font-family: Arial, =
'Liberation Sans', 'DejaVu Sans', sans-serif; line-height: =
17.804800033569336px;">Ideally I'd like to not have to supply a concrete =
implementation for&nbsp;<code style=3D"margin: 0px; padding: 1px 5px; =
border: 0px; vertical-align: baseline; background-color: rgb(238, 238, =
238); font-family: Consolas, Menlo, Monaco, 'Lucida Console', =
'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', =
'Courier New', monospace, serif; white-space: =
pre-wrap;">yaml_parser_t</code>&nbsp;as well, since I don't need to =
inspect it's internals, just pass it into and out of various functions. =
Plus the description of&nbsp;<span style=3D"background-color: rgb(238, =
238, 238); font-family: Consolas, Menlo, Monaco, 'Lucida Console', =
'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', =
'Courier New', monospace, serif; white-space: =
pre-wrap;">yaml_parser_t</span><span style=3D"line-height: =
17.804800033569336px;">&nbsp;is large and I don't want to spend my time =
mapping it if I don't have to. I was initially following the time_t =
example from</span><span style=3D"line-height: =
17.804800033569336px;">&nbsp;</span><a =
href=3D"https://realworldocaml.org/v1/en/html/foreign-function-interface.h=
tml#pointers-and-arrays" rel=3D"nofollow" style=3D"line-height: =
17.804800033569336px; margin: 0px; padding: 0px; border: 0px; =
vertical-align: baseline; color: rgb(74, 107, 130); text-decoration: =
none; cursor: pointer;">Real World OCaml</a><span style=3D"line-height: =
17.804800033569336px;">&nbsp;</span><span style=3D"line-height: =
17.804800033569336px;">but they seem to be using the</span><span =
style=3D"line-height: 17.804800033569336px;">&nbsp;</span><code =
style=3D"line-height: 17.804800033569336px; margin: 0px; padding: 1px =
5px; border: 0px; vertical-align: baseline; background-color: rgb(238, =
238, 238); font-family: Consolas, Menlo, Monaco, 'Lucida Console', =
'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', =
'Courier New', monospace, serif; white-space: =
pre-wrap;">time</code><span style=3D"line-height: =
17.804800033569336px;">&nbsp;</span><span style=3D"line-height: =
17.804800033569336px;">function to allocate which I don't have =
here.</span><span style=3D"line-height: =
17.804800033569336px;">&nbsp;</span></p><pre class=3D"lang-ml =
prettyprint prettyprinted" style=3D"margin-top: 0px; margin-bottom: =
10px; padding: 5px; border: 0px; font-size: 14px; vertical-align: =
baseline; background-color: rgb(238, 238, 238); font-family: Consolas, =
Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', =
'Bitstream Vera Sans Mono', 'Courier New', monospace, serif; overflow: =
auto; width: auto; max-height: 600px; word-wrap: normal; line-height: =
17.804800033569336px;"><code style=3D"margin: 0px; padding: 0px; border: =
0px; vertical-align: baseline; font-family: Consolas, Menlo, Monaco, =
'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera =
Sans Mono', 'Courier New', monospace, serif; white-space: =
inherit;"><span class=3D"kwd" style=3D"margin: 0px; padding: 0px; =
border: 0px; vertical-align: baseline; background-color: transparent; =
color: rgb(0, 0, 139);">open</span><span class=3D"pln" style=3D"margin: =
0px; padding: 0px; border: 0px; vertical-align: baseline; =
background-color: transparent;"> PosixTypes</span><span class=3D"pun" =
style=3D"margin: 0px; padding: 0px; border: 0px; vertical-align: =
baseline; background-color: transparent;">;;</span><span class=3D"pln" =
style=3D"margin: 0px; padding: 0px; border: 0px; vertical-align: =
baseline; background-color: transparent;">
</span><span class=3D"kwd" style=3D"margin: 0px; padding: 0px; border: =
0px; vertical-align: baseline; background-color: transparent; color: =
rgb(0, 0, 139);">open</span><span class=3D"pln" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;"> Ctypes</span><span class=3D"pun" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;">;;</span><span class=3D"pln" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;">
</span><span class=3D"kwd" style=3D"margin: 0px; padding: 0px; border: =
0px; vertical-align: baseline; background-color: transparent; color: =
rgb(0, 0, 139);">open</span><span class=3D"pln" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;"> Foreign</span><span class=3D"pun" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;">;;</span><span class=3D"pln" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;">

</span><span class=3D"kwd" style=3D"margin: 0px; padding: 0px; border: =
0px; vertical-align: baseline; background-color: transparent; color: =
rgb(0, 0, 139);">type</span><span class=3D"pln" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;"> yaml_parser_t </span><span class=3D"pun" style=3D"margin: =
0px; padding: 0px; border: 0px; vertical-align: baseline; =
background-color: transparent;">=3D</span><span class=3D"pln" =
style=3D"margin: 0px; padding: 0px; border: 0px; vertical-align: =
baseline; background-color: transparent;"> unit</span><span class=3D"pun" =
style=3D"margin: 0px; padding: 0px; border: 0px; vertical-align: =
baseline; background-color: transparent;">;;</span><span class=3D"pln" =
style=3D"margin: 0px; padding: 0px; border: 0px; vertical-align: =
baseline; background-color: transparent;">
</span><span class=3D"kwd" style=3D"margin: 0px; padding: 0px; border: =
0px; vertical-align: baseline; background-color: transparent; color: =
rgb(0, 0, 139);">let</span><span class=3D"pln" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;"> yaml_parser_t </span><span class=3D"pun" style=3D"margin: =
0px; padding: 0px; border: 0px; vertical-align: baseline; =
background-color: transparent;">:</span><span class=3D"pln" =
style=3D"margin: 0px; padding: 0px; border: 0px; vertical-align: =
baseline; background-color: transparent;"> yaml_parser_t typ =
</span><span class=3D"pun" style=3D"margin: 0px; padding: 0px; border: =
0px; vertical-align: baseline; background-color: =
transparent;">=3D</span><span class=3D"pln" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;"> </span><span class=3D"kwd" style=3D"margin: 0px; padding: =
0px; border: 0px; vertical-align: baseline; background-color: =
transparent; color: rgb(0, 0, 139);">void</span><span class=3D"pun" =
style=3D"margin: 0px; padding: 0px; border: 0px; vertical-align: =
baseline; background-color: transparent;">;;</span><span class=3D"pln" =
style=3D"margin: 0px; padding: 0px; border: 0px; vertical-align: =
baseline; background-color: transparent;">

</span><span class=3D"com" style=3D"margin: 0px; padding: 0px; border: =
0px; vertical-align: baseline; background-color: transparent; color: =
rgb(128, 128, 128);">(* To get it working in utop, specify the name of =
the library *)</span><span class=3D"pln" style=3D"margin: 0px; padding: =
0px; border: 0px; vertical-align: baseline; background-color: =
transparent;">
</span><span class=3D"kwd" style=3D"margin: 0px; padding: 0px; border: =
0px; vertical-align: baseline; background-color: transparent; color: =
rgb(0, 0, 139);">let</span><span class=3D"pln" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;"> libyaml </span><span class=3D"pun" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;">=3D</span><span class=3D"pln" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;"> Dl</span><span class=3D"pun" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;">.(</span><span class=3D"pln" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;">dlopen </span><span class=3D"pun" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;">~</span><span class=3D"pln" style=3D"margin: 0px; padding: =
0px; border: 0px; vertical-align: baseline; background-color: =
transparent;">filename</span><span class=3D"pun" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;">:</span><span class=3D"str" style=3D"margin: 0px; padding: =
0px; border: 0px; vertical-align: baseline; background-color: =
transparent; color: rgb(128, 0, 0);">"libyaml.dylib"</span><span =
class=3D"pln" style=3D"margin: 0px; padding: 0px; border: 0px; =
vertical-align: baseline; background-color: transparent;"> </span><span =
class=3D"pun" style=3D"margin: 0px; padding: 0px; border: 0px; =
vertical-align: baseline; background-color: transparent;">~</span><span =
class=3D"pln" style=3D"margin: 0px; padding: 0px; border: 0px; =
vertical-align: baseline; background-color: =
transparent;">flags</span><span class=3D"pun" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;">:[</span><span class=3D"pln" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;">RTLD_NOW</span><span class=3D"pun" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;">]);;</span><span class=3D"pln" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;">

</span><span class=3D"kwd" style=3D"margin: 0px; padding: 0px; border: =
0px; vertical-align: baseline; background-color: transparent; color: =
rgb(0, 0, 139);">let</span><span class=3D"pln" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;"> init </span><span class=3D"pun" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;">=3D</span><span class=3D"pln" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;"> foreign </span><span class=3D"str" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent; color: rgb(128, 0, =
0);">"yaml_parser_initialize"</span><span class=3D"pln" style=3D"margin: =
0px; padding: 0px; border: 0px; vertical-align: baseline; =
background-color: transparent;"> </span><span class=3D"pun" =
style=3D"margin: 0px; padding: 0px; border: 0px; vertical-align: =
baseline; background-color: transparent;">(</span><span class=3D"pln" =
style=3D"margin: 0px; padding: 0px; border: 0px; vertical-align: =
baseline; background-color: transparent;">ptr yaml_parser_t </span><span =
class=3D"pun" style=3D"margin: 0px; padding: 0px; border: 0px; =
vertical-align: baseline; background-color: =
transparent;">@-&gt;</span><span class=3D"pln" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;"> returning int</span><span class=3D"pun" style=3D"margin: =
0px; padding: 0px; border: 0px; vertical-align: baseline; =
background-color: transparent;">);;</span><span class=3D"pln" =
style=3D"margin: 0px; padding: 0px; border: 0px; vertical-align: =
baseline; background-color: transparent;">

</span><span class=3D"kwd" style=3D"margin: 0px; padding: 0px; border: =
0px; vertical-align: baseline; background-color: transparent; color: =
rgb(0, 0, 139);">let</span><span class=3D"pln" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;"> make </span><span class=3D"pun" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;">=3D</span><span class=3D"pln" style=3D"margin: 0px; =
padding: 0px; border: 0px; vertical-align: baseline; background-color: =
transparent;">
    </span><span class=3D"kwd" style=3D"margin: 0px; padding: 0px; =
border: 0px; vertical-align: baseline; background-color: transparent; =
color: rgb(0, 0, 139);">let</span><span class=3D"pln" style=3D"margin: =
0px; padding: 0px; border: 0px; vertical-align: baseline; =
background-color: transparent;"> p_ptr </span><span class=3D"pun" =
style=3D"margin: 0px; padding: 0px; border: 0px; vertical-align: =
baseline; background-color: transparent;">=3D</span><span class=3D"pln" =
style=3D"margin: 0px; padding: 0px; border: 0px; vertical-align: =
baseline; background-color: transparent;"> allocate yaml_parser_t =
</span><span class=3D"pun" style=3D"margin: 0px; padding: 0px; border: =
0px; vertical-align: baseline; background-color: =
transparent;">(</span><span class=3D"pln" style=3D"margin: 0px; padding: =
0px; border: 0px; vertical-align: baseline; background-color: =
transparent;">from_voidp yaml_parser</span><span class=3D"pun" =
style=3D"margin: 0px; padding: 0px; border: 0px; vertical-align: =
baseline; background-color: transparent;">)</span><span class=3D"pln" =
style=3D"margin: 0px; padding: 0px; border: 0px; vertical-align: =
baseline; background-color: transparent;"> </span><span class=3D"kwd" =
style=3D"margin: 0px; padding: 0px; border: 0px; vertical-align: =
baseline; background-color: transparent; color: rgb(0, 0, =
139);">in</span><span class=3D"pln" style=3D"margin: 0px; padding: 0px; =
border: 0px; vertical-align: baseline; background-color: transparent;">
    </span><span class=3D"kwd" style=3D"margin: 0px; padding: 0px; =
border: 0px; vertical-align: baseline; background-color: transparent; =
color: rgb(0, 0, 139);">let</span><span class=3D"pln" style=3D"margin: =
0px; padding: 0px; border: 0px; vertical-align: baseline; =
background-color: transparent;"> _ </span><span class=3D"pun" =
style=3D"margin: 0px; padding: 0px; border: 0px; vertical-align: =
baseline; background-color: transparent;">=3D</span><span class=3D"pln" =
style=3D"margin: 0px; padding: 0px; border: 0px; vertical-align: =
baseline; background-color: transparent;"> init p_ptr </span><span =
class=3D"kwd" style=3D"margin: 0px; padding: 0px; border: 0px; =
vertical-align: baseline; background-color: transparent; color: rgb(0, =
0, 139);">in</span><span class=3D"pln" style=3D"margin: 0px; padding: =
0px; border: 0px; vertical-align: baseline; background-color: =
transparent;">
    p_ptr</span><span class=3D"pun" style=3D"margin: 0px; padding: 0px; =
border: 0px; vertical-align: baseline; background-color: =
transparent;">;;</span></code></pre><div><br></div><div>How can I =
allocate a yaml_parser_t without having to map the entire structure in =
ctypes?</div><div><br></div><div>Thanks</div><div><br></div><div>
<span class=3D"Apple-style-span" style=3D"border-collapse: separate; =
border-spacing: 0px;"><span class=3D"Apple-style-span" =
style=3D"border-collapse: separate; color: rgb(0, 0, 0); font-family: =
Helvetica; font-style: normal; font-variant: normal; font-weight: =
normal; letter-spacing: normal; line-height: normal; orphans: 2; =
text-align: -webkit-auto; text-indent: 0px; text-transform: none; =
white-space: normal; widows: 2; word-spacing: 0px; =
-webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: =
0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: =
auto; -webkit-text-stroke-width: 0px;  "><div style=3D"word-wrap: =
break-word; -webkit-nbsp-mode: space; -webkit-line-break: =
after-white-space; "><span class=3D"Apple-style-span" =
style=3D"border-collapse: separate; color: rgb(0, 0, 0); font-family: =
Helvetica; font-style: normal; font-variant: normal; font-weight: =
normal; letter-spacing: normal; line-height: normal; orphans: 2; =
text-align: -webkit-auto; text-indent: 0px; text-transform: none; =
white-space: normal; widows: 2; word-spacing: 0px; =
-webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: =
0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: =
auto; -webkit-text-stroke-width: 0px;  "><div style=3D"word-wrap: =
break-word; -webkit-nbsp-mode: space; -webkit-line-break: =
after-white-space; =
"><div>-----------------------------------------------------</div><div>Tim=
 McGilchrist</div><div><br></div><div><a =
href=3D"https://twitter.com/lambda_foo">@lambda_foo</a><br><div><a =
href=3D"https://github.com/tmcgilchrist">http://github.com/tmcgilchrist</a=
></div></div></div></span></div></span></span>
</div>
<br></body></html>=

--Apple-Mail=_05CB952A-DB0E-489D-ADD6-014EE6A3325C--

From yallop@gmail.com  Sun Jan  4 00:18:38 2015
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id ADE0E3C1EB
 for <ctypes@lists.ocaml.org>; Sun,  4 Jan 2015 00:18:38 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1648979 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.51 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wg0-f51.google.com ([74.125.82.51]:52388)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1Y7Yur-0003UO-ry (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Sun, 04 Jan 2015 00:19:34 +0000
Received: by mail-wg0-f51.google.com with SMTP id x12so25560476wgg.38
 for <ctypes@lists.ocaml.org>; Sat, 03 Jan 2015 16:19:33 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=Mthuf7HEyqkl+bwAYCJw4PrgkOIwUfSEZlPypo7zqUs=;
 b=SQxfR+shCph8Vs3d77WXIqgKipOSbbUUTefvpJ0S1LifPxNZa701PRfQVeZYSz7CaI
 yamxDEFCtMN4YvpgYZNSSTZ615jrSW1KUG3hQo/dzXsOPBjd/JLYNXmAhVL0NUiqvF8J
 ydN874FTcKij8mA45abmHJldQAAtbjmwLU5NpodA/ZORXXDh0PXb4jtfG/IaW70f6tFE
 30WNsG4kS+1s2uScfvXFBe9wUj8LMcxZV1niGqLa2eHKjRoxEUqD1fuJLrha64poJhGw
 rh2nJXUWdG0IyDGbKJEwE4b3d5aEU9GdjL68LMpAPq3Y6Vyx6kTHxKIkHP/eS6Jhhu/4
 FDow==
MIME-Version: 1.0
X-Received: by 10.180.78.202 with SMTP id d10mr11491724wix.82.1420330773376;
 Sat, 03 Jan 2015 16:19:33 -0800 (PST)
Received: by 10.216.33.200 with HTTP; Sat, 3 Jan 2015 16:19:33 -0800 (PST)
In-Reply-To: <8D6EEB96-346B-4532-B859-014D36D27503@gmail.com>
References: <8D6EEB96-346B-4532-B859-014D36D27503@gmail.com>
Date: Sun, 4 Jan 2015 00:19:33 +0000
Message-ID: <CAAxsn=FM0aBeL1V7evkRuPovovn54MVWJ1QVT8K55JctEpaZdA@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Tim McGilchrist <timmcgil@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] OCaml Ctypes and allocating a pointer to a type
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sun, 04 Jan 2015 00:18:38 -0000

On 2 January 2015 at 23:01, Tim McGilchrist <timmcgil@gmail.com> wrote:
> I'm trying to call some C code from OCaml where I need to supply an
> allocated pointer to my type yaml_parser_t. But I'm not sure how I should be
> allocating a valid pointer. The example code is below.
>
> Ideally I'd like to not have to supply a concrete implementation for
> yaml_parser_t as well, since I don't need to inspect it's internals, just
> pass it into and out of various functions.

There are a few ways to approach this.  If you have some way of
finding out the size of a yaml_parser_t (e.g. via a configure script)
then you can just allocate a buffer of that size and use it at an
appropriate type.  For example, you might describe a parser as an
struct type without actually specifying any fields:

  type yaml_parser_t = [`yaml_parser_s] structure
  let parser_t : yaml_parser_t typ = structure "yaml_parser_s"

and then allocate parser_t values using something like the following:

  let make_parser () =
    coerce (ptr char) (ptr parser_t) (allocate_n ~count:parser_size char)

(A couple of things that you might wonder about: allocate_n returns
properly aligned memory, just like C's malloc(), so this is safe in
terms of alignment; the buffer returned by allocate_n will be released
automatically when you no longer have a reference to it).

You can use the definition above in your "foreign" bindings, of course:

   let init = foreign "yaml_parser_initialize" (ptr parser_t @-> returning int)

Another possibility, if you're happy to work with the bleeding edge
(i.e. unreleased Ctypes from GitHub) is to use "struct stubs", which
will retrieve the size information for you without requiring you to
describe parts of the structure that you're not going to use.  The
functions for describing structures are essentially the same as what's
described in Real World OCaml, but the build process is a little more
complex.

Here's an example of the struct stubs approach.  The main thing you
need to do is describe the bits of the structure that you're
interested in and put the description inside a functor with argument
type Cstubs.Types.TYPE.

  module Bindings(S : Cstubs.Types.TYPE) =
  struct
    open S
    let yaml_parser_s : [`yaml_parser_s] structure typ =
      structure "yaml_parser_s"
    let () = seal yaml_parser_s
  end

You can then pass the functor to the write_c function to generate some
C code which will determine the layout of the structure:

   (* write the C code to stdout with the appropriate header: *)
   print_endline "#include <yaml.h>";
   Cstubs.Types.write_c Format.std_formatter (module Bindings)

Compiling and running the C code will generate an OCaml module with
the size and alignment information inlined:

   ocamlfind ocamlc -c -package ctypes.stubs generated_c.c
   gcc generated_c.o -o generated_c
   ./generated_c > generated_module.ml
   ocamlfind ocamlc -c -package ctypes.stubs generated_module.ml

Finally you can apply the Bindings functor to the generated module to
bring the layout information into your program:

    # #load "generated_module.cmo";;
    # include Bindings(Generated_module);;
    val yaml_parser_s : [ `yaml_parser_s ] structure typ =
      Static.Struct
       {Static.tag = "yaml_parser_s";
        spec = Static.Complete {Static.size = 480; align = 8}; fields = []}

and you can immediately query the layout:

    # sizeof yaml_parser_s;;
    - : int = 480

and allocate objects of the yaml_parser_s type:

    # make yaml_parser_s;;
    - : ([ `yaml_parser_s ], [ `Struct ]) structured =
    {Static.structured = Static.CPointer <abstr>}

I hope that helps!

Jeremy.

From tekk@parlementum.net  Sat Jan 10 22:22:38 2015
Return-Path: <tekk@parlementum.net>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 1A34A3C087
 for <ctypes@lists.ocaml.org>; Sat, 10 Jan 2015 22:22:38 +0000 (GMT)
X-Cam-SpamDetails: score -0.0 from SpamAssassin-3.3.2-1650234 
 *  0.0 FSL_HELO_NON_FQDN_1 FSL_HELO_NON_FQDN_1
 * -0.0 T_RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 *  0.0 MSGID_FROM_MTA_HEADER Message-Id was added by a relay
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from parlementum.net ([173.255.221.238]:33198 helo=chrysophylax)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1YA4Rj-0006eU-kM (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <tekk@parlementum.net>); Sat, 10 Jan 2015 22:23:56 +0000
To: ctypes@lists.ocaml.org
Date: Sat, 10 Jan 2015 14:22:38 -0800
Message-ID: <20150110172238.14fee392@Hetalia.tekk.com.ar>
From: "tekk" <tekk@parlementum.net>
Received: from Hetalia.tekk.com.ar (cpe-174-106-203-236.ec.res.rr.com
 [174.106.203.236]) by chrysophylax; Sat, 10 Jan 2015 14:23:03 -0800
X-Mailer: Claws Mail 3.11.1 (GTK+ 2.24.20; x86_64-slackware-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
X-Mailman-Approved-At: Sat, 10 Jan 2015 22:24:51 +0000
Subject: [ocaml-ctypes] Converting between primitive and ocaml types
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sat, 10 Jan 2015 22:22:38 -0000


I'm sure that there's something in the documentation that I'm missing,
but I can't seem to find it. How do you convert between primitive types
(uint8_t, uint32_t, etc.) and native ocaml types like plain int? I
figured that views would be defined for this but I get type errors for
trying to use these types as ints.

From yallop@gmail.com  Sat Jan 10 22:36:01 2015
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id B81393C087
 for <ctypes@lists.ocaml.org>; Sat, 10 Jan 2015 22:36:01 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1650234 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.42 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wg0-f42.google.com ([74.125.82.42]:64544)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1YA4el-0005oS-lY (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Sat, 10 Jan 2015 22:37:20 +0000
Received: by mail-wg0-f42.google.com with SMTP id k14so13656001wgh.1
 for <ctypes@lists.ocaml.org>; Sat, 10 Jan 2015 14:37:19 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=JJCRjnLsZ+uQOub/f9x7xFHaTQa6RVK/zx0ONUd7Gzg=;
 b=mG7aR9nqi9Hzu5nFxLKThFZ7bgOUYobIcM0dCSPQvrA4NQHCIgztvpeOK1z4euwK4Z
 zvplfWiHRKS+6KG2F9mNk3BNZyMzsRqplWaxoO9vdPs1DyRYhO1C7Ijfyh20sZ7b3//9
 NcqhcUN/vRniMmMcs5/Opg766+2HEI3qaOo51xBqe5Bl/JT8YhFlTcdlja2RB+Oppzb8
 HyYnrk8BMCka6hwwcsN93g6n3Vc0rR4ykewfrMzWnezeOXUGH9ln/CcSc4cYmPQWWs2D
 VPZpnIRc9X4IZnjNK+peuUvFStsptLaxudQCJQgpbPKr9vGkK+WjNePfzX4NKd7BqkMK
 k4vw==
MIME-Version: 1.0
X-Received: by 10.194.90.81 with SMTP id bu17mr44282967wjb.3.1420929439390;
 Sat, 10 Jan 2015 14:37:19 -0800 (PST)
Received: by 10.216.33.200 with HTTP; Sat, 10 Jan 2015 14:37:19 -0800 (PST)
In-Reply-To: <20150110172238.14fee392@Hetalia.tekk.com.ar>
References: <20150110172238.14fee392@Hetalia.tekk.com.ar>
Date: Sat, 10 Jan 2015 22:37:19 +0000
Message-ID: <CAAxsn=HxwennBZ=u1h_DKPGcXfRYT7qSwXLGaeje9BXvfVF4vw@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: tekk <tekk@parlementum.net>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Converting between primitive and ocaml types
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sat, 10 Jan 2015 22:36:01 -0000

On 10 January 2015 at 22:22, tekk <tekk@parlementum.net> wrote:
> I'm sure that there's something in the documentation that I'm missing,
> but I can't seem to find it. How do you convert between primitive types
> (uint8_t, uint32_t, etc.) and native ocaml types like plain int?

The unsigned types all have to_int and from_int methods in the
associated modules:

   http://ocamllabs.github.io/ocaml-ctypes/Unsigned.S.html#VALto_int

For example:

   # Unsigned.UInt32.of_int 10;;
   - : Unsigned.UInt32.t = <uint32 10>

> I figured that views would be defined for this but I get type errors for
> trying to use these types as ints.

There aren't any built-in views for this, but you can use views to
build types that appear as int on the OCaml side and other types (e.g.
uint32_t) on the C side.  For example,

  # let isize_t = view size_t
       ~read:Unsigned.Size_t.to_int
       ~write:Unsigned.Size_t.of_int;;
      val isize_t : int typ = size_t
  # let memcpy = foreign "memcpy" (ptr void @-> ptr void @-> isize_t
@-> returning (ptr void));;
  val memcpy : unit ptr -> unit ptr -> int -> unit ptr = <fun>

Now you can call memcpy passing an int as the third argument and the
view will convert it to size_t automatically.

I hope that's helpful.

Jeremy.

From jp.deplaix@gmail.com  Wed Jan 21 22:05:45 2015
Return-Path: <jp.deplaix@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id DC8643C29E
 for <ctypes@lists.ocaml.org>; Wed, 21 Jan 2015 22:05:45 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1653210 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.182 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (jp.deplaix[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f182.google.com ([209.85.212.182]:43607)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1YE3R7-0002zY-Dm (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <jp.deplaix@gmail.com>); Wed, 21 Jan 2015 22:07:41 +0000
Received: by mail-wi0-f182.google.com with SMTP id n3so34913842wiv.3
 for <ctypes@lists.ocaml.org>; Wed, 21 Jan 2015 14:07:41 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=message-id:date:from:user-agent:mime-version:to:subject
 :content-type:content-transfer-encoding;
 bh=3XH9DjPPdNtbpVtrVMZmB2fzqbq5MSl6QXx6ndl5TIg=;
 b=NuWyu4wEuUmFv+QQ+GfE3tqSl2QtldnkfVTdqQIZthzudGGTVqPArn5rSIRF6un9LC
 qZ07fR683vJBFu76FQqwkw8xwYNtUeHrNqiaYYSaO+jiDK+Wo+flQThFUPhsHkoXSdOp
 Vxl17/U5Z3jfJTEOJRP7oenRmDRflvLfohPpUvkvdXXV9Kz/jh9NzlPlDisvxRtFzi99
 cXaGKXtV0rXe39AJIORV9L9JUu/c9X0/Dm9jil1BmQkxOYVLRH9JdJ1+pEUzucYWMAUM
 PXzobjL80/Wt4edVGJJCeWnOr/rbdsoYABZkTvnvkTEqdM+mdDj77zWtoY7/wWTION0d
 641Q==
X-Received: by 10.180.8.169 with SMTP id s9mr3697222wia.72.1421878060927;
 Wed, 21 Jan 2015 14:07:40 -0800 (PST)
Received: from [129.12.130.32] (stu8220.kent.ac.uk. [129.12.130.32])
 by mx.google.com with ESMTPSA id bb2sm1433399wjc.43.2015.01.21.14.07.40
 for <ctypes@lists.ocaml.org>
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Wed, 21 Jan 2015 14:07:40 -0800 (PST)
Message-ID: <54C0232B.2040107@gmail.com>
Date: Wed, 21 Jan 2015 22:07:39 +0000
From: Jacques-Pascal Deplaix <jp.deplaix@gmail.com>
User-Agent: Mozilla/5.0 (X11; Linux x86_64;
 rv:31.0) Gecko/20100101 Icedove/31.4.0
MIME-Version: 1.0
To: ctypes@lists.ocaml.org
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 7bit
Subject: [ocaml-ctypes] Bind a function with a type external to the library
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 21 Jan 2015 22:05:45 -0000

Hi,

I'm trying to bind libmemphis with ctypes and I encounter some problems 
with one function in particular:
https://github.com/LamaUrbain/ocaml-memphis/blob/master/src/memphis_renderer.ml#L55

The function takes a cairo_t in C but in OCaml I would like to use 
Cairo.context.
So I tried by using Obj.magic in the overloading just below (in the code 
linked above) but when I try to use the function it segfaults in some 
random cairo function (memphis_renderer_draw_tile is called before and 
seems to work).

Is there an other way to use an OCaml type (Cairo.context) instead of 
the abstract C type or the problem might comes from somewhere else ?

Cheers,

From yallop@gmail.com  Tue Jan 27 12:43:18 2015
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 1FBB63C513
 for <ctypes@lists.ocaml.org>; Tue, 27 Jan 2015 12:43:18 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1654740 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.173 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f173.google.com ([209.85.212.173]:45262)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1YG5WJ-00022R-ky (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 27 Jan 2015 12:45:32 +0000
Received: by mail-wi0-f173.google.com with SMTP id r20so4535463wiv.0
 for <ctypes@lists.ocaml.org>; Tue, 27 Jan 2015 04:45:27 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=MXjZPQhcnJhdCTk+J5rUCHXVtdSE0zXnqHKjfZqB/IM=;
 b=QMoR2ggkuEX3Nk0t2DzvNbETP5/aCIz+oshcH1Uh0iYeUbqSwAgZA4uvfm+iKj1tk6
 DrMUJvXLqKBh84V2+CVtii6LJUPLYXW8RZuOWcnfaHLXmumP7CNrg3fOm4A845v/m3lg
 CeQ6LiQfcvLGU9E13+JCvctU63p1l1ZnO8m3UUlKvM+bZpsGIL+EZJYm9goHhz8g5Fio
 uDYN8joEuM2Vc91iUc8/qChZbQCQ4v6E8BJ2xTFQmwWs52dEcxK4kYrQomAc+3dvNSyO
 45js8ljPkCzbLPhjl3g2gLiNR+fiphFoNM5pE0QkObG5wbB0SwRMM5kBWZ3R8YEb5vuC
 w3nw==
MIME-Version: 1.0
X-Received: by 10.180.160.194 with SMTP id xm2mr5542372wib.77.1422362726911;
 Tue, 27 Jan 2015 04:45:26 -0800 (PST)
Received: by 10.216.23.130 with HTTP; Tue, 27 Jan 2015 04:45:26 -0800 (PST)
In-Reply-To: <54C0232B.2040107@gmail.com>
References: <54C0232B.2040107@gmail.com>
Date: Tue, 27 Jan 2015 12:45:26 +0000
Message-ID: <CAAxsn=FdRQWBx_MNmE7SnYvjFPzX3hYcEwZMwR5bz3DPMaYcEw@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Jacques-Pascal Deplaix <jp.deplaix@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Bind a function with a type external to the
	library
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 27 Jan 2015 12:43:18 -0000

On 21 January 2015 at 22:07, Jacques-Pascal Deplaix
<jp.deplaix@gmail.com> wrote:
> I'm trying to bind libmemphis with ctypes and I encounter some problems with
> one function in particular:
> https://github.com/LamaUrbain/ocaml-memphis/blob/master/src/memphis_renderer.ml#L55
>
> The function takes a cairo_t in C but in OCaml I would like to use
> Cairo.context.
> So I tried by using Obj.magic in the overloading just below (in the code
> linked above) but when I try to use the function it segfaults in some random
> cairo function (memphis_renderer_draw_tile is called before and seems to
> work).
>
> Is there an other way to use an OCaml type (Cairo.context) instead of the
> abstract C type or the problem might comes from somewhere else ?

If the cairo_t value isn't used abstractly inside libmemphis then
passing an OCaml value instead of a cairo_t won't work.  You need to
somehow extract the address of the underlying C object from the
abstract Cairo representation and then pass that address to
libmemphis.  A quick look at the Cairo source suggests that something
along the following lines might work, but I haven't compiled or tested
it:

  /* C stub for turning a Cairo.t into a ctypes-compatible address */
  #include "ml_cairo.h"
  #include <caml/mlvalues.h>
  #include <caml/alloc.h>
  #include <stdint.h>

  value cairo_address(value v)
  {
     return caml_copy_native_int((intptr_t)cairo_t_val(v));
  }


  (* ML binding for the C stub *)
  external cairo_raw_address : Cairo.t -> nativeint =
    "cairo_address"

  let ctypes_ptr_of_cairo_t : Cairo.t -> unit Ctypes.ptr =
    fun c -> Ctypes.ptr_of_raw_address (cairo_raw_address c)

From jp.deplaix@gmail.com  Mon Feb  2 20:01:11 2015
Return-Path: <jp.deplaix@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 4A48F3C1DF
 for <ctypes@lists.ocaml.org>; Mon,  2 Feb 2015 20:01:11 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1655961 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.171 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (jp.deplaix[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f171.google.com ([209.85.212.171]:65359)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1YINDm-0005dl-Em (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <jp.deplaix@gmail.com>); Mon, 02 Feb 2015 20:03:47 +0000
Received: by mail-wi0-f171.google.com with SMTP id l15so19431657wiw.4
 for <ctypes@lists.ocaml.org>; Mon, 02 Feb 2015 12:03:46 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=message-id:date:from:user-agent:mime-version:to:cc:subject
 :references:in-reply-to:content-type:content-transfer-encoding;
 bh=vnThWc2gsJPEOM6kdqTGkcdCna4zBnsniGsRJZriKUQ=;
 b=R4YHkcOBrbm7MNt16iBerz7o8zf0ufdz00cyW5LSvIfiWYkE3eo3a7vRgQXN8EhTGE
 AMD798//WsPFXCM5FHvkpJA+5YjLSgKe5XJA9UkR5gOYb7KQON4lC8aMH4kDiz48OxJi
 cP86VFu7pGwynWtIRWOY8puUQfX/WqtqYwzlvqDQmrVDDY55TZbv7pZorRcxc7GiYPp7
 kk9OnEU7KxHu5BGuN0ea9eAu5mmyyINw1IEBkeLTOYtQmSYwPjvVDK8ESDgXKYCIVX8E
 stFoJxpOL02yIPljzXnckWVnoTMyWGH4lsQiaAfjUvD3bP+jyXG6dRZoShQ7YYpDNAhL
 u8UQ==
X-Received: by 10.195.13.104 with SMTP id ex8mr48356108wjd.12.1422907426207;
 Mon, 02 Feb 2015 12:03:46 -0800 (PST)
Received: from [129.12.130.32] (stu8220.kent.ac.uk. [129.12.130.32])
 by mx.google.com with ESMTPSA id p6sm21326851wia.14.2015.02.02.12.03.45
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Mon, 02 Feb 2015 12:03:45 -0800 (PST)
Message-ID: <54CFD820.3000903@gmail.com>
Date: Mon, 02 Feb 2015 20:03:44 +0000
From: Jacques-Pascal Deplaix <jp.deplaix@gmail.com>
User-Agent: Mozilla/5.0 (X11; Linux x86_64;
 rv:31.0) Gecko/20100101 Icedove/31.4.0
MIME-Version: 1.0
To: Jeremy Yallop <yallop@gmail.com>
References: <54C0232B.2040107@gmail.com>
 <CAAxsn=FdRQWBx_MNmE7SnYvjFPzX3hYcEwZMwR5bz3DPMaYcEw@mail.gmail.com>
In-Reply-To: <CAAxsn=FdRQWBx_MNmE7SnYvjFPzX3hYcEwZMwR5bz3DPMaYcEw@mail.gmail.com>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 7bit
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Bind a function with a type external to the
	library
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 02 Feb 2015 20:01:11 -0000

Thanks a lot !

I've fixed it that way:
https://github.com/LamaUrbain/ocaml-memphis/commit/7644dbc5970067be264aa5f6b610dbb68e1b5994

Sorry, I wasn't precise on which cairo binding I used. Unfortunately 
there are two bindings that look pretty much the same. Moreover the 
header is not installed with the ocaml package, so I couldn't use the C 
define.

I've another question on a different topic. I'll do another thread for that.

Thanks again,

On 01/27/2015 12:45 PM, Jeremy Yallop wrote:
> On 21 January 2015 at 22:07, Jacques-Pascal Deplaix
> <jp.deplaix@gmail.com> wrote:
>> I'm trying to bind libmemphis with ctypes and I encounter some problems with
>> one function in particular:
>> https://github.com/LamaUrbain/ocaml-memphis/blob/master/src/memphis_renderer.ml#L55
>>
>> The function takes a cairo_t in C but in OCaml I would like to use
>> Cairo.context.
>> So I tried by using Obj.magic in the overloading just below (in the code
>> linked above) but when I try to use the function it segfaults in some random
>> cairo function (memphis_renderer_draw_tile is called before and seems to
>> work).
>>
>> Is there an other way to use an OCaml type (Cairo.context) instead of the
>> abstract C type or the problem might comes from somewhere else ?
> If the cairo_t value isn't used abstractly inside libmemphis then
> passing an OCaml value instead of a cairo_t won't work.  You need to
> somehow extract the address of the underlying C object from the
> abstract Cairo representation and then pass that address to
> libmemphis.  A quick look at the Cairo source suggests that something
> along the following lines might work, but I haven't compiled or tested
> it:
>
>    /* C stub for turning a Cairo.t into a ctypes-compatible address */
>    #include "ml_cairo.h"
>    #include <caml/mlvalues.h>
>    #include <caml/alloc.h>
>    #include <stdint.h>
>
>    value cairo_address(value v)
>    {
>       return caml_copy_native_int((intptr_t)cairo_t_val(v));
>    }
>
>
>    (* ML binding for the C stub *)
>    external cairo_raw_address : Cairo.t -> nativeint =
>      "cairo_address"
>
>    let ctypes_ptr_of_cairo_t : Cairo.t -> unit Ctypes.ptr =
>      fun c -> Ctypes.ptr_of_raw_address (cairo_raw_address c)


From jp.deplaix@gmail.com  Mon Feb  2 20:14:19 2015
Return-Path: <jp.deplaix@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 3898F3C1DF
 for <ctypes@lists.ocaml.org>; Mon,  2 Feb 2015 20:14:19 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1655961 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.181 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (jp.deplaix[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f181.google.com ([209.85.212.181]:43644)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1YINQU-0005HP-FH (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <jp.deplaix@gmail.com>); Mon, 02 Feb 2015 20:16:55 +0000
Received: by mail-wi0-f181.google.com with SMTP id fb4so17496077wid.2
 for <ctypes@lists.ocaml.org>; Mon, 02 Feb 2015 12:16:54 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=message-id:date:from:user-agent:mime-version:to:subject
 :content-type:content-transfer-encoding;
 bh=OvwdMvk/jiYOJdRccF8+IQclfi/k1m6Fq5kNov/W69Q=;
 b=FmzmZIIcP/wNcGrV/PwsQHBomzh291hRtBNWOPJBazwt7nWBMTaDwKneOUTGgC+uyk
 IDenSe2geJ4DginU4X7H0DjR5QsYGe6zgDJwWtFQ2V0V+3NFgi+AXiCQlQYq3Q5QIrr0
 1y0OuXODKGgOCZZzlUQWOHV2sEJVlcl6p9nXBXYcSUIZ2USftFgQq8FFKjEPbLU//05Y
 siTB01+WnOEeByaK/K/ALjXAIXkqK3hCN966uCh536E7gSj0xoLJzRNVy3EIq+rSUrcI
 WJA1SRxYXGdsqUbgmwyiHFAH9QOUH9Hf4/eJo2U17v2BgM5SDisOTvm7qedeedVOq8Xj
 SpdQ==
X-Received: by 10.194.175.39 with SMTP id bx7mr47776420wjc.22.1422908214483;
 Mon, 02 Feb 2015 12:16:54 -0800 (PST)
Received: from [129.12.130.32] (stu8220.kent.ac.uk. [129.12.130.32])
 by mx.google.com with ESMTPSA id q10sm29388089wjr.41.2015.02.02.12.16.53
 for <ctypes@lists.ocaml.org>
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Mon, 02 Feb 2015 12:16:53 -0800 (PST)
Message-ID: <54CFDB34.3070309@gmail.com>
Date: Mon, 02 Feb 2015 20:16:52 +0000
From: Jacques-Pascal Deplaix <jp.deplaix@gmail.com>
User-Agent: Mozilla/5.0 (X11; Linux x86_64;
 rv:31.0) Gecko/20100101 Icedove/31.4.0
MIME-Version: 1.0
To: ctypes <ctypes@lists.ocaml.org>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 7bit
Subject: [ocaml-ctypes]  GC finalizer
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 02 Feb 2015 20:14:19 -0000

Hi again,

I'm wondering how the values (pointers allocated on the heap) created by 
a C function, binded through ctypes should be freed. Is there a standard 
way to do that ?

In my example, the memphis library allocate some memory in 
Memphis_renderer.create and should be freed via Memphis_renderer.destroy 
but is there a way to call memphis_renderer_destroy automatically using 
the OCaml GC ?

Cheers,

From buzzheavyyear@hotmail.com  Fri Feb  6 09:42:36 2015
Return-Path: <buzzheavyyear@hotmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 826403C204
 for <ctypes@lists.ocaml.org>; Fri,  6 Feb 2015 09:42:36 +0000 (GMT)
X-Cam-SpamDetails: score -0.0 from SpamAssassin-3.3.2-1655961 
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (buzzheavyyear[at]hotmail.com)
 * -0.0 T_RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [157.55.0.226 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 HTML_MESSAGE BODY: HTML included in message
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from dub004-omc1s27.hotmail.com ([157.55.0.226]:52429)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:AES256-SHA256:256)
 id 1YJfTX-0003ot-kw (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <buzzheavyyear@hotmail.com>); Fri, 06 Feb 2015 09:45:24 +0000
Received: from DUB128-W55 ([157.55.0.237]) by DUB004-OMC1S27.hotmail.com over
 TLS secured channel with Microsoft SMTPSVC(7.5.7601.22751); 
 Fri, 6 Feb 2015 01:45:23 -0800
X-TMN: [MTnCkZPG50ZcSojsIXiFLXD2AhymmrAe]
X-Originating-Email: [buzzheavyyear@hotmail.com]
Message-ID: <DUB128-W55AE076FFCFF389DC0EEACB4380@phx.gbl>
Content-Type: multipart/alternative;
 boundary="_9587bf37-f91d-4a5b-8257-121f30a125eb_"
From: Nick Betteridge <buzzheavyyear@hotmail.com>
To: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Date: Fri, 6 Feb 2015 09:45:22 +0000
Importance: Normal
MIME-Version: 1.0
X-OriginalArrivalTime: 06 Feb 2015 09:45:23.0238 (UTC)
 FILETIME=[A0AD4C60:01D041F1]
Subject: [ocaml-ctypes] Enum problem
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 06 Feb 2015 09:42:36 -0000

--_9587bf37-f91d-4a5b-8257-121f30a125eb_
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

Hello=2C

I've been trying to get enums/constant working and have been having a probl=
em in matching types:

Error: This expression has type channel_states S.typ
       but an expression was expected of type 'a Ctypes.typ =3D 'a Static.t=
yp

I get the same error when I try the fruit example from ocaml-ctypes/tests/t=
est-enums=2C although the issue may be due to a) my inexperience with ocaml=
 and b) the way I generate the stubs. However=2C all of the c functions I'm=
 mapping to compile without problems. This is essentially what I have:

bindings:
------------

open Ctypes

module Bindings
  (F : sig type _ fn
           val foreign : string -> ('a -> 'b) Ctypes.fn -> ('a -> 'b) fn en=
d) (S : Cstubs.Types.TYPE) =3D struct
    open F


  type channel_states =3D ENDED | OPENING | OPEN

  let ended    =3D S.constant "ENDED"   S.int64_t
  let opening  =3D S.constant "OPENING" S.int64_t
  let open_     =3D S.constant "OPEN"    S.int64_t

  let  channel_states =3D S.enum " channel_states" [
      ENDED=2C ended=3B
      OPENING=2C opening=3B
      OPEN=2C open_=3B
    ]

    type  channel_struct
    let  channel_struct =3D structure " channel_struct"
      let (-:) ty label =3D field  channel_struct label ty
      let state    =3D channel_states -: "state"
      let capacity =3D uint32_t           -: "capacity"
    let () =3D seal (channel_struct : channel_struct structure typ)

    type channel_t =3D channel_struct structure ptr
    let channel_t =3D ptr channel_struct

... the error occurs at the state field at channel_states


the generator:
-------------------

open Channel_bindings

let c_headers =3D "#include \"/home/nick/channel/include/channel.h\""

let main () =3D
  let ml_out =3D open_out "lib/channel_generated.ml" in
  let c_out =3D open_out "lib/channel_stubs.c" in
  let ml_fmt =3D Format.formatter_of_out_channel ml_out in
  let c_fmt =3D Format.formatter_of_out_channel c_out in
  Cstubs.write_ml ml_fmt ~prefix:"libchannel_" (module Bindings)=3B
  Format.fprintf c_fmt "%s@\n" c_headers=3B
  Cstubs.write_c c_fmt ~prefix:"libchannel_" (module Bindings)=3B
  Format.pp_print_flush ml_fmt ()=3B
  Format.pp_print_flush c_fmt ()=3B
  close_out ml_out=3B
  close_out c_out

let () =3D
  main ()

and the oasis BuildDepends is : ctypes=2C ctypes.foreign=2C ctypes.stubs=2C=
 ctypes.foreign.base=2C ctypes.foreign.unthreaded

I've been trying to work this out since early wednesday ( and learnt alot!)=
 but I can't think of anything else to try. I've locally pinned ocaml-ctype=
s from github head.

Cheers
Nick
 		 	   		  =

--_9587bf37-f91d-4a5b-8257-121f30a125eb_
Content-Type: text/html; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

<html>
<head>
<style><!--
.hmmessage P
{
margin:0px=3B
padding:0px
}
body.hmmessage
{
font-size: 12pt=3B
font-family:Calibri
}
--></style></head>
<body class=3D'hmmessage'><div dir=3D'ltr'>Hello=2C<br><br>I've been trying=
 to get enums/constant working and have been having a problem in matching t=
ypes:<br><br>Error: This expression has type channel_states S.typ<br>&nbsp=
=3B&nbsp=3B&nbsp=3B&nbsp=3B&nbsp=3B&nbsp=3B but an expression was expected =
of type 'a Ctypes.typ =3D 'a Static.typ<br><br>I get the same error when I =
try the fruit example from ocaml-ctypes/tests/test-enums=2C although the is=
sue may be due to a) my inexperience with ocaml and b) the way I generate t=
he stubs. However=2C all of the c functions I'm mapping to compile without =
problems. This is essentially what I have:<br><br>bindings:<br>------------=
<br><br>open Ctypes<br><br>module Bindings<br>&nbsp=3B (F : sig type _ fn<b=
r>&nbsp=3B&nbsp=3B&nbsp=3B&nbsp=3B&nbsp=3B&nbsp=3B&nbsp=3B&nbsp=3B&nbsp=3B&=
nbsp=3B val foreign : string -&gt=3B ('a -&gt=3B 'b) Ctypes.fn -&gt=3B ('a =
-&gt=3B 'b) fn end) (S : Cstubs.Types.TYPE) =3D struct<br>&nbsp=3B&nbsp=3B&=
nbsp=3B open F<br><br><br>&nbsp=3B type channel_states =3D ENDED | OPENING =
| OPEN<br><br>&nbsp=3B let ended&nbsp=3B&nbsp=3B&nbsp=3B =3D S.constant "EN=
DED"&nbsp=3B&nbsp=3B S.int64_t<br>&nbsp=3B let opening&nbsp=3B =3D S.consta=
nt "OPENING" S.int64_t<br>&nbsp=3B let open_&nbsp=3B&nbsp=3B&nbsp=3B&nbsp=
=3B =3D S.constant "OPEN"&nbsp=3B&nbsp=3B&nbsp=3B S.int64_t<br><br>&nbsp=3B=
 let&nbsp=3B channel_states =3D S.enum " channel_states" [<br>&nbsp=3B&nbsp=
=3B&nbsp=3B&nbsp=3B&nbsp=3B ENDED=2C ended=3B<br>&nbsp=3B&nbsp=3B&nbsp=3B&n=
bsp=3B&nbsp=3B OPENING=2C opening=3B<br>&nbsp=3B&nbsp=3B&nbsp=3B&nbsp=3B&nb=
sp=3B OPEN=2C open_=3B<br>&nbsp=3B&nbsp=3B&nbsp=3B ]<br><br>&nbsp=3B&nbsp=
=3B&nbsp=3B type&nbsp=3B channel_struct<br>&nbsp=3B&nbsp=3B&nbsp=3B let&nbs=
p=3B channel_struct =3D structure " channel_struct"<br>&nbsp=3B&nbsp=3B&nbs=
p=3B&nbsp=3B&nbsp=3B let (-:) ty label =3D field&nbsp=3B channel_struct lab=
el ty<br>&nbsp=3B&nbsp=3B&nbsp=3B&nbsp=3B&nbsp=3B let state&nbsp=3B&nbsp=3B=
&nbsp=3B =3D channel_states -: "state"<br>&nbsp=3B&nbsp=3B&nbsp=3B&nbsp=3B&=
nbsp=3B let capacity =3D uint32_t&nbsp=3B&nbsp=3B&nbsp=3B&nbsp=3B&nbsp=3B&n=
bsp=3B&nbsp=3B&nbsp=3B&nbsp=3B&nbsp=3B -: "capacity"<br>&nbsp=3B&nbsp=3B&nb=
sp=3B let () =3D seal (channel_struct : channel_struct structure typ)<br><b=
r>&nbsp=3B&nbsp=3B&nbsp=3B type channel_t =3D channel_struct structure ptr<=
br>&nbsp=3B&nbsp=3B&nbsp=3B let channel_t =3D ptr channel_struct<br><br>...=
 the error occurs at the state field at channel_states<br><br><br>the gener=
ator:<br>-------------------<br><br>open Channel_bindings<br><br>let c_head=
ers =3D "#include \"/home/nick/channel/include/channel.h\""<br><br>let main=
 () =3D<br>&nbsp=3B let ml_out =3D open_out "lib/channel_generated.ml" in<b=
r>&nbsp=3B let c_out =3D open_out "lib/channel_stubs.c" in<br>&nbsp=3B let =
ml_fmt =3D Format.formatter_of_out_channel ml_out in<br>&nbsp=3B let c_fmt =
=3D Format.formatter_of_out_channel c_out in<br>&nbsp=3B Cstubs.write_ml ml=
_fmt ~prefix:"libchannel_" (module Bindings)=3B<br>&nbsp=3B Format.fprintf =
c_fmt "%s@\n" c_headers=3B<br>&nbsp=3B Cstubs.write_c c_fmt ~prefix:"libcha=
nnel_" (module Bindings)=3B<br>&nbsp=3B Format.pp_print_flush ml_fmt ()=3B<=
br>&nbsp=3B Format.pp_print_flush c_fmt ()=3B<br>&nbsp=3B close_out ml_out=
=3B<br>&nbsp=3B close_out c_out<br><br>let () =3D<br>&nbsp=3B main ()<br><b=
r>and the oasis BuildDepends is : ctypes=2C ctypes.foreign=2C ctypes.stubs=
=2C ctypes.foreign.base=2C ctypes.foreign.unthreaded<br><br>I've been tryin=
g to work this out since early wednesday ( and learnt alot!) but I can't th=
ink of anything else to try. I've locally pinned ocaml-ctypes from github h=
ead.<br><br>Cheers<br>Nick<br> 		 	   		  </div></body>
</html>=

--_9587bf37-f91d-4a5b-8257-121f30a125eb_--

From yallop@gmail.com  Fri Feb  6 11:18:16 2015
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 83F483C204
 for <ctypes@lists.ocaml.org>; Fri,  6 Feb 2015 11:18:16 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1655961 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.43 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wg0-f43.google.com ([74.125.82.43]:61109)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1YJgy8-0003Cy-qK (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Fri, 06 Feb 2015 11:21:04 +0000
Received: by mail-wg0-f43.google.com with SMTP id y19so12934116wgg.2
 for <ctypes@lists.ocaml.org>; Fri, 06 Feb 2015 03:21:04 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=Fbz37MaCX2wfSnxGViLzsW8m7JiDwYWYR8ssUaCibdw=;
 b=utbfVWcOf1ud7NifQwAryXzkvQJYvHkbQQOaZQzxGducoq9KBOltnTM8VXiTKL4ZcY
 Nyz55eejaGuqUBuH/VAtQZ+aEGXfeerLzPJ1PTRBRa4n6zrNqsVHmzPFzZ0Z/GoveiBg
 9L9gMlXs4TiAgCCznpZSr5r0BaJbFsLctMG0Xlo/vcMNKyvu35WvkJaCBk3A2FCMlZ5C
 ydd8B9QojOGzW5iistjzkLl3qGSU7+8csnmcM5/wmVfW/MD2yKeXdyngcmcnIAgSM2+t
 AuZX5V0rfebIzcuX8K/l0lzUMYLoDfclghq4gpbsycNZFVCywQQV+FmslrwwBof4jbE7
 JfwQ==
MIME-Version: 1.0
X-Received: by 10.180.5.131 with SMTP id s3mr2328028wis.82.1423221663974; Fri,
 06 Feb 2015 03:21:03 -0800 (PST)
Received: by 10.217.13.73 with HTTP; Fri, 6 Feb 2015 03:21:03 -0800 (PST)
In-Reply-To: <54CFDB34.3070309@gmail.com>
References: <54CFDB34.3070309@gmail.com>
Date: Fri, 6 Feb 2015 11:21:03 +0000
Message-ID: <CAAxsn=GbMxoW3tGiE0KCzEn7GsPUtYTJXZMB_YXFZH5RsJ-Oog@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Jacques-Pascal Deplaix <jp.deplaix@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] GC finalizer
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 06 Feb 2015 11:18:16 -0000

On 2 February 2015 at 20:16, Jacques-Pascal Deplaix
<jp.deplaix@gmail.com> wrote:
> I'm wondering how the values (pointers allocated on the heap) created by a C
> function, binded through ctypes should be freed. Is there a standard way to
> do that ?
>
> In my example, the memphis library allocate some memory in
> Memphis_renderer.create and should be freed via Memphis_renderer.destroy but
> is there a way to call memphis_renderer_destroy automatically using the
> OCaml GC ?

There are a few options.  The simplest thing may be to add a finaliser
(using Gc.finalise) to the pointer returned from
Memphpis_renderer.create that calls memphis_renderer_destroy.

From jp.deplaix@gmail.com  Fri Feb  6 17:52:29 2015
Return-Path: <jp.deplaix@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 91D533CC0E
 for <ctypes@lists.ocaml.org>; Fri,  6 Feb 2015 17:52:29 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1655961 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.175 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (jp.deplaix[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f175.google.com ([209.85.212.175]:46540)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1YJn7e-0004aB-ps (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <jp.deplaix@gmail.com>); Fri, 06 Feb 2015 17:55:18 +0000
Received: by mail-wi0-f175.google.com with SMTP id fb4so4340246wid.2
 for <ctypes@lists.ocaml.org>; Fri, 06 Feb 2015 09:55:17 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=message-id:date:from:user-agent:mime-version:to:cc:subject
 :references:in-reply-to:content-type:content-transfer-encoding;
 bh=W/yAdIv5xAwSHtOXxNdmTJqd49VNtOP3eaM2ZeMNiYE=;
 b=MDVfEinMZRCcHTp368BRd2UaQ3pV3Woe8GPlyMLSYzqO0Hofv9ANttYoezTlqQ7wNE
 inPKwHxJrH/BRiloT+10MHfRjsUEadGeIElNTc5CkdKNpj6b/B09WZQeZjlYfadt+Vxh
 Ai4knzEAHHRsKXDumUEmLNvtU+z4clQdk7RkbhhVbhHJPF1M40Yrl0zOAtZvHJHTfgNH
 hijOeO9iyObvYboSTJW/sG34WrJb2ZUDzy7lJk2UChruEPtmUydCH+Y7PqEem0qTgl+B
 vabd4ntfYG4OAYzDT/SEllUBGjJVUM1Go9smFLk+uvHUh1NuXCrs6H801sqkTHPslfc8
 lsZw==
X-Received: by 10.194.239.129 with SMTP id vs1mr10100119wjc.158.1423245317753; 
 Fri, 06 Feb 2015 09:55:17 -0800 (PST)
Received: from [129.12.130.32] (stu8220.kent.ac.uk. [129.12.130.32])
 by mx.google.com with ESMTPSA id r7sm4283651wjw.23.2015.02.06.09.55.16
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Fri, 06 Feb 2015 09:55:16 -0800 (PST)
Message-ID: <54D50003.2090506@gmail.com>
Date: Fri, 06 Feb 2015 17:55:15 +0000
From: Jacques-Pascal Deplaix <jp.deplaix@gmail.com>
User-Agent: Mozilla/5.0 (X11; Linux x86_64;
 rv:31.0) Gecko/20100101 Icedove/31.4.0
MIME-Version: 1.0
To: Jeremy Yallop <yallop@gmail.com>
References: <54CFDB34.3070309@gmail.com>
 <CAAxsn=GbMxoW3tGiE0KCzEn7GsPUtYTJXZMB_YXFZH5RsJ-Oog@mail.gmail.com>
In-Reply-To: <CAAxsn=GbMxoW3tGiE0KCzEn7GsPUtYTJXZMB_YXFZH5RsJ-Oog@mail.gmail.com>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 7bit
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] GC finalizer
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 06 Feb 2015 17:52:29 -0000

Thanks a lot !

On 02/06/2015 11:21 AM, Jeremy Yallop wrote:
> On 2 February 2015 at 20:16, Jacques-Pascal Deplaix
> <jp.deplaix@gmail.com> wrote:
>> I'm wondering how the values (pointers allocated on the heap) created by a C
>> function, binded through ctypes should be freed. Is there a standard way to
>> do that ?
>>
>> In my example, the memphis library allocate some memory in
>> Memphis_renderer.create and should be freed via Memphis_renderer.destroy but
>> is there a way to call memphis_renderer_destroy automatically using the
>> OCaml GC ?
> There are a few options.  The simplest thing may be to add a finaliser
> (using Gc.finalise) to the pointer returned from
> Memphpis_renderer.create that calls memphis_renderer_destroy.


From yallop@gmail.com  Fri Feb 13 15:23:56 2015
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-51.csi.cam.ac.uk (ppsw-51.csi.cam.ac.uk [131.111.8.151])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id DB7C13C37D
 for <ctypes@lists.ocaml.org>; Fri, 13 Feb 2015 15:23:56 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1659170 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.170 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-we0-f170.google.com ([74.125.82.170]:48324)
 by ppsw-51.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1YMI96-0008IR-Xo (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Fri, 13 Feb 2015 15:27:08 +0000
Received: by mail-we0-f170.google.com with SMTP id q59so17305961wes.1
 for <ctypes@lists.ocaml.org>; Fri, 13 Feb 2015 07:27:08 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=Bk0UceZj1ZgkmY3gMS5R/NcX1UQd+G3SC4TSB9hUobQ=;
 b=DrZk13PBHvmvbwMRTQalCDPC747arRi580XzS6YaEPiLdwAr43LG0sMi+EhcfGGQo3
 wqyzZkhkzKx2uJHUeYBnsqv3BziEL+2iAyavqH5P6DyXhJa6kfpJlJHGJFmV2sNFIFZ1
 2v043Z6MyDgdIjWgDok6vunj794FEAjL4Rl+xeCxfrRYUKzD4P4pKJVjXeiAyknXilmP
 MFu/t2/f1QDnJYtaOg9NS5Ng5reah4QkocrkNYxK1Wa2oRsoCxr8PQLujSI28DrHlVD7
 jWoL8Pr6nZrivIiCjrbLf5Rjq6WD4422vstYg5h7UxGfw2W74bbwLpG4yiIuhX4K4VSt
 tRpw==
MIME-Version: 1.0
X-Received: by 10.180.78.4 with SMTP id x4mr8083867wiw.86.1423841228178; Fri,
 13 Feb 2015 07:27:08 -0800 (PST)
Received: by 10.217.13.73 with HTTP; Fri, 13 Feb 2015 07:27:07 -0800 (PST)
In-Reply-To: <DUB128-W55AE076FFCFF389DC0EEACB4380@phx.gbl>
References: <DUB128-W55AE076FFCFF389DC0EEACB4380@phx.gbl>
Date: Fri, 13 Feb 2015 15:27:07 +0000
Message-ID: <CAAxsn=GKyRhDwqqbBBOAzvCqF7F4=z0oxYYK__BfpQNj_v687w@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Nick Betteridge <buzzheavyyear@hotmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Enum problem
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 13 Feb 2015 15:23:56 -0000

Dear Nick,

I think if you split your code into two functors: one for retrieving
struct layout and one for binding functions then things will work out
better.  The code you've posted only deals with struct layout, so I'll
make some suggestions for removing the function binding parts to get
it working.

On 6 February 2015 at 09:45, Nick Betteridge <buzzheavyyear@hotmail.com> wrote:
> I've been trying to get enums/constant working and have been having a
> problem in matching types:
[...]
> module Bindings
>   (F : sig type _ fn
>            val foreign : string -> ('a -> 'b) Ctypes.fn -> ('a -> 'b) fn
> end) (S : Cstubs.Types.TYPE) = struct

You only need the second functor argument (S) here, so you can change
the above to:

    module Bindings (S : Cstubs.Types.TYPE) = struct

>     open F

Make this

   open S

This should fix the type mismatch error.

> the generator:
[...]
>   Cstubs.write_ml ml_fmt ~prefix:"libchannel_" (module Bindings);
>   Format.fprintf c_fmt "%s@\n" c_headers;
>   Cstubs.write_c c_fmt ~prefix:"libchannel_" (module Bindings);

Cstubs.write_ml and Cstubs.write_c are for foreign function bindings.
There's a corresponding operation, Cstubs_structs.write_c, for
generating code to retrieve struct layout.  If you remove the call to
Cstubs.write_ml and replace the last line with

    Cstubs_structs.write_c c_fmt (module Bindings);

then you should get a little further.

Kind regards,

Jeremy.

From thomas.braibant@gmail.com  Mon Mar  9 21:14:35 2015
Return-Path: <thomas.braibant@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 90E7C3CC51
 for <ctypes@lists.ocaml.org>; Mon,  9 Mar 2015 21:14:35 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1664559 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.214.169 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (thomas.braibant[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-ob0-f169.google.com ([209.85.214.169]:44165)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1YV50r-0002hK-ET (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <thomas.braibant@gmail.com>); Mon, 09 Mar 2015 21:14:57 +0000
Received: by obcuy5 with SMTP id uy5so29421418obc.11
 for <ctypes@lists.ocaml.org>; Mon, 09 Mar 2015 14:14:56 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:from:date:message-id:subject:to:content-type;
 bh=VFSzdXnCda5BqwrYBh0/3xj6AJ0OtDxyD7r+wF/eFnY=;
 b=KOsGTCU1L1BiI+v7YzWsomtuYDTNSHdVdaN948OmThKIr5e3B3rLzJ5OVOVjaciaYn
 w3LRu8dcn/0F5xkPFlDfOTQz7ZfoKDJbcEh48A8T9o0WEsoLHQxKuobt6aj8LsQt91oU
 oqKP+SsltKqRlzoEuH79TwoCcZzngIVk0V+8FPfB/drTCE/MRmr+m/Wbnxd538BzAZkV
 qU5oSIUe762llhFJ+AA8NZuRK5amZA8N4NQQdJhU7cT/euUYlgzawaIEw6BhETiYEoXl
 4FYVIWGK8sREiD5vMdb0TOQPHcdsOKNspmxDTmsmDP1cx8SqkxXON51ot3KAZzv60bY0
 UKEQ==
X-Received: by 10.202.63.132 with SMTP id m126mr21670379oia.33.1425935696354; 
 Mon, 09 Mar 2015 14:14:56 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.202.230.3 with HTTP; Mon, 9 Mar 2015 14:14:36 -0700 (PDT)
From: Thomas Braibant <thomas.braibant@gmail.com>
Date: Mon, 9 Mar 2015 22:14:36 +0100
Message-ID: <CAHR=Vkxv-wrvcsyjJg0SEXPCoHQsB6yuPAxkpxNyYyuOEQbRDg@mail.gmail.com>
To: ctypes <ctypes@lists.ocaml.org>
Content-Type: text/plain; charset=UTF-8
Subject: [ocaml-ctypes] Abstract 'a typ
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 09 Mar 2015 21:14:35 -0000

Hi list,

I am working on some new bindings for a library which hides the
declaration of a struct. Basically, all the public header defines is

typedef struct foo foo;

All functions of the library return pointers to `foo` or consume
pointers to `foo`.  I reckon that it prevents users of the library to
copy the structure or mess with its members.

I do not know what's the preferred way to handle this situation in
ctypes. I would really like to use `abstract`, but in that particular
case, I should really not be able to provide the size nor the
alignement of the struct. I could use void pointers to implement foo
pointers, but this seem a bit error prone (minor variation: use magic
to expose `unit ptr typ` as `foo ptr typ` with `foo` a fresh type).

Any pointers welcome!

Best,
Thomas

From daniel.buenzli@erratique.ch  Mon Mar  9 21:37:04 2015
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id E0A8A3CC51
 for <ctypes@lists.ocaml.org>; Mon,  9 Mar 2015 21:37:04 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1664559
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:53055
 helo=smtp.webfaction.com)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1YV5Mc-0008A8-k2 (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Mon, 09 Mar 2015 21:37:27 +0000
Received: from [172.20.10.2]
 (198.234.197.178.dynamic.wless.lssmb00p-cgnat.res.cust.swisscom.ch
 [178.197.234.198])
 by smtp.webfaction.com (Postfix) with ESMTP id 4D5BE20E04F2;
 Mon,  9 Mar 2015 21:37:24 +0000 (UTC)
Date: Mon, 9 Mar 2015 22:37:20 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Thomas Braibant <thomas.braibant@gmail.com>
Message-ID: <A5D7086DCE7E468B996CA60B770D9698@erratique.ch>
In-Reply-To: <CAHR=Vkxv-wrvcsyjJg0SEXPCoHQsB6yuPAxkpxNyYyuOEQbRDg@mail.gmail.com>
References: <CAHR=Vkxv-wrvcsyjJg0SEXPCoHQsB6yuPAxkpxNyYyuOEQbRDg@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Abstract 'a typ
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 09 Mar 2015 21:37:05 -0000



Le lundi, 9 mars 2015 =C3=A0 22:14, Thomas Braibant a =C3=A9crit :

> I do not know what's the preferred way to handle this situation in
> ctypes. I would really like to use =60abstract=60, but in that particul=
ar
> case, I should really not be able to provide the size nor the
> alignement of the struct. I could use void pointers to implement foo
> pointers, but this seem a bit error prone (minor variation: use magic
> to expose =60unit ptr typ=60 as =60foo ptr typ=60 with =60foo=60 a fres=
h type).

If your bindings are thin you should just use an OCaml abstract type that=
 denotes pointers to void pointers. The only place where you need to be c=
areful is in the bindings themselves but that should be trivial.

=46or example in tsdl:

https://github.com/dbuenzli/tsdl/blob/bc18d14b1a28af99ebc30b61e303ee53040=
55d31/src/tsdl.mli=23L727
https://github.com/dbuenzli/tsdl/blob/bc18d14b1a28af99ebc30b61e303ee53040=
55d31/src/tsdl.ml=23L1093-L1095

Best,

Daniel



From thomas.braibant@gmail.com  Tue Mar 10 12:09:57 2015
Return-Path: <thomas.braibant@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id DBDA63C0B5
 for <ctypes@lists.ocaml.org>; Tue, 10 Mar 2015 12:09:57 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1665154 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.218.54 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (thomas.braibant[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-oi0-f54.google.com ([209.85.218.54]:44981)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1YVIzN-0002Wx-EX (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <thomas.braibant@gmail.com>); Tue, 10 Mar 2015 12:10:22 +0000
Received: by oifu20 with SMTP id u20so866490oif.11
 for <ctypes@lists.ocaml.org>; Tue, 10 Mar 2015 05:10:20 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc:content-type:content-transfer-encoding;
 bh=vAqZkfQcL3DxhwORpufkFE/d7sCVI9zfjsghwLPmneY=;
 b=JAi7HRDxrNiJFl0EsEaXR10TCEWuKO0NNRsbiwWeHndHz1WTeAn4PptEsfYrVyMncw
 Ytggdph3u4cDslcuoJ/Rwf0e0YXcukaQ/TRNGsBd9uDRzqGGeeJO5JAlgOCWO0QVC8Rm
 BFOMEP8fAX/8ZGvr3eMVGXujjOUsQwt1Vs4uayEYyeRrC/C34EQ7JhOmw6aPLzrb/xMd
 bLN0x98EKqiIe45040Hc4hFvjvmX9TQNrQTJ3Oy2bW44EVK07VpBd7upqnp+80gY+66e
 LMXsPuwCMfaKYGJe9Jl3/ebgvcbxc7a/yTlXxjXh8oYx3+n+p5jUnPqNVx1lEje2+u2S
 Wlaw==
X-Received: by 10.202.207.197 with SMTP id f188mr24213223oig.29.1425989420475; 
 Tue, 10 Mar 2015 05:10:20 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.202.230.3 with HTTP; Tue, 10 Mar 2015 05:10:00 -0700 (PDT)
In-Reply-To: <A5D7086DCE7E468B996CA60B770D9698@erratique.ch>
References: <CAHR=Vkxv-wrvcsyjJg0SEXPCoHQsB6yuPAxkpxNyYyuOEQbRDg@mail.gmail.com>
 <A5D7086DCE7E468B996CA60B770D9698@erratique.ch>
From: Thomas Braibant <thomas.braibant@gmail.com>
Date: Tue, 10 Mar 2015 13:10:00 +0100
Message-ID: <CAHR=Vky0us1DHusAapTqeMUy++A9ty9T496PVz9K_PGxwnCQmg@mail.gmail.com>
To: =?UTF-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Abstract 'a typ
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 10 Mar 2015 12:09:57 -0000

On Mon, Mar 9, 2015 at 10:37 PM, Daniel B=C3=BCnzli
<daniel.buenzli@erratique.ch> wrote:
> If your bindings are thin you should just use an OCaml abstract type that=
 denotes pointers to void pointers. The only place where you need to be car=
eful is in the bindings themselves but that should be trivial.
>
> For example in tsdl:
>
> https://github.com/dbuenzli/tsdl/blob/bc18d14b1a28af99ebc30b61e303ee53040=
55d31/src/tsdl.mli#L727
> https://github.com/dbuenzli/tsdl/blob/bc18d14b1a28af99ebc30b61e303ee53040=
55d31/src/tsdl.ml#L1093-L1095
>

Thanks. This is what I had in mind with void pointers. I will go
forward with that solution. (And refrain myself from trying to be
pedantic inside these particular bindings.)

Best,
Thomas

From daniel.buenzli@erratique.ch  Tue Mar 10 12:28:45 2015
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id A9B213C0B5
 for <ctypes@lists.ocaml.org>; Tue, 10 Mar 2015 12:28:45 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1665154
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:58519
 helo=smtp.webfaction.com)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1YVJHZ-0004UW-jC (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Tue, 10 Mar 2015 12:29:10 +0000
Received: from [172.20.10.2]
 (98.233.197.178.dynamic.wless.lssmb00p-cgnat.res.cust.swisscom.ch
 [178.197.233.98])
 by smtp.webfaction.com (Postfix) with ESMTP id 1AE3220E4958;
 Tue, 10 Mar 2015 12:29:06 +0000 (UTC)
Date: Tue, 10 Mar 2015 13:29:04 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Thomas Braibant <thomas.braibant@gmail.com>
Message-ID: <6D6F44F39F784742932CFD83C7943FD5@erratique.ch>
In-Reply-To: <CAHR=Vky0us1DHusAapTqeMUy++A9ty9T496PVz9K_PGxwnCQmg@mail.gmail.com>
References: <CAHR=Vkxv-wrvcsyjJg0SEXPCoHQsB6yuPAxkpxNyYyuOEQbRDg@mail.gmail.com>
 <A5D7086DCE7E468B996CA60B770D9698@erratique.ch>
 <CAHR=Vky0us1DHusAapTqeMUy++A9ty9T496PVz9K_PGxwnCQmg@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Abstract 'a typ
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 10 Mar 2015 12:28:45 -0000

Le mardi, 10 mars 2015 =C3=A0 13:10, Thomas Braibant a =C3=A9crit :
> Thanks. This is what I had in mind with void pointers. I will go
> forward with that solution. (And refrain myself from trying to be
> pedantic inside these particular bindings.)

I don't remember exactly but maybe you can be pedantic with views. =20

Best,

Daniel



From yallop@gmail.com  Tue Mar 10 14:34:13 2015
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 9B72D3C0B5
 for <ctypes@lists.ocaml.org>; Tue, 10 Mar 2015 14:34:13 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1665154 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.192.54 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qg0-f54.google.com ([209.85.192.54]:39633)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1YVLEz-00068J-Ek (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 10 Mar 2015 14:34:38 +0000
Received: by qgdq107 with SMTP id q107so2222286qgd.6
 for <ctypes@lists.ocaml.org>; Tue, 10 Mar 2015 07:34:36 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type:content-transfer-encoding;
 bh=kISzH7I1dxmF9zJXlCf662G44nYShZdYEgp1yAYPjqE=;
 b=0PTdWPcHfnjeXXxyAgNGFbcGlUxyIAL7L5v5ghGyBcjfJ3z/lNfJx5CHBebuU6e1hk
 wyScPoordacapNouKdEpe6Ne0ggJH9tMifpySNGSKbe1iTKGs4/ctoPExPc8vDeLj1nJ
 /6/Qnoqk5qPkfWBIqqTbe6W1Z7Ibfi3NSH8nIK8FSZJPQ2j3WPh9B29F3S7PlTZxCKkz
 198OCTsz5ga/gCfUpUHJH2w1QWhQtdwnJIrl41DRqE/1z8ekcUVFS7r655VEMIVFvTbK
 NU8B68l3ZQPBDj4FbxfqFlr6oeEy1TrC8GY23zY69nT8nr340pyu5C0kHTAi25/gN+SH
 KdWQ==
MIME-Version: 1.0
X-Received: by 10.140.238.2 with SMTP id j2mr42427102qhc.5.1425998076671; Tue,
 10 Mar 2015 07:34:36 -0700 (PDT)
Received: by 10.229.160.11 with HTTP; Tue, 10 Mar 2015 07:34:36 -0700 (PDT)
In-Reply-To: <CAHR=Vky0us1DHusAapTqeMUy++A9ty9T496PVz9K_PGxwnCQmg@mail.gmail.com>
References: <CAHR=Vkxv-wrvcsyjJg0SEXPCoHQsB6yuPAxkpxNyYyuOEQbRDg@mail.gmail.com>
 <A5D7086DCE7E468B996CA60B770D9698@erratique.ch>
 <CAHR=Vky0us1DHusAapTqeMUy++A9ty9T496PVz9K_PGxwnCQmg@mail.gmail.com>
Date: Tue, 10 Mar 2015 14:34:36 +0000
Message-ID: <CAAxsn=HnHv1Xymg+3F_Swz8z58hkW7B-fwDNYr=aQ4sq56Px+A@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Thomas Braibant <thomas.braibant@gmail.com>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Abstract 'a typ
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 10 Mar 2015 14:34:13 -0000

On 10 March 2015 at 12:10, Thomas Braibant <thomas.braibant@gmail.com> wrot=
e:
> On Mon, Mar 9, 2015 at 10:37 PM, Daniel B=C3=BCnzli
> <daniel.buenzli@erratique.ch> wrote:
>> If your bindings are thin you should just use an OCaml abstract type tha=
t denotes pointers to void pointers. The only place where you need to be ca=
reful is in the bindings themselves but that should be trivial.
>>
>> For example in tsdl:
>>
>> https://github.com/dbuenzli/tsdl/blob/bc18d14b1a28af99ebc30b61e303ee5304=
055d31/src/tsdl.mli#L727
>> https://github.com/dbuenzli/tsdl/blob/bc18d14b1a28af99ebc30b61e303ee5304=
055d31/src/tsdl.ml#L1093-L1095
>>
>
> Thanks. This is what I had in mind with void pointers. I will go
> forward with that solution. (And refrain myself from trying to be
> pedantic inside these particular bindings.)

You can use the module system to distinguish different types of
pointers within your library.  For example:

   module Foo :
   sig
      type t
      val t : t typ
   end =3D
   struct
      type t =3D unit
      let t =3D void
   end

Now 'ptr Foo.t' and 'ptr void' have the same representation but
different types, so you can't accidentally mix them up.

It's also possible to write something that corresponds quite closely
to your C definition:

   typedef struct foo foo;

There are two parts to this definition.  First, there's an incomplete
struct type "struct foo".  In ctypes you can create an incomplete
struct by calling Ctypes.structure without calling Ctypes.seal:

   let struct_foo =3D structure "foo"

Once again, you can use the module system to ensure that Ctypes.seal
is never called.

The other part of the definition is the typedef.  In trunk there's a
function Ctypes.typedef that's just a thin wrapper around a view,
changing only the printing behaviour:

  val typedef : 'a typ -> string -> 'a typ

Putting these together gives you the following:

  module Foo :
  sig
    type t
    val t : t typ
  end =3D
  struct
    type t =3D unit structure
    let t =3D typedef (structure "foo") "foo"
  end;;

This has the following properties: (1) It's distinguished from other
incomplete/"abstract" types in the OCaml type system; (2) it has the
correct representation (i.e. as a structure type with no fields); (3)
it has the correct printing behaviour, e.g.:

  # ptr (ptr Foo.t);;
  - : Foo.t ptr ptr typ =3D foo**

The printing behaviour is useful for development and debugging, but
should also give you better types in generated stub code.

From yallop@gmail.com  Sat Mar 14 19:17:21 2015
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 0F48F3C527
 for <ctypes@lists.ocaml.org>; Sat, 14 Mar 2015 19:17:21 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1666372 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.216.176 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qc0-f176.google.com ([209.85.216.176]:33169)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1YWrZO-0004Wq-Fi (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Sat, 14 Mar 2015 19:17:59 +0000
Received: by qcyi15 with SMTP id i15so14458968qcy.0
 for <ctypes@lists.ocaml.org>; Sat, 14 Mar 2015 12:17:58 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:date:message-id:subject:from:to:content-type
 :content-transfer-encoding;
 bh=dAl/i8c8gdV9b0qJXDwQti73ZGTJKvWsqkZxMdmiis0=;
 b=LzwpRBjEyorvoXavJMZedcZk4ewHkyEd3teeodFjvGAg5sC93s18+I5rbyPVTSjAbW
 fvRxSPEn73aIzfMQ0vuIit5MpC6ScCE7WhiCWcWeHzdZCplQEIVjmEhlGge7pAsr2YBF
 CJ3IRyCjtPyKuHfV7hTo2OMsngpUzFktjNh76Tnr/iPgJh9ZEIiYlD0P8rQ4x6U7w2g2
 xcWZCxU/M6RAJzUTP1IWTijFEApSWmtgA47vGgpNu82r+nZcvMh1Ci5KbuJ90+H5QTQi
 KWQeK28MxsV83w5KU31pCxjEz0JK3X2gYgMlFlb22T51M8xmGr5X7cBh3MRNbooGWITz
 uA/w==
MIME-Version: 1.0
X-Received: by 10.140.34.36 with SMTP id k33mr66471628qgk.66.1426360677968;
 Sat, 14 Mar 2015 12:17:57 -0700 (PDT)
Received: by 10.229.160.11 with HTTP; Sat, 14 Mar 2015 12:17:57 -0700 (PDT)
Date: Sat, 14 Mar 2015 19:17:57 +0000
Message-ID: <CAAxsn=HFp-8ohEBsbi__oOyCnz8R5A=zHRqbtb9sW60Er8D7Sw@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: caml-list@inria.fr, ctypes@lists.ocaml.org
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Subject: [ocaml-ctypes] ANN: ocaml-ctypes 0.4.0,
 a library for calling C functions directly from OCaml
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sat, 14 Mar 2015 19:17:21 -0000

I'm happy to announce the release of ocaml-ctypes 0.4.0, which is now
available on OPAM.

=3D=3D About ocaml-ctypes =3D=3D

The ocaml-ctypes library makes it possible to call C functions from
OCaml without writing any C code.  The core of the library is a set of
combinators for describing C types -- scalars, functions, structs,
unions, arrays, and pointers to values and functions.  Type
descriptions can then be used to bind native functions and values.
Here's a simple example:

    # let puts =3D foreign "puts" (string @-> returning int);;
    val puts : string -> int =3D <fun>
    # puts "Hello, world!";;
    Hello, world!

Ctypes includes many more features, including functions for retrieving
constants, values and details about object layout from C, a way of
building C libraries from OCaml modules, and a variety of binding
strategies such as dynamic linking and static stub generation.
Further information is available at the links below:

  Tutorial: https://github.com/ocamllabs/ocaml-ctypes/wiki/ctypes-tutorial
  Examples: https://github.com/ocamllabs/ocaml-ctypes/tree/master/examples
  Some packages using ctypes:
http://opam.ocaml.org/packages/ctypes/ctypes.0.3.4/
  API documentation: http://ocamllabs.github.io/ocaml-ctypes/
  Github repository: https://github.com/ocamllabs/ocaml-ctypes
  Direct download:
https://github.com/ocamllabs/ocaml-ctypes/archive/0.4.0.tar.gz

=3D=3D New features in 0.4.0 =3D=3D

* Windows support (A. Hauptmann)

  32-bit and 64-bit builds on MinGW, and continuous integration using Appve=
yor.

* Xen support (Thomas Leonard)

* Add the C99 bool type (Ramkumar Ramachandra)

  The type representation

    val bool : bool typ

  supports passing bools to (and returning bools from) functions,
using them as struct members, etc.

* Typedef support (Edwin T=C3=B6r=C3=B6k)

  A new function

    val typedef 'a typ -> string -> 'a typ

  supports defining type aliases that are used in top-level printing
and in stub generation.

* Enum types

  The new function

    val enum : string -> ?unexpected:(int64 -> 'a) -> ('a * int64
const) list -> 'a typ

  supports defining types representations that appear as OCaml types
(typically variants) on the OCaml side and C enums on the C side.

* Accessing C globals with foreign_value in generated stubs

  A new function

     val foreign_value : string -> 'a typ -> 'a ptr fn

  supports accessing C global values from OCaml programs.

* Retrieving #define and enum constants from C

  A new function

     val constant : string -> 'a typ -> 'a const

  supports retrieving compile-time constant values from C.

* Releasing the runtime lock in C calls

  The Foreign.foreign function now accepts an additional optional argument

     ?release_runtime_lock:bool

  that indicates whether the runtime lock should be released for the
duration of the C call.

* Acquiring the runtime lock in callbacks

  The Foreign.funptr function now accepts an additional optional argument

     ?runtime_lock:bool

  that indicates whether the runtime lock should be acquired for the
duration of the OCaml call.

* Passing 'bytes' values directly to C (Peter Zotov)

  The new function

    val ocaml_bytes_start : bytes -> bytes ocaml

  supports passing bytes values directly to C in situations where
performance is critical.

* Custom printers in views (Thomas Braibant)

  The view function now accepts an additional argument

     format:(Format.formatter -> 'b -> unit)

  which supports custom printing for values of a view type.

* Optionally obtain struct and union layout from C

  The new module Cstubs.Types supports retrieving struct and union
layouts from C as an alternative to computing them based on
programmer-supplied information

* string_opt wraps char *, not void *.

* Remove some poorly-supported POSIX types

  Several of the types in the PosixTypes module are no longer available.

* Use nativeint to represent pointers

  See "Incompatibilities" below.

* Support zero-argument callbacks

* A function for retrieving field names (Thomas Braibant)

  The new function

    val field_name : (_, _) field -> string

  retrieves the name of a struct or union field.

* Better exception handling when using RTLD_NOLOAD (A. Hauptmann)

* RTLD_LOCAL support for Dl.dlopen

* Changed the #include path to $(ocamlfind query ctypes)

  See "Incompatibilities" below.

* Renamed some internal modules to avoid name clashes

=3D=3D Incompatibilities =3D=3D

This release introduces a number of minor incompatibilities.

* Include path

  The path to the headers installed by ctypes has changed from

     $(ocamlfind query ctypes)/..

  to

     $(ocamlfind query ctypes)

  You can set things up to work with both ctypes 0.4.0 and previous
versions by configuring your build system to use both paths.

* Pointer representation

  The functions ptr_of_raw_address and raw_address_of_ptr previously
operated on int64 values, but now operate on nativeint values.

* Opam packages

  There are now two OPAM packages, ctypes and ctypes-foreign.  Only
the latter depends on libffi, so if your package uses only the ctypes
stub generation backend then users of your library need not install
libffi.  If you use the dynamic (Foreign) backend then you should
depend on both packages.

Existing OPAM packages that depend on ctypes have been updated accordingly.

=3D=3D Thanks =3D=3D

Thanks to A. Hauptmann, David Sheets, Maverick Woo, Peter Zotov, David
Kaloper, Ramkumar Ramachandra, Thomas Braibant, Hugo Heuzard, Edwin
T=C3=B6r=C3=B6k, Thomas Leonard and Yakov Zaytsev for contributions to this
release.

From daniel.buenzli@erratique.ch  Sun Mar 15 13:44:50 2015
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 4FC3C3C4A9
 for <ctypes@lists.ocaml.org>; Sun, 15 Mar 2015 13:44:50 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1666639
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:35033
 helo=smtp.webfaction.com)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtp id 1YX8rC-0006mR-G3 (Exim 4.82_3-c0e5623) for
 ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Sun, 15 Mar 2015 13:45:31 +0000
Received: from [172.20.10.2]
 (152.225.197.178.dynamic.wless.zhbmb00p-cgnat.res.cust.swisscom.ch
 [178.197.225.152])
 by smtp.webfaction.com (Postfix) with ESMTP id 48BA020E6ED6;
 Sun, 15 Mar 2015 13:45:28 +0000 (UTC)
Date: Sun, 15 Mar 2015 14:45:23 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Jeremy Yallop <yallop@gmail.com>
Message-ID: <C46A890B930E49FBAF2F3152A427B21A@erratique.ch>
In-Reply-To: <CAAxsn=HFp-8ohEBsbi__oOyCnz8R5A=zHRqbtb9sW60Er8D7Sw@mail.gmail.com>
References: <CAAxsn=HFp-8ohEBsbi__oOyCnz8R5A=zHRqbtb9sW60Er8D7Sw@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Cc: ctypes@lists.ocaml.org, caml-list@inria.fr
Subject: Re: [ocaml-ctypes] [Caml-list] ANN: ocaml-ctypes 0.4.0,
 a library for calling C functions directly from OCaml
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sun, 15 Mar 2015 13:44:50 -0000

Le samedi, 14 mars 2015 =C3=A0 20:17, Jeremy Yallop a =C3=A9crit :
> API documentation: http://ocamllabs.github.io/ocaml-ctypes/

Jeremy, this seems outdated. I don't see the new signatures for the runti=
me lock in =46oreign. =20

Best,

Daniel

https://github.com/ocamllabs/ocaml-ctypes/issues/284

From yallop@gmail.com  Tue Mar 17 15:00:09 2015
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-51.csi.cam.ac.uk (ppsw-51.csi.cam.ac.uk [131.111.8.151])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id B690F3C354
 for <ctypes@lists.ocaml.org>; Tue, 17 Mar 2015 15:00:09 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1666928 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.192.41 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qg0-f41.google.com ([209.85.192.41]:36604)
 by ppsw-51.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1YXszI-00029b-Y3 (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 17 Mar 2015 15:00:57 +0000
Received: by qgf3 with SMTP id 3so10302817qgf.3
 for <ctypes@lists.ocaml.org>; Tue, 17 Mar 2015 08:00:55 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type:content-transfer-encoding;
 bh=8Bmr+q+V70M808ZQ0jQ8DxLPQ1lkg8TumxrJbJyhN6k=;
 b=Un8OUDnXrD9XQMzQHVPAO3PF/D3R57JXZMORxomAjNtqnD4An9vM82VLxXN63hoqaT
 e+/HX7xVk4nvYCGJu+JiVGJ4DNxzWRgy04H0WklV5mIhE05Ezawu2dhKK6AqXWSI1Jp+
 lX1HrWWSgjaDL4jWQwXWPZvUfrIkqTLV/0BpGlWEpcK9M3C3Sy6yYlEbMpHEXL8OtSaU
 2YB4zPx0znhuTuGNneyvZCy2CLH+r1Uy28YJIA0dbOhOKppy8JM8hbvvVOKglSAWZvpl
 Fzz+h5vcAkpfhKx3582hfbItNKmV5A7JjLtWHCxyaKiAkVcrL9X2D5Hgg2yis5LqV5iE
 x5tQ==
MIME-Version: 1.0
X-Received: by 10.55.42.27 with SMTP id q27mr106353899qkh.64.1426604455522;
 Tue, 17 Mar 2015 08:00:55 -0700 (PDT)
Received: by 10.229.160.11 with HTTP; Tue, 17 Mar 2015 08:00:55 -0700 (PDT)
In-Reply-To: <C46A890B930E49FBAF2F3152A427B21A@erratique.ch>
References: <CAAxsn=HFp-8ohEBsbi__oOyCnz8R5A=zHRqbtb9sW60Er8D7Sw@mail.gmail.com>
 <C46A890B930E49FBAF2F3152A427B21A@erratique.ch>
Date: Tue, 17 Mar 2015 15:00:55 +0000
Message-ID: <CAAxsn=F6xAo_NicSFyKLEbiOPVdEPK9c4rxEOqza6PZ=nJBBtg@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: =?UTF-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Cc: ctypes <ctypes@lists.ocaml.org>, Caml List <caml-list@inria.fr>
Subject: Re: [ocaml-ctypes] [Caml-list] ANN: ocaml-ctypes 0.4.0,
 a library for calling C functions directly from OCaml
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 17 Mar 2015 15:00:09 -0000

On 15 March 2015 at 13:45, Daniel B=C3=BCnzli <daniel.buenzli@erratique.ch>=
 wrote:
> Le samedi, 14 mars 2015 =C3=A0 20:17, Jeremy Yallop a =C3=A9crit :
>> API documentation: http://ocamllabs.github.io/ocaml-ctypes/
>
> Jeremy, this seems outdated. I don't see the new signatures for the runti=
me lock in Foreign.

Thanks for letting me know.  I've updated the online documentation
now.  Here's the documentation for Foreign.foreign, complete with the
new ?release_runtime_lock argument:

    http://ocamllabs.github.io/ocaml-ctypes/Foreign.html#VALforeign

Kind regards,

Jeremy.

From n.oje.bar@gmail.com  Wed Apr  8 16:32:18 2015
Return-Path: <n.oje.bar@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 3C6573C1D0
 for <ctypes@lists.ocaml.org>; Wed,  8 Apr 2015 16:32:18 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1670273 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.179 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (n.oje.bar[at]gmail.com)
 *  0.0 HTML_MESSAGE BODY: HTML included in message
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f179.google.com ([209.85.212.179]:33510)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1Yfrzb-0004HB-2N (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <n.oje.bar@gmail.com>); Wed, 08 Apr 2015 16:34:20 +0100
Received: by wiax7 with SMTP id x7so35834883wia.0
 for <ctypes@lists.ocaml.org>; Wed, 08 Apr 2015 08:34:15 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:sender:date:message-id:subject:from:to:content-type;
 bh=Nmj1SwwwSwj82kg+z3VWwE2UaojWluF0KaUkoYoO7f0=;
 b=eA7eORlOcnixsuCMo+Wm0l9q+A5FRut2ExY5pbsozRpFPHnE6PuucD9OPi3rYvVRWb
 sDyqdy3w6DoFPwjDt3eOMQwumiNKdg2J6ycZRnmCOz1ZdKsU6orzeX+zto8qR2VIscC3
 Wft7cXWb3kTi3GcSUbex8x4HM//2K9lJU10DD9o6xHwCPFLZQY4V9jCEh/OP4wYdpENQ
 kt8inxMplNIXUGD7bmMBeA7mffiDgC+oI4Usej8COlM3E8sTqDVHaQZgnkKxhipL9bg8
 JW6i/wBF8ysYZtkvu6lVD7OpbzjUJB9MaYM4LItEFsQV6maTBIW9Api+H/y0zj/IyWce
 zVHg==
MIME-Version: 1.0
X-Received: by 10.194.59.199 with SMTP id b7mr51887760wjr.26.1428507255438;
 Wed, 08 Apr 2015 08:34:15 -0700 (PDT)
Sender: n.oje.bar@gmail.com
Received: by 10.27.89.19 with HTTP; Wed, 8 Apr 2015 08:34:15 -0700 (PDT)
Date: Wed, 8 Apr 2015 16:34:15 +0100
X-Google-Sender-Auth: J6IKKb53vMNz4_dWa7GXBAT-jAU
Message-ID: <CAPunWhCkDi63aGtUAWWVQ1H-9fmyk4HH=ssJs59Ax=XWqe8vkg@mail.gmail.com>
From: Nicolas Ojeda Bar <no263@dpmms.cam.ac.uk>
To: ctypes@lists.ocaml.org
Content-Type: multipart/alternative; boundary=047d7bacc0f885011a05133843ba
Subject: [ocaml-ctypes] calling a dynamically generated function
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 08 Apr 2015 15:32:18 -0000

--047d7bacc0f885011a05133843ba
Content-Type: text/plain; charset=UTF-8

Hi list,

I have a value of type `unit ptr` that points to a function with known
signature.  Is there a way to obtain an OCaml function out of it in order
to call it ?

In other words, I am looking for a function with signature : `unit ptr ->
'a fn -> 'a`.

I did look through the docs but unless I missed something this case does
not seem to be covered.

Any ideas?

Best wishes,
Nicolas

--047d7bacc0f885011a05133843ba
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Hi list,<div><br></div><div>I have a value of type `unit p=
tr` that points to a function with known signature.=C2=A0 Is there a way to=
 obtain an OCaml function out of it in order to call it ?</div><div><br></d=
iv><div>In other words, I am looking for a function with signature : `unit =
ptr -&gt; &#39;a fn -&gt; &#39;a`.</div><div><br></div><div>I did look thro=
ugh the docs but unless I missed something this case does not seem to be co=
vered.</div><div><br></div><div>Any ideas?</div><div><br></div><div>Best wi=
shes,</div><div>Nicolas</div></div>

--047d7bacc0f885011a05133843ba--

From yallop@gmail.com  Wed Apr  8 16:40:12 2015
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-43.csi.cam.ac.uk (ppsw-43.csi.cam.ac.uk [131.111.8.143])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 13AAE3C1D0
 for <ctypes@lists.ocaml.org>; Wed,  8 Apr 2015 16:40:12 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1670273 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.220.178 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qk0-f178.google.com ([209.85.220.178]:34928)
 by ppsw-43.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1Yfs7J-0006FY-oj (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Wed, 08 Apr 2015 16:42:14 +0100
Received: by qkhg7 with SMTP id g7so88020685qkh.2
 for <ctypes@lists.ocaml.org>; Wed, 08 Apr 2015 08:42:12 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=8J36H78N2B5rn//Rn5YarpHXzrXrJ3sv9bYZYkHY/so=;
 b=x97cE3xPlTa4PdvFVU3vvGi3RyvZlyKC82stmqrty9TEtSr8DYpHQbJZMes2EeAbBy
 q8Fp07AV6nAHsJmIiFwc0DTs8CFYQRlZahDIjVZ2vF+6E+J6wnLYhEOysEGM/6Jok55u
 1UmftAARY6AZL6y9+kyQFvhXNiecz891OJgUTWombhGnWxuQR1gQqkKlyu+AE1CSGBUC
 YXP5gG71LH7PeEllbftdoozaaZfSHOAEzMTSpEkEb+w8WDSVrmXUes9CfcTk/+JFzIkb
 7xQFeZLhPnbZ0lsocsYlpWXFM3f4ez3CpZZvvYU65jVaGW7RkZgLfTZNITYvIgP3Uhym
 +Kjg==
MIME-Version: 1.0
X-Received: by 10.55.52.67 with SMTP id b64mr50216632qka.47.1428507732803;
 Wed, 08 Apr 2015 08:42:12 -0700 (PDT)
Received: by 10.229.160.11 with HTTP; Wed, 8 Apr 2015 08:42:12 -0700 (PDT)
In-Reply-To: <CAPunWhCkDi63aGtUAWWVQ1H-9fmyk4HH=ssJs59Ax=XWqe8vkg@mail.gmail.com>
References: <CAPunWhCkDi63aGtUAWWVQ1H-9fmyk4HH=ssJs59Ax=XWqe8vkg@mail.gmail.com>
Date: Wed, 8 Apr 2015 16:42:12 +0100
Message-ID: <CAAxsn=Fstf2h5Uwi3CKG7CA=Tri1Z5T2Ksau9J1z9AYimXx7RA@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Nicolas Ojeda Bar <no263@dpmms.cam.ac.uk>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] calling a dynamically generated function
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 08 Apr 2015 15:40:12 -0000

On 8 April 2015 at 16:34, Nicolas Ojeda Bar <no263@dpmms.cam.ac.uk> wrote:
> I have a value of type `unit ptr` that points to a function with known
> signature.  Is there a way to obtain an OCaml function out of it in order to
> call it ?
>
> In other words, I am looking for a function with signature : `unit ptr -> 'a
> fn -> 'a`.

I think this is what you're looking for:

   # fun c f -> coerce (ptr void) (Foreign.funptr f) c;;
   - : unit Ctypes_static.ptr -> ('a -> 'b) fn -> 'a -> 'b = <fun>

From n.oje.bar@gmail.com  Wed Apr  8 16:50:52 2015
Return-Path: <n.oje.bar@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 2490E3C1D0
 for <ctypes@lists.ocaml.org>; Wed,  8 Apr 2015 16:50:52 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1670273 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.170 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (n.oje.bar[at]gmail.com)
 *  0.0 HTML_MESSAGE BODY: HTML included in message
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f170.google.com ([209.85.212.170]:34100)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1YfsHd-0007vt-9E (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <n.oje.bar@gmail.com>); Wed, 08 Apr 2015 16:52:54 +0100
Received: by widjs5 with SMTP id js5so36156318wid.1
 for <ctypes@lists.ocaml.org>; Wed, 08 Apr 2015 08:52:53 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:sender:in-reply-to:references:date:message-id:subject
 :from:to:cc:content-type;
 bh=6Fgm9GoaxalXHuEMq9aMTWDiB+uTEehFQGosBcMKs1U=;
 b=AlYDiawufCsz+FIKs6h/oLt7b4xKuLQ7z6+qzTT+Zx00CTaVBxaUuWyn5Hr4wsEjoD
 7HUGT8kBrY2n9cpZZMz+Cnr9wWwKC2X9jF3RyXP+w2wZZYguaKSuF1XxWH0xCArEL368
 hq44mKAf2assY1d1I3Gi8I04s0g5AEq0SkHyDRLhm3EPepXiRdHEAd936hS4/e8/0bLR
 aq6L7Nz1bH6kRY0fqIG+Z/tGgz41zGRO44O0B7v4/eFOCft1JvqvLY6LPKOVjerrHFCC
 bHF33bdfOLjsuNvq2I7TLJ7a4vzmY35XhqJiYScFf5UpekTP6KXXnjqo0DO1VMCRJmT4
 jt4w==
MIME-Version: 1.0
X-Received: by 10.180.90.243 with SMTP id bz19mr15339146wib.47.1428508373571; 
 Wed, 08 Apr 2015 08:52:53 -0700 (PDT)
Sender: n.oje.bar@gmail.com
Received: by 10.27.89.19 with HTTP; Wed, 8 Apr 2015 08:52:53 -0700 (PDT)
In-Reply-To: <CAAxsn=Fstf2h5Uwi3CKG7CA=Tri1Z5T2Ksau9J1z9AYimXx7RA@mail.gmail.com>
References: <CAPunWhCkDi63aGtUAWWVQ1H-9fmyk4HH=ssJs59Ax=XWqe8vkg@mail.gmail.com>
 <CAAxsn=Fstf2h5Uwi3CKG7CA=Tri1Z5T2Ksau9J1z9AYimXx7RA@mail.gmail.com>
Date: Wed, 8 Apr 2015 16:52:53 +0100
X-Google-Sender-Auth: h9WXT1BwcoFZbJkbdO9Cvdy-POY
Message-ID: <CAPunWhBAzSMOYknrWBH6aDM61KxebJarPMV43iXJ8sTZ153GZw@mail.gmail.com>
From: Nicolas Ojeda Bar <no263@dpmms.cam.ac.uk>
To: Jeremy Yallop <yallop@gmail.com>
Content-Type: multipart/alternative; boundary=f46d0402dd6e2a600c0513388673
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] calling a dynamically generated function
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 08 Apr 2015 15:50:52 -0000

--f46d0402dd6e2a600c0513388673
Content-Type: text/plain; charset=UTF-8

Thanks ! That should do it.

Best wishes,
Nicolas

On Wed, Apr 8, 2015 at 4:42 PM, Jeremy Yallop <yallop@gmail.com> wrote:

> On 8 April 2015 at 16:34, Nicolas Ojeda Bar <no263@dpmms.cam.ac.uk> wrote:
> > I have a value of type `unit ptr` that points to a function with known
> > signature.  Is there a way to obtain an OCaml function out of it in
> order to
> > call it ?
> >
> > In other words, I am looking for a function with signature : `unit ptr
> -> 'a
> > fn -> 'a`.
>
> I think this is what you're looking for:
>
>    # fun c f -> coerce (ptr void) (Foreign.funptr f) c;;
>    - : unit Ctypes_static.ptr -> ('a -> 'b) fn -> 'a -> 'b = <fun>
>

--f46d0402dd6e2a600c0513388673
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Thanks ! That should do it.<div><br></div><div>Best wishes=
,</div><div>Nicolas</div></div><div class=3D"gmail_extra"><br><div class=3D=
"gmail_quote">On Wed, Apr 8, 2015 at 4:42 PM, Jeremy Yallop <span dir=3D"lt=
r">&lt;<a href=3D"mailto:yallop@gmail.com" target=3D"_blank">yallop@gmail.c=
om</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"marg=
in:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><span class=3D""=
>On 8 April 2015 at 16:34, Nicolas Ojeda Bar &lt;<a href=3D"mailto:no263@dp=
mms.cam.ac.uk">no263@dpmms.cam.ac.uk</a>&gt; wrote:<br>
&gt; I have a value of type `unit ptr` that points to a function with known=
<br>
&gt; signature.=C2=A0 Is there a way to obtain an OCaml function out of it =
in order to<br>
&gt; call it ?<br>
&gt;<br>
&gt; In other words, I am looking for a function with signature : `unit ptr=
 -&gt; &#39;a<br>
&gt; fn -&gt; &#39;a`.<br>
<br>
</span>I think this is what you&#39;re looking for:<br>
<br>
=C2=A0 =C2=A0# fun c f -&gt; coerce (ptr void) (Foreign.funptr f) c;;<br>
=C2=A0 =C2=A0- : unit Ctypes_static.ptr -&gt; (&#39;a -&gt; &#39;b) fn -&gt=
; &#39;a -&gt; &#39;b =3D &lt;fun&gt;<br>
</blockquote></div><br></div>

--f46d0402dd6e2a600c0513388673--

From simon.beaumont@citrix.com  Wed Apr 29 12:36:29 2015
Return-Path: <simon.beaumont@citrix.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-51.csi.cam.ac.uk (ppsw-51.csi.cam.ac.uk [131.111.8.151])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id E292B3C0C1
 for <ctypes@lists.ocaml.org>; Wed, 29 Apr 2015 12:36:29 +0100 (BST)
X-Cam-SpamDetails: score -5.0 from SpamAssassin-3.3.2-1675274 
 * -5.0 RCVD_IN_DNSWL_HI RBL: Sender listed at http://www.dnswl.org/, high
 *      trust
 *      [66.165.176.89 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 T_RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from smtp.citrix.com ([66.165.176.89]:21996)
 by ppsw-51.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1YnQL6-0007MZ-Ys (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <simon.beaumont@citrix.com>); Wed, 29 Apr 2015 12:39:41 +0100
X-IronPort-AV: E=Sophos;i="5.11,670,1422921600"; d="scan'208";a="257709965"
Date: Wed, 29 Apr 2015 12:40:13 +0100
From: Si Beaumont <simon.beaumont@citrix.com>
To: <ctypes@lists.ocaml.org>
Message-ID: <20150429114013.GA13701@morbo>
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Disposition: inline
User-Agent: Mutt/1.5.21 (2010-09-15)
X-DLP: MIA2
Subject: [ocaml-ctypes] Using Cstubs.Types.TYPE and Cstubs.FOREIGN coherently
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 29 Apr 2015 11:36:30 -0000

Hi,

I've been looking to use Ctypes to create bindings to libpci and use
stub-generation. I was hoping to generate stubs for both the foreign function
bindings and also for the struct layouts (including inlining of `#define`d
constants from the library).

I successfully got stub generation working for the functions and for the
structures by creating a functor taking a module with signature Cstubs.FOREIGN
as per the examples I've seen in the Ctypes repo[1] and even got that working
with OASIS by creating an executable using the Cstubs.write_{c,ml} functions
and using this as a "BuildTool" following some other examples I found
(ocaml-gsasl[2] and onanomsg[3]).

However, I wanted to also be able to get the struct layout and constant
definitions only available to the C preprocesor without me having to transcribe
them into my library (libpci like many other libraries `#define`s a whole bunch
of values for flags that need to be passed into functions). FWICT to get this
to work I need to create a second functor taking a module with signature
Cstubs.Types.TYPE and then use Cstubs.Type.write_c. This will generate
a C program which needs to be compiled. This compiled C program can then be run
to generate an OCaml module which can be used with my original Bindings
functor (gleanings from a few days of hacking and from ctypes
mailing-list[4][5]).

It seems this pipeline is going to be quite difficult to integrate into a build
system like OASIS since I need to compile an auto-generated C program half way
through. My final bit of research landed me on an open Bountysource issue[6] on
which it looks like there's a plan to smooth this out to make the workflow more
like the stub generation for foreign function bindings:

> We can address both these concerns with an alternative workflow for
> Cstubs_structs.TYPE that follows the same pattern as stub generation for
> functions: generate C and ML directly from the functor containing your
> bindings, then link the generated C and ML into your program.

This sounds fantastic! I was wondering if there is any branch of Ctypes with
this functionality yet that I could try out or if there is any expectation to
add this in the near-term?

For now, I think I'll have to use just the stub generation for the functions
(and for the structures that I've transcribed) and have to hardcode the
`#define`d constants and enums.

TIA,

- Si
[1]: https://github.com/ocamllabs/ocaml-ctypes/blob/f7d8f63d/examples/ncurses/stub-generation/bindings/ncurses_bindings.ml
[2]: https://github.com/nojb/ocaml-gsasl/blob/a96c7b94/_oasis
[3]: https://github.com/rgrinberg/onanomsg/blob/4d09e396/_oasis
[4]: http://lists.ocaml.org/pipermail/ctypes/2015-January/000143.html
[5]: http://lists.ocaml.org/pipermail/ctypes/2015-February/000153.html
[6]: https://www.bountysource.com/issues/8206607-new-constant-function-is-hard-to-use

From yallop@gmail.com  Mon May  4 14:01:11 2015
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 2A5A93C17E
 for <ctypes@lists.ocaml.org>; Mon,  4 May 2015 14:01:11 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1677374 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.216.175 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qc0-f175.google.com ([209.85.216.175]:33712)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1YpG32-0001nt-jt (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Mon, 04 May 2015 14:04:39 +0100
Received: by qcvz3 with SMTP id z3so21830308qcv.0
 for <ctypes@lists.ocaml.org>; Mon, 04 May 2015 06:04:35 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=Yqjrq6Sl6uolM+SHdUO36EI/IKhX9JqiPADKk0yHxFE=;
 b=gYe0G9uS05WGJyhXATFkzTx4VgeQKRSU+qdiFOLMAJ0H4XrS450HiHxj9KT5teEWwY
 7PQ5SUw8+GJmiaRmxxA4/tC/VoUnMKChlK+SJJz1unnr3bzd246O93rNGgaMHWZ7arbq
 Yn7vbva76jHNLxk2Q58DLbfCGFfAa9dQa4tNPWJl56EDJOMtz/NPktADGnSJreKoVQdX
 WqBkL13ojEnpiYeSKx9ukEYaEK4wGRIeh4C7ZpurCn6sFl50JmbyykXef8E3x4P2T5V6
 ZQdYsWLg1iBpyOMKFgCMT3OlcGJrEOgUuJgfikqh83ic5W4b84cEJ+MCk1bCTcukbikO
 idHw==
MIME-Version: 1.0
X-Received: by 10.141.18.1 with SMTP id u1mr27886978qhd.47.1430744675309; Mon,
 04 May 2015 06:04:35 -0700 (PDT)
Received: by 10.229.40.7 with HTTP; Mon, 4 May 2015 06:04:35 -0700 (PDT)
In-Reply-To: <20150429114013.GA13701@morbo>
References: <20150429114013.GA13701@morbo>
Date: Mon, 4 May 2015 14:04:35 +0100
Message-ID: <CAAxsn=HYbL+zS+xkMQxunqAn2U130uJ2hQ2jhSb09mTiZVSQ6A@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Si Beaumont <simon.beaumont@citrix.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Using Cstubs.Types.TYPE and Cstubs.FOREIGN
	coherently
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 04 May 2015 13:01:11 -0000

On 29 April 2015 at 12:40, Si Beaumont <simon.beaumont@citrix.com> wrote:
> However, I wanted to also be able to get the struct layout and constant
> definitions only available to the C preprocesor without me having to transcribe
> them into my library (libpci like many other libraries `#define`s a whole bunch
> of values for flags that need to be passed into functions). FWICT to get this
> to work I need to create a second functor taking a module with signature
> Cstubs.Types.TYPE and then use Cstubs.Type.write_c. This will generate
> a C program which needs to be compiled. This compiled C program can then be run
> to generate an OCaml module which can be used with my original Bindings
> functor (gleanings from a few days of hacking and from ctypes
> mailing-list[4][5]).

Right.

> It seems this pipeline is going to be quite difficult to integrate into a build
> system like OASIS since I need to compile an auto-generated C program half way
> through.

It's not trivial, but it's certainly possible.  The async_ssl package
is a useful example to work from; it binds various constants in the
Ffi_bindings.types module:

   https://github.com/janestreet/async_ssl/blob/c58a80b7/bindings/ffi_bindings.ml#L1-L40

and uses ocamlbuild rules to set up the appropriate dependencies

   https://github.com/janestreet/async_ssl/blob/c58a80b7/myocamlbuild.ml

There's also a bit of _oasis set-up to build the executables:

   https://github.com/janestreet/async_ssl/blob/c58a80b7/_oasis#L84-L97

I wonder if it'd be useful for the Ctypes package to include some
reusable ocamlbuild rules to make this kind of thing easier.

> My final bit of research landed me on an open Bountysource issue[6] on
> which it looks like there's a plan to smooth this out to make the workflow more
> like the stub generation for foreign function bindings:
>
>> We can address both these concerns with an alternative workflow for
>> Cstubs_structs.TYPE that follows the same pattern as stub generation for
>> functions: generate C and ML directly from the functor containing your
>> bindings, then link the generated C and ML into your program.
>
> This sounds fantastic! I was wondering if there is any branch of Ctypes with
> this functionality yet that I could try out or if there is any expectation to
> add this in the near-term?

I've just pushed a branch with an implementation of this proposal.

   https://github.com/ocamllabs/ocaml-ctypes/pull/296

Feedback is very welcome!

Jeremy.

From anil@recoil.org  Mon May  4 14:11:48 2015
Return-Path: <anil@recoil.org>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 5E73B3C17E
 for <ctypes@lists.ocaml.org>; Mon,  4 May 2015 14:11:48 +0100 (BST)
X-Cam-SpamDetails: score -0.0 from SpamAssassin-3.3.2-1677374 
 * -0.0 T_RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from bark.recoil.org ([5.153.225.51]:6971)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:DHE-RSA-AES256-GCM-SHA384:256)
 id 1YpGDM-0006qW-rU (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <anil@recoil.org>); Mon, 04 May 2015 14:15:17 +0100
Received: from [192.168.0.127] (c-98-248-38-18.hsd1.ca.comcast.net
 [98.248.38.18]); 
 by bark.recoil.org (OpenSMTPD) with ESMTPSA id e89f2567;
 TLS version=TLSv1/SSLv3 cipher=ECDHE-RSA-AES256-SHA bits=256 verify=NO;
 Mon, 4 May 2015 14:15:16 +0100 (BST)
Content-Type: text/plain; charset=us-ascii
Mime-Version: 1.0 (Mac OS X Mail 8.2 \(2098\))
From: Anil Madhavapeddy <anil@recoil.org>
In-Reply-To: <CAAxsn=HYbL+zS+xkMQxunqAn2U130uJ2hQ2jhSb09mTiZVSQ6A@mail.gmail.com>
Date: Mon, 4 May 2015 06:15:13 -0700
Content-Transfer-Encoding: 7bit
Message-Id: <A2D19456-BC42-4F67-8BAD-03CB50881ACE@recoil.org>
References: <20150429114013.GA13701@morbo>
 <CAAxsn=HYbL+zS+xkMQxunqAn2U130uJ2hQ2jhSb09mTiZVSQ6A@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
X-Mailer: Apple Mail (2.2098)
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Using Cstubs.Types.TYPE and Cstubs.FOREIGN
	coherently
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 04 May 2015 13:11:48 -0000

On 4 May 2015, at 06:04, Jeremy Yallop <yallop@gmail.com> wrote:
> 
> I wonder if it'd be useful for the Ctypes package to include some
> reusable ocamlbuild rules to make this kind of thing easier.

Creating a standard ocamlbuild plugin would be useful given the recent
addition of -plugin-tags to ocamlbuild.

Eliom uses this quite nicely here:
https://ocsigen.org/eliom/manual/workflow-compilation#h5o-3

to let this work:

    ocamlbuild -use-ocamlfind -plugin-tags "package(eliom.ocamlbuild)" \
      yourlib.cma yourlib.cmxa yourlib.cmxs yourexecutable.js

A similar ctypes.ocamlbuild could also take additional _tags to
control the various build options perhaps.

Eliom source: https://github.com/ocsigen/eliom/tree/master/src/ocamlbuild

-anil

From simon.beaumont@citrix.com  Wed May  6 09:07:42 2015
Return-Path: <simon.beaumont@citrix.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 3F00A3C02D
 for <ctypes@lists.ocaml.org>; Wed,  6 May 2015 09:07:42 +0100 (BST)
X-Cam-SpamDetails: score -5.0 from SpamAssassin-3.3.2-1677751 
 * -0.0 T_RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 * -5.0 RCVD_IN_DNSWL_HI RBL: Sender listed at http://www.dnswl.org/, high
 *      trust
 *      [66.165.176.89 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from smtp.citrix.com ([66.165.176.89]:34162)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1:RC4-SHA:128)
 id 1YpuQD-0007Ms-k8 (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <simon.beaumont@citrix.com>); Wed, 06 May 2015 09:11:17 +0100
X-IronPort-AV: E=Sophos;i="5.13,378,1427760000"; d="scan'208";a="259878832"
Date: Wed, 6 May 2015 09:01:17 +0100
From: Si Beaumont <simon.beaumont@citrix.com>
To: Jeremy Yallop <yallop@gmail.com>
Message-ID: <20150506080117.GA768@morbo>
References: <20150429114013.GA13701@morbo>
 <CAAxsn=HYbL+zS+xkMQxunqAn2U130uJ2hQ2jhSb09mTiZVSQ6A@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Disposition: inline
In-Reply-To: <CAAxsn=HYbL+zS+xkMQxunqAn2U130uJ2hQ2jhSb09mTiZVSQ6A@mail.gmail.com>
User-Agent: Mutt/1.5.21 (2010-09-15)
X-DLP: MIA1
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Using Cstubs.Types.TYPE and Cstubs.FOREIGN
 coherently
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 06 May 2015 08:07:42 -0000

On Mon, 04 May 2015 at 14:04, Jeremy Yallop wrote:
> On 29 April 2015 at 12:40, Si Beaumont <simon.beaumont@citrix.com> wrote:
> It's not trivial, but it's certainly possible.  The async_ssl package
> is a useful example to work from; it binds various constants in the
> Ffi_bindings.types module:
> 
>    https://github.com/janestreet/async_ssl/blob/c58a80b7/bindings/ffi_bindings.ml#L1-L40
> 
> and uses ocamlbuild rules to set up the appropriate dependencies
> 
>    https://github.com/janestreet/async_ssl/blob/c58a80b7/myocamlbuild.ml
> 
> There's also a bit of _oasis set-up to build the executables:
> 
>    https://github.com/janestreet/async_ssl/blob/c58a80b7/_oasis#L84-L97
That's great! Thanks for the pointer. This was the kind of example I was
looking for.

> > My final bit of research landed me on an open Bountysource issue[6] on
> > which it looks like there's a plan to smooth this out to make the workflow more
> > like the stub generation for foreign function bindings:
> I've just pushed a branch with an implementation of this proposal.
> 
>    https://github.com/ocamllabs/ocaml-ctypes/pull/296
> 
> Feedback is very welcome!
Brilliant. I'll definitely give this a whirl later on this week. I'll try and
get a branch of my project building with this and update you on my experience.
Then, if and when this hits a ctypes release, we can merge it in.

Thanks,

- Si

From thomas.braibant@gmail.com  Wed May 13 13:48:03 2015
Return-Path: <thomas.braibant@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 1B5443C4A9
 for <ctypes@lists.ocaml.org>; Wed, 13 May 2015 13:48:03 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1678898 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.214.178 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (thomas.braibant[at]gmail.com)
 *  0.0 HTML_MESSAGE BODY: HTML included in message
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-ob0-f178.google.com ([209.85.214.178]:34070)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1YsW8n-000347-rT (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <thomas.braibant@gmail.com>); Wed, 13 May 2015 13:52:02 +0100
Received: by obfe9 with SMTP id e9so28637715obf.1
 for <ctypes@lists.ocaml.org>; Wed, 13 May 2015 05:52:00 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:from:date:message-id:subject:to:content-type;
 bh=rEqM0ScJNegImCSZyG0gzEGpXfTY1Udei4bhMOlxxv4=;
 b=C4uKHP1f+jnxjzLrtjnsw7By4KcmES1gdKp2ASmdY20DPL2YCq+MqDzZ9xVay6fGJp
 s+cKcF+FIU1s6S/SeYOeG1pE2bT3k6OKvKF4ZymVG20z1pTB941FYbF72nr/4lu7CNhI
 9C1uY3r6tvQPRuFAl53Q2JCSOYz8OaShES4MJnHfU3TucUm0nIIu+obfyRhUiFs6D67N
 JlqYVovzCn0RL3GpDOBUvNUSZKXT/TwmE0duwzzizF/QiE7+qbsox6cCbjHGHvEsQEy9
 Gl5JaKYGGKL/brdEY+83rbM6nnlkDmYyBMVa1uEe3NSecDbfcnxAZ6nN43fp0bFUeZF1
 /OQg==
X-Received: by 10.182.87.36 with SMTP id u4mr15892276obz.50.1431521520366;
 Wed, 13 May 2015 05:52:00 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.202.170.216 with HTTP; Wed, 13 May 2015 05:51:40 -0700 (PDT)
From: Thomas Braibant <thomas.braibant@gmail.com>
Date: Wed, 13 May 2015 14:51:40 +0200
Message-ID: <CAHR=Vkz98F0uwN=xMEf5dkerh7mTDSbmgNL8+8i0b1p-P7pnXA@mail.gmail.com>
To: ctypes <ctypes@lists.ocaml.org>
Content-Type: multipart/alternative; boundary=089e013d0ddcb5bc710515f613b8
Subject: [ocaml-ctypes] Build error when compiling Ctypes on centos 5
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 13 May 2015 12:48:03 -0000

--089e013d0ddcb5bc710515f613b8
Content-Type: text/plain; charset=UTF-8

For some obscure reason, I need to compile Ctypes on centos 5.x in a hurry.
Unfortunately, I get the following error message in the compilation process

### stderr ###
# make: Circular _build/src/ctypes/ctypes_primitive_types.cmx <-
_build/src/ctypes/ctypes_primitive_types.cmx dependency dropped.
# make: Circular _build/src/ctypes/ctypes_memory_stubs.cmx <-
_build/src/ctypes/ctypes_memory_stubs.cmx dependency dropped.
# In file included from
/home/vagrant/ocamlbrew/ocaml-4.02.1/.opam/4.02.1+PIC/build/ctypes.0.4.0/src/ctypes/posix_types_stubs.c:8:
#
/home/vagrant/ocamlbrew/ocaml-4.02.1/.opam/4.02.1+PIC/build/ctypes.0.4.0/src/ctypes/ctypes_primitives.h:99:3:
error: #error "No suitable OCaml type available for representing long longs"
# make: *** [_build/src/ctypes/posix_types_stubs.o] Error 2

I would be very grateful if someone had an idea of a workaround.

Best,
Thomas

--089e013d0ddcb5bc710515f613b8
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">For some obscure reason, I need to compile Ctypes on cento=
s 5.x in a hurry. Unfortunately, I get the following error message in the c=
ompilation process<div><br></div><div><div>### stderr ###</div><div># make:=
 Circular _build/src/ctypes/ctypes_primitive_types.cmx &lt;- _build/src/cty=
pes/ctypes_primitive_types.cmx dependency dropped.</div><div># make: Circul=
ar _build/src/ctypes/ctypes_memory_stubs.cmx &lt;- _build/src/ctypes/ctypes=
_memory_stubs.cmx dependency dropped.</div><div># In file included from /ho=
me/vagrant/ocamlbrew/ocaml-4.02.1/.opam/4.02.1+PIC/build/ctypes.0.4.0/src/c=
types/posix_types_stubs.c:8:</div><div># /home/vagrant/ocamlbrew/ocaml-4.02=
.1/.opam/4.02.1+PIC/build/ctypes.0.4.0/src/ctypes/ctypes_primitives.h:99:3:=
 error: #error &quot;No suitable OCaml type available for representing long=
 longs&quot;</div><div># make: *** [_build/src/ctypes/posix_types_stubs.o] =
Error 2</div></div><div><br></div><div>I would be very grateful if someone =
had an idea of a workaround.</div><div><br></div><div>Best,</div><div>Thoma=
s</div></div>

--089e013d0ddcb5bc710515f613b8--

From yallop@gmail.com  Wed May 13 13:59:19 2015
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id B19433C4A9
 for <ctypes@lists.ocaml.org>; Wed, 13 May 2015 13:59:19 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1678898 
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.216.181 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qc0-f181.google.com ([209.85.216.181]:33019)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1YsWJh-0003FB-ly (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Wed, 13 May 2015 14:03:18 +0100
Received: by qcvo8 with SMTP id o8so21706066qcv.0
 for <ctypes@lists.ocaml.org>; Wed, 13 May 2015 06:03:17 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=TbAtr8PFxWZI3Gwyu63TPiWm7WXLUAM9gPrZDokA+tY=;
 b=aT1L4IrvISoIe4wLVr2mCVVWMYb9HPX7QZCVepiPLRL5YEW0NuwHvKL2Pevjk8NpU/
 D4uypiFl78fB4skfY1ccpOAw0jkvjb4QGrHRD+rrEcRDoD+d8OcPEucr9dUSXOgi7C7l
 wNqKh3mhtdsjkkMVS9PJ8aKlZGMFacYYJ30lU0AyurJsdCSjJkXfW86+SiDwBQLdxsC3
 3fgK01RG2kI71/y4jzgrYELKIuBvdTo5lcH7Y0mi7alRWUt/JQ7FUuWGGUGb9bySfFwR
 iz8ohAlDMlgqeGc6wa7DA+U5Q6ONYSymm/EQwLsKLAsEN087ol9YLJNUgE9kcU+AB1Ty
 hAag==
MIME-Version: 1.0
X-Received: by 10.140.91.18 with SMTP id y18mr25844488qgd.90.1431522196967;
 Wed, 13 May 2015 06:03:16 -0700 (PDT)
Received: by 10.229.40.7 with HTTP; Wed, 13 May 2015 06:03:16 -0700 (PDT)
In-Reply-To: <CAHR=Vkz98F0uwN=xMEf5dkerh7mTDSbmgNL8+8i0b1p-P7pnXA@mail.gmail.com>
References: <CAHR=Vkz98F0uwN=xMEf5dkerh7mTDSbmgNL8+8i0b1p-P7pnXA@mail.gmail.com>
Date: Wed, 13 May 2015 14:03:16 +0100
Message-ID: <CAAxsn=E5Xo3_VVySOCAsdp=BBqH0R-EWN=UybikY0xHiRKNjTQ@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Thomas Braibant <thomas.braibant@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Build error when compiling Ctypes on centos 5
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 13 May 2015 12:59:19 -0000

On 13 May 2015 at 13:51, Thomas Braibant <thomas.braibant@gmail.com> wrote:
> For some obscure reason, I need to compile Ctypes on centos 5.x in a hurry.
> Unfortunately, I get the following error message in the compilation process
>
[...]
> /home/vagrant/ocamlbrew/ocaml-4.02.1/.opam/4.02.1+PIC/build/ctypes.0.4.0/src/ctypes/ctypes_primitives.h:99:3:
> error: #error "No suitable OCaml type available for representing long longs"

That's odd.  Could you post the output of the following program?

#include <stdio.h>
#include <limits.h>
#include <stdint.h>
#include <inttypes.h>

int main(void)
{
  printf("ULLONG_MAX: %llu\nUINT64_MAX: %" PRIu64"\n",
         ULLONG_MAX, UINT64_MAX);
  return 0;
}

From thomas.braibant@gmail.com  Wed May 13 14:04:52 2015
Return-Path: <thomas.braibant@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 04E1E3C4A9
 for <ctypes@lists.ocaml.org>; Wed, 13 May 2015 14:04:52 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1678898 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.218.51 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (thomas.braibant[at]gmail.com)
 *  0.0 HTML_MESSAGE BODY: HTML included in message
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-oi0-f51.google.com ([209.85.218.51]:36137)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1YsWP3-00030x-ko (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <thomas.braibant@gmail.com>); Wed, 13 May 2015 14:08:50 +0100
Received: by oift201 with SMTP id t201so30427694oif.3
 for <ctypes@lists.ocaml.org>; Wed, 13 May 2015 06:08:48 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc:content-type;
 bh=WEn4rFlD7W+kF/Z8B5UjYlEyQF6jeXhgdSmWeaWYlwo=;
 b=VpK3ZXA82Y9+XeL1huzzrautD8A+SHI9kyiTs6/9EAr7y7e30Q5QVnoveGipotmaff
 iPl87QAJqPYnFMo61mkZ3UD908DXm+pLB/4xmbcJttQ6f1El3nGOXiZHXnjRgScH5Df9
 r36GB2N0qzMYEanO7qX7P6d6TfYrYAIqyjPmXSGZliXaDxb9cMmEd+lPbJ9IajElBfFN
 UnlWSVjGB/s6aD/gpldIY2s4MKptKgliM4J2jFES7IHxHGYhoC8vAHdIz7FFt4dcGcao
 WDjFJIraGbAsLPhe1CY+qFO5eR/34zlRC9L5J/an9NLJjR81lG3NoCfbhJCn+CsC6EUW
 2pvQ==
X-Received: by 10.60.92.73 with SMTP id ck9mr15754966oeb.60.1431522528363;
 Wed, 13 May 2015 06:08:48 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.202.170.216 with HTTP; Wed, 13 May 2015 06:08:27 -0700 (PDT)
In-Reply-To: <CAAxsn=E5Xo3_VVySOCAsdp=BBqH0R-EWN=UybikY0xHiRKNjTQ@mail.gmail.com>
References: <CAHR=Vkz98F0uwN=xMEf5dkerh7mTDSbmgNL8+8i0b1p-P7pnXA@mail.gmail.com>
 <CAAxsn=E5Xo3_VVySOCAsdp=BBqH0R-EWN=UybikY0xHiRKNjTQ@mail.gmail.com>
From: Thomas Braibant <thomas.braibant@gmail.com>
Date: Wed, 13 May 2015 15:08:27 +0200
Message-ID: <CAHR=VkzXjQO02TfREFHB-JgvdNf7+Kbyk9NXxOCEN6nF7pcpWg@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Content-Type: multipart/mixed; boundary=047d7b33d7bacaed3d0515f64f44
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Build error when compiling Ctypes on centos 5
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 13 May 2015 13:04:52 -0000

--047d7b33d7bacaed3d0515f64f44
Content-Type: multipart/alternative; boundary=047d7b33d7bacaed360515f64f42

--047d7b33d7bacaed360515f64f42
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

gcc c.c
c.c: In function =E2=80=98main=E2=80=99:
c.c:10: error: =E2=80=98ULLONG_MAX=E2=80=99 undeclared (first use in this f=
unction)
c.c:10: error: (Each undeclared identifier is reported only once
c.c:10: error: for each function it appears in.)

this is not surprising when you look at the output (attached) of gcc -dM -E
limits.h


On Wed, May 13, 2015 at 3:03 PM, Jeremy Yallop <yallop@gmail.com> wrote:

> On 13 May 2015 at 13:51, Thomas Braibant <thomas.braibant@gmail.com>
> wrote:
> > For some obscure reason, I need to compile Ctypes on centos 5.x in a
> hurry.
> > Unfortunately, I get the following error message in the compilation
> process
> >
> [...]
> >
> /home/vagrant/ocamlbrew/ocaml-4.02.1/.opam/4.02.1+PIC/build/ctypes.0.4.0/=
src/ctypes/ctypes_primitives.h:99:3:
> > error: #error "No suitable OCaml type available for representing long
> longs"
>
> That's odd.  Could you post the output of the following program?
>
> #include <stdio.h>
> #include <limits.h>
> #include <stdint.h>
> #include <inttypes.h>
>
> int main(void)
> {
>   printf("ULLONG_MAX: %llu\nUINT64_MAX: %" PRIu64"\n",
>          ULLONG_MAX, UINT64_MAX);
>   return 0;
> }
>

--047d7b33d7bacaed360515f64f42
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>gcc c.c</div><div>c.c: In function =E2=80=98main=E2=
=80=99:</div><div>c.c:10: error: =E2=80=98ULLONG_MAX=E2=80=99 undeclared (f=
irst use in this function)</div><div>c.c:10: error: (Each undeclared identi=
fier is reported only once</div><div>c.c:10: error: for each function it ap=
pears in.)</div><div><br></div><div>this is not surprising when you look at=
 the output (attached) of=C2=A0gcc -dM -E limits.h</div><div><br></div></di=
v><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">On Wed, May 13,=
 2015 at 3:03 PM, Jeremy Yallop <span dir=3D"ltr">&lt;<a href=3D"mailto:yal=
lop@gmail.com" target=3D"_blank">yallop@gmail.com</a>&gt;</span> wrote:<br>=
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><span class=3D"">On 13 May 2015 at 13:51, Th=
omas Braibant &lt;<a href=3D"mailto:thomas.braibant@gmail.com">thomas.braib=
ant@gmail.com</a>&gt; wrote:<br>
&gt; For some obscure reason, I need to compile Ctypes on centos 5.x in a h=
urry.<br>
&gt; Unfortunately, I get the following error message in the compilation pr=
ocess<br>
&gt;<br>
</span>[...]<br>
<span class=3D"">&gt; /home/vagrant/ocamlbrew/ocaml-4.02.1/.opam/4.02.1+PIC=
/build/ctypes.0.4.0/src/ctypes/ctypes_primitives.h:99:3:<br>
&gt; error: #error &quot;No suitable OCaml type available for representing =
long longs&quot;<br>
<br>
</span>That&#39;s odd.=C2=A0 Could you post the output of the following pro=
gram?<br>
<br>
#include &lt;stdio.h&gt;<br>
#include &lt;limits.h&gt;<br>
#include &lt;stdint.h&gt;<br>
#include &lt;inttypes.h&gt;<br>
<br>
int main(void)<br>
{<br>
=C2=A0 printf(&quot;ULLONG_MAX: %llu\nUINT64_MAX: %&quot; PRIu64&quot;\n&qu=
ot;,<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0ULLONG_MAX, UINT64_MAX);<br>
=C2=A0 return 0;<br>
}<br>
</blockquote></div><br></div>

--047d7b33d7bacaed360515f64f42--
--047d7b33d7bacaed3d0515f64f44
Content-Type: text/plain; charset=US-ASCII; name="limits.txt"
Content-Disposition: attachment; filename="limits.txt"
Content-Transfer-Encoding: base64
X-Attachment-Id: f_i9mrimif0

I2RlZmluZSBfX0RCTF9NSU5fRVhQX18gKC0xMDIxKQojZGVmaW5lIF9QT1NJWDJfQkNfU0NBTEVf
TUFYIDk5CiNkZWZpbmUgUkVfRFVQX01BWCAoMHg3ZmZmKQojZGVmaW5lIF9fRkxUX01JTl9fIDEu
MTc1NDk0MzVlLTM4RgojZGVmaW5lIF9fZmxleGFyciBbXQojZGVmaW5lIF9fc3R1Yl9mY2hmbGFn
cyAKI2RlZmluZSBfX0NIQVJfQklUX18gOAojZGVmaW5lIFNIUlRfTUFYIF9fU0hSVF9NQVhfXwoj
ZGVmaW5lIFBJUEVfQlVGIDQwOTYKI2RlZmluZSBNUV9QUklPX01BWCAzMjc2OAojZGVmaW5lIF9f
R0xJQkNfUFJFUkVRKG1haixtaW4pICgoX19HTElCQ19fIDw8IDE2KSArIF9fR0xJQkNfTUlOT1Jf
XyA+PSAoKG1haikgPDwgMTYpICsgKG1pbikpCiNkZWZpbmUgX1BPU0lYMl9CQ19ESU1fTUFYIDIw
NDgKI2RlZmluZSBfUE9TSVhfVFRZX05BTUVfTUFYIDkKI2RlZmluZSBfX1dDSEFSX01BWF9fIDIx
NDc0ODM2NDcKI2RlZmluZSBfX3N0dWJfX19rZXJuZWxfcmVtX3BpbzJsIAojZGVmaW5lIF9fREJM
X0RFTk9STV9NSU5fXyA0Ljk0MDY1NjQ1ODQxMjQ2NTRlLTMyNAojZGVmaW5lIF9fVVNFX0JTRCAx
CiNkZWZpbmUgX1BPU0lYMl9CQ19TVFJJTkdfTUFYIDEwMDAKI2RlZmluZSBfX0ZMVF9FVkFMX01F
VEhPRF9fIDAKI2RlZmluZSBTSFJUX01JTiAoLVNIUlRfTUFYIC0gMSkKI2RlZmluZSBfX0FTTU5B
TUUyKHByZWZpeCxjbmFtZSkgX19TVFJJTkcgKHByZWZpeCkgY25hbWUKI2RlZmluZSBBUkdfTUFY
IDEzMTA3MgojZGVmaW5lIFNTSVpFX01BWCBMT05HX01BWAojZGVmaW5lIF9QT1NJWF9ERUxBWVRJ
TUVSX01BWCAzMgojZGVmaW5lIFhBVFRSX1NJWkVfTUFYIDY1NTM2CiNkZWZpbmUgX19EQkxfTUlO
XzEwX0VYUF9fICgtMzA3KQojZGVmaW5lIF9fRklOSVRFX01BVEhfT05MWV9fIDAKI2RlZmluZSBf
UE9TSVhfU1lNTElOS19NQVggMjU1CiNkZWZpbmUgUEFUSF9NQVggNDA5NgojZGVmaW5lIF9fTERC
TF9SRURJUjEobmFtZSxwcm90byxhbGlhcykgbmFtZSBwcm90bwojZGVmaW5lIF9MSU1JVFNfSF9f
XyAKI2RlZmluZSBfX2Fsd2F5c19pbmxpbmUgX19pbmxpbmUgX19hdHRyaWJ1dGVfXyAoKF9fYWx3
YXlzX2lubGluZV9fKSkKI2RlZmluZSBfX1NIUlRfTUFYX18gMzI3NjcKI2RlZmluZSBfX0xEQkxf
TUFYX18gMS4xODk3MzE0OTUzNTcyMzE3NjUwMmUrNDkzMkwKI2RlZmluZSBOQU1FX01BWCAyNTUK
I2RlZmluZSBTQ0hBUl9NQVggX19TQ0hBUl9NQVhfXwojZGVmaW5lIF9fVUlOVE1BWF9UWVBFX18g
bG9uZyB1bnNpZ25lZCBpbnQKI2RlZmluZSBfX2xpbnV4IDEKI2RlZmluZSBfX3N0dWJfc2lncmV0
dXJuIAojZGVmaW5lIF9fdW5peCAxCiNkZWZpbmUgX1BPU0lYX0FJT19NQVggMQojZGVmaW5lIF9Q
T1NJWF9QSVBFX0JVRiA1MTIKI2RlZmluZSBfX2xpbnV4X18gMQojZGVmaW5lIFNDSEFSX01JTiAo
LVNDSEFSX01BWCAtIDEpCiNkZWZpbmUgX1BPU0lYX0FJT19MSVNUSU9fTUFYIDIKI2RlZmluZSBf
X0xEQkxfUkVESVJfTlRIKG5hbWUscHJvdG8pIG5hbWUgcHJvdG8gX19USFJPVwojZGVmaW5lIF9f
U0NIQVJfTUFYX18gMTI3CiNkZWZpbmUgX19VU0lOR19OQU1FU1BBQ0VfU1REKG5hbWUpIAojZGVm
aW5lIF9fS0VSTkVMX1NUUklDVF9OQU1FUyAKI2RlZmluZSBfX05USChmY3QpIF9fYXR0cmlidXRl
X18gKChfX25vdGhyb3dfXykpIGZjdAojZGVmaW5lIF9QT1NJWF9USFJFQURfVEhSRUFEU19NQVgg
NjQKI2RlZmluZSBfUE9TSVhfTVFfT1BFTl9NQVggOAojZGVmaW5lIF9QT1NJWF9MSU5LX01BWCA4
CiNkZWZpbmUgQ09MTF9XRUlHSFRTX01BWCAyNTUKI2RlZmluZSBfX2F0dHJpYnV0ZV9mb3JtYXRf
c3RyZm1vbl9fKGEsYikgX19hdHRyaWJ1dGVfXyAoKF9fZm9ybWF0X18gKF9fc3RyZm1vbl9fLCBh
LCBiKSkpCiNkZWZpbmUgX1BPU0lYX1NPVVJDRSAxCiNkZWZpbmUgX19zdHViX19fa2VybmVsX3Np
bmwgCiNkZWZpbmUgX19hdHRyaWJ1dGVfdXNlZF9fIF9fYXR0cmlidXRlX18gKChfX3VzZWRfXykp
CiNkZWZpbmUgX1BPU0lYX0NISUxEX01BWCAyNQojZGVmaW5lIF9fVVNFUl9MQUJFTF9QUkVGSVhf
XyAKI2RlZmluZSBfX0dMSUJDX18gMgojZGVmaW5lIF9fRU5EX0RFQ0xTIAojZGVmaW5lIF9fQ09O
Q0FUKHgseSkgeCAjIyB5CiNkZWZpbmUgX19TVERDX0hPU1RFRF9fIDEKI2RlZmluZSBfX0dOVV9M
SUJSQVJZX18gNgojZGVmaW5lIF9fREJMX0RJR19fIDE1CiNkZWZpbmUgX19GTFRfRVBTSUxPTl9f
IDEuMTkyMDkyOTBlLTdGCiNkZWZpbmUgX19MREJMX01JTl9fIDMuMzYyMTAzMTQzMTEyMDkzNTA2
MjZlLTQ5MzJMCiNkZWZpbmUgX1BPU0lYX05BTUVfTUFYIDE0CiNkZWZpbmUgUlRTSUdfTUFYIDMy
CiNkZWZpbmUgX191bml4X18gMQojZGVmaW5lIF9fU1REQ19JRUNfNTU5X18gMQojZGVmaW5lIF9f
U1REQ19JU09fMTA2NDZfXyAyMDAwMDlMCiNkZWZpbmUgX19ERUNJTUFMX0RJR19fIDIxCiNkZWZp
bmUgX1BPU0lYMl9SRV9EVVBfTUFYIDI1NQojZGVmaW5lIF9fVVNFX0ZPUlRJRllfTEVWRUwgMAoj
ZGVmaW5lIF9fZ251X2xpbnV4X18gMQojZGVmaW5lIE1BWF9JTlBVVCAyNTUKI2RlZmluZSBfX2F0
dHJpYnV0ZV93YXJuX3VudXNlZF9yZXN1bHRfXyBfX2F0dHJpYnV0ZV9fICgoX193YXJuX3VudXNl
ZF9yZXN1bHRfXykpCiNkZWZpbmUgX1BPU0lYX0xPR0lOX05BTUVfTUFYIDkKI2RlZmluZSBERUxB
WVRJTUVSX01BWCAyMTQ3NDgzNjQ3CiNkZWZpbmUgX19MREJMX0hBU19RVUlFVF9OQU5fXyAxCiNk
ZWZpbmUgX19USFJPVyBfX2F0dHJpYnV0ZV9fICgoX19ub3Rocm93X18pKQojZGVmaW5lIF9fR0xJ
QkNfSEFWRV9MT05HX0xPTkcgMQojZGVmaW5lIF9fR05VQ19fIDQKI2RlZmluZSBfX01NWF9fIDEK
I2RlZmluZSBfX1VTRV9TVklEIDEKI2RlZmluZSBfX0xEQkxfUkVESVIxX05USChuYW1lLHByb3Rv
LGFsaWFzKSBuYW1lIHByb3RvIF9fVEhST1cKI2RlZmluZSBMT05HX01BWCBfX0xPTkdfTUFYX18K
I2RlZmluZSBfUE9TSVhfVEhSRUFEX0RFU1RSVUNUT1JfSVRFUkFUSU9OUyA0CiNkZWZpbmUgX1BP
U0lYX0hPU1RfTkFNRV9NQVggMjU1CiNkZWZpbmUgTkdST1VQU19NQVggNjU1MzYKI2RlZmluZSBf
X0FTTU5BTUUoY25hbWUpIF9fQVNNTkFNRTIgKF9fVVNFUl9MQUJFTF9QUkVGSVhfXywgY25hbWUp
CiNkZWZpbmUgSE9TVF9OQU1FX01BWCA2NAojZGVmaW5lIF9QT1NJWF9TRU1fTlNFTVNfTUFYIDI1
NgojZGVmaW5lIF9fREJMX01BWF9fIDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4CiNkZWZpbmUgX1BP
U0lYX1NJR1FVRVVFX01BWCAzMgojZGVmaW5lIF9fREJMX0hBU19JTkZJTklUWV9fIDEKI2RlZmlu
ZSBfUE9TSVhfTkdST1VQU19NQVggOAojZGVmaW5lIF9fVVNFX1hPUEVOMksgMQojZGVmaW5lIF9f
RU5EX05BTUVTUEFDRV9DOTkgCiNkZWZpbmUgX1BPU0lYX1BBVEhfTUFYIDI1NgojZGVmaW5lIExP
TkdfTUlOICgtTE9OR19NQVggLSAxTCkKI2RlZmluZSBfX1VTRV9QT1NJWDE5OTUwNiAxCiNkZWZp
bmUgX0ZFQVRVUkVTX0ggMQojZGVmaW5lIF9fc3R1Yl9nZXRtc2cgCiNkZWZpbmUgX19zdHViX3Nl
dGxvZ2luIAojZGVmaW5lIF9fc3R1Yl9mYXR0YWNoIAojZGVmaW5lIF9fc3R1Yl9fX2tlcm5lbF90
YW5sIAojZGVmaW5lIF9fREJMX01BWF9FWFBfXyAxMDI0CiNkZWZpbmUgX19XT1JEU0laRV9DT01Q
QVQzMiAxCiNkZWZpbmUgX19TU0UyX01BVEhfXyAxCiNkZWZpbmUgX19hbWQ2NCAxCiNkZWZpbmUg
X1BPU0lYX1RaTkFNRV9NQVggNgojZGVmaW5lIF9QT1NJWF9TU0laRV9NQVggMzI3NjcKI2RlZmlu
ZSBfUE9TSVhfUkVfRFVQX01BWCAyNTUKI2RlZmluZSBfX2JvdW5kZWQgCiNkZWZpbmUgX19CRUdJ
Tl9OQU1FU1BBQ0VfU1REIAojZGVmaW5lIF9fTE9OR19MT05HX01BWF9fIDkyMjMzNzIwMzY4NTQ3
NzU4MDdMTAojZGVmaW5lIF9fc3R1Yl9iZGZsdXNoIAojZGVmaW5lIF9CSVRTX1BPU0lYMl9MSU1f
SCAxCiNkZWZpbmUgX19wdHJ2YWx1ZSAKI2RlZmluZSBfX0dYWF9BQklfVkVSU0lPTiAxMDAyCiNk
ZWZpbmUgX19GTFRfTUlOX0VYUF9fICgtMTI1KQojZGVmaW5lIF9feDg2XzY0IDEKI2RlZmluZSBf
UE9TSVhfQ0xPQ0tSRVNfTUlOIDIwMDAwMDAwCiNkZWZpbmUgX19EQkxfTUlOX18gMi4yMjUwNzM4
NTg1MDcyMDE0ZS0zMDgKI2RlZmluZSBfX1JFRElSRUNUKG5hbWUscHJvdG8sYWxpYXMpIG5hbWUg
cHJvdG8gX19hc21fXyAoX19BU01OQU1FICgjYWxpYXMpKQojZGVmaW5lIF9fTFA2NF9fIDEKI2Rl
ZmluZSBfX0RCTF9IQVNfUVVJRVRfTkFOX18gMQojZGVmaW5lIF9QT1NJWF9TWU1MT09QX01BWCA4
CiNkZWZpbmUgX19ub25udWxsKHBhcmFtcykgX19hdHRyaWJ1dGVfXyAoKF9fbm9ubnVsbF9fIHBh
cmFtcykpCiNkZWZpbmUgQ0hBUl9NQVggU0NIQVJfTUFYCiNkZWZpbmUgVUxPTkdfTUFYIChMT05H
X01BWCAqIDJVTCArIDFVTCkKI2RlZmluZSBfUE9TSVhfSElXQVQgX1BPU0lYX1BJUEVfQlVGCiNk
ZWZpbmUgX19SRUdJU1RFUl9QUkVGSVhfXyAKI2RlZmluZSBMT0dJTl9OQU1FX01BWCAyNTYKI2Rl
ZmluZSBDSEFSX0JJVCBfX0NIQVJfQklUX18KI2RlZmluZSBfX2F0dHJpYnV0ZV9wdXJlX18gX19h
dHRyaWJ1dGVfXyAoKF9fcHVyZV9fKSkKI2RlZmluZSBfX1VTRV9QT1NJWDIgMQojZGVmaW5lIF9f
Tk9fSU5MSU5FX18gMQojZGVmaW5lIF9fd2FybmRlY2wobmFtZSxtc2cpIGV4dGVybiB2b2lkIG5h
bWUgKHZvaWQpCiNkZWZpbmUgQ0hBUl9NSU4gU0NIQVJfTUlOCiNkZWZpbmUgTUFYX0NBTk9OIDI1
NQojZGVmaW5lIF9fRkxUX01BTlRfRElHX18gMjQKI2RlZmluZSBfUE9TSVhfRkRfU0VUU0laRSBf
UE9TSVhfT1BFTl9NQVgKI2RlZmluZSBfX1ZFUlNJT05fXyAiNC4xLjIgMjAwODA3MDQgKFJlZCBI
YXQgNC4xLjItNTIpIgojZGVmaW5lIEFJT19QUklPX0RFTFRBX01BWCAyMAojZGVmaW5lIF9TWVNf
Q0RFRlNfSCAxCiNkZWZpbmUgX0JTRF9TT1VSQ0UgMQojZGVmaW5lIExJTkVfTUFYIF9QT1NJWDJf
TElORV9NQVgKI2RlZmluZSBfX1NUUklORyh4KSAjeAojZGVmaW5lIF9fdW5ib3VuZGVkIAojZGVm
aW5lIF9QT1NJWDJfRVhQUl9ORVNUX01BWCAzMgojZGVmaW5lIF9fR05VQ19QUkVSRVEobWFqLG1p
bikgKChfX0dOVUNfXyA8PCAxNikgKyBfX0dOVUNfTUlOT1JfXyA+PSAoKG1haikgPDwgMTYpICsg
KG1pbikpCiNkZWZpbmUgX1BPU0lYX1NUUkVBTV9NQVggOAojZGVmaW5lIF9fc3R1Yl9ndHR5IAoj
ZGVmaW5lIF9fc3R1Yl9zc3RrIAojZGVmaW5lIF9fd3VyIAojZGVmaW5lIF9fU1REQ19JRUNfNTU5
X0NPTVBMRVhfXyAxCiNkZWZpbmUgX1BPU0lYX1JUU0lHX01BWCA4CiNkZWZpbmUgVVNIUlRfTUFY
IChTSFJUX01BWCAqIDIgKyAxKQojZGVmaW5lIHVuaXggMQojZGVmaW5lIF9QT1NJWF9NQVhfSU5Q
VVQgMjU1CiNkZWZpbmUgX19TSVpFX1RZUEVfXyBsb25nIHVuc2lnbmVkIGludAojZGVmaW5lIFhB
VFRSX0xJU1RfTUFYIDY1NTM2CiNkZWZpbmUgX1BPU0lYX1FMSU1JVCAxCiNkZWZpbmUgX19FTEZf
XyAxCiNkZWZpbmUgX19zdHViX19fa2VybmVsX2Nvc2wgCiNkZWZpbmUgX19zdHViX2x1dGltZXMg
CiNkZWZpbmUgX19GTFRfUkFESVhfXyAyCiNkZWZpbmUgX19MREJMX0VQU0lMT05fXyAxLjA4NDIw
MjE3MjQ4NTUwNDQzNDAxZS0xOUwKI2RlZmluZSBfX0dOVUNfUkhfUkVMRUFTRV9fIDUyCiNkZWZp
bmUgX1BPU0lYX0NfU09VUkNFIDIwMDExMkwKI2RlZmluZSBQVEhSRUFEX1NUQUNLX01JTiAxNjM4
NAojZGVmaW5lIF9fU1NFX01BVEhfXyAxCiNkZWZpbmUgX19sb25nX2RvdWJsZV90IGxvbmcgZG91
YmxlCiNkZWZpbmUgX1BPU0lYX0FSR19NQVggNDA5NgojZGVmaW5lIF9fazggMQojZGVmaW5lIF9f
c3R1Yl9mZXVwZGF0ZWVudiAKI2RlZmluZSBfX0xEQkxfUkVESVIobmFtZSxwcm90bykgbmFtZSBw
cm90bwojZGVmaW5lIFVDSEFSX01BWCAoU0NIQVJfTUFYICogMiArIDEpCiNkZWZpbmUgX19yZXN0
cmljdF9hcnIgX19yZXN0cmljdAojZGVmaW5lIF9fVVNFX01JU0MgMQojZGVmaW5lIF9HQ0NfTElN
SVRTX0hfIAojZGVmaW5lIF9fTERCTF9ESUdfXyAxOAojZGVmaW5lIF9feDg2XzY0X18gMQojZGVm
aW5lIF9QT1NJWDJfQ09MTF9XRUlHSFRTX01BWCAyCiNkZWZpbmUgX19zdHViX3Jldm9rZSAKI2Rl
ZmluZSBJTlRfTUFYIF9fSU5UX01BWF9fCiNkZWZpbmUgUFRIUkVBRF9ERVNUUlVDVE9SX0lURVJB
VElPTlMgX1BPU0lYX1RIUkVBRF9ERVNUUlVDVE9SX0lURVJBVElPTlMKI2RlZmluZSBfUE9TSVgy
X0xJTkVfTUFYIDIwNDgKI2RlZmluZSBfX0ZMVF9IQVNfUVVJRVRfTkFOX18gMQojZGVmaW5lIF9f
RkxUX01BWF8xMF9FWFBfXyAzOAojZGVmaW5lIF9fTE9OR19NQVhfXyA5MjIzMzcyMDM2ODU0Nzc1
ODA3TAojZGVmaW5lIF9fRkxUX0hBU19JTkZJTklUWV9fIDEKI2RlZmluZSBfX2JvczAocHRyKSBf
X2J1aWx0aW5fb2JqZWN0X3NpemUgKHB0ciwgMCkKI2RlZmluZSBfUE9TSVgyX0NIQVJDTEFTU19O
QU1FX01BWCAxNAojZGVmaW5lIF9fVVNJTkdfTkFNRVNQQUNFX0M5OShuYW1lKSAKI2RlZmluZSBF
WFBSX05FU1RfTUFYIF9QT1NJWDJfRVhQUl9ORVNUX01BWAojZGVmaW5lIElOVF9NSU4gKC1JTlRf
TUFYIC0gMSkKI2RlZmluZSBfX3N0dWJfbGNobW9kIAojZGVmaW5lIF9fUE1UKGFyZ3MpIGFyZ3MK
I2RlZmluZSBfTElOVVhfTElNSVRTX0ggCiNkZWZpbmUgbGludXggMQojZGVmaW5lIF9fV09SRFNJ
WkUgNjQKI2RlZmluZSBfX0JFR0lOX0RFQ0xTIAojZGVmaW5lIF9fTERCTF9NQU5UX0RJR19fIDY0
CiNkZWZpbmUgX19VU0VfQU5TSSAxCiNkZWZpbmUgX19rOF9fIDEKI2RlZmluZSBfX1dDSEFSX1RZ
UEVfXyBpbnQKI2RlZmluZSBfX3N0dWJfZmRldGFjaCAKI2RlZmluZSBfX3N0dWJfY2hmbGFncyAK
I2RlZmluZSBUVFlfTkFNRV9NQVggMzIKI2RlZmluZSBfX1VTRV9QT1NJWCAxCiNkZWZpbmUgX19G
TFRfRElHX18gNgojZGVmaW5lIF9fTERCTF9SRURJUl9ERUNMKG5hbWUpIAojZGVmaW5lIF9fSU5U
X01BWF9fIDIxNDc0ODM2NDcKI2RlZmluZSBfX2JvcyhwdHIpIF9fYnVpbHRpbl9vYmplY3Rfc2l6
ZSAocHRyLCBfX1VTRV9GT1JUSUZZX0xFVkVMID4gMSkKI2RlZmluZSBVSU5UX01BWCAoSU5UX01B
WCAqIDJVICsgMVUpCiNkZWZpbmUgX19GTFRfTUFYX0VYUF9fIDEyOAojZGVmaW5lIF9fcHRyX3Qg
dm9pZCAqCiNkZWZpbmUgX19EQkxfTUFOVF9ESUdfXyA1MwojZGVmaW5lIF9QT1NJWF9TRU1fVkFM
VUVfTUFYIDMyNzY3CiNkZWZpbmUgX19HTElCQ19NSU5PUl9fIDUKI2RlZmluZSBfX1dJTlRfVFlQ
RV9fIHVuc2lnbmVkIGludAojZGVmaW5lIF9fU1NFX18gMQojZGVmaW5lIF9fTERCTF9NSU5fRVhQ
X18gKC0xNjM4MSkKI2RlZmluZSBCQ19ESU1fTUFYIF9QT1NJWDJfQkNfRElNX01BWAojZGVmaW5l
IF9QT1NJWF9NQVhfQ0FOT04gMjU1CiNkZWZpbmUgX19hbWQ2NF9fIDEKI2RlZmluZSBfX1VTRV9Q
T1NJWDE5OTMwOSAxCiNkZWZpbmUgX19MREJMX01BWF9FWFBfXyAxNjM4NAojZGVmaW5lIF9fTERC
TF9NQVhfMTBfRVhQX18gNDkzMgojZGVmaW5lIF9fREJMX0VQU0lMT05fXyAyLjIyMDQ0NjA0OTI1
MDMxMzFlLTE2CiNkZWZpbmUgQkNfU0NBTEVfTUFYIF9QT1NJWDJfQkNfU0NBTEVfTUFYCiNkZWZp
bmUgWEFUVFJfTkFNRV9NQVggMjU1CiNkZWZpbmUgX1NWSURfU09VUkNFIDEKI2RlZmluZSBfTFA2
NCAxCiNkZWZpbmUgX19zdHViX3N0dHkgCiNkZWZpbmUgX19HTlVDX1BBVENITEVWRUxfXyAyCiNk
ZWZpbmUgX19SRURJUkVDVF9OVEgobmFtZSxwcm90byxhbGlhcykgbmFtZSBwcm90byBfX2FzbV9f
IChfX0FTTU5BTUUgKCNhbGlhcykpIF9fVEhST1cKI2RlZmluZSBfX0VORF9OQU1FU1BBQ0VfU1RE
IAojZGVmaW5lIENIQVJDTEFTU19OQU1FX01BWCAyMDQ4CiNkZWZpbmUgX19MREJMX0hBU19JTkZJ
TklUWV9fIDEKI2RlZmluZSBfUE9TSVhfVUlPX01BWElPViAxNgojZGVmaW5lIF9QT1NJWDJfQkNf
QkFTRV9NQVggOTkKI2RlZmluZSBfUE9TSVhfTVFfUFJJT19NQVggMzIKI2RlZmluZSBfTElCQ19M
SU1JVFNfSF8gMQojZGVmaW5lIF9fSU5UTUFYX01BWF9fIDkyMjMzNzIwMzY4NTQ3NzU4MDdMCiNk
ZWZpbmUgX19GTFRfREVOT1JNX01JTl9fIDEuNDAxMjk4NDZlLTQ1RgojZGVmaW5lIF9fQkVHSU5f
TkFNRVNQQUNFX0M5OSAKI2RlZmluZSBDSElMRF9NQVggOTk5CiNkZWZpbmUgX19GTFRfTUFYX18g
My40MDI4MjM0N2UrMzhGCiNkZWZpbmUgX19hdHRyaWJ1dGVfZm9ybWF0X2FyZ19fKHgpIF9fYXR0
cmlidXRlX18gKChfX2Zvcm1hdF9hcmdfXyAoeCkpKQojZGVmaW5lIF9fU1NFMl9fIDEKI2RlZmlu
ZSBfX0ZMVF9NSU5fMTBfRVhQX18gKC0zNykKI2RlZmluZSBfX0lOVE1BWF9UWVBFX18gbG9uZyBp
bnQKI2RlZmluZSBfQklUU19QT1NJWDFfTElNX0ggMQojZGVmaW5lIF9QT1NJWF9USU1FUl9NQVgg
MzIKI2RlZmluZSBfX0dOVUNfTUlOT1JfXyAxCiNkZWZpbmUgX19EQkxfTUFYXzEwX0VYUF9fIDMw
OAojZGVmaW5lIF9fTERCTF9ERU5PUk1fTUlOX18gMy42NDUxOTk1MzE4ODI0NzQ2MDI1M2UtNDk1
MUwKI2RlZmluZSBfX1NURENfXyAxCiNkZWZpbmUgX19hdHRyaWJ1dGVfbWFsbG9jX18gX19hdHRy
aWJ1dGVfXyAoKF9fbWFsbG9jX18pKQojZGVmaW5lIF9fUFRSRElGRl9UWVBFX18gbG9uZyBpbnQK
I2RlZmluZSBfX2F0dHJpYnV0ZV9ub2lubGluZV9fIF9fYXR0cmlidXRlX18gKChfX25vaW5saW5l
X18pKQojZGVmaW5lIEJDX1NUUklOR19NQVggX1BPU0lYMl9CQ19TVFJJTkdfTUFYCiNkZWZpbmUg
UFRIUkVBRF9LRVlTX01BWCAxMDI0CiNkZWZpbmUgX19MREJMX01JTl8xMF9FWFBfXyAoLTQ5MzEp
CiNkZWZpbmUgX19hdHRyaWJ1dGVfZGVwcmVjYXRlZF9fIF9fYXR0cmlidXRlX18gKChfX2RlcHJl
Y2F0ZWRfXykpCiNkZWZpbmUgX1BPU0lYX09QRU5fTUFYIDIwCiNkZWZpbmUgX1BPU0lYX1RIUkVB
RF9LRVlTX01BWCAxMjgKI2RlZmluZSBfX0dOVUNfR05VX0lOTElORV9fIDEKI2RlZmluZSBCQ19C
QVNFX01BWCBfUE9TSVgyX0JDX0JBU0VfTUFYCiNkZWZpbmUgTUJfTEVOX01BWCAxNgojZGVmaW5l
IF9fc3R1Yl9wdXRtc2cgCiNkZWZpbmUgX19QKGFyZ3MpIGFyZ3MK
--047d7b33d7bacaed3d0515f64f44--

From yallop@gmail.com  Wed May 13 14:21:52 2015
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-51.csi.cam.ac.uk (ppsw-51.csi.cam.ac.uk [131.111.8.151])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 52C213C4A9
 for <ctypes@lists.ocaml.org>; Wed, 13 May 2015 14:21:52 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1678898 
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.220.172 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qk0-f172.google.com ([209.85.220.172]:33441)
 by ppsw-51.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1YsWfW-0004nD-Z6 (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Wed, 13 May 2015 14:25:51 +0100
Received: by qkx62 with SMTP id 62so27818585qkx.0
 for <ctypes@lists.ocaml.org>; Wed, 13 May 2015 06:25:50 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type:content-transfer-encoding;
 bh=rt1B4Gl5QQNSHkL0W9YSxW0DVYyfGAiJHduWV+lJwSk=;
 b=LsaDY5HbhYozQm8KOOlS6CnDfhv+rAbyxRI/NCxCxMTb5p7lfE0rfhAxBc4x3x3wUJ
 QxehOJ8k5MHY+i7Z2LFokCLBo2fLCL/FGylrFSnYzuIWGaug5p336uZYjHI0EXGKT6QS
 JqBGnoE0r5hOGdJPdcVlvp1U62Hkt5S/ToNCYegWhz5BFzK51os2jqlDPoLgAd3WTyXt
 XESyF28J+haKgb61hBzejUDcZP0YXG8hs80kPqVzuBlSrajY49hO6PkhK6As/WaLEYR7
 LlQymxMEOzPICQVQAH8wYd5VrdVxMhwcs6OoAdJ320dUaCPdLzOEAiLig/jdE9XvFGC2
 wJ8A==
MIME-Version: 1.0
X-Received: by 10.140.91.18 with SMTP id y18mr25997926qgd.90.1431523549954;
 Wed, 13 May 2015 06:25:49 -0700 (PDT)
Received: by 10.229.40.7 with HTTP; Wed, 13 May 2015 06:25:49 -0700 (PDT)
In-Reply-To: <CAHR=VkzXjQO02TfREFHB-JgvdNf7+Kbyk9NXxOCEN6nF7pcpWg@mail.gmail.com>
References: <CAHR=Vkz98F0uwN=xMEf5dkerh7mTDSbmgNL8+8i0b1p-P7pnXA@mail.gmail.com>
 <CAAxsn=E5Xo3_VVySOCAsdp=BBqH0R-EWN=UybikY0xHiRKNjTQ@mail.gmail.com>
 <CAHR=VkzXjQO02TfREFHB-JgvdNf7+Kbyk9NXxOCEN6nF7pcpWg@mail.gmail.com>
Date: Wed, 13 May 2015 14:25:49 +0100
Message-ID: <CAAxsn=G48Xd_ii6t0P6RX5dQqa9uszdnZRFJwWuF16TbfyE9Mg@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Thomas Braibant <thomas.braibant@gmail.com>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Build error when compiling Ctypes on centos 5
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 13 May 2015 13:21:52 -0000

On 13 May 2015 at 14:08, Thomas Braibant <thomas.braibant@gmail.com> wrote:
> On Wed, May 13, 2015 at 3:03 PM, Jeremy Yallop <yallop@gmail.com> wrote:
>> On 13 May 2015 at 13:51, Thomas Braibant <thomas.braibant@gmail.com>
>> wrote:
>> > /home/vagrant/ocamlbrew/ocaml-4.02.1/.opam/4.02.1+PIC/build/ctypes.0.4=
.0/src/ctypes/ctypes_primitives.h:99:3:
>> > error: #error "No suitable OCaml type available for representing long
>> > longs"
>>
>> That's odd.  Could you post the output of the following program?
>
> gcc c.c
> c.c: In function =E2=80=98main=E2=80=99:
> c.c:10: error: =E2=80=98ULLONG_MAX=E2=80=99 undeclared (first use in this=
 function)

Hmm.  I didn't realise that long long support was such a recent
addition to GCC.  Do you know whether it supports any 64-bit integer
types?  If it supports int64_t and uint64_t, for example, then you
might be able to get quite far with running something like this on the
ctypes code:

   find . -name '*.c' -o -name '*.h' | xargs sed -i 's!unsigned long
long!uint64_t!g; s!long long!int64_t!g; s!LLONG!INT64!g'

From thomas.braibant@gmail.com  Wed May 13 14:25:18 2015
Return-Path: <thomas.braibant@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-51.csi.cam.ac.uk (ppsw-51.csi.cam.ac.uk [131.111.8.151])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id BD3EE3C4A9
 for <ctypes@lists.ocaml.org>; Wed, 13 May 2015 14:25:18 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1678898 
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (thomas.braibant[at]gmail.com)
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.214.171 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 HTML_MESSAGE BODY: HTML included in message
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-ob0-f171.google.com ([209.85.214.171]:36800)
 by ppsw-51.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1YsWir-0000Au-WM (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <thomas.braibant@gmail.com>); Wed, 13 May 2015 14:29:17 +0100
Received: by obbkp3 with SMTP id kp3so29393256obb.3
 for <ctypes@lists.ocaml.org>; Wed, 13 May 2015 06:29:16 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc:content-type;
 bh=tHE3AGKBcs/s3CiOlYgXHH972lWOTB0CmRC26q1XyUQ=;
 b=st063v7IT/fLrt5+f2BC6sq/rIbak+XbxjLQHS4bky6+dCfbtJ8fGpkedTwEYl6Pso
 1kMsiJFiGt4C2KpURXLlO3WWzgkmo9P5zOL12I6kLUdeMHvwzNNWeflVRwI9wiV72mw5
 qmAQ3WUjlFpdWQWTnmT+PzndKF0OWt9GaZfV7Ne230s4h9mWhx73Dzj20Vpofjsdfpyj
 6GIyPxTr2oBBN1RzuBLM5EXcrp1KnW0pg1Wm0Vty+S0PiVCrn1c0r00Mud1LlvmEfNxh
 LZ2xA/1y2fhvSEVS4NNpIrCIaycqgEbRr+J+bJ0qpAyq1/WW32wRB94lB5WbxmKns5Hz
 XuvQ==
X-Received: by 10.60.147.194 with SMTP id tm2mr16102173oeb.75.1431523755944;
 Wed, 13 May 2015 06:29:15 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.202.170.216 with HTTP; Wed, 13 May 2015 06:28:55 -0700 (PDT)
In-Reply-To: <CAAxsn=G48Xd_ii6t0P6RX5dQqa9uszdnZRFJwWuF16TbfyE9Mg@mail.gmail.com>
References: <CAHR=Vkz98F0uwN=xMEf5dkerh7mTDSbmgNL8+8i0b1p-P7pnXA@mail.gmail.com>
 <CAAxsn=E5Xo3_VVySOCAsdp=BBqH0R-EWN=UybikY0xHiRKNjTQ@mail.gmail.com>
 <CAHR=VkzXjQO02TfREFHB-JgvdNf7+Kbyk9NXxOCEN6nF7pcpWg@mail.gmail.com>
 <CAAxsn=G48Xd_ii6t0P6RX5dQqa9uszdnZRFJwWuF16TbfyE9Mg@mail.gmail.com>
From: Thomas Braibant <thomas.braibant@gmail.com>
Date: Wed, 13 May 2015 15:28:55 +0200
Message-ID: <CAHR=VkwceZvGhRUii2Py19nHM2PANS9WF+iPxyiAUFGpd0zPfw@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Content-Type: multipart/alternative; boundary=047d7b4184abf5f24d0515f698fc
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Build error when compiling Ctypes on centos 5
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 13 May 2015 13:25:18 -0000

--047d7b4184abf5f24d0515f698fc
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

I am ashamed by this patch, but it seems to be a functional workaround...

https://github.com/cryptosense/ocaml-ctypes/commit/8be776abc7d805e1c09ca20b=
360607a7ff1f8fd6

On Wed, May 13, 2015 at 3:25 PM, Jeremy Yallop <yallop@gmail.com> wrote:

> On 13 May 2015 at 14:08, Thomas Braibant <thomas.braibant@gmail.com>
> wrote:
> > On Wed, May 13, 2015 at 3:03 PM, Jeremy Yallop <yallop@gmail.com> wrote=
:
> >> On 13 May 2015 at 13:51, Thomas Braibant <thomas.braibant@gmail.com>
> >> wrote:
> >> >
> /home/vagrant/ocamlbrew/ocaml-4.02.1/.opam/4.02.1+PIC/build/ctypes.0.4.0/=
src/ctypes/ctypes_primitives.h:99:3:
> >> > error: #error "No suitable OCaml type available for representing lon=
g
> >> > longs"
> >>
> >> That's odd.  Could you post the output of the following program?
> >
> > gcc c.c
> > c.c: In function =E2=80=98main=E2=80=99:
> > c.c:10: error: =E2=80=98ULLONG_MAX=E2=80=99 undeclared (first use in th=
is function)
>
> Hmm.  I didn't realise that long long support was such a recent
> addition to GCC.  Do you know whether it supports any 64-bit integer
> types?  If it supports int64_t and uint64_t, for example, then you
> might be able to get quite far with running something like this on the
> ctypes code:
>
>    find . -name '*.c' -o -name '*.h' | xargs sed -i 's!unsigned long
> long!uint64_t!g; s!long long!int64_t!g; s!LLONG!INT64!g'
>

--047d7b4184abf5f24d0515f698fc
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">I am ashamed by this patch, but it seems to be a functiona=
l workaround...<div><br></div><div><a href=3D"https://github.com/cryptosens=
e/ocaml-ctypes/commit/8be776abc7d805e1c09ca20b360607a7ff1f8fd6">https://git=
hub.com/cryptosense/ocaml-ctypes/commit/8be776abc7d805e1c09ca20b360607a7ff1=
f8fd6</a><br></div></div><div class=3D"gmail_extra"><br><div class=3D"gmail=
_quote">On Wed, May 13, 2015 at 3:25 PM, Jeremy Yallop <span dir=3D"ltr">&l=
t;<a href=3D"mailto:yallop@gmail.com" target=3D"_blank">yallop@gmail.com</a=
>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 =
0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><span class=3D"">On 1=
3 May 2015 at 14:08, Thomas Braibant &lt;<a href=3D"mailto:thomas.braibant@=
gmail.com">thomas.braibant@gmail.com</a>&gt; wrote:<br>
&gt; On Wed, May 13, 2015 at 3:03 PM, Jeremy Yallop &lt;<a href=3D"mailto:y=
allop@gmail.com">yallop@gmail.com</a>&gt; wrote:<br>
&gt;&gt; On 13 May 2015 at 13:51, Thomas Braibant &lt;<a href=3D"mailto:tho=
mas.braibant@gmail.com">thomas.braibant@gmail.com</a>&gt;<br>
&gt;&gt; wrote:<br>
</span><span class=3D"">&gt;&gt; &gt; /home/vagrant/ocamlbrew/ocaml-4.02.1/=
.opam/4.02.1+PIC/build/ctypes.0.4.0/src/ctypes/ctypes_primitives.h:99:3:<br=
>
&gt;&gt; &gt; error: #error &quot;No suitable OCaml type available for repr=
esenting long<br>
&gt;&gt; &gt; longs&quot;<br>
&gt;&gt;<br>
&gt;&gt; That&#39;s odd.=C2=A0 Could you post the output of the following p=
rogram?<br>
&gt;<br>
</span><span class=3D"">&gt; gcc c.c<br>
&gt; c.c: In function =E2=80=98main=E2=80=99:<br>
&gt; c.c:10: error: =E2=80=98ULLONG_MAX=E2=80=99 undeclared (first use in t=
his function)<br>
<br>
</span>Hmm.=C2=A0 I didn&#39;t realise that long long support was such a re=
cent<br>
addition to GCC.=C2=A0 Do you know whether it supports any 64-bit integer<b=
r>
types?=C2=A0 If it supports int64_t and uint64_t, for example, then you<br>
might be able to get quite far with running something like this on the<br>
ctypes code:<br>
<br>
=C2=A0 =C2=A0find . -name &#39;*.c&#39; -o -name &#39;*.h&#39; | xargs sed =
-i &#39;s!unsigned long<br>
long!uint64_t!g; s!long long!int64_t!g; s!LLONG!INT64!g&#39;<br>
</blockquote></div><br></div>

--047d7b4184abf5f24d0515f698fc--

From thomas.braibant@gmail.com  Wed May 13 14:43:08 2015
Return-Path: <thomas.braibant@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-51.csi.cam.ac.uk (ppsw-51.csi.cam.ac.uk [131.111.8.151])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id A09D03C4A9
 for <ctypes@lists.ocaml.org>; Wed, 13 May 2015 14:43:08 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1678898 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.218.43 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (thomas.braibant[at]gmail.com)
 *  0.0 HTML_MESSAGE BODY: HTML included in message
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-oi0-f43.google.com ([209.85.218.43]:34599)
 by ppsw-51.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1YsX06-0004iZ-Yl (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <thomas.braibant@gmail.com>); Wed, 13 May 2015 14:47:07 +0100
Received: by oiko83 with SMTP id o83so31377464oik.1
 for <ctypes@lists.ocaml.org>; Wed, 13 May 2015 06:47:05 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc:content-type;
 bh=y8lThwbXM7S0rrrsFPXTf0w1TMnVU9ymn8qUbryDoek=;
 b=bQH/VAAWJySQxBX0dkdJ/Lt7GfPskDRyPr9DHhyHslc+Od3Ydgrtajk8WY0Lp3CDQY
 qQs7AaGSfyqbf4fytn9ovzpAHrb58RvW/yLqMDXxh5Z+AhKMKeI8guo+RtbyyFKtj1lp
 UWfyorj6hi56bW1W+tWOjomf+mSmaaeDySEB2a2ALCcTTKPwbvBrQio3RXCm1eu2qw3B
 m1htTGrdv98YIF7bvQe3cpcdFeXM6/NIOb0cMvFayC533SOzdv+1/yU32B4hj8bWoAuC
 qKdrnyP2O8QWULaiNZHb6MqSXJN0OyX51IckRgp0ln3auSMVhEg+JrBigZM6QrOACrG5
 hxkw==
X-Received: by 10.60.101.195 with SMTP id fi3mr10404587oeb.65.1431524825682;
 Wed, 13 May 2015 06:47:05 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.202.170.216 with HTTP; Wed, 13 May 2015 06:46:45 -0700 (PDT)
In-Reply-To: <CAHR=VkwceZvGhRUii2Py19nHM2PANS9WF+iPxyiAUFGpd0zPfw@mail.gmail.com>
References: <CAHR=Vkz98F0uwN=xMEf5dkerh7mTDSbmgNL8+8i0b1p-P7pnXA@mail.gmail.com>
 <CAAxsn=E5Xo3_VVySOCAsdp=BBqH0R-EWN=UybikY0xHiRKNjTQ@mail.gmail.com>
 <CAHR=VkzXjQO02TfREFHB-JgvdNf7+Kbyk9NXxOCEN6nF7pcpWg@mail.gmail.com>
 <CAAxsn=G48Xd_ii6t0P6RX5dQqa9uszdnZRFJwWuF16TbfyE9Mg@mail.gmail.com>
 <CAHR=VkwceZvGhRUii2Py19nHM2PANS9WF+iPxyiAUFGpd0zPfw@mail.gmail.com>
From: Thomas Braibant <thomas.braibant@gmail.com>
Date: Wed, 13 May 2015 15:46:45 +0200
Message-ID: <CAHR=VkwuUqGJVE7ZV-3FRHGqjYra13Fd6JM8Hqi2s1+WAsNqrQ@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Content-Type: multipart/alternative; boundary=089e0111ba0eb8dbe60515f6d85e
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Build error when compiling Ctypes on centos 5
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 13 May 2015 13:43:08 -0000

--089e0111ba0eb8dbe60515f6d85e
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Follow up issue https://github.com/ocamllabs/ocaml-ctypes/issues/302

On Wed, May 13, 2015 at 3:28 PM, Thomas Braibant <thomas.braibant@gmail.com=
>
wrote:

> I am ashamed by this patch, but it seems to be a functional workaround...
>
>
> https://github.com/cryptosense/ocaml-ctypes/commit/8be776abc7d805e1c09ca2=
0b360607a7ff1f8fd6
>
> On Wed, May 13, 2015 at 3:25 PM, Jeremy Yallop <yallop@gmail.com> wrote:
>
>> On 13 May 2015 at 14:08, Thomas Braibant <thomas.braibant@gmail.com>
>> wrote:
>> > On Wed, May 13, 2015 at 3:03 PM, Jeremy Yallop <yallop@gmail.com>
>> wrote:
>> >> On 13 May 2015 at 13:51, Thomas Braibant <thomas.braibant@gmail.com>
>> >> wrote:
>> >> >
>> /home/vagrant/ocamlbrew/ocaml-4.02.1/.opam/4.02.1+PIC/build/ctypes.0.4.0=
/src/ctypes/ctypes_primitives.h:99:3:
>> >> > error: #error "No suitable OCaml type available for representing lo=
ng
>> >> > longs"
>> >>
>> >> That's odd.  Could you post the output of the following program?
>> >
>> > gcc c.c
>> > c.c: In function =E2=80=98main=E2=80=99:
>> > c.c:10: error: =E2=80=98ULLONG_MAX=E2=80=99 undeclared (first use in t=
his function)
>>
>> Hmm.  I didn't realise that long long support was such a recent
>> addition to GCC.  Do you know whether it supports any 64-bit integer
>> types?  If it supports int64_t and uint64_t, for example, then you
>> might be able to get quite far with running something like this on the
>> ctypes code:
>>
>>    find . -name '*.c' -o -name '*.h' | xargs sed -i 's!unsigned long
>> long!uint64_t!g; s!long long!int64_t!g; s!LLONG!INT64!g'
>>
>
>

--089e0111ba0eb8dbe60515f6d85e
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Follow up issue <a href=3D"https://github.com/ocamllabs/oc=
aml-ctypes/issues/302" target=3D"_blank">https://github.com/ocamllabs/ocaml=
-ctypes/issues/302</a><br></div><div class=3D"gmail_extra"><br><div class=
=3D"gmail_quote">On Wed, May 13, 2015 at 3:28 PM, Thomas Braibant <span dir=
=3D"ltr">&lt;<a href=3D"mailto:thomas.braibant@gmail.com" target=3D"_blank"=
>thomas.braibant@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gm=
ail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-le=
ft:1ex"><div dir=3D"ltr">I am ashamed by this patch, but it seems to be a f=
unctional workaround...<div><br></div><div><a href=3D"https://github.com/cr=
yptosense/ocaml-ctypes/commit/8be776abc7d805e1c09ca20b360607a7ff1f8fd6" tar=
get=3D"_blank">https://github.com/cryptosense/ocaml-ctypes/commit/8be776abc=
7d805e1c09ca20b360607a7ff1f8fd6</a><br></div></div><div class=3D"HOEnZb"><d=
iv class=3D"h5"><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">O=
n Wed, May 13, 2015 at 3:25 PM, Jeremy Yallop <span dir=3D"ltr">&lt;<a href=
=3D"mailto:yallop@gmail.com" target=3D"_blank">yallop@gmail.com</a>&gt;</sp=
an> wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;=
border-left:1px #ccc solid;padding-left:1ex"><span>On 13 May 2015 at 14:08,=
 Thomas Braibant &lt;<a href=3D"mailto:thomas.braibant@gmail.com" target=3D=
"_blank">thomas.braibant@gmail.com</a>&gt; wrote:<br>
&gt; On Wed, May 13, 2015 at 3:03 PM, Jeremy Yallop &lt;<a href=3D"mailto:y=
allop@gmail.com" target=3D"_blank">yallop@gmail.com</a>&gt; wrote:<br>
&gt;&gt; On 13 May 2015 at 13:51, Thomas Braibant &lt;<a href=3D"mailto:tho=
mas.braibant@gmail.com" target=3D"_blank">thomas.braibant@gmail.com</a>&gt;=
<br>
&gt;&gt; wrote:<br>
</span><span>&gt;&gt; &gt; /home/vagrant/ocamlbrew/ocaml-4.02.1/.opam/4.02.=
1+PIC/build/ctypes.0.4.0/src/ctypes/ctypes_primitives.h:99:3:<br>
&gt;&gt; &gt; error: #error &quot;No suitable OCaml type available for repr=
esenting long<br>
&gt;&gt; &gt; longs&quot;<br>
&gt;&gt;<br>
&gt;&gt; That&#39;s odd.=C2=A0 Could you post the output of the following p=
rogram?<br>
&gt;<br>
</span><span>&gt; gcc c.c<br>
&gt; c.c: In function =E2=80=98main=E2=80=99:<br>
&gt; c.c:10: error: =E2=80=98ULLONG_MAX=E2=80=99 undeclared (first use in t=
his function)<br>
<br>
</span>Hmm.=C2=A0 I didn&#39;t realise that long long support was such a re=
cent<br>
addition to GCC.=C2=A0 Do you know whether it supports any 64-bit integer<b=
r>
types?=C2=A0 If it supports int64_t and uint64_t, for example, then you<br>
might be able to get quite far with running something like this on the<br>
ctypes code:<br>
<br>
=C2=A0 =C2=A0find . -name &#39;*.c&#39; -o -name &#39;*.h&#39; | xargs sed =
-i &#39;s!unsigned long<br>
long!uint64_t!g; s!long long!int64_t!g; s!LLONG!INT64!g&#39;<br>
</blockquote></div><br></div>
</div></div></blockquote></div><br></div>

--089e0111ba0eb8dbe60515f6d85e--

From matthieu.dubuget@gmail.com  Thu May 21 14:46:19 2015
Return-Path: <matthieu.dubuget@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 5E5C53C36A
 for <ctypes@lists.ocaml.org>; Thu, 21 May 2015 14:46:19 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1680203 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.50 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (matthieu.dubuget[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wg0-f50.google.com ([74.125.82.50]:33531)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1YvQs1-0007W9-jZ (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <matthieu.dubuget@gmail.com>); Thu, 21 May 2015 14:50:45 +0100
Received: by wgjc11 with SMTP id c11so86440305wgj.0
 for <ctypes@lists.ocaml.org>; Thu, 21 May 2015 06:50:44 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=message-id:date:from:reply-to:user-agent:mime-version:to:subject
 :content-type:content-transfer-encoding;
 bh=XLmI46/fcSNhurih0enGWnHCBcOLW8BJBcGhvXX+5qM=;
 b=dBSwQbxgPj7CeCaZSaeST6Oib9kA1JjRjn1jllrJJcS5IaOWwcW9GpSe0oJE+uFVsj
 h8OoHUk2nMbRn1u0dwTY6OPjlP3JM5GVhIG51IBAJtJfZ35vdnrHDNtaw02UrPZwbEko
 JanE1LqzgrHuJB2HnfxfhLFVKfMMbNc3DA4G4It9HueqWkXTPpUiuOFi6EtHZMpmEsNC
 4uF7KMR6M9IQ+RViANUb2GcKuYqG0NnZr6rZocYi2up25jylOcaQS4hxoZianWFutV1W
 1JXDwKhHcCjdPn3HvVWOqPWpFKm0mrq8+fi8aXcQHzs568rszleeFNrLuH7K1VKn+8OV
 mjZw==
X-Received: by 10.194.89.70 with SMTP id bm6mr5269457wjb.146.1432216244770;
 Thu, 21 May 2015 06:50:44 -0700 (PDT)
Received: from [172.17.1.44] (papillon.metalscan.fr. [178.22.148.54])
 by mx.google.com with ESMTPSA id x10sm32247973wjf.45.2015.05.21.06.50.43
 for <ctypes@lists.ocaml.org>
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Thu, 21 May 2015 06:50:44 -0700 (PDT)
Message-ID: <555DE2B3.3080403@gmail.com>
Date: Thu, 21 May 2015 15:50:43 +0200
From: Matthieu Dubuget <matthieu.dubuget@gmail.com>
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64;
 rv:31.0) Gecko/20100101 Thunderbird/31.7.0
MIME-Version: 1.0
To: ctypes@lists.ocaml.org
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 7bit
Subject: [ocaml-ctypes] Troubles under windows
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
Reply-To: matthieu.dubuget@gmail.com
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 21 May 2015 13:46:19 -0000

Hello,

I'm trying to use ctypes on windows. When I'm trying
#use"ctypes.foreign"
I'm getting a DLL error (see at the end of this message).

My ocaml is x86_64-w64-mingw version.

I did install libffi this way :

tar xaf libffi-3.2.1.tar.gz
cd libffi-3.2.1
./autogen.sh
./configure --host=x86_64-w64-mingw32 --prefix 
/usr/x86_64-w64-mingw32/sys-root/mingw
make
make install

It worked!

$ x86_64-w64-mingw32-pkg-config.exe --list-all
libffi                    libffi - Library supporting Foreign Function 
Interfaces
gsettings-desktop-schemas gsettings-desktop-schemas - Shared GSettings 
schemas for the desktop, including helper headers
autoopts                  AutoOpts - A semi-automated generated/library 
option parser
shared-mime-info          shared-mime-info - Freedesktop common MIME 
database

$ x86_64-w64-mingw32-pkg-config.exe libffi --libs
-L/usr/x86_64-w64-mingw32/sys-root/mingw/lib/../lib -lffi

$ x86_64-w64-mingw32-pkg-config.exe libffi --cflags
-I/usr/x86_64-w64-mingw32/sys-root/mingw/lib/libffi-3.2.1/include

I compiled ctypes :

7z x ocaml-ctypes-0.4.1.zip
cd ocaml-ctypes-0.4.1
export LIBFFI_LIBS=$(x86_64-w64-mingw32-pkg-config.exe libffi --libs)
export LIBFFI_CFLAGS=$(x86_64-w64-mingw32-pkg-config.exe libffi --cflags)
make
make install

$ ocaml
         OCaml version 4.02.1

# #use"topfind";;
- : unit = ()
Findlib has been successfully loaded. Additional directives:
   #require "package";;      to load a package
   #list;;                   to list the available packages
   #camlp4o;;                to load camlp4 (standard syntax)
   #camlp4r;;                to load camlp4 (revised syntax)
   #predicates "p,q,...";;   to set these predicates
   Topfind.reset();;         to force that packages will be reloaded
   #thread;;                 to enable threads

- : unit = ()

# #require"ctypes.foreign";;
C:\OCaml\lib\unix.cma: loaded
C:\OCaml\lib\bigarray.cma: loaded
C:\OCaml\lib\str.cma: loaded
C:\OCaml\lib\site-lib\bytes: added to search path
C:\OCaml\lib\site-lib\ctypes: added to search path
C:\OCaml\lib\site-lib\ctypes\ctypes.cma: loaded
C:\OCaml\lib\site-lib\ctypes\ctypes-foreign-base.cma: loaded
Cannot load required shared library dllctypes-foreign-base_stubs.
Reason: C:\OCaml\lib\site-lib\ctypes\dllctypes-foreign-base_stubs.dll: 
Cannot resolve ffi_type_pointer.
C:\OCaml\lib\site-lib\ctypes\ctypes-foreign-unthreaded.cma: loaded
Characters -1--1:
   #require"ctypes.foreign";;

Error: Reference to undefined global `Ctypes_closure_properties'


I'm not sure if it can help to understand what the problem is?

$ ldd /cygdrive/c/OCaml/lib/site-lib/ctypes/dllctypes-foreign-base_stubs.dll
Cannot find FLEXDLL_RELOCATE
         ntdll.dll => /cygdrive/c/Windows/SYSTEM32/ntdll.dll (0x76e40000)
         kernel32.dll => /cygdrive/c/Windows/system32/kernel32.dll 
(0x76c20000)
         KERNELBASE.dll => /cygdrive/c/Windows/system32/KERNELBASE.dll 
(0x7fefcc60000)
         ??? => ??? (0x6e3c0000)
         msvcrt.dll => /cygdrive/c/Windows/system32/msvcrt.dll 
(0x7feff0b0000)
         USER32.dll => /cygdrive/c/Windows/system32/USER32.dll (0x76d40000)
         GDI32.dll => /cygdrive/c/Windows/system32/GDI32.dll (0x7fefed00000)
         LPK.dll => /cygdrive/c/Windows/system32/LPK.dll (0x7fefd740000)
         USP10.dll => /cygdrive/c/Windows/system32/USP10.dll (0x7fefd750000)
         ??? => ??? (0x6b740000)
         ??? => ??? (0x77000000)
         IMM32.DLL => /cygdrive/c/Windows/system32/IMM32.DLL (0x7fefd710000)
         MSCTF.dll => /cygdrive/c/Windows/system32/MSCTF.dll (0x7fefed70000)
         nvinitx.dll => /cygdrive/c/Windows/system32/nvinitx.dll 
(0x7fefcb30000)
         VERSION.dll => /cygdrive/c/Windows/system32/VERSION.dll 
(0x7fefcb20000)
         ADVAPI32.dll => /cygdrive/c/Windows/system32/ADVAPI32.dll 
(0x7fefd280000)
         sechost.dll => /cygdrive/c/Windows/SYSTEM32/sechost.dll 
(0x7feff090000)
         RPCRT4.dll => /cygdrive/c/Windows/system32/RPCRT4.dll 
(0x7fefd040000)
         igdumd64.dll => /cygdrive/c/Windows/system32/NV/igdumd64.dll 
(0x7feed120000)
         SETUPAPI.dll => /cygdrive/c/Windows/system32/SETUPAPI.dll 
(0x7fefd360000)
         CFGMGR32.dll => /cygdrive/c/Windows/system32/CFGMGR32.dll 
(0x7fefcc20000)
         OLEAUT32.dll => /cygdrive/c/Windows/system32/OLEAUT32.dll 
(0x7fefd630000)
         ole32.dll => /cygdrive/c/Windows/system32/ole32.dll (0x7fefee80000)
         DEVOBJ.dll => /cygdrive/c/Windows/system32/DEVOBJ.dll 
(0x7fefcf20000)
         igd10umd64.dll => 
/cygdrive/c/Windows/system32/NV/igd10umd64.dll (0x7feec200000)

Thanks for any help!

-- 
Matthieu Dubuget


From matthieu.dubuget@gmail.com  Thu May 21 14:46:34 2015
Return-Path: <matthieu.dubuget@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 35EB93C36A
 for <ctypes@lists.ocaml.org>; Thu, 21 May 2015 14:46:34 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1680203 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.182 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (matthieu.dubuget[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f182.google.com ([209.85.212.182]:38255)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1YvQsF-0001dQ-sb (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <matthieu.dubuget@gmail.com>); Thu, 21 May 2015 14:51:00 +0100
Received: by wichy4 with SMTP id hy4so14719535wic.1
 for <ctypes@lists.ocaml.org>; Thu, 21 May 2015 06:50:59 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=message-id:date:from:reply-to:user-agent:mime-version:to:subject
 :content-type:content-transfer-encoding;
 bh=XLmI46/fcSNhurih0enGWnHCBcOLW8BJBcGhvXX+5qM=;
 b=s/65pO17TgZzZ7yhdXZK6PRFKlkwf9txBAPRpw5ZFtr5HZbmt3npRt2TVUwbVUx4LQ
 ttq8NlY7dW8XdWjO3VPseJOqCRgkB/id0TXbbB+DtPef+498iT8aoZ7wornWgoirRvAw
 JwERz0l3RWRYAVE1DfgMvi0mpVF/YhIr1M5tm8inT8+mZhIsy8KG3AnGKiL/sVKrhaH2
 rZMxHZdOOT/7FNNADqsV28ur2wOyEZuj44EyQP6tfD3UYZvJKHiM6j1l72jv0OvNutJ3
 nnkVnneZrOCLwuGk5n2xraK2NbG/qS44K2Io+0Mpk166JNFjTcArg4I/b/zs6Ra6+L5A
 2GIg==
X-Received: by 10.194.103.232 with SMTP id fz8mr5347151wjb.130.1432216259633; 
 Thu, 21 May 2015 06:50:59 -0700 (PDT)
Received: from [172.17.1.44] (papillon.metalscan.fr. [178.22.148.54])
 by mx.google.com with ESMTPSA id ew10sm2962326wic.22.2015.05.21.06.50.58
 for <ctypes@lists.ocaml.org>
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Thu, 21 May 2015 06:50:58 -0700 (PDT)
Message-ID: <555DE2C2.7050306@gmail.com>
Date: Thu, 21 May 2015 15:50:58 +0200
From: Matthieu Dubuget <matthieu.dubuget@gmail.com>
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64;
 rv:31.0) Gecko/20100101 Thunderbird/31.7.0
MIME-Version: 1.0
To: ctypes@lists.ocaml.org
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 7bit
Subject: [ocaml-ctypes] Troubles under windows
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
Reply-To: matthieu.dubuget@gmail.com
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 21 May 2015 13:46:34 -0000

Hello,

I'm trying to use ctypes on windows. When I'm trying
#use"ctypes.foreign"
I'm getting a DLL error (see at the end of this message).

My ocaml is x86_64-w64-mingw version.

I did install libffi this way :

tar xaf libffi-3.2.1.tar.gz
cd libffi-3.2.1
./autogen.sh
./configure --host=x86_64-w64-mingw32 --prefix 
/usr/x86_64-w64-mingw32/sys-root/mingw
make
make install

It worked!

$ x86_64-w64-mingw32-pkg-config.exe --list-all
libffi                    libffi - Library supporting Foreign Function 
Interfaces
gsettings-desktop-schemas gsettings-desktop-schemas - Shared GSettings 
schemas for the desktop, including helper headers
autoopts                  AutoOpts - A semi-automated generated/library 
option parser
shared-mime-info          shared-mime-info - Freedesktop common MIME 
database

$ x86_64-w64-mingw32-pkg-config.exe libffi --libs
-L/usr/x86_64-w64-mingw32/sys-root/mingw/lib/../lib -lffi

$ x86_64-w64-mingw32-pkg-config.exe libffi --cflags
-I/usr/x86_64-w64-mingw32/sys-root/mingw/lib/libffi-3.2.1/include

I compiled ctypes :

7z x ocaml-ctypes-0.4.1.zip
cd ocaml-ctypes-0.4.1
export LIBFFI_LIBS=$(x86_64-w64-mingw32-pkg-config.exe libffi --libs)
export LIBFFI_CFLAGS=$(x86_64-w64-mingw32-pkg-config.exe libffi --cflags)
make
make install

$ ocaml
         OCaml version 4.02.1

# #use"topfind";;
- : unit = ()
Findlib has been successfully loaded. Additional directives:
   #require "package";;      to load a package
   #list;;                   to list the available packages
   #camlp4o;;                to load camlp4 (standard syntax)
   #camlp4r;;                to load camlp4 (revised syntax)
   #predicates "p,q,...";;   to set these predicates
   Topfind.reset();;         to force that packages will be reloaded
   #thread;;                 to enable threads

- : unit = ()

# #require"ctypes.foreign";;
C:\OCaml\lib\unix.cma: loaded
C:\OCaml\lib\bigarray.cma: loaded
C:\OCaml\lib\str.cma: loaded
C:\OCaml\lib\site-lib\bytes: added to search path
C:\OCaml\lib\site-lib\ctypes: added to search path
C:\OCaml\lib\site-lib\ctypes\ctypes.cma: loaded
C:\OCaml\lib\site-lib\ctypes\ctypes-foreign-base.cma: loaded
Cannot load required shared library dllctypes-foreign-base_stubs.
Reason: C:\OCaml\lib\site-lib\ctypes\dllctypes-foreign-base_stubs.dll: 
Cannot resolve ffi_type_pointer.
C:\OCaml\lib\site-lib\ctypes\ctypes-foreign-unthreaded.cma: loaded
Characters -1--1:
   #require"ctypes.foreign";;

Error: Reference to undefined global `Ctypes_closure_properties'


I'm not sure if it can help to understand what the problem is?

$ ldd /cygdrive/c/OCaml/lib/site-lib/ctypes/dllctypes-foreign-base_stubs.dll
Cannot find FLEXDLL_RELOCATE
         ntdll.dll => /cygdrive/c/Windows/SYSTEM32/ntdll.dll (0x76e40000)
         kernel32.dll => /cygdrive/c/Windows/system32/kernel32.dll 
(0x76c20000)
         KERNELBASE.dll => /cygdrive/c/Windows/system32/KERNELBASE.dll 
(0x7fefcc60000)
         ??? => ??? (0x6e3c0000)
         msvcrt.dll => /cygdrive/c/Windows/system32/msvcrt.dll 
(0x7feff0b0000)
         USER32.dll => /cygdrive/c/Windows/system32/USER32.dll (0x76d40000)
         GDI32.dll => /cygdrive/c/Windows/system32/GDI32.dll (0x7fefed00000)
         LPK.dll => /cygdrive/c/Windows/system32/LPK.dll (0x7fefd740000)
         USP10.dll => /cygdrive/c/Windows/system32/USP10.dll (0x7fefd750000)
         ??? => ??? (0x6b740000)
         ??? => ??? (0x77000000)
         IMM32.DLL => /cygdrive/c/Windows/system32/IMM32.DLL (0x7fefd710000)
         MSCTF.dll => /cygdrive/c/Windows/system32/MSCTF.dll (0x7fefed70000)
         nvinitx.dll => /cygdrive/c/Windows/system32/nvinitx.dll 
(0x7fefcb30000)
         VERSION.dll => /cygdrive/c/Windows/system32/VERSION.dll 
(0x7fefcb20000)
         ADVAPI32.dll => /cygdrive/c/Windows/system32/ADVAPI32.dll 
(0x7fefd280000)
         sechost.dll => /cygdrive/c/Windows/SYSTEM32/sechost.dll 
(0x7feff090000)
         RPCRT4.dll => /cygdrive/c/Windows/system32/RPCRT4.dll 
(0x7fefd040000)
         igdumd64.dll => /cygdrive/c/Windows/system32/NV/igdumd64.dll 
(0x7feed120000)
         SETUPAPI.dll => /cygdrive/c/Windows/system32/SETUPAPI.dll 
(0x7fefd360000)
         CFGMGR32.dll => /cygdrive/c/Windows/system32/CFGMGR32.dll 
(0x7fefcc20000)
         OLEAUT32.dll => /cygdrive/c/Windows/system32/OLEAUT32.dll 
(0x7fefd630000)
         ole32.dll => /cygdrive/c/Windows/system32/ole32.dll (0x7fefee80000)
         DEVOBJ.dll => /cygdrive/c/Windows/system32/DEVOBJ.dll 
(0x7fefcf20000)
         igd10umd64.dll => 
/cygdrive/c/Windows/system32/NV/igd10umd64.dll (0x7feec200000)

Thanks for any help!

-- 
Matthieu Dubuget


From yallop@gmail.com  Thu May 21 14:54:01 2015
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-41.csi.cam.ac.uk (ppsw-41.csi.cam.ac.uk [131.111.8.141])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 07B883C36A
 for <ctypes@lists.ocaml.org>; Thu, 21 May 2015 14:54:01 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1680203 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.192.45 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qg0-f45.google.com ([209.85.192.45]:36389)
 by ppsw-41.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1YvQzS-0007sK-S5 (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Thu, 21 May 2015 14:58:27 +0100
Received: by qget53 with SMTP id t53so39978212qge.3
 for <ctypes@lists.ocaml.org>; Thu, 21 May 2015 06:58:25 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=89EoHS/TzZsPJBUSnciSq1w0rHXuZiFuzm0UmhLPdyM=;
 b=WeqSsimMf8eii+L6g05d411J3kRcmjt0X8z4xMaK1+yr49yY/n3dW7UAxs3H21TAR5
 Nimil+d8krFv/n1K9x7a8kREVPEQXRrSB2mMlLvdhnlHwyffg5DlTbUrc8+IrRrA7vJi
 C8jqYACZ5DcolQLle9RnwhR0uBIk4HCISB3vptn9zKvHDPRZtK+c8YKgNrvAUDVpO7W5
 4Upe09oo2DxQU9V9Hka8Emj3ODNVA53y2Jnf1j/7KuPlVZYbw4GaRSrduphBCePUtv4q
 XGzUtUdY7OAeNuQRuAwbQ0RC7M6rY8X0094lVxb68Rk9OteuFjQPnL3bzprZjvm/7qcG
 jedQ==
MIME-Version: 1.0
X-Received: by 10.140.92.53 with SMTP id a50mr3819756qge.66.1432216705835;
 Thu, 21 May 2015 06:58:25 -0700 (PDT)
Received: by 10.229.53.138 with HTTP; Thu, 21 May 2015 06:58:25 -0700 (PDT)
In-Reply-To: <555DE2B3.3080403@gmail.com>
References: <555DE2B3.3080403@gmail.com>
Date: Thu, 21 May 2015 14:58:25 +0100
Message-ID: <CAAxsn=FU1Yq+Cc_PYT6LZJEQ0fjq8ACqpeOVLjb4WwzyG2Xj_A@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Matthieu Dubuget <matthieu.dubuget@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Troubles under windows
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 21 May 2015 13:54:01 -0000

On 21 May 2015 at 14:50, Matthieu Dubuget <matthieu.dubuget@gmail.com> wrote:
> I'm trying to use ctypes on windows. When I'm trying
> #use"ctypes.foreign"
> I'm getting a DLL error (see at the end of this message).

This may be related to the limited support for dynamic libraries on
Windows discussed in this issue:

   https://github.com/ocamllabs/ocaml-ctypes/issues/198

From matthieu.dubuget@gmail.com  Sat May 23 19:49:36 2015
Return-Path: <matthieu.dubuget@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-51.csi.cam.ac.uk (ppsw-51.csi.cam.ac.uk [131.111.8.151])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id AF27B3C1D0
 for <ctypes@lists.ocaml.org>; Sat, 23 May 2015 19:49:36 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1680203 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.174 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (matthieu.dubuget[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f174.google.com ([209.85.212.174]:36267)
 by ppsw-51.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1YwEYj-0001N4-Wl (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <matthieu.dubuget@gmail.com>); Sat, 23 May 2015 19:54:10 +0100
Received: by wizk4 with SMTP id k4so16180895wiz.1
 for <ctypes@lists.ocaml.org>; Sat, 23 May 2015 11:54:08 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=message-id:date:from:reply-to:user-agent:mime-version:to:cc:subject
 :references:in-reply-to:content-type:content-transfer-encoding;
 bh=1Hm9LqY0uUp+yABBuroLWFoLcS4vNJ4JSM386sXIH9I=;
 b=lGCFpcHeX69x/a2pgZGvVia8t7eh+IUTGYaGq1y+08O9FM7DVoL4uiSswh1nmw7rse
 WgKQhhgoey+U3h/Q7LG7LRE0xjUcqTYDssQuaVSOqlzGFwbn55Y9InS3FQGJr31Gg+lr
 Ql/Xjsihb5TEd6pF4qcjOr5huxnu6lxTk9Zmtkff4qKF5ZbsBnD0nkDmheXQiZe3MMwW
 CD6nHFG2YW+HJ4O6xOkvBPLhYAxXnchd1bOoMsG9dR3YAPFwmnvtS/4ozADeae3dAIn/
 wKH3Ef4JkO8IDTUD96eeLQkC5+8nBQ5dtn0DkVTfeN70BZLnd1D5+Q9dhjTsVFrM5/Lv
 sVOg==
X-Received: by 10.180.12.104 with SMTP id x8mr18083210wib.85.1432407248804;
 Sat, 23 May 2015 11:54:08 -0700 (PDT)
Received: from [192.168.0.14] (dubuget.fr. [88.184.200.161])
 by mx.google.com with ESMTPSA id a19sm4107168wiv.2.2015.05.23.11.54.07
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Sat, 23 May 2015 11:54:08 -0700 (PDT)
Message-ID: <5560CCCE.7090908@gmail.com>
Date: Sat, 23 May 2015 20:54:06 +0200
From: Matthieu Dubuget <matthieu.dubuget@gmail.com>
User-Agent: Mozilla/5.0 (X11; Linux x86_64;
 rv:31.0) Gecko/20100101 Thunderbird/31.7.0
MIME-Version: 1.0
To: Jeremy Yallop <yallop@gmail.com>
References: <555DE2B3.3080403@gmail.com>
 <CAAxsn=FU1Yq+Cc_PYT6LZJEQ0fjq8ACqpeOVLjb4WwzyG2Xj_A@mail.gmail.com>
In-Reply-To: <CAAxsn=FU1Yq+Cc_PYT6LZJEQ0fjq8ACqpeOVLjb4WwzyG2Xj_A@mail.gmail.com>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 8bit
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Troubles under windows
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
Reply-To: matthieu.dubuget@gmail.com
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sat, 23 May 2015 18:49:36 -0000

Thank you!

I just added  --disable-shared --enable-static to libffi configure.



Le 21/05/2015 15:58, Jeremy Yallop a écrit :
> On 21 May 2015 at 14:50, Matthieu Dubuget <matthieu.dubuget@gmail.com> wrote:
>> I'm trying to use ctypes on windows. When I'm trying
>> #use"ctypes.foreign"
>> I'm getting a DLL error (see at the end of this message).
> This may be related to the limited support for dynamic libraries on
> Windows discussed in this issue:
>
>     https://github.com/ocamllabs/ocaml-ctypes/issues/198

-- 
Matthieu Dubuget
Guide d’autodéfense numérique : http://guide.boum.org


From andi.m.mcclure@gmail.com  Sat Jun 27 14:18:44 2015
Return-Path: <andi.m.mcclure@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id AC0353C388
 for <ctypes@lists.ocaml.org>; Sat, 27 Jun 2015 14:18:44 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1687716 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.160.173 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (andi.m.mcclure[at]gmail.com)
 *  0.0 HTML_MESSAGE BODY: HTML included in message
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-yk0-f173.google.com ([209.85.160.173]:36247)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1Z8q6c-0006qW-sD (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <andi.m.mcclure@gmail.com>); Sat, 27 Jun 2015 14:25:15 +0100
Received: by ykdr198 with SMTP id r198so80598015ykd.3
 for <ctypes@lists.ocaml.org>; Sat, 27 Jun 2015 06:25:13 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:date:message-id:subject:from:to:content-type;
 bh=7un5qZTzWlnqgG2sqlAYaFbNCIgay++83FOOF4CjLuI=;
 b=wQaOQnozA4G6t/62N3J1lf0AkrKco07SkUrZTHj3kPfQEod3znwe/tffSciTpckVjs
 DPW5dxctKFsqPSwjRoEpHwq6c49RYzCqeHCuAjuZSrMbqzzNqobRsFCbe8ps4vJD8uIc
 e3Tz5gti0DB/CUJdlD+omnHNDmPBAtCBvL6BefnPdzWvKvLBXdNgvxedBmVg6GgXPYnW
 ExSDQG+M0jtmeN6rIgnFP4EgXRJCusphWLEJroMpCKAnmMlvEdvRl3rE8FV8C3E/NdEi
 aT2JW+TeNpFw5W3HXLFBGqnL96ovdUa6Te/bNvboRnm59hdJL4QVX4a1gzNIOCtLFfW6
 kUBQ==
MIME-Version: 1.0
X-Received: by 10.170.126.214 with SMTP id s205mr8123707ykb.67.1435411513707; 
 Sat, 27 Jun 2015 06:25:13 -0700 (PDT)
Received: by 10.129.88.195 with HTTP; Sat, 27 Jun 2015 06:25:13 -0700 (PDT)
Date: Sat, 27 Jun 2015 15:25:13 +0200
Message-ID: <CAJDLOY+9OjHtkGp8stmZhDT1dhj6KmtCfhNyNKDM8mORt+DvCA@mail.gmail.com>
From: Andi McClure <andi.m.mcclure@gmail.com>
To: ctypes@lists.ocaml.org
Content-Type: multipart/alternative; boundary=001a1139720a61935305197fc925
Subject: [ocaml-ctypes] Best practices for wrapping ocaml-ctypes?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sat, 27 Jun 2015 13:18:44 -0000

--001a1139720a61935305197fc925
Content-Type: text/plain; charset=UTF-8

Hello, I have a project which is a programming language (
http://emilylang.org/ ) and the current interpreter is implemented in
ocaml. I want to add a C FFI, and I am looking at ocaml-ctypes, but I am
having trouble figuring out how best to use the ocaml-ctypes library given
my project's specific needs as a language.

Basically: ocaml-ctypes seems to take libFFI and recast its operations in
terms of ocaml idioms and primitives. This looks great if I am writing an
ocaml program. However, my goal is to present an interface to libffi (or
something like it) in terms of *Emily* idioms and primitives (Emily being
my language) so that I can write an Emily program. This means directly
wrapping ocaml-ctypes probably won't work out well (the ocaml idioms
ocaml-ctypes uses can't all be directly represented in my language, and
they might come across as weird to the language users who are probably not
ocaml users).

My initial thought was that what I probably wanted to do was try to present
an interface between the interpreter and interpreted code that closely
tracks the programming interface of libffi. Then I could write an
in-language library on top of this with a friendlier/more idiomatic
interface. (The reason I believe I want the interpreter-interpreted
interface to resemble libffi is that I might someday switch from ocaml to
another language, and libffi will probably be available in other contexts
but ocaml-ctypes will not). Looking over the ctypes code it looked like a
"raw" libffi-flavored interface might be possible using
ctypes-foreign-base/ctypes_ffi.mli and the function_of_pointer interface,
but it looks like this mli is present in the code but not exposed in the
opam package.

What would you recommend in this case?

Is there a way to access ctypes-foreign-base after all? Is that a
reasonable thing to attempt?

Is there a way to use ocaml-ctypes which at least closely resembles a "trap
door" to let a client provide access to libffi directly?

Is there a library other than ocaml-ctypes which wraps libffi more directly?

Am I meowing up the wrong tree entirely? :)

Any advice welcome, thanks.

--001a1139720a61935305197fc925
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>Hello, I have a project which is a programming langua=
ge ( <a href=3D"http://emilylang.org/" target=3D"_blank">http://emilylang.o=
rg/</a> ) and the current interpreter is implemented in ocaml. I want to ad=
d a C FFI, and I am looking at ocaml-ctypes, but I am having trouble figuri=
ng out how best to use the ocaml-ctypes library given my project&#39;s spec=
ific needs as a language.</div><div><br></div><div>Basically: ocaml-ctypes =
seems to take libFFI and recast its operations in terms of ocaml idioms and=
 primitives. This looks great if I am writing an ocaml program. However, my=
 goal is to present an interface to libffi (or something like it) in terms =
of *Emily* idioms and primitives (Emily being my language) so that I can wr=
ite an Emily program. This means directly wrapping ocaml-ctypes probably wo=
n&#39;t work out well (the ocaml idioms ocaml-ctypes uses can&#39;t all be =
directly represented in my language, and they might come across as weird to=
 the language users who are probably not ocaml users).</div><div><br></div>=
<div>My initial thought was that what I probably wanted to do was try to pr=
esent an interface between the interpreter and interpreted code that closel=
y tracks the programming interface of libffi. Then I could write an in-lang=
uage library on top of this with a friendlier/more idiomatic interface. (Th=
e reason I believe I want the interpreter-interpreted interface to resemble=
 libffi is that I might someday switch from ocaml to another language, and =
libffi will probably be available in other contexts but ocaml-ctypes will n=
ot). Looking over the ctypes code it looked like a &quot;raw&quot; libffi-f=
lavored interface might be possible using ctypes-foreign-base/ctypes_ffi.ml=
i and the function_of_pointer interface, but it looks like this mli is pres=
ent in the code but not exposed in the opam package.</div><div><br></div><d=
iv>What would you recommend in this case?</div><div><br></div><div>Is there=
 a way to access ctypes-foreign-base after all? Is that a reasonable thing =
to attempt?</div><div><br></div><div>Is there a way to use ocaml-ctypes whi=
ch at least closely resembles a &quot;trap door&quot; to let a client provi=
de access to libffi directly?</div><div><br></div><div>Is there a library o=
ther than ocaml-ctypes which wraps libffi more directly?</div><div><br></di=
v><div>Am I meowing up the wrong tree entirely? :)</div><div><br></div><div=
>Any advice welcome, thanks.</div></div>

--001a1139720a61935305197fc925--

From yallop@gmail.com  Tue Jun 30 00:09:31 2015
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id F07EF3C0C1
 for <ctypes@lists.ocaml.org>; Tue, 30 Jun 2015 00:09:30 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1687995 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.215.46 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-la0-f46.google.com ([209.85.215.46]:35649)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1Z9iHZ-0006dg-qD (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 30 Jun 2015 00:16:09 +0100
Received: by lagh6 with SMTP id h6so71583612lag.2
 for <ctypes@lists.ocaml.org>; Mon, 29 Jun 2015 16:16:08 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=Lu2gSlqaKqIVeFIM43ysDQ6akVOEHFXbiX9WNqt1a4Q=;
 b=cxyfePip5stak9JoQyCJJFosoQlSBwfdsPtc6CPkDevi2Lf0zBZ642QcywVFh8YRBz
 +3HpKPrcnEUn6bXEblECX1J/tC4k9kx6UWv/didEUwuXe4GmRXpaxSlNM8fj+AYc/mFm
 WbAGtZDNJIM1feQpEjPMY3mKE90BzJtk1Eew910IceMbhaKavKKIpzpddRYO8YyWE+fw
 sTuCPtUKMNz7oj82sJ3UIHzW48GKsFtFyKJwBYs1N1km9rEtgWkKTeJOjFW6Mej4y4o1
 7FRV/q9VpAE821Tcn+P3peCO+2l7BhQxEdRNf8jtknZNtGDEPqqDsVlJcgZh2FdBE0dG
 C24Q==
MIME-Version: 1.0
X-Received: by 10.112.180.201 with SMTP id dq9mr17003559lbc.78.1435619768450; 
 Mon, 29 Jun 2015 16:16:08 -0700 (PDT)
Received: by 10.25.169.72 with HTTP; Mon, 29 Jun 2015 16:16:08 -0700 (PDT)
In-Reply-To: <CAJDLOY+9OjHtkGp8stmZhDT1dhj6KmtCfhNyNKDM8mORt+DvCA@mail.gmail.com>
References: <CAJDLOY+9OjHtkGp8stmZhDT1dhj6KmtCfhNyNKDM8mORt+DvCA@mail.gmail.com>
Date: Tue, 30 Jun 2015 00:16:08 +0100
Message-ID: <CAAxsn=FataxoOXh+haz1E3a6XXNVhjxiWw6O6wCsr+qM+=Lrkw@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Andi McClure <andi.m.mcclure@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Best practices for wrapping ocaml-ctypes?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 29 Jun 2015 23:09:31 -0000

Hi Andi,

Please excuse the slow response.

On 27 June 2015 at 14:25, Andi McClure <andi.m.mcclure@gmail.com> wrote:
> Hello, I have a project which is a programming language (
> http://emilylang.org/ ) and the current interpreter is implemented in ocaml.
> I want to add a C FFI, and I am looking at ocaml-ctypes, but I am having
> trouble figuring out how best to use the ocaml-ctypes library given my
> project's specific needs as a language.

Well, using ocaml-ctypes to build an FFI for another language is a bit
different from the usual use case of exposing a particular C library
to OCaml, so it'll be interesting to see how things turn out.

> Basically: ocaml-ctypes seems to take libFFI and recast its operations in
> terms of ocaml idioms and primitives. This looks great if I am writing an
> ocaml program. However, my goal is to present an interface to libffi (or
> something like it) in terms of *Emily* idioms and primitives (Emily being my
> language) so that I can write an Emily program. This means directly wrapping
> ocaml-ctypes probably won't work out well (the ocaml idioms ocaml-ctypes
> uses can't all be directly represented in my language, and they might come
> across as weird to the language users who are probably not ocaml users).
>
> My initial thought was that what I probably wanted to do was try to present
> an interface between the interpreter and interpreted code that closely
> tracks the programming interface of libffi. Then I could write an
> in-language library on top of this with a friendlier/more idiomatic
> interface. (The reason I believe I want the interpreter-interpreted
> interface to resemble libffi is that I might someday switch from ocaml to
> another language, and libffi will probably be available in other contexts
> but ocaml-ctypes will not). Looking over the ctypes code it looked like a
> "raw" libffi-flavored interface might be possible using
> ctypes-foreign-base/ctypes_ffi.mli and the function_of_pointer interface,
> but it looks like this mli is present in the code but not exposed in the
> opam package.

Right: that module is intended to be internal-only.  However, some of
the functionality is expressible via the public interface.  For
example, here are alternative implementations of function_of_pointer
and pointer_of_function using only functions that are currently
publicly exposed:

  let function_of_pointer ?name ~abi ~check_errno ~release_runtime_lock fn p =
    Ctypes.coerce (ptr void)
      (Foreign.funptr ?name ~abi ~check_errno
~runtime_lock:release_runtime_lock fn)
      p

  let pointer_of_function ~abi ~acquire_runtime_lock fn f =
    Ctypes.coerce (Foreign.funptr ~abi ~runtime_lock:acquire_runtime_lock fn)
      (ptr void)
      f

> What would you recommend in this case?

I can think of three approaches that are not obviously wrong, and it's
likely that there are others.

First, you might do what you've been considering already -- i.e. using
the low-level parts of ctypes as a basis for a more Emily-flavoured
libffi binding.  The two essential modules are probably
Ctypes_memory_stubs (src/ctypes/ctypes_memory_stubs.ml), which
provides an untyped API for accessing C-managed memory, and
Ctypes_ffi_stubs (src/ctypes-foreign-base/ctypes_ffi_stubs.ml), which
provides a fairly direct OCaml binding onto libffi.  Neither of these
modules is exposed directly, but it should be reasonably
straightforward to make them available by tweaking the Makefile to add
them to the appropriate '.public' list.

Second, you might find some way to massage the ctypes API into a form
that's more suitable for use in Emily.  For example, I can imagine the
type parameters causing problems if you want to use the type
representations (for int, float, etc.) in a more uniform way.  It
probably wouldn't be too much work to build an 'untyped' interface on
top of ctypes along the following lines

  module Ctypes_untyped :
  sig
    type typ
    val int : typ
    val float : typ
    val (@->) :  typ -> typ -> typ
    (* ... *)

This is just a guess, of course, and perhaps there are other OCaml
idioms that aren't so easy to factor out.

Finally, you might use ctypes to build a binding to libffi -- i.e.
just treat libffi like any other C library and describe its interface
using ctypes, ignoring the fact that ctypes uses libffi internally.
This approach isn't as absurd as it might sound at first, since recent
versions of ctypes make it possible to bind to C libraries by
generating C and OCaml code rather than by routing calls through
libffi, so you wouldn't necessarily end up using libffi twice.

Feel free to ask if you'd like more detail on any of the above!

Kind regards,

Jeremy.

From jan.doms@gmail.com  Tue Jul  7 09:50:52 2015
Return-Path: <jan.doms@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 22CC33C1D2
 for <ctypes@lists.ocaml.org>; Tue,  7 Jul 2015 09:50:52 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1689337 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.176 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (jan.doms[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f176.google.com ([209.85.212.176]:38871)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1ZCOhN-0007mO-lJ (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <jan.doms@gmail.com>); Tue, 07 Jul 2015 09:57:54 +0100
Received: by wibdq8 with SMTP id dq8so175989151wib.1
 for <ctypes@lists.ocaml.org>; Tue, 07 Jul 2015 01:57:52 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:date:message-id:subject:from:to:content-type
 :content-transfer-encoding;
 bh=IxVNRdIBSKXpDcbm+42hiAOGquTuvjqdVIi+1RN8evc=;
 b=0ofyIOhE3l0aeIntROSyEd5BU9kCaIfdUddWdnef8Q7ELoEjut3l5uz46SlB5qB9vU
 bClJa9cByTVo0JlVLDXMICGx1659kfIr71M8V+gsoC7p1gC1KadC+6cLYmqKbSqPIpuc
 iEqXI3mSzw3PS32/xEE4D361tajRwOKIBlCQf5dKkIzF6LJB3X7PFlMPnsLDHC9HqetN
 c9lm+S0l6NlXwljAqpDwqEvJxYZik3xLgp2z/XDqugMgDaizzLd860r7NuAClhfUvB6W
 4bkhrlWAM56ymBnGNqc0WF3RvMNGS+58YItLJ7H7OPO2jRhEu77qTab2y2rHLAfhgg8O
 k2Sw==
MIME-Version: 1.0
X-Received: by 10.180.92.40 with SMTP id cj8mr58679265wib.92.1436259472338;
 Tue, 07 Jul 2015 01:57:52 -0700 (PDT)
Received: by 10.194.13.195 with HTTP; Tue, 7 Jul 2015 01:57:52 -0700 (PDT)
Date: Tue, 7 Jul 2015 10:57:52 +0200
Message-ID: <CANdk5LZWQL8Sorb8ceQY-35LJaYPRKmjjXs7bQu8_C7URgdMqA@mail.gmail.com>
From: Jan Doms <jan.doms@gmail.com>
To: ctypes@lists.ocaml.org
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Subject: [ocaml-ctypes] proper way of wrapping syscalls concerning
	(check_)errno
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 07 Jul 2015 08:50:52 -0000

Hi,

The documentation mentions the following in regards to check_errno:

"The value ?check_errno, which defaults to false, indicates whether
Unix.Unix_error should be raised if the C function modifies errno.
Please note that a function that succeeds is allowed to change errno.
So use this option with caution. "

According to the pread manpage http://linux.die.net/man/2/pread errno
should be checked when the return value is -1.

According to wikipedia https://en.wikipedia.org/wiki/Errno.h
"Most functions indicate that they detected an error by returning a
special value, typically NULL for functions that return pointers, and
=E2=88=921 for functions that return integers."

So I was wondering: what is the proper way to wrap the pread syscall
with ctypes?

Would it make sense to replace the ~(check_errno : bool) argument with e.g.

type check_errno =3D
 | OnMinusOne (* raise based on errno if the return value is -1 *)
 | OnNullPointer (* raise based on errno if the return value is a null
pointer *)
 | WhenChanged (* current behaviour *)

Maybe I'm worrying for nothing, as probably the kernel doesn't change
errno when no error occured, right?

Thanks in advance,
Jan

From yallop@gmail.com  Thu Jul 16 23:57:12 2015
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-41.csi.cam.ac.uk (ppsw-41.csi.cam.ac.uk [131.111.8.141])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 87B923C0C3
 for <ctypes@lists.ocaml.org>; Thu, 16 Jul 2015 23:57:12 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1691145 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.217.178 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-lb0-f178.google.com ([209.85.217.178]:36046)
 by ppsw-41.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1ZFsCt-0000u1-SK (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Fri, 17 Jul 2015 00:04:48 +0100
Received: by lbbpo10 with SMTP id po10so52070652lbb.3
 for <ctypes@lists.ocaml.org>; Thu, 16 Jul 2015 16:04:47 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type:content-transfer-encoding;
 bh=MffTz1MHEEswqfb3DMgPa6OnfOjh8VxORX3CAqqKLhc=;
 b=Q4tx+uGrTFG/4RBV/IskeXeyj9twwQBQNY+4+11E9Ki3AoCsdoAwg4nd3DLtZ89RmC
 x5/flCVhHzNRySeJYDGJqyUoo7JIQ8uYiQ+8Ml0u9ytS04PadYqdrs6DCmjIdFmeox/k
 giURwuId8YhlgBpks9Xp5YTQpJw0xc6hj/7gvzL4mCUd0UGygptEiDCa1t2683MgzX8S
 0iz7icT3AZEoNgrXHNwY6j72x57i/z24SamYg2hg6Iitc9M21t2/GlABsFVf22U3lhO6
 Mpol/FYN6cpieNcwjjnSCVLTiR02KrAk4mSXngrldQXK/foDyw1ds1trGhFk2El0zcHf
 0msQ==
MIME-Version: 1.0
X-Received: by 10.152.23.38 with SMTP id j6mr11284137laf.47.1437087887096;
 Thu, 16 Jul 2015 16:04:47 -0700 (PDT)
Received: by 10.25.199.10 with HTTP; Thu, 16 Jul 2015 16:04:46 -0700 (PDT)
In-Reply-To: <CANdk5LZWQL8Sorb8ceQY-35LJaYPRKmjjXs7bQu8_C7URgdMqA@mail.gmail.com>
References: <CANdk5LZWQL8Sorb8ceQY-35LJaYPRKmjjXs7bQu8_C7URgdMqA@mail.gmail.com>
Date: Fri, 17 Jul 2015 00:04:46 +0100
Message-ID: <CAAxsn=FZ8D0ebZiCGU=-wH-Biiep7F4XR-f-7Fy2nVQ04vp0=w@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Jan Doms <jan.doms@gmail.com>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] proper way of wrapping syscalls concerning
	(check_)errno
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 16 Jul 2015 22:57:12 -0000

On 7 July 2015 at 09:57, Jan Doms <jan.doms@gmail.com> wrote:
> The documentation mentions the following in regards to check_errno:
>
> "The value ?check_errno, which defaults to false, indicates whether
> Unix.Unix_error should be raised if the C function modifies errno.
> Please note that a function that succeeds is allowed to change errno.
> So use this option with caution. "
>
> According to the pread manpage http://linux.die.net/man/2/pread errno
> should be checked when the return value is -1.
>
> According to wikipedia https://en.wikipedia.org/wiki/Errno.h
> "Most functions indicate that they detected an error by returning a
> special value, typically NULL for functions that return pointers, and
> =E2=88=921 for functions that return integers."
>
> So I was wondering: what is the proper way to wrap the pread syscall
> with ctypes?

Thanks for raising this.  The support for errno in ctypes isn't quite
right at present, and it's worth discussing how to improve it.

> Would it make sense to replace the ~(check_errno : bool) argument with e.=
g.
>
> type check_errno =3D
>  | OnMinusOne (* raise based on errno if the return value is -1 *)
>  | OnNullPointer (* raise based on errno if the return value is a null
> pointer *)
>  | WhenChanged (* current behaviour *)

This isn't a bad idea, but it's difficult to be exhaustive.  For
example, some mathematical functions return HUGE_VAL and set errno on
overflow errors, which isn't properly covered by these three cases.

One alternative approach is to make it possible to return both errno
and the function's return value to OCaml.  It should then be possible
to write reusable functions which correspond to the error handling
strategies in your check_errno type.

> Maybe I'm worrying for nothing, as probably the kernel doesn't change
> errno when no error occured, right?

In many cases that's true, but it's best not to rely on that if at all poss=
ible.

From jan.doms@gmail.com  Fri Jul 17 12:39:27 2015
Return-Path: <jan.doms@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-51.csi.cam.ac.uk (ppsw-51.csi.cam.ac.uk [131.111.8.151])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 1E8973C0B6
 for <ctypes@lists.ocaml.org>; Fri, 17 Jul 2015 12:39:27 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1691145 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.42 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (jan.doms[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wg0-f42.google.com ([74.125.82.42]:34418)
 by ppsw-51.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1ZG3ZL-00071F-XB (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <jan.doms@gmail.com>); Fri, 17 Jul 2015 12:12:44 +0100
Received: by wgkl9 with SMTP id l9so79535670wgk.1
 for <ctypes@lists.ocaml.org>; Fri, 17 Jul 2015 04:12:43 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type:content-transfer-encoding;
 bh=sDhazRsB4DUrzRMfTWHych6b6yWy5D/KEjOeiCLQ/n0=;
 b=wjQw9JBGiPEHdIdkFHFXN0MNerVb7DGgLUYPLu0O7o8lo1MOhiwNR2mNeIyUXn8arV
 XIbqD87PW1EJH2mxgIaawHkYrBZ4/ujOSygRj5APpz2V+8zRtUcUskWbiT04V+0qf2wS
 i/qIY36hoahMKk0nSfbFzrQTHvC9THGvUi72jgBkhf+7ifTyJWyEpo6DNhDvf+rjOPnX
 trSwr5Lj8zb9VQihbyEG7GrnVSH7Sv032PvL5dTZHIWEF7+9n2mrxSD5AKy4cXKiFNdu
 Xk9sH0l41zDfwyaXzna7CAUN2tAdCEfKsL+wCrG95IYvNNHJ6wRFnjHHtVfP8rnJ91eN
 XBAw==
MIME-Version: 1.0
X-Received: by 10.194.10.165 with SMTP id j5mr29197366wjb.147.1437125352509;
 Fri, 17 Jul 2015 02:29:12 -0700 (PDT)
Received: by 10.194.13.195 with HTTP; Fri, 17 Jul 2015 02:29:12 -0700 (PDT)
In-Reply-To: <CAAxsn=FZ8D0ebZiCGU=-wH-Biiep7F4XR-f-7Fy2nVQ04vp0=w@mail.gmail.com>
References: <CANdk5LZWQL8Sorb8ceQY-35LJaYPRKmjjXs7bQu8_C7URgdMqA@mail.gmail.com>
 <CAAxsn=FZ8D0ebZiCGU=-wH-Biiep7F4XR-f-7Fy2nVQ04vp0=w@mail.gmail.com>
Date: Fri, 17 Jul 2015 11:29:12 +0200
Message-ID: <CANdk5Lbg7Hb-xH-J+GCxQNy20sWwijAwm2J-9h9mJWiAAn94OQ@mail.gmail.com>
From: Jan Doms <jan.doms@gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] proper way of wrapping syscalls concerning
	(check_)errno
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 17 Jul 2015 11:39:27 -0000

On 17 July 2015 at 01:04, Jeremy Yallop <yallop@gmail.com> wrote:
> On 7 July 2015 at 09:57, Jan Doms <jan.doms@gmail.com> wrote:
>> The documentation mentions the following in regards to check_errno:
>>
>> "The value ?check_errno, which defaults to false, indicates whether
>> Unix.Unix_error should be raised if the C function modifies errno.
>> Please note that a function that succeeds is allowed to change errno.
>> So use this option with caution. "
>>
>> According to the pread manpage http://linux.die.net/man/2/pread errno
>> should be checked when the return value is -1.
>>
>> According to wikipedia https://en.wikipedia.org/wiki/Errno.h
>> "Most functions indicate that they detected an error by returning a
>> special value, typically NULL for functions that return pointers, and
>> =E2=88=921 for functions that return integers."
>>
>> So I was wondering: what is the proper way to wrap the pread syscall
>> with ctypes?
>
> Thanks for raising this.  The support for errno in ctypes isn't quite
> right at present, and it's worth discussing how to improve it.
>
>> Would it make sense to replace the ~(check_errno : bool) argument with e=
.g.
>>
>> type check_errno =3D
>>  | OnMinusOne (* raise based on errno if the return value is -1 *)
>>  | OnNullPointer (* raise based on errno if the return value is a null
>> pointer *)
>>  | WhenChanged (* current behaviour *)
>
> This isn't a bad idea, but it's difficult to be exhaustive.  For
> example, some mathematical functions return HUGE_VAL and set errno on
> overflow errors, which isn't properly covered by these three cases.
>
> One alternative approach is to make it possible to return both errno
> and the function's return value to OCaml.  It should then be possible
> to write reusable functions which correspond to the error handling
> strategies in your check_errno type.

It is indeed not exhaustive, and making it exhaustive in the way I
suggested is probably impossible / not a good way forward.

How about just having an accessor (and maybe also a setter) for errno?
If I'm not mistaken such operations can not currently be written with
ctypes and need a bit of C, right?

Once you have those it should be easy to implement the idea you had in
mind (returning both errno and the function return value).
One could then also implement the following functions in ocaml:
check_errno (* reads errno and raises appropriate exception if it's
different from 0 *)
returning_with_errno                  (* what you had in mind *)
returning_check_errno_changed (* behaviour like the current ~check_errno:tr=
ue *)
returning_check_errno_on_minus_one
returning_check_errno_on_null
returning_check_errno_on_huge_val
...


>
>> Maybe I'm worrying for nothing, as probably the kernel doesn't change
>> errno when no error occured, right?
>
> In many cases that's true, but it's best not to rely on that if at all po=
ssible.

From yallop@gmail.com  Fri Jul 17 14:27:49 2015
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 246923C0B6
 for <ctypes@lists.ocaml.org>; Fri, 17 Jul 2015 14:27:49 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1691335 
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.215.48 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-la0-f48.google.com ([209.85.215.48]:33108)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1ZG5nS-0002jR-kt (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Fri, 17 Jul 2015 14:35:26 +0100
Received: by laem6 with SMTP id m6so61278663lae.0
 for <ctypes@lists.ocaml.org>; Fri, 17 Jul 2015 06:35:25 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=R80q5DjcBknWjI4xrxSBdkxoNeKX4Ic0qzdn1DM+xJQ=;
 b=cwSIR+aKktnu27ifG9hJ8kg1jIBM4LX20KoB1EafbzXRxZZKTxLuhmN+u3bwU4zf2G
 xCjL+U/Dq9OLhUOyakwmUhgQ0oZBW+emgIb11HTDry7RFVMnfihjSYE32MThX1N0szJN
 fTZ+ZQGo9hWfcQgYXfgwcbxHVaQSSoqldqGPd6xvsSEOiJOAQ0fzNbklz0aUzyZo2vrh
 WoYY4WBJBuTS1DE93IDoDeZhwafn19Hi3sNS48Ho9xPvgGRtHPMZo4Z6KQ1My1t9tQZr
 YBDXlzos6FV4mxPibC8yVPXbRl+61dFAEExrb+FYabt3x24eT1O2cknpI39yRMlRcDrB
 bH7g==
MIME-Version: 1.0
X-Received: by 10.112.85.204 with SMTP id j12mr14220718lbz.47.1437140125880;
 Fri, 17 Jul 2015 06:35:25 -0700 (PDT)
Received: by 10.25.199.10 with HTTP; Fri, 17 Jul 2015 06:35:25 -0700 (PDT)
In-Reply-To: <CANdk5Lbg7Hb-xH-J+GCxQNy20sWwijAwm2J-9h9mJWiAAn94OQ@mail.gmail.com>
References: <CANdk5LZWQL8Sorb8ceQY-35LJaYPRKmjjXs7bQu8_C7URgdMqA@mail.gmail.com>
 <CAAxsn=FZ8D0ebZiCGU=-wH-Biiep7F4XR-f-7Fy2nVQ04vp0=w@mail.gmail.com>
 <CANdk5Lbg7Hb-xH-J+GCxQNy20sWwijAwm2J-9h9mJWiAAn94OQ@mail.gmail.com>
Date: Fri, 17 Jul 2015 14:35:25 +0100
Message-ID: <CAAxsn=GY+t=u0pRgPmts-BQC=tuCYomkgTikSExDroNufFzG+g@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Jan Doms <jan.doms@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] proper way of wrapping syscalls concerning
	(check_)errno
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 17 Jul 2015 13:27:49 -0000

On 17 July 2015 at 10:29, Jan Doms <jan.doms@gmail.com> wrote:
> How about just having an accessor (and maybe also a setter) for errno?
> If I'm not mistaken such operations can not currently be written with
> ctypes and need a bit of C, right?

Right.  It can *almost* be done solely in ctypes, like this:

   let errno = foreign_value "errno" int

except that the C standard leaves the exact definition of errno rather
unspecified.  For example, errno can be defined like this

   extern int errno;

or like this

   #define errno (*__internal_errno())

and the second one won't work with the above ctypes definition.
However, it's not difficult to write a couple of tiny wrappers to set
and retrieve errno:

   void set_errno(int e) { errno = e; }
   int get_errno(void) { return errno; }

together with ctypes bindings:

   let set_errno = foreign "set_errno" (int @-> returning void)
   let get_errno = foreign "get_errno" (void @-> returning int)

Some care might also be needed to ensure that nothing can change errno
between a call to a ctypes-bound function and the subsequent call to
get_errno.

From andi.m.mcclure@gmail.com  Mon Aug 10 05:56:08 2015
Return-Path: <andi.m.mcclure@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id DCFFD3C18E
 for <ctypes@lists.ocaml.org>; Mon, 10 Aug 2015 05:56:08 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1694859 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.160.181 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (andi.m.mcclure[at]gmail.com)
 *  0.0 HTML_MESSAGE BODY: HTML included in message
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-yk0-f181.google.com ([209.85.160.181]:33254)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1ZOfGg-0002XH-qE (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <andi.m.mcclure@gmail.com>); Mon, 10 Aug 2015 06:05:06 +0100
Received: by ykaz130 with SMTP id z130so23610580yka.0
 for <ctypes@lists.ocaml.org>; Sun, 09 Aug 2015 22:05:00 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=7aTCxrhH7gpfqthXK8qR4NSS6AsCj+1HPsZu8+3DGsE=;
 b=oD5FPuM6dLX9sD+ZI5fmxzGvy8kXtGftjjjlIJ//L9GwyRaZlFQohoIITKexZHj74T
 Xd3Tp/29atRo8P6deWD9Pm53Vbes/Rlw4oawXB4pbdlEamdapTHd9lKCnNyqhebltyPn
 CdS8p9f9slchxR3+mbttVEBQVo9BLyUGYUZtan1GVRshqD4p2SgNo4hITQgyp5b1kPhJ
 yvUO5jq8zu5E/+cE2Z5TsrV/IH+vYn+DgkFOssH1zzFsj2Zdju8XAlhx/KEYDTe1/LLy
 bxfnhqTLhCB1p8HkOxWI7IQCAGrHejsG1E8TjxOMhtiagPfzmGhlRXZuDWn5SrEbsuqm
 xp9A==
MIME-Version: 1.0
X-Received: by 10.170.195.141 with SMTP id m135mr19326992yke.49.1439183100505; 
 Sun, 09 Aug 2015 22:05:00 -0700 (PDT)
Received: by 10.129.88.70 with HTTP; Sun, 9 Aug 2015 22:05:00 -0700 (PDT)
In-Reply-To: <CAAxsn=FataxoOXh+haz1E3a6XXNVhjxiWw6O6wCsr+qM+=Lrkw@mail.gmail.com>
References: <CAJDLOY+9OjHtkGp8stmZhDT1dhj6KmtCfhNyNKDM8mORt+DvCA@mail.gmail.com>
 <CAAxsn=FataxoOXh+haz1E3a6XXNVhjxiWw6O6wCsr+qM+=Lrkw@mail.gmail.com>
Date: Sun, 9 Aug 2015 22:05:00 -0700
Message-ID: <CAJDLOYK=QaFYMLc_DJOjiDOW2G8tMvyA9GRuuOjpVbb8Z001Sw@mail.gmail.com>
From: Andi McClure <andi.m.mcclure@gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Content-Type: multipart/alternative; boundary=001a1139bad278f3a4051ceded99
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Best practices for wrapping ocaml-ctypes?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 10 Aug 2015 04:56:08 -0000

--001a1139bad278f3a4051ceded99
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Hello=E2=80=94

Thanks Jeremy for this response. After some time I've been able to come
back and try these things out. I do have some new questions :) I might
write this out a little more verbosely than I need to just to be certain
I'm speaking precisely.

I have a test program with a c function

    int increment3(int x) { return x + 3; }

On the OCaml side, this is accessed as

    let increment3 =3D foreign "increment3" (int @-> returning int) in
    increment3 3

And that works and I'm happy with it. Actually, after playing with the
foreign / "@->" interface, I'm finding it seems to be about as good as I
need, and I'm trying to figure out if I can use that instead of having to
work with the low-level interfaces (which as discussed before are not
necessarily directly exposed at this time anyway).

Anyway, I'm trying to set up my OCaml-implemented interpreter, so that this
line of code in Emily is equivalent to the "let increment3" above:

    (* Just pretend .int is shorthand for "int" *)
    increment3 =3D package.emily.ffi.c.function [ name =3D .increment3; arg=
s =3D
[ .int, ]; return =3D .int ]

The syntax could use some work :P But never mind that. I've so far got it
where when you invoke ffi.c.function, the function specification you
provided gets piped into OCaml and turned into this OCaml data structure:

    type foreignSpec =3D { name : string; args : string list; returning:
string; }

This seems like a straightforward representation of the information @->
encodes; it seems something parsing a header would need to represent the
data the same way.

My naive impulse is to imagine that this is straightforward, and I need to
just build up a typ variable by repeatedly chaining @->, something like:

    let typeConvert =3D function "void" -> void | "int" -> int | _ ->
failwith "??"
    let functionFrom spec =3D
        foreign spec.name ( List.fold_right
            ( @-> )
            ( List.map typeConvert wrap.args )
            ( returning ( typeConvert wrap.returning ) ) )

If I start trying to implement this, OCaml immediately objects that even
just typeConvert is impossible to compile:

    Error: This expression has type int Ctypes.typ =3D int Ctypes_static.ty=
p
           but an expression was expected of type
             unit Ctypes.typ =3D unit Ctypes_static.typ
           Type int is not compatible with type unit

This seems to make immediate sense: I don't fully understand what the type
of the thing @-> returns is (Merlin says it's '_a -> '_b -> '_c ...) but it
seems like whatever @-> may be doing, in all cases @-> or foreign actually
gets used, the type of that @->'s return must be something known at the
call site at compile time-- because when OCaml code invokes "foreign" OCaml
will need to statically compile a statically typed result. So I can't
possibly store one of the typs in a variable which could contain sometimes
"int" and sometimes "void". I'm assuming this works something like C++
template arguments, which are something I have a little more familiarity
with than OCaml type variables.

It seems like, if I really understood what @-> is doing, I might be able to
maybe make this work anyway. In Emily I currently have only one "type", a
big variant which is modeled in OCaml like:

type value =3D Null | True | FloatValue of float | StringValue of string |
AtomValue of string
    | BuiltinFunctionValue of (value -> value)

I eventually intend for the ffi.c.function implementation to return a
BuiltinFunctionValue that takes an argument; either unpacks it from a
"value" into the correct tagged type or throws an error; then packs the
return back into an appropriately tagged "value". The "value" pack and
unpack functions will know their types statically, so maybe in principle
they can work in participation with whatever type-chaining trick @-> does
and still produce well-typed code. But it's very unclear to me how to get
started with that, or whether it will ultimately work.

Do you have any thoughts on this? Is this approach (engaging foreign / @->
directly) one which can eventually work, or should I back off and attempt
one of the lower-level approaches mentioned in your previous email? Your
previous email proposed building out a Ctypes_untyped with a slightly
different interface, but it was not clear to me what implementation of that
would look like.

Thanks!

 - Andi

On Mon, Jun 29, 2015 at 4:16 PM, Jeremy Yallop <yallop@gmail.com> wrote:

> Hi Andi,
>
> Please excuse the slow response.
>
> On 27 June 2015 at 14:25, Andi McClure <andi.m.mcclure@gmail.com> wrote:
> > Hello, I have a project which is a programming language (
> > http://emilylang.org/ ) and the current interpreter is implemented in
> ocaml.
> > I want to add a C FFI, and I am looking at ocaml-ctypes, but I am havin=
g
> > trouble figuring out how best to use the ocaml-ctypes library given my
> > project's specific needs as a language.
>
> Well, using ocaml-ctypes to build an FFI for another language is a bit
> different from the usual use case of exposing a particular C library
> to OCaml, so it'll be interesting to see how things turn out.
>
> > Basically: ocaml-ctypes seems to take libFFI and recast its operations =
in
> > terms of ocaml idioms and primitives. This looks great if I am writing =
an
> > ocaml program. However, my goal is to present an interface to libffi (o=
r
> > something like it) in terms of *Emily* idioms and primitives (Emily
> being my
> > language) so that I can write an Emily program. This means directly
> wrapping
> > ocaml-ctypes probably won't work out well (the ocaml idioms ocaml-ctype=
s
> > uses can't all be directly represented in my language, and they might
> come
> > across as weird to the language users who are probably not ocaml users)=
.
> >
> > My initial thought was that what I probably wanted to do was try to
> present
> > an interface between the interpreter and interpreted code that closely
> > tracks the programming interface of libffi. Then I could write an
> > in-language library on top of this with a friendlier/more idiomatic
> > interface. (The reason I believe I want the interpreter-interpreted
> > interface to resemble libffi is that I might someday switch from ocaml =
to
> > another language, and libffi will probably be available in other contex=
ts
> > but ocaml-ctypes will not). Looking over the ctypes code it looked like=
 a
> > "raw" libffi-flavored interface might be possible using
> > ctypes-foreign-base/ctypes_ffi.mli and the function_of_pointer interfac=
e,
> > but it looks like this mli is present in the code but not exposed in th=
e
> > opam package.
>
> Right: that module is intended to be internal-only.  However, some of
> the functionality is expressible via the public interface.  For
> example, here are alternative implementations of function_of_pointer
> and pointer_of_function using only functions that are currently
> publicly exposed:
>
>   let function_of_pointer ?name ~abi ~check_errno ~release_runtime_lock f=
n
> p =3D
>     Ctypes.coerce (ptr void)
>       (Foreign.funptr ?name ~abi ~check_errno
> ~runtime_lock:release_runtime_lock fn)
>       p
>
>   let pointer_of_function ~abi ~acquire_runtime_lock fn f =3D
>     Ctypes.coerce (Foreign.funptr ~abi ~runtime_lock:acquire_runtime_lock
> fn)
>       (ptr void)
>       f
>
> > What would you recommend in this case?
>
> I can think of three approaches that are not obviously wrong, and it's
> likely that there are others.
>
> First, you might do what you've been considering already -- i.e. using
> the low-level parts of ctypes as a basis for a more Emily-flavoured
> libffi binding.  The two essential modules are probably
> Ctypes_memory_stubs (src/ctypes/ctypes_memory_stubs.ml), which
> provides an untyped API for accessing C-managed memory, and
> Ctypes_ffi_stubs (src/ctypes-foreign-base/ctypes_ffi_stubs.ml), which
> provides a fairly direct OCaml binding onto libffi.  Neither of these
> modules is exposed directly, but it should be reasonably
> straightforward to make them available by tweaking the Makefile to add
> them to the appropriate '.public' list.
>
> Second, you might find some way to massage the ctypes API into a form
> that's more suitable for use in Emily.  For example, I can imagine the
> type parameters causing problems if you want to use the type
> representations (for int, float, etc.) in a more uniform way.  It
> probably wouldn't be too much work to build an 'untyped' interface on
> top of ctypes along the following lines
>
>   module Ctypes_untyped :
>   sig
>     type typ
>     val int : typ
>     val float : typ
>     val (@->) :  typ -> typ -> typ
>     (* ... *)
>
> This is just a guess, of course, and perhaps there are other OCaml
> idioms that aren't so easy to factor out.
>
> Finally, you might use ctypes to build a binding to libffi -- i.e.
> just treat libffi like any other C library and describe its interface
> using ctypes, ignoring the fact that ctypes uses libffi internally.
> This approach isn't as absurd as it might sound at first, since recent
> versions of ctypes make it possible to bind to C libraries by
> generating C and OCaml code rather than by routing calls through
> libffi, so you wouldn't necessarily end up using libffi twice.
>
> Feel free to ask if you'd like more detail on any of the above!
>
> Kind regards,
>
> Jeremy.
>

--001a1139bad278f3a4051ceded99
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Hello=E2=80=94<div><br></div><div>Thanks Jeremy for this r=
esponse. After some time I&#39;ve been able to come back and try these thin=
gs out. I do have some new questions :) I might write this out a little mor=
e verbosely than I need to just to be certain I&#39;m speaking precisely.</=
div><div><br></div><div>I have a test program with a c function</div><div><=
br></div><div><div>=C2=A0 =C2=A0 int increment3(int x) { return x + 3; }</d=
iv></div><div><br></div><div>On the OCaml side, this is accessed as</div><d=
iv><br></div><div>=C2=A0 =C2=A0 let increment3 =3D foreign &quot;increment3=
&quot; (int @-&gt; returning int) in<br></div><div>=C2=A0 =C2=A0 increment3=
 3</div><div><br></div><div>And that works and I&#39;m happy with it. Actua=
lly, after playing with the foreign / &quot;@-&gt;&quot; interface, I&#39;m=
 finding it seems to be about as good as I need, and I&#39;m trying to figu=
re out if I can use that instead of having to work with the low-level inter=
faces (which as discussed before are not necessarily directly exposed at th=
is time anyway).</div><div><br></div><div>Anyway, I&#39;m trying to set up =
my OCaml-implemented interpreter, so that this line of code in Emily is equ=
ivalent to the &quot;let increment3&quot; above:</div><div><br></div><div>=
=C2=A0 =C2=A0 (* Just pretend .int is shorthand for &quot;int&quot; *)</div=
><div>=C2=A0 =C2=A0 increment3 =3D package.emily.ffi.c.function [ name =3D =
.increment3; args =3D [ .int, ]; return =3D .int ]<br></div><div><br></div>=
<div>The syntax could use some work :P But never mind that. I&#39;ve so far=
 got it where when you invoke ffi.c.function, the function specification yo=
u provided gets piped into OCaml and turned into this OCaml data structure:=
</div><div><br></div><div><div>=C2=A0 =C2=A0 type foreignSpec =3D { name : =
string; args : string list; returning: string; }</div></div><div><br></div>=
<div>This seems like a straightforward representation of the information @-=
&gt; encodes; it seems something parsing a header would need to represent t=
he data the same way.</div><div><br></div><div>My naive impulse is to imagi=
ne that this is straightforward, and I need to just build up a typ variable=
 by repeatedly chaining @-&gt;, something like:</div><div><br></div><div>=
=C2=A0 =C2=A0 let typeConvert =3D function &quot;void&quot; -&gt; void | &q=
uot;int&quot; -&gt; int | _ -&gt; failwith &quot;??&quot;<br></div><div>=C2=
=A0 =C2=A0=C2=A0let functionFrom spec =3D</div><div>=C2=A0 =C2=A0=C2=A0=C2=
=A0 =C2=A0 foreign <a href=3D"http://spec.name">spec.name</a> ( List.fold_r=
ight</div><div>=C2=A0 =C2=A0=C2=A0=C2=A0 =C2=A0 =C2=A0 =C2=A0 ( @-&gt; )</d=
iv><div>=C2=A0 =C2=A0=C2=A0=C2=A0 =C2=A0=C2=A0=C2=A0 =C2=A0 ( List.map type=
Convert wrap.args )</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0=C2=A0=C2=A0 =C2=
=A0=C2=A0( returning ( typeConvert wrap.returning ) ) )</div><div><br></div=
><div>If I start trying to implement this, OCaml immediately objects that e=
ven just typeConvert is impossible to compile:</div><div><br></div><div><di=
v>=C2=A0 =C2=A0 Error: This expression has type int Ctypes.typ =3D int Ctyp=
es_static.typ</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0but an exp=
ression was expected of type</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
=C2=A0 =C2=A0unit Ctypes.typ =3D unit Ctypes_static.typ</div><div>=C2=A0 =
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Type int is not compatible with type unit=
=C2=A0</div></div><div><br></div><div>This seems to make immediate sense: I=
 don&#39;t fully understand what the type of the thing @-&gt; returns is (M=
erlin says it&#39;s=C2=A0&#39;_a -&gt; &#39;_b -&gt; &#39;_c ...) but it se=
ems like whatever @-&gt; may be doing, in all cases @-&gt; or foreign actua=
lly gets used, the type of that @-&gt;&#39;s return must be something known=
 at the call site at compile time-- because when OCaml code invokes &quot;f=
oreign&quot; OCaml will need to statically compile a statically typed resul=
t. So I can&#39;t possibly store one of the typs in a variable which could =
contain sometimes &quot;int&quot; and sometimes &quot;void&quot;. I&#39;m a=
ssuming this works something like C++ template arguments, which are somethi=
ng I have a little more familiarity with than OCaml type variables.</div><d=
iv><br></div><div>It seems like, if I really understood what @-&gt; is doin=
g, I might be able to maybe make this work anyway. In Emily I currently hav=
e only one &quot;type&quot;, a big variant which is modeled in OCaml like:<=
/div><div><br></div><div><div>type value =3D Null | True | FloatValue of fl=
oat | StringValue of string | AtomValue of string</div><div>=C2=A0 =C2=A0 |=
 BuiltinFunctionValue of (value -&gt; value)</div></div><div><br></div><div=
>I eventually intend for the ffi.c.function implementation to return a Buil=
tinFunctionValue that takes an argument; either unpacks it from a &quot;val=
ue&quot; into the correct tagged type or throws an error; then packs the re=
turn back into an appropriately tagged &quot;value&quot;. The &quot;value&q=
uot; pack and unpack functions will know their types statically, so maybe i=
n principle they can work in participation with whatever type-chaining tric=
k @-&gt; does and still produce well-typed code. But it&#39;s very unclear =
to me how to get started with that, or whether it will ultimately work.</di=
v><div><br></div><div>Do you have any thoughts on this? Is this approach (e=
ngaging foreign / @-&gt; directly) one which can eventually work, or should=
 I back off and attempt one of the lower-level approaches mentioned in your=
 previous email? Your previous email proposed building out a=C2=A0<span sty=
le=3D"font-family:arial,sans-serif;font-size:12.8000001907349px">Ctypes_unt=
yped with a slightly different interface, but it was not clear to me what i=
mplementation of that would look like.</span></div><div><span style=3D"font=
-family:arial,sans-serif;font-size:12.8000001907349px"><br></span></div><di=
v><span style=3D"font-family:arial,sans-serif;font-size:12.8000001907349px"=
>Thanks!</span></div><div><span style=3D"font-family:arial,sans-serif;font-=
size:12.8000001907349px"><br></span></div><div><span style=3D"font-family:a=
rial,sans-serif;font-size:12.8000001907349px">=C2=A0- Andi</span></div></di=
v><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">On Mon, Jun 29,=
 2015 at 4:16 PM, Jeremy Yallop <span dir=3D"ltr">&lt;<a href=3D"mailto:yal=
lop@gmail.com" target=3D"_blank">yallop@gmail.com</a>&gt;</span> wrote:<br>=
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">Hi Andi,<br>
<br>
Please excuse the slow response.<br>
<span class=3D""><br>
On 27 June 2015 at 14:25, Andi McClure &lt;<a href=3D"mailto:andi.m.mcclure=
@gmail.com">andi.m.mcclure@gmail.com</a>&gt; wrote:<br>
&gt; Hello, I have a project which is a programming language (<br>
&gt; <a href=3D"http://emilylang.org/" rel=3D"noreferrer" target=3D"_blank"=
>http://emilylang.org/</a> ) and the current interpreter is implemented in =
ocaml.<br>
&gt; I want to add a C FFI, and I am looking at ocaml-ctypes, but I am havi=
ng<br>
&gt; trouble figuring out how best to use the ocaml-ctypes library given my=
<br>
&gt; project&#39;s specific needs as a language.<br>
<br>
</span>Well, using ocaml-ctypes to build an FFI for another language is a b=
it<br>
different from the usual use case of exposing a particular C library<br>
to OCaml, so it&#39;ll be interesting to see how things turn out.<br>
<span class=3D""><br>
&gt; Basically: ocaml-ctypes seems to take libFFI and recast its operations=
 in<br>
&gt; terms of ocaml idioms and primitives. This looks great if I am writing=
 an<br>
&gt; ocaml program. However, my goal is to present an interface to libffi (=
or<br>
&gt; something like it) in terms of *Emily* idioms and primitives (Emily be=
ing my<br>
&gt; language) so that I can write an Emily program. This means directly wr=
apping<br>
&gt; ocaml-ctypes probably won&#39;t work out well (the ocaml idioms ocaml-=
ctypes<br>
&gt; uses can&#39;t all be directly represented in my language, and they mi=
ght come<br>
&gt; across as weird to the language users who are probably not ocaml users=
).<br>
&gt;<br>
&gt; My initial thought was that what I probably wanted to do was try to pr=
esent<br>
&gt; an interface between the interpreter and interpreted code that closely=
<br>
&gt; tracks the programming interface of libffi. Then I could write an<br>
&gt; in-language library on top of this with a friendlier/more idiomatic<br=
>
&gt; interface. (The reason I believe I want the interpreter-interpreted<br=
>
&gt; interface to resemble libffi is that I might someday switch from ocaml=
 to<br>
&gt; another language, and libffi will probably be available in other conte=
xts<br>
&gt; but ocaml-ctypes will not). Looking over the ctypes code it looked lik=
e a<br>
&gt; &quot;raw&quot; libffi-flavored interface might be possible using<br>
&gt; ctypes-foreign-base/ctypes_ffi.mli and the function_of_pointer interfa=
ce,<br>
&gt; but it looks like this mli is present in the code but not exposed in t=
he<br>
&gt; opam package.<br>
<br>
</span>Right: that module is intended to be internal-only.=C2=A0 However, s=
ome of<br>
the functionality is expressible via the public interface.=C2=A0 For<br>
example, here are alternative implementations of function_of_pointer<br>
and pointer_of_function using only functions that are currently<br>
publicly exposed:<br>
<br>
=C2=A0 let function_of_pointer ?name ~abi ~check_errno ~release_runtime_loc=
k fn p =3D<br>
=C2=A0 =C2=A0 Ctypes.coerce (ptr void)<br>
=C2=A0 =C2=A0 =C2=A0 (Foreign.funptr ?name ~abi ~check_errno<br>
~runtime_lock:release_runtime_lock fn)<br>
=C2=A0 =C2=A0 =C2=A0 p<br>
<br>
=C2=A0 let pointer_of_function ~abi ~acquire_runtime_lock fn f =3D<br>
=C2=A0 =C2=A0 Ctypes.coerce (Foreign.funptr ~abi ~runtime_lock:acquire_runt=
ime_lock fn)<br>
=C2=A0 =C2=A0 =C2=A0 (ptr void)<br>
=C2=A0 =C2=A0 =C2=A0 f<br>
<span class=3D""><br>
&gt; What would you recommend in this case?<br>
<br>
</span>I can think of three approaches that are not obviously wrong, and it=
&#39;s<br>
likely that there are others.<br>
<br>
First, you might do what you&#39;ve been considering already -- i.e. using<=
br>
the low-level parts of ctypes as a basis for a more Emily-flavoured<br>
libffi binding.=C2=A0 The two essential modules are probably<br>
Ctypes_memory_stubs (src/ctypes/<a href=3D"http://ctypes_memory_stubs.ml" r=
el=3D"noreferrer" target=3D"_blank">ctypes_memory_stubs.ml</a>), which<br>
provides an untyped API for accessing C-managed memory, and<br>
Ctypes_ffi_stubs (src/ctypes-foreign-base/<a href=3D"http://ctypes_ffi_stub=
s.ml" rel=3D"noreferrer" target=3D"_blank">ctypes_ffi_stubs.ml</a>), which<=
br>
provides a fairly direct OCaml binding onto libffi.=C2=A0 Neither of these<=
br>
modules is exposed directly, but it should be reasonably<br>
straightforward to make them available by tweaking the Makefile to add<br>
them to the appropriate &#39;.public&#39; list.<br>
<br>
Second, you might find some way to massage the ctypes API into a form<br>
that&#39;s more suitable for use in Emily.=C2=A0 For example, I can imagine=
 the<br>
type parameters causing problems if you want to use the type<br>
representations (for int, float, etc.) in a more uniform way.=C2=A0 It<br>
probably wouldn&#39;t be too much work to build an &#39;untyped&#39; interf=
ace on<br>
top of ctypes along the following lines<br>
<br>
=C2=A0 module Ctypes_untyped :<br>
=C2=A0 sig<br>
=C2=A0 =C2=A0 type typ<br>
=C2=A0 =C2=A0 val int : typ<br>
=C2=A0 =C2=A0 val float : typ<br>
=C2=A0 =C2=A0 val (@-&gt;) :=C2=A0 typ -&gt; typ -&gt; typ<br>
=C2=A0 =C2=A0 (* ... *)<br>
<br>
This is just a guess, of course, and perhaps there are other OCaml<br>
idioms that aren&#39;t so easy to factor out.<br>
<br>
Finally, you might use ctypes to build a binding to libffi -- i.e.<br>
just treat libffi like any other C library and describe its interface<br>
using ctypes, ignoring the fact that ctypes uses libffi internally.<br>
This approach isn&#39;t as absurd as it might sound at first, since recent<=
br>
versions of ctypes make it possible to bind to C libraries by<br>
generating C and OCaml code rather than by routing calls through<br>
libffi, so you wouldn&#39;t necessarily end up using libffi twice.<br>
<br>
Feel free to ask if you&#39;d like more detail on any of the above!<br>
<br>
Kind regards,<br>
<br>
Jeremy.<br>
</blockquote></div><br></div>

--001a1139bad278f3a4051ceded99--

From yallop@gmail.com  Tue Aug 11 10:32:28 2015
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 3BB413C0EB
 for <ctypes@lists.ocaml.org>; Tue, 11 Aug 2015 10:32:28 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1694991 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.215.47 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-la0-f47.google.com ([209.85.215.47]:35957)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1ZP63l-0004Gc-m0 (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 11 Aug 2015 10:41:30 +0100
Received: by lagz9 with SMTP id z9so67762147lag.3
 for <ctypes@lists.ocaml.org>; Tue, 11 Aug 2015 02:41:29 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=P0/0P8kwStIio3Cctvu84RhMWYkH1m5Q6nkWMlrCEI0=;
 b=QsB3SELzOBU0MFwJdJMA9h0+uyomfspBfGdVvPZBl/3KCj6B38ItkkiRokikFeKb/e
 pmlvwvtw7x/WeQHSTuP4jdEKCI9N3lUkHRzKDrVKchuHNeMBdrZ/x4X8xR/JjRto53ne
 1YnMrIcC8anWaWa+iCe6T2GsmJDdVmYpLI5mKXNDYotZHVxTGUgxKPS01fgUce6XBKxe
 hZELSJpLaQeSH6SLQgpvdCri+a0VPsOqB8Ix+994/kGNNEwCpy8F3rp93un4XVqvbZDT
 6e/swbe2PNzf8WMmKfFXsPRoWpKlbNnGQ+vtW36AcLXjpUlbNy3sit/XmimGaGcARtFK
 CP2Q==
MIME-Version: 1.0
X-Received: by 10.112.198.100 with SMTP id jb4mr24900662lbc.97.1439286089330; 
 Tue, 11 Aug 2015 02:41:29 -0700 (PDT)
Received: by 10.25.165.145 with HTTP; Tue, 11 Aug 2015 02:41:28 -0700 (PDT)
In-Reply-To: <CAJDLOYK=QaFYMLc_DJOjiDOW2G8tMvyA9GRuuOjpVbb8Z001Sw@mail.gmail.com>
References: <CAJDLOY+9OjHtkGp8stmZhDT1dhj6KmtCfhNyNKDM8mORt+DvCA@mail.gmail.com>
 <CAAxsn=FataxoOXh+haz1E3a6XXNVhjxiWw6O6wCsr+qM+=Lrkw@mail.gmail.com>
 <CAJDLOYK=QaFYMLc_DJOjiDOW2G8tMvyA9GRuuOjpVbb8Z001Sw@mail.gmail.com>
Date: Tue, 11 Aug 2015 10:41:28 +0100
Message-ID: <CAAxsn=Gp+XoPvhhErM3HYx3q-vj3KMibHg+ZQ6_Tkv+-iTAt5w@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Andi McClure <andi.m.mcclure@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Best practices for wrapping ocaml-ctypes?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 11 Aug 2015 09:32:28 -0000

On 10/08/2015, Andi McClure <andi.m.mcclure@gmail.com> wrote:
> The syntax could use some work :P But never mind that. I've so far got it
> where when you invoke ffi.c.function, the function specification you
> provided gets piped into OCaml and turned into this OCaml data structure:
>
>     type foreignSpec = { name : string; args : string list; returning:
> string; }
>
> This seems like a straightforward representation of the information @->
> encodes; it seems something parsing a header would need to represent the
> data the same way.
>
> My naive impulse is to imagine that this is straightforward, and I need to
> just build up a typ variable by repeatedly chaining @->, something like:
>
>     let typeConvert = function "void" -> void | "int" -> int | _ ->
> failwith "??"

Right: it should be possible to do things like that once you've dealt
with the typing problem you describe.

The easiest approach to dealing with the fact that 'int', 'void', etc.
have different types is to use an existential type.  Existential types
in OCaml are a sort of variant, but defined with a different syntax;
instead of writing something like this:

   type t = A of x
          | B of y

you give the type signature for each constructor, like this:

   type t = A : x -> t
          | B : y -> t

By itself that doesn't give you any extra power, and you can actually
write any variant type definition this way.  The distinctive feature
of existential types is that you can mention type variables on the
right of the '=' that don't appear in the type parameters on the left.
Here's an example:

   type ty = Ty : 'a Ctypes.typ -> ty

As the type signature says, 'Ty' takes a value of type 'a Ctypes.typ'
for any type 'a' and builds a value of type 'ty'.  You can therefore
use 'Ty' to wrap Ctypes.typ values of different types up as 'ty'
values.  For example, you can build a list of typs:

   # [Ty void; Ty int];;
   - : ty list = [Ty void; Ty int]

and you can wrap the variously-typed results of your 'typeConvert'
function so that they all have the same type 'ty':

   let typeConvert = function
       "void" -> Ty void
     | "int" -> Ty int
     | _ -> failwith "??"

The same difficulty arises with 'Ctypes.fn' and your 'functionFrom'
definition, which needs to build function type descriptions of all
sorts of different types.  Here's a second existential type which
wraps 'Ctypes.fn':

   type fn = Fn : ('a -> 'b) Ctypes.fn -> fn

This time the type signature says that 'Fn' takes a value of type '(a
-> b) Ctypes.fn' for any types 'a' and 'b' and builds a value of type
'fn'.  It should be possible to build something like 'functionFrom'
that wraps and unwraps intermediate values using 'Ty' and 'Fn' to deal
with the immediate typing problems (leaving the interesting question
of how to turn the function returned by 'Foreign.foreign' into
something that can be called from your interpreter).

I hope that helps a bit.

Kind regards,

Jeremy.

From andi.m.mcclure@gmail.com  Fri Aug 14 22:49:15 2015
Return-Path: <andi.m.mcclure@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-41.csi.cam.ac.uk (ppsw-41.csi.cam.ac.uk [131.111.8.141])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 787913C259
 for <ctypes@lists.ocaml.org>; Fri, 14 Aug 2015 22:49:15 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1695660 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.160.177 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (andi.m.mcclure[at]gmail.com)
 *  0.0 HTML_MESSAGE BODY: HTML included in message
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-yk0-f177.google.com ([209.85.160.177]:33451)
 by ppsw-41.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1ZQMzc-0006DH-Q2 (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <andi.m.mcclure@gmail.com>); Fri, 14 Aug 2015 22:58:29 +0100
Received: by ykll84 with SMTP id l84so17376951ykl.0
 for <ctypes@lists.ocaml.org>; Fri, 14 Aug 2015 14:58:27 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=T3qzpU7D7CjepLvu1CU3+tLSdIpQn0b/wHyR/RQhiqk=;
 b=DRkTz46NT6RK8fM+T2r3fZsMQQ+H+Jk2cSZdPYECNzeZNHvkI3ATkBPtmoNsNSKE0u
 8ZJvHOWyNISZS0SIc60qmpQdFz/hfHl/yb3OhdjOKgD8320dfyJHxf7chliVg+o0bbKe
 nEs7GTBD9FcEawBjUyyeZtaSOrHleTX/iYTl760jWZlDIDDv4vLLlwqiexqMMGuKWv2V
 3DnJmlu6DxAinl/pLcEhCMSAfg/1QRv9sn/E8bXqZIxNBzTo4ZR2VTNjLXMPqhf9BxiK
 wYSUIS15tIzk3SOF3rmSsYLFN1JErPtgstz0w5TfzdJg1CLBCTHT9q+DyMsC/bKvtsbm
 W9hQ==
MIME-Version: 1.0
X-Received: by 10.170.135.138 with SMTP id b132mr44675637ykc.16.1439589506948; 
 Fri, 14 Aug 2015 14:58:26 -0700 (PDT)
Received: by 10.129.88.68 with HTTP; Fri, 14 Aug 2015 14:58:26 -0700 (PDT)
In-Reply-To: <CAAxsn=Gp+XoPvhhErM3HYx3q-vj3KMibHg+ZQ6_Tkv+-iTAt5w@mail.gmail.com>
References: <CAJDLOY+9OjHtkGp8stmZhDT1dhj6KmtCfhNyNKDM8mORt+DvCA@mail.gmail.com>
 <CAAxsn=FataxoOXh+haz1E3a6XXNVhjxiWw6O6wCsr+qM+=Lrkw@mail.gmail.com>
 <CAJDLOYK=QaFYMLc_DJOjiDOW2G8tMvyA9GRuuOjpVbb8Z001Sw@mail.gmail.com>
 <CAAxsn=Gp+XoPvhhErM3HYx3q-vj3KMibHg+ZQ6_Tkv+-iTAt5w@mail.gmail.com>
Date: Fri, 14 Aug 2015 14:58:26 -0700
Message-ID: <CAJDLOYKtum8hJVWdwJ1h0sUBjoYw3ktO_v23izpo5QXwQnzuag@mail.gmail.com>
From: Andi McClure <andi.m.mcclure@gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Content-Type: multipart/alternative; boundary=001a11455cfc2f24c8051d4c8de5
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Best practices for wrapping ocaml-ctypes?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 14 Aug 2015 21:49:15 -0000

--001a11455cfc2f24c8051d4c8de5
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Thanks again=E2=80=94 I have an update and then another question or three.

With help from people on IRC, I have a working version of this now. You can
find it here:
https://bitbucket.org/runhello/test-emily-game/src/e1cac5bf0546234ab7b69977=
b53625efaef7d8d7/src/internalPackage.ml?at=3Ddefault
And a demo of the code running:
https://pbs.twimg.com/media/CMRG8wZUcAAd7B2.png:large

What I have is a module FfiSupport. It is based around functions
cToValueFor and a valueToCFor, which given a type name can spit out a
converter from any specified C type to my "value" variant, or a converter
from my "value" variant to any specified C type. The 'ctype->value (or vice
versa) "converter" function comes paired with a ctypes typ, so I can pass
that directly into 'foreign'. The key part is:

      let ValueToCFn (argType, argConvert) =3D valueToCFor argTypeName in
      let CToValueFn (retType, retConvert) =3D cToValueFor retTypeName in
      let ffi_binding =3D foreign name (argType @-> returning retType) in
      fun arg -> retConvert (ffi_binding (argConvert arg))

So that is very satisfying, but there is an obvious problem, which is that
this only works for unary functions. I need it to work for functions of any
arity.

I have an intuition about how to do this, but a couple of days of tinkering
have gotten me nowhere and I am very concerned about whether, if I
completed my implementation, OCaml could type it. I'd like to describe this
possibly-unworkable solution, and then ask a question.

My thought is this: If I have for example a 2-ary function, I feel like I
need to construct two things, an ocaml-ctypes type spec ('a typ @-> 'b typ
@-> returning 'c typ), and a function ('a -> 'b ->
'c)->(value->value->value).

So maybe the way I achieve this is I construct a base function ('a ->
'b)->(value->value), and then I construct a "successor" function which
transforms
('b typ @-> ... @-> returning 'z typ) and ('b -> ... ->
'z)->(value->...->value)
into
('a typ @-> 'b typ @-> ... @-> returning 'z typ) and ('a->'b -> ... ->
'z)->(value->value->...->value).
I hope, if I could implement this "successor" function, it would all stay
within what the existential types feature can type sensibly, and this will
compile :) but, I am feeling stymied, and in my tries so far I haven't
really even succeeded in formulating the ('a->'b)->(value->value) "base
case". (This is as far as I got
https://bitbucket.org/runhello/test-emily-game/src/86e8bf4598e64ef0e1288f5c=
c6b86f70287d378b/src/internalPackage.ml?at=3Ddefault
and
line 56 is... wrong.) The problem seems to be that the OCaml type system is
not set up to describe curried functions of indeterminate arity; I have no
idea what the type signature for my "successor" function would even look
like.

So, my question is: How would you recommend attacking the n-arity case? Do
you think this will even be possible?

OCaml-ctypes must have a solution to this kind of problem because it itself
works with functions of arbitrary arity. Could I unify my implementation
approach better with OCaml-ctypes's?

I notice that OCaml-ctypes on the inside seems to be working with a thing
like:
type _ fn =3D
  | Returns  : 'a typ   -> 'a fn
  | Function : 'a typ * 'b fn  -> ('a -> 'b) fn
This looks much superior to what I am doing, which is pure noodly function
manipulation. It seems like I would benefit a lot from using something like
that, with my retConvert and argConvert list embedded in the structure. But
it is unclear to me how to get from what I have to there (GADTs are very
new to me) and, I'm not sure if THAT will ultimately be permitted by the
OCaml type checker either!

Any advice welcome, in the meantime I am going to try just starting by
manually writing out 2-ary, 3-ary, 4-ary implementations to unblock this
particular project in the short term, and probably reading the Types and
Programming Languages chapter on existential types to see if it leaves me
less confused. >_>

One last thing. You mentioned in a previous email the idea of a
"Ctypes_untyped"
module. I think if I got this working, it would *probably* be something
that could be generalized by making a first-class module paramerizing the
value type and the "constructor factory" functions. It seems like a is a
useful thing. If this eventually worked, would it be eventually worth
submitting that parameterized Ctypes_variant back to ocaml-ctypes as a pull
request?

Thanks again!

- Andi

On Tue, Aug 11, 2015 at 2:41 AM, Jeremy Yallop <yallop@gmail.com> wrote:

> On 10/08/2015, Andi McClure <andi.m.mcclure@gmail.com> wrote:
> > The syntax could use some work :P But never mind that. I've so far got =
it
> > where when you invoke ffi.c.function, the function specification you
> > provided gets piped into OCaml and turned into this OCaml data structur=
e:
> >
> >     type foreignSpec =3D { name : string; args : string list; returning=
:
> > string; }
> >
> > This seems like a straightforward representation of the information @->
> > encodes; it seems something parsing a header would need to represent th=
e
> > data the same way.
> >
> > My naive impulse is to imagine that this is straightforward, and I need
> to
> > just build up a typ variable by repeatedly chaining @->, something like=
:
> >
> >     let typeConvert =3D function "void" -> void | "int" -> int | _ ->
> > failwith "??"
>
> Right: it should be possible to do things like that once you've dealt
> with the typing problem you describe.
>
> The easiest approach to dealing with the fact that 'int', 'void', etc.
> have different types is to use an existential type.  Existential types
> in OCaml are a sort of variant, but defined with a different syntax;
> instead of writing something like this:
>
>    type t =3D A of x
>           | B of y
>
> you give the type signature for each constructor, like this:
>
>    type t =3D A : x -> t
>           | B : y -> t
>
> By itself that doesn't give you any extra power, and you can actually
> write any variant type definition this way.  The distinctive feature
> of existential types is that you can mention type variables on the
> right of the '=3D' that don't appear in the type parameters on the left.
> Here's an example:
>
>    type ty =3D Ty : 'a Ctypes.typ -> ty
>
> As the type signature says, 'Ty' takes a value of type 'a Ctypes.typ'
> for any type 'a' and builds a value of type 'ty'.  You can therefore
> use 'Ty' to wrap Ctypes.typ values of different types up as 'ty'
> values.  For example, you can build a list of typs:
>
>    # [Ty void; Ty int];;
>    - : ty list =3D [Ty void; Ty int]
>
> and you can wrap the variously-typed results of your 'typeConvert'
> function so that they all have the same type 'ty':
>
>    let typeConvert =3D function
>        "void" -> Ty void
>      | "int" -> Ty int
>      | _ -> failwith "??"
>
> The same difficulty arises with 'Ctypes.fn' and your 'functionFrom'
> definition, which needs to build function type descriptions of all
> sorts of different types.  Here's a second existential type which
> wraps 'Ctypes.fn':
>
>    type fn =3D Fn : ('a -> 'b) Ctypes.fn -> fn
>
> This time the type signature says that 'Fn' takes a value of type '(a
> -> b) Ctypes.fn' for any types 'a' and 'b' and builds a value of type
> 'fn'.  It should be possible to build something like 'functionFrom'
> that wraps and unwraps intermediate values using 'Ty' and 'Fn' to deal
> with the immediate typing problems (leaving the interesting question
> of how to turn the function returned by 'Foreign.foreign' into
> something that can be called from your interpreter).
>
> I hope that helps a bit.
>
> Kind regards,
>
> Jeremy.
>

--001a11455cfc2f24c8051d4c8de5
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Thanks again=E2=80=94 I have an update and then another qu=
estion or three.<div><br></div><div>With help from people on IRC, I have a =
working version of this now. You can find it here:</div><div><a href=3D"htt=
ps://bitbucket.org/runhello/test-emily-game/src/e1cac5bf0546234ab7b69977b53=
625efaef7d8d7/src/internalPackage.ml?at=3Ddefault" target=3D"_blank">https:=
//bitbucket.org/runhello/test-emily-game/src/e1cac5bf0546234ab7b69977b53625=
efaef7d8d7/src/internalPackage.ml?at=3Ddefault</a><br></div><div>And a demo=
 of the code running:</div><div><a href=3D"https://pbs.twimg.com/media/CMRG=
8wZUcAAd7B2.png:large" target=3D"_blank">https://pbs.twimg.com/media/CMRG8w=
ZUcAAd7B2.png:large</a><br></div><div><br></div><div>What I have is a modul=
e FfiSupport. It is based around functions cToValueFor and a valueToCFor, w=
hich given a type name can spit out a converter from any specified C type t=
o my &quot;value&quot; variant, or a converter from my &quot;value&quot; va=
riant to any specified C type. The &#39;ctype-&gt;value (or vice versa) &qu=
ot;converter&quot; function comes paired with a ctypes typ, so I can pass t=
hat directly into &#39;foreign&#39;. The key part is:</div><div><br></div><=
div>=C2=A0 =C2=A0 =C2=A0 let ValueToCFn (argType, argConvert) =3D valueToCF=
or argTypeName in<br></div><div><div>=C2=A0 =C2=A0 =C2=A0 let CToValueFn (r=
etType, retConvert) =3D cToValueFor retTypeName in</div><div>=C2=A0 =C2=A0 =
=C2=A0 let ffi_binding =3D foreign name (argType @-&gt; returning retType) =
in</div><div>=C2=A0 =C2=A0 =C2=A0 fun arg -&gt; retConvert (ffi_binding (ar=
gConvert arg))</div></div><div><br></div><div>So that is very satisfying, b=
ut there is an obvious problem, which is that this only works for unary fun=
ctions. I need it to work for functions of any arity.</div><div><br></div><=
div>I have an intuition about how to do this, but a couple of days of tinke=
ring have gotten me nowhere and I am very concerned about whether, if I com=
pleted my implementation, OCaml could type it. I&#39;d like to describe thi=
s possibly-unworkable solution, and then ask a question.</div><div><br></di=
v><div>My thought is this: If I have for example a 2-ary function, I feel l=
ike I need to construct two things, an ocaml-ctypes type spec (&#39;a typ @=
-&gt; &#39;b typ @-&gt; returning &#39;c typ), and a function (&#39;a -&gt;=
 &#39;b -&gt; &#39;c)-&gt;(value-&gt;value-&gt;value).</div><div><br></div>=
<div>So maybe the way I achieve this is I construct a base function (&#39;a=
 -&gt; &#39;b)-&gt;(value-&gt;value), and then I construct a &quot;successo=
r&quot; function which transforms</div><div>(&#39;b typ @-&gt; ... @-&gt; r=
eturning &#39;z typ) and (&#39;b -&gt; ... -&gt; &#39;z)-&gt;(value-&gt;...=
-&gt;value)</div><div>into</div><div>(&#39;a typ @-&gt; &#39;b typ @-&gt; .=
.. @-&gt; returning &#39;z typ) and (&#39;a-&gt;&#39;b -&gt; ... -&gt; &#39=
;z)-&gt;(value-&gt;value-&gt;...-&gt;value).</div><div>I hope, if I could i=
mplement this &quot;successor&quot; function, it would all stay within what=
 the existential types feature can type sensibly, and this will compile :) =
but, I am feeling stymied, and in my tries so far I haven&#39;t really even=
 succeeded in formulating the (&#39;a-&gt;&#39;b)-&gt;(value-&gt;value) &qu=
ot;base case&quot;. (This is as far as I got=C2=A0<a href=3D"https://bitbuc=
ket.org/runhello/test-emily-game/src/86e8bf4598e64ef0e1288f5cc6b86f70287d37=
8b/src/internalPackage.ml?at=3Ddefault" target=3D"_blank">https://bitbucket=
.org/runhello/test-emily-game/src/86e8bf4598e64ef0e1288f5cc6b86f70287d378b/=
src/internalPackage.ml?at=3Ddefault</a>=C2=A0and line 56 is... wrong.) The =
problem seems to be that the OCaml type system is not set up to describe cu=
rried functions of indeterminate arity; I have no idea what the type signat=
ure for my &quot;successor&quot; function would even look like.</div><div><=
br></div><div>So, my question is: How would you recommend attacking the n-a=
rity case? Do you think this will even be possible?</div><div><br></div><di=
v>OCaml-ctypes must have a solution to this kind of problem because it itse=
lf works with functions of arbitrary arity. Could I unify my implementation=
 approach better with OCaml-ctypes&#39;s?</div><div><br></div><div>I notice=
 that OCaml-ctypes on the inside seems to be working with a thing like:</di=
v><div><div>type _ fn =3D</div><div>=C2=A0 | Returns =C2=A0: &#39;a typ =C2=
=A0 -&gt; &#39;a fn</div><div>=C2=A0 | Function : &#39;a typ * &#39;b fn =
=C2=A0-&gt; (&#39;a -&gt; &#39;b) fn</div></div><div>This looks much superi=
or to what I am doing, which is pure noodly function manipulation. It seems=
 like I would benefit a lot from using something like that, with my retConv=
ert and argConvert list embedded in the structure. But it is unclear to me =
how to get from what I have to there (GADTs are very new to me) and, I&#39;=
m not sure if THAT will ultimately be permitted by the OCaml type checker e=
ither!</div><div><br></div><div>Any advice welcome, in the meantime I am go=
ing to try just starting by manually writing out 2-ary, 3-ary, 4-ary implem=
entations to unblock this particular project in the short term, and probabl=
y reading the Types and Programming Languages chapter on existential types =
to see if it leaves me less confused. &gt;_&gt;</div><div><br></div><div>On=
e last thing. You mentioned in a previous email the idea of a &quot;<span s=
tyle=3D"font-family:arial,sans-serif;font-size:12.8000001907349px">Ctypes_u=
ntyped&quot; module. I think if I got this working, it would *probably* be =
something that could be generalized by making a first-class module parameri=
zing the value type and the &quot;constructor factory&quot; functions. It s=
eems like a is a useful thing. If this eventually worked, would it be event=
ually worth submitting that parameterized Ctypes_variant back to ocaml-ctyp=
es as a pull request?</span></div><div><span style=3D"font-family:arial,san=
s-serif;font-size:12.8000001907349px"><br></span></div><div><font face=3D"a=
rial, sans-serif"><span style=3D"font-size:12.8000001907349px">Thanks again=
!</span></font></div><div><font face=3D"arial, sans-serif"><span style=3D"f=
ont-size:12.8000001907349px"><br></span></font></div><div><font face=3D"ari=
al, sans-serif"><span style=3D"font-size:12.8000001907349px">- Andi</span><=
/font></div><div><br></div><div class=3D"gmail_extra"><div class=3D"gmail_q=
uote">On Tue, Aug 11, 2015 at 2:41 AM, Jeremy Yallop <span dir=3D"ltr">&lt;=
<a href=3D"mailto:yallop@gmail.com" target=3D"_blank">yallop@gmail.com</a>&=
gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 =
0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><span>On 10/08/2015, An=
di McClure &lt;<a href=3D"mailto:andi.m.mcclure@gmail.com" target=3D"_blank=
">andi.m.mcclure@gmail.com</a>&gt; wrote:<br>
&gt; The syntax could use some work :P But never mind that. I&#39;ve so far=
 got it<br>
&gt; where when you invoke ffi.c.function, the function specification you<b=
r>
&gt; provided gets piped into OCaml and turned into this OCaml data structu=
re:<br>
&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0type foreignSpec =3D { name : string; args : string=
 list; returning:<br>
&gt; string; }<br>
&gt;<br>
&gt; This seems like a straightforward representation of the information @-=
&gt;<br>
&gt; encodes; it seems something parsing a header would need to represent t=
he<br>
&gt; data the same way.<br>
&gt;<br>
&gt; My naive impulse is to imagine that this is straightforward, and I nee=
d to<br>
&gt; just build up a typ variable by repeatedly chaining @-&gt;, something =
like:<br>
&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0let typeConvert =3D function &quot;void&quot; -&gt;=
 void | &quot;int&quot; -&gt; int | _ -&gt;<br>
&gt; failwith &quot;??&quot;<br>
<br>
</span>Right: it should be possible to do things like that once you&#39;ve =
dealt<br>
with the typing problem you describe.<br>
<br>
The easiest approach to dealing with the fact that &#39;int&#39;, &#39;void=
&#39;, etc.<br>
have different types is to use an existential type.=C2=A0 Existential types=
<br>
in OCaml are a sort of variant, but defined with a different syntax;<br>
instead of writing something like this:<br>
<br>
=C2=A0 =C2=A0type t =3D A of x<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 | B of y<br>
<br>
you give the type signature for each constructor, like this:<br>
<br>
=C2=A0 =C2=A0type t =3D A : x -&gt; t<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 | B : y -&gt; t<br>
<br>
By itself that doesn&#39;t give you any extra power, and you can actually<b=
r>
write any variant type definition this way.=C2=A0 The distinctive feature<b=
r>
of existential types is that you can mention type variables on the<br>
right of the &#39;=3D&#39; that don&#39;t appear in the type parameters on =
the left.<br>
Here&#39;s an example:<br>
<br>
=C2=A0 =C2=A0type ty =3D Ty : &#39;a Ctypes.typ -&gt; ty<br>
<br>
As the type signature says, &#39;Ty&#39; takes a value of type &#39;a Ctype=
s.typ&#39;<br>
for any type &#39;a&#39; and builds a value of type &#39;ty&#39;.=C2=A0 You=
 can therefore<br>
use &#39;Ty&#39; to wrap Ctypes.typ values of different types up as &#39;ty=
&#39;<br>
values.=C2=A0 For example, you can build a list of typs:<br>
<br>
=C2=A0 =C2=A0# [Ty void; Ty int];;<br>
=C2=A0 =C2=A0- : ty list =3D [Ty void; Ty int]<br>
<br>
and you can wrap the variously-typed results of your &#39;typeConvert&#39;<=
br>
function so that they all have the same type &#39;ty&#39;:<br>
<br>
=C2=A0 =C2=A0let typeConvert =3D function<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0&quot;void&quot; -&gt; Ty void<br>
=C2=A0 =C2=A0 =C2=A0| &quot;int&quot; -&gt; Ty int<br>
=C2=A0 =C2=A0 =C2=A0| _ -&gt; failwith &quot;??&quot;<br>
<br>
The same difficulty arises with &#39;Ctypes.fn&#39; and your &#39;functionF=
rom&#39;<br>
definition, which needs to build function type descriptions of all<br>
sorts of different types.=C2=A0 Here&#39;s a second existential type which<=
br>
wraps &#39;Ctypes.fn&#39;:<br>
<br>
=C2=A0 =C2=A0type fn =3D Fn : (&#39;a -&gt; &#39;b) Ctypes.fn -&gt; fn<br>
<br>
This time the type signature says that &#39;Fn&#39; takes a value of type &=
#39;(a<br>
-&gt; b) Ctypes.fn&#39; for any types &#39;a&#39; and &#39;b&#39; and build=
s a value of type<br>
&#39;fn&#39;.=C2=A0 It should be possible to build something like &#39;func=
tionFrom&#39;<br>
that wraps and unwraps intermediate values using &#39;Ty&#39; and &#39;Fn&#=
39; to deal<br>
with the immediate typing problems (leaving the interesting question<br>
of how to turn the function returned by &#39;Foreign.foreign&#39; into<br>
something that can be called from your interpreter).<br>
<br>
I hope that helps a bit.<br>
<br>
Kind regards,<br>
<br>
Jeremy.<br>
</blockquote></div><br></div></div>

--001a11455cfc2f24c8051d4c8de5--

From yallop@gmail.com  Mon Aug 17 11:11:13 2015
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id D87D53C0DF
 for <ctypes@lists.ocaml.org>; Mon, 17 Aug 2015 11:11:13 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1696121 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.215.45 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-la0-f45.google.com ([209.85.215.45]:36304)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1ZRHWt-0000uR-rc (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Mon, 17 Aug 2015 11:20:36 +0100
Received: by lagz9 with SMTP id z9so76052683lag.3
 for <ctypes@lists.ocaml.org>; Mon, 17 Aug 2015 03:20:35 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=SQ83/D/sVZ313sk8GR5ryDvyKt63x5dcvQXdXMQxCcg=;
 b=IkQ6YHPR38TiW/FkJCr6/uotOUPkybshmX5BYuRU8r+m1vtdwKR81IE0cLbrn5JuRh
 FxJsUV9yc9ZRV0HmpF8ve0XcUeh21x59t5880z/PmLW1FTljwg/e9DQAVaPElXaTXD/r
 O0G827B1KOH4tPwWRxmQt31hw6rv5UtvllJIZwqN5AwlpMwbUjsVzO5tQ+yVcNVEzeuI
 uLBFr4RctslqITBmj6FLVDmqO58uNvCIpZE48lwPKFRDs/OpG/VZdHrr8d2jwOXtXNTa
 t9BEgDr8eY1uJ4PQq7bdOlkjaQu+e7m4PDkKoxTt53B4unVAc1FiYkCF1xCPwVxPNCm3
 LkcQ==
MIME-Version: 1.0
X-Received: by 10.152.8.169 with SMTP id s9mr537991laa.3.1439806834914; Mon,
 17 Aug 2015 03:20:34 -0700 (PDT)
Received: by 10.25.165.145 with HTTP; Mon, 17 Aug 2015 03:20:34 -0700 (PDT)
In-Reply-To: <CAJDLOYKtum8hJVWdwJ1h0sUBjoYw3ktO_v23izpo5QXwQnzuag@mail.gmail.com>
References: <CAJDLOY+9OjHtkGp8stmZhDT1dhj6KmtCfhNyNKDM8mORt+DvCA@mail.gmail.com>
 <CAAxsn=FataxoOXh+haz1E3a6XXNVhjxiWw6O6wCsr+qM+=Lrkw@mail.gmail.com>
 <CAJDLOYK=QaFYMLc_DJOjiDOW2G8tMvyA9GRuuOjpVbb8Z001Sw@mail.gmail.com>
 <CAAxsn=Gp+XoPvhhErM3HYx3q-vj3KMibHg+ZQ6_Tkv+-iTAt5w@mail.gmail.com>
 <CAJDLOYKtum8hJVWdwJ1h0sUBjoYw3ktO_v23izpo5QXwQnzuag@mail.gmail.com>
Date: Mon, 17 Aug 2015 11:20:34 +0100
Message-ID: <CAAxsn=FxTtC55YhdEQ-kZ5jW3jYMgPypgyDE6GnJ_+qk8LviEg@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Andi McClure <andi.m.mcclure@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Best practices for wrapping ocaml-ctypes?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 17 Aug 2015 10:11:13 -0000

On 14/08/2015, Andi McClure <andi.m.mcclure@gmail.com> wrote:
> With help from people on IRC, I have a working version of this now. You can
> find it here:
> https://bitbucket.org/runhello/test-emily-game/src/e1cac5bf0546234ab7b69977b53625efaef7d8d7/src/internalPackage.ml?at=default
> And a demo of the code running:
> https://pbs.twimg.com/media/CMRG8wZUcAAd7B2.png:large

Thanks for the update!  It's great to see the foreign call working end-to-end.

> What I have is a module FfiSupport. It is based around functions
> cToValueFor and a valueToCFor, which given a type name can spit out a
> converter from any specified C type to my "value" variant, or a converter
> from my "value" variant to any specified C type. The 'ctype->value (or vice
> versa) "converter" function comes paired with a ctypes typ, so I can pass
> that directly into 'foreign'. The key part is:
>
>       let ValueToCFn (argType, argConvert) = valueToCFor argTypeName in
>       let CToValueFn (retType, retConvert) = cToValueFor retTypeName in
>       let ffi_binding = foreign name (argType @-> returning retType) in
>       fun arg -> retConvert (ffi_binding (argConvert arg))

This looks like a sensible scheme.

> So that is very satisfying, but there is an obvious problem, which is that
> this only works for unary functions. I need it to work for functions of any
> arity.

I think that should be possible.

> I have an intuition about how to do this, but a couple of days of tinkering
> have gotten me nowhere and I am very concerned about whether, if I
> completed my implementation, OCaml could type it. I'd like to describe this
> possibly-unworkable solution, and then ask a question.
>
> My thought is this: If I have for example a 2-ary function, I feel like I
> need to construct two things, an ocaml-ctypes type spec ('a typ @-> 'b typ
> @-> returning 'c typ), and a function ('a -> 'b ->
> 'c)->(value->value->value).

Yes, except that things will become easier if you give the second thing the type

   ('a -> 'b -> 'c) -> value

by applying the BuiltinFunctionValue constructor at appropritate
points, since then every bound function will have the same type,
regardless of arity.

> So maybe the way I achieve this is I construct a base function ('a ->
> 'b)->(value->value), and then I construct a "successor" function which
> transforms
> ('b typ @-> ... @-> returning 'z typ) and ('b -> ... ->
> 'z)->(value->...->value)
> into
> ('a typ @-> 'b typ @-> ... @-> returning 'z typ) and ('a->'b -> ... ->
> 'z)->(value->value->...->value).

Right.  So, more concretely, if you're building a binding to a C
function of type

   void(float, int)

you want to build a Ctypes type representation

   float @-> int @-> returning void

and a conversion function of type

   (float -> int -> unit) -> value

for turning the function returned from Foreign.foreign into an Emily
value, like this:

   let ffi_binding = foreign name (argType @-> returning retType) in
   convert ffi_binding

So the "successor" function should turn the type representation from this

   int @-> returning void

into this

   float @-> int @-> returning void

and it should turn the OCaml-to-Emily conversion function from
something of this type

  (int -> unit) -> value

into something of this type

  (float -> int -> unit) -> value

Converting the type representation is the easy part, since you can
just use '@->' to add the new argument type:

  let unary = int @-> returning void in
    float @-> unary

Converting the OCaml-to-Emily function involves writing something of type

  ((int -> unit) -> value) -> (float -> int -> unit) -> value

i.e. something that looks like this:

  fun
   (f : ((int -> unit) -> value))
   (g : (float -> int -> unit)) ->
      (... : value)

where the '...' is somehow built from 'f' and 'g' and has type
'value'.  Of course, filling in the '...' is the tricky part, but the
types help quite a bit.  First, since you're extending the conversion
function to take an extra argument you know that the result should be
constructed using BuiltinFunctionValue:

  fun
   (f : ((int -> unit) -> value))
   (g : (float -> int -> unit)) ->
      (BuiltinFunctionValue
        (fun (x : value) -> (... : value)))

Next, you know that x should hold a float, so you can unpack it:

  let float_of_value = function
    Value.FloatValue y -> y
  | _ -> failwith "type error"

  fun
   (f : ((int -> unit) -> value))
   (g : (float -> int -> unit)) ->
      (BuiltinFunctionValue
         (fun (x : value) ->
            let y = float_of_value x in
               (... : value)))

What can you do with 'y'?  There's only one function around that takes
a float, namely 'g', so you can pass 'y' to 'g'. (Thinking through
this decision a little more carefully reveals that it is actually the
right thing to do, since 'g' is the function returned from
'Foreign.foreign', and 'y' is the argument passed in to that function
from an Emily program.)

  fun
   (f : ((int -> unit) -> value))
   (g : (float -> int -> unit)) ->
      (BuiltinFunctionValue
         (fun (x : value) ->
            let y = float_of_value x in
            let h : int -> unit = g y in
               (... : value)))

Finally, we have a value, 'h', of type 'int -> unit', and there's
exactly one obvious thing to do with it (which once again also turns
out to be the correct thing): pass it to 'f' to build a 'value':

  fun
   (f : ((int -> unit) -> value))
   (g : (float -> int -> unit)) ->
      (BuiltinFunctionValue
         (fun (x : value) ->
            let y = float_of_value x in
            let h : int -> unit = g y in
              (f h : value)))

This is sufficient to support this particular example ('float -> int
-> unit'), and it's not difficult to generalise it to handle extending
functions of any arity and type by removing the type ascriptions and
turning the 'float_of_value' function into a parameter:

  let extend_fn =
     fun of_value f g ->
      (BuiltinFunctionValue
         (fun x ->
            let y = of_value x in
            let h = g y in
              f h))

which can be written more simply as

   let extend_fn of_value f g = BuiltinFunctionValue (fun x -> f (g
(of_value x)))

Now 'extend_fn' can be used to build conversions between functions of
arbitrary arity.  For example:

   # extend_fn float_of_value value_of_string;;
   - : (float -> string) -> value = <fun>
   # extend_fn string_of_value (extend_fn float_of_value value_of_string);;
   - : (string -> float -> string) -> value = <fun>
   # extend_fn string_of_value (extend_fn string_of_value (extend_fn
float_of_value value_of_string));;
   - : (string -> string -> float -> string) -> value = <fun>

Kind regards,

Jeremy.

From yallop@gmail.com  Mon Aug 17 11:14:51 2015
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-51.csi.cam.ac.uk (ppsw-51.csi.cam.ac.uk [131.111.8.151])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 649093C0DF
 for <ctypes@lists.ocaml.org>; Mon, 17 Aug 2015 11:14:51 +0100 (BST)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-la0-f46.google.com ([209.85.215.46]:33320)
 by ppsw-51.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:AES128-GCM-SHA256:128)
 id 1ZRHaP-0004OF-ZH (Exim 4.82_3-c0e5623) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Mon, 17 Aug 2015 11:24:14 +0100
Received: by lalv9 with SMTP id v9so76058840lal.0
 for <ctypes@lists.ocaml.org>; Mon, 17 Aug 2015 03:24:13 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=oxKpxqu4/E2+6jjvD+LYVBoI2Ek0b4FA4/+w7TdVnow=;
 b=NeAAVwo3DOosYPlvJdsamKU7aT2U7KiLK4msveEU4oErn+Bz9zBfFRCBif5h13Hgfe
 naxCntFKvXGM+gRbLLHvsw24u8quTsqcnl68FWFSpt6hVmLOllrLNCJOd92/Md8U824A
 7B6/uJ9lMK3G7cabfyUd9BM23s4r8CUePtP2g66DcXxGJgaE0BUI2OIJsscjcLCFNUIx
 4UZiuSkotZQoeDWZOd/QBx5ReJkhHh2g7wDb67A1Lom4NpoH6vbVOEwPR9RsXD75bUtF
 Mwojb3ngSi4XMols7HbkqbGYYjaPpNrwlJIJZ3O326gzD7vqdWQ9lXP692AfF+XUjYqI
 dBgQ==
MIME-Version: 1.0
X-Received: by 10.112.85.204 with SMTP id j12mr549114lbz.47.1439807053312;
 Mon, 17 Aug 2015 03:24:13 -0700 (PDT)
Received: by 10.25.165.145 with HTTP; Mon, 17 Aug 2015 03:24:13 -0700 (PDT)
In-Reply-To: <CAAxsn=FxTtC55YhdEQ-kZ5jW3jYMgPypgyDE6GnJ_+qk8LviEg@mail.gmail.com>
References: <CAJDLOY+9OjHtkGp8stmZhDT1dhj6KmtCfhNyNKDM8mORt+DvCA@mail.gmail.com>
 <CAAxsn=FataxoOXh+haz1E3a6XXNVhjxiWw6O6wCsr+qM+=Lrkw@mail.gmail.com>
 <CAJDLOYK=QaFYMLc_DJOjiDOW2G8tMvyA9GRuuOjpVbb8Z001Sw@mail.gmail.com>
 <CAAxsn=Gp+XoPvhhErM3HYx3q-vj3KMibHg+ZQ6_Tkv+-iTAt5w@mail.gmail.com>
 <CAJDLOYKtum8hJVWdwJ1h0sUBjoYw3ktO_v23izpo5QXwQnzuag@mail.gmail.com>
 <CAAxsn=FxTtC55YhdEQ-kZ5jW3jYMgPypgyDE6GnJ_+qk8LviEg@mail.gmail.com>
Date: Mon, 17 Aug 2015 11:24:13 +0100
Message-ID: <CAAxsn=HHr85tCkG3dR4tDdfhR0ZNEbhL2-JW=qJxKdX_2LA8yg@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Andi McClure <andi.m.mcclure@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Best practices for wrapping ocaml-ctypes?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 17 Aug 2015 10:14:51 -0000

I thought I'd rejig the conversions a bit and put together a complete
working example.

First, the value type definition from an earlier message:

   type value =
      Null
    | True
    | FloatValue of float
    | StringValue of string
    | AtomValue of string
    | BuiltinFunctionValue of (value -> value)

Next, a module for converting back and forth between Emily values and
OCaml values.  This combines the two conversions that you currently
store in the 'valueToCFn' and 'cToValueFn' types.

  module Conversion :
  sig
     type 'a t
     (** A value of type 'a t' can be used to convert between
         the types 'value' and 'a' *)

     val val_of : 'a t -> ('a -> value)
     val of_val : 'a t -> (value -> 'a)

     val float : float t
     (** Conversions for floats *)

     val (^->) : 'a t -> 'b t -> ('a -> 'b) t
     (** Conversions for functions *)
  end =
  struct
    type 'a t = { val_of: 'a -> value;
                  of_val: value -> 'a }

    (* If you're not keen on puns, you can write
       'let val_of c = c.val_of' etc. instead *)
    let val_of {val_of} = val_of
    let of_val {of_val} = of_val

    let value_of_float f = FloatValue f

    let float_of_value = function
      | FloatValue f -> f
      | _ -> failwith "Expected float"

    let float = { val_of = value_of_float;
                  of_val = float_of_value }

    let value_of_function arg ret f =
       BuiltinFunctionValue (fun x -> val_of ret (f (of_val arg x)))

    let function_of_value arg ret = function
      | BuiltinFunctionValue f -> (fun x -> of_val ret (f (val_of arg x)))
      | _ -> failwith "Expected function"

    let (^->) arg ret = { val_of = value_of_function arg ret;
                          of_val = function_of_value arg ret }
  end

(I've chosen '^->' for the Conversion.t function value because
operators beginning with '^' associate right, so 'x ^-> y ^-> z' means
'x ^-> (y ^-> z)' rather than '(x ^-> y) ^-> z', just as in the
corresponding OCaml function types.)

Here's the conversion module in action:

   # Conversion.(of_val (float ^-> float));;
   - : value -> float -> float = <fun>
   # Conversion.(val_of (float ^-> float));;
   - : (float -> float) -> value = <fun>
   # Conversion.(val_of (float ^-> float ^-> float));;
   - : (float -> float -> float) -> value = <fun>
   # Conversion.(of_val ((float ^-> float) ^-> float));;
   - : value -> (float -> float) -> float = <fun>

Let's use these conversions to write the general function that binds C
functions using Ctypes and exposes them to Emily.  The following two
types play a similar role to valueToCFn etc., combining a type
representation and a conversion function:

   type ty = Ty : 'a Ctypes.typ * 'a Conversion.t -> ty
   type fn = Fn : ('a -> 'b) Ctypes.fn * ('a -> 'b) Conversion.t -> fn

Here's the analogue of your 'typeConvert' function:

   let typeConvert = function
       "float" -> Ty (Ctypes.float, Conversion.float)
     | _ -> failwith "??"

Next comes a slightly irritating part.  Since 'Foreign.foreign'
doesn't support nullary functions the base case for binding is the one
argument function type.  So for a function with arguments 'a', 'b',
'c' and 'd' and return type 'e' we'll need to to build an initial
function specification from 'd' and 'e', then fold in the other
argument types ('a', 'b', 'c').  Towards that goal here's a function
which splits a list into its initial elements and last element:

   (* 'a list -> 'a list * 'a *)
  let split_last l =
  let rec loop aux = function
      [] -> invalid_arg "split_last"
    | [x] -> List.rev aux, x
    | x :: xs -> loop (x :: aux) xs
  in loop [] l

  # split_last ['a'; 'b'; 'c'; 'd'];;
  - : char list * char = (['a'; 'b'; 'c'], 'd')

We now have all the bits we need to write the binding function.  The
following builds type representations and conversions in parallel,
then combines them at the end, like your 'valueForeignUnary':

  (* val functionFrom : string -> string list -> string -> value *)
  let functionFrom name args returning =
    let args, last_arg = split_last args in
    let Ty (rty, r) = typeConvert returning in
    let Ty (aty, a) = typeConvert last_arg in
    let Fn (fnty, fn) = List.fold_right
      (fun arg (Fn (fty, f)) ->
        let Ty (tty, t) = typeConvert arg in
        Fn (Ctypes.(tty @-> fty), Conversion.(t ^-> f)))
      args
      (Fn (Ctypes.(aty @-> returning rty), Conversion.(a ^-> r)))
    in Conversion.val_of fn (Foreign.foreign name fnty)

In order to test it'll be helpful to have an 'apply' function:

   (* val ( $ ) : value -> value -> value *)
   let ($) f p = match f with
       BuiltinFunctionValue f -> f p
     | _ -> failwith "Application of non-function"

Here's an example of using 'functionFrom' to call a unary function
from the C standard library:

   # let expf = functionFrom "expf" ["float"] "float";;
   val expf : value = BuiltinFunctionValue <fun>
   # expf $ FloatValue 1.0;;
   - : value = FloatValue 2.71828174591064453

And here's a call to a binary function:

   # let powf = functionFrom "powf" ["float"; "float"] "float";;
   val powf : value = BuiltinFunctionValue <fun>
   # powf $ FloatValue 2.0 $ FloatValue 3.0;;
   - : value = FloatValue 8.

I hope that helps, but feel free to follow up on anything that's unclear!

Kind regards,

Jeremy.

From eturetsky@wisc.edu  Fri Sep 11 17:53:17 2015
Return-Path: <eturetsky@wisc.edu>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 93D013C0EB
 for <ctypes@lists.ocaml.org>; Fri, 11 Sep 2015 17:53:17 +0100 (BST)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from wmauth2.doit.wisc.edu ([144.92.197.222]:61488
 helo=smtpauth2.wiscmail.wisc.edu)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1:DHE-RSA-AES128-SHA:128)
 id 1ZaRk0-00041x-m5 (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <eturetsky@wisc.edu>); Fri, 11 Sep 2015 18:04:06 +0100
MIME-version: 1.0
Content-type: multipart/alternative;
 boundary="Boundary_(ID_Mg/NqbQdyN8WEd9WXihBDw)"
Received: from avs-daemon.smtpauth2.wiscmail.wisc.edu by
 smtpauth2.wiscmail.wisc.edu
 (Oracle Communications Messaging Server 7.0.5.33.0 64bit (built Aug 27 2014))
 id <0NUI00500V2U1P00@smtpauth2.wiscmail.wisc.edu> for ctypes@lists.ocaml.org; 
 Fri, 11 Sep 2015 12:03:33 -0500 (CDT)
X-Spam-PmxInfo: Server=avs-2, Version=6.1.1.2430161,
 Antispam-Engine: 2.7.2.2107409, Antispam-Data: 2015.9.11.165716,
 SenderIP=0.0.0.0
X-Spam-Report: AuthenticatedSender=yes, SenderIP=0.0.0.0
Received: from na01-bn1-obe.outbound.protection.outlook.com
 (mail-bn1blp0182.outbound.protection.outlook.com [207.46.163.182])
 by smtpauth2.wiscmail.wisc.edu
 (Oracle Communications Messaging Server 7.0.5.33.0 64bit (built Aug 27 2014))
 with ESMTPS id <0NUI006O3VDVK450@smtpauth2.wiscmail.wisc.edu> for
 ctypes@lists.ocaml.org; Fri, 11 Sep 2015 12:03:32 -0500 (CDT)
Received: from CY1PR06MB1883.namprd06.prod.outlook.com (10.162.217.29)
 by CY1PR06MB1882.namprd06.prod.outlook.com (10.162.217.28)
 with Microsoft SMTP Server (TLS) id 15.1.262.15; Fri,
 11 Sep 2015 17:03:30 +0000
Received: from CY1PR06MB1883.namprd06.prod.outlook.com ([10.162.217.29])
 by CY1PR06MB1883.namprd06.prod.outlook.com ([10.162.217.29])
 with mapi id 15.01.0262.011; Fri, 11 Sep 2015 17:03:30 +0000
Received-SPF: None (protection.outlook.com: wisc.edu does not designate
 permitted sender hosts)
Date: Fri, 11 Sep 2015 17:03:30 +0000
From: EMMA R TURETSKY <eturetsky@wisc.edu>
X-Originating-IP: [128.105.28.18]
To: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Message-id: <CY1PR06MB1883995060B42C918FDB4D86C8500@CY1PR06MB1883.namprd06.prod.outlook.com>
Content-language: en-US
Accept-Language: en-US
Thread-topic: Creating a C wrapper for an OCaml value
Thread-index: AQHQ7LPI4m97GR18pUKx9LkKuAZ0Kw==
spamdiagnosticoutput: 1:23
spamdiagnosticmetadata: NSPM
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-microsoft-exchange-diagnostics: 1; CY1PR06MB1882;
 5:cWE5GhcH9ERcu1gAHk17/BbgteE4y5q8mpOEo2ZzJH6ViOhy/LzAvrZV0GdpAS0075U7bJbmXHU9232dMAwLhWIf9PY+9p3P5CS9EgwAvNDeaaJCgCrT2XwdwCmMh5wBbEwNnfI3kaWceY+O07AXuA==;
 24:ktQDCToJSAtFAzwWO4viyBvGkeg8RgmBu02+dKg0+wD2oBbAg7mV5ZEnrP+SWGkGoQ46ZkGL+7Afshd/xexhYDhSJbPuZgC57B/11ZY0524=;
 20:4CKg6sf3JhU99c49oLf2CJtF0ZM5V4j6WD+EGiGnsBtCnkMfX88nIU3Deij3rjlmSInWykCRM70mM+gcZmIeyA==
x-microsoft-antispam: UriScan:;BCL:0;PCL:0;RULEID:;SRVR:CY1PR06MB1882;
x-microsoft-antispam-prvs: <CY1PR06MB18825C285331682D8A756212C8500@CY1PR06MB1882.namprd06.prod.outlook.com>
x-exchange-antispam-report-test: UriScan:;
x-exchange-antispam-report-cfa-test: BCL:0; PCL:0;
 RULEID:(601004)(8121501046)(5005006)(3002001); SRVR:CY1PR06MB1882; BCL:0;
 PCL:0; RULEID:; SRVR:CY1PR06MB1882; 
x-forefront-prvs: 06968FD8C4
x-forefront-antispam-report: SFV:NSPM;
 SFS:(10009020)(6009001)(189002)(199003)(5001960100002)(40100003)(11100500001)(2501003)(74316001)(106116001)(2900100001)(4001540100001)(64706001)(46102003)(90282001)(5002640100001)(5003600100002)(89122001)(450100001)(92566002)(75432002)(122556002)(5004730100002)(87936001)(54356999)(76576001)(19627405001)(106356001)(229853001)(10400500002)(5007970100001)(77096005)(105586002)(2351001)(102836002)(88552001)(81156007)(110136002)(68736005)(5001830100001)(189998001)(77156002)(5001860100001)(107886002)(101416001)(99286002)(19625215002)(16236675004)(66066001)(97736004)(86362001)(62966003)(33656002)(50986999);
 DIR:OUT; SFP:1101; SCL:1; SRVR:CY1PR06MB1882;
 H:CY1PR06MB1883.namprd06.prod.outlook.com; FPR:; SPF:None; PTR:InfoNoRecords;
 MX:1; A:1; LANG:en; 
X-OriginatorOrg: wisc.edu
X-MS-Exchange-CrossTenant-originalarrivaltime: 11 Sep 2015 17:03:30.0802 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 2ca68321-0eda-4908-88b2-424a8cb4b0f9
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CY1PR06MB1882
Authentication-results: spf=none (sender IP is )
 smtp.mailfrom=eturetsky@wisc.edu;
Subject: [ocaml-ctypes] Creating a C wrapper for an OCaml value
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 11 Sep 2015 16:53:17 -0000


--Boundary_(ID_Mg/NqbQdyN8WEd9WXihBDw)
Content-type: text/plain; CHARSET=US-ASCII
Content-transfer-encoding: 7BIT


This may be a question with an obvious answer, but I'm having trouble understanding the manual.


I have two code bases, one in OCaml and one in C (c++, actually, but I'll just be using "extern 'C'" when needed), that I need to pass information to and from.


I have a Module in the OCaml code and all I want to do is to pass it to a C constructor that will just wrap around it.  I don't ever need to touch the data in C.


What will happen is that eventually the C code will get to a point where it needs to perform some operation on two of these data types.  That operation is all ready written in the OCaml code so I then want to be able to pass  the stored values back into OCaml which will perform the operation needed and create a new module of the same type that will again be returned and wrapped in C.  I'm pretty sure I understand how to call an OCaml function from C, so that isn't an issue.


So I guess the meat of my question is how do I pass a value in OCaml to C and just create a wrapper around it in a way that I can pass the same value back when I call OCaml from C using ctypes?  I feel like this should be simple and obvious from the manual, but my OCaml understanding is very weak.


Any help is appreciated,

Emma

--Boundary_(ID_Mg/NqbQdyN8WEd9WXihBDw)
Content-type: text/html; CHARSET=US-ASCII
Content-transfer-encoding: 7BIT

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<style type="text/css" style="display:none;"><!-- P {margin-top:0;margin-bottom:0;} --></style>
</head>
<body dir="ltr">
<div id="divtagdefaultwrapper" style="font-size:12pt;color:#000000;background-color:#FFFFFF;font-family:Calibri,Arial,Helvetica,sans-serif;">
<p><br>
</p>
<p>This may be a question with an obvious answer, but I'm having trouble understanding the manual.</p>
<p><br>
</p>
<p>I have two code bases, one in OCaml and one in C (c&#43;&#43;, actually, but I'll just be using &quot;extern 'C'&quot; when needed), that I need to pass information to and from.</p>
<p><br>
</p>
<p>I have a Module in the OCaml code and all I want to do is to pass it to a C constructor that will just wrap around it. &nbsp;I don't ever need to touch the data in C. &nbsp;</p>
<p><br>
</p>
<p>What will happen is that eventually the C code will get to a point where it needs to perform some operation on two of these data types. &nbsp;That operation is all ready written in the OCaml code so I then&nbsp;want to be able to pass &nbsp;the stored values back into
 OCaml which will perform the operation needed and create a new module of the same type that will again be returned and&nbsp;wrapped in C. &nbsp;I'm pretty sure I understand how to call an OCaml function from C, so that isn't an issue.</p>
<p><br>
</p>
<p>So I guess the meat of my question is how do I pass a value in OCaml to C and just create a wrapper around it&nbsp;in a way that I can pass the same value back when I call OCaml from C using ctypes? &nbsp;I feel like this should be simple and obvious from the manual,
 but my OCaml understanding is very weak.</p>
<p><br>
</p>
<p>Any help is appreciated,</p>
<p>Emma</p>
</div>
</body>
</html>

--Boundary_(ID_Mg/NqbQdyN8WEd9WXihBDw)--

From yallop@gmail.com  Fri Sep 11 18:36:01 2015
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-51.csi.cam.ac.uk (ppsw-51.csi.cam.ac.uk [131.111.8.151])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id D92CC3C0EB
 for <ctypes@lists.ocaml.org>; Fri, 11 Sep 2015 18:36:01 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1702191 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.217.172 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-lb0-f172.google.com ([209.85.217.172]:34102)
 by ppsw-51.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1ZaSPR-0004FK-YY (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Fri, 11 Sep 2015 18:46:50 +0100
Received: by lbbmp1 with SMTP id mp1so43550177lbb.1
 for <ctypes@lists.ocaml.org>; Fri, 11 Sep 2015 10:46:49 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=N9MtzrJtwqFkR4Cl3iP2LCIKX5sQVettSnK4w/BUHCQ=;
 b=F+mCxMsz8T417zfQ0aG8y62ArHVwtpJEIzkCbMJLFy3pt8o/7omMjzWOLl3k6j+aoy
 G6kGmi5u4JdR+UtglG7Y0kz8p/HX0Pgme2aGlhARcPU43YXgyVqJB1WNJ1pIIa7DULG8
 BFaS3pHcMq+9HvdJ9eBT/wj8ufxF9XcZaQ+40bIRlzo3MUzY+pc6NIx+tN2PFK6fCZtR
 c1oCCyTY9WFLE86uOiUCKUhm9T+PYPgmPwnarN9zZhq+zXKi/YZqFN+x8q5cf/55mv+y
 NtUD+IbpYqFe97LGlw1D6T5q8VSw8huVeOVlgVA7xFFv5RPwJt9L4iG+s/KZHPdeGa3h
 +DgA==
MIME-Version: 1.0
X-Received: by 10.152.20.228 with SMTP id q4mr14530lae.74.1441993608963; Fri,
 11 Sep 2015 10:46:48 -0700 (PDT)
Received: by 10.25.0.131 with HTTP; Fri, 11 Sep 2015 10:46:48 -0700 (PDT)
In-Reply-To: <CY1PR06MB1883995060B42C918FDB4D86C8500@CY1PR06MB1883.namprd06.prod.outlook.com>
References: <CY1PR06MB1883995060B42C918FDB4D86C8500@CY1PR06MB1883.namprd06.prod.outlook.com>
Date: Fri, 11 Sep 2015 18:46:48 +0100
Message-ID: <CAAxsn=F89Ys8WYGpGLiqS5t1xFiu4+C+4trXAz=092YJZYxcjw@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: EMMA R TURETSKY <eturetsky@wisc.edu>
Content-Type: text/plain; charset=UTF-8
Cc: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Creating a C wrapper for an OCaml value
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 11 Sep 2015 17:36:01 -0000

On 11/09/2015, EMMA R TURETSKY <eturetsky@wisc.edu> wrote:
> So I guess the meat of my question is how do I pass a value in OCaml to C
> and just create a wrapper around it in a way that I can pass the same value
> back when I call OCaml from C using ctypes?  I feel like this should be
> simple and obvious from the manual, but my OCaml understanding is very
> weak.

Passing OCaml values to C is actually a slightly unusual use case,
since most uses of ctypes involve passing C values to OCaml, so it's
probably not especially well documented.  It is possible, though, at
least with the master (unreleased) version of ctypes, which you can
install as follows:

    opam pin add ctypes git@github.com:ocamllabs/ocaml-ctypes.git

The main thing to be aware of is that the OCaml garbage collector can
run in between the time that you pass the OCaml value to C and the
time that you pass it back to OCaml.  The GC can move values around,
changing their addresses, so simply passing the address of a value
directly to C isn't safe.  The way to avoid problems is to register
values as roots, then pass the addresses of those roots to C, rather
than the values themseles.  Ctypes provides a module Ctypes.Root with
a few functions for root management:

    https://github.com/ocamllabs/ocaml-ctypes/blob/758e620d/src/ctypes/ctypes.mli#L417-L432
    https://github.com/ocamllabs/ocaml-ctypes/pull/318

The Root API is rather low-level, so I recommend wrapping calls to it
using signatures with stronger typing.  Here's a full example of
passing an OCaml module value to C, retrieving it via a separate C
call and invoking some of the module functions.  First, some C
functions which store and retrieve OCaml values using 'void *':

    /* c_bit.c */
    #include <stddef.h>
    #include <assert.h>

    static void *ocaml_modules[] = {NULL, NULL};

    void store_module(int i, void *m)
    {
      assert (i == 0 || i == 1);
      ocaml_modules[i] = m;
    }

    void *retrieve_module(int i)
    {
      assert(i == 0 || i == 1);
      assert(ocaml_modules[i] != NULL);
      return ocaml_modules[i];
    }

Next, an OCaml module with low-level interfaces to 'store_module' and
'retrieve_module' and a higher-level wrapper module 'HL' which
enforces the use of roots and the correct types:

    (* ocaml_bit.ml *)
    module LL =
    struct
      (* Low-level functions for passing OCaml values to and from C *)
      let store_module = Foreign.foreign "store_module"
          Ctypes.(int @-> ptr void @-> returning void)
      and retrieve_module = Foreign.foreign "retrieve_module"
          Ctypes.(int @-> returning (ptr void))
    end

    module type S =
    sig
      val say_hello : unit -> unit
      val add : int -> int -> int
    end

    module HL :
    sig
      type t = (module S)
      type handle
      val register : t -> handle
      val release  : handle -> unit
      val store    : int -> handle -> unit
      val retrieve : int -> t
    end =
    struct
      type t = (module S) and handle = unit Ctypes.ptr
      let register = Ctypes.Root.create
      and release  = Ctypes.Root.release
      and store    = LL.store_module
      and retrieve i = Ctypes.Root.get (LL.retrieve_module i)
    end

Findlib provides a convenient way to build the example:

    ocamlfind c c_bit.c
    ocamlfind mklib -o example -package ctypes.foreign c_bit.o ocaml_bit.ml

Finally, here's everything working in the top level:

    # #use "topfind";;
    - : unit = ()
    (* ... *)
    # #require "ctypes.foreign";;
    (* ... *)
    # #load "example.cma";;
    # open Ocaml_bit;;
    # let handle = HL.register
         (module struct
           let say_hello () = print_endline "hello"
           and add = (+)
         end);;
    val handle : Ocaml_bit.HL.handle = <abstr>
    # HL.store 0 handle;;
    - : unit = ()
    # let handle2 = HL.register
         (module struct
           let say_hello () = print_endline "hi"
           and add = (-)
         end);;
    val handle2 : Ocaml_bit.HL.handle = <abstr>
    # HL.store 1 handle2;;
    - : unit = ()
    # module M1 = (val HL.retrieve 0);;
    module M1 : Ocaml_bit.S
    # module M2 = (val HL.retrieve 1);;
    module M2 : Ocaml_bit.S
    # M1.say_hello ();;
    hello
    - : unit = ()
    # M2.say_hello ();;
    hi
    - : unit = ()

I hope that helps a bit!  Feel free to follow-up, of course, if
anything's not clear (e.g. how to call back into OCaml from C).

Kind regards,

Jeremy.

From matthieu.dubuget@gmail.com  Sun Dec  6 16:26:29 2015
Return-Path: <matthieu.dubuget@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 15EF03C029
 for <ctypes@lists.ocaml.org>; Sun,  6 Dec 2015 16:26:29 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1717726 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.48 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (matthieu.dubuget[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wm0-f48.google.com ([74.125.82.48]:36155)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1a5cNz-0003xi-k7 (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <matthieu.dubuget@gmail.com>); Sun, 06 Dec 2015 16:42:07 +0000
Received: by wmww144 with SMTP id w144so114283278wmw.1
 for <ctypes@lists.ocaml.org>; Sun, 06 Dec 2015 08:42:07 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=to:from:subject:message-id:date:user-agent:mime-version
 :content-type:content-transfer-encoding;
 bh=nLxuEArJYNHnb07IYoSD1D23FNDDna39SL8UmDpPbYY=;
 b=egrb7ZrRdJob715FnDvKpCF5I+tIj54XwC+cLJCEo/aLi824ax8kQnGL3krYRIV66x
 2pSNlFF0yD94ITFr0crD2J2JDumbGg15rz8TttYf/F7qgSJEbpeVB+6yAVfoUmMxHXU1
 UW5AnzsZU5mLmDWB04xN137XpuQLPri3k9vwBoWB0wPqsOvQtzYGhRi0sCMAiMhVdE/k
 tsd68weTlYv8vCa43y54TGuE0XZoh/gW+7Nmg6Xqjwt86huBUmGT1XRKQR0iPHDDSL3I
 StZXq56EXL3VIOXcH74wSD3khP8VfZQaF5DfRUzRHFtbyBvWyC3gK7KST9oJOkTpXDg7
 m4wQ==
X-Received: by 10.194.200.134 with SMTP id js6mr32592535wjc.114.1449420126874; 
 Sun, 06 Dec 2015 08:42:06 -0800 (PST)
Received: from [192.168.0.14] (dubuget.fr. [88.184.200.161])
 by smtp.gmail.com with ESMTPSA id yr7sm9942430wjc.9.2015.12.06.08.42.06
 for <ctypes@lists.ocaml.org> (version=TLSv1/SSLv3 cipher=OTHER);
 Sun, 06 Dec 2015 08:42:06 -0800 (PST)
To: ctypes@lists.ocaml.org
From: Matthieu Dubuget <matthieu.dubuget@gmail.com>
X-Enigmail-Draft-Status: N1110
Message-ID: <5664655D.80002@gmail.com>
Date: Sun, 6 Dec 2015 17:42:05 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:38.0) Gecko/20100101
 Thunderbird/38.4.0
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 8bit
Subject: [ocaml-ctypes] Wrapping string into Bigarray
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sun, 06 Dec 2015 16:26:29 -0000



Hello,

I'm posting here some code samples that helped me a lot, hoping they
could be of any help to somebody else. They were kindly provided by
Jeremy Yallop
(https://github.com/yallop/ocaml-ctypes-inverted-stubs-example/issues/11).

I have an OCaml function returning a string, and I wanted to deliver
this function through a shared library to be called by a foreign language.

My first naive try was to do something like this (see
https://github.com/yallop/ocaml-ctypes-inverted-stubs-example for a
complete example of how to wrap OCaml code in a shared library):

```OCaml
let () = I.internal "compute" (string @-> returning string)
MyLibrary.my_function
```

The problem with this solution is that the interface of the `compute`
function is:

```C
char* compute(char* x17);
```

There is no contract on how to free the memory after it has been used,
which is problematic.

Since I'm a bit lazy, instead of registering the string as a gc root,
and exposing a deallocation function to C, I decided to delegate all
the work (allocation/deallocation) to the client of my library. The
interface being something like:

```C
int compute(char * question, char * answer_buffer, size_t buffer_sz);
```

Jeremy proposed two solutions. The first one makes use of Bigarrays:

```OCaml
let compute question buffer buffer_sz =
  let int_sz = Unsigned.Size_t.to_int buffer_sz in
  let ba_buffer = Ctypes.(bigarray_of_ptr array1) int_sz Bigarray.char
buffer in
  let computed_size = ... in
  if computed_size > int_sz then null
  else  ...
```

and the second one is based on Ctypes.CArray module:

```OCaml
let compute question buffer buffer_sz =
  let int_sz = Unsigned.Size_t.to_int buffer_sz in
  let ba_buffer = Ctypes.CArray.from_ptr buffer int_sz in
  let computed_size = ... in
  if computed_size > int_sz then null
  else ...
```

I choosed the first approach with great success. Since my function is
to be called more than once, I choosed to have the client allocate two
buffers to be reused. 1 for the question, and another to be filled
with the answer:

```OCaml
(* char Ctypes.ptr -> Unsigned.Size_t.t -> char Ctypes.ptr ->
Unsigned.Size_t.t -> int *)
let calcul_buffers question question_sz buffer buffer_sz =

  let ans = string_from_ptr question ~length:(Unsigned.Size_t.to_int
question_sz)
                 |> Calcback.traite in
  let ans_sz = Bytes.length ans in

  let int_buffer_sz = Unsigned.Size_t.to_int buffer_sz in
  let ba_buffer = Ctypes.(bigarray_of_ptr array1) int_buffer_sz
Bigarray.Char buffer in

  for i = 0 to pred (min int_buffer_sz ans_sz) do
    Bigarray.Array1.set ba_buffer i ans.[i]
  done;

  ans_sz
```

The returned `int` is the size needed to return the complete answer:
this is also the job of the client to increase the size of the buffer
if needed.

In order to avoid the for loop, I tried to wrap `(ans:string)` into a
Bigarray, in order to use a `blit` (I may be wrong, but I think it
ends as a memcopy, instead of a char by char copy).

The trick was to coerce the string into a `(ptr char)`.

```OCaml
let compute question question_sz buffer buffer_sz =
  let ans =
    string_from_ptr question ~length:(Unsigned.Size_t.to_int question_sz)
    |> MyLibrary.my_function in
  let ans_sz = Bytes.length ans in

  let int_buffer_sz = Unsigned.Size_t.to_int buffer_sz in
  let size_transmitted = min int_buffer_sz ans_sz in

  Bigarray.Array1.blit
    (bigarray_of_ptr array1 size_transmitted Bigarray.char (coerce
string (ptr char) ans))
    (bigarray_of_ptr array1 size_transmitted Bigarray.Char buffer);

  ans_sz
```

Ctypes is really nice. And I thank Jeremy for his kind support.

Happy hacking.

-- 
Matthieu Dubuget
Guide d’autodéfense numérique : http://guide.boum.org

From yallop@gmail.com  Sat Feb 20 22:36:43 2016
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 243143C076
 for <ctypes@lists.ocaml.org>; Sat, 20 Feb 2016 22:36:43 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1729957 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.192.41 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qg0-f41.google.com ([209.85.192.41]:36598)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1aXGS8-000btQ-gD (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Sat, 20 Feb 2016 22:56:40 +0000
Received: by mail-qg0-f41.google.com with SMTP id y9so88885633qgd.3
 for <ctypes@lists.ocaml.org>; Sat, 20 Feb 2016 14:56:39 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:date:message-id:subject:from:to:content-type;
 bh=gVLjdBfN72BhX4H77lg38LnUR9HEC2wQv+94zYkcSEo=;
 b=n8pSsRYEKJh8c59TxqIHmlwnODicUdNHVmO5HhCYvMardzZBC/xj5X3ISVJzgT6ry5
 l8TqX1DdZQKiX+H8+tQ8VoZgY8AYShV8GBHRHTAR7pLsBkscAXyb8EV9cdxw0/RfnbyH
 tkgxXXWo0ii7InWIqqtyFohnNbh3T3rdpqZ8llEhTD+uRIyAwBO60pDiGNUsi+Pmfn1l
 FMxkylx1Io8mYJ6w6yr3IJ0FYBZcx4za7eKTaNT9IpKvhkEWCw12GIHpFonqdtGBZt+S
 E8h6W0y38TnLSeJDwQOgMSLB/NYTL7n6xfGUP2EGii40vec6NFuj7X8TKupBMnqLMV4g
 u0MA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:date:message-id:subject:from:to
 :content-type;
 bh=gVLjdBfN72BhX4H77lg38LnUR9HEC2wQv+94zYkcSEo=;
 b=lXWw77CgS/1D7QW6D2fnFRaTQ4miiOjiyKcqjmq0d9OWgZP6rN36GSsme0AOunXQQu
 vwW9aG+hSn91K5pMkc5lFlU7P3nvc/X7wdMq533damK2+nlQSPJqcftf+EBpLDZpylwg
 80jnfbWF47JsNTEShxyGQoLRBsUdTAgsz+Moq1OZUdQGoPHzIR5bKUEp81L2fzb7woHl
 dBW4mgmtOiTO6foXW91A4A79fhM+YmnWJemXdV5g3MZH0EEDWfYRJIx3YAqubWzuz8p5
 DOC+Ci8BZXGyzfV+kmUTxCCUL2j0O+jjS+RKHJQe4qwN+wlot5dF0QX5mJuYTZt6ANdQ
 qEmg==
X-Gm-Message-State: AG10YOSnenVPFDhF+2He1FOegjVryv2JCscGAJLjwNrxUN8oZtosCl+u4HLQ2Z0C4SmugxaXDrGJsJsdFUUbYQ==
MIME-Version: 1.0
X-Received: by 10.140.98.197 with SMTP id o63mr25636773qge.78.1456008999154;
 Sat, 20 Feb 2016 14:56:39 -0800 (PST)
Received: by 10.55.201.68 with HTTP; Sat, 20 Feb 2016 14:56:39 -0800 (PST)
Date: Sat, 20 Feb 2016 22:56:39 +0000
Message-ID: <CAAxsn=HeuvA7vCwh11sKuRMK_2brFkOCRC=VnBdV-BW36R4QAQ@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: ctypes <ctypes@lists.ocaml.org>
Content-Type: text/plain; charset=UTF-8
Subject: [ocaml-ctypes] ocaml-ctypes 0.4.2 released
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sat, 20 Feb 2016 22:36:43 -0000

ocaml-ctypes 0.4.2 is now available via OPAM.  It's a bug-fix release
which fixes a problem with callbacks into OCaml that re-acquire the
runtime lock while multiple threads are running.  If you're using
Foreign.funptr with the ~runtime_lock argument then I recommend
upgrading.

From yallop@gmail.com  Sun Feb 28 00:36:18 2016
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 63E243C1C4
 for <ctypes@lists.ocaml.org>; Sun, 28 Feb 2016 00:36:18 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1732432 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.192.42 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qg0-f42.google.com ([209.85.192.42]:32979)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1aZpf5-0009sW-6U (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Sun, 28 Feb 2016 00:56:39 +0000
Received: by mail-qg0-f42.google.com with SMTP id d32so36433115qgd.0
 for <ctypes@lists.ocaml.org>; Sat, 27 Feb 2016 16:56:38 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc; bh=4KlG/PEnEUpZjpUJyYg9G162Q2MD+ubdnaDsAlYcT7c=;
 b=rJ3v71AU5Tc6VQjrfauZSX3J8z/BO7b0WFhq6zOSwBksrqvxfAE2ploMAT8wKNfXiE
 MyEe1GdQ2jhlUgOi0CQoorkZJLxhqLc1WRH/f+Zc9RbVTYOyNdGjxXr+7hRcr2hV82PP
 D0vT2ShIVRGY22GHatGTlGoEEV4fOJx3jBQVlL1QyQYqTHeXsPOJ8+S3CPnYjC8T2A07
 AXCHMsH6W3pSVo5TnyCw5CIFDuGsdUED/1sKwFK6bpbcV0zlyi62IJRQpMUQCu7NOu6+
 hq0wdXF+vzQWTGfQBEzw0pv/aP3Qy0LOwnTvOStCfrTo8v5h9fIWNGAULWy7JHfiQS6F
 eDXg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:in-reply-to:references:date
 :message-id:subject:from:to:cc;
 bh=4KlG/PEnEUpZjpUJyYg9G162Q2MD+ubdnaDsAlYcT7c=;
 b=eE80dAMu1w23998qE3ukrU8YxsEqxXVM/i0DIpMYBu5fWGvSNahdChz3APsYfy1nJC
 Zo6JHrcVBu4IOGLrE8Zj1v8b0jG7RMd/Lt70hGf5fxpKDSUwd6ByWYrL75412IDFEf2w
 1vymxvG+CpjA7IeceBVqmcoo6R/7k5k5SI+3hgetc9rr0SDckhk2xiddigTtTd3kM9Vj
 vzxf8+4yYowfncKvxMDlfCeu7FXaCocGtWrQlM+UJ4fMgEnEjs2Repf7yELBSk9tIKi4
 vbpGijt5GZ4fV0bCzwgX7NOHGiqHJuuvAMeMustL6JX4Nwf6knW50ida9zSMBk1e8EyN
 l2+Q==
X-Gm-Message-State: AD7BkJJci9kPpIj11z3cuKsVJMICNZPPPYDkgvIFepNEsVlzFYpTUt2teIfPEkASXoSnLV6fwt7eWlSFOZnWUg==
MIME-Version: 1.0
X-Received: by 10.140.159.203 with SMTP id f194mr11714318qhf.18.1456620997978; 
 Sat, 27 Feb 2016 16:56:37 -0800 (PST)
Received: by 10.55.157.74 with HTTP; Sat, 27 Feb 2016 16:56:37 -0800 (PST)
In-Reply-To: <86ziulheva.fsf@gmail.com>
References: <86ziulheva.fsf@gmail.com>
Date: Sun, 28 Feb 2016 00:56:37 +0000
Message-ID: <CAAxsn=GHFANVfrPsLVH8qD0+JswvykF4-Pfp2jseXE_NvhMj1Q@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Malcolm Matalka <mmatalka@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes@lists.ocaml.org, caml-list@inria.fr
Subject: Re: [ocaml-ctypes] [Caml-list] ctypes - Advice for binding big
	structs?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sun, 28 Feb 2016 00:36:18 -0000

Dear Malcolm,

On 28/02/2016, Malcolm Matalka <mmatalka@gmail.com> wrote:
> I have a large/complex struct I am trying to create bindings for
> operations on it in Ocaml.  I have an API that tells me how many bytes
> the struct is so I can allocate it just fine and pass it around to C
> functions I've bound with ctypes.  But some data in it is accessed via
> members.  I started implementing a structure in ctypes for it, but it's
> getting large and awkward.  Are there any best practices around doing
> this?

The best approach is to use the Cstubs_structs module, which allows
you to declare just the parts of the structs that you need to access
in your program, and which generates code that uses the C struct
declarations to work out sizes, alignments, field offsets, etc.  The
basic API is the familiar set of functions "structure", "field" and
"seal" from the Ctypes module, but the build process is a little more
involved.  However, in return for the more complex build, all the
issues that you're concerned about are addressed.

The Cstubs_structs API is not yet very well documented, but there's a
brief guide with examples in the pull request that introduced it:

   https://github.com/ocamllabs/ocaml-ctypes/pull/62

> Some concerns I have:
>
> - It seems fragile - a different version of the library might have
>   different members in the struct so keeping my ocaml code in-synch
>   seems error prone.

The Cstubs_structs module addresses this by using generated C code to
determine the offsets of fields each time you build your library.

> - It's annoying because the struct has a lot of members I don't care
>   about in my case.  I only want access to a few members that have
>   important details.

Since Cstubs_structs retrieves layout rather than computing it you
only need to declare the members that you care about.

> - The struct is large with lots of types that I don't necessarily want
>   to create so creating the struct becomes somewhat awkward.  If I know
>   the size of the types I might be able to pretend it's an array of N
>   chars or something instead of trying to implement the type just to
>   fill out this struct, but I don't know if that is valid.

Again, since Cstubs_structs retrieves struct layout and alignment
information from C, you can use Ctypes.make to create struct values,
even if you haven't declared all the fields.

Kind regards,

Jeremy.

From mmatalka@gmail.com  Sun Feb 28 18:50:05 2016
Return-Path: <mmatalka@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 6A0963C0CC
 for <ctypes@lists.ocaml.org>; Sun, 28 Feb 2016 18:50:05 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1732432 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.53 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (mmatalka[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wm0-f53.google.com ([74.125.82.53]:38690)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1aa6jc-000Xl0-28 (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <mmatalka@gmail.com>); Sun, 28 Feb 2016 19:10:29 +0000
Received: by mail-wm0-f53.google.com with SMTP id l68so33387153wml.1
 for <ctypes@lists.ocaml.org>; Sun, 28 Feb 2016 11:10:28 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=from:to:cc:subject:references:date:in-reply-to:message-id
 :user-agent:mime-version;
 bh=Hs/4yQMNjpOTaZHtX726NSxLRdqQlJOtTVir3u6DWPQ=;
 b=p4FYOWm6i5XVTP1ibvoI3Cp657bk3DopvxC65f6LXFWXaHxkqXQ1QtCI2tZg1aryxL
 SyOGFCfT7mwUmzhvKnsPs59RWGf8YLlxuaf361S4I7ua0DYogveB00jfSae4qUsf+H+L
 Z+c3vx9xe2Fyif+/MCT+bjxrfgO+OhAX4Nnw9n1ggwe+rhNS7d0Ig3QZ7yjQnTDW+3A7
 bvEavbywGM/Y/0tPvGkZ6BL+W+pVwKdcTFfO5j7ClpgVAT/t9ctHuscteXBNWPGvERnu
 dS+HREwf2SrFUiYDBjcaTCdV/oanTWwaW84EiP7XzusggAQ5RvG2cGWfQ6CnY0ujIycb
 mShQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:from:to:cc:subject:references:date:in-reply-to
 :message-id:user-agent:mime-version;
 bh=Hs/4yQMNjpOTaZHtX726NSxLRdqQlJOtTVir3u6DWPQ=;
 b=E0kRK5B/tBmDT9wMC7qGofhCEhEvaCsAyGGIrE1gSx/MsUXSZF5yZgQePj9YyMAn10
 AeAqU8ykM5WG2mrz+/nxdnOG9G0TbyfDvmLB3uAyheO9bcyi1n7Dmt7dF73vbk7qBbMV
 XjpXLiHTywx13lQVNKiTQuhIrZZ9entyW2krAMUHEVLV7xVd9gZFjqVbRk5+PCi3bpbG
 xKrrpot8ovbITDmFhgkjILETSD7dKnXDaYCOU6df9kvLiv9D2rz7U5pgD3O4TVWW/Sst
 chKi7hCjTLmrIud9eD6ndtyep2ia8Ck5Zhz1abzmMuGpgzYg9HDHwnwCWxEaR4qF/2FC
 rJTQ==
X-Gm-Message-State: AD7BkJKcZrfYM7hdF1QSmZKyqTr7aQIlGJtcQTlNoptIg0362s0sAsNosDaW/Hudafhk/w==
X-Received: by 10.194.86.130 with SMTP id p2mr10703460wjz.93.1456686628302;
 Sun, 28 Feb 2016 11:10:28 -0800 (PST)
Received: from localhost ([37.153.108.22])
 by smtp.gmail.com with ESMTPSA id k4sm12738173wmc.12.2016.02.28.11.10.27
 (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Sun, 28 Feb 2016 11:10:27 -0800 (PST)
From: Malcolm Matalka <mmatalka@gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
References: <86ziulheva.fsf@gmail.com>
 <CAAxsn=GHFANVfrPsLVH8qD0+JswvykF4-Pfp2jseXE_NvhMj1Q@mail.gmail.com>
Date: Sun, 28 Feb 2016 19:10:21 +0000
In-Reply-To: <CAAxsn=GHFANVfrPsLVH8qD0+JswvykF4-Pfp2jseXE_NvhMj1Q@mail.gmail.com>
 (Jeremy Yallop's message of "Sun, 28 Feb 2016 00:56:37 +0000")
Message-ID: <86si0chcrm.fsf@gmail.com>
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/24.5 (berkeley-unix)
MIME-Version: 1.0
Content-Type: text/plain
X-Mailman-Approved-At: Sun, 28 Feb 2016 18:54:16 +0000
Cc: ctypes@lists.ocaml.org, caml-list@inria.fr
Subject: Re: [ocaml-ctypes] [Caml-list] ctypes - Advice for binding big
	structs?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sun, 28 Feb 2016 18:50:05 -0000

Jeremy Yallop <yallop@gmail.com> writes:

> Dear Malcolm,
>
> On 28/02/2016, Malcolm Matalka <mmatalka@gmail.com> wrote:
>> I have a large/complex struct I am trying to create bindings for
>> operations on it in Ocaml.  I have an API that tells me how many bytes
>> the struct is so I can allocate it just fine and pass it around to C
>> functions I've bound with ctypes.  But some data in it is accessed via
>> members.  I started implementing a structure in ctypes for it, but it's
>> getting large and awkward.  Are there any best practices around doing
>> this?
>
> The best approach is to use the Cstubs_structs module, which allows
> you to declare just the parts of the structs that you need to access
> in your program, and which generates code that uses the C struct
> declarations to work out sizes, alignments, field offsets, etc.  The
> basic API is the familiar set of functions "structure", "field" and
> "seal" from the Ctypes module, but the build process is a little more
> involved.  However, in return for the more complex build, all the
> issues that you're concerned about are addressed.
>
> The Cstubs_structs API is not yet very well documented, but there's a
> brief guide with examples in the pull request that introduced it:
>
>    https://github.com/ocamllabs/ocaml-ctypes/pull/62
>

Great, with some small modifications this worked like a charm.


>> Some concerns I have:
>>
>> - It seems fragile - a different version of the library might have
>>   different members in the struct so keeping my ocaml code in-synch
>>   seems error prone.
>
> The Cstubs_structs module addresses this by using generated C code to
> determine the offsets of fields each time you build your library.
>
>> - It's annoying because the struct has a lot of members I don't care
>>   about in my case.  I only want access to a few members that have
>>   important details.
>
> Since Cstubs_structs retrieves layout rather than computing it you
> only need to declare the members that you care about.
>
>> - The struct is large with lots of types that I don't necessarily want
>>   to create so creating the struct becomes somewhat awkward.  If I know
>>   the size of the types I might be able to pretend it's an array of N
>>   chars or something instead of trying to implement the type just to
>>   fill out this struct, but I don't know if that is valid.
>
> Again, since Cstubs_structs retrieves struct layout and alignment
> information from C, you can use Ctypes.make to create struct values,
> even if you haven't declared all the fields.
>
> Kind regards,
>
> Jeremy.

From yallop@gmail.com  Mon Feb 29 08:21:09 2016
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 9826B3C14A
 for <ctypes@lists.ocaml.org>; Mon, 29 Feb 2016 08:21:09 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1732432 
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.192.46 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qg0-f46.google.com ([209.85.192.46]:36481)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1aaJOY-000scg-8g (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Mon, 29 Feb 2016 08:41:35 +0000
Received: by mail-qg0-f46.google.com with SMTP id y9so111504625qgd.3
 for <ctypes@lists.ocaml.org>; Mon, 29 Feb 2016 00:41:34 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc; bh=6WvxIx+Ip36bWoV8AC/3kFoKhnp7pKnWTZ9aNmNWzZY=;
 b=ERv8HZGWPDV5mHxdReLld19AjZrCkYaU2RtIJ7/jzKgVTODx5NvggdsyYEPxy4nvnS
 qBXZri/1x48QBoyzHCUj5/OL5BlZMY0IUrAdaBnGyCwwLENXla3ypNls7mvMKrS0US1H
 kOQz7aX+dhnG5WmF4I5bX8y9PJ35TY+aKXrKuIPCSRRmbIoN7it192n3O4DA3k6bHZKR
 8xGRoxICCUfhNQWr7H/a7CPx1qg2UeauyoZTWWoQQDNwmhcIBnAKnF/oPsutCtG61PG8
 G/msJJ5XXdSPYSdDY4MsOg8n8giFaJIHgqE61lak1nIETxxkRUC8Ffo/gUetOdfKMfLO
 HuzQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:in-reply-to:references:date
 :message-id:subject:from:to:cc;
 bh=6WvxIx+Ip36bWoV8AC/3kFoKhnp7pKnWTZ9aNmNWzZY=;
 b=CF+G1OjFIRAFuoGBPUnuh6eQ+0dpwxRTNMnwjJz+zDYOPKjRZi0hbbILusbqdmdVqH
 d4eKd8cCjoeUc+9IbIimqFePwWf7in9dt5cw2suHRnrHsIVe6OqZFcUHLWEWfXL2LvoZ
 bBJrJP2PDAjL22qZIoCRIX4s7H/os14BHdXNRcM/Rb1wEzG1yczEBjvIYdqFD52yBI3P
 BVQb9iOBcngL9KQy0TzNdfV0Hg3sH0lzA099yJAKp0PPPmxEZrcH/L4iJFUr04ktXl1c
 flSfgscJZtxDArxsZ+nyo93wjvHHH16BFEo2nLTCoTMz4hEFGuJElEkej7KdE6ACJDG6
 OClQ==
X-Gm-Message-State: AD7BkJLZmn/GUztZcM3VHg0LPB5edCaTvUwkB0Yh+nvWaiWb/2rF1E0D21JMU2vfuqqwvbX+UKRWOBkMjA3T1Q==
MIME-Version: 1.0
X-Received: by 10.140.175.136 with SMTP id v130mr18662179qhv.74.1456735293713; 
 Mon, 29 Feb 2016 00:41:33 -0800 (PST)
Received: by 10.55.157.74 with HTTP; Mon, 29 Feb 2016 00:41:33 -0800 (PST)
In-Reply-To: <86oab0hcjq.fsf@gmail.com>
References: <86oab0hcjq.fsf@gmail.com>
Date: Mon, 29 Feb 2016 08:41:33 +0000
Message-ID: <CAAxsn=HRWGpZvXThWwAn24nhj8DX9Tmb9yey6ua06Ca3iRNbVg@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Malcolm Matalka <mmatalka@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>, Caml List <caml-list@inria.fr>
Subject: Re: [ocaml-ctypes] [Caml-list] ctypes - to string or to bigarray?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 29 Feb 2016 08:21:09 -0000

On 28 February 2016 at 19:15, Malcolm Matalka <mmatalka@gmail.com> wrote:
> I'm writing bindings for a library that is just doing I/O and wondering
> what the suggested best practice is around using string or bigarray.  It
> seems like using Bigarray is probably the most versatile interface.
> People can decide to do the copying themselves or just use Bigarray
> everywhere.

Yes, Bigarray is the more versatile choice, and probably the better default.

> Are there any other things to consider?  Suggestions?

Since ctypes bindings are just OCaml programs, one possibility is to
abstract over the choice of storage.  David Sheets's libsodium
bindings are a good example of this approach; for example, here's a
functor which builds bindings for half a dozen functions based on an
abstract "Sodium_storage.S" signature:

    https://github.com/dsheets/ocaml-sodium/blob/95d26a85/lib_gen/sodium_bindings.ml#L64-L76

Elsewhere in the library are implementations of Sodium_storage.S for
Bigarray and for Bytes:

    https://github.com/dsheets/ocaml-sodium/blob/95d26a85/lib/sodium_storage.ml

One pleasant aspect of this approach is that the abstraction over
storage type doesn't cause any loss of type safety.  You can use all
the typed abstraction facilities of OCaml to construct your binding
descriptions, and the generated C code is checked against the headers
for the bound library by the C compiler.

From mmatalka@gmail.com  Thu Mar 17 17:48:42 2016
Return-Path: <mmatalka@gmail.com>
X-Original-To: Ctypes@lists.ocaml.org
Delivered-To: Ctypes@lists.ocaml.org
Received: from ppsw-43.csi.cam.ac.uk (ppsw-43.csi.cam.ac.uk [131.111.8.143])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id E88E83C14A
 for <Ctypes@lists.ocaml.org>; Thu, 17 Mar 2016 17:48:42 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1732432 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.42 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (mmatalka[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wm0-f42.google.com ([74.125.82.42]:36248)
 by ppsw-43.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1agcN5-0000mj-nV (Exim 4.86_36-e07b163) for Ctypes@lists.ocaml.org
 (return-path <mmatalka@gmail.com>); Thu, 17 Mar 2016 18:10:07 +0000
Received: by mail-wm0-f42.google.com with SMTP id l124so4625846wmf.1
 for <Ctypes@lists.ocaml.org>; Thu, 17 Mar 2016 11:10:07 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=from:to:subject:date:message-id:user-agent:mime-version;
 bh=99aZdK7CZoDhgDjF/2z7w4OoRsmFe3cj9fw/pwjMQV8=;
 b=xSrbiXGfE/4CSZawOMnPdLEnqo3eKSSewxGYb5gqeaJwsiPjbxJY1fgs4lDSIefP+w
 9Ykx3sjoApmRw7WH4F7VZQjMxbvJLyaVhS3hG/swyPu1uUZ/uV1q1WcthCx702s4VcUH
 wkc/Lz5NHXcSOOm3dacKwfsLl9H3J9L8hVpS4lKM5TMVdRjt3bROBnpuh2pPzFnoSV4O
 yprFbKUfVh/nJvJuqNkbhkEbdzZvyk9N2cLPe8Hl7GWOP2RU88sOZopQkteLmHgwJbww
 C7/o+07nY6IMbG/DxvrtX3+pCXGi66w5KtIUCCRY276G3kbixARo0OC/Q/hC5VEv+BRe
 bD5w==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:from:to:subject:date:message-id:user-agent
 :mime-version;
 bh=99aZdK7CZoDhgDjF/2z7w4OoRsmFe3cj9fw/pwjMQV8=;
 b=nBTb5Jkg5Xhz1WnSBBW8pafHgPHRDUJ0HL0bjwg0khfkHJQTZzZIrz/xBQFUFLJBph
 F6FRlnUs9yxPR253cmTjiaX5lsrJDxZTKcEcRNciehvxcwTidSBNtpkdVxGDnUX/Mx3G
 cBETlCvszJ1SFo+BVGchSFr1etOmVeQ7PKlP4FuXcfKSA6T0S/kTaKQKJWXhLidukoZM
 PnIQ80w5y+ZSwZP3LgCDxQv1aU0ZWpFJaNIOu/rLTY7qisKIRyEiK2j8kJQACoLedFmx
 r1n7KSb7BdHU7IiiKZvb/dFNXe3NGHk08UjoX+pkrN/GeU1IxwxXV4pB7943IKCeGy5A
 llTw==
X-Gm-Message-State: AD7BkJLmZ7jdtDfURNseS1R0XsU1zTop2xGoq1GgjYL7Ke5Kmhg2YEdyrQDoJT4UjtrSHg==
X-Received: by 10.194.190.6 with SMTP id gm6mr11646293wjc.115.1458238206969;
 Thu, 17 Mar 2016 11:10:06 -0700 (PDT)
Received: from localhost ([37.153.108.22])
 by smtp.gmail.com with ESMTPSA id ls5sm8735815wjb.33.2016.03.17.11.10.06
 for <Ctypes@lists.ocaml.org>
 (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Thu, 17 Mar 2016 11:10:06 -0700 (PDT)
From: Malcolm Matalka <mmatalka@gmail.com>
To: Ctypes@lists.ocaml.org
Date: Thu, 17 Mar 2016 18:09:21 +0000
Message-ID: <86poutvuwe.fsf@gmail.com>
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/24.5 (berkeley-unix)
MIME-Version: 1.0
Content-Type: text/plain
Subject: [ocaml-ctypes] Next release
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 17 Mar 2016 17:48:43 -0000

Hello!

Is there a plan for the next release of Ctypes?  There are some pleasant
things in master I'd like in an official release, like exposing ssize_t
and time_t!

Thanks,
/Malcolm

From yallop@gmail.com  Fri Mar 18 06:25:45 2016
Return-Path: <yallop@gmail.com>
X-Original-To: Ctypes@lists.ocaml.org
Delivered-To: Ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id AB7FA3C14A
 for <Ctypes@lists.ocaml.org>; Fri, 18 Mar 2016 06:25:45 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1732432 
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.192.53 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qg0-f53.google.com ([209.85.192.53]:33302)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1agoBj-000IqM-2c (Exim 4.86_36-e07b163) for Ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Fri, 18 Mar 2016 06:47:12 +0000
Received: by mail-qg0-f53.google.com with SMTP id a36so60844131qge.0
 for <Ctypes@lists.ocaml.org>; Thu, 17 Mar 2016 23:47:11 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc; bh=QNzXYwWGsMiWnf2UVJ+0KPf0qBlXcwOv24jixChJtKY=;
 b=WLR75UzbjosQY3bV/fIhzTYmRdGwPP+ahLkBxyEIwxRgGhqGu65FweI7KS9SlnlRY/
 Rx2tGXnQS8xxqdoi54hsSpHowiDpOQjXEPrP70GnUGVN/bC84uGVBv4ACDxhfJJdby8s
 tTqwGw0eShMBgtETdkAmULLeu5R3jEyHuj4WNtdSmRSNr7ZXhI81uP80r4ghzNIJ9Lp8
 Kc0VJ6SQUcLMtffumY+jaVvhEgp9LceF+9XuZfyccoRRXpV+2RDvLKPtymwKV4VZkj5d
 JL2DqfR1kCCOnKjDECtD+uZo3ukmAizwcjiEAt09JabWB1zXl+g68bcJ0z+MeQDeB2lU
 NlAw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:in-reply-to:references:date
 :message-id:subject:from:to:cc;
 bh=QNzXYwWGsMiWnf2UVJ+0KPf0qBlXcwOv24jixChJtKY=;
 b=LrgNxVUg1i0WjNpyS9972J+d0kzJ18Bwd24RnkdK6dle+bnNEH9CpVi3onu9xF7ZpV
 vUB02/pCfY1Sl/uK8NmuMwkuHEtx8iefm0rze+1UDCKJAq+KoTW6OiMJBE5kzzTidhzq
 Uz2u66GiBZW9Z1yf8SwlHr2C4NtKCQ5scIdVeCDudSx1zoX1aolJpKYHNCOXxQPYbCfa
 3vkHtTU/aU2iO/asyTfgybFeDdfWGnuUXikKHaextXO3pAy4mp2ZoFE+rDYzzE9yjVik
 iFaQ/9FNaXuiT0X6rrFBgvdbhz1j3sSpWkqw2e5U8QjzxV5DoWxh5Mozl+pqP7hzhHSN
 dkAA==
X-Gm-Message-State: AD7BkJIvKuSTQ26CrGGnheN1dPTEj8ASWDa3TBVQxg49U/iq6s1vy+obC6t3NUyFlq1ejokTjM+462p4PlFV7g==
MIME-Version: 1.0
X-Received: by 10.140.175.136 with SMTP id v130mr20846939qhv.74.1458283630418; 
 Thu, 17 Mar 2016 23:47:10 -0700 (PDT)
Received: by 10.55.157.74 with HTTP; Thu, 17 Mar 2016 23:47:10 -0700 (PDT)
In-Reply-To: <86poutvuwe.fsf@gmail.com>
References: <86poutvuwe.fsf@gmail.com>
Date: Fri, 18 Mar 2016 07:47:10 +0100
Message-ID: <CAAxsn=G=SHAGkp6+461dPMkYXCpxeCrjJNwut=oPPOv=TYiXkA@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Malcolm Matalka <mmatalka@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <Ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Next release
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 18 Mar 2016 06:25:45 -0000

On 17 March 2016 at 19:09, Malcolm Matalka <mmatalka@gmail.com> wrote:
> Is there a plan for the next release of Ctypes?  There are some pleasant
> things in master I'd like in an official release, like exposing ssize_t
> and time_t!

Indeed: I think it's about time for a release.  I'll look at releasing
0.5.0 some time next week.

From mmatalka@gmail.com  Fri Mar 18 08:40:27 2016
Return-Path: <mmatalka@gmail.com>
X-Original-To: Ctypes@lists.ocaml.org
Delivered-To: Ctypes@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 69B653C040
 for <Ctypes@lists.ocaml.org>; Fri, 18 Mar 2016 08:40:27 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1732432 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.50 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (mmatalka[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wm0-f50.google.com ([74.125.82.50]:36248)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1agqI5-000XwV-9S (Exim 4.86_36-e07b163) for Ctypes@lists.ocaml.org
 (return-path <mmatalka@gmail.com>); Fri, 18 Mar 2016 09:01:54 +0000
Received: by mail-wm0-f50.google.com with SMTP id l124so22600882wmf.1
 for <Ctypes@lists.ocaml.org>; Fri, 18 Mar 2016 02:01:53 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=from:to:cc:subject:references:date:in-reply-to:message-id
 :user-agent:mime-version;
 bh=UpgWYW1FH9gQ39u28KL+zWvoe4ks8HoQnu8ImFCaEPQ=;
 b=VBQhUZNqiRVCHN2vvC02/kXrXt/GcxYx2g6snZqemBsW0063vb8/8rErP97S7fm1al
 sfRS0ron7CLypjBwVav+aDWNlO1xZTF+uwUbRFZAMdWdigpebwndAGhLT4/tR1Avi/aj
 WMffy1kEwPnSGmc6ktEM12V/PlqvqL9uCmJo96XXb6LiwwxZPHKofSs7N728ZeGd0qSX
 /wMQklTmBUhDs7YSndGpVpPUvy7W0MBhxVNdspPCpzdiPO2/bZvB+VZSBydV8/KZxrQg
 DomXmmyvPcZIAFe9EeaARC/ry5EnB3qhwZwYxagLW1thO0uqFLp9s4mOFHcu2KIvYwiK
 Xhsw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:from:to:cc:subject:references:date:in-reply-to
 :message-id:user-agent:mime-version;
 bh=UpgWYW1FH9gQ39u28KL+zWvoe4ks8HoQnu8ImFCaEPQ=;
 b=BVmnL29nPkn1qNpzawH6DjN7XEN6wjOZv+q7DCEwZogrWdVyIgORldmbgBpkn5fnxU
 QDPMC2O7QcZnkOZ8dSJa8v1ON6yklLCeUtPrtiDSKKMTVMUL2K0KqCiCVyZq3zjQeVsg
 2+/vE4DaKpW+pULyEs25QWjsJvNRqJGJPYMaVhfXcVmhJuNivObDezzTcehiKnbOtcpJ
 ZOthxcfcqku7MtERVf3ONiMK7NBhuIZ60H1gDQdbXLdUBA7cj+ejVPY1EC4IK+nS3Aeg
 tyKPlXcY2aZZexzI2RuoLl0ALDrwiVXhKsu/wSmejAug0vBn9XCL3J66jKbsC0ybZFJz
 ELxg==
X-Gm-Message-State: AD7BkJL0gZpXh0h/Nld3ZhZQaFdkFfVI2fTmugJfd5PwMjbfmxX5RQMjg//TyW2ebik5VA==
X-Received: by 10.28.95.131 with SMTP id t125mr41895160wmb.80.1458291713645;
 Fri, 18 Mar 2016 02:01:53 -0700 (PDT)
Received: from localhost ([37.153.108.22])
 by smtp.gmail.com with ESMTPSA id m202sm5945861wma.7.2016.03.18.02.01.52
 (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Fri, 18 Mar 2016 02:01:52 -0700 (PDT)
From: Malcolm Matalka <mmatalka@gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
References: <86poutvuwe.fsf@gmail.com>
 <CAAxsn=G=SHAGkp6+461dPMkYXCpxeCrjJNwut=oPPOv=TYiXkA@mail.gmail.com>
Date: Fri, 18 Mar 2016 09:01:06 +0000
In-Reply-To: <CAAxsn=G=SHAGkp6+461dPMkYXCpxeCrjJNwut=oPPOv=TYiXkA@mail.gmail.com>
 (Jeremy Yallop's message of "Fri, 18 Mar 2016 07:47:10 +0100")
Message-ID: <86lh5gw46l.fsf@gmail.com>
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/24.5 (berkeley-unix)
MIME-Version: 1.0
Content-Type: text/plain
Cc: ctypes <Ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Next release
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 18 Mar 2016 08:40:27 -0000

Jeremy Yallop <yallop@gmail.com> writes:

> On 17 March 2016 at 19:09, Malcolm Matalka <mmatalka@gmail.com> wrote:
>> Is there a plan for the next release of Ctypes?  There are some pleasant
>> things in master I'd like in an official release, like exposing ssize_t
>> and time_t!
>
> Indeed: I think it's about time for a release.  I'll look at releasing
> 0.5.0 some time next week.

Fantastic, thank you.

From yallop@gmail.com  Mon Mar 21 19:20:28 2016
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id A13F43C204
 for <ctypes@lists.ocaml.org>; Mon, 21 Mar 2016 19:20:28 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1732432 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.192.49 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qg0-f49.google.com ([209.85.192.49]:35090)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1ai5iI-000zP1-1B (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Mon, 21 Mar 2016 19:42:07 +0000
Received: by mail-qg0-f49.google.com with SMTP id y89so161773412qge.2
 for <ctypes@lists.ocaml.org>; Mon, 21 Mar 2016 12:42:06 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:date:message-id:subject:from:to;
 bh=MeV7idDDwE5A+0yXRNNOOtRT7j0Z2RwSAJfubKqySPE=;
 b=w2lCDAOnJG614UKLBI3rXATJaQb0TOoo8mX6W9dAIBoyl9/crHSbC1C+7Qub4AXsDG
 y8z0m401H/y+ZpBTnkoYM9F+vagU6+tynrTQdHNgaCKZHMu4lBcFQXwTnq0J6Fr+QXS3
 wpknO4TNDKiKPsruBh3GGSqmnQxJIoT7yurujc21IgFLD+M95LpcBGntXx3m3nYEoIPB
 A1HYNT51NALfTbLhEV+VlF1slrA+vM1hpxu0IMsEa1RjpS0E8XlEYU0MEvecF855wO17
 PWU++Z4uAjf0BTgrKo1n+YFkVijjddfcyn+ZhHPEuaeCilaCYjoBMP2HKdqXICILVuJm
 IsSg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:date:message-id:subject:from:to;
 bh=MeV7idDDwE5A+0yXRNNOOtRT7j0Z2RwSAJfubKqySPE=;
 b=SmUXKJ9+U/0Oq2b92sD+DOIQL/csyhP4O9Fn74s7pPxWaFzu+SIvLbmQDfu1QBI/eY
 NTIkw6pIgSV8OHNksV/z5bL4r5dLM3sLNmM9FghcSFJaYbZi3fCs3tLIlsPWyqKV9YLO
 m3ejmkuSoYQJoP6bHX9dCR+4vx9loovfufkEwUYKc4VnOvSUTjQpMuIFsf0Zq17hH9KM
 DL5Yapj1gVPzKdTPPkLQJk+xX+EL5QjoBMFV5gc7ReLcdy3qRM3fmI3sGf4IMy1LyRfi
 /tz2lxHVjTLumzjdtKAESYmxp8ooHps7sxG4634TJ+uIrkzhk7A6x0IpgCvDgsRe9zDV
 8cfg==
X-Gm-Message-State: AD7BkJLaKSksJ+E1AAlUeMattp4Yv604Kk+M6SzfTlLrbSYU9cUyEvO7QuciVMEKy9DRC6MD+oCYAcO7CT1Nqw==
MIME-Version: 1.0
X-Received: by 10.140.20.197 with SMTP id 63mr42124194qgj.18.1458589325299;
 Mon, 21 Mar 2016 12:42:05 -0700 (PDT)
Received: by 10.55.104.66 with HTTP; Mon, 21 Mar 2016 12:42:05 -0700 (PDT)
Date: Mon, 21 Mar 2016 19:42:05 +0000
Message-ID: <CAAxsn=GhYA9fF=SEvPBco4fPA8_mfw=WgUP6PxoeNKC7qQ-16g@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: ctypes <ctypes@lists.ocaml.org>, Caml List <caml-list@inria.fr>
Content-Type: text/plain; charset=UTF-8
Subject: [ocaml-ctypes] ANN: ocaml-ctypes 0.5.0,
 a library for calling C functions directly from OCaml
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 21 Mar 2016 19:20:28 -0000

I'm pleased to announce release 0.5.0 of ocaml-ctypes, which is now
available on OPAM.

== About ocaml-ctypes ==

The ocaml-ctypes library makes it possible to call C functions from
OCaml without writing any C code.  The core of the library is a set of
combinators for describing C types -- scalars, functions, structs,
unions, arrays, and pointers to values and functions.  Type
descriptions can then be used to bind native functions and values.
Here's a simple example:

    # let puts = foreign "puts" (string @-> returning int);;
    val puts : string -> int = <fun>
    # puts "Hello, world!";;
    Hello, world!

Ctypes includes many more features, including functions for retrieving
constants, values and details about object layout from C, a way of
building C libraries from OCaml modules, and a variety of binding
strategies such as dynamic linking and static stub generation. Further
information is available at the links below:

  Tutorial: https://github.com/ocamllabs/ocaml-ctypes/wiki/ctypes-tutorial
  Examples: https://github.com/ocamllabs/ocaml-ctypes/tree/master/examples
  Some packages using ctypes:
http://opam.ocaml.org/packages/ctypes/ctypes.0.5.0/
  API documentation: http://ocamllabs.github.io/ocaml-ctypes/
  Github repository: https://github.com/ocamllabs/ocaml-ctypes
  Direct download:
https://github.com/ocamllabs/ocaml-ctypes/archive/0.5.0.tar.gz

== Selected new features in 0.5.0 ==

* Improved support for various standard C and POSIX integer types
  (time_t, ssize_t, ptrdiff_t, intptr_t, uint8_t, and many more).

* Improved support for conversions between function pointers and other
pointer types

* Support for releasing the runtime lock in the Cstubs_inverted module.

* An experimental interface for managing OCaml roots.

See the release notes for the full list of changes:

    https://github.com/ocamllabs/ocaml-ctypes/blob/0.5.0/CHANGES.md

== Thanks ==

I'm grateful to Andreas Hauptmann, David Sheets, Etienne Millon,
Goswin von Brederlow, Leonid Rozenberg, @orbitz, Max Mouratov, and
Peter Zotov for contributions to this release.

From sp@orbitalfox.com  Tue Mar 22 09:52:28 2016
Return-Path: <sp@orbitalfox.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 6F1223C18E
 for <ctypes@lists.ocaml.org>; Tue, 22 Mar 2016 09:52:28 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1735925
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from w-202.cust-20351.ip.static.uno.uk.net ([95.172.232.202]:60816
 helo=portal.orbitalfox.com)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1aiJK7-000Wka-28 (Exim 4.86_36-e07b163) for
 ctypes@lists.ocaml.org
 (return-path <sp@orbitalfox.com>); Tue, 22 Mar 2016 10:14:08 +0000
Received: from Razor (unknown [213.205.253.10])
 by portal.orbitalfox.com (Postfix) with ESMTPSA id 2616AAA02B0;
 Tue, 22 Mar 2016 10:13:38 +0000 (UTC)
Date: Tue, 22 Mar 2016 10:12:57 +0000
From: sp@orbitalfox.com
To: Jeremy Yallop <yallop@gmail.com>
Message-ID: <20160322101257.GB29459@Razor>
References: <CAAxsn=GhYA9fF=SEvPBco4fPA8_mfw=WgUP6PxoeNKC7qQ-16g@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <CAAxsn=GhYA9fF=SEvPBco4fPA8_mfw=WgUP6PxoeNKC7qQ-16g@mail.gmail.com>
User-Agent: Mutt/1.5.24 (2015-08-30)
X-Mailman-Approved-At: Tue, 22 Mar 2016 10:33:18 +0000
Cc: ctypes <ctypes@lists.ocaml.org>, Caml List <caml-list@inria.fr>
Subject: Re: [ocaml-ctypes] [Caml-list] ANN: ocaml-ctypes 0.5.0,
 a library for calling C functions directly from OCaml
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 22 Mar 2016 09:52:28 -0000

On Mon, Mar 21, 2016 at 07:42:05PM +0000, Jeremy Yallop wrote:
> I'm pleased to announce release 0.5.0 of ocaml-ctypes, which is now
> available on OPAM.

Great work, thank you!

Are there areny plans to support C++ in a similar approach?

-- 
	SP

From yallop@gmail.com  Tue Mar 22 10:46:36 2016
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-43.csi.cam.ac.uk (ppsw-43.csi.cam.ac.uk [131.111.8.143])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id DD5B83C18E
 for <ctypes@lists.ocaml.org>; Tue, 22 Mar 2016 10:46:36 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1735925 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.192.50 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qg0-f50.google.com ([209.85.192.50]:32963)
 by ppsw-43.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1aiKAb-0005PO-mu (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 22 Mar 2016 11:08:17 +0000
Received: by mail-qg0-f50.google.com with SMTP id 51so9404379qgy.0
 for <ctypes@lists.ocaml.org>; Tue, 22 Mar 2016 04:08:17 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc; bh=bkSJ78cT8sF1XFVWFnQWqRcUR/alxEY+s/vZtJpODXg=;
 b=XF8REiXjaRMnvyCJ+u/7dRetmQU0HWsmLffhzSsjqJdSPwfFpoaiRauhPe1qkm3fGr
 9BMQdsIr5s0YXQgvs2aaE4vUUoCCA0OZ937YFgonqMGudinCSdzvx7A8AC8KtntbCYUp
 YB327+5vtWQMDXJR6kM7GCkVp8MPLRdLSfU31ImDSdYR8oyOmpm8/oSPbKpjH966N8qG
 HHepbOMN1XlqgizM2XyhYN2Dko3EdFgwg490xxD3stcyAArSoMxKkH6OMUIi5QFWuIj2
 o9CF7hklGg3yW/19VQTc7/ypoY6M8NTh8zfZBZ4ZCytOjrPfGpGI2mZfSxjLZz+yhMlX
 AeCA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:in-reply-to:references:date
 :message-id:subject:from:to:cc;
 bh=bkSJ78cT8sF1XFVWFnQWqRcUR/alxEY+s/vZtJpODXg=;
 b=YYwhAwJqsSSRUXOjuuK3h5OivHQ6nqDB5PSK0J/GbCAHoq37KJOFI1jAQgxL845nqo
 8QhKRO/BE5eWi6pBCJzmi+GbCIPwuhOTaEiGflVzHgSq5FHBHFAnicI78nSPetx+lVZ0
 XwtSb8OzZ1/87VTUUyvMRJNNnDboFetZ9vK9c2pBLgFoAGxFc/chD/WcARDGyy+pt8gY
 ltK5CvCIyb0GDtJG9U6Lo4z9E8RQdi/SAl7h7BbsFeNktNtTT/8ZIwey0LyTXefId2+c
 zQ8A2MUEtrOyzEvAq+ainnQJp7NktK+4HWmNSnsV+GiRUn0/WRLd9JDaIf7NZo9Lp19A
 BG+w==
X-Gm-Message-State: AD7BkJJpAsXjlPfmOH4skxNQ8E6jfGNYod4kBpNwVOg/xfIi/xmfmIXK3iDb6PFLjscJBq4ndVZQtSLBxiZqIQ==
MIME-Version: 1.0
X-Received: by 10.140.142.138 with SMTP id 132mr34100817qho.77.1458644896076; 
 Tue, 22 Mar 2016 04:08:16 -0700 (PDT)
Received: by 10.55.104.66 with HTTP; Tue, 22 Mar 2016 04:08:15 -0700 (PDT)
In-Reply-To: <20160322101257.GB29459@Razor>
References: <CAAxsn=GhYA9fF=SEvPBco4fPA8_mfw=WgUP6PxoeNKC7qQ-16g@mail.gmail.com>
 <20160322101257.GB29459@Razor>
Date: Tue, 22 Mar 2016 11:08:15 +0000
Message-ID: <CAAxsn=HJ5C7Kh82YnmG9Eh-j0e-Cy1wdcV98YwGBf+Xm_mU+Yg@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: sp@orbitalfox.com
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>, Caml List <caml-list@inria.fr>
Subject: Re: [ocaml-ctypes] [Caml-list] ANN: ocaml-ctypes 0.5.0,
 a library for calling C functions directly from OCaml
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 22 Mar 2016 10:46:37 -0000

On 22 March 2016 at 10:12,  <sp@orbitalfox.com> wrote:
> On Mon, Mar 21, 2016 at 07:42:05PM +0000, Jeremy Yallop wrote:
>> I'm pleased to announce release 0.5.0 of ocaml-ctypes, which is now
>> available on OPAM.
>
> Great work, thank you!
>
> Are there areny plans to support C++ in a similar approach?

It'd be possible to support some of C++ fairly straightforwardly.  For
example, binding overloaded functions should work with the current
ctypes release if you use stub generation (i.e. the Cstubs module),
and calling function templates will probably work too.  It'd be a bit
more work to support exceptions and member functions, but it could
probably be done.  C++ support is not currently high up on the
priority list, but I'd be happy to help out if someone wanted to start
looking at a design.

From yallop@gmail.com  Wed Mar 23 10:40:36 2016
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 5BB9C3C1CC
 for <ctypes@lists.ocaml.org>; Wed, 23 Mar 2016 10:40:36 +0000 (GMT)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1735925 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.192.45 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qg0-f45.google.com ([209.85.192.45]:34324)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1aigYK-000djk-1m (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Wed, 23 Mar 2016 11:02:20 +0000
Received: by mail-qg0-f45.google.com with SMTP id w104so8362376qge.1
 for <ctypes@lists.ocaml.org>; Wed, 23 Mar 2016 04:02:16 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:date:message-id:subject:from:to;
 bh=FMnkBHaIqkndewY8Fay0UjhPYVch4nuao573zj0SIWw=;
 b=QlOdn9e50zW1KEV27Hg/tfZ5QmFpYOa3e7tRmfL2vCqWhbEUPaG2XgSRzRgXlijbiA
 mn7vrjzRcs4nF2R3VImnYQ2MGhX8N9RZqNJLdrju519e2ZUyVF//t+6u5qq60eUrI/85
 VhRm0r/U4dVBUTiv07Ub5+163Dce9FOTKS2Z4EbpzirF4747YVrX3wBk6KMdKLl8uZUk
 lLyExzw6IXtKVkeyWsAGnSLqlzy1h9ByiXTfuM3sz1Cow3npFP3P/Vd1hMlc8+jEw2x/
 W6V7DI4gIzARb8720q8/o6SzwGtyOkkBN6gCPcVRpk7bvCwzQfEhKX6z3FcoyLHD55iv
 igiw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:date:message-id:subject:from:to;
 bh=FMnkBHaIqkndewY8Fay0UjhPYVch4nuao573zj0SIWw=;
 b=M8we5hciHPEZuzfHWoEnAVrTrysCBCH+I7FJpri3w7Dzm9El0qfU4vVt42dhcf6b38
 feN0A0YFYAez6fgEPN1oto0i0JqgfqYfNdGwUcJR5x5jWps2jD+IU65Qs1WbbEhvgpkn
 R7vZrz7dDeysbXyxPGBjJhKRekc/K9Yo3Jernyuvizp4MH7DAqqv73qQRSwnxEX3tuFi
 AK/DwT91zk5IZvSV3NtHay4FZS/sW7V8WQpFy9wW+tfOgpHNFW+6L/tCg8OeV6YsVKW8
 NWPVI2Apzoso/2pRFmhK4qvyMOz1CWxl6kX4P8DC1OO/DKNUEn4AIlcqYEqBTB8Q/OLd
 dKqA==
X-Gm-Message-State: AD7BkJKxyZqIhTsn3luI4cLce06DpRdOyjw0xlm4tDrwTIgLutDNDptFKdTafgxM25EeENRGiWVMapOlSzR5Ag==
MIME-Version: 1.0
X-Received: by 10.140.86.213 with SMTP id p79mr2384177qgd.76.1458730935584;
 Wed, 23 Mar 2016 04:02:15 -0700 (PDT)
Received: by 10.55.104.207 with HTTP; Wed, 23 Mar 2016 04:02:15 -0700 (PDT)
Date: Wed, 23 Mar 2016 11:02:15 +0000
Message-ID: <CAAxsn=EYMDSW9APWujOMeAMqwUVcZbuhTEBXin=_DmnWmmJ5kA@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: ctypes <ctypes@lists.ocaml.org>
Content-Type: text/plain; charset=UTF-8
Subject: [ocaml-ctypes] Dropping OCaml 4.00.* support
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 23 Mar 2016 10:40:36 -0000

At some point, possibly before the next release, I'd like to drop
support for OCaml 4.00.* from ctypes.  If this would cause you
significant inconvenience, please speak up, either in this thread, or
on the issue tracker:

    https://github.com/ocamllabs/ocaml-ctypes/issues/369

From mmatalka@gmail.com  Thu Mar 31 08:56:10 2016
Return-Path: <mmatalka@gmail.com>
X-Original-To: Ctypes@lists.ocaml.org
Delivered-To: Ctypes@lists.ocaml.org
Received: from ppsw-43.csi.cam.ac.uk (ppsw-43.csi.cam.ac.uk [131.111.8.143])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id A10653C23F
 for <Ctypes@lists.ocaml.org>; Thu, 31 Mar 2016 08:56:10 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1736402 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.66 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (mmatalka[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wm0-f66.google.com ([74.125.82.66]:33356)
 by ppsw-43.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1alXo4-0006DK-oi (Exim 4.86_36-e07b163) for Ctypes@lists.ocaml.org
 (return-path <mmatalka@gmail.com>); Thu, 31 Mar 2016 09:18:21 +0100
Received: by mail-wm0-f66.google.com with SMTP id i204so19670889wmd.0
 for <Ctypes@lists.ocaml.org>; Thu, 31 Mar 2016 01:18:20 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=from:to:subject:date:message-id:user-agent:mime-version;
 bh=6eLCJ3XP8gAtjoMV/YRIumwhR7BYC73gBBFyI5VvjQc=;
 b=vbwZaUbykcVmPbmG9jDzT6HXtUoijolt1IPH/wj0vC7EKKg8DD4NqPo0WCN9TJ28+u
 raek+Jrl8yCMB5yEr8tQMVFMlm9qp6gFPe6Oha6UjhCW/3Kb/VRtOzZagoOXLjeZNyzL
 qwEqeD4eCW/5fbvcMoGuAMZbAzhMQn1wd+7ZPM7GUgYM4PWJyJPYre/yNx462h1iQnkS
 x3nlugvSGhm3CHkrikcBDQZ91KBZEA60avZvp6Y6e31Q5JUsHQ4OLgNhrrqCiOuvDUjY
 QgCX46we5TxdhIHhTIA6wjfCjpsCW6aJ3v0fDCihyWx0sJnp0t3LlD06Pzf12B/mlPA/
 09EQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:from:to:subject:date:message-id:user-agent
 :mime-version;
 bh=6eLCJ3XP8gAtjoMV/YRIumwhR7BYC73gBBFyI5VvjQc=;
 b=VWsE/kHuyco8C6VdtpHjX5UetD6/pcNnLkdnZo/rIXZ0KJcpieSltnlQhDM5P+VuV0
 gijUvN1owu09DTzphedK5zjtwmd3f8R7fzXInrSAdD16FZMLfKxxIkn96MGeqJBmZbNq
 edM8HbDvheRAr2xjWRRwlgp9kPSX+rdbqwo6+K/ad/eP/Nx8l++AuVUx6+sgmnM+5xEk
 qKbU/8cT2A8Obizyi/IbdzPmUR60bNEmROM36dWbj+7BtVjbUkJ1wvXIY9LH2zK9WZUt
 6gQJXBrvKpCsHsNV+STPAoOwide3YsJRCcgh5g+r2Tg3vGlKd5fZOxJcxrXtAZCdzbck
 mkGw==
X-Gm-Message-State: AD7BkJLJGcRY6Q5GW6RZIyx/l1u6rwRvP78csqbDQcx0Gi5/AlYqAC/66gTKuj9T+vZkZA==
X-Received: by 10.28.173.71 with SMTP id w68mr29025407wme.88.1459412300359;
 Thu, 31 Mar 2016 01:18:20 -0700 (PDT)
Received: from localhost ([37.153.108.22])
 by smtp.gmail.com with ESMTPSA id hx10sm7747443wjb.25.2016.03.31.01.18.19
 for <Ctypes@lists.ocaml.org>
 (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Thu, 31 Mar 2016 01:18:19 -0700 (PDT)
From: Malcolm Matalka <mmatalka@gmail.com>
To: Ctypes@lists.ocaml.org
Date: Thu, 31 Mar 2016 08:18:18 +0000
Message-ID: <86poubawmt.fsf@gmail.com>
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/24.5 (berkeley-unix)
MIME-Version: 1.0
Content-Type: text/plain
Subject: [ocaml-ctypes] noalloc optimization?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 31 Mar 2016 07:56:10 -0000

I just read https://blogs.janestreet.com/faster-ocaml-to-c-calls/ and am
wondering if noalloc is supported in Ctypes.  I looked around the API
documentation a bit and didn't see it but probably missed it.

/Malcolm

From yallop@gmail.com  Thu Mar 31 09:33:23 2016
Return-Path: <yallop@gmail.com>
X-Original-To: Ctypes@lists.ocaml.org
Delivered-To: Ctypes@lists.ocaml.org
Received: from ppsw-43.csi.cam.ac.uk (ppsw-43.csi.cam.ac.uk [131.111.8.143])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 266093C14A
 for <Ctypes@lists.ocaml.org>; Thu, 31 Mar 2016 09:33:23 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1736402 
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.192.41 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qg0-f41.google.com ([209.85.192.41]:34369)
 by ppsw-43.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1alYO5-0006aC-ne (Exim 4.86_36-e07b163) for Ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Thu, 31 Mar 2016 09:55:33 +0100
Received: by mail-qg0-f41.google.com with SMTP id n34so51588847qge.1
 for <Ctypes@lists.ocaml.org>; Thu, 31 Mar 2016 01:55:33 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc; bh=efZnHqBvu3baGvtpWukW74wd+xzqUstJvUCXGTFe6vc=;
 b=Eo+0u8wXiYh2uYVuiiWQrNlYs6zhpMeydorgrpkpPWAJk1QZ7TnVlbtLT9qU8gdcLY
 8Wvi3grGvSZYzEEv3OWHiAZLl9nM2KWPTELiAPLNTQvW/156Bf3XrVrFJlkBOtI+CBkb
 GLdD+K24+zH4UTbPDwCC7FtYxmvFoVIHalYPYneo6gAk0GQ01Nwkq7u1dbKRglf3kol6
 nN8pbpN7h7B2IMDrcqd45OFCmdR67LNumPCkZ1AScDquKbRQJzvzq0v/BzqmT4wKcDuR
 r//AH/Vx+op1llDMUT67Cnrwrq5a3I4pCL2hyGAyeS12F+fuvuw0RYxMsM5sXOyDebbz
 ZYPQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:in-reply-to:references:date
 :message-id:subject:from:to:cc;
 bh=efZnHqBvu3baGvtpWukW74wd+xzqUstJvUCXGTFe6vc=;
 b=li+SWJx8AZOAcJxF0GdWdrihLrq82QYYGmIywIiy5/V7kEDiDmdd4Pc8kUO5sve9Rt
 nO0opNzPqMRM21elaxJKres4ksYqIVoTws8EQNZajsGBWkfidM0tKbqQKvIoWGHlAy95
 Kqa5jPaV2ugrDpg4Koe5nq+v2OiU1NmEiWPlR3xzqw8l36i2yUaVKqSIJQVW/pl5SrGp
 sq7Cx+ypFAVimeZ8BOqipssuGC6nxwNu4J8YM8gKXZf7shM16SUwWBdV3gjTBocr1caB
 6lD9VQQnwDwfqjJAzaaa/DMYnAB8ZnoAM7ytPo+i2umw8XdrRZnveJ+zt2WKOMnBl0Nf
 viIg==
X-Gm-Message-State: AD7BkJLY43X/Jein0Mt34F/OkQ3EbyjiuCQscmFxSOGV7O8ybBi+l43V5dBUB095zNc2s4dEoLjV3Kz/yPenYA==
MIME-Version: 1.0
X-Received: by 10.140.20.197 with SMTP id 63mr14855311qgj.18.1459414532441;
 Thu, 31 Mar 2016 01:55:32 -0700 (PDT)
Received: by 10.55.164.206 with HTTP; Thu, 31 Mar 2016 01:55:32 -0700 (PDT)
In-Reply-To: <86poubawmt.fsf@gmail.com>
References: <86poubawmt.fsf@gmail.com>
Date: Thu, 31 Mar 2016 09:55:32 +0100
Message-ID: <CAAxsn=GArEzN1=0W7kMbimJO85yCsZQ85maZjmKifL9t1sdBxA@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: Malcolm Matalka <mmatalka@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <Ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] noalloc optimization?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 31 Mar 2016 08:33:23 -0000

On 31 March 2016 at 09:18, Malcolm Matalka <mmatalka@gmail.com> wrote:
> I just read https://blogs.janestreet.com/faster-ocaml-to-c-calls/ and am
> wondering if noalloc is supported in Ctypes.  I looked around the API
> documentation a bit and didn't see it but probably missed it.

All the machinery necessary to support noalloc is in place, but it's
not currently switched on because of a difficulty involving callbacks
from C into OCaml.  See the comment here for details:

    https://github.com/ocamllabs/ocaml-ctypes/blob/935d5a11/src/cstubs/cstubs_generate_ml.ml#L107-L113

So the only piece remaining before we flip the switch to start
generating code with noalloc is a small piece of interface design.

There's also an issue open to track the feature:

    https://github.com/ocamllabs/ocaml-ctypes/issues/132

From llmarkvm@gmail.com  Sat Apr 16 13:21:33 2016
Return-Path: <llmarkvm@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-43.csi.cam.ac.uk (ppsw-43.csi.cam.ac.uk [131.111.8.143])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 78A833C14A
 for <ctypes@lists.ocaml.org>; Sat, 16 Apr 2016 13:21:33 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1736402 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.220.66 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (llmarkvm[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-pa0-f66.google.com ([209.85.220.66]:33584)
 by ppsw-43.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1arPaY-0005BI-oX (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <llmarkvm@gmail.com>); Sat, 16 Apr 2016 13:44:39 +0100
Received: by mail-pa0-f66.google.com with SMTP id vv3so11937814pab.0
 for <ctypes@lists.ocaml.org>; Sat, 16 Apr 2016 05:44:38 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:date:message-id:subject:from:to;
 bh=Ab4oNJoX/UbToBgELTazhW4BC21Oj9ST1uJpFkSF36I=;
 b=zAImNcyNJHKR2Wy9qJhxQ790mIZah6gzr1slntHKX9Fle8EVhoCWd+lA8m8+Wc3mJf
 UxCylrjW/D+56PKEGLF/2s3T84XfziDh4jCsMw+YlOgqRz07CEGXGle7n2uaP+yK4LH2
 YoC8GWt7Q+ad3W739i2YHODwNstM6aq9hyYckG8yO3cZRxuVbcUnI7PVo5w+EZtoR1Gh
 bS+Gf/n9JSwkcVROkktUUyjfzLvbfAYaVfjBZ2wK40lFuWZWE7lbXrik0b1raNiQh2Nq
 GdLxNhE30LvrSE4eEminUcvRX4aLQ6kTx+zRrO/+GQt8P8J+4RNnRu2NgMASpUl7pgHj
 aAEQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:date:message-id:subject:from:to;
 bh=Ab4oNJoX/UbToBgELTazhW4BC21Oj9ST1uJpFkSF36I=;
 b=GtyLh7qDCiXStHULDewPdZYhayiOWDK1Mchv+dAonjaMdeztuhOBVlynxngU3pNgSn
 7jZ2qYxZ6oFKylqYmKmHvwdx3rPbk0QJb5I2O/B+2DPBmWdAp+fjbHcP6PoL48WqIQDf
 o4r2zBwhXGUyY3/xlkzG5tPTHNAEbWFRt7VLPkK4g8WpqorLIatu06TwiyApdZPoG4n9
 M5Y4F3MDfTlOiqPCc4HbPFm3NOYjrK/KW41KAkv9QpFXa/S6k7Gzp0Cdz6eMNApAhlqF
 Vmc/VWprUGsEr+0xS2cTvyzS0nGwws7kBLY+3FrKy5nNWMWeapiyuZzCAfXROyHPviuy
 1GNQ==
X-Gm-Message-State: AOPr4FUJl0tgbKEI+COFZklVUR/TR0CIb5cDQFZp4m3pcPnBdR4JJVfuXHPIrrSoAgUDM8dRIiY87PCRlDVJJQ==
MIME-Version: 1.0
X-Received: by 10.66.66.77 with SMTP id d13mr36901805pat.75.1460810677278;
 Sat, 16 Apr 2016 05:44:37 -0700 (PDT)
Received: by 10.66.4.70 with HTTP; Sat, 16 Apr 2016 05:44:37 -0700 (PDT)
Date: Sat, 16 Apr 2016 14:44:37 +0200
Message-ID: <CALKV4kqi=G0EAYAHxjqwf_bBnR3NqKjh=o=DzmsWAaUU1o_PxQ@mail.gmail.com>
From: =?UTF-8?Q?Markus_M=C3=BCller?= <llmarkvm@gmail.com>
To: ctypes@lists.ocaml.org
Content-Type: text/plain; charset=UTF-8
X-Mailman-Approved-At: Sat, 16 Apr 2016 13:23:51 +0100
Subject: [ocaml-ctypes] Lifetime of Ctypes allocation
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sat, 16 Apr 2016 12:21:33 -0000

Hello,

I'm having some trouble on how to properly control the lifetime of an
OCaml allocated Ctypes "data structure". Consider the following simple
C function.

#include <stdio.h>
void f(int * * p)
{
  printf("%d %d\n", *(p[0]), *(p[1]));
}

Using f in the way shown below is wrong since the memory pointed to by
the inner pointers is freed by Gc.full_major.

open Ctypes
open Foreign
let f = foreign "f" ((ptr (ptr int)) @-> returning void)
let _ =
  let v = allocate_n (ptr int) ~count:2 in
  let _ = v <-@ (allocate int 0); (v +@ 1) <-@ (allocate int 1) in
    f v ; Gc.full_major () ; f v

The following crude attempt to fix it does not work either even though
some references to the pointers are bound to global values.

open Ctypes
open Foreign
let f = foreign "f" ((ptr (ptr int)) @-> returning void)
let a = ref null
let b = ref null
let _ =
  let v = allocate_n (ptr int) ~count:2 in
  let _ = v <-@ (allocate int 0); (v +@ 1) <-@ (allocate int 1) ; a :=
(to_voidp (!@ v)) ; b := (to_voidp (!@ (v +@ 1))) in
    f v ; Gc.full_major () ; f v

How can the allocated memory be properly protected from being freed before time?
Thanks for your help.

Best regards,
Markus

From yallop@gmail.com  Mon Apr 18 10:27:35 2016
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-43.csi.cam.ac.uk (ppsw-43.csi.cam.ac.uk [131.111.8.143])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 5E0583C2F7
 for <ctypes@lists.ocaml.org>; Mon, 18 Apr 2016 10:27:35 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1736402 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.192.44 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qg0-f44.google.com ([209.85.192.44]:35917)
 by ppsw-43.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1as5pO-0003Ez-oz (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Mon, 18 Apr 2016 10:50:47 +0100
Received: by mail-qg0-f44.google.com with SMTP id f52so112543360qga.3
 for <ctypes@lists.ocaml.org>; Mon, 18 Apr 2016 02:50:46 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-transfer-encoding;
 bh=9l0aPNq8L846RSJj4j9xWZ2/2bObUAfyC3mBGN2ZbSo=;
 b=z2zJxMZqR5GeusvP6v99MnGhi1ajr61uRnnfs8UvQA/fseGchgAg9ffujIiUMkpGAR
 e6UEF/LPdvDCtrO6HTmKnoxubbmIga0YHXn86DDaegNcZht4FimqMnu4ZlTCCGzmn0C2
 /v8S3G3uHHS011P47aRLC6JamqKIr+7mXUbJx7ZfHJo73jKeLrXbSb00TXk8+CTvXenX
 1SS6VGkv/c+nKzMDmNmKBXoWRQY0SK+PmaHBET/qqy03Q3ku0mIussatABThnguoPbS0
 7k+7q+VoGV9+jZmv01OWF3d9+q0ju97j9JAiHjckORg21NCdxprvUbevAzEW+nBl6Wzo
 09hg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:in-reply-to:references:date
 :message-id:subject:from:to:cc:content-transfer-encoding;
 bh=9l0aPNq8L846RSJj4j9xWZ2/2bObUAfyC3mBGN2ZbSo=;
 b=H1HsqRFEQzqe1JpsQ/IY1w6wQstHLsuzsXCyd7xIRS4YCI8jlbLo5wkelhmvN4/YUD
 i1Z6qO/zi4fIrXK6pavU7Uv7yv0PHX4w+Nnn9s1q7BlIc5gJ/u3V3uvCWWxnJqnbhK+h
 uvPUS7iQDJ5g+wRpJMUxjm/VvdiMQS7oNDy+klw8brIaWxS1RGo2PpCXTsgpr9AF/jro
 8Imle+eQP4hjIF0ZqJlFEzTPeDYbE5wAm22oTxfdVFub9KSKbSVWF802UdkotgCResVE
 uv68riq921DzjNRqpItE3eOh0AGagHc1pFkw29NNKG5dQ8McVM5BySyYEjwAak/+DYOi
 RI8w==
X-Gm-Message-State: AOPr4FV+56IHafykCrZhPAWM55DtSNwaG08GjK83e7Udagtk9oUuro5DdAaE59HCsC3KKAbGkHbMkkOXDjwoUA==
MIME-Version: 1.0
X-Received: by 10.140.98.133 with SMTP id o5mr41807380qge.44.1460973045459;
 Mon, 18 Apr 2016 02:50:45 -0700 (PDT)
Received: by 10.55.164.74 with HTTP; Mon, 18 Apr 2016 02:50:45 -0700 (PDT)
In-Reply-To: <CALKV4kqi=G0EAYAHxjqwf_bBnR3NqKjh=o=DzmsWAaUU1o_PxQ@mail.gmail.com>
References: <CALKV4kqi=G0EAYAHxjqwf_bBnR3NqKjh=o=DzmsWAaUU1o_PxQ@mail.gmail.com>
Date: Mon, 18 Apr 2016 10:50:45 +0100
Message-ID: <CAAxsn=Fq2E2euLhi0ghpkw6TCL1ZOSuK1WXhNW+PReKajRanMA@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: =?UTF-8?Q?Markus_M=C3=BCller?= <llmarkvm@gmail.com>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Lifetime of Ctypes allocation
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 18 Apr 2016 09:27:35 -0000

Dear Markus,

On 16 April 2016 at 13:44, Markus M=C3=BCller <llmarkvm@gmail.com> wrote:
> I'm having some trouble on how to properly control the lifetime of an
> OCaml allocated Ctypes "data structure". Consider the following simple
> C function.
>
> #include <stdio.h>
> void f(int * * p)
> {
>   printf("%d %d\n", *(p[0]), *(p[1]));
> }
>
> Using f in the way shown below is wrong since the memory pointed to by
> the inner pointers is freed by Gc.full_major.
>
> open Ctypes
> open Foreign
> let f =3D foreign "f" ((ptr (ptr int)) @-> returning void)
> let _ =3D
>   let v =3D allocate_n (ptr int) ~count:2 in
>   let _ =3D v <-@ (allocate int 0); (v +@ 1) <-@ (allocate int 1) in
>     f v ; Gc.full_major () ; f v
>
> The following crude attempt to fix it does not work either even though
> some references to the pointers are bound to global values.

The key here is that there are two types of memory:

   * OCaml-memory (memory containing OCaml values).  The OCaml garbage
collector knows about everything stored here.
   * C-memory (i.e. memory containing C values).  The GC doesn't know
anything about what's stored here.

For values created with 'allocate' there are two components:

   * the allocated memory itself lives in C-memory
   * the pointer returned by 'allocate' is an OCaml value that lives
in OCaml memory.

When there are no more references to the pointer then the allocated
memory will be freed.

With that in mind we can trace through what happens in your code.
I'll use the word 'address' for C addresses (which are probably just
numeric values) and 'pointer' for the OCaml objects of type Ctypes.ptr
which contain both addresses and other information for the GC and for
typing.

> let v =3D allocate_n (ptr int) ~count:2 in

This allocates a piece of C-memory large enough to hold two addresses.
The variable 'v' lives in OCaml-memory, and holds the pointer that
keeps the C-memory alive.

>     v <-@ (allocate int 0);

This allocates an piece of C-memory large enough to hold an integer,
initialized with 0.  The address of the allocated memory is written to
the C-memory referenced by 'v'.

At this point there are no references to the original pointer returned
by 'allocate', so the allocated memory may be freed.

>     a :=3D (to_voidp (!@ v)) ;

This builds a pointer from the C-memory whose address is stored at
'v'.  There is no connection with the pointer returned by 'allocate',
besides the fact that both pointers store the same address.

I hope that helps you to build a mental model of what's going on, and
what's going wrong.  The main thing to remember is that in order to
keep a value alive you need to keep a reference to the original
pointer returned by 'allocate', not just the address of the C memory.
Here's a slight variant of the above code which does exactly that:

     let a =3D ref (from_voidp int null)
    a :=3D allocate int 0 ;
    v <-@ !a;

Since 'a' holds the original pointer, not just the address of the
allocated C-memory, the GC won't collect the memory until 'a' is no
longer accessible.

Kind regards,

Jeremy.

From llmarkvm@gmail.com  Mon Apr 18 22:39:19 2016
Return-Path: <llmarkvm@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id B03FA3C064
 for <ctypes@lists.ocaml.org>; Mon, 18 Apr 2016 22:39:19 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1736402 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.220.68 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (llmarkvm[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-pa0-f68.google.com ([209.85.220.68]:34609)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1asHFY-0004Pu-ix (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <llmarkvm@gmail.com>); Mon, 18 Apr 2016 23:02:33 +0100
Received: by mail-pa0-f68.google.com with SMTP id hb4so17250786pac.1
 for <ctypes@lists.ocaml.org>; Mon, 18 Apr 2016 15:02:32 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to;
 bh=djmXyCYofr3WVSgdbn922UuSqpPAWJeclU631793L+A=;
 b=mQbPNKSF5RYobklRtc+ayFJCV5WCxMRmS7aTyRg3oFA1h7w2apc/Ut4qFIyHYRTbbY
 PHldz6Qc/WdjeLNAXsLZ/iRzPtKxB99PMOX2fILdjIK5i4gx6PKB0sDCz/G/AZG3947E
 uOj8FeCiBxL32yyMkyBZOrm1dW7wd+UITp/3kpNnFDwzB5/IX8+cX7tb/pq8yvkXI6N4
 dMK0ZbdCavVOJQzzAD5Gv4Bi3fB/izoqsN0VUK/2eLvu7+8Gv6svstodDWgldad+aw4l
 G4zxEuJKZTFx7L/nMXA6U1ww4ukUzGznipxTa7qhliyfY3C4C4hhwlOr+bwA2VG4zCV9
 kksg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:in-reply-to:references:date
 :message-id:subject:from:to;
 bh=djmXyCYofr3WVSgdbn922UuSqpPAWJeclU631793L+A=;
 b=h3g+uYl1Amv9La733eV24Bbr+xVpa/px+ceb28kUnyacR7b+shYzWOSnn7Hx9a8AIo
 D4sO1pctj7WtnFymlJZddhjgLQhJCGNwhxJ5dw5EsZhWshEK7XzqFZFhCk1cYjGIaTED
 rSRTL3TVbmGWmCkNSF8hi5vqxB7LLhrIa3yuQPrgh3eix0KKoGkiV+TWLpacQF17INhW
 ekO5zwYnIKAfe9F42PNjbhU9DULn2ZYFPPoqFeUWEmBt3SVvQPED0mWWJ+bJpf5QtLVq
 zP+XljSzHfLVU2ungisBiVVlRhKdlwbgYDu8QjwukPmk3OhBNwZkIe+JdXZ34f9/WRsq
 JgfQ==
X-Gm-Message-State: AOPr4FUjXoj2BIv7Ww49bLmvUgZHDPOeQYtgXDYFhxfGvd0dkUPJeV4ywMqzhHt6RGT4+y4t0ZmsjCVeEjR0sQ==
MIME-Version: 1.0
X-Received: by 10.66.139.70 with SMTP id qw6mr52323634pab.67.1461016951517;
 Mon, 18 Apr 2016 15:02:31 -0700 (PDT)
Received: by 10.66.4.70 with HTTP; Mon, 18 Apr 2016 15:02:31 -0700 (PDT)
In-Reply-To: <CAAxsn=Fq2E2euLhi0ghpkw6TCL1ZOSuK1WXhNW+PReKajRanMA@mail.gmail.com>
References: <CALKV4kqi=G0EAYAHxjqwf_bBnR3NqKjh=o=DzmsWAaUU1o_PxQ@mail.gmail.com>
 <CAAxsn=Fq2E2euLhi0ghpkw6TCL1ZOSuK1WXhNW+PReKajRanMA@mail.gmail.com>
Date: Tue, 19 Apr 2016 00:02:31 +0200
Message-ID: <CALKV4kqJQ4f+vqREpY7fqp_NJbN_AefrWO4o+KUKBxkEfGDAfA@mail.gmail.com>
From: =?UTF-8?Q?Markus_M=C3=BCller?= <llmarkvm@gmail.com>
To: ctypes@lists.ocaml.org
Content-Type: text/plain; charset=UTF-8
X-Mailman-Approved-At: Tue, 19 Apr 2016 05:49:32 +0100
Subject: Re: [ocaml-ctypes] Lifetime of Ctypes allocation
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 18 Apr 2016 21:39:19 -0000

Dear Jeremy,

thanks a lot for your elaborate reply. This program works as expected.

open Ctypes
open Foreign
let f = foreign "f" ((ptr (ptr int)) @-> returning void)
let v = ref (from_voidp (ptr int) null)
let a = ref (from_voidp int null)
let b = ref (from_voidp int null)
let _ =
  v := allocate_n (ptr int) ~count:2 ;
  a := allocate int 0 ;
  b := allocate int 1 ;
  (!v) <-@ (!a);
  ((!v) +@ 1) <-@ (!b) ;
  f (!v) ; Gc.full_major () ; f (!v)

and the following program is fine too.

open Ctypes
open Foreign
let f = foreign "f" ((ptr (ptr int)) @-> returning void)
let v = allocate_n (ptr int) ~count:2
let a = allocate int 0
let b = allocate int 1
let _ =
  v <-@ a;
  (v +@ 1) <-@ b ;
  f v ; Gc.full_major () ; f v

However, having v, a, b in a local scope does not work.

open Ctypes
open Foreign
let f = foreign "f" ((ptr (ptr int)) @-> returning void)
let _ =
  let v = ref (from_voidp (ptr int) null) in
  let a = ref (from_voidp int null) in
  let b = ref (from_voidp int null) in
  v := allocate_n (ptr int) ~count:2 ;
  a := allocate int 0 ;
  b := allocate int 1 ;
  (!v) <-@ (!a);
  ((!v) +@ 1) <-@ (!b) ;
  f (!v) ;
  Gc.full_major () ;
  f (!v)

I fail to see why it does not work in this case.

>>     v <-@ (allocate int 0);
>
> This allocates an piece of C-memory large enough to hold an integer,
> initialized with 0.  The address of the allocated memory is written to
> the C-memory referenced by 'v'.
>
> At this point there are no references to the original pointer returned
> by 'allocate', so the allocated memory may be freed.

Good point: (allocate int 0) is not bound to a variable and thus can be
freed. However, in the broken example above, a reference exists and
still it does not work. Can you explain why? Thank you.

Best regards,
Markus

From yallop@gmail.com  Tue Apr 19 11:09:48 2016
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id B6F503C0D2
 for <ctypes@lists.ocaml.org>; Tue, 19 Apr 2016 11:09:48 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1736402 
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.220.175 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qk0-f175.google.com ([209.85.220.175]:34293)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1asSxr-000bVU-iL (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 19 Apr 2016 11:33:04 +0100
Received: by mail-qk0-f175.google.com with SMTP id r184so2883440qkc.1
 for <ctypes@lists.ocaml.org>; Tue, 19 Apr 2016 03:33:03 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-transfer-encoding;
 bh=uPK/e4xWEbGHseSI/bw3vTRbCe7JUGgYlgdXe26xmOQ=;
 b=lg+chywKEQ1iKM8awvgx5/msn3SoqrIdbEpWO+f3hxFOMUJ0sw49P1WPnXeQ5E+bX2
 a2WyugC7dptIo/WMowVU5AcEEDGv+XukjWlunae2VmDv01wqKgrjhFOjvoqGSBM92Fdv
 Xby2R7BYIwHoVlCIXjEe3fr1AunQhC1qX0mtjoRWBqx1qCGvKIx3dzfOx354uZtJ9C+N
 082RSzrCNyqyGi7o4XSniel+hL0pjZgRgtiRX155Oqwb6XOR2WmSBqVmuxuR6stBvo2q
 VA7WzeC6evlk5/FGUhwvsYSaxZe3sWRJU163ofVMAohKdVCXCSiP81+HtZMbOpT0yFSL
 xVYw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:in-reply-to:references:date
 :message-id:subject:from:to:cc:content-transfer-encoding;
 bh=uPK/e4xWEbGHseSI/bw3vTRbCe7JUGgYlgdXe26xmOQ=;
 b=gQ7yvCJxz/S7wm7rEYOXoDiEyuIS9EP3FwxkjlLKPb++DwOJ9yBO8fVXkfsOg4fI4t
 Cb71y19/blHFhxyE1XnO32FJhvP0eGOJAMaGdyr+CDb5n254rm+DQyhONkxCntmOROva
 iS7v1d5rEpWsyBgS0sEyBjVxRyCpc6nFoWZU/jKJrSi1xT66nPgJvY4YDS0kxkE9qXU9
 WmL4mrXu/4Onp3C7ZFlel8IL9WJ8esZeF8Weia86lNTmg5i/vCJLl0nJ+NonHisz9VGl
 lcoZ9l5Ht43t7xNNps+zGWtBovS0QvUJSgNxLSxwmfkOUbT7DBgR3G61w3NMV6hf6mrJ
 WUNA==
X-Gm-Message-State: AOPr4FUgwNVAZc9CZKYe5mNkJn4/sJNwmJx3//cT6V1mRrXGJe+VxFCtkxsAfAr7x4hI2RGyzaG3Axuhpf09bQ==
MIME-Version: 1.0
X-Received: by 10.55.197.203 with SMTP id k72mr2371484qkl.15.1461061982808;
 Tue, 19 Apr 2016 03:33:02 -0700 (PDT)
Received: by 10.55.164.74 with HTTP; Tue, 19 Apr 2016 03:33:02 -0700 (PDT)
In-Reply-To: <CALKV4kqJQ4f+vqREpY7fqp_NJbN_AefrWO4o+KUKBxkEfGDAfA@mail.gmail.com>
References: <CALKV4kqi=G0EAYAHxjqwf_bBnR3NqKjh=o=DzmsWAaUU1o_PxQ@mail.gmail.com>
 <CAAxsn=Fq2E2euLhi0ghpkw6TCL1ZOSuK1WXhNW+PReKajRanMA@mail.gmail.com>
 <CALKV4kqJQ4f+vqREpY7fqp_NJbN_AefrWO4o+KUKBxkEfGDAfA@mail.gmail.com>
Date: Tue, 19 Apr 2016 11:33:02 +0100
Message-ID: <CAAxsn=FPGFP3JCZJgn_Kx7XxdZTzAbWpjcOJpSRXHEXb+_Xi4Q@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
To: =?UTF-8?Q?Markus_M=C3=BCller?= <llmarkvm@gmail.com>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Lifetime of Ctypes allocation
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 19 Apr 2016 10:09:48 -0000

On 18 April 2016 at 23:02, Markus M=C3=BCller <llmarkvm@gmail.com> wrote:
> open Ctypes
> open Foreign
> let f =3D foreign "f" ((ptr (ptr int)) @-> returning void)
> let v =3D ref (from_voidp (ptr int) null)
> let a =3D ref (from_voidp int null)
> let b =3D ref (from_voidp int null)
> let _ =3D
>   v :=3D allocate_n (ptr int) ~count:2 ;
>   a :=3D allocate int 0 ;
>   b :=3D allocate int 1 ;
>   (!v) <-@ (!a);
>   ((!v) +@ 1) <-@ (!b) ;
>   f (!v) ; Gc.full_major () ; f (!v)
>
> and the following program is fine too.
>
> open Ctypes
> open Foreign
> let f =3D foreign "f" ((ptr (ptr int)) @-> returning void)
> let v =3D allocate_n (ptr int) ~count:2
> let a =3D allocate int 0
> let b =3D allocate int 1
> let _ =3D
>   v <-@ a;
>   (v +@ 1) <-@ b ;
>   f v ; Gc.full_major () ; f v
>
> However, having v, a, b in a local scope does not work.
>
> open Ctypes
> open Foreign
> let f =3D foreign "f" ((ptr (ptr int)) @-> returning void)
> let _ =3D
>   let v =3D ref (from_voidp (ptr int) null) in
>   let a =3D ref (from_voidp int null) in
>   let b =3D ref (from_voidp int null) in
>   v :=3D allocate_n (ptr int) ~count:2 ;
>   a :=3D allocate int 0 ;
>   b :=3D allocate int 1 ;
>   (!v) <-@ (!a);
>   ((!v) +@ 1) <-@ (!b) ;
>   f (!v) ;
>   Gc.full_major () ;
>   f (!v)
>
> I fail to see why it does not work in this case.

The GC is free to collect values that are no longer reachable by the
program, even if there are references to them still "in scope".  Since
'a' is not used after the call to Gc.full_major, the collector can
ignore 'a' when determining whether values are reachable.  Here's a
simpler program that illustrates the same behaviour

   let say_goodbye _ =3D print_endline "goodbye"

   let _ =3D
     let r =3D ref (object end) in
     Gc.finalise say_goodbye !r;
     Gc.full_major ();
     print_endline "the end"

On my system this prints

   goodbye
   the end

i.e. the object is finalised by the call to Gc.full_major, even though
'r' is still in scope.  Since 'r' is not used after the call, this
behaviour is entirely legitimate.

I think that using 'allocate' works best when you're actually using
the pointer it returns to address the memory it allocates.  The need
to use delicate tricks to keep the allocated memory alive is often a
sign that a different allocation strategy would be a better choice.
The choice of strategy will depend on how your application uses
memory.

Kind regards,

Jeremy.

From llmarkvm@gmail.com  Tue Apr 19 23:53:08 2016
Return-Path: <llmarkvm@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id E66C63C2F7
 for <ctypes@lists.ocaml.org>; Tue, 19 Apr 2016 23:53:08 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1736402 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.220.67 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (llmarkvm[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-pa0-f67.google.com ([209.85.220.67]:33475)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1asesb-0002dp-iX (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <llmarkvm@gmail.com>); Wed, 20 Apr 2016 00:16:26 +0100
Received: by mail-pa0-f67.google.com with SMTP id vv3so2796816pab.0
 for <ctypes@lists.ocaml.org>; Tue, 19 Apr 2016 16:16:25 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to;
 bh=syB9HUqq16emZCGn/OTAnOBIbp9i79CejEUYKrfuvag=;
 b=YJmuv4lWCkOUOVLneCNwHBPAdhq3qVKQ5BXAqRAnRMNv5xQDXAo66gNo/R8/LptxA1
 OAhKO5UkduAUhr6EFN3P1GuRT5cqi32NQmjdRALf4+ZJVHuRwJ91tFOmyn/nhWX0b/z1
 AQ6dSIf0yT25V5u5XvCrY+yxruHNkwSX+z7dQpRbsFN0TPPqPVvggHbfpQoGhHkOPd5v
 5PxBRRKQmbJNPITakNfxJKTlet8XyOl+MX29ynBd3yZXy+dxVwAk2zYHTV0byLvLloxm
 JVWyXYTe1EGXTAVMREORy2HPXCDp/WJosmsws7H8W5j5L1owtiEJX5fYOG6FCejJC9G4
 Ebwg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:in-reply-to:references:date
 :message-id:subject:from:to;
 bh=syB9HUqq16emZCGn/OTAnOBIbp9i79CejEUYKrfuvag=;
 b=OVa4IZNtFpfOxVJP2n1/OIR05S5NjP8pmn8CYs7hyXERYoLfqsGW+IeH9ATUWSm0S3
 P4bHSnSB7aZB0CP9PDO5MPUZD+yjBPWHD7cRpdzxASTzbVuuMmBMqKwhJzvoJ5q7HHVc
 Lvfmu1sZcY4MeXe0Klym9Mr9PYIFKra4vUjp3pLisHvisxNJbkpSjUtSUwtx5t0ErtSq
 YmsSU6Myw8pucgiFyK0RELj3wALSE3uBbk3kjKdRmSxd0CFhHrU8ExwI8TnAZphBBoRc
 v7prBv0Qa3jjP2KXiq1P1rkoGZob8oE8qWypigHBPdF/D5ye9K7lbSctD4KfermSg++R
 3wnQ==
X-Gm-Message-State: AOPr4FU7sHOCpv8/0vQRKTqruAKBpuMt7wgS61H499YagfLrCHNj8ZOHS3//8prQ9JGRRAH5MDRHCmwS0cU51Q==
MIME-Version: 1.0
X-Received: by 10.66.253.68 with SMTP id zy4mr7746062pac.81.1461107784437;
 Tue, 19 Apr 2016 16:16:24 -0700 (PDT)
Received: by 10.66.4.70 with HTTP; Tue, 19 Apr 2016 16:16:24 -0700 (PDT)
In-Reply-To: <CAAxsn=FPGFP3JCZJgn_Kx7XxdZTzAbWpjcOJpSRXHEXb+_Xi4Q@mail.gmail.com>
References: <CALKV4kqi=G0EAYAHxjqwf_bBnR3NqKjh=o=DzmsWAaUU1o_PxQ@mail.gmail.com>
 <CAAxsn=Fq2E2euLhi0ghpkw6TCL1ZOSuK1WXhNW+PReKajRanMA@mail.gmail.com>
 <CALKV4kqJQ4f+vqREpY7fqp_NJbN_AefrWO4o+KUKBxkEfGDAfA@mail.gmail.com>
 <CAAxsn=FPGFP3JCZJgn_Kx7XxdZTzAbWpjcOJpSRXHEXb+_Xi4Q@mail.gmail.com>
Date: Wed, 20 Apr 2016 01:16:24 +0200
Message-ID: <CALKV4koJ-=Hv3q=C2_WdPb2pELfigqFV-O5ZfrNRtL12zCjN6g@mail.gmail.com>
From: =?UTF-8?Q?Markus_M=C3=BCller?= <llmarkvm@gmail.com>
To: ctypes <ctypes@lists.ocaml.org>
Content-Type: text/plain; charset=UTF-8
X-Mailman-Approved-At: Wed, 20 Apr 2016 00:00:03 +0100
Subject: Re: [ocaml-ctypes] Lifetime of Ctypes allocation
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 19 Apr 2016 22:53:09 -0000

Dear Jeremy,

> The GC is free to collect values that are no longer reachable by the
> program, even if there are references to them still "in scope".  Since
> 'a' is not used after the call to Gc.full_major, the collector can
> ignore 'a' when determining whether values are reachable.

Thanks for the clarification. This explains it.

Best regards,
Markus

From yallop@gmail.com  Fri Jun  3 09:40:53 2016
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 83FDD3C0D2
 for <ctypes@lists.ocaml.org>; Fri,  3 Jun 2016 09:40:53 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1743621 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.192.47 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qg0-f47.google.com ([209.85.192.47]:33651)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1b8l3w-000fEk-2Q (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Fri, 03 Jun 2016 10:06:41 +0100
Received: by mail-qg0-f47.google.com with SMTP id 52so8703047qgy.0
 for <ctypes@lists.ocaml.org>; Fri, 03 Jun 2016 02:06:40 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:from:date:message-id:subject:to;
 bh=huyC8+kq+fXGGmwDBKGByjaTszTXbvMk+bW0hE5u8Zk=;
 b=qH9UNr13p8aou3sOGy1VG3KlIXC5GrFeSjrYFebKoJcqdx3JI8WMXcWXs+caI+P5RE
 EGCrmXAtHgmeWkFdX0hEcs928TQUcgG1sT7ea4ydqdBSsp/NX3Rvc02U3/qCxGjDDSAT
 blBNSkp0Rs06Qw5HzF/H9/bh5xY3/BSefuwktqYW9eC07ScWJytStTzC6l3A3GybHZxu
 U3RzuJ733JBlRRVgE6O4zpcGrn2dQu3GYP39un16O5MXYPF7H6sowbDt9kjC+/gBiljn
 Y3Wkf+ff4Ct40VBK3FUp+472cnJ4JK2jw+LGZtnuPAKQGS4EhyrXXhwbEuaeqNfVGjaS
 CRsA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:from:date:message-id:subject:to;
 bh=huyC8+kq+fXGGmwDBKGByjaTszTXbvMk+bW0hE5u8Zk=;
 b=HE5eftnxtjRv8lrT2y/m1+DmWt+Mj09y1gMniUUhQQpthjpNVQluHxhL0xNHmuY/nL
 gi2GnaNbgvBSeKOvUJ3HwXv00AlFm+Hjhsqy3SE89RIiwmiYnkmL72iom1WZklkVbrkx
 DdLIyrfKniFGpCihkuj+t3N8s8HxiD120wvD7Jwg1Ia+1EjgCtWL1z3LJM+AaxB8xaHe
 GHCUf1csPCDiT631yEf91qB7Ia0vJAfLxC1l9fgJCELZghbRIMDAvyinH8oc04hh814i
 NYd5FXBcUdOV/Z0hBfZ3QnR5fUcTix0IOzOlj83VD2dO8bkUTJCEbk/8r8Af7GZTwDij
 cIAQ==
X-Gm-Message-State: ALyK8tIb/qbOrH1hbi7fSb1cRL9uamTy1KUEQc6C3/EDdiNSjPxd+KwkRGc+Lw0ydzV7htm3L4dL4lMUOkivuw==
X-Received: by 10.140.92.174 with SMTP id b43mr2129255qge.78.1464944799762;
 Fri, 03 Jun 2016 02:06:39 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.55.85.7 with HTTP; Fri, 3 Jun 2016 02:06:39 -0700 (PDT)
From: Jeremy Yallop <yallop@gmail.com>
Date: Fri, 3 Jun 2016 10:06:39 +0100
Message-ID: <CAAxsn=F_r07UY+dOeTT3=02PKzGc7Hs2ZVyS6c4VkCFsa+46Lw@mail.gmail.com>
To: ctypes <ctypes@lists.ocaml.org>
Content-Type: text/plain; charset=UTF-8
Subject: [ocaml-ctypes] ANN: ocaml-ctypes 0.6.0
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 03 Jun 2016 08:40:53 -0000

I'm pleased to announce release 0.6.0 of ocaml-ctypes, which is now available
on OPAM.

Besides several new features, this release introduces a number of
backwards-incompatible changes, which are described below.  If your code is
available on OPAM and is affected by these changes then you should have
received a pull request with a fix.  If you have questions about how to update
your code, please feel free to post to the list (ctypes@lists.ocaml.org).

== Selected new features in 0.5.0 ==

* The Cstubs.FOREIGN interface has been extended with 'returning' and '@->',
  and with some new types.

  See the pull request for details:
    https://github.com/ocamllabs/ocaml-ctypes/pull/389

  NB: code that generates bindings using Cstubs may need to be updated to
  select return and @-> from the bindings functor argument rather than from
  the Ctypes module.  Code that needs to be updated will fail to compile with
  the new interface.  The pull request shows how to update your code, if
  necessary.

* The Cstubs module can now generate asynchronous bindings to C functions
  using the Lwt jobs framework.

  See the pull request for details:
    https://github.com/ocamllabs/ocaml-ctypes/pull/391

* The Cstubs module now supports optionally returning errno alongside the
  return value of bound C functions.

  See the pull request for details:
    https://github.com/ocamllabs/ocaml-ctypes/pull/392

* Cross-compilation support is improved: the configuration step no longer runs
  binaries on the host.

  See the pull request for details:
    https://github.com/ocamllabs/ocaml-ctypes/pull/383

* The Unsigned.S interface has new 'of_int64' and 'to_int64' functions.

== Compatibility ==

Besides the changes to Cstubs.FOREIGN, ocaml-ctypes 0.6.0 introduces the
following backwards-incompatible changes:

* The deprecated '*:*' and '+:+' functions have been removed.  Use
  Ctypes.field instead.

* OCaml 4.00.* is no longer supported.  The earliest supported OCaml release
  is 4.01.0

== Thanks ==

I'm grateful to Spiros Eliopoulos, @orbitz, Leonid Rozenberg and Peter Zotov
for contributions to this release.

From andre@digirati.com.br  Thu Jul 21 21:12:38 2016
Return-Path: <andre@digirati.com.br>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 2CC3A3CBCE
 for <ctypes@lists.ocaml.org>; Thu, 21 Jul 2016 21:12:38 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1750237 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [187.73.32.186 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mta114.f1.k8.com.br ([187.73.32.186]:44257)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES256-GCM-SHA384:256)
 id 1bQKmM-001001-jK (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <andre@digirati.com.br>); Thu, 21 Jul 2016 21:41:10 +0100
Received: from localhost (localhost [127.0.0.1])
 by smtpz.f1.k8.com.br (Postfix) with ESMTP id 13FE7203A7
 for <ctypes@lists.ocaml.org>; Thu, 21 Jul 2016 20:41:05 +0000 (UTC)
X-Virus-Scanned: amavisd-new at k8.com.br
Received: from smtpz.f1.k8.com.br ([127.0.0.1])
 by localhost (mta114.f1.k8.com.br [127.0.0.1]) (amavisd-new, port 10024)
 with LMTP id sbskU1Th5XP5 for <ctypes@lists.ocaml.org>;
 Thu, 21 Jul 2016 20:41:03 +0000 (UTC)
Received: from [10.200.12.21] (unknown [201.76.188.234])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
 (No client certificate requested)
 by smtpz.f1.k8.com.br (Postfix) with ESMTPSA id 225AB201BA
 for <ctypes@lists.ocaml.org>; Thu, 21 Jul 2016 20:41:03 +0000 (UTC)
X-DKIM: OpenDKIM Filter v2.6.8 smtpz.f1.k8.com.br 225AB201BA
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=digirati.com.br;
 s=default; t=1469133663;
 bh=JL3PRlEnc+TEiJ5d5ITL4i1BuOqorV7krH8iaqb37rk=;
 h=To:From:Subject:Date;
 b=CDbM+uFf2th0zbkCVqdzx62R4nsqHprnNCAvZ3baNLkfLCpj+U20yt7TN3PtUc7kH
 YNVJ532y7ui1s6by5Nb1BsZ2hRrskyh58uwcfyGnNoZlyTQtGAK8XVyWWvEoBlMmPU
 grr9y8m2WbJDaDQq0GjAqZYVpgvTBoWcdsTu0HOU=
To: ctypes@lists.ocaml.org
From: Andre Nathan <andre@digirati.com.br>
Message-ID: <5b7fd0d1-e820-f406-8624-2827313423c1@digirati.com.br>
Date: Thu, 21 Jul 2016 17:40:57 -0300
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101
 Thunderbird/45.2.0
MIME-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha256;
 protocol="application/pgp-signature";
 boundary="X7G115PXH7731qUBkpfBE1dQ8sb26NtgS"
Subject: [ocaml-ctypes] Pointer to pointer and null check
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 21 Jul 2016 20:12:38 -0000

This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
--X7G115PXH7731qUBkpfBE1dQ8sb26NtgS
Content-Type: multipart/mixed; boundary="V4R32JDdQu3XXkU2XvofL0nJlF82OL9WT"
From: Andre Nathan <andre@digirati.com.br>
To: ctypes@lists.ocaml.org
Message-ID: <5b7fd0d1-e820-f406-8624-2827313423c1@digirati.com.br>
Subject: Pointer to pointer and null check

--V4R32JDdQu3XXkU2XvofL0nJlF82OL9WT
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

Hi

I'm trying to write bindings to an API that in simplified form looks
like this, for a given opaque type `foo_t`:

  int foo_bar(foo_t **ret, foo_t *foo);

In C it's used like this:

  foo_t *foo =3D foo_new();
  foo_t *ret;
  int r =3D foo_bar(&ret, foo);

  if (r =3D=3D 0) {
    if (ret !=3D NULL) {
      /* success */
    } else {
      /* error */
    }
  } else {
    /* not important */
  }

So if the return is 0, one has to check whether ret is NULL to determine
failure or success.

I have defined in the OCaml side:

  type foo =3D unit ptr
  let foo : foo typ =3D ptr void

  let foo_bar =3D foreign "foo_bar" (ptr foo @-> foo @-> returning int)

  let foo_bar x =3D
    let ret =3D allocate foo x in
    let r =3D foo_bar ret x in
    (r, ret)

Given that `ret` was allocated before the call, it will never be NULL
after the call, so determining if there was an error becomes impossible.

I also tried defining a structure type instead:

  type foo
  let foo : foo structure typ =3D structure "foo_t"

  let foo_bar =3D foreign "foo_bar"
    (ptr ptr foo @-> ptr foo @-> returning int)

  let foo_bar x =3D
    let ret =3D from_voidp foo null in
    let r =3D foo_bar (addr ret) x in
    (r, ret)

but of course I can't call `addr` on a `Ctypes_static.pointer`. Also,
apparently the way to check for NULL is to use `ptr_opt`, but I'm not
sure how that would fit in a function like this where the result is
returned via an argument.

Any help would be greatly appreciated.

Best regards,
Andre


--V4R32JDdQu3XXkU2XvofL0nJlF82OL9WT--

--X7G115PXH7731qUBkpfBE1dQ8sb26NtgS
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="signature.asc"

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQEcBAEBCAAGBQJXkTNZAAoJED4JW1qwFY2c16UH/RqosHNHM0kMpqHbJDrrqPDy
+2z1U6h23ZYBRsGrIwga2YrErp1Z9zeDZ3Jr+tNYoYg6ZHHwOftSaAbX++z0CIaz
E3NUJSnDmfF0jIbviPhbsTZy9yu4hU/ap5NZVUDeGOAffHQB3rhQjZomAKjC3nfh
4W0VC4oPv1opDp6FiJ2IZrukXIoeIWGiTjRuAt+hNtwhKltmZACfUGZhFRO1RxY/
15Ib0Kt4zdMw9nKw8C71i/hLZzlpxgIh//nzKQ2FmgjLqdNHLGsIdK9jV2/l6osa
p64K8wWOlfMXQ68HE48qsOvC1889kjQz3M1CdY5BIYnnT0No3wHoLiKIoms+85I=
=gPe6
-----END PGP SIGNATURE-----

--X7G115PXH7731qUBkpfBE1dQ8sb26NtgS--

From yallop@gmail.com  Thu Jul 21 22:06:32 2016
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-30.csi.cam.ac.uk (ppsw-30.csi.cam.ac.uk [131.111.8.130])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 1B9243C281
 for <ctypes@lists.ocaml.org>; Thu, 21 Jul 2016 22:06:32 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1750237 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.216.172 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qt0-f172.google.com ([209.85.216.172]:34450)
 by ppsw-30.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1bQLcV-000XQ9-fN (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Thu, 21 Jul 2016 22:35:04 +0100
Received: by mail-qt0-f172.google.com with SMTP id u25so51757926qtb.1
 for <ctypes@lists.ocaml.org>; Thu, 21 Jul 2016 14:35:03 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc; bh=2wzF7qAdMEKaXTnOjtiQOsspZHJaUJJb50CMLGpGLlY=;
 b=ANTY+NknE39yv6KZRM0VCs9Hfl7Ylo6xAvVHTL0GDJItxqdcjmImKkAFQVkrDU6k7A
 Cj4GP341jWqohy8MxZPZD7mkqV/vNd8RXDIWQird9IixP3uHxH27yY8UXyh8n5WUgtk8
 4/GpVAiOdNlMs4kCh+RCY2FBawVdINs2DmxEWvGhOKicq5K0pBPtuSRmd0/6smkVAJOH
 hepopYPBhE00qXRz1Si2v4UNXGFL9MXJGZ4IkEvyJWY5M95qYEWvRDEdIJRIQASdGVcF
 xOMraWadDTK1cbq6f7e2SoNHSVCzK1l/fc8bCVsPX1Jl+XdaCJwLSI0jrINWSnp7KEbq
 LrgA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc;
 bh=2wzF7qAdMEKaXTnOjtiQOsspZHJaUJJb50CMLGpGLlY=;
 b=b3lCqn7hcUnbZLO40JTCC4zr+EYRMJwe7pGxmrvQQaF4Fz5ixEKwg+sSzoJa8ZNsKT
 i2CPds1iOZS72uYSg1DdD+34HOL8JRWbaJaNTnFR5W9YzbNSVHgfqf2coy7AcTi3M4Kw
 3cjsZgYHwBSVy+hPcBGV2xMSD9OIuxRN9PRFflj9An+rR61yBaH696SV1EHVR37WzEN6
 0d5OASsH0kume9WulRdyxcg/aaQhMVo4p380ILtrhaJGJiiektArJdzpLuM1nINRFRvh
 z/OmpMBno2UsypkxfM16QP+TEx3GCXTjOuH9l/DShqaij4ZwIMuyk42lXDSA47SI58Cg
 HnmA==
X-Gm-Message-State: AEkooutgv53E48bwLs12xEOWju4zBuMoZzmZuut3xAx/D/dr4iLrae7VdBuWdWsFlBULhJ3hpOOXLxhU0WchCw==
X-Received: by 10.237.49.130 with SMTP id 2mr830290qth.38.1469136902771; Thu,
 21 Jul 2016 14:35:02 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.55.115.2 with HTTP; Thu, 21 Jul 2016 14:35:02 -0700 (PDT)
In-Reply-To: <5b7fd0d1-e820-f406-8624-2827313423c1@digirati.com.br>
References: <5b7fd0d1-e820-f406-8624-2827313423c1@digirati.com.br>
From: Jeremy Yallop <yallop@gmail.com>
Date: Thu, 21 Jul 2016 22:35:02 +0100
Message-ID: <CAAxsn=EdugcM=yz9EZJZFeqMm-mL6H3T-_EiArPJz2ASv_vL9w@mail.gmail.com>
To: Andre Nathan <andre@digirati.com.br>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Pointer to pointer and null check
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 21 Jul 2016 21:06:32 -0000

Dear Andre,

On 21 July 2016 at 21:40, Andre Nathan <andre@digirati.com.br> wrote:
> I'm trying to write bindings to an API that in simplified form looks
> like this, for a given opaque type `foo_t`:
>
>   int foo_bar(foo_t **ret, foo_t *foo);
>
> In C it's used like this:
>
>   foo_t *foo = foo_new();
>   foo_t *ret;
>   int r = foo_bar(&ret, foo);
>
>   if (r == 0) {
>     if (ret != NULL) {
>       /* success */
>     } else {
>       /* error */
>     }
>   } else {
>     /* not important */
>   }
>
> So if the return is 0, one has to check whether ret is NULL to determine
> failure or success.
>
> I have defined in the OCaml side:
>
>   type foo = unit ptr
>   let foo : foo typ = ptr void
>
>   let foo_bar = foreign "foo_bar" (ptr foo @-> foo @-> returning int)
>
>   let foo_bar x =
>     let ret = allocate foo x in
>     let r = foo_bar ret x in
>     (r, ret)
>
> Given that `ret` was allocated before the call, it will never be NULL
> after the call, so determining if there was an error becomes impossible.

Your code above is correct.  I think the apparent difficulty lies in
the different roles of 'ret' in the C and OCaml fragments.

In C, your ret is a pointer to foo_t:

>   foo_t *ret;

You pass its address to foo_bar, which uses the address to modify ret.
(You're passing '&ret', so foo_bar modifies '*&ret'.)

In OCaml, your ret is a pointer to pointer to foo:

>   let foo : foo typ = ptr void
[...]
>     let ret = allocate foo x in

and so, correctly, you pass ret (rather than its address) to foo_bar,
which can consequently only modify *ret, not ret.  (You're passing
'ret', so foo_bar modifies '*ret'.)

So to check for an error you should compare *ret, not ret, with NULL, like this:

   ptr_compare !@ret null = 0

> but of course I can't call `addr` on a `Ctypes_static.pointer`. Also,
> apparently the way to check for NULL is to use `ptr_opt`,

Indeed, that's an option, and perhaps better than explicit null
comparisons.  Here's how you adapt your code to use ptr_opt:

  type foo_opt = unit ptr option
  let foo_opt : foo_opt typ = ptr_opt void

  let foo_bar = foreign "foo_bar" (ptr foo_opt @-> foo_opt @-> returning int)

  let foo_bar x =
    let ret = allocate foo_opt (Some x) in
    let r = foo_bar ret (Some x) in
    (r, !@ret)

Now foo_bar returns a pair

    int * unit ptr option

where the second element is 'None' if *ret was NULL after the call to
foo_bar and 'Some p' for some p otherwise.

I hope that helps,

Jeremy.

From andre@digirati.com.br  Fri Jul 22 12:03:41 2016
Return-Path: <andre@digirati.com.br>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-41.csi.cam.ac.uk (ppsw-41.csi.cam.ac.uk [131.111.8.141])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 18E083C0DA
 for <ctypes@lists.ocaml.org>; Fri, 22 Jul 2016 12:03:41 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1750237 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [187.73.32.186 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mta114.f1.k8.com.br ([187.73.32.186]:53638)
 by ppsw-41.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES256-GCM-SHA384:256)
 id 1bQYgh-00016J-QL (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <andre@digirati.com.br>); Fri, 22 Jul 2016 12:32:15 +0100
Received: from localhost (localhost [127.0.0.1])
 by smtpz.f1.k8.com.br (Postfix) with ESMTP id 614C92007F;
 Fri, 22 Jul 2016 11:32:10 +0000 (UTC)
X-Virus-Scanned: amavisd-new at k8.com.br
Received: from smtpz.f1.k8.com.br ([127.0.0.1])
 by localhost (mta114.f1.k8.com.br [127.0.0.1]) (amavisd-new, port 10024)
 with LMTP id 9Ds3cXfhCZ+o; Fri, 22 Jul 2016 11:32:08 +0000 (UTC)
Received: from [10.200.12.21] (unknown [201.76.188.234])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
 (No client certificate requested)
 by smtpz.f1.k8.com.br (Postfix) with ESMTPSA id 80378200A7;
 Fri, 22 Jul 2016 11:32:08 +0000 (UTC)
X-DKIM: OpenDKIM Filter v2.6.8 smtpz.f1.k8.com.br 80378200A7
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=digirati.com.br;
 s=default; t=1469187128;
 bh=Dfk92Aj/6ZrdfETyJyP90kNNidLAPxg6B0VsPHwJ2lM=;
 h=Subject:To:References:Cc:From:Date:In-Reply-To;
 b=fngjM4Z2f9S/muGETDtAZgn20gFOBMKzBFvijiebtKtUb3x8VTc6gYZArSvfp8SMu
 ei0XdidQqNK8FTsOo+8s3NudbVTrrNuMwJK/uHN29uHMF7ujAAn536lpLZwtZ4vWNY
 pm7+1CTjeHwYB8oOcTUCHZPriF8AMwFi3OHiYj5M=
To: Jeremy Yallop <yallop@gmail.com>
References: <5b7fd0d1-e820-f406-8624-2827313423c1@digirati.com.br>
 <CAAxsn=EdugcM=yz9EZJZFeqMm-mL6H3T-_EiArPJz2ASv_vL9w@mail.gmail.com>
From: Andre Nathan <andre@digirati.com.br>
Message-ID: <74921549-30c4-7c49-6713-0e2e83db804a@digirati.com.br>
Date: Fri, 22 Jul 2016 08:32:04 -0300
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101
 Thunderbird/45.2.0
MIME-Version: 1.0
In-Reply-To: <CAAxsn=EdugcM=yz9EZJZFeqMm-mL6H3T-_EiArPJz2ASv_vL9w@mail.gmail.com>
Content-Type: multipart/signed; micalg=pgp-sha256;
 protocol="application/pgp-signature";
 boundary="9JeHd7IWUsA7HGmUreJtklSqlrgFqwCa5"
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Pointer to pointer and null check
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 22 Jul 2016 11:03:41 -0000

This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
--9JeHd7IWUsA7HGmUreJtklSqlrgFqwCa5
Content-Type: multipart/mixed; boundary="PikipL0g2duq0Xei4OtiI84D6NoJGii2v"
From: Andre Nathan <andre@digirati.com.br>
To: Jeremy Yallop <yallop@gmail.com>
Cc: ctypes <ctypes@lists.ocaml.org>
Message-ID: <74921549-30c4-7c49-6713-0e2e83db804a@digirati.com.br>
Subject: Re: [ocaml-ctypes] Pointer to pointer and null check
References: <5b7fd0d1-e820-f406-8624-2827313423c1@digirati.com.br>
 <CAAxsn=EdugcM=yz9EZJZFeqMm-mL6H3T-_EiArPJz2ASv_vL9w@mail.gmail.com>
In-Reply-To: <CAAxsn=EdugcM=yz9EZJZFeqMm-mL6H3T-_EiArPJz2ASv_vL9w@mail.gmail.com>

--PikipL0g2duq0Xei4OtiI84D6NoJGii2v
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

Thanks a lot Jeremy!

I went with the ptr_opt way, thought I'm a bit surprised it works:

>   let foo_bar x =3D
>     let ret =3D allocate foo_opt (Some x) in
>     let r =3D foo_bar ret (Some x) in
>     (r, !@ret)

Intuitively I thought `ret` could never be null, because calling
`allocate` would be akin to calling malloc() + memset() in C. I also
believed that if the C library would set `*ret =3D NULL`, this would caus=
e
a leak of the memory allocated in `allocate`.

So I guess my understanding is incorrect :)

In the actual code I used

  let ret =3D allocate foo_opt None in
  ...

since there's no meaningful initial value to be set on `ret`. It seems
to be working fine :)

Thanks again,
Andre



--PikipL0g2duq0Xei4OtiI84D6NoJGii2v--

--9JeHd7IWUsA7HGmUreJtklSqlrgFqwCa5
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="signature.asc"

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQEcBAEBCAAGBQJXkgQ0AAoJED4JW1qwFY2caoAH+wVQdDIGxjef8m53jO/7nU8l
/omMXw/koP7+HvIqpc1riYkbwWQO8DtBfv4oH/Ag8TKfWg6r2l8Nev9/aoLD4O/n
6gXVngIfdd7WDx3KU2xa0BS0Cikz2JV4BM92o1nZOo2g8/zC0Gcw56o8YxPpzzk/
cUtzZirhaPfDuQnEjbdCGA9TDlYaAM0GIZPKczKs0liARlTbOOemMCPyEwT7i0IT
vOxkmOCsOTgerCcOG11o43TpEztBI4vgFt4jCX3/4nymbsfMAlNx5ObHijai39uH
q9YcPJp3XjJ3R5l0lA/7RAaO/Wax2dscylPfr2o7eoY+4xDbnmlTqCIvTQvSFZg=
=0+Nc
-----END PGP SIGNATURE-----

--9JeHd7IWUsA7HGmUreJtklSqlrgFqwCa5--

From andre@digirati.com.br  Tue Jul 26 17:56:05 2016
Return-Path: <andre@digirati.com.br>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-30.csi.cam.ac.uk (ppsw-30.csi.cam.ac.uk [131.111.8.130])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id C07F03C1B7
 for <ctypes@lists.ocaml.org>; Tue, 26 Jul 2016 17:56:05 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1750237 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [187.73.32.184 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mta112.f1.k8.com.br ([187.73.32.184]:59408)
 by ppsw-30.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES256-GCM-SHA384:256)
 id 1bS66A-000Aqd-de (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <andre@digirati.com.br>); Tue, 26 Jul 2016 18:24:54 +0100
Received: from localhost (localhost [127.0.0.1])
 by smtpz.f1.k8.com.br (Postfix) with ESMTP id 21A3480293
 for <ctypes@lists.ocaml.org>; Tue, 26 Jul 2016 17:24:48 +0000 (UTC)
X-Virus-Scanned: amavisd-new at k8.com.br
Received: from smtpz.f1.k8.com.br ([127.0.0.1])
 by localhost (mta112.f1.k8.com.br [127.0.0.1]) (amavisd-new, port 10024)
 with LMTP id PMLSpS4SnAuH for <ctypes@lists.ocaml.org>;
 Tue, 26 Jul 2016 17:24:45 +0000 (UTC)
Received: from [10.200.12.21] (unknown [201.76.188.234])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
 (No client certificate requested)
 by smtpz.f1.k8.com.br (Postfix) with ESMTPSA id 8C32780171
 for <ctypes@lists.ocaml.org>; Tue, 26 Jul 2016 17:24:44 +0000 (UTC)
X-DKIM: OpenDKIM Filter v2.6.8 smtpz.f1.k8.com.br 8C32780171
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=digirati.com.br;
 s=default; t=1469553885;
 bh=ppnoDlfStVI/YnfGjhpBVnoBCynuz6NrX1O4mLpTiPg=;
 h=To:From:Subject:Date;
 b=xoLA5JHq5NvsB0DIr58o+uoWb6ZqDPGjnMq9itGODgu5YKLzTCQbo0+ZQO1ZpT+1J
 CbwR0h2gP5mc9MvmGvN6KgU8dmQ2ol7I0q989zAFLVMEB9Fe9ekdPJGN+o4vlW5OTp
 r0kT+0eFFBQiD8XTIAhGhsNKbTLgHhyRBGBxkxAo=
To: ctypes@lists.ocaml.org
From: Andre Nathan <andre@digirati.com.br>
Message-ID: <f9275e8d-0f93-2f42-d8db-8c311fc5976d@digirati.com.br>
Date: Tue, 26 Jul 2016 14:24:40 -0300
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101
 Thunderbird/45.2.0
MIME-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha256;
 protocol="application/pgp-signature";
 boundary="xxUs4RtsJwTwklxn3r8QlrwAnTRVDuKNA"
Subject: [ocaml-ctypes] How to memcpy?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 26 Jul 2016 16:56:05 -0000

This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
--xxUs4RtsJwTwklxn3r8QlrwAnTRVDuKNA
Content-Type: multipart/mixed; boundary="NM1QmMbQEmBfLo9o3DCCWd4bBMgsPOm6J"
From: Andre Nathan <andre@digirati.com.br>
To: ctypes@lists.ocaml.org
Message-ID: <f9275e8d-0f93-2f42-d8db-8c311fc5976d@digirati.com.br>
Subject: How to memcpy?

--NM1QmMbQEmBfLo9o3DCCWd4bBMgsPOm6J
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

Hello

Say I have a C struct that looks like this:

  struct thing {
    void *buffer;
    unsigned long length;
  }

This struct is used to pass values of multiple types to a function. For
example, given

  struct thing *t =3D malloc(...);
  unsigned long len;

you do something like

  int x =3D 42;
  len =3D sizeof(int);
  t->length =3D len;
  t->buffer =3D malloc(len);
  memcpy(t->buffer, &x, len);

or

  char *s =3D "foo";
  len =3D strlen(s);
  t->length =3D len;
  t->buffer =3D malloc(len);
  memcpy(t->buffer, s, len);

In OCaml I'm representing the struct as

  module Thing =3D struct
    type t
    type t =3D thing structure
    let t : t typ =3D structure "thing"
    let buffer =3D field t "buffer" (ptr void)
    let length =3D field t "length" ulong
  end

What I couldn't figure out was how do do the equivalent of the memcpy()
step using Ctypes. I've found Stubs.memcpy but it doesn't seem to be
exported.

Can this kind of thing be done directly using Ctypes or should I write a
stub to handle this case?

Thanks in advance,
Andre


--NM1QmMbQEmBfLo9o3DCCWd4bBMgsPOm6J--

--xxUs4RtsJwTwklxn3r8QlrwAnTRVDuKNA
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="signature.asc"

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQEcBAEBCAAGBQJXl5zYAAoJED4JW1qwFY2cExUIAJlU04H15k5Aky2bPc7b5MO9
VgtcO3TGKdLOZCM1VveS/9FM42/0zkgCKV8/n3l/f2qQxhmJ7QHLq4F30CPdQqoL
ZiG+IZFiPIM2MAeaKs1idEYaZHfigAr0B0nsYj3XqpvaiaBt8jstm/fP/Wijghsj
WMUNpEVIYnp1lowZl10dOqdWyP3RjVg4Vnbi6KMjehb6xUf/hsyy3+zUgobCNR90
qiecGJbFRhny2o8e9MLy2KIxcVHzGXdJfbo8bo/q4fxXvOODum/uLlVko6UGavuZ
mMWkWwUcB8DtBJQZQOX+9LDL2g8tIxjlajIVk+0gUZppejBNoFPctRogUCKPptg=
=ejTx
-----END PGP SIGNATURE-----

--xxUs4RtsJwTwklxn3r8QlrwAnTRVDuKNA--

From andre@digirati.com.br  Tue Jul 26 19:50:18 2016
Return-Path: <andre@digirati.com.br>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id C21ED3C1B7
 for <ctypes@lists.ocaml.org>; Tue, 26 Jul 2016 19:50:18 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1750237 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [187.73.32.186 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mta114.f1.k8.com.br ([187.73.32.186]:51253)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES256-GCM-SHA384:256)
 id 1bS7sh-000tlL-ko (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <andre@digirati.com.br>); Tue, 26 Jul 2016 20:19:08 +0100
Received: from localhost (localhost [127.0.0.1])
 by smtpz.f1.k8.com.br (Postfix) with ESMTP id 81E7C20152
 for <ctypes@lists.ocaml.org>; Tue, 26 Jul 2016 19:19:02 +0000 (UTC)
X-Virus-Scanned: amavisd-new at k8.com.br
Received: from smtpz.f1.k8.com.br ([127.0.0.1])
 by localhost (mta114.f1.k8.com.br [127.0.0.1]) (amavisd-new, port 10024)
 with LMTP id VYRW2mHTmxX0 for <ctypes@lists.ocaml.org>;
 Tue, 26 Jul 2016 19:19:01 +0000 (UTC)
Received: from [10.200.12.21] (unknown [201.76.188.234])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
 (No client certificate requested)
 by smtpz.f1.k8.com.br (Postfix) with ESMTPSA id 403A220151
 for <ctypes@lists.ocaml.org>; Tue, 26 Jul 2016 19:19:01 +0000 (UTC)
X-DKIM: OpenDKIM Filter v2.6.8 smtpz.f1.k8.com.br 403A220151
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=digirati.com.br;
 s=default; t=1469560741;
 bh=/7n9fBG38uMWeooYq5r8KpG7NVSyRU2jk9tiH7NkgC4=;
 h=Subject:To:References:From:Date:In-Reply-To;
 b=j+Jof/PUBRqXaA6j8+Vrokn9CUwKfoXNGf5IePsRd4ambHkwLBde/CMapSkmsB+ct
 BFZHep0AKPuGq0NOvuxUA8zbpK741OLPbHyV1Jw+xENU9py+PTjsVbOWIG2Q+kQkQz
 7/3fFaFIwBHNSXKc0HXGJ9CJmQQPazgqFJBcdX/o=
To: ctypes@lists.ocaml.org
References: <f9275e8d-0f93-2f42-d8db-8c311fc5976d@digirati.com.br>
From: Andre Nathan <andre@digirati.com.br>
Message-ID: <89fed9b1-896c-02d2-038f-eaa0da924a6d@digirati.com.br>
Date: Tue, 26 Jul 2016 16:18:57 -0300
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101
 Thunderbird/45.2.0
MIME-Version: 1.0
In-Reply-To: <f9275e8d-0f93-2f42-d8db-8c311fc5976d@digirati.com.br>
Content-Type: multipart/signed; micalg=pgp-sha256;
 protocol="application/pgp-signature";
 boundary="IDfQmd2evkQwGGXixL1mbEPrXiCT52O3f"
Subject: Re: [ocaml-ctypes] How to memcpy?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 26 Jul 2016 18:50:18 -0000

This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
--IDfQmd2evkQwGGXixL1mbEPrXiCT52O3f
Content-Type: multipart/mixed; boundary="R3D9ECCsmSMK7aCHiDm7faulWnqKT4o7r"
From: Andre Nathan <andre@digirati.com.br>
To: ctypes@lists.ocaml.org
Message-ID: <89fed9b1-896c-02d2-038f-eaa0da924a6d@digirati.com.br>
Subject: Re: [ocaml-ctypes] How to memcpy?
References: <f9275e8d-0f93-2f42-d8db-8c311fc5976d@digirati.com.br>
In-Reply-To: <f9275e8d-0f93-2f42-d8db-8c311fc5976d@digirati.com.br>

--R3D9ECCsmSMK7aCHiDm7faulWnqKT4o7r
Content-Type: text/plain; charset=windows-1252
Content-Transfer-Encoding: quoted-printable

On 07/26/2016 02:24 PM, Andre Nathan wrote:
> What I couldn't figure out was how do do the equivalent of the memcpy()=

> step using Ctypes. I've found Stubs.memcpy but it doesn't seem to be
> exported.

Found this implementation here:

  https://github.com/ocamllabs/ocaml-ctypes/issues/92

Any pointers on how to use it when the source is an OCaml string?

Thanks!


--R3D9ECCsmSMK7aCHiDm7faulWnqKT4o7r--

--IDfQmd2evkQwGGXixL1mbEPrXiCT52O3f
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="signature.asc"

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQEcBAEBCAAGBQJXl7ehAAoJED4JW1qwFY2czeMH/RaaSWC3NiKjZmK4PH8qV3vL
UnyFkxZw4GGS0zjIm8eGfrOCfFLn8VkN2O6bH3j35Sm0qHx4K3AgJR3FWdNIgUi9
aiD3wPeJq7kPT4uyCNbBcU5cSIhpTY10e9lmvc1Xv4GqOk3WJRU4yZms94aFVIQ9
ysXn8p3DzR2itgjyWosMhA+yUeEKz2IkBuL0tguq8GqhchAZ76aFCCXJx3fQeBaQ
tOIspHufyvvcIjBqYhADuWQijjgAVNdygub53dyH10EBCKQqEWATp97BZfbDQoiD
8Nu1rJ6CqqFxG+FnWDdGcBjv/CbbQwJ0B5UzQkI8y0GmFTFsivT7VjR6EWw8Hcw=
=NvfA
-----END PGP SIGNATURE-----

--IDfQmd2evkQwGGXixL1mbEPrXiCT52O3f--

From yallop@gmail.com  Tue Jul 26 22:58:03 2016
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-31.csi.cam.ac.uk (ppsw-31.csi.cam.ac.uk [131.111.8.131])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 1FD5F3C1B7
 for <ctypes@lists.ocaml.org>; Tue, 26 Jul 2016 22:58:03 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1750237 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.220.175 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qk0-f175.google.com ([209.85.220.175]:35464)
 by ppsw-31.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1bSAoN-0007Oa-M9 (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 26 Jul 2016 23:26:52 +0100
Received: by mail-qk0-f175.google.com with SMTP id s63so19463603qkb.2
 for <ctypes@lists.ocaml.org>; Tue, 26 Jul 2016 15:26:51 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc; bh=tGIlTbNS3tVH5dXCNRbxb11PQoQqCVlLm74PkXQmazc=;
 b=HN/wJP979jpMmZjlwBPLBLDcwyHbOPsgYGN3MTcqhNTp9/ysJDxvDHmNTMzP8kS4i8
 nv3VdX4u0md7EVV9r0/76LXKNraBMwtx4c+BuUXPu/QQsEDL4LnET7/nvsec74TtfZJ3
 SciT5/J7WhpZNAkVeV04dS06z/PXrGfU3P2Nrko6nS7yUZ2/ljMcdzs+SlchFQRZMZNM
 ClBKjxJhKpVeUK0/c7VqjnEXu1Mbpkft5E0qDn2bcK5RHMpPbaM52HRNvWafsalecnLq
 Xmpp/ZpfKmiQNln0VqvkS2PHffZFKMcJ1mwn/78yW7sfzHUmNK1uzYGXBs+AhXDurFPj
 T66A==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc;
 bh=tGIlTbNS3tVH5dXCNRbxb11PQoQqCVlLm74PkXQmazc=;
 b=khAMZbQ0aXNpoN4oH7IFs1aFgUbPgOhz+JsQXlwXFvdZscQyolGGVFeVT5kNT/nIf/
 DT8PFM1ILrPsYSUBoIjHOgm8vvbTRX3YkgQ7QsAMFmD03diDMhwkX/dZ6wK0JAkllY2V
 Nikyh37ULN5aL2PdKE5/CX+OkCakUqRi2C3cbX0bUfZjCj6fKSrJWVkqk62piDFGB1FD
 5hYCzXIajcB8u4EtoZ3oSNbJ8q0Ma+Udor7hTxYxoxtNp+d/tZLWeIobt/AzM+Ul4rnJ
 peTFLwTeULOmNxUJmvxzp4PJ90gLcO3KiSTNqWs6wMv2S+++BaV3ah9G5BQZKsjbiG2/
 w8VA==
X-Gm-Message-State: AEkoouvFHmNv4eyBaA4+Lo0yTAn59kNzXTsiO1OXlyyeLkR9DfGZ8yX+w1a2waeba2I47syNXTYolIe4LvmY4g==
X-Received: by 10.55.158.18 with SMTP id h18mr30929287qke.161.1469572010825;
 Tue, 26 Jul 2016 15:26:50 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.55.115.2 with HTTP; Tue, 26 Jul 2016 15:26:50 -0700 (PDT)
In-Reply-To: <f9275e8d-0f93-2f42-d8db-8c311fc5976d@digirati.com.br>
References: <f9275e8d-0f93-2f42-d8db-8c311fc5976d@digirati.com.br>
From: Jeremy Yallop <yallop@gmail.com>
Date: Tue, 26 Jul 2016 23:26:50 +0100
Message-ID: <CAAxsn=Gb9C7XQaMSATZtnrJAWEuXO=NKdz+PAg-gdpTd+xMJrg@mail.gmail.com>
To: Andre Nathan <andre@digirati.com.br>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] How to memcpy?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 26 Jul 2016 21:58:03 -0000

Dear Andre,

On 26 July 2016 at 18:24, Andre Nathan <andre@digirati.com.br> wrote:
> Say I have a C struct that looks like this:
>
>   struct thing {
>     void *buffer;
>     unsigned long length;
>   }
>
> This struct is used to pass values of multiple types to a function. For
> example, given
>
>   struct thing *t = malloc(...);
>   unsigned long len;
>
> you do something like
>
>   int x = 42;
>   len = sizeof(int);
>   t->length = len;
>   t->buffer = malloc(len);
>   memcpy(t->buffer, &x, len);
>
> or
>
>   char *s = "foo";
>   len = strlen(s);
>   t->length = len;
>   t->buffer = malloc(len);
>   memcpy(t->buffer, s, len);
>
> In OCaml I'm representing the struct as
>
>   module Thing = struct
>     type t
>     type t = thing structure
>     let t : t typ = structure "thing"
>     let buffer = field t "buffer" (ptr void)
>     let length = field t "length" ulong
>   end
>
> What I couldn't figure out was how do do the equivalent of the memcpy()
> step using Ctypes. I've found Stubs.memcpy but it doesn't seem to be
> exported.

In many cases you'll be able to avoid the call to 'memcpy' by using
'allocate' to create an initialized object, like this:

   let p = allocate int 42 in
   setf v buffer (coerce (ptr int) (ptr void) p)

But if you encounter a situation where you really need something like
'memcpy' then you may find the following little library useful:

   https://github.com/yallop/ocaml-memcpy

The library provides several flavours of memcpy, with and without
bounds checking, and to and from various kinds of objects including
OCaml bytes buffers, bigarrays, and arbitrary memory addressed by
ctypes pointers.

For completeness, I should mention that there are tricks to do the
equivalent of memcpy using just ctypes, without additional libraries,
by coercing pointers to arrays of char of appropriately sizes, but I
recommend the library approach as a better starting point.

Kind regards,

Jeremy.

From andre@digirati.com.br  Wed Jul 27 01:02:19 2016
Return-Path: <andre@digirati.com.br>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-31.csi.cam.ac.uk (ppsw-31.csi.cam.ac.uk [131.111.8.131])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 1D0C33C1B7
 for <ctypes@lists.ocaml.org>; Wed, 27 Jul 2016 01:02:19 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1750237 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [187.73.32.199 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mta123.f1.k8.com.br ([187.73.32.199]:55435)
 by ppsw-31.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES256-GCM-SHA384:256)
 id 1bSCke-000sGJ-Ky (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <andre@digirati.com.br>); Wed, 27 Jul 2016 01:31:09 +0100
Received: from localhost (localhost [127.0.0.1])
 by smtpz.f1.k8.com.br (Postfix) with ESMTP id 4AC766031D;
 Wed, 27 Jul 2016 00:31:03 +0000 (UTC)
X-Virus-Scanned: amavisd-new at k8.com.br
Received: from smtpz.f1.k8.com.br ([127.0.0.1])
 by localhost (mta123.f1.k8.com.br [127.0.0.1]) (amavisd-new, port 10024)
 with LMTP id Ng8xLLhGJRhJ; Wed, 27 Jul 2016 00:30:59 +0000 (UTC)
Received: from [100.81.38.176] (unknown [191.39.81.0])
 (using TLSv1 with cipher ECDHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by smtpz.f1.k8.com.br (Postfix) with ESMTPSA id 7E427603D6;
 Wed, 27 Jul 2016 00:30:57 +0000 (UTC)
X-DKIM: OpenDKIM Filter v2.6.8 smtpz.f1.k8.com.br 7E427603D6
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=digirati.com.br;
 s=default; t=1469579457;
 bh=BrKvD0qvbjXvbrmbgy3GCTeMAIaI9+A+uVAN0y1IVVY=;
 h=Subject:From:In-Reply-To:Date:Cc:References:To;
 b=HWffD8/HDEtRtul38B4nQZGw2RXVSu8Y9bSBSjxpHpdkq5Dp1wKbHAaNcRn2irD0e
 iIAJiJrorsqoHd0wWzmLG9BYcXUYIazP8fbOfUQ+pkAZ4WwzoIjk5UgnJtKY+SqHdw
 8wWQ9YzQMe8M5Vecebpwa5boje0UXrZWo/fyUoh0=
Content-Type: text/plain;
	charset=utf-8
Mime-Version: 1.0 (1.0)
From: Andre Nathan <andre@digirati.com.br>
X-Mailer: iPhone Mail (13G34)
In-Reply-To: <CAAxsn=Gb9C7XQaMSATZtnrJAWEuXO=NKdz+PAg-gdpTd+xMJrg@mail.gmail.com>
Date: Tue, 26 Jul 2016 21:30:45 -0300
Content-Transfer-Encoding: quoted-printable
Message-Id: <F58D57F4-1DF3-48A3-9852-1C738C540349@digirati.com.br>
References: <f9275e8d-0f93-2f42-d8db-8c311fc5976d@digirati.com.br>
 <CAAxsn=Gb9C7XQaMSATZtnrJAWEuXO=NKdz+PAg-gdpTd+xMJrg@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] How to memcpy?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 27 Jul 2016 00:02:19 -0000

Hi Jeremy

> Em 26 de jul de 2016, =C3=A0s 19:26, Jeremy Yallop <yallop@gmail.com> escr=
eveu:
>=20
> In many cases you'll be able to avoid the call to 'memcpy' by using
> 'allocate' to create an initialized object, like this:
>=20
>   let p =3D allocate int 42 in
>   setf v buffer (coerce (ptr int) (ptr void) p)

For strings it seems from the description at [1] that using this method will=
 cause problems if the C object lives longer than the OCaml object.

Is there a way to copy an OCaml string into the buffer with stock a Ctypes o=
r is memcpy the way to go here?

[1] https://github.com/ocamllabs/ocaml-ctypes/issues/159

Best,
Andre=


From yallop@gmail.com  Wed Jul 27 06:59:54 2016
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 268583C283
 for <ctypes@lists.ocaml.org>; Wed, 27 Jul 2016 06:59:54 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1750237 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.220.173 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qk0-f173.google.com ([209.85.220.173]:33635)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1bSIKi-000v0S-jS (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Wed, 27 Jul 2016 07:28:45 +0100
Received: by mail-qk0-f173.google.com with SMTP id p74so26240346qka.0
 for <ctypes@lists.ocaml.org>; Tue, 26 Jul 2016 23:28:43 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc; bh=Nnb9ODPSTA9k66+jgwhXYSFwN+GZz1KWtGo9GvyWicA=;
 b=TWpgvUhS6WhcWvqtl58XWbcvuHmVJ9OA06QN4yWnI/BKQM+Fi62jfI/idyIlFFHTX0
 hll2mVRaRpf2po7EHuLv2fsvgA//USHOOOLi1HYXEoKbVWUbckYOtCnsf4T6EkCQED/Y
 Dw8aka0Bm2QJeJQQjwwMnD1eAjFN4Ie5qmLDqFOeekMJVTP4sgfVrYPfN+Tw8Aqt2D9I
 zeW3/DNnC1eWn/DLVufsiajT+dR5nWdOLO/Bb4uGLi8584pROQIB8xlocM83s/U/SeAx
 mtScYiGcCF5clgOZ1kF28tEkFxWY0VwZxc1Y2QKOa/PlAnbSZhmx+3a/xyLSdRUeXA8M
 /kIw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc;
 bh=Nnb9ODPSTA9k66+jgwhXYSFwN+GZz1KWtGo9GvyWicA=;
 b=SRA/w4rIWIYw5j+8/mj/rT6agYNAzwE6KS6RwmHYoIyk3YQahCeLRAuuaKS7myNJ+/
 7Ya/I+sYK/lIJL8EcH8/ht4ki5VR3e8m157H3PcE4MA/I0MQHZsfPuxfWkuyFvMX0nQl
 oboiiww4s9dsdydaiBsG42Op0qIC874Gm3d/keRnLxFY48RZHezB3PYT7XOEeXYCHMDn
 Ha0hW6rFMy/5yCZ4fs0jQJLJH9j00U2oz0Fu38uztgetk/u75kohHufRRva8X1hBsaUc
 rztZ/QMFSs2xac1WG6KbpvVMWKBzbuATuqx6rkVB7r5D2ds1nLMU1R3fc1W9xfBu8bbv
 VU8w==
X-Gm-Message-State: AEkoouv0eWj/Vr7eDi0zQU7UehE+LfTXTDuwEs4/H3ESqmn6zXzKN8GVdgg8XUvXfOi34qisfT7ED6gCPpg7bA==
X-Received: by 10.55.24.230 with SMTP id 99mr1817460qky.161.1469600923176;
 Tue, 26 Jul 2016 23:28:43 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.55.115.2 with HTTP; Tue, 26 Jul 2016 23:28:42 -0700 (PDT)
In-Reply-To: <F58D57F4-1DF3-48A3-9852-1C738C540349@digirati.com.br>
References: <f9275e8d-0f93-2f42-d8db-8c311fc5976d@digirati.com.br>
 <CAAxsn=Gb9C7XQaMSATZtnrJAWEuXO=NKdz+PAg-gdpTd+xMJrg@mail.gmail.com>
 <F58D57F4-1DF3-48A3-9852-1C738C540349@digirati.com.br>
From: Jeremy Yallop <yallop@gmail.com>
Date: Wed, 27 Jul 2016 07:28:42 +0100
Message-ID: <CAAxsn=HVKhD+-RUcUDE8YGxcnaRHWk=o_buMRSrneszuBF1mdg@mail.gmail.com>
To: Andre Nathan <andre@digirati.com.br>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] How to memcpy?
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 27 Jul 2016 05:59:54 -0000

On 27 July 2016 at 01:30, Andre Nathan <andre@digirati.com.br> wrote:
> Is there a way to copy an OCaml string into the buffer with stock a Ctypes or is memcpy the way to go here?

I recommend using memcpy here.

From yallop@gmail.com  Mon Aug  1 15:42:17 2016
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 2A8AB3C2FC
 for <ctypes@lists.ocaml.org>; Mon,  1 Aug 2016 15:42:17 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1754637 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.216.180 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qt0-f180.google.com ([209.85.216.180]:33835)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1bUEsG-000kPm-mG (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Mon, 01 Aug 2016 16:11:26 +0100
Received: by mail-qt0-f180.google.com with SMTP id u25so105748608qtb.1
 for <ctypes@lists.ocaml.org>; Mon, 01 Aug 2016 08:11:24 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:from:date:message-id:subject:to;
 bh=j5GoaP0aBKPgdKJffTz44Q3FyXWundl8noScDRRhMXc=;
 b=gHI22VHSrCsk+Gkvn3OhXjUEryF2ZCGGZXGwIq/fW71AfkshoOeV2yVuwd5PWL7vb3
 uSFBpJXQ9jGKqAsmzql0MBVDczBTEa6a1zgDrof6F8/A9caHK5dpJshWYKvHhmZ2Fa+F
 BWuHd8jvODMn7EpowOnuEi0w3RLj+atatABykjqnWMCnP7hNZDhYaoxPf+jcG2frh5Of
 RzvC4sTUCJFfeiQ5+jcroH8BpP/vt5nMLQCVpqRZR5WNsAziGAHAJk0Zqj/hX00071/z
 qcEFwxwExMbE+BOvXOsQF2uFnGVScpGQa0PoANkGynDYcESYbnWLegwr0K+uTcvaUoVQ
 FkYw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:from:date:message-id:subject:to;
 bh=j5GoaP0aBKPgdKJffTz44Q3FyXWundl8noScDRRhMXc=;
 b=e46sW+j15DBIiXGy/kPB7Ej8sduvUB3OPP1ImfYO8G3hLSdf/QyWvIEEU7INavWLUI
 kueljj2VqsY81RQYTyU8wyRR6icZHcY99Q3ch/lLd/BUy6vP40mHZU8c16vN2t+FeM/R
 pbFM6N+sA62EH8pd39pKmbEyt5LZ0wX54ubBBTsNuKAf/bKpIttfAOKpeT3U1EE8L+bC
 CJvJIWsj4HCLuvDJMno2iOtQIVpU63iB5h6Os1Qfdfm/gpLo4pUTBIcaGEoFWEP3qS15
 iSmGVnM66hUyUsHdMWV3E6bxskV3l6wQvWc4cHJGnK9NijdXZozjBguxvja6lJxNGk2P
 sUYQ==
X-Gm-Message-State: AEkooutpEAaJjqYfUugh+PjHH12cznHrc7NE7e6ZOANb9cKPisQtMWBFWZdzxucya/D4EeqG/PTRFNHBoUlW+Q==
X-Received: by 10.237.37.99 with SMTP id w32mr88378051qtc.59.1470064283816;
 Mon, 01 Aug 2016 08:11:23 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.55.115.2 with HTTP; Mon, 1 Aug 2016 08:11:23 -0700 (PDT)
From: Jeremy Yallop <yallop@gmail.com>
Date: Mon, 1 Aug 2016 16:11:23 +0100
Message-ID: <CAAxsn=EYdsK4kWF5seAcFyPLRsGvqU3OzNHG5e6gFZNOgvS=_w@mail.gmail.com>
To: ctypes <ctypes@lists.ocaml.org>
Content-Type: text/plain; charset=UTF-8
Subject: [ocaml-ctypes] Removing ctypes.foreign.{threaded,unthreaded}
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 01 Aug 2016 14:42:17 -0000

Current releases of ctypes include two implementations of the Foreign
module, available in findlib subpackages:

   - ctypes.foreign.threaded
   - ctypes.foreign.unthreaded

The appropriate implementation is selected automatically, depending on
whether threads are in use.

I'd like to remove these subpackages, replacing them with a single
implementation of Foreign which always depends on the threads library.

If this change is likely to cause problems for you, please speak up,
either here or on the GitHub PR:

    https://github.com/ocamllabs/ocaml-ctypes/pull/419

From daniel.buenzli@erratique.ch  Mon Aug  1 15:53:24 2016
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 0623D3C076
 for <ctypes@lists.ocaml.org>; Mon,  1 Aug 2016 15:53:24 +0100 (BST)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1754637 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [74.55.86.74 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:36999
 helo=smtp.webfaction.com)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1:AES256-SHA:256)
 id 1bUF32-000xYM-jj (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Mon, 01 Aug 2016 16:22:33 +0100
Received: from [192.168.5.63] (174-49.dsl.iskon.hr [89.164.174.49])
 by smtp.webfaction.com (Postfix) with ESMTP id 01A0A210792B;
 Mon,  1 Aug 2016 15:22:29 +0000 (UTC)
Date: Mon, 1 Aug 2016 17:22:27 +0200
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Jeremy Yallop <yallop@gmail.com>
Message-ID: <9E733D5FEADD450788EB678E40DE2E33@erratique.ch>
In-Reply-To: <CAAxsn=EYdsK4kWF5seAcFyPLRsGvqU3OzNHG5e6gFZNOgvS=_w@mail.gmail.com>
References: <CAAxsn=EYdsK4kWF5seAcFyPLRsGvqU3OzNHG5e6gFZNOgvS=_w@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Removing ctypes.foreign.{threaded,unthreaded}
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 01 Aug 2016 14:53:24 -0000

Le lundi, 1 ao=C3=BBt 2016 =C3=A0 17:11, Jeremy Yallop a =C3=A9crit :
> I'd like to remove these subpackages, replacing them with a single
> implementation of =46oreign which always depends on the threads library=
.


What happens if you have an ocaml compiler configured with =60-no-pthread=
 =60=3F

Best,

Daniel
 =20



From yallop@gmail.com  Tue Aug  2 10:28:33 2016
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-41.csi.cam.ac.uk (ppsw-41.csi.cam.ac.uk [131.111.8.141])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id CCFB83C1DA
 for <ctypes@lists.ocaml.org>; Tue,  2 Aug 2016 10:28:33 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1754709 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.220.195 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qk0-f195.google.com ([209.85.220.195]:34651)
 by ppsw-41.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1bUWSH-00007l-Qj (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 02 Aug 2016 10:57:45 +0100
Received: by mail-qk0-f195.google.com with SMTP id s186so7638009qkb.1
 for <ctypes@lists.ocaml.org>; Tue, 02 Aug 2016 02:57:45 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc:content-transfer-encoding;
 bh=0Bsy/uVI8fBD2G3+9Lip1Om6PiCQIcF7dhFD+M61ZUk=;
 b=xNAe2nfA6Kaz2L7yk3ARB8RW8YT3Cl974nm7WitUKbcqkBHwlWiL3rWaZ2WX4oyzNW
 H2SbkMzHeNNqTPOZpweEipyT0E35Zug0XkX6EOWg10rza4cAswTQKg3y5XHEUdDZln3Q
 za3FwGwyHgiQh1o0wojKWxz49sV3QXzIu3cmRZ6/9UQT6xUrTYK5P48F4sGDMwl4/pbC
 G7m1qmjKyXIEekzOLiFSdzhlslut06MkabjQTx8Gij0G5lox/Mw3qjnxPD77dKipVBtt
 5h9IOVfcHvP6j8nqfqMjc3z+oLA0JvFAh3F86Xk7kEqY2ERdM8yRAapvVBdCrUbqokGQ
 k/aA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc:content-transfer-encoding;
 bh=0Bsy/uVI8fBD2G3+9Lip1Om6PiCQIcF7dhFD+M61ZUk=;
 b=OwM+6Kt8D1ITkxQpIAXxoCUT8tUATrNDYi3Gj0avXTugEkczfKlFQO8Ac1jlQj74sT
 nWp+hvq5pRYJpwP2ezOX1k5hT1sLghMl9meT31wGVsq1zRuO7LiaY0Hzxm5/Z/18T9sQ
 hBo18pRIJm1zRBhbm1U3y0EUnG99qEOplbuJGmpPohMQRhMwTB8OS+FBP3S08ttW9aeI
 yXnETzi4LjFmsrjdzcOA4nFqb/GnpmHil2Kb1gkR1iKXP9+dzVcEa+rV7HuERyS/5i1B
 vxG93KkIrUamXv8C1d0Pu2LAJ1VUTZ1LvbGsCXOsBguBwW843BVbVsz6idgpRbwLWoI9
 rJGQ==
X-Gm-Message-State: AEkoouvuJM8lyE6CPUiUiQ43WA8I6priweBWq3/Fi35RAX3DOnXoo0dtXPKybmdt9Csx66QSvwbRxl8yf/WFsA==
X-Received: by 10.55.195.76 with SMTP id a73mr37032037qkj.101.1470131864322;
 Tue, 02 Aug 2016 02:57:44 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.55.115.2 with HTTP; Tue, 2 Aug 2016 02:57:43 -0700 (PDT)
In-Reply-To: <9E733D5FEADD450788EB678E40DE2E33@erratique.ch>
References: <CAAxsn=EYdsK4kWF5seAcFyPLRsGvqU3OzNHG5e6gFZNOgvS=_w@mail.gmail.com>
 <9E733D5FEADD450788EB678E40DE2E33@erratique.ch>
From: Jeremy Yallop <yallop@gmail.com>
Date: Tue, 2 Aug 2016 10:57:43 +0100
Message-ID: <CAAxsn=HUuwQ-FjyJLOKY0r2gKY8G3DqYPCaShL2DANWLKjmTSg@mail.gmail.com>
To: =?UTF-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Removing ctypes.foreign.{threaded,unthreaded}
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 02 Aug 2016 09:28:33 -0000

On 1 August 2016 at 16:22, Daniel B=C3=BCnzli <daniel.buenzli@erratique.ch>=
 wrote:
> Le lundi, 1 ao=C3=BBt 2016 =C3=A0 17:11, Jeremy Yallop a =C3=A9crit :
>> I'd like to remove these subpackages, replacing them with a single
>> implementation of Foreign which always depends on the threads library.
>
> What happens if you have an ocaml compiler configured with `-no-pthread `=
?

That's a good point.  I don't think ctypes will work out-of-the-box
with -no-pthread even now, but removing the unthreaded subpackage
might add further obstacles.

From andre@digirati.com.br  Wed Aug 10 20:50:52 2016
Return-Path: <andre@digirati.com.br>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-31.csi.cam.ac.uk (ppsw-31.csi.cam.ac.uk [131.111.8.131])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 55D3D3C1B7
 for <ctypes@lists.ocaml.org>; Wed, 10 Aug 2016 20:50:52 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1755581 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [187.73.32.199 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mta123.f1.k8.com.br ([187.73.32.199]:57820)
 by ppsw-31.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES256-GCM-SHA384:256)
 id 1bXZzM-000En5-Ji (Exim 4.87) for ctypes@lists.ocaml.org
 (return-path <andre@digirati.com.br>); Wed, 10 Aug 2016 21:20:32 +0100
Received: from localhost (localhost [127.0.0.1])
 by smtpz.f1.k8.com.br (Postfix) with ESMTP id 42453600F3
 for <ctypes@lists.ocaml.org>; Wed, 10 Aug 2016 20:20:27 +0000 (UTC)
X-Virus-Scanned: amavisd-new at k8.com.br
Received: from smtpz.f1.k8.com.br ([127.0.0.1])
 by localhost (mta123.f1.k8.com.br [127.0.0.1]) (amavisd-new, port 10024)
 with LMTP id s6IvLbDJmNv1 for <ctypes@lists.ocaml.org>;
 Wed, 10 Aug 2016 20:20:24 +0000 (UTC)
Received: from [10.200.12.21] (unknown [201.76.188.234])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
 (No client certificate requested)
 by smtpz.f1.k8.com.br (Postfix) with ESMTPSA id B3547601EE
 for <ctypes@lists.ocaml.org>; Wed, 10 Aug 2016 20:20:21 +0000 (UTC)
X-DKIM: OpenDKIM Filter v2.6.8 smtpz.f1.k8.com.br B3547601EE
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=digirati.com.br;
 s=default; t=1470860421;
 bh=69kWizsOQxy4WG8QhpgBJ3kBTvdGOaSLpu3H2oTAJWU=;
 h=To:From:Subject:Date;
 b=MeewyS4WQEs+1JdjzmjzPbBnCKTT/JkSQQMIAYTDdW7aKC/HbiAS55lSlIloDQLMx
 wJMt+Jbve5lXdNR/ybTfUQq/wl8lXqZg5D4oh7SeX0fburfzXsZvj6wHLKeW+KULoc
 3+klRDnTTbY6Qv+ostpuLNcEfOUeuauCo3sds6Qo=
To: ctypes <ctypes@lists.ocaml.org>
From: Andre Nathan <andre@digirati.com.br>
Message-ID: <ded331f4-a9bb-931d-db8f-54908d3caa75@digirati.com.br>
Date: Wed, 10 Aug 2016 17:20:17 -0300
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101
 Thunderbird/45.2.0
MIME-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha256;
 protocol="application/pgp-signature";
 boundary="VbgIvI8IuUIXKm2541oWuUutNkvc8cA0v"
Subject: [ocaml-ctypes] Build help
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 10 Aug 2016 19:50:52 -0000

This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
--VbgIvI8IuUIXKm2541oWuUutNkvc8cA0v
Content-Type: multipart/mixed; boundary="pHjfB1LIPMUpqaxJwB4CxG8bikdUGWm4H"
From: Andre Nathan <andre@digirati.com.br>
To: ctypes <ctypes@lists.ocaml.org>
Message-ID: <ded331f4-a9bb-931d-db8f-54908d3caa75@digirati.com.br>
Subject: Build help

--pHjfB1LIPMUpqaxJwB4CxG8bikdUGWm4H
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

Hi

I have working ctypes bindings for MariaDB's libmysqlclient at

  https://github.com/andrenth/ocaml-mariadb

I basically copied and adapted the project structure from

  https://github.com/simonjbeaumont/ocaml-flock

to get stub generation working. Currently I'm doing

  let foreign name typ =3D foreign name typ
    ~from:Dl.(dlopen ~filename:"libmysqlclient.so" ~flags:[RTLD_NOW])

to avoid getting a build error:

  Fatal error: exception
Dl.DL_error("/home/andre/.opam/4.03.0/lib/stublibs/dllctypes-foreign-base=
_stubs.so:
undefined symbol: mysql_server_init")

I'd like to get rid of that, and from googling I found the suggestion of
adding "CCOpt: -Wl,-no-as-needed" (I'm on Ubuntu) to the _oasis file,
but that didn't seem to make a difference.

I'm also not sure if that suggestion if still current, and the
repositories I found on github with a similar structure don't seem to be
using that option. They don't seem to be using the dlopen trick either,
so I'm guessing there's some other way to fix this.

Any help would be greatly appreciated.

Best regards,
Andre


--pHjfB1LIPMUpqaxJwB4CxG8bikdUGWm4H--

--VbgIvI8IuUIXKm2541oWuUutNkvc8cA0v
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="signature.asc"

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQEcBAEBCAAGBQJXq4yBAAoJED4JW1qwFY2cM9wH/Rqu7ujlo2rWlP89B65OeXXv
hxUFtbczgtODyTd0uxe/Jh51FNL6C46ZZd0nJOLLOgixqBjthEy7HeuXIwsCrXor
oOaTJpMHHx20UxpKuIwy3rGI6vn6bnTJkf1vW4zFw7C1grnbPNHe0gq3xesT69Yf
EbqSPuU5J3HHlACZiTW9L8QOKFvdKd0sTqtecRGOW+KAD6B4OR74M1Dorbkvi/mr
lmEqey8y5VpDxnYXgeI4CIrNzU0yi+b16CrDz7SGOwj+S5A3eIgDLwd2zx1ehXzM
3YR6PzbmBgvpm5cQI03vw/NVhtGPSMs/C0e3S3T/eCbYh1BFX9lrGS94vBYYHN8=
=npb3
-----END PGP SIGNATURE-----

--VbgIvI8IuUIXKm2541oWuUutNkvc8cA0v--

From yallop@gmail.com  Mon Aug 15 12:05:06 2016
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-30.csi.cam.ac.uk (ppsw-30.csi.cam.ac.uk [131.111.8.130])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 001533C031
 for <ctypes@lists.ocaml.org>; Mon, 15 Aug 2016 12:05:05 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1756128 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.220.169 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qk0-f169.google.com ([209.85.220.169]:36483)
 by ppsw-30.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1bZGAW-000LgB-fc (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Mon, 15 Aug 2016 12:35:02 +0100
Received: by mail-qk0-f169.google.com with SMTP id l2so39844268qkf.3
 for <ctypes@lists.ocaml.org>; Mon, 15 Aug 2016 04:35:00 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc; bh=0asVkHHlQdMpuV036TSRqNN4xMnnYy9/pK13tKKIUYk=;
 b=ztxj8zaiWqlmTCfkeg8+4s9xEDnauUbyriPzzZdRQkiLmgKHFKhEnMtJCEwEphF+U5
 HfIQa4778ud0cC/qJ7qYvZ9SjTBKipm0sX974zCWJbUWEEer5neSm1YZ2QBKErOV85eC
 utheZN3UhrImY02+DITcbvyKND0nndL67EZru00tp1R8eqefft/eiiD11H6BspnRgil1
 3t3owqWhYaTlx3XkUME9nBQO9R+yGBSRY70fsEBswipoALMvrLslARbzWOXWDA9SXR6F
 1mWQ9ktl0SklyWwYEOUIaU3td4oAr21GRMGcENOpIJfUAP9CrbfXW7y3qmrwt7/vh6+0
 Dj/w==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc;
 bh=0asVkHHlQdMpuV036TSRqNN4xMnnYy9/pK13tKKIUYk=;
 b=LVbZu7Hj0VKWV8QE62H6YEA6a1UVug9WvuACCOYnkgqCCtkKWyzKt0XQKcjXi8augB
 q2lOvf0rjgRlVAncQKBeMpVHilejNHmzmCJ+seSaGZIzI287dM640B/5dge/v7psbI8F
 yPzQnOR+3f5YfbmDit/tQiorlYTtTW67+75TdPDO7QLWdbx0O9wvyUztUTHw3EqKEMlU
 ti39cvNBG1La4UcwXVxg8RejULRFrd9ExN2DhZQzX82uzGYROqKM8MJiVzvuLyAG+b3W
 +fJFmKd1n6imZyPtxGvPKO9uEM1/zcfKlUK4rEWFIMiLzq/XXAF3jyJpJZSjlB7BkFco
 oDgQ==
X-Gm-Message-State: AEkoouuu4rND4Cgy8I/oHKeTmufV05keUol+u2shL7Z6IVV6huoeQWkuYL5lS6kv5BHz3vSXKZTnphSLQR8HnA==
X-Received: by 10.55.204.199 with SMTP id n68mr30396341qkl.209.1471260899938; 
 Mon, 15 Aug 2016 04:34:59 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.55.115.2 with HTTP; Mon, 15 Aug 2016 04:34:59 -0700 (PDT)
In-Reply-To: <ded331f4-a9bb-931d-db8f-54908d3caa75@digirati.com.br>
References: <ded331f4-a9bb-931d-db8f-54908d3caa75@digirati.com.br>
From: Jeremy Yallop <yallop@gmail.com>
Date: Mon, 15 Aug 2016 12:34:59 +0100
Message-ID: <CAAxsn=FLicyp8ckg0+7GxhYidPGc=Ct3N=eQLF4B+5X8Tr8sfg@mail.gmail.com>
To: Andre Nathan <andre@digirati.com.br>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Build help
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 15 Aug 2016 11:05:06 -0000

Dear Andre,

On 10 August 2016 at 21:20, Andre Nathan <andre@digirati.com.br> wrote:
> I have working ctypes bindings for MariaDB's libmysqlclient at
>
>   https://github.com/andrenth/ocaml-mariadb
>
> I basically copied and adapted the project structure from
>
>   https://github.com/simonjbeaumont/ocaml-flock
>
> to get stub generation working. Currently I'm doing
>
>   let foreign name typ = foreign name typ
>     ~from:Dl.(dlopen ~filename:"libmysqlclient.so" ~flags:[RTLD_NOW])
>
> to avoid getting a build error:

If you're using stub generation (which I recommend), then you
typically don't need to use the Dl module at all.  The usual approach
is to use the 'foreign' function that comes from the argument to your
bindings functor instead of the function from the top-level Foreign
module.  In other words, instead of this:

   module Foreign_bindings = struct
     open Foreign

     let foreign name typ = foreign name typ
       ~from:Dl.(dlopen ~filename:"libmysqlclient.so" ~flags:[RTLD_NOW])

     let mysql_library_init = foreign "mysql_server_init"
       (int @-> ptr_opt (ptr char) @-> ptr_opt (ptr char) @-> returning int)

you'd write something like this:

   module Foreign_bindings(F: Cstubs.FOREIGN) = struct
     open F

     let mysql_library_init = foreign "mysql_server_init"
       (int @-> ptr_opt (ptr char) @-> ptr_opt (ptr char) @-> returning int)

In this second snippet 'foreign' refers to 'F.foreign', not 'Foreign.foreign'.

Linking is generally much easier with this second approach.  Since
names are resolved statically by the standard C toolchain there's no
need to pass `-Wl,-no-as-needed`, set up LD_LIBRARY_PATH, etc.

Kind regards,

Jeremy.

From andre@digirati.com.br  Mon Aug 15 21:11:35 2016
Return-Path: <andre@digirati.com.br>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-41.csi.cam.ac.uk (ppsw-41.csi.cam.ac.uk [131.111.8.141])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 3E7463C031
 for <ctypes@lists.ocaml.org>; Mon, 15 Aug 2016 21:11:35 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1756128 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [187.73.32.186 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mta114.f1.k8.com.br ([187.73.32.186]:53428)
 by ppsw-41.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES256-GCM-SHA384:256)
 id 1bZOhQ-0002eA-Q7 (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <andre@digirati.com.br>); Mon, 15 Aug 2016 21:41:32 +0100
Received: from localhost (localhost [127.0.0.1])
 by smtpz.f1.k8.com.br (Postfix) with ESMTP id 133D9201F2;
 Mon, 15 Aug 2016 20:41:26 +0000 (UTC)
X-Virus-Scanned: amavisd-new at k8.com.br
Received: from smtpz.f1.k8.com.br ([127.0.0.1])
 by localhost (mta114.f1.k8.com.br [127.0.0.1]) (amavisd-new, port 10024)
 with LMTP id B-rUYabAt6G4; Mon, 15 Aug 2016 20:41:24 +0000 (UTC)
Received: from [10.200.12.21] (unknown [201.76.188.234])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
 (No client certificate requested)
 by smtpz.f1.k8.com.br (Postfix) with ESMTPSA id 71ABB200F9;
 Mon, 15 Aug 2016 20:41:23 +0000 (UTC)
X-DKIM: OpenDKIM Filter v2.6.8 smtpz.f1.k8.com.br 71ABB200F9
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=digirati.com.br;
 s=default; t=1471293684;
 bh=SRCSNxo/ZAdx4EYt2rwEu1ahgkKoRlsIVl/T4C1KXfU=;
 h=Subject:To:References:Cc:From:Date:In-Reply-To;
 b=m66qdM6pNx9nvgP8cO8Z4X2zl9ME/CB/eSnv3m9JwES81HdecY2GJoQbNC4ZCxubW
 rKjbYfXAgdYtpLtFPh0gHXTgiEjNpajol1bi+9jFxhiXU7ryl/W0RtYg2emNbBljrg
 iC2HU+lDOxpgxaKWCrVs/bCCTU15bQgZEH0IdoD8=
To: Jeremy Yallop <yallop@gmail.com>
References: <ded331f4-a9bb-931d-db8f-54908d3caa75@digirati.com.br>
 <CAAxsn=FLicyp8ckg0+7GxhYidPGc=Ct3N=eQLF4B+5X8Tr8sfg@mail.gmail.com>
From: Andre Nathan <andre@digirati.com.br>
Message-ID: <75b5466a-2d6d-4c37-6067-a4cf09d22809@digirati.com.br>
Date: Mon, 15 Aug 2016 17:41:17 -0300
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101
 Thunderbird/45.2.0
MIME-Version: 1.0
In-Reply-To: <CAAxsn=FLicyp8ckg0+7GxhYidPGc=Ct3N=eQLF4B+5X8Tr8sfg@mail.gmail.com>
Content-Type: multipart/signed; micalg=pgp-sha256;
 protocol="application/pgp-signature";
 boundary="VIMtu8hnX7MxFG9bnOeq2pj3Eh8EscHcJ"
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Build help
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 15 Aug 2016 20:11:35 -0000

This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
--VIMtu8hnX7MxFG9bnOeq2pj3Eh8EscHcJ
Content-Type: multipart/mixed; boundary="nCTKhxFBhr6RrpsFte54PxC6FPcVKAg61"
From: Andre Nathan <andre@digirati.com.br>
To: Jeremy Yallop <yallop@gmail.com>
Cc: ctypes <ctypes@lists.ocaml.org>
Message-ID: <75b5466a-2d6d-4c37-6067-a4cf09d22809@digirati.com.br>
Subject: Re: [ocaml-ctypes] Build help
References: <ded331f4-a9bb-931d-db8f-54908d3caa75@digirati.com.br>
 <CAAxsn=FLicyp8ckg0+7GxhYidPGc=Ct3N=eQLF4B+5X8Tr8sfg@mail.gmail.com>
In-Reply-To: <CAAxsn=FLicyp8ckg0+7GxhYidPGc=Ct3N=eQLF4B+5X8Tr8sfg@mail.gmail.com>

--nCTKhxFBhr6RrpsFte54PxC6FPcVKAg61
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

Hi Jeremy

On 08/15/2016 08:34 AM, Jeremy Yallop wrote:
> you'd write something like this:
>=20
>    module Foreign_bindings(F: Cstubs.FOREIGN) =3D struct
>      open F
>=20
>      let mysql_library_init =3D foreign "mysql_server_init"
>        (int @-> ptr_opt (ptr char) @-> ptr_opt (ptr char) @-> returning=
 int)
>=20
> In this second snippet 'foreign' refers to 'F.foreign', not 'Foreign.fo=
reign'.

In this case a binding that had type "a -> b" now became

  (a -> b F.return) F.result

For example, this binding:

  let mysql_init =3D foreign "mysql_init"
    (T.mysql_opt @-> returning T.mysql_opt)

had type "T.mysql_opt -> T.mysql_opt" but after the change it became

  (T.mysql_opt -> T.mysql_opt F.return) F.result

This way I can't use it as a function anymore. Is this expected?

Thanks,
Andre


--nCTKhxFBhr6RrpsFte54PxC6FPcVKAg61--

--VIMtu8hnX7MxFG9bnOeq2pj3Eh8EscHcJ
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="signature.asc"

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQEcBAEBCAAGBQJXsijtAAoJED4JW1qwFY2cPGUH/230c8arX/vaDMp2cor+1loz
JU9KtfvPMQDw4Nsw9a0t6pKfVR9knluX2CrBYJHq8X2hbgYKIhoIOtFe4IAaoUrQ
4Ye8PwbG2+mObZ7dmx4yYszYJZA2jQQ4nEzZnAQSGPsK99dq5roiCTxmahjy0lDx
B+vS6ppMfBrwkUUY00vvLWSecOfHRs37nKBbsSy5nM+3n7LCHND5gTxWOt1VPVQ4
3Gx9F18V2blD2CHkGzk0T99P4eddLSuj8b7qVaFYGO+dD/G5jw8eEIqhvdeiypMp
9L+7u1NcppildjRGRLum/ThPGLJYeOEBopUR3yOqqY3XjKY40oeSlB4TljmJFio=
=stQ1
-----END PGP SIGNATURE-----

--VIMtu8hnX7MxFG9bnOeq2pj3Eh8EscHcJ--

From yallop@gmail.com  Tue Aug 16 06:58:33 2016
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-31.csi.cam.ac.uk (ppsw-31.csi.cam.ac.uk [131.111.8.131])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 809653C1DA
 for <ctypes@lists.ocaml.org>; Tue, 16 Aug 2016 06:58:33 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1756128 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.216.178 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-qt0-f178.google.com ([209.85.216.178]:35247)
 by ppsw-31.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1bZXrS-000WOf-Ll (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 16 Aug 2016 07:28:32 +0100
Received: by mail-qt0-f178.google.com with SMTP id x25so30883439qtx.2
 for <ctypes@lists.ocaml.org>; Mon, 15 Aug 2016 23:28:30 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc; bh=uu+kW24Yf28MP39co5lAIn9NVzU3/cbtropyEBntMfo=;
 b=PaRwSib0hrZUtvNgiEJykIKD/4oe2BapLCG7SqHlLD+rT6D44tAkzexAJJfp1HUOSm
 1EpRv2InQJD/XOpGnqnj0pmrINy68xIU/7MlUN/fbWF/VmX+tMtVeEfM1V9YhmN8Jq5W
 gweeIpRkPPdLtIfnWOndLpBLbMFF9r2ky76yEIsIt+tMcY9eMw2ro30i/aIrEXgvn4SZ
 wchc0a+zl0fzBogYem0bgcLA+oLuIh+FINMB0jaYKJTg4H6UnXe8+t4YQVZGNbJrh8cc
 S5iwqtFom3Va692wVv5HGh6sm4FiCLYbGh4eKu/DAGjZlH20hDG9BNi0ClRppV7YAe/h
 ZwTg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc;
 bh=uu+kW24Yf28MP39co5lAIn9NVzU3/cbtropyEBntMfo=;
 b=gju+1xke6TaODs5QDXXmgJpuvZjQImItQFj4+q4DkriqfPfID3O6kvfL0UkRFHWF98
 46LdYpvAJFBxXTPwzYliiNQphU2ph0+YQVlE8Rv0XTunbmsG+zuntbLWThVfs8u0IQz2
 r39Z4K5n4hlLXkEoP4A7b375ny5hLYrT1A1oZ7Z/de7InnqRjUiSasbIAlPviR1bWnz1
 I8Ae8DGJFrNkO2bprrfXJCQUFATHMl4xn7ZZiaDTqo3WvcAkwkigBZDH+0k/ZqVnqtWu
 D1I/dQeaaG2AtnyqFiootIRPx/I7HIkVsAxbVql8jKGdQI3rMh+UvgXoqnMy1ex4UWtz
 g95A==
X-Gm-Message-State: AEkooutACFUdgrAwP70+X9HMIS1w9ojxc9Tz0F4NpY0z5SsdLxC4QwJT/CNb3SUbtZuiWKX5YGLt6Z13dmhIow==
X-Received: by 10.200.42.153 with SMTP id b25mr37113354qta.72.1471328909735;
 Mon, 15 Aug 2016 23:28:29 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.55.115.2 with HTTP; Mon, 15 Aug 2016 23:28:29 -0700 (PDT)
In-Reply-To: <75b5466a-2d6d-4c37-6067-a4cf09d22809@digirati.com.br>
References: <ded331f4-a9bb-931d-db8f-54908d3caa75@digirati.com.br>
 <CAAxsn=FLicyp8ckg0+7GxhYidPGc=Ct3N=eQLF4B+5X8Tr8sfg@mail.gmail.com>
 <75b5466a-2d6d-4c37-6067-a4cf09d22809@digirati.com.br>
From: Jeremy Yallop <yallop@gmail.com>
Date: Tue, 16 Aug 2016 07:28:29 +0100
Message-ID: <CAAxsn=EeKO5JDVZEa7ZGKERKAo9T9=Kei9xEAU8+Y6yrVg2sQA@mail.gmail.com>
To: Andre Nathan <andre@digirati.com.br>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Build help
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 16 Aug 2016 05:58:33 -0000

On 15 August 2016 at 21:41, Andre Nathan <andre@digirati.com.br> wrote:
> On 08/15/2016 08:34 AM, Jeremy Yallop wrote:
>> you'd write something like this:
>>
>>    module Foreign_bindings(F: Cstubs.FOREIGN) = struct
>>      open F
>>
>>      let mysql_library_init = foreign "mysql_server_init"
>>        (int @-> ptr_opt (ptr char) @-> ptr_opt (ptr char) @-> returning int)
>>
>> In this second snippet 'foreign' refers to 'F.foreign', not 'Foreign.foreign'.
>
> In this case a binding that had type "a -> b" now became
>
>   (a -> b F.return) F.result
>
> For example, this binding:
>
>   let mysql_init = foreign "mysql_init"
>     (T.mysql_opt @-> returning T.mysql_opt)
>
> had type "T.mysql_opt -> T.mysql_opt" but after the change it became
>
>   (T.mysql_opt -> T.mysql_opt F.return) F.result
>
> This way I can't use it as a function anymore. Is this expected?

It's expected, but it's not the problem that it initially appears to be.

*Inside* the functor the binding has non-function type: it's not
available for calling at that point, since it hasn't yet been linked
together with the generated code.

*Outside* the functor, once you've applied the functor to the module
that ctypes generates, the function becomes available for calling.

For example, here's the bindings functor from the unix-dirent package,
which binds opendir, readdir, etc.:

    https://github.com/dsheets/ocaml-unix-dirent/blob/71590346/lib_gen/unix_dirent_bindings.ml#L40-L56

(Note that the functor contains only bindings for functions, not calls
to those bindings.)

And here's the line of code that links together the bindings functor
with the generated module:

    https://github.com/dsheets/ocaml-unix-dirent/blob/71590346/unix/dirent_unix.ml#L19

A little further down, the code makes calls to the bindings:

    https://github.com/dsheets/ocaml-unix-dirent/blob/71590346/unix/dirent_unix.ml#L39

Kind regards,

Jeremy.

From andre@digirati.com.br  Tue Aug 16 11:54:43 2016
Return-Path: <andre@digirati.com.br>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id F22193CCC5
 for <ctypes@lists.ocaml.org>; Tue, 16 Aug 2016 11:54:42 +0100 (BST)
X-Cam-SpamDetails: score -0.7 from SpamAssassin-3.3.2-1756128 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [187.73.32.185 listed in list.dnswl.dnsbl.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mta113.f1.k8.com.br ([187.73.32.185]:53557)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES256-GCM-SHA384:256)
 id 1bZcU5-000aRk-m2 (Exim 4.86_36-e07b163) for ctypes@lists.ocaml.org
 (return-path <andre@digirati.com.br>); Tue, 16 Aug 2016 12:24:42 +0100
Received: from localhost (localhost [127.0.0.1])
 by smtpz.f1.k8.com.br (Postfix) with ESMTP id ECF4D8028F;
 Tue, 16 Aug 2016 11:24:37 +0000 (UTC)
X-Virus-Scanned: amavisd-new at k8.com.br
Received: from smtpz.f1.k8.com.br ([127.0.0.1])
 by localhost (mta113.f1.k8.com.br [127.0.0.1]) (amavisd-new, port 10024)
 with LMTP id JX8BNZTEWyDw; Tue, 16 Aug 2016 11:24:36 +0000 (UTC)
Received: from [10.200.12.21] (unknown [201.76.188.234])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
 (No client certificate requested)
 by smtpz.f1.k8.com.br (Postfix) with ESMTPSA id 246378028B;
 Tue, 16 Aug 2016 11:24:35 +0000 (UTC)
X-DKIM: OpenDKIM Filter v2.6.8 smtpz.f1.k8.com.br 246378028B
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=digirati.com.br;
 s=default; t=1471346676;
 bh=6J7qMGI2Rmq8XSGtdOZFM4GUBSqMl7qulujs7qn+jB4=;
 h=Subject:To:References:Cc:From:Date:In-Reply-To;
 b=JznkVCqm3W61JWVj+S5lII/lgdDIi4/1LvurqWJa/LHfhQRdlApyk+1okK7n25Eyo
 hQSedVKcYVl7sNMeF10hldGQMlLd8mGcZT3cx8P5GIoggF7JTlA/LT/Z+4oWvBDatX
 zcRBbZ8WQx1CpCOcZhapXP21rXGFB1DNBWFNv+QA=
To: Jeremy Yallop <yallop@gmail.com>
References: <ded331f4-a9bb-931d-db8f-54908d3caa75@digirati.com.br>
 <CAAxsn=FLicyp8ckg0+7GxhYidPGc=Ct3N=eQLF4B+5X8Tr8sfg@mail.gmail.com>
 <75b5466a-2d6d-4c37-6067-a4cf09d22809@digirati.com.br>
 <CAAxsn=EeKO5JDVZEa7ZGKERKAo9T9=Kei9xEAU8+Y6yrVg2sQA@mail.gmail.com>
From: Andre Nathan <andre@digirati.com.br>
Message-ID: <5aeb3d47-4971-d7b0-bd18-c75a8c91e800@digirati.com.br>
Date: Tue, 16 Aug 2016 08:24:31 -0300
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101
 Thunderbird/45.2.0
MIME-Version: 1.0
In-Reply-To: <CAAxsn=EeKO5JDVZEa7ZGKERKAo9T9=Kei9xEAU8+Y6yrVg2sQA@mail.gmail.com>
Content-Type: multipart/signed; micalg=pgp-sha256;
 protocol="application/pgp-signature";
 boundary="WvV958votxrI8jwHx7QosAVMHdsbblix5"
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Build help
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 16 Aug 2016 10:54:43 -0000

This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
--WvV958votxrI8jwHx7QosAVMHdsbblix5
Content-Type: multipart/mixed; boundary="uJQWFDk1roChMSCQhuXd23Aj4jkaEV0wP"
From: Andre Nathan <andre@digirati.com.br>
To: Jeremy Yallop <yallop@gmail.com>
Cc: ctypes <ctypes@lists.ocaml.org>
Message-ID: <5aeb3d47-4971-d7b0-bd18-c75a8c91e800@digirati.com.br>
Subject: Re: [ocaml-ctypes] Build help
References: <ded331f4-a9bb-931d-db8f-54908d3caa75@digirati.com.br>
 <CAAxsn=FLicyp8ckg0+7GxhYidPGc=Ct3N=eQLF4B+5X8Tr8sfg@mail.gmail.com>
 <75b5466a-2d6d-4c37-6067-a4cf09d22809@digirati.com.br>
 <CAAxsn=EeKO5JDVZEa7ZGKERKAo9T9=Kei9xEAU8+Y6yrVg2sQA@mail.gmail.com>
In-Reply-To: <CAAxsn=EeKO5JDVZEa7ZGKERKAo9T9=Kei9xEAU8+Y6yrVg2sQA@mail.gmail.com>

--uJQWFDk1roChMSCQhuXd23Aj4jkaEV0wP
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

On 08/16/2016 03:28 AM, Jeremy Yallop wrote:
> On 15 August 2016 at 21:41, Andre Nathan <andre@digirati.com.br> wrote:=
=20
> *Inside* the functor the binding has non-function type: it's not
> available for calling at that point, since it hasn't yet been linked
> together with the generated code.

Thanks. I had some wrappers for the bindings defined in the same module
which caused the problem when I moved the code into the functor. After
some reorganization it's working now :)

Best,
Andre


--uJQWFDk1roChMSCQhuXd23Aj4jkaEV0wP--

--WvV958votxrI8jwHx7QosAVMHdsbblix5
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="signature.asc"

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQEcBAEBCAAGBQJXsvfvAAoJED4JW1qwFY2cRPYH/RdZbVKnj2M1D+og1rUuJh3r
+3xxmf7G58wPEb86tT14utFlQAQuRNu5Ps5ER6x/Mu/qvDsGhlhQyiW21WZxhUuk
axFgsFVzack0e77sRFAK+UD8pIc24H6S9jzxMFJDkpYou9SsjAg9OS0/jAwT8/oz
EMWHZ4j+o6EWS3QULLNq0CVTxr6FCo0qzNlgzz8ZWvacWHkwfBfanhCW/bpkzsNa
1xkHUKYpxNdD1kGRhMxE5JH6mrD09eGAaYMwZhtDfs3GQH7wH6XV++OfFFEWjMX1
BUahqcDI9w9/CJIj0WcEegX1r91h9ijdAF5tbpzCyoMQoLnynNZp8h1xxLzvZ+k=
=dbH3
-----END PGP SIGNATURE-----

--WvV958votxrI8jwHx7QosAVMHdsbblix5--

From romain.beauxis@gmail.com  Tue Jan 31 21:52:34 2017
Return-Path: <romain.beauxis@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-43.csi.cam.ac.uk (ppsw-43.csi.cam.ac.uk [131.111.8.143])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 72F053C073
 for <ctypes@lists.ocaml.org>; Tue, 31 Jan 2017 21:52:34 +0000 (GMT)
X-Cam-SpamDetails: score -0.2 from SpamAssassin-3.3.2-1780882 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.216.173 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (romain.beauxis[at]gmail.com)
 *  0.5 RCVD_IN_SORBS_SPAM RBL: SORBS: sender is a spam source
 *      [209.85.216.173 listed in dnsbl.sorbs.net]
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-qt0-f173.google.com ([209.85.216.173]:35331)
 by ppsw-43.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1cYgy8-0004YM-p1 (Exim 4.88) for ctypes@lists.ocaml.org
 (return-path <romain.beauxis@gmail.com>); Tue, 31 Jan 2017 22:32:09 +0000
Received: by mail-qt0-f173.google.com with SMTP id x49so247135508qtc.2
 for <ctypes@lists.ocaml.org>; Tue, 31 Jan 2017 14:32:08 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:from:date:message-id:subject:to;
 bh=FZJlFny1OMDrVqMkflc4RYGH8aYcQzFiwJYbI2AUGlU=;
 b=MMENEfKOuY9O1cI0lW/azs1i1A8egbDSRIXdmUcGN58Ybojjwv8Gd4y1y0/EkiCwxi
 v7fZSVKyKl/dPMR0gaES5S0SoFrPHB0vwi7I3aGs2vqC/GIu8mjgmXUIe4ER1EoxeQbG
 OAVYUxZLsFL93pkxGd9Oa4VVZWCpJksPQgcrYEEc3RA8bPcytxH2qq5g0Knc/CoWoDbM
 6XQZNPdd5t5bOyqrtGU5YoFMat6ZDH61ed2quQvjbM8TSAMsgUYO981rPEo9Ap1D+JGJ
 42LzC7+jl2iw2ly93/0R3UDu3XUEFGhrvPssmlGJLXGdjGXmr0JXXODHIdJqBpVHZ2Ap
 Apng==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:from:date:message-id:subject:to;
 bh=FZJlFny1OMDrVqMkflc4RYGH8aYcQzFiwJYbI2AUGlU=;
 b=t5VVHb/F34dUPmoT7WIWlfM7RyaNvUviJLTT5+J4H/LnYOI9gCiU8VXlHD/5TmyCHz
 I8KlzUa9lhzeakG8vsFO+wskNf/gz7tz0JoZj6c71wIVADMoyyf82jzDqsCAmmrQCCPM
 mqwtCA2TzkISNkQxPtCO6+V4ccMUjQ7F2T4bLf5520CPDuJxLOb90kRGWIeGU1HOT2De
 x0L6AMmD0ShRuFfkG9V8mbRIuSTYBSMsVvnGP7OTokR3S1/kswleXcBy1tecRQpHaYUe
 WSyL0h1I5pxkEXzfO13hTkT8bcoNKj1ESnWYYtnB2LywFeCu+L4XegCOpimMVt3I/SW4
 xs1g==
X-Gm-Message-State: AIkVDXLdqT6ki3lLP+aUDKIks+c+245FbSDxdIYexKMIlc4RxRQgBO+eNrbsvfY+J947aY6CqSAxBYK34eajwA==
X-Received: by 10.237.62.219 with SMTP id o27mr29717638qtf.104.1485901927607; 
 Tue, 31 Jan 2017 14:32:07 -0800 (PST)
MIME-Version: 1.0
Received: by 10.237.43.35 with HTTP; Tue, 31 Jan 2017 14:31:47 -0800 (PST)
From: Romain Beauxis <romain.beauxis@gmail.com>
Date: Tue, 31 Jan 2017 16:31:47 -0600
Message-ID: <CABWZ6OQH_a8MStvt3EES0B8fJ02eSpmHhXSyreu7x0CTcWiLpQ@mail.gmail.com>
To: ctypes@lists.ocaml.org
Content-Type: text/plain; charset=UTF-8
X-Mailman-Approved-At: Tue, 31 Jan 2017 21:54:32 +0000
Subject: [ocaml-ctypes] Static function callback.
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 31 Jan 2017 21:52:34 -0000

Hi guys,

I am playing with a binding for OSX's SecureTransport API. The API
abstracts away the underlying socket implementation and, thus,
requires to pass (static) callbacks, which is where I am having
trouble..

Here are the relevant part of the code:

let fd_read = (...)

let fd_write = (...)

let _set_io_funcs = foreign ~from:lib "SSLSetIOFuncs"
  (ptr void @-> fd_io_typ @-> fd_io_typ @-> returning int)

let _create_context = (...)

let _release_context = (...)

let init s t =
  let ctx =
    _create_context (...)
  in
  Gc.finalise _release_context ctx;
  let read = Root.create fd_read in
  Gc.finalise Root.release read;
  let write = Root.create fd_write in
  Gc.finalise Root.release write;
  check_err (_set_io_funcs ctx fd_read fd_write);
  {ctx;read;write}

The trick above is that read and write callbacks are passed at
initialization and, thus, need to be valid for the life time of the
handler.

I've tried my best to make sure that the passed callback would be
immune to Gc issues. Unfortunately, I am still experiencing issues
with them which, I think, relate to the Gc messing with those.

Basically, if I had some printf inside the fd_* callbacks, the
compiled binding will sometimes work and some times not.

Besides using C stubs (which I am trying to avoid as an exercise
here), is there anything else that I could do to make this work?

Thanks for y'all help!
Romain

From yallop@gmail.com  Wed Feb  1 14:42:29 2017
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id E63703C213
 for <ctypes@lists.ocaml.org>; Wed,  1 Feb 2017 14:42:29 +0000 (GMT)
X-Cam-SpamDetails: score -0.2 from SpamAssassin-3.3.2-1781032 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.216.175 listed in list.dnswl.dnsbl.ja.net]
 *  0.5 RCVD_IN_SORBS_SPAM RBL: SORBS: sender is a spam source
 *      [209.85.216.175 listed in dnsbl.sorbs.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-qt0-f175.google.com ([209.85.216.175]:36512)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1cYwjX-0002OG-78 (Exim 4.88) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Wed, 01 Feb 2017 15:22:07 +0000
Received: by mail-qt0-f175.google.com with SMTP id k15so269845441qtg.3
 for <ctypes@lists.ocaml.org>; Wed, 01 Feb 2017 07:22:07 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc; bh=a6/SEAquWjgVZtPieWololcVGtxPG3JNhc2kVVDf46k=;
 b=Vl7Zj4OJ+8NQWtFvCBaqA6PJt/BG5YqB0Ad4uj46AZrSBHI9cRvFz1Q/0jGD/O+VTL
 9sa2TC/madz0PjgU4ipJlU7rqti58tu5s9FqZm3G0u/AhDJK9Idd8HhwW35p/vZ7JeL4
 R1gwWYstK/oEPKqSD4Vp7gpZi7hNyUsBm1HkdqKe+vlerfrcToVRx9m0LgG4eSfa1s1p
 dwGaBIL90F0XpnZCiQ7BrJ8TlmxuegESXTxdcqkknGNwNhcCmgEeP0e9gyYXZFXW3gEK
 tBvJQv4xcv6J7lS9LwtR36c+pmiUqIbQrW0MXNRa9STBDTStmZzdiihe/VchXMkR9lIK
 bkSA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc;
 bh=a6/SEAquWjgVZtPieWololcVGtxPG3JNhc2kVVDf46k=;
 b=S2pj1jx3jjApJG0YenXc/R6BIrSrYrSPuoAnbrCaQbYAQqa4nCrKthqOKmvi7R37sr
 LcntDofnnbA2VECtPwAU0MH6ZFTr2GTw9YkfwsHebMKZYHog4vWAtrWcvs5glquESQju
 zM5a9vFEjgFBiT61Qnw8AslUJV1PT0gc+VILEsYiMXIN5wrQtBsm0oQ86WE40x+E0e8n
 BAmUq0s+RvzTmTH7LrR/9iCYJyN0B8XdoQmzc2c/hgFc5TtLbRoYqqXPWCjQjRFpIrFt
 u+pvrr5BfhLviebAY7KoAEO/6OecrnrL0XplUK/y+lOdLkmZCb4G8twKAme4HovxF230
 pnbg==
X-Gm-Message-State: AIkVDXJ8bLQAwJsTYBQABwo807JrWFaidrU/xjToNRTYXilySzUzu/Tr8Gc4mtgCKCis/rZt4LzHvVxd8oABgw==
X-Received: by 10.55.153.130 with SMTP id b124mr3178727qke.82.1485962526081;
 Wed, 01 Feb 2017 07:22:06 -0800 (PST)
MIME-Version: 1.0
Received: by 10.55.88.194 with HTTP; Wed, 1 Feb 2017 07:22:05 -0800 (PST)
In-Reply-To: <CABWZ6OQH_a8MStvt3EES0B8fJ02eSpmHhXSyreu7x0CTcWiLpQ@mail.gmail.com>
References: <CABWZ6OQH_a8MStvt3EES0B8fJ02eSpmHhXSyreu7x0CTcWiLpQ@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
Date: Wed, 1 Feb 2017 15:22:05 +0000
Message-ID: <CAAxsn=Gc0AVDGeA6-qT7Cjtea1XVj_AKVtY+Uq6xP1f-S1_9sw@mail.gmail.com>
To: Romain Beauxis <romain.beauxis@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Static function callback.
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 01 Feb 2017 14:42:30 -0000

On 31 January 2017 at 22:31, Romain Beauxis <romain.beauxis@gmail.com> wrote:
> I am playing with a binding for OSX's SecureTransport API. The API
> abstracts away the underlying socket implementation and, thus,
> requires to pass (static) callbacks, which is where I am having
> trouble..
>
> Here are the relevant part of the code:
>
> let fd_read = (...)
>
> let fd_write = (...)
>
> let _set_io_funcs = foreign ~from:lib "SSLSetIOFuncs"
>   (ptr void @-> fd_io_typ @-> fd_io_typ @-> returning int)

Assuming that fd_io_typ is defined something like this

   let fd_io_typ =
     funptr (connection_ref @-> ptr void @-> ptr size_t @-> returning
oss_status)

and that fd_read and fd_write are actually top-level (i.e. "static")
functions then you shouldn't need to do anything special.  Top-level
functions stay alive for the duration of the program, so there's no
danger of their being prematurely collected.

>   let read = Root.create fd_read in

I'm not sure that the Root module is really what you need here.  Root
is useful for passing pointers to OCaml values to C when the OCaml
part of the program doesn't keep a reference to the values.  But in
this case the OCaml program should always have a reference to fd_read
and fd_write.  So I suspect the problem may lie elsewhere.

> I've tried my best to make sure that the passed callback would be
> immune to Gc issues. Unfortunately, I am still experiencing issues
> with them which, I think, relate to the Gc messing with those.

> Besides using C stubs (which I am trying to avoid as an exercise
> here), is there anything else that I could do to make this work?

One useful trick for tracking down GC issues is to add calls to
Gc.compact to your program, so that objects that are collected too
early are collected even earlier.

From romain.beauxis@gmail.com  Thu Feb  2 03:54:07 2017
Return-Path: <romain.beauxis@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-43.csi.cam.ac.uk (ppsw-43.csi.cam.ac.uk [131.111.8.143])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 32C403C213
 for <ctypes@lists.ocaml.org>; Thu,  2 Feb 2017 03:54:07 +0000 (GMT)
X-Cam-SpamDetails: score -0.2 from SpamAssassin-3.3.2-1781032 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.216.181 listed in list.dnswl.dnsbl.ja.net]
 *  0.5 RCVD_IN_SORBS_SPAM RBL: SORBS: sender is a spam source
 *      [209.85.216.181 listed in dnsbl.sorbs.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (romain.beauxis[at]gmail.com)
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-qt0-f181.google.com ([209.85.216.181]:35306)
 by ppsw-43.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1cZ95d-000353-ot (Exim 4.88) for ctypes@lists.ocaml.org
 (return-path <romain.beauxis@gmail.com>); Thu, 02 Feb 2017 04:33:46 +0000
Received: by mail-qt0-f181.google.com with SMTP id x49so9356066qtc.2
 for <ctypes@lists.ocaml.org>; Wed, 01 Feb 2017 20:33:45 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc; bh=9nwW1aScS/2FX7VvI2+wSHQV2X5++1twPcRaX9mDfto=;
 b=ENYOzBS6/loLFbMCPiH6/zknSkGIS09enmGKo4Ca9OHj0+nFzr14wU30laEeBBaJD4
 wxbm/z2fjPyHaoBUYLhERwAzvSY5UTCZGvNg57sym30IeAfbHVeCX5xT9fMNYOYI3AWi
 Vbe9M7ojxjhviua6EH5uf0T37Ov2d4kVRac+va+f+sMnMjRg4bBfERQNWjgjFImQj/TH
 W8Q3Ljwgp8OlDqZG2QVHu22mu7LSu/rLCDjkq88NZxdTazM0NW5TJZicUhiK1qIt3hpu
 EtmVFcMgfuYF6+LJdvukSm13hvUxW/+OCMUwP7CauEi0IuGn+rryeCNUSL3ihlF9Ge1t
 zP8Q==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc;
 bh=9nwW1aScS/2FX7VvI2+wSHQV2X5++1twPcRaX9mDfto=;
 b=k48XXwfcDYKi77oNLwKwMmaYeQOoiY5GxNkKYZ3qenjMIBNXIixawrN22ykY63BcHQ
 gyES3QOYs5fGO1Bam9WOAOwe4jgsJuQbjc2gLN8S6ebJZZr3u8SZiGnBF+MC/3uSxukn
 z2MXUtoqYa4eat8d84qAVJj+LIsfIgY/32UuzdZ+oeZ8JwyrCrzrmP2HkuD8tJKqO+k2
 5HHKhL0sk1QpLJojjrQudPtzW9O8PSv1nRXxbSF9pGJs5o5WtNfwdRP7z6TiUDHYdCVI
 eE31IMSK8kZVjdHIL0sEE9q3kipOlzNTAeZTcOk5Np06hChFHNaqv/yrLXphLWHePx3y
 mf6g==
X-Gm-Message-State: AMke39kPH83NgSiXLtyi6N1K9Esrl9nJNU8aWXL1ieo8y45Df42zbHjrSIDppU2DGy44xYslcEwWOgQbjyJ1Tg==
X-Received: by 10.55.192.196 with SMTP id v65mr6361346qkv.40.1486010024768;
 Wed, 01 Feb 2017 20:33:44 -0800 (PST)
MIME-Version: 1.0
Received: by 10.237.43.35 with HTTP; Wed, 1 Feb 2017 20:33:24 -0800 (PST)
In-Reply-To: <CAAxsn=Gc0AVDGeA6-qT7Cjtea1XVj_AKVtY+Uq6xP1f-S1_9sw@mail.gmail.com>
References: <CABWZ6OQH_a8MStvt3EES0B8fJ02eSpmHhXSyreu7x0CTcWiLpQ@mail.gmail.com>
 <CAAxsn=Gc0AVDGeA6-qT7Cjtea1XVj_AKVtY+Uq6xP1f-S1_9sw@mail.gmail.com>
From: Romain Beauxis <romain.beauxis@gmail.com>
Date: Wed, 1 Feb 2017 22:33:24 -0600
Message-ID: <CABWZ6OSqZQSujp4kB2U+QwNvF1cKMRowGzwZqGbGJpG_TiEyXA@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Content-Type: text/plain; charset=UTF-8
X-Mailman-Approved-At: Thu, 02 Feb 2017 08:30:05 +0000
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Static function callback.
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 02 Feb 2017 03:54:07 -0000

2017-02-01 9:22 GMT-06:00 Jeremy Yallop <yallop@gmail.com>:
> On 31 January 2017 at 22:31, Romain Beauxis <romain.beauxis@gmail.com> wrote:
>> I am playing with a binding for OSX's SecureTransport API. The API
>> abstracts away the underlying socket implementation and, thus,
>> requires to pass (static) callbacks, which is where I am having
>> trouble..
>>
>> Here are the relevant part of the code:
>>
>> let fd_read = (...)
>>
>> let fd_write = (...)
>>
>> let _set_io_funcs = foreign ~from:lib "SSLSetIOFuncs"
>>   (ptr void @-> fd_io_typ @-> fd_io_typ @-> returning int)
>
> Assuming that fd_io_typ is defined something like this
>
>    let fd_io_typ =
>      funptr (connection_ref @-> ptr void @-> ptr size_t @-> returning
> oss_status)
>
> and that fd_read and fd_write are actually top-level (i.e. "static")
> functions then you shouldn't need to do anything special.  Top-level
> functions stay alive for the duration of the program, so there's no
> danger of their being prematurely collected.
>
>>   let read = Root.create fd_read in
>
> I'm not sure that the Root module is really what you need here.  Root
> is useful for passing pointers to OCaml values to C when the OCaml
> part of the program doesn't keep a reference to the values.  But in
> this case the OCaml program should always have a reference to fd_read
> and fd_write.  So I suspect the problem may lie elsewhere.
>
>> I've tried my best to make sure that the passed callback would be
>> immune to Gc issues. Unfortunately, I am still experiencing issues
>> with them which, I think, relate to the Gc messing with those.
>
>> Besides using C stubs (which I am trying to avoid as an exercise
>> here), is there anything else that I could do to make this work?
>
> One useful trick for tracking down GC issues is to add calls to
> Gc.compact to your program, so that objects that are collected too
> early are collected even earlier.

Thanks for the feedback! Turned out I did not understand how to use the API..

The code has been pushed and it works fine:
https://github.com/toots/ocaml-osx-secure-transport

Romain

From travis.brady@gmail.com  Fri Feb 17 03:43:15 2017
Return-Path: <travis.brady@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id E8E883C53D
 for <ctypes@lists.ocaml.org>; Fri, 17 Feb 2017 03:43:15 +0000 (GMT)
X-Cam-SpamDetails: score -0.1 from SpamAssassin-3.4.1-1783181 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.215.51 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [209.85.215.51 listed in wl.mailspike.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (travis.brady[at]gmail.com)
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-lf0-f51.google.com ([209.85.215.51]:32819)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1cea5C-000tzi-7K (Exim 4.88) for ctypes@lists.ocaml.org
 (return-path <travis.brady@gmail.com>); Fri, 17 Feb 2017 04:23:46 +0000
Received: by mail-lf0-f51.google.com with SMTP id x1so17351877lff.0
 for <ctypes@lists.ocaml.org>; Thu, 16 Feb 2017 20:23:46 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:from:date:message-id:subject:to;
 bh=7D2Vq7uoIt0FLsV3VQf3APOnDHbJ66zFS4/X4US8rEw=;
 b=dk1wuw6wAMPivhWl+HGg6+D/JTKu4XpSgN80tmPxdMHPGOWPG1HwS5ztV4Ga7iMgE/
 KkJTHbzcPJ55xR4u+vzRq/q+EYMdndXJ8+ROi1esZtGUBpKoMwq6Y980coy7Ii7OZ8+J
 KgN+SbFNEnqp4XENioBgUBSx9NrpzU8Djto0FEAqoEppYP2KLLMwkN+F83/ASeGcLwiN
 8mQr8of5P05yMrcQFt10tNhtyg6pHWJS6rgz2RkDyaCdO79rB2ywsPXoMlEOztmH0YB2
 ArJ2rXLLSLjS2g6HKljsLSST0iiKP1+KYZZJ8GS9z+v/uQLpmdUE9NwB++X3oXC7aIc+
 o4EA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:from:date:message-id:subject:to;
 bh=7D2Vq7uoIt0FLsV3VQf3APOnDHbJ66zFS4/X4US8rEw=;
 b=St3bqHkyWtZQFYP0WCn6Mo6/woaUK9v6DlQMJfCZpNNfLhS5fml75YPv//Y4CfaIPJ
 1Pwbeo3OWUgNMFg/T6LZIYJKMAksu7W9lhZq2AN/Tz0kunWx7l0RFHUjAYll5zfZ4Z+l
 ymAjFWJkBdeVvVHrQ88OuVLpJ0O+XsTfneev+RGMLHO7L1iiVhV9ATlcXIlZc2HCJfC2
 wXJASNfeh/lxVLlOtRRI/I5PSSNUE67slEAtDIwTZHF/QRSYseaosvCmuxdxLDZ8PCWf
 rValf1j6J82ENDdUeytW2JHxCRb1/p2BQ9/6E+3gytfsMrCWmEygb129RGbsvVmltHOk
 qiSQ==
X-Gm-Message-State: AMke39lCqjHN9O3XB0nvX8u70r3VvgJsBRJ/WgUso3z9teU8izpBm2GVzY1O9XlhVH73eKsx4CMctWZWD9CHOw==
X-Received: by 10.25.198.6 with SMTP id w6mr1795925lff.175.1487305425349; Thu,
 16 Feb 2017 20:23:45 -0800 (PST)
MIME-Version: 1.0
Received: by 10.46.80.24 with HTTP; Thu, 16 Feb 2017 20:23:44 -0800 (PST)
From: Travis <travis.brady@gmail.com>
Date: Thu, 16 Feb 2017 22:23:44 -0600
Message-ID: <CABHK4nVsor0bfeRHya6mz9VXtazr7rBeqGeE8-UBZbdLJSGF_A@mail.gmail.com>
To: ctypes@lists.ocaml.org
Content-Type: multipart/alternative; boundary=94eb2c19bee08cf2590548b247ca
Subject: [ocaml-ctypes] Undefined symbols error on OS X
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 17 Feb 2017 03:43:16 -0000

--94eb2c19bee08cf2590548b247ca
Content-Type: text/plain; charset=UTF-8

I'm attempting experimental OCaml bindings to Vowpal Wabbit and am stuck
with the error here:
https://gist.github.com/travisbrady/21a83ac57790455d4b9d545e8b18539a

My code is visible at: https://github.com/travisbrady/ocaml-vw

This is with OCaml 4.03.0, ctypes 0.11.3, Darwin 14.5.0 and libffi 3.0.13
installed via Homebrew.

After changing the package order manually I still get the error. Is it an
issue with my code? Should I  install a more recent version of libffi?

thank you
Travis

--94eb2c19bee08cf2590548b247ca
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">I&#39;m attempting experimental OCaml bindings to Vowpal W=
abbit and am stuck with the error here:=C2=A0<a href=3D"https://gist.github=
.com/travisbrady/21a83ac57790455d4b9d545e8b18539a">https://gist.github.com/=
travisbrady/21a83ac57790455d4b9d545e8b18539a</a><div><br></div><div>My code=
 is visible at:=C2=A0<a href=3D"https://github.com/travisbrady/ocaml-vw">ht=
tps://github.com/travisbrady/ocaml-vw</a></div><div><br></div><div>This is =
with OCaml 4.03.0, ctypes 0.11.3, Darwin 14.5.0 and libffi 3.0.13 installed=
 via Homebrew.</div><div><br></div><div>After changing the package order ma=
nually I still get the error. Is it an issue with my code? Should I =C2=A0i=
nstall a more recent version of libffi?</div><div><br></div><div>thank you<=
/div><div>Travis</div></div>

--94eb2c19bee08cf2590548b247ca--

From yallop@gmail.com  Mon Feb 20 14:31:02 2017
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-43.csi.cam.ac.uk (ppsw-43.csi.cam.ac.uk [131.111.8.143])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 852BF3C0A4
 for <ctypes@lists.ocaml.org>; Mon, 20 Feb 2017 14:31:02 +0000 (GMT)
X-Cam-SpamDetails: score -0.3 from SpamAssassin-3.4.1-1783613 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.220.174 listed in list.dnswl.dnsbl.ja.net]
 *  0.5 RCVD_IN_SORBS_SPAM RBL: SORBS: sender is a spam source
 *      [209.85.220.174 listed in dnsbl.sorbs.net]
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [209.85.220.174 listed in wl.mailspike.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-qk0-f174.google.com ([209.85.220.174]:32903)
 by ppsw-43.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1cfpcu-00048J-nD (Exim 4.88) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Mon, 20 Feb 2017 15:11:45 +0000
Received: by mail-qk0-f174.google.com with SMTP id p22so97670045qka.0
 for <ctypes@lists.ocaml.org>; Mon, 20 Feb 2017 07:11:44 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc; bh=cUCMIBK5F3gd4K/kTXAs1m6aTQV/8aHxbHLgkFaxq0w=;
 b=fzqCO2eHNxb0NeL6MYcjVvJyjfQovDfEYXEVkqzpyO6GKhhGKZJmBcJQoLa1IqWbNw
 h6JM0eHihibszixgcyC39WykbzblH12AoglqGoIzDL9oNtlUM/EswHiUEAPyGgmIGpuN
 /gdpHu3ya5H7rYCvwdaQRvX+HNcdyyzZT0PtozFTryWdIy3Fhne/XRaiI8Q9tiGIlvvW
 ef2yvpVoPfBfHH/+YKxy1jpyK90IJpLj7Y2qzw8u39wUIG3iyucTlt4v2XvSwoaciSVF
 hik9jvBcvi8wx1LxWomvg5xUWXkVaoGCn9k91CyRdqxPyXTMEFrYioqwWDQADTY+EtkN
 vDwg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc;
 bh=cUCMIBK5F3gd4K/kTXAs1m6aTQV/8aHxbHLgkFaxq0w=;
 b=GmLtE47+UQXf2XKnJ+70aPk5n9lBqatg9CDtBZ97mV0HPpTWjRlJwKCdjs9hot3A07
 ixibsgcm5NanMZgEf0BG/86cftbJF9s28W3rdkdoranWD+n4Ssoj36iRfgunHTMwJ4FK
 YKEaiBhR7XRFZ/AwZvlHv02B25vpqix3H96UfkXavTwFHaqyha7873EOdzkn/IIFTc71
 6Ka/ezZc1uzrZh5QFPJnfE06AZkv/u8Twf8OPEuBmsahLZStiECmM1q5gh2hh6tSJthZ
 ZqKuNzZJk3cykCl/0Q8VZ8VSMP47rBV2FhhHpECn9QZAkTMhMmY10E+D3MWXFJlDC2+W
 mssw==
X-Gm-Message-State: AMke39kTK5M3KxFvNPP8hynfa7soWkFqmyJaNuN4i/PYIFQCFoAL4YCkmRCrFwSVrtHGI59AQkrLmkS6BHU7bQ==
X-Received: by 10.55.67.135 with SMTP id q129mr9169512qka.98.1487603503275;
 Mon, 20 Feb 2017 07:11:43 -0800 (PST)
MIME-Version: 1.0
Received: by 10.55.88.194 with HTTP; Mon, 20 Feb 2017 07:11:42 -0800 (PST)
In-Reply-To: <CABHK4nVsor0bfeRHya6mz9VXtazr7rBeqGeE8-UBZbdLJSGF_A@mail.gmail.com>
References: <CABHK4nVsor0bfeRHya6mz9VXtazr7rBeqGeE8-UBZbdLJSGF_A@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
Date: Mon, 20 Feb 2017 15:11:42 +0000
Message-ID: <CAAxsn=FOhpy8aghejvceEcU1f+3=1JWO0oB+07N+GNki2z60PQ@mail.gmail.com>
To: Travis <travis.brady@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Undefined symbols error on OS X
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 20 Feb 2017 14:31:02 -0000

Dear Travis,

On 17 February 2017 at 04:23, Travis <travis.brady@gmail.com> wrote:
> I'm attempting experimental OCaml bindings to Vowpal Wabbit and am stuck
> with the error here:
> https://gist.github.com/travisbrady/21a83ac57790455d4b9d545e8b18539a
>
> My code is visible at: https://github.com/travisbrady/ocaml-vw
>
> This is with OCaml 4.03.0, ctypes 0.11.3, Darwin 14.5.0 and libffi 3.0.13
> installed via Homebrew.
>
> After changing the package order manually I still get the error. Is it an
> issue with my code? Should I  install a more recent version of libffi?

This looks like it could be a name mangling error:

   Undefined symbols for architecture x86_64:
     "_VW_Initialize", referenced from:
         _vw_1_VW_Initialize in libvw_stubs.a(vw_stubs.o)
        (maybe you meant: _vw_1_VW_Initialize)
   ld: symbol(s) not found for architecture x86_64

Is it possible that the C linker is being used with a C++-only library?

Kind regards,

Jeremy

From travis.brady@gmail.com  Tue Feb 21 00:07:23 2017
Return-Path: <travis.brady@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 3F5CC3C0A4
 for <ctypes@lists.ocaml.org>; Tue, 21 Feb 2017 00:07:23 +0000 (GMT)
X-Cam-SpamDetails: score -0.8 from SpamAssassin-3.4.1-1783613 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.215.50 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [209.85.215.50 listed in wl.mailspike.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (travis.brady[at]gmail.com)
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-lf0-f50.google.com ([209.85.215.50]:33549)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1cfycg-000le9-hc (Exim 4.88) for ctypes@lists.ocaml.org
 (return-path <travis.brady@gmail.com>); Tue, 21 Feb 2017 00:48:07 +0000
Received: by mail-lf0-f50.google.com with SMTP id l12so19592896lfe.0
 for <ctypes@lists.ocaml.org>; Mon, 20 Feb 2017 16:48:06 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:references:in-reply-to:from:date:message-id:subject:to
 :cc; bh=DqBeqbxnzKHe7P053zk7+f900t3xso9PC9MAOtEJyzY=;
 b=GmfBImfrjtapA8lyn4q5KFbq1koRUZ7xCJE7v6J9fbrN9fHq00/vCvPrNUlpC7bBrm
 e34EAVC/HTVWo4sqtb7sw6xjZ45yPcxq9RLPcapZFSgvRVYSQCb41aARCiLowr3GsGRo
 9sd3EkpPgmJ/1I5m14318cBrOJQjcHWiSsPvD32xJ7kxu9Eko86ptBMT2EZdFIajyhcj
 SG8T6TjTs3m4klep4u50mKWiZnZ+kQltsLIZy6DbJ9Dm1StbL/4tjMWeyfffqn7C2tzx
 FH+anTwDZkkxlcNMYIk3XxpVunen2WSBgb5iJNWcuelpFrJ30JNqwW439RsFsUVEf/D7
 YDsA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:references:in-reply-to:from:date
 :message-id:subject:to:cc;
 bh=DqBeqbxnzKHe7P053zk7+f900t3xso9PC9MAOtEJyzY=;
 b=jGSDdW6mnFndGDxNbgnlKdaIHKxXPCwKA+Wk9o7JwsuemV+YlozhZ0zm7L1pNg/S+z
 JPAmrImdj6n4zSMFjrd/dJ1hlR960KRCkzBDamuto1wExsxyC6DMmDYJrsJhstD7tETJ
 9wSBBs5pZWOd9TGt3ySTFs/6ENwZ8Ya3286vMBG3fHxGMNGJyCjGpMB63EDyt8WyM9kR
 CAfQjEE0PgqE4mqAyLwARc0NcpOgCN1KmhpVGt9k5LsLetVpoJQsJaJElh2pYeGRPnfT
 3KPII5/veiZ3rt8FvdjVvkRAQ9pbKa0a83wr8r9YHyk8e3N5fMws1dv+a+VIsh1bKKIo
 LjLw==
X-Gm-Message-State: AMke39mV4B7qv1YhbT97fRtkD6bKjNgoJlNSYKrBScmAoK+WwhbdaHPRjYr99dwDkLzEHFJnABcNA3yJYiT3VA==
X-Received: by 10.46.84.78 with SMTP id y14mr6008299ljd.63.1487638085741; Mon,
 20 Feb 2017 16:48:05 -0800 (PST)
MIME-Version: 1.0
References: <CABHK4nVsor0bfeRHya6mz9VXtazr7rBeqGeE8-UBZbdLJSGF_A@mail.gmail.com>
 <CAAxsn=FOhpy8aghejvceEcU1f+3=1JWO0oB+07N+GNki2z60PQ@mail.gmail.com>
In-Reply-To: <CAAxsn=FOhpy8aghejvceEcU1f+3=1JWO0oB+07N+GNki2z60PQ@mail.gmail.com>
From: Travis <travis.brady@gmail.com>
Date: Tue, 21 Feb 2017 00:47:54 +0000
Message-ID: <CABHK4nUxbW7vD6vUFysZxereVFxwPxMoxV_2_avMjAj3G6jYYQ@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Content-Type: multipart/alternative; boundary=f403045fbc58a7b0470548ffbb5e
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Undefined symbols error on OS X
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 21 Feb 2017 00:07:23 -0000

--f403045fbc58a7b0470548ffbb5e
Content-Type: text/plain; charset=UTF-8

Thank you, Jeremy. It was due to my misunderstanding of the library
upstream but I've got it sorted out now.

Thanks very much again
Travis


On Mon, Feb 20, 2017 at 9:11 AM Jeremy Yallop <yallop@gmail.com> wrote:

> Dear Travis,
>
> On 17 February 2017 at 04:23, Travis <travis.brady@gmail.com> wrote:
> > I'm attempting experimental OCaml bindings to Vowpal Wabbit and am stuck
> > with the error here:
> > https://gist.github.com/travisbrady/21a83ac57790455d4b9d545e8b18539a
> >
> > My code is visible at: https://github.com/travisbrady/ocaml-vw
> >
> > This is with OCaml 4.03.0, ctypes 0.11.3, Darwin 14.5.0 and libffi 3.0.13
> > installed via Homebrew.
> >
> > After changing the package order manually I still get the error. Is it an
> > issue with my code? Should I  install a more recent version of libffi?
>
> This looks like it could be a name mangling error:
>
>    Undefined symbols for architecture x86_64:
>      "_VW_Initialize", referenced from:
>          _vw_1_VW_Initialize in libvw_stubs.a(vw_stubs.o)
>         (maybe you meant: _vw_1_VW_Initialize)
>    ld: symbol(s) not found for architecture x86_64
>
> Is it possible that the C linker is being used with a C++-only library?
>
> Kind regards,
>
> Jeremy
>

--f403045fbc58a7b0470548ffbb5e
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div>Thank you, Jeremy. It was due to my misunderstanding of the library up=
stream but I&#39;ve got it sorted out now.=C2=A0</div><div><br></div><div>T=
hanks very much again</div><div>Travis</div><div><br></div><div><br><div cl=
ass=3D"gmail_quote"><div>On Mon, Feb 20, 2017 at 9:11 AM Jeremy Yallop &lt;=
<a href=3D"mailto:yallop@gmail.com">yallop@gmail.com</a>&gt; wrote:<br></di=
v><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:=
1px #ccc solid;padding-left:1ex">Dear Travis,<br class=3D"gmail_msg">
<br class=3D"gmail_msg">
On 17 February 2017 at 04:23, Travis &lt;<a href=3D"mailto:travis.brady@gma=
il.com" class=3D"gmail_msg" target=3D"_blank">travis.brady@gmail.com</a>&gt=
; wrote:<br class=3D"gmail_msg">
&gt; I&#39;m attempting experimental OCaml bindings to Vowpal Wabbit and am=
 stuck<br class=3D"gmail_msg">
&gt; with the error here:<br class=3D"gmail_msg">
&gt; <a href=3D"https://gist.github.com/travisbrady/21a83ac57790455d4b9d545=
e8b18539a" rel=3D"noreferrer" class=3D"gmail_msg" target=3D"_blank">https:/=
/gist.github.com/travisbrady/21a83ac57790455d4b9d545e8b18539a</a><br class=
=3D"gmail_msg">
&gt;<br class=3D"gmail_msg">
&gt; My code is visible at: <a href=3D"https://github.com/travisbrady/ocaml=
-vw" rel=3D"noreferrer" class=3D"gmail_msg" target=3D"_blank">https://githu=
b.com/travisbrady/ocaml-vw</a><br class=3D"gmail_msg">
&gt;<br class=3D"gmail_msg">
&gt; This is with OCaml 4.03.0, ctypes 0.11.3, Darwin 14.5.0 and libffi 3.0=
.13<br class=3D"gmail_msg">
&gt; installed via Homebrew.<br class=3D"gmail_msg">
&gt;<br class=3D"gmail_msg">
&gt; After changing the package order manually I still get the error. Is it=
 an<br class=3D"gmail_msg">
&gt; issue with my code? Should I=C2=A0 install a more recent version of li=
bffi?<br class=3D"gmail_msg">
<br class=3D"gmail_msg">
This looks like it could be a name mangling error:<br class=3D"gmail_msg">
<br class=3D"gmail_msg">
=C2=A0 =C2=A0Undefined symbols for architecture x86_64:<br class=3D"gmail_m=
sg">
=C2=A0 =C2=A0 =C2=A0&quot;_VW_Initialize&quot;, referenced from:<br class=
=3D"gmail_msg">
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0_vw_1_VW_Initialize in libvw_stubs.a(vw_s=
tubs.o)<br class=3D"gmail_msg">
=C2=A0 =C2=A0 =C2=A0 =C2=A0 (maybe you meant: _vw_1_VW_Initialize)<br class=
=3D"gmail_msg">
=C2=A0 =C2=A0ld: symbol(s) not found for architecture x86_64<br class=3D"gm=
ail_msg">
<br class=3D"gmail_msg">
Is it possible that the C linker is being used with a C++-only library?<br =
class=3D"gmail_msg">
<br class=3D"gmail_msg">
Kind regards,<br class=3D"gmail_msg">
<br class=3D"gmail_msg">
Jeremy<br class=3D"gmail_msg">
</blockquote></div></div>

--f403045fbc58a7b0470548ffbb5e--

From ssp.mryau@gmail.com  Thu May  4 18:05:34 2017
Return-Path: <ssp.mryau@gmail.com>
X-Original-To: Ctypes@lists.ocaml.org
Delivered-To: Ctypes@lists.ocaml.org
Received: from ppsw-31.csi.cam.ac.uk (ppsw-31.csi.cam.ac.uk [131.111.8.131])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 235853C1AC
 for <Ctypes@lists.ocaml.org>; Thu,  4 May 2017 18:05:34 +0100 (BST)
X-Cam-SpamDetails: score -0.2 from SpamAssassin-3.4.1-1786853 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.216.174 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (ssp.mryau[at]gmail.com)
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [209.85.216.174 listed in wl.mailspike.net]
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-qt0-f174.google.com ([209.85.216.174]:35098)
 by ppsw-31.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1d6KtU-000Rlv-Lx (Exim 4.89) for Ctypes@lists.ocaml.org
 (return-path <ssp.mryau@gmail.com>); Thu, 04 May 2017 18:50:25 +0100
Received: by mail-qt0-f174.google.com with SMTP id n4so16358949qte.2
 for <Ctypes@lists.ocaml.org>; Thu, 04 May 2017 10:50:24 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:from:date:message-id:subject:to;
 bh=8NycKI9RhhWu09KEm6zL7isPt50mLxmXRxsL/TMMCK4=;
 b=ormveAzkYpcTFc3mXXkF139bvsvFn8XGz2WW7Vn/EFAL5APXVzGh2FxvVFb4AT5JKM
 vmVEZpCYB/n5yc8+KXczV4ZkcIwi92kXT6bDvHmVQ3m7XUwEPROo//QOAyRRlqxS1xBL
 gyYAZB1RcOS6KuGrRwbe1LR57HublX8M5yYUnWGShqf8um77B9pP+CrdV6LOwME4bgUm
 AqOiQLVERIAVYyl6TcDsR8628vDTI00BVSrgQtwDSgPabOyC7Td1xpJ78WOYX3WWxjiM
 d/omuvkZKO387GAgaDplfV5c6hY4edr1dEtEzoIsKnYfkpZdm8AAQ1OdVxe21iEdRmz7
 edOw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:from:date:message-id:subject:to;
 bh=8NycKI9RhhWu09KEm6zL7isPt50mLxmXRxsL/TMMCK4=;
 b=iWYy3MSgWHmd2+DMgiHOvas16Wf0YJXvzaWfnrEprMWlhCpOSo6yoZn3IAXF4LAIuo
 Z7s3eFpa289eVK3EHhgCoZMfPMvNzo+T4DaQi9KGCoLFN4rpWI8ROrmKU0K9iBMirdWX
 tty4K8J4FkOATBUiNDOoJfl4+e7gWpAi0mHV56qmUuYE6zCQec93ke8LgRKT2iZJU5Yv
 q+bET3Epl9lcQqJWRPYwq2bVvnQnnC0FKvm1CPjjMBIS3v0tIA7YRNREDQ3vuO+e48Jh
 22doyreSZnbl2MCmZm3DOaV8RhKjfWS73/v6Ve9okbQsKFazD0xDmfl6eiPVCs2GhHk8
 s9YA==
X-Gm-Message-State: AN3rC/7cKyqsBcL7YqY3tIEcaxOeNroc16hCdSAI9GPB4jg3EzuWSPuJ
 cjAAC4QHj+kYWcC8w54Y/DsFn8Kmnl38
X-Received: by 10.237.55.5 with SMTP id i5mr37607240qtb.76.1493920223532; Thu,
 04 May 2017 10:50:23 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.140.89.115 with HTTP; Thu, 4 May 2017 10:50:23 -0700 (PDT)
From: Serge Sivkov <ssp.mryau@gmail.com>
Date: Thu, 4 May 2017 23:50:23 +0600
Message-ID: <CAOUGqWxa4mQEVJjOdzYqwcn4svwtJkTNzd99BjemkKiZ=-gFXg@mail.gmail.com>
To: Ctypes@lists.ocaml.org
Content-Type: multipart/alternative; boundary=001a114333823f1ee3054eb66859
Subject: [ocaml-ctypes] ocaml as callback to C code with event loop
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 04 May 2017 17:05:34 -0000

--001a114333823f1ee3054eb66859
Content-Type: text/plain; charset=UTF-8

Hello,

I'm write program which uses C library with main event loop. So, I call
init function of this library from ocaml code, register callback and call
main loop of this library. After that monent, ocaml code will be called
only from this library.

Here is some relevant lines of code:

let bus_handler = ptr void @-> size_t @-> ptr (ptr void) @-> ptr size_t @->
returning int

type handlers
let handlers: handlers structure typ = structure "handlers_t"

let topic_name = field handlers "topic_name" string
let topic_handler = field handlers "topic_handler" (funptr
~thread_registration:true bus_handler)
let topic_type = field handlers "topic_type" int
let () = seal handlers

let bus_init = foreign "bus_init" (int @-> ptr (ptr void) @-> returning int)
let loop = foreign "loop" (ptr void @-> returning int)
let register_server = foreign "register_server" (ptr void @-> string @->
ptr handlers @-> size_t @-> returning int)

let floop fhandler name () =
        let handler = make handlers in
        let () = (
                setf handler topic_name name;
                setf handler topic_handler fhandler;
                setf handler topic_type 0
        ) in
        let () = (
                (* Gc.compact (); #1 *)
                let r = bus_init 1 bus_ptr in
                Printf.printf "bus_init: %d\n" r
        ) in
        let r1 = register_server (!@ bus_ptr) name (addr handler) (of_int
1) in
        (* let () = Gc.compact () in #2 *)
        loop (!@ bus_ptr)

In case I comment out both calls to Gc.compact I see

Cannot find handler (Resource temporarily unavailable)
Cannot get address handler item (Resource temporarily unavailable)

after 100-200 test calls on x86 and I get CallToExpiredClosure on ARM just
on the first test call.
In case I uncomment #1 or #2 code line with Gc.compact call I got same
error (Cannot find handler ...) on first test call on x86 too. I've added

        let addr1 = Root.create fhandler in
        let addr2 = Root.create handler in

to begin of floop function but nothing changed on program behaviour under
tests.
How can I protect struct handler and fhandler function pointer from garbage
collection?

WBR, ssp

--001a114333823f1ee3054eb66859
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div><div><div><div>Hello,<br><br></div>I&#39;m write prog=
ram which uses C library with main event loop. So, I call init function of =
this library from ocaml code, register callback and call main loop of this =
library. After that monent, ocaml code will be called only from this librar=
y.</div><div><br></div><div>Here is some relevant lines of code:<br><br>let=
 bus_handler =3D ptr void @-&gt; size_t @-&gt; ptr (ptr void) @-&gt; ptr si=
ze_t @-&gt; returning int<br><br>type handlers<br>let handlers: handlers st=
ructure typ =3D structure &quot;handlers_t&quot;<br><br>let topic_name =3D =
field handlers &quot;topic_name&quot; string<br>let topic_handler =3D field=
 handlers &quot;topic_handler&quot; (funptr ~thread_registration:true bus_h=
andler)<br>let topic_type =3D field handlers &quot;topic_type&quot; int<br>=
let () =3D seal handlers<br><br>let bus_init =3D foreign &quot;bus_init&quo=
t; (int @-&gt; ptr (ptr void) @-&gt; returning int)<br>let loop =3D foreign=
 &quot;loop&quot; (ptr void @-&gt; returning int)<br>let register_server =
=3D foreign &quot;register_server&quot; (ptr void @-&gt; string @-&gt; ptr =
handlers @-&gt; size_t @-&gt; returning int)<br><br>let floop fhandler name=
 () =3D<br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 let handler =3D make =
handlers in<br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 let () =3D (<br>=
=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=
=A0=C2=A0=C2=A0 setf handler topic_name name;<br>=C2=A0=C2=A0=C2=A0=C2=A0=
=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 setf han=
dler topic_handler fhandler;<br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=
=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 setf handler topic_type 0<=
br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 ) in<br>=C2=A0=C2=A0=C2=A0=C2=
=A0=C2=A0=C2=A0=C2=A0 let () =3D (<br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=
=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 (* Gc.compact (); #1=
 *)<br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=
=C2=A0=C2=A0=C2=A0=C2=A0 let r =3D bus_init 1 bus_ptr in=C2=A0<br>=C2=A0=C2=
=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=
=C2=A0 Printf.printf &quot;bus_init: %d\n&quot; r<br>=C2=A0=C2=A0=C2=A0=C2=
=A0=C2=A0=C2=A0=C2=A0 ) in<br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 le=
t r1 =3D register_server (!@ bus_ptr) name (addr handler) (of_int 1) in<br>=
=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 (* let () =3D Gc.compact () in #=
2 *)<br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 loop (!@ bus_ptr)<br><br=
>In case I comment out both calls to Gc.compact I see<br><br>Cannot find ha=
ndler (Resource temporarily unavailable)<br>Cannot get address handler item=
 (Resource temporarily unavailable)<br><br>after 100-200 test calls on x86 =
and I get CallToExpiredClosure on ARM just on the first test call.<br>In ca=
se I uncomment #1 or #2 code line with Gc.compact call I got same error (Ca=
nnot find handler ...) on first test call on x86 too. I&#39;ve added</div><=
div><br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 let addr1 =3D Root.creat=
e fhandler in<br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 let addr2 =3D R=
oot.create handler in<br></div><br>to begin of floop function but nothing c=
hanged on program behaviour under tests.<br></div>How can I protect struct =
handler and fhandler function pointer from garbage collection?<br><br></div=
>WBR, ssp<br></div>

--001a114333823f1ee3054eb66859--

From daniel.buenzli@erratique.ch  Thu May  4 18:41:36 2017
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: Ctypes@lists.ocaml.org
Delivered-To: Ctypes@lists.ocaml.org
Received: from ppsw-41.csi.cam.ac.uk (ppsw-41.csi.cam.ac.uk [131.111.8.141])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id F03723C1AC
 for <Ctypes@lists.ocaml.org>; Thu,  4 May 2017 18:41:35 +0100 (BST)
X-Cam-SpamDetails: score -0.1 from SpamAssassin-3.4.1-1786853 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [74.55.86.74 listed in list.dnswl.dnsbl.ja.net]
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail6.webfaction.com ([74.55.86.74]:50845
 helo=smtp.webfaction.com)
 by ppsw-41.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1:AES256-SHA:256)
 id 1d6LSM-0006mx-SX (Exim 4.89) for Ctypes@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Thu, 04 May 2017 19:26:27 +0100
Received: from [172.20.10.2]
 (174.232.197.178.dynamic.wless.lssmb00p-cgnat.res.cust.swisscom.ch
 [178.197.232.174])
 by smtp.webfaction.com (Postfix) with ESMTP id A515F59D0881;
 Thu,  4 May 2017 18:24:12 +0000 (UTC)
Date: Thu, 4 May 2017 20:24:11 +0200
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Serge Sivkov <ssp.mryau@gmail.com>
Message-ID: <DD0C32B6ADBF406B802684994895E94B@erratique.ch>
In-Reply-To: <CAOUGqWxa4mQEVJjOdzYqwcn4svwtJkTNzd99BjemkKiZ=-gFXg@mail.gmail.com>
References: <CAOUGqWxa4mQEVJjOdzYqwcn4svwtJkTNzd99BjemkKiZ=-gFXg@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Cc: Ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] ocaml as callback to C code with event loop
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 04 May 2017 17:41:36 -0000

On Thursday, 4 May 2017 at 19:50, Serge Sivkov wrote:
> How can I protect struct handler and fhandler function pointer from garbage collection?

I recently struggled with this on test code aswell. One thing that seems to work quite well is to store them in a toplevel  reference. 

let fhandler = ref fhandler 

Best,

Daniel



From ssp.mryau@gmail.com  Thu May 11 09:35:32 2017
Return-Path: <ssp.mryau@gmail.com>
X-Original-To: Ctypes@lists.ocaml.org
Delivered-To: Ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id A52173C371
 for <Ctypes@lists.ocaml.org>; Thu, 11 May 2017 09:35:32 +0100 (BST)
X-Cam-SpamDetails: score -2.5 from SpamAssassin-3.4.1-1786853 
 *  0.5 RCVD_IN_SORBS_SPAM RBL: SORBS: sender is a spam source
 *      [209.85.220.176 listed in dnsbl.sorbs.net]
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.220.176 listed in list.dnswl.dnsbl.ja.net]
 * -2.8 RCVD_IN_MSPIKE_H2 RBL: Average reputation (+2)
 *      [209.85.220.176 listed in wl.mailspike.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (ssp.mryau[at]gmail.com)
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-qk0-f176.google.com ([209.85.220.176]:35421)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1d8kH7-000jjq-m0 (Exim 4.89) for Ctypes@lists.ocaml.org
 (return-path <ssp.mryau@gmail.com>); Thu, 11 May 2017 10:20:46 +0100
Received: by mail-qk0-f176.google.com with SMTP id a72so17052055qkj.2
 for <Ctypes@lists.ocaml.org>; Thu, 11 May 2017 02:20:45 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc; bh=Dp/u23hJq0/ITLzkomdQOyVmx9pTpm5ufVkSetF9ks8=;
 b=Xhrf/QuljTtx8txUlpZRpZ20QGGbWi9YVffRvkvcY4V7BHxdzNembVL961d25DPxl0
 lsZMfmT076teCz3IdidUFoysZkc9upspnMIH3LK0sEEgcKbVi74nPEyqcs3jVTjADyCs
 U2uhmGD5f0IpjxwQAIpkDQDu7jSUBZUurqs9P8/Kx19mcSc+YZQxJJerl6B/yfXjO5M0
 KMyZY5WOLQf5QDN1DWVCJ2IPtxbMyTDFBd82HIQpp6+wwRgZNhUGIdV0jBPGAZIBgqvN
 PIIhpNDxmdm6nOUervZi7Zlt34CmD63G+ZCizRftGFR990beYoRBksv/ydYVizD0J25y
 So5Q==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc;
 bh=Dp/u23hJq0/ITLzkomdQOyVmx9pTpm5ufVkSetF9ks8=;
 b=obSbxuSoo7NX9ZFnSRdGExuXX83Vjbp31l+qzb+h28f641uJVQe1a1MbdUapuscujW
 4TC/IueDjydlQmnieKySBD/E2q9GuHGuwAME3R1LcHEfV8w5E0ZKFpg1LKPacXLHq04O
 SxCNmRCx4HOt0eEN68a1g0wF8U3iABgAIhGmP0Tkmt808gHQ+hw1+MGpkT90GCV6kVXX
 uf4WKYfHuVpCBDaRl7t5eQirrPW8Db8aEjOLF/pfnw9TNTZJAyxPkLr+6UkAeiMScjJn
 1CLszKL/YjVQr8IaqrfWYT7YZnQl2SLVTGkEkLbsR2mxEag18kBRJ3QMZZSURPLy91Oc
 AQDA==
X-Gm-Message-State: AODbwcBWQJdpfCdEGPY1vIG25qTYxlTwpw8mbEKG+tgs8R/XnfvWkTA3
 rS8lftl+2qUFtnBHcarZrzoOLEGdZg==
X-Received: by 10.55.42.220 with SMTP id q89mr9543914qkq.211.1494494444931;
 Thu, 11 May 2017 02:20:44 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.140.92.102 with HTTP; Thu, 11 May 2017 02:20:44 -0700 (PDT)
In-Reply-To: <DD0C32B6ADBF406B802684994895E94B@erratique.ch>
References: <CAOUGqWxa4mQEVJjOdzYqwcn4svwtJkTNzd99BjemkKiZ=-gFXg@mail.gmail.com>
 <DD0C32B6ADBF406B802684994895E94B@erratique.ch>
From: Serge Sivkov <ssp.mryau@gmail.com>
Date: Thu, 11 May 2017 14:20:44 +0500
Message-ID: <CAOUGqWwXzExRomiMNZKPCjRwuJPn27QcQWD=Rg7jM3dSTEnUDw@mail.gmail.com>
To: =?UTF-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
Content-Type: multipart/alternative; boundary=001a1147b09e82557d054f3c1aff
Cc: Ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] ocaml as callback to C code with event loop
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 11 May 2017 08:35:32 -0000

--001a1147b09e82557d054f3c1aff
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Hello,

thank for your reply, it allow me partially resolve problem: code works on
x86 without any problems (yet with Gc.compact() calls insert after each
line of code). But ARM version allways raises CallToExpiredClosure on the
first call to callback.
I've tried next variants to store callback if struct field:
- existing toplevel function by name
- store function name to toplevel ref and save it to struct field by
!ref_name
- by register closure to function (fun a b c d -> top_level_function a b c
d) with Ctypes.Root.create
- by store same closure to Hashtbl.
- by register finaliser with Gc.finalise for closure (and it has not been
called)
All this variants work on x86 and do not work on ARM, i.e. first call to
OCaml callback from C raises CallToExpiredClosure.
It seems I don't understand problem at all.

So here is base questions:
- in case I store in C struct field existing toplevel function by name, may
it be GC'ed?
-what may cause CallToExpiredClosure raise too if I has only one callback
to call and at C side this struct in GDB seems to be correct?

WBR, ssp

2017-05-04 23:24 GMT+05:00 Daniel B=C3=BCnzli <daniel.buenzli@erratique.ch>=
:

> On Thursday, 4 May 2017 at 19:50, Serge Sivkov wrote:
> > How can I protect struct handler and fhandler function pointer from
> garbage collection?
>
> I recently struggled with this on test code aswell. One thing that seems
> to work quite well is to store them in a toplevel  reference.
>
> let fhandler =3D ref fhandler
>
> Best,
>
> Daniel
>
>
>

--001a1147b09e82557d054f3c1aff
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div><div><div><div>Hello,<br><br></div>thank for your rep=
ly, it allow me partially resolve problem: code works on x86 without any pr=
oblems (yet with Gc.compact() calls insert after each line of code). But AR=
M version allways raises CallToExpiredClosure on the first call to callback=
.<br></div>I&#39;ve tried next variants to store callback if struct field:<=
br></div><div>- existing toplevel function by name<br></div><div>- store fu=
nction name to toplevel ref and save it to struct field by !ref_name<br></d=
iv><div>- by register closure to function (fun a b c d -&gt; top_level_func=
tion a b c d) with Ctypes.Root.create<br></div><div>- by store same closure=
 to Hashtbl.<br></div><div>- by register finaliser with Gc.finalise for clo=
sure (and it has not been called)<br></div><div>All this variants work on x=
86 and do not work on ARM, i.e. first call to OCaml callback from C raises =
CallToExpiredClosure.</div>It seems I don&#39;t understand problem at all.<=
br><br></div><div>So here is base questions:<br>- in case I store in C stru=
ct field existing toplevel function by name, may it be GC&#39;ed?<br>-what =
may cause CallToExpiredClosure raise too if I has only one callback to call=
 and at C side this struct in GDB seems to be correct?<br></div><div><br></=
div>WBR, ssp<br></div><div class=3D"gmail_extra"><br><div class=3D"gmail_qu=
ote">2017-05-04 23:24 GMT+05:00 Daniel B=C3=BCnzli <span dir=3D"ltr">&lt;<a=
 href=3D"mailto:daniel.buenzli@erratique.ch" target=3D"_blank">daniel.buenz=
li@erratique.ch</a>&gt;</span>:<br><blockquote class=3D"gmail_quote" style=
=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><span cl=
ass=3D"">On Thursday, 4 May 2017 at 19:50, Serge Sivkov wrote:<br>
&gt; How can I protect struct handler and fhandler function pointer from ga=
rbage collection?<br>
<br>
</span>I recently struggled with this on test code aswell. One thing that s=
eems to work quite well is to store them in a toplevel=C2=A0 reference.<br>
<br>
let fhandler =3D ref fhandler<br>
<br>
Best,<br>
<br>
Daniel<br>
<br>
<br>
</blockquote></div><br></div>

--001a1147b09e82557d054f3c1aff--

From yallop@gmail.com  Thu May 11 11:52:35 2017
Return-Path: <yallop@gmail.com>
X-Original-To: Ctypes@lists.ocaml.org
Delivered-To: Ctypes@lists.ocaml.org
Received: from ppsw-41.csi.cam.ac.uk (ppsw-41.csi.cam.ac.uk [131.111.8.141])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 045A33C371
 for <Ctypes@lists.ocaml.org>; Thu, 11 May 2017 11:52:35 +0100 (BST)
X-Cam-SpamDetails: score 0.3 from SpamAssassin-3.4.1-1786853 
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [209.85.220.180 listed in wl.mailspike.net]
 *  0.5 RCVD_IN_SORBS_SPAM RBL: SORBS: sender is a spam source
 *      [209.85.220.180 listed in dnsbl.sorbs.net]
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.220.180 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-qk0-f180.google.com ([209.85.220.180]:33388)
 by ppsw-41.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1d8mPk-0007pP-Ro (Exim 4.89) for Ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Thu, 11 May 2017 12:37:49 +0100
Received: by mail-qk0-f180.google.com with SMTP id y201so19506424qka.0
 for <Ctypes@lists.ocaml.org>; Thu, 11 May 2017 04:37:48 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc; bh=RVG1ooivmClPNJoAr5++OgGnAXxWkP1hOrEdayEfH+k=;
 b=Hwnwx7FQnV6kiJeTVBQ8CPWZ+J0Taexo1F0wfS7xXWfrErzNb9zqnmy9rJl2YQtQuJ
 LcGMyhviUEatA57u6PbbddHchofBtOo5swQ/pWz1qPq8ZYiLWjmB6Uwdi6y6cMTP5uS/
 K0Tth80BlTk+GjwWH4jTERK+hNsSCO3KZ4TSSveUlGQSq0pjfsYGsXnQATEylgGvA9dy
 H316BdgQYEnKb7l2vmGvpc/3SnDXG5p3ssqExqe0/0rcRmT9xa4xHfttP+hjtgaxlhhW
 6x3xXwT8ObAQ6i/ZS4YmLbgVDqUNFoCF7EdtSOKbJa/R9DXKNvn5n74NhDIOEznnldVf
 BGgA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc;
 bh=RVG1ooivmClPNJoAr5++OgGnAXxWkP1hOrEdayEfH+k=;
 b=A05StFhro9RKkg6lFckU78IezBem9m2BQu3vF7PKwBBHgt3BmzOSaxhPKlWmjy6TlV
 CLy9FmbHQoOt/GFM/KgauoeyL1IBVacD072WwgFufztrZrt4K5xvrGwQlYLmyBdQq3Ro
 pwVFuyC2uBbg1cmeZIKpgTp5lHjUQvKWX5QG7cpWE4Ur+NQup79iLu0gmdg3XSm43tZT
 dt27F/Kd8GnJIheiBbQsCz3055fGUUzlGezSIzzB90UE2mZFfQpwyUTeh3FHv2N5X5Ng
 2WJdxILM/2VkkWuoD0mKETwGRlyF7ZG1Tuz/ECQHoUZllto1BNBduxNKQ5uP/weAMKx2
 3PaA==
X-Gm-Message-State: AODbwcB10kI/fOsNfbbpYPSzpvdaNf56and5hZ6dFx03CwnQihrOe9Rn
 2+GADCLWvvrI6OCycr6mZfFk0WK20g==
X-Received: by 10.55.26.27 with SMTP id a27mr9486026qka.73.1494502667475; Thu,
 11 May 2017 04:37:47 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.55.185.70 with HTTP; Thu, 11 May 2017 04:37:46 -0700 (PDT)
In-Reply-To: <CAOUGqWwXzExRomiMNZKPCjRwuJPn27QcQWD=Rg7jM3dSTEnUDw@mail.gmail.com>
References: <CAOUGqWxa4mQEVJjOdzYqwcn4svwtJkTNzd99BjemkKiZ=-gFXg@mail.gmail.com>
 <DD0C32B6ADBF406B802684994895E94B@erratique.ch>
 <CAOUGqWwXzExRomiMNZKPCjRwuJPn27QcQWD=Rg7jM3dSTEnUDw@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
Date: Thu, 11 May 2017 12:37:46 +0100
Message-ID: <CAAxsn=EjK6aukFW5GWSfrBTqDTAWxRKsE2VpHNVtHQd0tqbV2g@mail.gmail.com>
To: Serge Sivkov <ssp.mryau@gmail.com>
Content-Type: text/plain; charset=UTF-8
Cc: ctypes <Ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] ocaml as callback to C code with event loop
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 11 May 2017 10:52:35 -0000

On 11 May 2017 at 10:20, Serge Sivkov <ssp.mryau@gmail.com> wrote:
> thank for your reply, it allow me partially resolve problem: code works on
> x86 without any problems (yet with Gc.compact() calls insert after each line
> of code). But ARM version allways raises CallToExpiredClosure on the first
> call to callback.
> I've tried next variants to store callback if struct field:
> - existing toplevel function by name
> - store function name to toplevel ref and save it to struct field by
> !ref_name
> - by register closure to function (fun a b c d -> top_level_function a b c
> d) with Ctypes.Root.create
> - by store same closure to Hashtbl.
> - by register finaliser with Gc.finalise for closure (and it has not been
> called)
> All this variants work on x86 and do not work on ARM, i.e. first call to
> OCaml callback from C raises CallToExpiredClosure.
> It seems I don't understand problem at all.
>
> So here is base questions:
> - in case I store in C struct field existing toplevel function by name, may
> it be GC'ed?

Yes.  The only way to prevent a value from being collected is to
ensure that it's visible to the GC, which requires keeping a reference
to it in an OCaml object.  The GC doesn't scan C memory, such as
struct fields, so storing a function in a struct field won't stop it
being collected.

> -what may cause CallToExpiredClosure raise too if I has only one callback to
> call and at C side this struct in GDB seems to be correct?

If there's an OCaml reference to the function passed to C then
CallToExpiredClosure should never occur.  But it has to be exactly the
same function -- for example, storing a function in a struct field,
then reading from the struct field will create a new copy of the
function, which won't prevent the original from being collected.

If you have a (smallish) running example somewhere of the code that's
causing problems I'd be happy to take a look.

Kind regards,

Jeremy.

From ssp.mryau@gmail.com  Fri May 12 10:00:52 2017
Return-Path: <ssp.mryau@gmail.com>
X-Original-To: Ctypes@lists.ocaml.org
Delivered-To: Ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id B7AF23C0DE
 for <Ctypes@lists.ocaml.org>; Fri, 12 May 2017 10:00:52 +0100 (BST)
X-Cam-SpamDetails: score 0.3 from SpamAssassin-3.4.1-1786853 
 *  0.5 RCVD_IN_SORBS_SPAM RBL: SORBS: sender is a spam source
 *      [209.85.220.182 listed in dnsbl.sorbs.net]
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.220.182 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [209.85.220.182 listed in wl.mailspike.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (ssp.mryau[at]gmail.com)
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-qk0-f182.google.com ([209.85.220.182]:33806)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1d979F-000JO9-je (Exim 4.89) for Ctypes@lists.ocaml.org
 (return-path <ssp.mryau@gmail.com>); Fri, 12 May 2017 10:46:10 +0100
Received: by mail-qk0-f182.google.com with SMTP id k74so43260415qke.1
 for <Ctypes@lists.ocaml.org>; Fri, 12 May 2017 02:46:08 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc; bh=t1g7/UanM2D23L9y24AAUVECwfnxhkWjET7/mTZlHmU=;
 b=AReYN0ivf6jvw0L9sHoKnO5t7ReDbDnMLCFqtmVNXAHxcfhEPMohV7rP6bOwVJqfk+
 AoLcvEvjC4RUAgRoxGBIGdHfS7kf9+VdhZiZZRAZBC3eqPhBgdq+3Z1KXZH7Y9QEfam0
 0V0/vOCRWbKYsGVVzXocWVLzawDdkr9tCjcVMh7aC1guoyGkJH0ncJj7aFjFmPVKEi8h
 iWDOosfB+XSieTtiknBc2NIYW5eKuCnWnQyIZW01aRDIwsnaUNcsvwV4goD7r/oBh7sV
 WXDY5fZbTFk9nU9apItPjVKoIYgITL3RH06Wrs/2fA1EWdI+nNsLBttFnRRr2DPcPUOk
 2aiA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc;
 bh=t1g7/UanM2D23L9y24AAUVECwfnxhkWjET7/mTZlHmU=;
 b=jJrIP4Xldqhz4IM4DLKoYlX/q/h4hEV72mWSUL59541vUIpbBjygtZFtbvm28F2Rdk
 PhF8BMY4q3WgHa9JLPAi1HFBjvWRRU92lEYGkA0+KexZdvr+TWRkn2uz/9dDgxsATou2
 hJaBF+5B8oSPZlMrFTyLDkM8W+/oZDruSJql5WB4VY8Cwfoe7Mi191NNxXZU5s00Zspr
 LIq2bFDr4YRqjPFMFDZya9GU25iUljyrUEX4e2eGgu9jz904tdHnWdToLDqTpfaSqM7t
 wltEm1YnDqqrNn8GevZckaJ15ppEZBrOvYX2n4khhjP1wN9yYJivybCjQ3qQlERteO6u
 DXZg==
X-Gm-Message-State: AODbwcD0yBUVm4Dm8tPZJnOl8GdDtT+go5mw2YXd4/4/LW6Bsq0sAQzg
 1i/YJTFylRgpNBlFS2R4pxc1wv4Pkw==
X-Received: by 10.55.40.41 with SMTP id o41mr2949620qkh.3.1494582368171; Fri,
 12 May 2017 02:46:08 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.140.92.102 with HTTP; Fri, 12 May 2017 02:46:07 -0700 (PDT)
In-Reply-To: <CAAxsn=EjK6aukFW5GWSfrBTqDTAWxRKsE2VpHNVtHQd0tqbV2g@mail.gmail.com>
References: <CAOUGqWxa4mQEVJjOdzYqwcn4svwtJkTNzd99BjemkKiZ=-gFXg@mail.gmail.com>
 <DD0C32B6ADBF406B802684994895E94B@erratique.ch>
 <CAOUGqWwXzExRomiMNZKPCjRwuJPn27QcQWD=Rg7jM3dSTEnUDw@mail.gmail.com>
 <CAAxsn=EjK6aukFW5GWSfrBTqDTAWxRKsE2VpHNVtHQd0tqbV2g@mail.gmail.com>
From: Serge Sivkov <ssp.mryau@gmail.com>
Date: Fri, 12 May 2017 14:46:07 +0500
Message-ID: <CAOUGqWyE9SGCsqXXGhS3FnY6jB9tnYU0hNPyvH=+4qihiLgt0A@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Content-Type: multipart/alternative; boundary="001a1140a35a2478c2054f509302"
Cc: ctypes <Ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] ocaml as callback to C code with event loop
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 12 May 2017 09:00:52 -0000

--001a1140a35a2478c2054f509302
Content-Type: text/plain; charset="UTF-8"

Hello,

here is minimal example, which works without any problems on x86 and raises
CallToExpiredClosure on ARM:
https://github.com/mryau/ctypes-mintest

WBR, ssp

2017-05-11 16:37 GMT+05:00 Jeremy Yallop <yallop@gmail.com>:

> On 11 May 2017 at 10:20, Serge Sivkov <ssp.mryau@gmail.com> wrote:
> > thank for your reply, it allow me partially resolve problem: code works
> on
> > x86 without any problems (yet with Gc.compact() calls insert after each
> line
> > of code). But ARM version allways raises CallToExpiredClosure on the
> first
> > call to callback.
> > I've tried next variants to store callback if struct field:
> > - existing toplevel function by name
> > - store function name to toplevel ref and save it to struct field by
> > !ref_name
> > - by register closure to function (fun a b c d -> top_level_function a b
> c
> > d) with Ctypes.Root.create
> > - by store same closure to Hashtbl.
> > - by register finaliser with Gc.finalise for closure (and it has not been
> > called)
> > All this variants work on x86 and do not work on ARM, i.e. first call to
> > OCaml callback from C raises CallToExpiredClosure.
> > It seems I don't understand problem at all.
> >
> > So here is base questions:
> > - in case I store in C struct field existing toplevel function by name,
> may
> > it be GC'ed?
>
> Yes.  The only way to prevent a value from being collected is to
> ensure that it's visible to the GC, which requires keeping a reference
> to it in an OCaml object.  The GC doesn't scan C memory, such as
> struct fields, so storing a function in a struct field won't stop it
> being collected.
>
> > -what may cause CallToExpiredClosure raise too if I has only one
> callback to
> > call and at C side this struct in GDB seems to be correct?
>
> If there's an OCaml reference to the function passed to C then
> CallToExpiredClosure should never occur.  But it has to be exactly the
> same function -- for example, storing a function in a struct field,
> then reading from the struct field will create a new copy of the
> function, which won't prevent the original from being collected.
>
> If you have a (smallish) running example somewhere of the code that's
> causing problems I'd be happy to take a look.
>
> Kind regards,
>
> Jeremy.
>

--001a1140a35a2478c2054f509302
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div><div>Hello,<br><br></div>here is minimal example, whi=
ch works without any problems on x86 and raises CallToExpiredClosure on ARM=
:<br><a href=3D"https://github.com/mryau/ctypes-mintest">https://github.com=
/mryau/ctypes-mintest</a><br><br></div>WBR, ssp<br></div><div class=3D"gmai=
l_extra"><br><div class=3D"gmail_quote">2017-05-11 16:37 GMT+05:00 Jeremy Y=
allop <span dir=3D"ltr">&lt;<a href=3D"mailto:yallop@gmail.com" target=3D"_=
blank">yallop@gmail.com</a>&gt;</span>:<br><blockquote class=3D"gmail_quote=
" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><=
span class=3D"">On 11 May 2017 at 10:20, Serge Sivkov &lt;<a href=3D"mailto=
:ssp.mryau@gmail.com">ssp.mryau@gmail.com</a>&gt; wrote:<br>
&gt; thank for your reply, it allow me partially resolve problem: code work=
s on<br>
&gt; x86 without any problems (yet with Gc.compact() calls insert after eac=
h line<br>
&gt; of code). But ARM version allways raises CallToExpiredClosure on the f=
irst<br>
&gt; call to callback.<br>
&gt; I&#39;ve tried next variants to store callback if struct field:<br>
&gt; - existing toplevel function by name<br>
&gt; - store function name to toplevel ref and save it to struct field by<b=
r>
&gt; !ref_name<br>
&gt; - by register closure to function (fun a b c d -&gt; top_level_functio=
n a b c<br>
&gt; d) with Ctypes.Root.create<br>
&gt; - by store same closure to Hashtbl.<br>
&gt; - by register finaliser with Gc.finalise for closure (and it has not b=
een<br>
&gt; called)<br>
&gt; All this variants work on x86 and do not work on ARM, i.e. first call =
to<br>
&gt; OCaml callback from C raises CallToExpiredClosure.<br>
&gt; It seems I don&#39;t understand problem at all.<br>
&gt;<br>
&gt; So here is base questions:<br>
&gt; - in case I store in C struct field existing toplevel function by name=
, may<br>
&gt; it be GC&#39;ed?<br>
<br>
</span>Yes.=C2=A0 The only way to prevent a value from being collected is t=
o<br>
ensure that it&#39;s visible to the GC, which requires keeping a reference<=
br>
to it in an OCaml object.=C2=A0 The GC doesn&#39;t scan C memory, such as<b=
r>
struct fields, so storing a function in a struct field won&#39;t stop it<br=
>
being collected.<br>
<span class=3D""><br>
&gt; -what may cause CallToExpiredClosure raise too if I has only one callb=
ack to<br>
&gt; call and at C side this struct in GDB seems to be correct?<br>
<br>
</span>If there&#39;s an OCaml reference to the function passed to C then<b=
r>
CallToExpiredClosure should never occur.=C2=A0 But it has to be exactly the=
<br>
same function -- for example, storing a function in a struct field,<br>
then reading from the struct field will create a new copy of the<br>
function, which won&#39;t prevent the original from being collected.<br>
<br>
If you have a (smallish) running example somewhere of the code that&#39;s<b=
r>
causing problems I&#39;d be happy to take a look.<br>
<br>
Kind regards,<br>
<br>
Jeremy.<br>
</blockquote></div><br></div>

--001a1140a35a2478c2054f509302--

From yallop@gmail.com  Wed May 17 16:35:43 2017
Return-Path: <yallop@gmail.com>
X-Original-To: Ctypes@lists.ocaml.org
Delivered-To: Ctypes@lists.ocaml.org
Received: from ppsw-31.csi.cam.ac.uk (ppsw-31.csi.cam.ac.uk [131.111.8.131])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 063933C569
 for <Ctypes@lists.ocaml.org>; Wed, 17 May 2017 16:35:43 +0100 (BST)
X-Cam-SpamDetails: score 0.3 from SpamAssassin-3.4.1-1786853 
 *  0.5 RCVD_IN_SORBS_SPAM RBL: SORBS: sender is a spam source
 *      [209.85.216.174 listed in dnsbl.sorbs.net]
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.216.174 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [209.85.216.174 listed in wl.mailspike.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-qt0-f174.google.com ([209.85.216.174]:35544)
 by ppsw-31.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1dB1hN-000Q3u-Km (Exim 4.89) for Ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Wed, 17 May 2017 17:21:18 +0100
Received: by mail-qt0-f174.google.com with SMTP id v27so13693782qtg.2
 for <Ctypes@lists.ocaml.org>; Wed, 17 May 2017 09:21:17 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc; bh=ijd9LhPHA9HVc751DuWH5zrMSxkYpj+yrHbLii2cJ9M=;
 b=FQPC/BKnuIkhg4F1bFs4gWu0MvZhRkQeyuwBJbmwR8jaGtsIssE8U0ErEvvUumyHtG
 6ujP57cLHLJHKwHdur/eBTqE1FeyFK59EAh1Ratlw41jjHurZh5jVvn/97UqBd+PdCdo
 a5KyrM9VwT6Bqpx8C0cPQvND18JH3V0wwFtM64mSVaDOfoXChLGKd3aB6KjNHrlXruZP
 A3urJJSmHkJev+7F9To6h+Jm2wH10auU2b+w4OzOwDtW4Sv0/WO2L7N6Ht2lTEfrcQWK
 9381dPJHvcs0ipja9aqDRJCY87rF/kBmLH0tj26oCybnkMtrfjxn87rFLbr72mkzLGTc
 v8ow==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc;
 bh=ijd9LhPHA9HVc751DuWH5zrMSxkYpj+yrHbLii2cJ9M=;
 b=olxZfxB6oVw3uUMMB/qqgLw9rSzcWCOttVG/ehYBAZuWT+p+ymgmvHbo9k19F8R4ZK
 lSHSft/3OGbh2yVEL2r3eaK24vntL/OTOMPcItrvozLgJw5fg5rDdZHozM0e+ppu7uZ0
 aNDwyr9t/U5gs/+S0lNxyP/ZsAiZ1r3E2Fe6+tJ7RVDIp5WxojA5uXXSi3Y9dvlCI3+r
 9/Lek2x7ySEajGixX7KYf2r6EkoDz9IequA2iUX5p8NfKcG8GrmD8Abwg6PxxuhrW7S8
 RjVeini+XRM1mK/BpyohNa4WCCztIcIKfA/rn4X/R6ZqixwIxnkUOh6tiMZHwm5aik+f
 N9uw==
X-Gm-Message-State: AODbwcAS2rmSB8EReV5l/+CgL2K6TU/XAlX8C4VT0kQvETm3YaGC0iI7
 WbAOR1cmp/zC9Q+7gSjmO7mH32bQSw==
X-Received: by 10.200.53.4 with SMTP id y4mr4010774qtb.136.1495038076431; Wed,
 17 May 2017 09:21:16 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.55.185.134 with HTTP; Wed, 17 May 2017 09:21:15 -0700 (PDT)
In-Reply-To: <CAOUGqWyE9SGCsqXXGhS3FnY6jB9tnYU0hNPyvH=+4qihiLgt0A@mail.gmail.com>
References: <CAOUGqWxa4mQEVJjOdzYqwcn4svwtJkTNzd99BjemkKiZ=-gFXg@mail.gmail.com>
 <DD0C32B6ADBF406B802684994895E94B@erratique.ch>
 <CAOUGqWwXzExRomiMNZKPCjRwuJPn27QcQWD=Rg7jM3dSTEnUDw@mail.gmail.com>
 <CAAxsn=EjK6aukFW5GWSfrBTqDTAWxRKsE2VpHNVtHQd0tqbV2g@mail.gmail.com>
 <CAOUGqWyE9SGCsqXXGhS3FnY6jB9tnYU0hNPyvH=+4qihiLgt0A@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
Date: Wed, 17 May 2017 17:21:15 +0100
Message-ID: <CAAxsn=EW_9k5QdAJX8jyxGjKeShpBU787y_TRbM=3c08o4-gig@mail.gmail.com>
To: Serge Sivkov <ssp.mryau@gmail.com>
Content-Type: text/plain; charset="UTF-8"
Cc: ctypes <Ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] ocaml as callback to C code with event loop
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 17 May 2017 15:35:43 -0000

On 12 May 2017 at 10:46, Serge Sivkov <ssp.mryau@gmail.com> wrote:
> here is minimal example, which works without any problems on x86 and raises
> CallToExpiredClosure on ARM:
> https://github.com/mryau/ctypes-mintest

Thanks for the example.  Which ctypes release are you using?  Could
you give the latest (0.11.4) a try, if you haven't already?

I didn't spot anything obviously wrong in your code, so if it's still
broken on Arm with 0.11.4 it'd be good to have an issue open to track
the problem (https://github.com/ocamllabs/ocaml-ctypes/issues).

Kind regards,

Jeremy

From ssp.mryau@gmail.com  Mon May 22 13:46:07 2017
Return-Path: <ssp.mryau@gmail.com>
X-Original-To: Ctypes@lists.ocaml.org
Delivered-To: Ctypes@lists.ocaml.org
Received: from ppsw-30.csi.cam.ac.uk (ppsw-30.csi.cam.ac.uk [131.111.8.130])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 8ABA73C184
 for <Ctypes@lists.ocaml.org>; Mon, 22 May 2017 13:46:07 +0100 (BST)
X-Cam-SpamDetails: score 0.3 from SpamAssassin-3.4.1-1786853 
 *  0.5 RCVD_IN_SORBS_SPAM RBL: SORBS: sender is a spam source
 *      [209.85.216.177 listed in dnsbl.sorbs.net]
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.216.177 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [209.85.216.177 listed in wl.mailspike.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (ssp.mryau[at]gmail.com)
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-qt0-f177.google.com ([209.85.216.177]:35020)
 by ppsw-30.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1dCnRG-000LYX-dV (Exim 4.89) for Ctypes@lists.ocaml.org
 (return-path <ssp.mryau@gmail.com>); Mon, 22 May 2017 14:31:59 +0100
Received: by mail-qt0-f177.google.com with SMTP id v27so101405817qtg.2
 for <Ctypes@lists.ocaml.org>; Mon, 22 May 2017 06:31:58 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc; bh=68372y/GcZP5ObBCEhfJvl2homhwt1q+t0vFnrnP2go=;
 b=l0hBU5hwM2l7SpFi/UIs86QC+X1sE5t1tAdZc+z2kLpMxYaV57iyZrA6srJ1k5KcNR
 pQ3s13eXh1zciuz+WOW3+jWdEQNfrLd/mP1sUeiQnu0cesy8E9oReb5PvzrXpXkuFUFE
 ENkXv9ia2vgckfHSAOe5lyIjUqsOeui+JQbfRCwXT8VG+Gp3jpW3oskVecfz7x7MBd9T
 0jDuyAEHdIaeOLCR2M3lZR8pa7OxZYx5u0x2L85fY18keZZsRs0XPGPfl0eVSPjCQaJU
 mG3spTr+mU6++7JVL/fov62FkK36ccYP+fQgwKrPnnCQ0XfGbTwly/Ul7OWuy+esFwvr
 k55Q==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc;
 bh=68372y/GcZP5ObBCEhfJvl2homhwt1q+t0vFnrnP2go=;
 b=B4a6QhEyTa2OHWYIYc5lwflBGFw+cro+WRP8peWOLHq7HaaXU8AlneF0dqcVCWPvOL
 Z24zvoUxKLTJnNLRJWqRx484y55aiQ0rInbOdilvzxZgQBU0aHyXXtvyPbqyOSLnMBGB
 p+tph/ryNYTd0PImj/uK1lu+sOhdGPiwUmwvl4pfFjrpkP/z+RtnylqoiTX2uCl4S7n2
 YpL5lvA9XVfyqdpQ824w0BLH8sxFlMZShICvW6ewS7CEqmON44DwPTgG4YDaZrPUN8is
 C+ClVzJiAAOiiCJPIrt3SqHbUGQGN6WZOrzLqX+RtkZqHRfyAKUZJyf/wZhTBQAzfrtJ
 6fag==
X-Gm-Message-State: AODbwcDkS1LjDgusIgirJsxBWmqgut2cNFZ1BvelUjTP4/h6LMRM1psm
 o67JxpV/FnusOBVrg+lzc0C16YwO+w==
X-Received: by 10.237.37.100 with SMTP id w33mr23458023qtc.14.1495459917239;
 Mon, 22 May 2017 06:31:57 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.140.92.102 with HTTP; Mon, 22 May 2017 06:31:56 -0700 (PDT)
In-Reply-To: <CAAxsn=EW_9k5QdAJX8jyxGjKeShpBU787y_TRbM=3c08o4-gig@mail.gmail.com>
References: <CAOUGqWxa4mQEVJjOdzYqwcn4svwtJkTNzd99BjemkKiZ=-gFXg@mail.gmail.com>
 <DD0C32B6ADBF406B802684994895E94B@erratique.ch>
 <CAOUGqWwXzExRomiMNZKPCjRwuJPn27QcQWD=Rg7jM3dSTEnUDw@mail.gmail.com>
 <CAAxsn=EjK6aukFW5GWSfrBTqDTAWxRKsE2VpHNVtHQd0tqbV2g@mail.gmail.com>
 <CAOUGqWyE9SGCsqXXGhS3FnY6jB9tnYU0hNPyvH=+4qihiLgt0A@mail.gmail.com>
 <CAAxsn=EW_9k5QdAJX8jyxGjKeShpBU787y_TRbM=3c08o4-gig@mail.gmail.com>
From: Serge Sivkov <ssp.mryau@gmail.com>
Date: Mon, 22 May 2017 18:31:56 +0500
Message-ID: <CAOUGqWwMeNGak6_3XjYzhVSVubXgr-GuSn5ZrCD1OktJVUeaxQ@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Content-Type: multipart/alternative; boundary="001a1140610c249a5d05501ce513"
Cc: ctypes <Ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] ocaml as callback to C code with event loop
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 22 May 2017 12:46:07 -0000

--001a1140610c249a5d05501ce513
Content-Type: text/plain; charset="UTF-8"

Hello,

thank for your reply. I'm use CTypes 0.11.3.
For now I wrote bindings via native OCaml mechanics and they work as for
x86 as with same cross-compiler x86-ARM suit, so it really seems as CTypes
issue.
I will try 0.11.4 version too.

WBR, ssp

2017-05-17 21:21 GMT+05:00 Jeremy Yallop <yallop@gmail.com>:

> On 12 May 2017 at 10:46, Serge Sivkov <ssp.mryau@gmail.com> wrote:
> > here is minimal example, which works without any problems on x86 and
> raises
> > CallToExpiredClosure on ARM:
> > https://github.com/mryau/ctypes-mintest
>
> Thanks for the example.  Which ctypes release are you using?  Could
> you give the latest (0.11.4) a try, if you haven't already?
>
> I didn't spot anything obviously wrong in your code, so if it's still
> broken on Arm with 0.11.4 it'd be good to have an issue open to track
> the problem (https://github.com/ocamllabs/ocaml-ctypes/issues).
>
> Kind regards,
>
> Jeremy
>

--001a1140610c249a5d05501ce513
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div><div><div>Hello,<br><br></div>thank for your reply. I=
&#39;m use CTypes 0.11.3.<br>For now I wrote bindings via native OCaml mech=
anics and they work as for x86 as with same cross-compiler x86-ARM suit, so=
 it really seems as CTypes issue.<br></div>I will try 0.11.4 version too.<b=
r><br></div>WBR, ssp<br></div><div class=3D"gmail_extra"><br><div class=3D"=
gmail_quote">2017-05-17 21:21 GMT+05:00 Jeremy Yallop <span dir=3D"ltr">&lt=
;<a href=3D"mailto:yallop@gmail.com" target=3D"_blank">yallop@gmail.com</a>=
&gt;</span>:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8e=
x;border-left:1px #ccc solid;padding-left:1ex"><span class=3D"">On 12 May 2=
017 at 10:46, Serge Sivkov &lt;<a href=3D"mailto:ssp.mryau@gmail.com">ssp.m=
ryau@gmail.com</a>&gt; wrote:<br>
&gt; here is minimal example, which works without any problems on x86 and r=
aises<br>
&gt; CallToExpiredClosure on ARM:<br>
&gt; <a href=3D"https://github.com/mryau/ctypes-mintest" rel=3D"noreferrer"=
 target=3D"_blank">https://github.com/mryau/<wbr>ctypes-mintest</a><br>
<br>
</span>Thanks for the example.=C2=A0 Which ctypes release are you using?=C2=
=A0 Could<br>
you give the latest (0.11.4) a try, if you haven&#39;t already?<br>
<br>
I didn&#39;t spot anything obviously wrong in your code, so if it&#39;s sti=
ll<br>
broken on Arm with 0.11.4 it&#39;d be good to have an issue open to track<b=
r>
the problem (<a href=3D"https://github.com/ocamllabs/ocaml-ctypes/issues" r=
el=3D"noreferrer" target=3D"_blank">https://github.com/ocamllabs/<wbr>ocaml=
-ctypes/issues</a>).<br>
<br>
Kind regards,<br>
<br>
Jeremy<br>
</blockquote></div><br></div>

--001a1140610c249a5d05501ce513--

From yallop@gmail.com  Tue May 23 11:21:26 2017
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-41.csi.cam.ac.uk (ppsw-41.csi.cam.ac.uk [131.111.8.141])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id D82CF3C1B8
 for <ctypes@lists.ocaml.org>; Tue, 23 May 2017 11:21:26 +0100 (BST)
X-Cam-SpamDetails: score -2.5 from SpamAssassin-3.4.1-1786853 
 * -2.8 RCVD_IN_MSPIKE_H2 RBL: Average reputation (+2)
 *      [209.85.220.176 listed in wl.mailspike.net]
 *  0.5 RCVD_IN_SORBS_SPAM RBL: SORBS: sender is a spam source
 *      [209.85.220.176 listed in dnsbl.sorbs.net]
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.220.176 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-qk0-f176.google.com ([209.85.220.176]:35299)
 by ppsw-41.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1dD7ep-0000Mr-Pv (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 23 May 2017 12:07:21 +0100
Received: by mail-qk0-f176.google.com with SMTP id a72so126971777qkj.2
 for <ctypes@lists.ocaml.org>; Tue, 23 May 2017 04:07:18 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:from:date:message-id:subject:to;
 bh=MH8BEPKSXIqWdrlMmrh48Y+QQa3l37PWkF4Jb/10VBo=;
 b=l2Bh2GVQxgAFo8JP/1B3+Q5sEJBr8etFoyPIzJebOnW+sOC32Ua90Q7rxbm5GFFoxO
 IPc5VNI6dVGftzffinUpl7QpkE/UYTdKWSdcm1qM6NQw1YJByq6CyoV3BGeJPYDBNI1O
 0C2atUxeh1T7IjTSaEDLJtGA/lXnUTWvctQxRS8t1aGR2pSYF0y1I8Hw/NKMwOWwrfhq
 0KpyQPLXxnC5z1PAoWqo3UNblWHLJW6AJiTklws6wTW5UvF7qgRTPimnlqsQUAhP29pX
 L6aJhzoHQHdgJ1wTgTvzKLNFw4LhJCq90+GwEnryPpy9zxB9dukRIE11jjfSaNG7zFAP
 dBHg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:from:date:message-id:subject:to;
 bh=MH8BEPKSXIqWdrlMmrh48Y+QQa3l37PWkF4Jb/10VBo=;
 b=Vbyaw+H/7aWUhCh47udST5xldSzAECoSUL/UVh4XphJQadgA6f1GJCHgvxO8NtoZ/Y
 qZRllxKtIfOAiNxJMCQtp74g/VhtaZaeWCz3Xp/Y2lrm5esjeChxA0gsv1mLjq+KQFFE
 LH5SWcnutNGCcohvJ0Qwjr2r204VEAkGb6ebWnTZfmxceYru8uDPKDjGbcRdQh0WdeK2
 jcbyY6ntcSGBKwJmpomU+DYDgu/+T9JIqw8kJhroJpcS5gsgm8IwqMIxL21A9nfTNq5C
 PRc76iisTfWw2T8kvqxBuURIB5xDW+HKBc0QW6/LM+YeoaBDPB8czj91BjR6sKtUjmqs
 +dCw==
X-Gm-Message-State: AODbwcDnAz/QqalrlMjEjIk0RB9VESED/OilBBc+mgfRZf1LNbHI7Y35
 4VKf5qcQpBJoQaB7XYRaOo4hpG5bjf42
X-Received: by 10.55.137.133 with SMTP id l127mr26538074qkd.251.1495537637724; 
 Tue, 23 May 2017 04:07:17 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.55.185.134 with HTTP; Tue, 23 May 2017 04:07:16 -0700 (PDT)
From: Jeremy Yallop <yallop@gmail.com>
Date: Tue, 23 May 2017 12:07:16 +0100
Message-ID: <CAAxsn=F3coiORfPS-2D1DUkUSODmj_37S8rd0vutu-+dQGLmPw@mail.gmail.com>
To: ctypes <ctypes@lists.ocaml.org>
Content-Type: text/plain; charset="UTF-8"
Subject: [ocaml-ctypes] ANN: ctypes 0.12.0
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 23 May 2017 10:21:26 -0000

I'm happy to announce a new release of ctypes, 0.12.0, available for
installation via OPAM.

Ctypes 0.12.0 contains a number of changes, some of which introduce
small incompatibilities with previous releases:

 * Support for Fortran-layout bigarrays

   Recently discussed here:
    http://lambda-diode.com/software/ocaml/scientific/fortran
    https://www.reddit.com/r/ocaml/comments/6azyv3/interfacing_fortran_with_ocaml/
    https://github.com/ocamllabs/ocaml-ctypes/issues/509

   The design is described here:
    https://github.com/ocamllabs/ocaml-ctypes/pull/523

 * Use the 'integers' package to provide signed and unsigned types

    https://github.com/ocamllabs/ocaml-ctypes/issues/446
    https://github.com/ocamllabs/ocaml-ctypes/pull/515

In both cases the types have changed slightly, but the behaviour is
unchanged, so code that continues to build with the new release should
be unaffected.

The release notes have further details of the changes in this release
and in recent point releases:

   https://github.com/ocamllabs/ocaml-ctypes/blob/0.12.0/CHANGES.md

From andre@digirati.com.br  Tue Dec 19 22:52:55 2017
Return-Path: <andre@digirati.com.br>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 89B6A3C31E
 for <ctypes@lists.ocaml.org>; Tue, 19 Dec 2017 22:52:55 +0000 (GMT)
X-Cam-SpamDetails: score -0.2 from SpamAssassin-3.4.1-1818643 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [187.73.32.185 listed in list.dnswl.dnsbl.ja.net]
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mta113.f1.k8.com.br ([187.73.32.185]:51182)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES256-GCM-SHA384:256)
 id 1eRQsV-00069Q-2F (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <andre@digirati.com.br>); Tue, 19 Dec 2017 23:00:53 +0000
Received: from [192.168.0.107] (fttx-177136151223.usr.predialnet.com.br
 [177.136.151.223])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
 (No client certificate requested)
 by smtpz.f1.k8.com.br (Postfix) with ESMTPSA id 7F73C80059
 for <ctypes@lists.ocaml.org>; Tue, 19 Dec 2017 23:00:41 +0000 (UTC)
X-DKIM: OpenDKIM Filter v2.6.8 smtpz.f1.k8.com.br 7F73C80059
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=digirati.com.br;
 s=default; t=1513724446;
 bh=0shlfaCIN9tGnp+pb9tHTEo9NZozHHNgneS27cDpt0E=;
 h=To:From:Subject:Date;
 b=YJFce1/3+0CKoQimPw64aTDyGXEtOEX/bFfOVx68MV1SXqjSwNNn6xq15W4HiEvpI
 SHix8vCMOVlpxj2xnH2Q/ztf23L4sWSVRCXJ7+LKW/4THgSUS2Rf6O546niGhTFqvK
 OBsnwRVuTR8wN4I5vM4rGvpBNLxkgQ+gMlNWtTfU=
To: ctypes <ctypes@lists.ocaml.org>
From: Andre Nathan <andre@digirati.com.br>
Message-ID: <12f7b334-d4de-85a8-d7b4-1eeb434289c3@digirati.com.br>
Date: Tue, 19 Dec 2017 21:00:35 -0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101
 Thunderbird/52.5.0
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Language: en-US
Content-Transfer-Encoding: 8bit
Subject: [ocaml-ctypes] Help with probable GC problem
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 19 Dec 2017 22:52:55 -0000

Hi

I've been trying to find a bug in my OCaml MariaDB bindings but haven't 
had any luck so I decided to try the list.

The issue is that after a few hundred runs, the username passed to the 
MariaDB connection function becomes garbled, failing with a message like

   Access denied for user 'x��P�'@'localhost' (using password: YES)

It seems like a memory value is being overwritten, or maybe claimed by 
the OCaml GC, although in the library I explicitly copy the username 
string, and libmariadb calls strdup() on it so I'm not sure that's the 
problem.

Since the library is very large, I created a branch with the minimal 
bindings to open and close a connection, so that inspection of the code 
becomes feasible:

   https://github.com/andrenth/ocaml-mariadb/tree/minimal

The example test code simply opens and closes the connection 50k times. 
It uses Unix.select to avoid dependencies, but the problem also happens 
with, say, Lwt.

In C, the library is used like this:

   int status;
   MYSQL mysql, *ret;

   status = mysql_real_connect_start(&ret, &mysql,
                                     "host", "user", "pass",
                                     NULL, 0, NULL, 0);
   while (status) {
     status = wait_for_mysql(&mysql, status);
     status = mysql_real_connect_cont(&ret, &mysql, status);
   }

   if (!ret)
     fatal(&mysql, "Failed to mysql_real_connect()");

The idea is to try to connect with the "start" function and keep trying 
until the socket is ready and "cont" function succeeds.

In OCaml, the bindings are as below:

   type mysql = unit ptr
   let mysql : mysql typ = ptr void

   type mysql_opt = unit ptr option
   let mysql_opt : mysql_opt typ = ptr_opt void

   let mysql_real_connect_start = foreign "mysql_real_connect_start"
     (ptr mysql_opt @-> mysql @-> ptr_opt char @-> ptr_opt char @->
      ptr_opt char @-> ptr_opt char @-> uint @-> ptr_opt char @->
      ulong @-> returning int)

   let mysql_real_connect_cont = foreign "mysql_real_connect_cont"
     (ptr mysql_opt @-> mysql @-> int @-> returning int)

Then there are wrappers for the two connect functions:

   let handle_ret f =
     let ret = allocate B.mysql_opt None in
     let status = f ret in
     (status, !@ret)

   let mysql_real_connect_start mysql host user pass db port sock flags =
     (* convert string option to char ptr option *)
     let host, user, pass, db, sock = ...
     let port = Unsigned.UInt.of_int port in
     let flags = Unsigned.ULong.of_int flags in
     handle_ret
       (fun ret ->
         B.mysql_real_connect_start
           ret mysql host user pass db port socket flags)

   let mysql_real_connect_cont mysql status =
     handle_ret (fun ret -> B.mysql_real_connect_cont ret mysql status)

To implement the start/wait/cont loop, I have the function below:

   let rec nonblocking mariadb (start, cont) =
     match start () with
     | `Ok v -> return (Ok v)
     | `Error e -> return (Error e)
     | `Wait status ->
         W.wait mariadb status >>= fun s ->
         nonblocking mariadb ((fun () -> cont status), cont)

Here W is a user-provided module that checks socket readiness.

Then two more wrappers to allow the connect start/cont functions to be 
used with "nonblocking":

   let handle_opt mariadb = function
     | 0, Some _ -> `Ok mariadb
     | 0, None -> `Error (error mariadb)
     | s, _ -> `Wait (Status.of_int s)

   let connect_start mariadb host user pass db port sock () =
     handle_opt mariadb
       (B.mysql_real_connect_start mariadb host user pass db port sock 0)

   let connect_cont mariadb status =
     handle_opt mariadb
       (B.mysql_real_connect_cont mariadb (Status.to_int status))

Collect both functions in a tuple:

   let connect mariadb ?host ?user ?pass ?db ?(port=0) ?socket () =
     let start = connect_start mariadb host user pass db port socket in
     let cont = connect_cont mariadb in
     (start, cont)

And finally the user-visible function, which passes the tuple to 
"nonblocking":

   let connect ?host ?user ?pass ?db ?(port=0) ?socket () =
     match init () with
     | Some m ->
         nonblocking m (connect m ?host ?user ?pass ?db ~port ?socket ())
     | None ->
         return (Error (2008, "out of memory"))

I'm not sure if any sort of obvious error can be spotted from all that 
above, but any help would be appreciated.

Thanks in advance,
Andre

From yallop@gmail.com  Tue Dec 19 23:47:21 2017
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 29E7E3C31E
 for <ctypes@lists.ocaml.org>; Tue, 19 Dec 2017 23:47:21 +0000 (GMT)
X-Cam-SpamDetails: score -0.2 from SpamAssassin-3.4.1-1818643 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.223.178 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H2 RBL: Average reputation (+2)
 *      [209.85.223.178 listed in wl.mailspike.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-io0-f178.google.com ([209.85.223.178]:39799)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1eRRjC-000W7X-0D (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 19 Dec 2017 23:55:19 +0000
Received: by mail-io0-f178.google.com with SMTP id g70so2870191ioj.6
 for <ctypes@lists.ocaml.org>; Tue, 19 Dec 2017 15:55:17 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc; bh=tofNcrSuVm4Rg598OVTI8rix/jWM/Qs4pALp/GS7Uwk=;
 b=n1+YpXbD6jFnSqgRqxj2LWeIVuGhv6pX30C+hQG339l7wYgQEVsTFpJtNZyNfqrKsQ
 ciI5Q58YYY3it8+jCk51MsOrvi9g82xG0okHpjXTsoLIdkC0L6avLzKw82WcElyF/6qv
 IAvS6PzBGtq4q1XbVc6HUnSnRtsdIII5LliCgGfT/99dMm/+ontPtvQDLneUKJFGQiUR
 KG9tTH4YOAyowmoo8cWnPBf9AlQRNu+1hpOu5PCg/AWOAuFUnZLW5v3yIYhgQl8iXupv
 wmLH0FCiuRG+3cjwqBjoFqBarNjS30UEyFyGeqGaLG2VyPjmaVL4N7rmK40RGYTddAV5
 P7Xg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc;
 bh=tofNcrSuVm4Rg598OVTI8rix/jWM/Qs4pALp/GS7Uwk=;
 b=oVDdS4P5esRW+Shm3AhDZQ7dQ1WgOMhQcoWc4xYjpJ2XkuMwVLxuUC+jaQh6cLXzBO
 /jx4isnuNpR1yWbUA28Q3OOTqYnGwUs+DqXD/CauDm6MfWuJ8ffOF7xfZZ2Lm66W5bwa
 vykoKrXW+LxCOFW07AcaDDoXBk0gW4hx1kAS3kNcEiOBLWEJ2GYiQhvGb/amBGYYr6QI
 tQLppaZwg/oL6FrS38qs9NGFMZVVmv3z8rI4K6WY2bkVw9JXaFPYhryTdiJ4KHXMseFS
 0XTZ0vqJ5e+XRmm+h8y6RAH/mXI4vc9Gq3j7Mg1tH4n6tAzWjDZjnpIJgJ3iBXmxqfUf
 kwKw==
X-Gm-Message-State: AKGB3mIsoyJ3A/S0dgaz63/8OKdMgxRdCNsysl7YkZrkOZnzkfeyQoz1
 XknE8EioyJrmYzPgiczNMVa2W3d6Ymx2CwyR62A=
X-Google-Smtp-Source: ACJfBot69rmXbD29C4rHXnqN/YG0877WYptbR+cm8H5vLBnEGWjFuJoLABvvlUivpq4XY0Jyn/xwDQiQfTDxsKKpNtI=
X-Received: by 10.107.174.147 with SMTP id n19mr6152412ioo.131.1513727716654; 
 Tue, 19 Dec 2017 15:55:16 -0800 (PST)
MIME-Version: 1.0
Received: by 10.79.202.4 with HTTP; Tue, 19 Dec 2017 15:55:15 -0800 (PST)
In-Reply-To: <12f7b334-d4de-85a8-d7b4-1eeb434289c3@digirati.com.br>
References: <12f7b334-d4de-85a8-d7b4-1eeb434289c3@digirati.com.br>
From: Jeremy Yallop <yallop@gmail.com>
Date: Tue, 19 Dec 2017 23:55:15 +0000
Message-ID: <CAAxsn=FSMkNiWsLsEEnLm_FFMBqiAtteLaaTrrfbAPiA78FtCg@mail.gmail.com>
To: Andre Nathan <andre@digirati.com.br>
Content-Type: text/plain; charset="UTF-8"
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Help with probable GC problem
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 19 Dec 2017 23:47:21 -0000

Dear Andre,

On 19 December 2017 at 23:00, Andre Nathan <andre@digirati.com.br> wrote:
> It seems like a memory value is being overwritten, or maybe claimed by the
> OCaml GC, although in the library I explicitly copy the username string, and
> libmariadb calls strdup() on it so I'm not sure that's the problem.
>
> Since the library is very large, I created a branch with the minimal
> bindings to open and close a connection, so that inspection of the code
> becomes feasible:
>
>   https://github.com/andrenth/ocaml-mariadb/tree/minimal

Thanks for the clear explanation and reproduction case.  I think that
your diagnosis is correct

It appears that the problem arises from the nonblocking nature of the
code.  When a program creates a block of memory using Ctypes.allocate,
like this

    let user = allocate ...

ctypes ensures the memory is not freed so long as 'user' is reachable.
Additionally, if 'user' is passed to a C function then ctypes ensures
that the memory is not freed for the duration of the function call.

However, in the MariaDB bindings 'user' appears to be accessed by
MariaDB after the C function it's passed to returns.  More concretely,
the pointer is passed into C like this:

    let user = allocate ... in
    ...
    B.mysql_real_connect_start ret mysql host user pass db port socket flags

and then mysql_real_connect_start keeps a reference to 'user' and
returns immediately.  Since OCaml/ctypes can no longer see any uses of
'user', the memory is assumed to be no longer needed and so it's
reclaimed by the GC.  However, MariaDB still has a reference (that it
later accesses asynchronously) which is unsafe to use after the GC
reclaims the memory.

If the above is correct then there are at least two solutions.  You
could ensure somehow that 'user' and other such pointers are kept
around on the OCaml side until the associated memory is no longer
needed by MariaDB.  Or you could switch from 'allocate' to a
malloc/free style arrangement to avoid the automatic collection
altogether.

There's a bit of guesswork involved in the above, so please follow up
if it doesn't fix the problem for you!

Kind regards,

Jeremy

PS You may find ocaml-memcpy (https://github.com/yallop/ocaml-memcpy)
a useful alternative to char_ptr_buffer_of_string for copying strings
between OCaml and C memory.

From andre@digirati.com.br  Wed Dec 20 01:13:19 2017
Return-Path: <andre@digirati.com.br>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 198EA3C31E
 for <ctypes@lists.ocaml.org>; Wed, 20 Dec 2017 01:13:19 +0000 (GMT)
X-Cam-SpamDetails: score -0.2 from SpamAssassin-3.4.1-1818643 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [187.73.32.186 listed in list.dnswl.dnsbl.ja.net]
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mta114.f1.k8.com.br ([187.73.32.186]:56286)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES256-GCM-SHA384:256)
 id 1eRT4N-000AUz-2E (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <andre@digirati.com.br>); Wed, 20 Dec 2017 01:21:17 +0000
Received: from [192.168.0.107] (fttx-177136151223.usr.predialnet.com.br
 [177.136.151.223])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
 (No client certificate requested)
 by smtpz.f1.k8.com.br (Postfix) with ESMTPSA id A9C4420049;
 Wed, 20 Dec 2017 01:21:10 +0000 (UTC)
X-DKIM: OpenDKIM Filter v2.6.8 smtpz.f1.k8.com.br A9C4420049
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=digirati.com.br;
 s=default; t=1513732870;
 bh=dHv8dIqlTsLp0LmwuQIphuHEcn9WQfkSuIfsnnXvYa8=;
 h=Subject:To:Cc:References:From:Date:In-Reply-To;
 b=fVTjPx0Ygr1yUHoLHn12jWb6KUPgrayGxdhUQpPykkebejj06m0gQViGs+4syjweZ
 jA8kM+f+5YoQUMhRFDyDbzPmmvfBAVixO179A206xgOY+RgGAzOvUzxMQFGx9/ZZXL
 NofQmml3pBRJ/tI0S6ZONqSD3hCkNEM/xWLA41XA=
To: Jeremy Yallop <yallop@gmail.com>
References: <12f7b334-d4de-85a8-d7b4-1eeb434289c3@digirati.com.br>
 <CAAxsn=FSMkNiWsLsEEnLm_FFMBqiAtteLaaTrrfbAPiA78FtCg@mail.gmail.com>
From: Andre Nathan <andre@digirati.com.br>
Message-ID: <1d6dd742-6e39-30d6-0345-ae339f6375bb@digirati.com.br>
Date: Tue, 19 Dec 2017 23:21:09 -0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101
 Thunderbird/52.5.0
MIME-Version: 1.0
In-Reply-To: <CAAxsn=FSMkNiWsLsEEnLm_FFMBqiAtteLaaTrrfbAPiA78FtCg@mail.gmail.com>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Language: en-US
Content-Transfer-Encoding: 7bit
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Help with probable GC problem
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 20 Dec 2017 01:13:19 -0000

Jeremy, it appears you are right, as usual.

I've replace my type definition:

   type 'm connection = B.mysql

with

   type 'm connection =
     { handle : B.mysql
     ; host   : char Ctypes.ptr option
     ; port   : int
     ; user   : char Ctypes.ptr option
     ; pass   : char Ctypes.ptr option
     ; db     : char Ctypes.ptr option
     ; socket : char Ctypes.ptr option
     }

and that made the error disappear (initially the record only had a field 
for the user, which caused and error on the password, then on the db 
name, etc. which I guess confirms your diagnosis). The port is there 
only for completeness.

Tomorrow I'll make the fix in the real library code.

Regarding ocaml-memcpy, would it have the same effect in this case if I 
replaced the "ptr_opt char" parameters in the binding specifications 
with just "string", thus letting ctypes make the copy? In that case, 
would I still need to keep a reference to the strings on the OCaml side?

Cheers, and thanks a lot,
Andre


On 12/19/2017 09:55 PM, Jeremy Yallop wrote:
> Dear Andre,
> 
> On 19 December 2017 at 23:00, Andre Nathan <andre@digirati.com.br> wrote:
>> It seems like a memory value is being overwritten, or maybe claimed by the
>> OCaml GC, although in the library I explicitly copy the username string, and
>> libmariadb calls strdup() on it so I'm not sure that's the problem.
>>
>> Since the library is very large, I created a branch with the minimal
>> bindings to open and close a connection, so that inspection of the code
>> becomes feasible:
>>
>>    https://github.com/andrenth/ocaml-mariadb/tree/minimal
> 
> Thanks for the clear explanation and reproduction case.  I think that
> your diagnosis is correct
> 
> It appears that the problem arises from the nonblocking nature of the
> code.  When a program creates a block of memory using Ctypes.allocate,
> like this
> 
>      let user = allocate ...
> 
> ctypes ensures the memory is not freed so long as 'user' is reachable.
> Additionally, if 'user' is passed to a C function then ctypes ensures
> that the memory is not freed for the duration of the function call.
> 
> However, in the MariaDB bindings 'user' appears to be accessed by
> MariaDB after the C function it's passed to returns.  More concretely,
> the pointer is passed into C like this:
> 
>      let user = allocate ... in
>      ...
>      B.mysql_real_connect_start ret mysql host user pass db port socket flags
> 
> and then mysql_real_connect_start keeps a reference to 'user' and
> returns immediately.  Since OCaml/ctypes can no longer see any uses of
> 'user', the memory is assumed to be no longer needed and so it's
> reclaimed by the GC.  However, MariaDB still has a reference (that it
> later accesses asynchronously) which is unsafe to use after the GC
> reclaims the memory.
> 
> If the above is correct then there are at least two solutions.  You
> could ensure somehow that 'user' and other such pointers are kept
> around on the OCaml side until the associated memory is no longer
> needed by MariaDB.  Or you could switch from 'allocate' to a
> malloc/free style arrangement to avoid the automatic collection
> altogether.
> 
> There's a bit of guesswork involved in the above, so please follow up
> if it doesn't fix the problem for you!
> 
> Kind regards,
> 
> Jeremy
> 
> PS You may find ocaml-memcpy (https://github.com/yallop/ocaml-memcpy)
> a useful alternative to char_ptr_buffer_of_string for copying strings
> between OCaml and C memory.
> 

From yallop@gmail.com  Thu Dec 21 23:41:15 2017
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 25E513C1AF
 for <ctypes@lists.ocaml.org>; Thu, 21 Dec 2017 23:41:15 +0000 (GMT)
X-Cam-SpamDetails: score -0.2 from SpamAssassin-3.4.1-1818891 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.223.177 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H2 RBL: Average reputation (+2)
 *      [209.85.223.177 listed in wl.mailspike.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-io0-f177.google.com ([209.85.223.177]:45217)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1eSAaU-000Khb-97 (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Thu, 21 Dec 2017 23:49:19 +0000
Received: by mail-io0-f177.google.com with SMTP id e204so22801217iof.12
 for <ctypes@lists.ocaml.org>; Thu, 21 Dec 2017 15:49:18 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc; bh=vL0eYMrZFVgPNpcJCTJooexja3hH93w4R4fzCEBG+JE=;
 b=L473QE3U65t/Tw8kARO5RsbZgCbFQ6TqNdRGHtBwGEh7Tu9mGCYBo/kTsv1O2Rn+/1
 LIVE/HO0X08/OOA2l4fmQAJGVq+uSIDnCosK1yaq6Tz72YbkMe4/yddRS1kaOFAmn80R
 jJ9aiCj0WKNS705Z5sidEIqL8uOQj96jDIzt+gbNYluS3WXHHlrcrn4xNXoorNZNiq2s
 7WtcS6CB7AcGyY1kgR/G8MfiqLOrHnU034wUHTjm7F7WjAARIt6wT5ARwQINy/UfqcO/
 HfgYP5IFF1fktzr0ct/gmLQKmW0TQM/K15z8MYRkKQSaFV4EruXJHhdjmH6rJlXWnX+K
 ILdw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc;
 bh=vL0eYMrZFVgPNpcJCTJooexja3hH93w4R4fzCEBG+JE=;
 b=nxvv4GB5reU8uqdE4IYWVBy5sJTCBuby03oWb/w8Owtm8TlnVG6QP69JheOzcA2vhI
 E36DFfKeWLjfkTOZ4BeVsVxumnOjKsr+YDEpVwUZi1oGcCC8bHkEAJY1y2nR6Myt8XiU
 n7AE3yyEaPf734OPW18gLskrngUDsKAMJl+C+tAePj6YRSiQeG3tAwdhZtMWpbU13Xv0
 E9sdfH4rOPhy8mNXE03IyyhO48l600SQ/ClYBY2h2AKlIQ+dfuDLcDtT7jVPCp0N+Qvt
 EGI6U3jEtCVaIuPEIAWMp1JIcEFLBNp1pdaoV8aPNzdmIqRNvuG8r1X/TmTcTXmQpJYm
 FbYg==
X-Gm-Message-State: AKGB3mIMGnMfGvbYIZKcvU1Hag+IF/Y128mjdAJQh4mLjCGFJM0CLERC
 qgvzPih6ct32Brih0hel1G0vxrPiImgl3ka21StDAg==
X-Google-Smtp-Source: ACJfBovW0Sm5dNM1SP02Ok3Y8UVB1iafnG3px2B1kkRNjPIpy9ect7GZOFN+Qv8tKTIkvucMXU7LraM3J6HwqBbD5M0=
X-Received: by 10.107.129.200 with SMTP id l69mr13766756ioi.158.1513900157497; 
 Thu, 21 Dec 2017 15:49:17 -0800 (PST)
MIME-Version: 1.0
Received: by 10.79.202.4 with HTTP; Thu, 21 Dec 2017 15:49:16 -0800 (PST)
In-Reply-To: <1d6dd742-6e39-30d6-0345-ae339f6375bb@digirati.com.br>
References: <12f7b334-d4de-85a8-d7b4-1eeb434289c3@digirati.com.br>
 <CAAxsn=FSMkNiWsLsEEnLm_FFMBqiAtteLaaTrrfbAPiA78FtCg@mail.gmail.com>
 <1d6dd742-6e39-30d6-0345-ae339f6375bb@digirati.com.br>
From: Jeremy Yallop <yallop@gmail.com>
Date: Thu, 21 Dec 2017 23:49:16 +0000
Message-ID: <CAAxsn=FJUa=x0VKG4KEaCeHmbOUeybhwG+BeR=yLur+HdE0A9Q@mail.gmail.com>
To: Andre Nathan <andre@digirati.com.br>
Content-Type: text/plain; charset="UTF-8"
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Help with probable GC problem
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 21 Dec 2017 23:41:15 -0000

On 20 December 2017 at 01:21, Andre Nathan <andre@digirati.com.br> wrote:
> Regarding ocaml-memcpy, would it have the same effect in this case if I
> replaced the "ptr_opt char" parameters in the binding specifications with
> just "string", thus letting ctypes make the copy? In that case, would I
> still need to keep a reference to the strings on the OCaml side?

At the moment, no: if you use a string view ctypes will not keep the
copy alive beyond the lifetime of the C call.

But tying the lifetimes of the string and the copy together is a
reasonable idea, and would match the behaviour of 'funptr', where
keeping an OCaml function alive does keep the corresponding C function
pointer alive.  I've opened an issue to discuss/track the possibility
of changing the behaviour:
https://github.com/ocamllabs/ocaml-ctypes/issues/556

From skaller@internode.on.net  Mon Dec 25 21:36:48 2017
Return-Path: <skaller@internode.on.net>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 57E093C489
 for <ctypes@lists.ocaml.org>; Mon, 25 Dec 2017 21:36:48 +0000 (GMT)
X-Cam-SpamDetails: score -0.8 from SpamAssassin-3.4.1-1819233 
 * -0.0 T_RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [150.101.137.131 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [150.101.137.131 listed in wl.mailspike.net]
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from ipmail07.adl2.internode.on.net ([150.101.137.131]:28633)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1eTaYT-000vnA-0R (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <skaller@internode.on.net>); Mon, 25 Dec 2017 21:45:06 +0000
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A2DBAADh299ZAOxTwzENURoBAQEBAgEBAQEIAQEBAYRBgRWDepxAl0glhR0BhRoBAgEBAQEBAg8BEyGGFoELAiYCcrUla4Ini0gBJYEOgh+FQiuCSgaGAIJHL4IyBaFEgW2FcaAckjGEc4FlgQMKWwGCdIITHIF7YotXAQEB
Received: from pa49-195-83-236.pa.nsw.optusnet.com.au (HELO [192.168.8.100])
 ([49.195.83.236])
 by ipmail07.adl2.internode.on.net with ESMTP; 26 Dec 2017 08:14:59 +1030
From: john skaller <skaller@internode.on.net>
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable
Mime-Version: 1.0 (Mac OS X Mail 10.1 \(3251\))
Message-Id: <1A47B410-EF50-455C-B549-3CF320C33469@internode.on.net>
Date: Tue, 26 Dec 2017 08:44:57 +1100
To: ctypes@lists.ocaml.org
X-Mailer: Apple Mail (2.3251)
X-Mailman-Approved-At: Mon, 25 Dec 2017 21:44:26 +0000
Subject: [ocaml-ctypes] Help with strings
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 25 Dec 2017 21:36:48 -0000

Hi!

I have not been able to understand well enough how the
memory management protocols work.

In C, there is a problem that pointed at objects, especially char*
and char** are used as parameters and return values but the
type does not specify ownership. This has to be done in comments.

The method of binding is different. For example

	char const *get_version();
	char *get_buffer();
	char *strdup(char *);


The first function returns a pointer to an immutable global object.
The second to a mutable part of a buffer.
The third to a freshly malloc()ed copy of a NTBS.

Also, strdup is accepting a string argument which it does not own
so the caller must free it if the caller allocated it. The return value
belongs to the caller so must be freed.

Obviously =E2=80=9Creturning string=E2=80=9D Ctypes spec is not going to =
work for
all three of these return types and it isn=E2=80=99t clear how =
=E2=80=9Cstring=E2=80=9D
works for the strdup argument. The string would be invisible to
the Ocaml caller, so how does it get freed? Ctypes can=E2=80=99t know
when to free it.=20

Here=E2=80=99s another example:

	memcpy (a,b,n)

which returns a copy of b, the output buffer pointer. And another

	void add_opt (char **, char*)

which adds the second argument to an array of NTBS (terminated
by a NULL pointer).

C types had better not delete the argument char* it creates for a string
argument, but on the other hand, the client CANNOT delete it because
it is hidden. Either we get a crash or a leak.

So roughly, if you wanted to do it right, Ctypes =E2=80=9Ctype=E2=80=9D =
system is inadequate.
The =E2=80=9Ctypes=E2=80=9D must contain mutablility and ownership =
information.
For example

	immutable_lend_noincrementable_nonnull_pointer_char


is better, but STILL not enough to ensure that a char const * passed to
a function can be freed after Ctypes creates a copy of the Ocaml string
contents (because the candidate function could return the pointer).

Basically the programmer has to tell Ctypes the access method of
every (non-scalar) object.=20

Of course I can do that by passing a char ptr manually created
(C types can do that I think), copying Ocaml string contents manually
(how?), and then manually free-ing it (C types can do that?)

So roughly .. when is it safe to use =E2=80=9Cstring=E2=80=9D?
At the moment the answer for me is =E2=80=9Cnever=E2=80=9D because I =
don=E2=80=99t understand the
memory management protocol.


=E2=80=94
john skaller
skaller@users.sourceforge.net
http://felix-lang.org


From yallop@gmail.com  Tue Dec 26 22:56:12 2017
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-43.csi.cam.ac.uk (ppsw-43.csi.cam.ac.uk [131.111.8.143])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 9341E3C238
 for <ctypes@lists.ocaml.org>; Tue, 26 Dec 2017 22:56:12 +0000 (GMT)
X-Cam-SpamDetails: score -0.2 from SpamAssassin-3.4.1-1819277 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.214.47 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [209.85.214.47 listed in wl.mailspike.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-it0-f47.google.com ([209.85.214.47]:43910)
 by ppsw-43.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1eTyGv-00066p-n9 (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Tue, 26 Dec 2017 23:04:34 +0000
Received: by mail-it0-f47.google.com with SMTP id u62so23545454ita.2
 for <ctypes@lists.ocaml.org>; Tue, 26 Dec 2017 15:04:33 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc:content-transfer-encoding;
 bh=WKTMDXNFfroNBQ9LA6lpIFR3CLMt93/x4EPXTiHnGBE=;
 b=CZAhaONiOl2dwjZ/EyTjAvSPXVw4C6VqcRKddoJnVeM4VRHy/VIoVLMamWfazXs1G/
 x9Qwdl48mdmY3Nvb9tRM1ujq4HmLt7Y9GjvEzQUBy/f9TzZJ0I3qs4t7gTvNQkc87unR
 OOzts/AF7KV70kbhOnnKhJNFeq2AdU5rnuXpAiEdI2yyGrS9POhNJXgt/q+78zesF9sr
 vA3to0sTCUZemV7NFEMr2FQOFesf1HrDCxd+hgEaWd2gpD/r7RJ2oVl9YkmVLiKUHg9F
 gi8+Y23MPxvEJVjPAkh5uQ3JBlsJW088ZxHEZ0Ap1AFIlMLs67fc82CmRPoiSviZdCZM
 R5Ig==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc:content-transfer-encoding;
 bh=WKTMDXNFfroNBQ9LA6lpIFR3CLMt93/x4EPXTiHnGBE=;
 b=d0AoJ7QlcmgiBRHc1hnBr+/rzpobyEEcbAXqeJO79efNEKbqnBUH1OFzssZzQjUQZy
 bDgjbQA1hfpZh5L4rp/H6txM3/kLaDu1t6yGYSrqT7n+IbY0vrgIyMcTuurwbEkBG1Gh
 Mx4Bt4EfU5Ng0W/+X+o30KFA6qk8vSEL5qvW6YFLhl4ItsHhs6iA6N+kh0DROycdeXf6
 2AkwnghX/j9TxkfMX4zNmKEpYX0vrgZN2L2zYWbbSoyq+zPuiO9/danYoqpRnLeJXCYE
 GktNkJncXYefcwMPYKLjoylQoedrtNYVMh8U6haPH7W/DFJXzo6jiAYOBbzZ4kNAsGJI
 Nb4w==
X-Gm-Message-State: AKGB3mIOqdGOYXRO285roWSwslTy8nVQbgamlHGMvn3bQvbHayPxz/EC
 RWhtAsuoKzlxy2sXVSEOQ2dSHHufueJOAI/FPxg=
X-Google-Smtp-Source: ACJfBotx39trayDhsnMURDgfSR9eXZHh0PSxskIU7lgqbFyJ6HmYCaCQCw2rMw6d+9LijrbkeeL/p32m1a4vG7w+pts=
X-Received: by 10.36.253.137 with SMTP id m131mr33912690ith.16.1514329471951; 
 Tue, 26 Dec 2017 15:04:31 -0800 (PST)
MIME-Version: 1.0
Received: by 10.79.202.4 with HTTP; Tue, 26 Dec 2017 15:04:30 -0800 (PST)
In-Reply-To: <1A47B410-EF50-455C-B549-3CF320C33469@internode.on.net>
References: <1A47B410-EF50-455C-B549-3CF320C33469@internode.on.net>
From: Jeremy Yallop <yallop@gmail.com>
Date: Tue, 26 Dec 2017 23:04:30 +0000
Message-ID: <CAAxsn=FikaVsQhv9P63za6WNXXPT-6JoCJogtKH1fmduOXTh+Q@mail.gmail.com>
To: john skaller <skaller@internode.on.net>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Help with strings
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 26 Dec 2017 22:56:12 -0000

Dear John,

On 25/12/2017, john skaller <skaller@internode.on.net> wrote:
> So roughly .. when is it safe to use =E2=80=9Cstring=E2=80=9D?
> At the moment the answer for me is =E2=80=9Cnever=E2=80=9D because I don=
=E2=80=99t understand the
> memory management protocol.

It works like this:

  * passing a string using 'string' makes a copy in either direction.
Furthermore,

    - the copy created when passing a string from OCaml to C lives for
the lifetime of the C call.
      (It's possible this will be strengthened in the future:
https://github.com/ocamllabs/ocaml-ctypes/issues/556)

    - the copy created when passing a string from C to OCaml is a
regular OCaml string, subject to usual GC behaviour.  Ctypes makes no
attempt to deallocate the memory used by the original C string.

So, for your three examples

>         char const *get_version();
>         char *get_buffer();
>         char *strdup(char *);
>
>
> The first function returns a pointer to an immutable global object.

It's fine, and probably the best choice, to use 'string' for
'get_version'.  Each call to the function will create a fresh OCaml
string.

> The second to a mutable part of a buffer.

Mutability means that it's probably not useful to use `string` here,
since 'string' will create a copy that won't track changes.  It would
be better to write

   let get_buffer =3D foreign "get_buffer"
      (void @-> returning (ptr char))

> The third to a freshly malloc()ed copy of a NTBS.

Here 'string' is not the right thing for the *return type*, since (as
you say) it prevents access to the pointer needed to free the returned
memory.  Again, 'ptr char' is probably the best starting point.  On
the other hand, 'string' is a reasonable choice for the *argument*,
since Ctypes will automatically deallocate the copy of the string
after the call.  So the following binding is reasonable:

    let strdup =3D foreign "strdup"
      (string @-> returning (ptr char))

In this case it's possible to do a little better.  The 'ocaml_string'
type description is an alternative to 'string' that avoids the copy:

    let strdup =3D foreign "strdup"
      (ocaml_string @-> returning (ptr char))

In the general case, where the C function can call back into OCaml,
'ocaml_string' is not safe.  But it's safe in the common (first-order)
case, which includes 'strdup'.

> So roughly, if you wanted to do it right, Ctypes =E2=80=9Ctype=E2=80=9D s=
ystem is inadequate.
> The =E2=80=9Ctypes=E2=80=9D must contain mutablility and ownership inform=
ation.
> For example
>
>         immutable_lend_noincrementable_nonnull_pointer_char

You're quite right, both that Ctypes doesn't capture these properties
in the type system, and that it's quite challenging to do so, since C
is so flexible.  (For example, the 'realpath' function can return
either a malloc-allocated buffer or a caller-supplied buffer,
depending on the value of its second argument!)

Regarding mutability, the 4.06.0 release of OCaml distinguishes
mutable from immutable strings.  When Ctypes drops support for older
OCaml versions it's likely that string mutability will be more clearly
marked in Ctypes bindings, too.

> Of course I can do that by passing a char ptr manually created
> (C types can do that I think),

Indeed (see above).

> copying Ocaml string contents manually (how?),

A quick way is to use the 'coerce' function, which can convert between
'ptr char' and 'string' because 'string' is a view for 'ptr char'.
Here's an example using the 'strdup' binding above.

    # let p =3D strdup "hello, world";;
    val p : char Ctypes_static.ptr =3D (char*) 0x5601c2a90130
    # coerce (ptr char) string p;;
    - : string =3D "hello, world"

More generally the 'ocaml-memcpy' package provides functions that can
copy between several different representations
(https://github.com/yallop/ocaml-memcpy).

> and then manually free-ing it (C types can do that?)

A simple way is to bind 'free'!  Here's an example, freeing the memory
returned from the call to 'strdup' above.

    # let free =3D foreign "free" (ptr char @-> returning void);;
    val free : char Ctypes_static.ptr -> unit =3D <fun>
    # free p;;
    - : unit =3D ()

Kind regards,

Jeremy

From skaller@internode.on.net  Tue Dec 26 23:37:09 2017
Return-Path: <skaller@internode.on.net>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id A5E493C238
 for <ctypes@lists.ocaml.org>; Tue, 26 Dec 2017 23:37:09 +0000 (GMT)
X-Cam-SpamDetails: score -0.8 from SpamAssassin-3.4.1-1819277 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [150.101.137.141 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 T_RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from ipmail03.adl2.internode.on.net ([150.101.137.141]:6371)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1eTyuX-000UOK-0h (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <skaller@internode.on.net>); Tue, 26 Dec 2017 23:45:31 +0000
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A2CSAABr3kJaAOxTwzENTxkBAQEBAQEBA?=
 =?us-ascii?q?QEBAQEHAQEBAQGEJIEbhAabO32ICo42ggEthRgChRcUAQEBAQEBAQEBDwETIYV?=
 =?us-ascii?q?yAQEBAQIBIwRSBQsJAhgCAiYCAiE2BhOKFgMNGIkvnH9ugW06hzQNgw4BAQEBA?=
 =?us-ascii?q?QEBAQIBAQEBAQEBAQEBAR2BD4J9hVEpgXdYNoJrRAGBNgUBEgELFIMXMYI0BZl?=
 =?us-ascii?q?hiS49iAODc4RBhxWGFotQjSQ+hVyFATaBAm96CmcBgX4JNoISAxyBe2SHdg6CO?=
 =?us-ascii?q?wEBAQ?=
Received: from pa49-195-83-236.pa.nsw.optusnet.com.au (HELO [192.168.8.100])
 ([49.195.83.236])
 by ipmail03.adl2.internode.on.net with ESMTP; 27 Dec 2017 10:15:23 +1030
Content-Type: text/plain; charset=utf-8
Mime-Version: 1.0 (Mac OS X Mail 10.1 \(3251\))
From: john skaller <skaller@internode.on.net>
In-Reply-To: <CAAxsn=FikaVsQhv9P63za6WNXXPT-6JoCJogtKH1fmduOXTh+Q@mail.gmail.com>
Date: Wed, 27 Dec 2017 10:45:23 +1100
Content-Transfer-Encoding: quoted-printable
Message-Id: <57BB673D-C1F1-42EA-8B65-6DF54E290E88@internode.on.net>
References: <1A47B410-EF50-455C-B549-3CF320C33469@internode.on.net>
 <CAAxsn=FikaVsQhv9P63za6WNXXPT-6JoCJogtKH1fmduOXTh+Q@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
X-Mailer: Apple Mail (2.3251)
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Help with strings
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 26 Dec 2017 23:37:09 -0000


> On 27 Dec. 2017, at 10:04, Jeremy Yallop <yallop@gmail.com> wrote:
>=20
> Dear John,

Hi! Sorry for the email mixuo, i=E2=80=99m subscribed twice now,
once at sourceforge and once at internode.

I have another question: what=E2=80=99s the best way to bind an =
=E2=80=9Cenum=E2=80=9D?
If the codes are sequential is there a builtin way to map the enum
into an Ocaml variant?

I guess that would use a ppx thing=E2=80=A6

> I have another question: what=E2=80=99s the best way to bind an =
=E2=80=9Cenum=E2=80=9D?
> If the codes are sequential is there a builtin way to map the enum
> into an Ocaml variant?
>=20
>=20
> On 25/12/2017, john skaller <skaller@internode.on.net> wrote:
>> So roughly .. when is it safe to use =E2=80=9Cstring=E2=80=9D?
>> At the moment the answer for me is =E2=80=9Cnever=E2=80=9D because I =
don=E2=80=99t understand the
>> memory management protocol.
>=20
> It works like this:
>=20
>  * passing a string using 'string' makes a copy in either direction.
> Furthermore,
>=20
>    - the copy created when passing a string from OCaml to C lives for
> the lifetime of the C call.
>      (It's possible this will be strengthened in the future:
> https://github.com/ocamllabs/ocaml-ctypes/issues/556)
>=20
>    - the copy created when passing a string from C to OCaml is a
> regular OCaml string, subject to usual GC behaviour.  Ctypes makes no
> attempt to deallocate the memory used by the original C string.

Right, thanks! That=E2=80=99s a definite spec, perhaps please you could =
add those
comments to the documentation?


>=20
> So, for your three examples
>=20
>>        char const *get_version();
>>        char *get_buffer();
>>        char *strdup(char *);
>>=20
>>=20
>> The first function returns a pointer to an immutable global object.
>=20
> It's fine, and probably the best choice, to use 'string' for
> 'get_version'.  Each call to the function will create a fresh OCaml
> string.

Heh .. happily that=E2=80=99s the one function I have actually =
implemented and tested.

>=20
>> The second to a mutable part of a buffer.
>=20
> Mutability means that it's probably not useful to use `string` here,
> since 'string' will create a copy that won't track changes.  It would
> be better to write
>=20
>   let get_buffer =3D foreign "get_buffer"
>      (void @-> returning (ptr char))

Gotcha!

>=20
>> The third to a freshly malloc()ed copy of a NTBS.
>=20
> Here 'string' is not the right thing for the *return type*, since (as
> you say) it prevents access to the pointer needed to free the returned
> memory.  Again, 'ptr char' is probably the best starting point.  On
> the other hand, =E2=80=98string' is a reasonable choice for the =
*argument*,

Right.

I may have some more questions, hope you don=E2=80=99t mind.
Perhaps the answers will be useful to others starting out.

BTW: some of the code appears in  several places.
Why is that?
(Ctypes vs Ctypes_types.TYPE)


> since Ctypes will automatically deallocate the copy of the string
> after the call.  So the following binding is reasonable:
>=20
>    let strdup =3D foreign "strdup"
>      (string @-> returning (ptr char))
>=20
> In this case it's possible to do a little better.  The 'ocaml_string'
> type description is an alternative to 'string' that avoids the copy:
>=20
>    let strdup =3D foreign "strdup"
>      (ocaml_string @-> returning (ptr char))
>=20
> In the general case, where the C function can call back into OCaml,
> 'ocaml_string' is not safe.  But it's safe in the common (first-order)
> case, which includes =E2=80=98strdup'.

Ok, so that=E2=80=99s a pointer to the live Ocaml string, and we=E2=80=99r=
e relying
on the string not being modified or moved during the C call.

Current rules say Ocaml strings are immutable, use bytes instead.
However, if several threads are running, normally Ocaml is using
a global lock to serialise them. However the lock is normally
released when calling C code. That would not be safe in this
case, using ocaml_string, so presumably in this case the lock
is not released. Is that correct?


>=20
>> So roughly, if you wanted to do it right, Ctypes =E2=80=9Ctype=E2=80=9D=
 system is inadequate.
>> The =E2=80=9Ctypes=E2=80=9D must contain mutablility and ownership =
information.
>> For example
>>=20
>>        immutable_lend_noincrementable_nonnull_pointer_char
>=20
> You're quite right, both that Ctypes doesn't capture these properties
> in the type system, and that it's quite challenging to do so, since C
> is so flexible.  (For example, the 'realpath' function can return
> either a malloc-allocated buffer or a caller-supplied buffer,
> depending on the value of its second argument!)

Yeah. And what=E2=80=99s worse is that many libraries describe =
functionality
in the documentation and fail to describe the =E2=80=9Cownership=E2=80=9D =
rules.
Ctypes could do with a bit more of that IMHO.

EG:

val string : string typ
=E2=80=A6
=E2=80=9CTo avoid problems with the garbage collector, values passed =
using Ctypes_types.TYPE.string=20
are copied into immovable C-managed storage before being passed to C.=E2=80=
=9D

That would best contain your explanation above regarding lifetimes.
It reads like =E2=80=9Cyou just leaked the copy=E2=80=9D since =E2=80=9CC =
managed store=E2=80=9D means
the C heap and malloc(), which requires a called to free() which isn=E2=80=
=99t
what happens.

>=20
> Regarding mutability, the 4.06.0 release of OCaml distinguishes
> mutable from immutable strings.  When Ctypes drops support for older
> OCaml versions it's likely that string mutability will be more clearly
> marked in Ctypes bindings, too.

I=E2=80=99m using 4.05 at the moment and already you get a complaint
using mutabile operations on string instead of bytes.
[IMHO the way of doing this changes was poorly thought out]

>=20
>> Of course I can do that by passing a char ptr manually created
>> (C types can do that I think),
>=20
> Indeed (see above).
>=20
>> copying Ocaml string contents manually (how?),
>=20
> A quick way is to use the 'coerce' function, which can convert between
> 'ptr char' and 'string' because 'string' is a view for 'ptr char'.
> Here's an example using the 'strdup' binding above.
>=20
>    # let p =3D strdup "hello, world";;
>    val p : char Ctypes_static.ptr =3D (char*) 0x5601c2a90130
>    # coerce (ptr char) string p;;
>    - : string =3D "hello, world"
>=20
> More generally the 'ocaml-memcpy' package provides functions that can
> copy between several different representations
> (https://github.com/yallop/ocaml-memcpy).

Thanks!

>=20
>> and then manually free-ing it (C types can do that?)
>=20
> A simple way is to bind 'free'!  Here's an example, freeing the memory
> returned from the call to 'strdup' above.
>=20
>    # let free =3D foreign "free" (ptr char @-> returning void);;
>    val free : char Ctypes_static.ptr -> unit =3D <fun>
>    # free p;;
>    - : unit =3D ()
>=20
> Kind regards,
>=20
> Jeremy


Thanks heaps!


=E2=80=94
john skaller
skaller@users.sourceforge.net
http://felix-lang.org


From skaller@internode.on.net  Wed Dec 27 05:25:24 2017
Return-Path: <skaller@internode.on.net>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id A977D3C238
 for <ctypes@lists.ocaml.org>; Wed, 27 Dec 2017 05:25:24 +0000 (GMT)
X-Cam-SpamDetails: score -0.8 from SpamAssassin-3.4.1-1819277 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [150.101.137.129 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 T_RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [150.101.137.129 listed in wl.mailspike.net]
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from ipmail06.adl2.internode.on.net ([150.101.137.129]:20924)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtp id 1eU4La-000Fk0-6T (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <skaller@internode.on.net>); Wed, 27 Dec 2017 05:33:47 +0000
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A2D/AADh299ZAACNtDENURoBAQEBAgEBAQEIAQEBAYRBgRWDN0ObJZhjJYUdAYUaAQIBAQEBAQIPATSFfxcEaxwCJgJymCmcfGuBbTqLSAElgQ6CH4VtC4JFhgCCRy+CMgWhRIFthXGgHJIxhHOBZYEDClsBgnSBT0QcgXtii1cBAQE
Received: from pa49-180-141-0.pa.nsw.optusnet.com.au (HELO [192.168.8.100])
 ([49.180.141.0])
 by ipmail06.adl2.internode.on.net with ESMTP; 27 Dec 2017 16:03:41 +1030
From: john skaller <skaller@internode.on.net>
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable
Mime-Version: 1.0 (Mac OS X Mail 10.1 \(3251\))
Message-Id: <302C46F4-0908-44B8-A793-C9071E0DF3E5@internode.on.net>
Date: Wed, 27 Dec 2017 16:33:38 +1100
To: ctypes@lists.ocaml.org
X-Mailer: Apple Mail (2.3251)
Subject: [ocaml-ctypes] Another dumb question
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 27 Dec 2017 05:25:24 -0000

This should be a quicky=E2=80=A6.

Suppose I have some messy struct in C which is generally used
via a pointer. Eg

	void f (messy_struct *, int)

Instead of trying to provide field access I think I=E2=80=99d just like =
to make it
abstract. So I would say

	type messy_t

and=20

	let messy_c =3D ptr void=20

and then

	let f =3D foreign =E2=80=9Cf=E2=80=9D =3D (messy_c @-> int @-> =
returning void)

Does that seem right? (where messy_t is the Ocaml type and
messy_c is the value encoding the view).

Actually I would like to use =E2=80=9Cabstract=E2=80=9D but there=E2=80=99=
s doesn=E2=80=99t seem like
a convenient way to make an abstract type =E2=80=9Cthe same size and
alignment as a pointer=E2=80=9D. That has the added advantage of
preventing a pointer coercion.



=E2=80=94
john skaller
skaller@users.sourceforge.net
http://felix-lang.org


From skaller@internode.on.net  Wed Dec 27 05:47:40 2017
Return-Path: <skaller@internode.on.net>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-43.csi.cam.ac.uk (ppsw-43.csi.cam.ac.uk [131.111.8.143])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id EE8BD3C238
 for <ctypes@lists.ocaml.org>; Wed, 27 Dec 2017 05:47:39 +0000 (GMT)
X-Cam-SpamDetails: score -0.8 from SpamAssassin-3.4.1-1819277 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [150.101.137.131 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [150.101.137.131 listed in wl.mailspike.net]
 * -0.0 T_RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from ipmail07.adl2.internode.on.net ([150.101.137.131]:43981)
 by ppsw-43.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtp id 1eU4h6-0005Fr-o9 (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <skaller@internode.on.net>); Wed, 27 Dec 2017 05:56:02 +0000
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A2DBAADh299ZAACNtDENURkBAQEBAQEBAQEBAQcBAQEBAYRBgRWDepslIphBJYUdAQIChRYBAgEBAQEBAg8BNIVtAQEBAgEjWwsLGgImAgJXGYoWqw9rgieDVodmAQsmgQ6CH4VtC4J0hQVMgkcvgjIFkUaHHohgh16PBwGRFJIxhHOBZYEDClsBgnSEKmKLVwEBAQ
Received: from pa49-180-141-0.pa.nsw.optusnet.com.au (HELO [192.168.8.100])
 ([49.180.141.0])
 by ipmail07.adl2.internode.on.net with ESMTP; 27 Dec 2017 16:25:57 +1030
From: john skaller <skaller@internode.on.net>
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable
Mime-Version: 1.0 (Mac OS X Mail 10.1 \(3251\))
Date: Wed, 27 Dec 2017 16:55:55 +1100
References: <302C46F4-0908-44B8-A793-C9071E0DF3E5@internode.on.net>
To: ctypes@lists.ocaml.org
In-Reply-To: <302C46F4-0908-44B8-A793-C9071E0DF3E5@internode.on.net>
Message-Id: <6667955C-5E44-4506-8BF1-3C9699FA5B64@internode.on.net>
X-Mailer: Apple Mail (2.3251)
Subject: Re: [ocaml-ctypes] Another dumb question
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 27 Dec 2017 05:47:40 -0000


> On 27 Dec. 2017, at 16:33, john skaller <skaller@internode.on.net> =
wrote:

Oops let me try that again.

val messy =3D abstract=20
	name:=E2=80=9Cmessy=E2=80=9D=20
	size:(sizeof null)=20
	aligment:(alignment null))



=E2=80=94
john skaller
skaller@users.sourceforge.net
http://felix-lang.org


From skaller@internode.on.NET  Wed Dec 27 05:55:57 2017
Return-Path: <skaller@internode.on.NET>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-43.csi.cam.ac.uk (ppsw-43.csi.cam.ac.uk [131.111.8.143])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 1FE6F3C238
 for <ctypes@lists.ocaml.org>; Wed, 27 Dec 2017 05:55:57 +0000 (GMT)
X-Cam-SpamDetails: score -0.8 from SpamAssassin-3.4.1-1819277 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [150.101.137.131 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [150.101.137.131 listed in wl.mailspike.net]
 * -0.0 T_RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from ipmail07.adl2.internode.on.net ([150.101.137.131]:12736)
 by ppsw-43.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtp id 1eU4p8-00080o-om (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <skaller@internode.on.NET>); Wed, 27 Dec 2017 06:04:20 +0000
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A2CHAADh299ZAACNtDENURkBAQEBAQEBAQEBAQcBAQEBAYRBgRWDeptHmEElhR0BAgKFFgECAQEBAQECDwE0hWwBAQEBAgEjWwsLGAICJgICVxmKFqsPa4Ing1aHZgELJoEOgh+FbYJ/hQVMgkcvgjIFkUaPfodejweRFZIxhHOBZYEDClsBgnSEKmKLVwEBAQ
Received: from pa49-180-141-0.pa.nsw.optusnet.com.au (HELO [192.168.8.100])
 ([49.180.141.0])
 by ipmail07.adl2.internode.on.net with ESMTP; 27 Dec 2017 16:34:15 +1030
From: john skaller <skaller@internode.on.net>
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable
Mime-Version: 1.0 (Mac OS X Mail 10.1 \(3251\))
Date: Wed, 27 Dec 2017 17:04:13 +1100
References: <302C46F4-0908-44B8-A793-C9071E0DF3E5@internode.on.net>
 <6667955C-5E44-4506-8BF1-3C9699FA5B64@internode.on.net>
To: ctypes@lists.ocaml.org
In-Reply-To: <6667955C-5E44-4506-8BF1-3C9699FA5B64@internode.on.net>
Message-Id: <87646E8C-27BE-49C1-AE90-96A2581B69F0@internode.on.net>
X-Mailer: Apple Mail (2.3251)
Subject: Re: [ocaml-ctypes] Another dumb question
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 27 Dec 2017 05:55:57 -0000


> On 27 Dec. 2017, at 16:55, john skaller <skaller@internode.on.net> =
wrote:
>=20
>=20
>> On 27 Dec. 2017, at 16:33, john skaller <skaller@internode.on.net> =
wrote:
>=20
> Oops let me try that again.
>=20
> val messy =3D abstract=20
> 	name:=E2=80=9Cmessy=E2=80=9D=20
> 	size:(sizeof null)=20
> 	aligment:(alignment null))


Though Real World Ocaml just does this ..

type messy_ocaml
let messy_c =3D messy_ocaml typ

where I assume it works because Ocaml boxes the type.
Which means the underlying C pointer had better not have the
low bit set (not that it ever will).


=E2=80=94
john skaller
skaller@users.sourceforge.net
http://felix-lang.org


From yallop@gmail.com  Wed Dec 27 13:12:39 2017
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-43.csi.cam.ac.uk (ppsw-43.csi.cam.ac.uk [131.111.8.143])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 7B3AA3C0E6
 for <ctypes@lists.ocaml.org>; Wed, 27 Dec 2017 13:12:39 +0000 (GMT)
X-Cam-SpamDetails: score -0.2 from SpamAssassin-3.4.1-1819277 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.214.44 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [209.85.214.44 listed in wl.mailspike.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-it0-f44.google.com ([209.85.214.44]:43332)
 by ppsw-43.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1eUBdl-0002Cd-oH (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Wed, 27 Dec 2017 13:21:03 +0000
Received: by mail-it0-f44.google.com with SMTP id u62so25131544ita.2
 for <ctypes@lists.ocaml.org>; Wed, 27 Dec 2017 05:21:01 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc:content-transfer-encoding;
 bh=FSFpi+wYKlz6bRhHaXiKs4ch5fomOUZRr7l9HE7i4Yc=;
 b=FELLh7fKQNEiMlnhJmSUMPIkNWtmFg0lOHkw3aCezn/DWlwtn8xYAUCU6P6N8HCMrm
 EZjyteDhwgypURPK4Pg0BzhOv5U2BnCYim3lRTYMmF8HZnHK/edepj7DHinbJLPHpaoM
 FXIs2Vv0pPGbmM9jcrhU5UiXQz9+k9eMchFhT/ewD0rNOI8P4MjPne1TF/N/FQCmvRb7
 Do0lSb2MPYRYsfNmyIEn/yoI5nh8QM6vE/SQ5fRQekmYXD7dFc33u71SrX0uP7BaA2Bv
 RRgReSMtHZwc6gwHdi9VFvSSqCnwS5+NlLAm0xAsXQ6IvpsHPW2C06wZDUZjjexwZ5ca
 WdFg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc:content-transfer-encoding;
 bh=FSFpi+wYKlz6bRhHaXiKs4ch5fomOUZRr7l9HE7i4Yc=;
 b=t/d8rzoXCpJEuwXmnGYaP44IMlG82spDFVPzKtGeiHcT5yCmeI9hmcrcpNJWOr+U8A
 bvsjZE44IR7SzQq5gQ3Q/I/tf1fYKzW/SPOXXYK49ft71MhQeE0gxsc4xJ0G0X73bp1H
 z3H/TIn4r1kUY6GGKOGVuJWFqMoKmLb6FW/bIpEqjdaYCCJit75/YXWS86DSkWqQCORA
 mqncb9OzgTCG64CAazOlvLlPJLZb2FMeSU11rQ+M62zmCauE3FUyME/DCBMCNabBxAdh
 JiKSnD/Ig9BPkNefLh8bz1tZbM+LmcDai4Zor7vUp6ukT5geCPc2gvi2BILUHkekfacz
 x6nQ==
X-Gm-Message-State: AKGB3mJIiOBT/mMryqMPf6RM9POBgHvsWeqM8EMtsoZHoVrYuKrzGbNB
 0pOzPdz4XpDuV3p8vmAe3kjm8FgFlceSR4tKMg0=
X-Google-Smtp-Source: ACJfBos5ljNl6uwiNxMU5n/8W6nwucLK5HIqOimjP4wMCOzZTFkmMGFN0FM+8dklBkgpOkbp2GTmk/SxDK0ABvHsLYw=
X-Received: by 10.36.7.12 with SMTP id f12mr34747745itf.86.1514380860367; Wed,
 27 Dec 2017 05:21:00 -0800 (PST)
MIME-Version: 1.0
Received: by 10.79.202.4 with HTTP; Wed, 27 Dec 2017 05:20:59 -0800 (PST)
In-Reply-To: <57BB673D-C1F1-42EA-8B65-6DF54E290E88@internode.on.net>
References: <1A47B410-EF50-455C-B549-3CF320C33469@internode.on.net>
 <CAAxsn=FikaVsQhv9P63za6WNXXPT-6JoCJogtKH1fmduOXTh+Q@mail.gmail.com>
 <57BB673D-C1F1-42EA-8B65-6DF54E290E88@internode.on.net>
From: Jeremy Yallop <yallop@gmail.com>
Date: Wed, 27 Dec 2017 13:20:59 +0000
Message-ID: <CAAxsn=FgUw2tzm-vxToCJGYUX9FOxHSZ585VNMqTsHLBmUd4hw@mail.gmail.com>
To: john skaller <skaller@internode.on.net>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Help with strings
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 27 Dec 2017 13:12:39 -0000

On 26 December 2017 at 23:45, john skaller <skaller@internode.on.net> wrote=
:
>> On 27 Dec. 2017, at 10:04, Jeremy Yallop <yallop@gmail.com> wrote:
> Hi! Sorry for the email mixuo, i=E2=80=99m subscribed twice now,
> once at sourceforge and once at internode.
>
> I have another question: what=E2=80=99s the best way to bind an =E2=80=9C=
enum=E2=80=9D?
> If the codes are sequential is there a builtin way to map the enum
> into an Ocaml variant?

Ctypes provides two functions for this:

   'constant' retrieves the value of a compile-time constant
(enumeration constant, #define value, etc.)
   http://ocamllabs.io/ocaml-ctypes/Cstubs.Types.TYPE.html#VALconstant

   'enum' builds a 'typ' value from a mapping between constants and OCaml v=
alues
   http://ocamllabs.io/ocaml-ctypes/Cstubs.Types.TYPE.html#VALenum

Besides the documentation there are examples in various packages, such
as the OCaml yaml bindings:

   https://github.com/avsm/ocaml-yaml/blob/v0.1.0/types/bindings/yaml_bindi=
ngs_types.ml#L59-L103

ctypes_of_clang also provides an alternative method of bindings enums
(see the README):

   https://github.com/ujamjar/ctypes_of_clang

> Right, thanks! That=E2=80=99s a definite spec, perhaps please you could a=
dd those
> comments to the documentation?

Good idea!  I'll get to that soon
(https://github.com/ocamllabs/ocaml-ctypes/issues/558).

> I may have some more questions, hope you don=E2=80=99t mind.
> Perhaps the answers will be useful to others starting out.
>
> BTW: some of the code appears in  several places.
> Why is that?
> (Ctypes vs Ctypes_types.TYPE)

Ctypes_type.TYPE is an abstract interface to type descriptions.  The
Ctypes module gives a default implementation of the interface.  The
interface is also used elsewhere, though; in particular, it's used for
describing C types whose layout is retrieved from C:

    https://github.com/ocamllabs/ocaml-ctypes/blob/0.13.1/src/cstubs/cstubs=
.mli

For example, you can bind a struct using the 'structure' and 'field'
values in the TYPE interface:

   let s =3D structure "s"
   let x  =3D field s "x" int
   ....

If you use the implementations of 'structure' and 'field in the Ctypes
module then the struct layout is computed using an implementation that
computes offsets using the alignment information for each type.  But
if you use the implementations of 'structure' and 'field' from the
Cstubs module then the layout information is retrieved by generating C
code that's run through a C compiler.  The interface (i.e. TYPE) is
the same in both cases, but it's useful to have different
implementations of that interface.

> Ok, so that=E2=80=99s a pointer to the live Ocaml string, and we=E2=80=99=
re relying
> on the string not being modified or moved during the C call.

Right.

> Current rules say Ocaml strings are immutable, use bytes instead.
> However, if several threads are running, normally Ocaml is using
> a global lock to serialise them. However the lock is normally
> released when calling C code. That would not be safe in this
> case, using ocaml_string, so presumably in this case the lock
> is not released. Is that correct?

Yes, that's correct.  Ctypes supports releasing the lock (via the
~release_runtime_lock argument in Foreign.foreign, or via the
concurrency policy in Cstubs), but the lock isn't released by default.

Kind regards,

Jeremy

From yallop@gmail.com  Wed Dec 27 13:22:59 2017
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-43.csi.cam.ac.uk (ppsw-43.csi.cam.ac.uk [131.111.8.143])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id B3C343C0E6
 for <ctypes@lists.ocaml.org>; Wed, 27 Dec 2017 13:22:59 +0000 (GMT)
X-Cam-SpamDetails: score -0.2 from SpamAssassin-3.4.1-1819277 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.223.175 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H2 RBL: Average reputation (+2)
 *      [209.85.223.175 listed in wl.mailspike.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-io0-f175.google.com ([209.85.223.175]:35943)
 by ppsw-43.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1eUBnm-0007rT-p3 (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Wed, 27 Dec 2017 13:31:23 +0000
Received: by mail-io0-f175.google.com with SMTP id i143so15244945ioa.3
 for <ctypes@lists.ocaml.org>; Wed, 27 Dec 2017 05:31:22 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc:content-transfer-encoding;
 bh=2BHicDQGIyxCwR9BJejJbxmnwBMj6eCyjYKrhA8y3JM=;
 b=T8Rjj0/YTy2LtEdmtWeuyQZhjxiioJTRfCQW6N3R07sVqq/DeXb2DgR3HvxV0oY5sB
 Z76pg9GJ0jXvtslzaB/lwNqTk2pNYo0Xb+S91ndX0uTFQ0NjsBMHsbObMrC0WgxYaEEB
 YIP/RXzg8oPjS+l1tCU0oMC1CnxaH/YQwm+QMYGUpAk1rD0GoDgY0d7sgzhi7TehJMbV
 FFjfCb4hwSzN+DSFtGzP9y2R6NJJVZckSiBmnDpNJa70z6bFGDE2Y92xWjR9Bgzs86Lf
 EXfFi2y8Eyok67GCBHM1vIOWq2KAbQm/Veo0TTc1IhdqwJ9CgRVPfYYQ7bY6PFVH8kc5
 1OlA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc:content-transfer-encoding;
 bh=2BHicDQGIyxCwR9BJejJbxmnwBMj6eCyjYKrhA8y3JM=;
 b=dTEbR5dHTrb/o2zIL9SKdppd76N2m1mzKa0T0bNrXPigQyySJzSnlsKs38E+eTMAoq
 eIa2ao338JVE2OJXtdZfhb5DLf5TlcZzINCcwFEql0urfOu+TJpCH74XpI2/Qxje8ahT
 I64E2XsbU59rZE52xAANCuvwofdzRjwedaC0TOMhTLJS5OgTTNrWb27/p8P6SLB8bgj6
 3f5+vTSBq4WtZQOOsyO6Q5mFE/1zxJX+NL0DQ+IEtLM1XTJuvuoJNK0ayvEYhuSc37pO
 cj4DVYIcmJiQ0malC1foae9y6knC057p7OdMx9p30+HTYD7Ux5aqXqn8VBKBVkdbdwoa
 Zxlg==
X-Gm-Message-State: AKGB3mLGPgqzDBMfIvDtlS3XMuaaZtjkYFu2+jdjWAwF4PtRqw0Ff3x/
 LNpUnyYYZqQIGfdFbQhsMVBEKe8Ri6rUqceI+Is=
X-Google-Smtp-Source: ACJfBouxofpafm/ptU0h9rqZVjqxkWT3n6bcjCLj31Zsgouut3nphzU7aoWOyNmfkDF2gbt9Be8soqwNrMSqwHFCRSw=
X-Received: by 10.107.201.133 with SMTP id z127mr30212832iof.98.1514381481751; 
 Wed, 27 Dec 2017 05:31:21 -0800 (PST)
MIME-Version: 1.0
Received: by 10.79.202.4 with HTTP; Wed, 27 Dec 2017 05:31:21 -0800 (PST)
In-Reply-To: <302C46F4-0908-44B8-A793-C9071E0DF3E5@internode.on.net>
References: <302C46F4-0908-44B8-A793-C9071E0DF3E5@internode.on.net>
From: Jeremy Yallop <yallop@gmail.com>
Date: Wed, 27 Dec 2017 13:31:21 +0000
Message-ID: <CAAxsn=EbqaKmwtGdT=+URPY0oi_x0JVWbAbgOMBacYCKZMTvFw@mail.gmail.com>
To: john skaller <skaller@internode.on.net>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Another dumb question
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 27 Dec 2017 13:22:59 -0000

On 27 December 2017 at 05:33, john skaller <skaller@internode.on.net> wrote=
:
> This should be a quicky=E2=80=A6.
>
> Suppose I have some messy struct in C which is generally used
> via a pointer. Eg
>
>         void f (messy_struct *, int)
>
> Instead of trying to provide field access I think I=E2=80=99d just like t=
o make it
> abstract. So I would say
>
>         type messy_t
>
> and
>
>         let messy_c =3D ptr void
>
> and then
>
>         let f =3D foreign =E2=80=9Cf=E2=80=9D =3D (messy_c @-> int @-> re=
turning void)
>
> Does that seem right? (where messy_t is the Ocaml type and
> messy_c is the value encoding the view).

The usual way of dealing with this is to define a struct using
'structure' without calling 'field' or 'seal', like this:

   type messy_t
   let messy_struct : messy_t structure typ =3D structure "messy_struct"
   let messy_c =3D ptr messy_struct

   let f =3D foreign =E2=80=9Cf=E2=80=9D =3D (messy_c @-> int @-> returning=
 void)

Defining a structure without calling 'seal' is like writing an
incomplete type declaration in C, so the code above roughly
corresponds to

   struct messy_struct;
   typedef struct messy_struct *messy_c;

   void f(messy_c, int);

(The 'abstract' type is not often as useful as it seems to be at
first.  The use case I had in mind for it is pthread_t, which can be
different kinds of type -- struct, pointer, integer, etc. -- on
different platforms.  But that sort of thing is pretty rare in
practice.)

Kind regards,

Jeremy

From skaller@internode.on.NET  Wed Dec 27 23:28:45 2017
Return-Path: <skaller@internode.on.NET>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id CFD483C0E6
 for <ctypes@lists.ocaml.org>; Wed, 27 Dec 2017 23:28:45 +0000 (GMT)
X-Cam-SpamDetails: score -0.8 from SpamAssassin-3.4.1-1819319 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [150.101.137.145 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [150.101.137.145 listed in wl.mailspike.net]
 * -0.0 T_RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from ipmail06.adl6.internode.on.net ([150.101.137.145]:23236)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1eULG1-000hDx-1D (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <skaller@internode.on.NET>); Wed, 27 Dec 2017 23:37:11 +0000
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A2D9AACh299ZAACNtDENURoBAQEBAgEBAQEIAQEBAYMvgRKBFYN6myUilj2CBC+FFgKFFgECAQEBAQECDwE0hW0BAQECASNRBRALGgImAgJXBgoJihYYqnZrgieLPAEBAQEBAQEBAgEBAQEBAQEBAQEBHYEOgh+FbQuBZoEOgwoogSABEgEfgxMvgjIFoUSHXo99kB+SMYRzgVoLgQMKWwGCdIIQH4F7YgEBiSCCNQEBAQ
Received: from pa49-180-141-0.pa.nsw.optusnet.com.au (HELO [192.168.8.100])
 ([49.180.141.0])
 by ipmail06.adl6.internode.on.net with ESMTP; 28 Dec 2017 10:07:04 +1030
Content-Type: text/plain; charset=utf-8
Mime-Version: 1.0 (Mac OS X Mail 10.1 \(3251\))
From: john skaller <skaller@internode.on.net>
In-Reply-To: <CAAxsn=FgUw2tzm-vxToCJGYUX9FOxHSZ585VNMqTsHLBmUd4hw@mail.gmail.com>
Date: Thu, 28 Dec 2017 10:37:02 +1100
Content-Transfer-Encoding: quoted-printable
Message-Id: <0EF0083A-B8F8-4481-96DD-2C0F3A9F527D@internode.on.net>
References: <1A47B410-EF50-455C-B549-3CF320C33469@internode.on.net>
 <CAAxsn=FikaVsQhv9P63za6WNXXPT-6JoCJogtKH1fmduOXTh+Q@mail.gmail.com>
 <57BB673D-C1F1-42EA-8B65-6DF54E290E88@internode.on.net>
 <CAAxsn=FgUw2tzm-vxToCJGYUX9FOxHSZ585VNMqTsHLBmUd4hw@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
X-Mailer: Apple Mail (2.3251)
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Help with strings
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 27 Dec 2017 23:28:45 -0000

BTW: Just though I=E2=80=99d say, Ctypes is a pretty nice library.
Well done! There=E2=80=99s no such thing as a perfect foreign interface
to C, but Ctypes handles much of it reasonably well.
Indeed, even the =E2=80=9Cdomestic=E2=80=9D interface to C (using C from =
C
code) is pretty messy.

>> I have another question: what=E2=80=99s the best way to bind an =
=E2=80=9Cenum=E2=80=9D?
>> If the codes are sequential is there a builtin way to map the enum
>> into an Ocaml variant?
>=20
> Ctypes provides two functions for this:
>=20
>   'constant' retrieves the value of a compile-time constant
> (enumeration constant, #define value, etc.)
>   http://ocamllabs.io/ocaml-ctypes/Cstubs.Types.TYPE.html#VALconstant
>=20
>   'enum' builds a 'typ' value from a mapping between constants and =
OCaml values
>   http://ocamllabs.io/ocaml-ctypes/Cstubs.Types.TYPE.html#VALenum

Ah, thanks, I missed that.

Hmm. What does it mean when it says =E2=80=9Cthe size and alignment are =
retrieved=E2=80=9D??
The only way to do that would be to generate C code and measure it.

So this is Cstubs which IS used that way. But its a multi-step process I =
do not
wish to use.  At least for me at this stage .. too much magic:

https://www.youtube.com/watch?v=3DcV5mmi7BBMY

Looking at the yaml example, jbuilder is used with a ppx to do this at
during Ocaml compilation, is that correct?


>=20
> Ctypes_type.TYPE is an abstract interface to type descriptions.  The
> Ctypes module gives a default implementation of the interface.  The
> interface is also used elsewhere, though; in particular, it's used for
> describing C types whose layout is retrieved from C:
>=20
>    =
https://github.com/ocamllabs/ocaml-ctypes/blob/0.13.1/src/cstubs/cstubs.ml=
i

Ah, ok, that makes sense.

>=20
> For example, you can bind a struct using the 'structure' and 'field'
> values in the TYPE interface:
>=20
>   let s =3D structure "s"
>   let x  =3D field s "x" int
>   ....
>=20
> If you use the implementations of 'structure' and 'field in the Ctypes
> module then the struct layout is computed using an implementation that
> computes offsets using the alignment information for each type.  But
> if you use the implementations of 'structure' and 'field' from the
> Cstubs module then the layout information is retrieved by generating C
> code that's run through a C compiler.  The interface (i.e. TYPE) is
> the same in both cases, but it's useful to have different
> implementations of that interface.

Again, worth adding this description somewhere in the docs.
Not sure where though, it doesn=E2=80=99t fit into the =E2=80=9Cocamldoc=E2=
=80=9D generated
pages, more into an =E2=80=9Coverall design=E2=80=9D doc.

Hmm. How can I contribute easily. Its too early for me to actually
write docs. However I could create an issue with copies of your
email comments for someone to integrate.

Also the Q&A style here might suit Stackoverflow?


>=20
>> Current rules say Ocaml strings are immutable, use bytes instead.
>> However, if several threads are running, normally Ocaml is using
>> a global lock to serialise them. However the lock is normally
>> released when calling C code. That would not be safe in this
>> case, using ocaml_string, so presumably in this case the lock
>> is not released. Is that correct?
>=20
> Yes, that's correct.  Ctypes supports releasing the lock (via the
> ~release_runtime_lock argument in Foreign.foreign, or via the
> concurrency policy in Cstubs), but the lock isn=E2=80=99t released by =
default.

Ah. That=E2=80=99s important info. Hmm. It is possible the client will =
be
using the binding which is of a high performance specialised
file transfer/analysis code with Jane St Async and might expect
operations to run =E2=80=9Cin the background=E2=80=9D using a future. =
The C library
uses a thread pool, for example. I suspect this means the lock
would have to be released. Also  .. when .. or should that be =E2=80=9Cif?=
=E2=80=9D
multi-core arrives it will create a big mess. (Especially for=20
JS/Async :)

=E2=80=94
john skaller
skaller@users.sourceforge.net
http://felix-lang.org


From evilkidder@gmail.com  Thu Dec 28 00:00:59 2017
Return-Path: <evilkidder@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id EA3123C0E6
 for <ctypes@lists.ocaml.org>; Thu, 28 Dec 2017 00:00:59 +0000 (GMT)
X-Cam-SpamDetails: score -0.2 from SpamAssassin-3.4.1-1819319 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.216.173 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [209.85.216.173 listed in wl.mailspike.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (evilkidder[at]gmail.com)
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-qt0-f173.google.com ([209.85.216.173]:37529)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1eULlE-000iDQ-8W (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <evilkidder@gmail.com>); Thu, 28 Dec 2017 00:09:25 +0000
Received: by mail-qt0-f173.google.com with SMTP id f2so49576809qtj.4
 for <ctypes@lists.ocaml.org>; Wed, 27 Dec 2017 16:09:24 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc; bh=+GCJexBUQp3w0hVgBr8X1GPAjv0izjMFum4q6QmlRh0=;
 b=Fvd/zzbzH2qWng29pmXEq3oSBY+boKOA2frDkzelOdsrzlksQgb/lMV0bRZhTwHgPd
 wO6DpRpQofTTvV0rJdL07y2WF6ICYTqMnvVH1SSRMljrd4XUwNDD6f6XuhcqScQysx1f
 EGxtmS4cnvCW5YeFWHStcTtwUHl5X7l8WaE+Jg4cnJ3LbF/cf2/+h4+ha9Ow+40wnXs9
 AS73H6KbLHQn8Cy3VNzrGlaqyLtmZ9Xwl7qEmG7NMSD1ZSnrBxefWjbhnaZNhD82/tmf
 W/3T7It3rMCVPXad11aqBlAbTSMQba153tNExGew5y12yPJF1yLgMXrJUSIbFlUkfTzJ
 g4fQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc;
 bh=+GCJexBUQp3w0hVgBr8X1GPAjv0izjMFum4q6QmlRh0=;
 b=WR6Z/I6aQY0pDqWQIPzLolZqYo2gpkqYT5a+/Dd4axlTla0sDkZkWKvmZlbEhk4k8Y
 myI77mB1ENHWphUc9Lv2H798ExNFpHAYRpl15j2o0GU6t8SapsYGBb+mHkA2SooD+22W
 al+Uq/bW22i+5Gt3PkhJKn+Xtx7jskAC1g5lYDvHrEEQ5M6+7V/dOlsOOaJAPFzvleXt
 NOMWe6fyXM38pIChfpX8vth8TXNMmBRYRZiQYo3tX3aOMc3UFv6pYIEstDQwcLg6qN/M
 GLQaRG7jjMh3vfXHgSYis0l2ei30DheI9baXAv4lGS0Q+5+Noy85FqF+JK/XqdXboThT
 8vwA==
X-Gm-Message-State: AKGB3mJf5Xh/QhXsQwg1Pqbq+/r1qFrx47IDAF/n7yZAYG5KK767+PGE
 70IBPiwcFGNUTYROTT8kNEWPvMKGmArCb2+tjQ==
X-Google-Smtp-Source: ACJfBosaWkZhMzf8dIQG83gCe+xgH4g02fpn6u8Ak/VQBHwrGdaRGZtMVT9ud1+ort7Jx2HOHNsMElkRSVaOeGPFUwE=
X-Received: by 10.200.25.207 with SMTP id s15mr40024659qtk.94.1514419763614;
 Wed, 27 Dec 2017 16:09:23 -0800 (PST)
MIME-Version: 1.0
Received: by 10.237.58.105 with HTTP; Wed, 27 Dec 2017 16:09:23 -0800 (PST)
In-Reply-To: <CAAxsn=FikaVsQhv9P63za6WNXXPT-6JoCJogtKH1fmduOXTh+Q@mail.gmail.com>
References: <1A47B410-EF50-455C-B549-3CF320C33469@internode.on.net>
 <CAAxsn=FikaVsQhv9P63za6WNXXPT-6JoCJogtKH1fmduOXTh+Q@mail.gmail.com>
From: Andy Ray <evilkidder@gmail.com>
Date: Thu, 28 Dec 2017 00:09:23 +0000
Message-ID: <CAHYOizG3yv1aTgM0FQMtSKpg4u5M5dRZE2JMS787vf_vn6LLWQ@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Content-Type: multipart/alternative; boundary="94eb2c1244c20d1c1e05615b540e"
Cc: ctypes@lists.ocaml.org
Subject: Re: [ocaml-ctypes] Help with strings
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 28 Dec 2017 00:01:00 -0000

--94eb2c1244c20d1c1e05615b540e
Content-Type: text/plain; charset="UTF-8"

>
>
>
>   * passing a string using 'string' makes a copy in either direction.
> Furthermore,
>
>     - the copy created when passing a string from OCaml to C lives for
> the lifetime of the C call.
>       (It's possible this will be strengthened in the future:
> https://github.com/ocamllabs/ocaml-ctypes/issues/556)
>
>     - the copy created when passing a string from C to OCaml is a
> regular OCaml string, subject to usual GC behaviour.  Ctypes makes no
> attempt to deallocate the memory used by the original C string.
>


In the case where a C function takes and returns the same string, does a
signature of [string @-> returning string] also work?  In other words, does
the input string live long enough to ensure the output string is created?

Silly example:

char * foo (char * p) { return (p+1); }

I guess this gets more complex with structures and the like.  More
generally do the arguments to a function call live long enough to create
[view]s of a returned value?

-Andy

--94eb2c1244c20d1c1e05615b540e
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div class=3D"gmail_extra"><div class=3D"gmail_quote"><blo=
ckquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #c=
cc solid;padding-left:1ex"><br>
<br>
=C2=A0 * passing a string using &#39;string&#39; makes a copy in either dir=
ection.<br>
Furthermore,<br>
<br>
=C2=A0 =C2=A0 - the copy created when passing a string from OCaml to C live=
s for<br>
the lifetime of the C call.<br>
=C2=A0 =C2=A0 =C2=A0 (It&#39;s possible this will be strengthened in the fu=
ture:<br>
<a href=3D"https://github.com/ocamllabs/ocaml-ctypes/issues/556" rel=3D"nor=
eferrer" target=3D"_blank">https://github.com/ocamllabs/<wbr>ocaml-ctypes/i=
ssues/556</a>)<br>
<br>
=C2=A0 =C2=A0 - the copy created when passing a string from C to OCaml is a=
<br>
regular OCaml string, subject to usual GC behaviour.=C2=A0 Ctypes makes no<=
br>
attempt to deallocate the memory used by the original C string.<br></blockq=
uote><div><br></div><div><br></div><div>In the case where a C function take=
s and returns the same string, does a signature of [string @-&gt; returning=
 string] also work?=C2=A0 In other words, does the input string live long e=
nough to ensure the output string is created?=C2=A0</div><div><br></div><di=
v>Silly example:</div><div><br></div><div>char * foo (char * p) { return (p=
+1); }</div><div><br></div><div>I guess this gets more complex with structu=
res and the like.=C2=A0 More generally do the arguments to a function call =
live long enough to create [view]s of a returned value?</div><div><br></div=
><div>-Andy</div><div><br></div><div><br></div><div>=C2=A0</div></div></div=
></div>

--94eb2c1244c20d1c1e05615b540e--

From skaller@internode.on.net  Thu Dec 28 00:20:50 2017
Return-Path: <skaller@internode.on.net>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id E065B3C0E6
 for <ctypes@lists.ocaml.org>; Thu, 28 Dec 2017 00:20:50 +0000 (GMT)
X-Cam-SpamDetails: score -0.8 from SpamAssassin-3.4.1-1819319 
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [150.101.137.129 listed in wl.mailspike.net]
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [150.101.137.129 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 T_RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from ipmail06.adl2.internode.on.net ([150.101.137.129]:29395)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1eUM4Q-00011z-31 (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <skaller@internode.on.net>); Thu, 28 Dec 2017 00:29:16 +0000
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A2CGAADh299ZAACNtDENURkBAQEBAQEBAQEBAQcBAQEBAYRBgRWDeptHiEWPfCWFIAKFFgECAQEBAQECDwE0hWwBAQEBAgEjVgULCxgCAiYCAiE2BhOKBgMNqw9rgieHQA2DbwEBAQEBAQEDAQEBAQEBAQEBAR6BDoIfhW2Cf4JegieDEy+CMgWhCDyHXogTmAmNAIUxhHOBZYEDClsBgnSEKmKLVwEBAQ
Received: from pa49-180-141-0.pa.nsw.optusnet.com.au (HELO [192.168.8.100])
 ([49.180.141.0])
 by ipmail06.adl2.internode.on.net with ESMTP; 28 Dec 2017 10:59:11 +1030
Content-Type: text/plain; charset=utf-8
Mime-Version: 1.0 (Mac OS X Mail 10.1 \(3251\))
From: john skaller <skaller@internode.on.net>
In-Reply-To: <CAAxsn=EbqaKmwtGdT=+URPY0oi_x0JVWbAbgOMBacYCKZMTvFw@mail.gmail.com>
Date: Thu, 28 Dec 2017 11:29:09 +1100
Content-Transfer-Encoding: quoted-printable
Message-Id: <067A01E6-6F54-499D-A1EB-901521BF3B18@internode.on.net>
References: <302C46F4-0908-44B8-A793-C9071E0DF3E5@internode.on.net>
 <CAAxsn=EbqaKmwtGdT=+URPY0oi_x0JVWbAbgOMBacYCKZMTvFw@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
X-Mailer: Apple Mail (2.3251)
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Another dumb question
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 28 Dec 2017 00:20:51 -0000


> On 28 Dec. 2017, at 00:31, Jeremy Yallop <yallop@gmail.com> wrote:
>=20
> On 27 December 2017 at 05:33, john skaller <skaller@internode.on.net> =
wrote:
>> This should be a quicky=E2=80=A6.
>>=20
>> Suppose I have some messy struct in C which is generally used
>> via a pointer. Eg



>=20
> The usual way of dealing with this is to define a struct using
> =E2=80=98structure' without calling 'field' or 'seal',

I started to do this. But I began to think it was dangerous.

The client of the binding is going to have to do some
low level work to use the binding, which is a bit nasty.
However exposing the structures and letting them poke
about in them feels too dangerous.

And a key struct also uses bitfield :)

In C++ you=E2=80=99d provide a constructor, and some accessor
and mutator methods, and make the actual data private.

In Ocaml, it feels more natural in these cases where
functional operations are favoured to make the structure
opaque, and if necessary for construction, write
some methods in C, and then provide binding to them.


=E2=80=94
john skaller
skaller@users.sourceforge.net
http://felix-lang.org


From skaller@internode.on.net  Thu Dec 28 12:57:07 2017
Return-Path: <skaller@internode.on.net>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id D6A783C10F
 for <ctypes@lists.ocaml.org>; Thu, 28 Dec 2017 12:57:07 +0000 (GMT)
X-Cam-SpamDetails: score -0.8 from SpamAssassin-3.4.1-1819401 
 * -0.0 T_RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [150.101.137.129 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [150.101.137.129 listed in wl.mailspike.net]
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from ipmail06.adl2.internode.on.net ([150.101.137.129]:64881)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtp id 1eUXsM-000eGt-6a (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <skaller@internode.on.net>); Thu, 28 Dec 2017 13:05:35 +0000
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A2D+AADh299ZAACNtDENURoBAQEBAgEBAQEIAQEBAYRBgRWDeopDkGKYYyWFHQGFGgECAQEBAQECDwE0hhaBCwImAnK1JWuCJ4tIJoEOgh+FbQuHZ16CRy+CMgWhRIdejRiBbwGRFJIxhHOBZYEDClsBgnSEKmKLVwEBAQ
Received: from pa49-180-141-0.pa.nsw.optusnet.com.au (HELO [192.168.8.100])
 ([49.180.141.0])
 by ipmail06.adl2.internode.on.net with ESMTP; 28 Dec 2017 23:35:29 +1030
From: john skaller <skaller@internode.on.net>
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable
Mime-Version: 1.0 (Mac OS X Mail 10.1 \(3251\))
Message-Id: <E64B00E3-3164-4227-8627-040360B0C274@internode.on.net>
Date: Fri, 29 Dec 2017 00:05:27 +1100
To: ctypes@lists.ocaml.org
X-Mailer: Apple Mail (2.3251)
Subject: [ocaml-ctypes] Passing Caml function to C
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 28 Dec 2017 12:57:07 -0000

There=E2=80=99s some machinery for this but .. well I am suspicious :)

How can this possibly work?

Caml functions are closures,  the only way you could pass
a closure would be to generate a thunk. I=E2=80=99m suspicious that
this doesn=E2=80=99t work in general. And you would need to find
a place to put the thunk which the OS allows you to execute.

=E2=80=94
john skaller
skaller@users.sourceforge.net
http://felix-lang.org


From ssp.mryau@gmail.com  Thu Dec 28 13:51:21 2017
Return-Path: <ssp.mryau@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id D0CCF3C10F
 for <ctypes@lists.ocaml.org>; Thu, 28 Dec 2017 13:51:21 +0000 (GMT)
X-Cam-SpamDetails: score -0.9 from SpamAssassin-3.4.1-1819401 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.216.178 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [209.85.216.178 listed in wl.mailspike.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (ssp.mryau[at]gmail.com)
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-qt0-f178.google.com ([209.85.216.178]:44188)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1eUYiq-000iMh-gV (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <ssp.mryau@gmail.com>); Thu, 28 Dec 2017 13:59:49 +0000
Received: by mail-qt0-f178.google.com with SMTP id m59so51126773qte.11
 for <ctypes@lists.ocaml.org>; Thu, 28 Dec 2017 05:59:48 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc; bh=I6bzBa4sqliBLX76QZS7znEUStf8Uy/uufPL6dGvG5A=;
 b=rc7aN1odmPkQxbA4sDD0tVHdBM07aFNLyHvMB+6QZLAtQJaDBOnLFcNx/SzqQV+Rbm
 8OzixdTNPiTALbWM20tJVw4VWmFdC/6uFSckjkC0YGsenPJsQ6s2455ybw78mfAg/W7x
 ILcb3fQE3PzzwSbR9pJqnrYKMoxWmvEJD1Yja0axDMKVAwLbxzKGEi/bQjHTpel+SH0E
 dIGWqDDeBQMxt4d+4km1iN1yNZAEPJg1fbt5N0diVdonsESckzUtYLmPdoDF5hY/UEXs
 YnNqICmo06e0wYLCBGDEUkDllNei66c28XPxb3dtOI0nZmgD13CPQgBYfFyMm+1EzijM
 gL/g==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc;
 bh=I6bzBa4sqliBLX76QZS7znEUStf8Uy/uufPL6dGvG5A=;
 b=XH9fC0BPkhmQjJlNRWtmO61hEEdsmKoICfvM/USvJylwGd/a94SRRO3YqZHrpCCVto
 yU0tNOF6/MHIj4SzJRWucF+ngBzXZGJHcItxyAgB7ISTtfzeKT3e8zKGzzepCqZ0Gqcl
 ctX5womlP5x45BKt9aE4oGK7Sy7JcZfPEjn5Idoaex5Z0jrUvC7rtxARzNQKcJrXkSuH
 Eqi0ZrSZJuOjnxHDP5h+MdvnQVKIVh0cjSxy4cindv/j23G2dN5THLVyfgfe4CdEDZbu
 t4hCBMxjh2YZh8EYrBLoNW5Nhdg8BYwlzmC7D40IXvGbM6cAN/JTEW4WDeOcTRdf1bfR
 uteA==
X-Gm-Message-State: AKGB3mKeALqR/QG8G6JxIEBRcDQ0y4vkILmo8KcOiLpoCkPb4K4jmkB3
 A9ZSDJgyRzDIheZ28BMGI0KO7TCBDsQtbAMfcQ0=
X-Google-Smtp-Source: ACJfBovFb0jCNUAwe/+Pv4yeU0fbJYB/lTl38KmSzZZslrsTtP0XNGkCY589yG1KoPPs21CNX0sTfc2aJ/55dVm4p6g=
X-Received: by 10.237.34.45 with SMTP id n42mr44239338qtc.12.1514469587186;
 Thu, 28 Dec 2017 05:59:47 -0800 (PST)
MIME-Version: 1.0
Received: by 10.140.40.209 with HTTP; Thu, 28 Dec 2017 05:59:46 -0800 (PST)
In-Reply-To: <E64B00E3-3164-4227-8627-040360B0C274@internode.on.net>
References: <E64B00E3-3164-4227-8627-040360B0C274@internode.on.net>
From: Serge Sivkov <ssp.mryau@gmail.com>
Date: Thu, 28 Dec 2017 18:59:46 +0500
Message-ID: <CAOUGqWwpa1ucHXm6eii-+Y0H-J_MoXQf5RwEk9b8gC7AVdtyUg@mail.gmail.com>
To: john skaller <skaller@internode.on.net>
Content-Type: multipart/alternative; boundary="001a11379e4ec4790a056166edf2"
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Passing Caml function to C
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 28 Dec 2017 13:51:21 -0000

--001a11379e4ec4790a056166edf2
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

An one of simplest methods will be to use
Callback.register name callback_func
on OCaml side and to use something like:
closure_f =3D caml_named_value(name);
ml_reply =3D caml_callback(*closure_f, ml_arg);
on C side.

WBR, ssp

2017-12-28 18:05 GMT+05:00 john skaller <skaller@internode.on.net>:

> There=E2=80=99s some machinery for this but .. well I am suspicious :)
>
> How can this possibly work?
>
> Caml functions are closures,  the only way you could pass
> a closure would be to generate a thunk. I=E2=80=99m suspicious that
> this doesn=E2=80=99t work in general. And you would need to find
> a place to put the thunk which the OS allows you to execute.
>
> =E2=80=94
> john skaller
> skaller@users.sourceforge.net
> http://felix-lang.org
>
> _______________________________________________
> Ctypes mailing list
> Ctypes@lists.ocaml.org
> http://lists.ocaml.org/listinfo/ctypes
>

--001a11379e4ec4790a056166edf2
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div><div><div>An one of simplest methods will be to use <=
br>Callback.register name callback_func<br></div>on OCaml side and to use s=
omething like:<br>closure_f =3D caml_named_value(name);</div><div>ml_reply =
=3D caml_callback(*closure_f, ml_arg);<br></div>on C side.<br><br></div>WBR=
, ssp<br></div><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">20=
17-12-28 18:05 GMT+05:00 john skaller <span dir=3D"ltr">&lt;<a href=3D"mail=
to:skaller@internode.on.net" target=3D"_blank">skaller@internode.on.net</a>=
&gt;</span>:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8e=
x;border-left:1px #ccc solid;padding-left:1ex">There=E2=80=99s some machine=
ry for this but .. well I am suspicious :)<br>
<br>
How can this possibly work?<br>
<br>
Caml functions are closures,=C2=A0 the only way you could pass<br>
a closure would be to generate a thunk. I=E2=80=99m suspicious that<br>
this doesn=E2=80=99t work in general. And you would need to find<br>
a place to put the thunk which the OS allows you to execute.<br>
<br>
=E2=80=94<br>
john skaller<br>
<a href=3D"mailto:skaller@users.sourceforge.net">skaller@users.sourceforge.=
net</a><br>
<a href=3D"http://felix-lang.org" rel=3D"noreferrer" target=3D"_blank">http=
://felix-lang.org</a><br>
<br>
______________________________<wbr>_________________<br>
Ctypes mailing list<br>
<a href=3D"mailto:Ctypes@lists.ocaml.org">Ctypes@lists.ocaml.org</a><br>
<a href=3D"http://lists.ocaml.org/listinfo/ctypes" rel=3D"noreferrer" targe=
t=3D"_blank">http://lists.ocaml.org/<wbr>listinfo/ctypes</a><br>
</blockquote></div><br></div>

--001a11379e4ec4790a056166edf2--

From skaller@internode.on.NET  Thu Dec 28 14:06:54 2017
Return-Path: <skaller@internode.on.NET>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 6816B3C10F
 for <ctypes@lists.ocaml.org>; Thu, 28 Dec 2017 14:06:54 +0000 (GMT)
X-Cam-SpamDetails: score -0.8 from SpamAssassin-3.4.1-1819401 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [150.101.137.131 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [150.101.137.131 listed in wl.mailspike.net]
 * -0.0 T_RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from ipmail07.adl2.internode.on.net ([150.101.137.131]:22546)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtp id 1eUYxs-000CYw-73 (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <skaller@internode.on.NET>); Thu, 28 Dec 2017 14:15:22 +0000
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A2DAAADh299ZAACNtDENURkBAQEBAQEBAQEBAQcBAQEBAYRBgRWDeopDkGIiiEWPfCWFIAKFFgECAQEBAQECDwE0hWwBAQEBAgEjVgULCw4KAgImAgIhNgYTigYDDasPa4Inh0ANg28BAQEBAQEEAQEBAQEBAQEBH4EOgh+FbQuCdIJehTovgjIFkUaPQjyHXogThnQBkRSNAIUxhHOBZYEDClsBgnSEKmKLVwEBAQ
Received: from pa49-180-141-0.pa.nsw.optusnet.com.au (HELO [192.168.8.100])
 ([49.180.141.0])
 by ipmail07.adl2.internode.on.net with ESMTP; 29 Dec 2017 00:45:15 +1030
Content-Type: text/plain; charset=utf-8
Mime-Version: 1.0 (Mac OS X Mail 10.1 \(3251\))
From: john skaller <skaller@internode.on.net>
In-Reply-To: <CAOUGqWwpa1ucHXm6eii-+Y0H-J_MoXQf5RwEk9b8gC7AVdtyUg@mail.gmail.com>
Date: Fri, 29 Dec 2017 01:15:14 +1100
Content-Transfer-Encoding: quoted-printable
Message-Id: <1C830DDE-E90F-4D04-8365-F89435029E39@internode.on.net>
References: <E64B00E3-3164-4227-8627-040360B0C274@internode.on.net>
 <CAOUGqWwpa1ucHXm6eii-+Y0H-J_MoXQf5RwEk9b8gC7AVdtyUg@mail.gmail.com>
To: Serge Sivkov <ssp.mryau@gmail.com>
X-Mailer: Apple Mail (2.3251)
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Passing Caml function to C
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 28 Dec 2017 14:06:54 -0000


> On 29 Dec. 2017, at 00:59, Serge Sivkov <ssp.mryau@gmail.com> wrote:
>=20
> An one of simplest methods will be to use=20
> Callback.register name callback_func
> on OCaml side and to use something like:
> closure_f =3D caml_named_value(name);
> ml_reply =3D caml_callback(*closure_f, ml_arg);
> on C side.

So the user supplied name is used to associate the code
and data across the boundary?


=E2=80=94
john skaller
skaller@users.sourceforge.net
http://felix-lang.org


From ssp.mryau@gmail.com  Thu Dec 28 14:31:27 2017
Return-Path: <ssp.mryau@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 5A9CF3C10F
 for <ctypes@lists.ocaml.org>; Thu, 28 Dec 2017 14:31:27 +0000 (GMT)
X-Cam-SpamDetails: score -0.2 from SpamAssassin-3.4.1-1819401 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.216.173 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [209.85.216.173 listed in wl.mailspike.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (ssp.mryau[at]gmail.com)
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-qt0-f173.google.com ([209.85.216.173]:41657)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1eUZLd-000OL5-8Y (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <ssp.mryau@gmail.com>); Thu, 28 Dec 2017 14:39:55 +0000
Received: by mail-qt0-f173.google.com with SMTP id i40so51299670qti.8
 for <ctypes@lists.ocaml.org>; Thu, 28 Dec 2017 06:39:53 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc; bh=iMbxAMbCBJjFUPlefnM6TfVKO4oqnJ1qwriH1Hnzi5o=;
 b=ovxqwEehK7A42zg2oDxQHz6iR3t2aqOccZv4MgnBzAO3bvSZfw+3euPKKvHe0A3t/r
 CA/INR0Flr7N2ykYTAZ7xHMWJhJKEkOKT9DHjXq5DP4HgV9ogr6OIoaRoIq2xpPlKB7g
 AYW/1S6Ahcwfc/48Q9pvsXuWWjjJx/74DH4k8apN6yrfjMRxRHlr1IcVxiNYVjseP/pY
 DRbHHwMO1lKA4+8WVFAEYOJA0YiKRKJMXicrTb1GDcqyE3x+63V4GLA04ySYcRzCe8e+
 MEhK4e/sgcwEScR4i81r4yV8QRmjDnlf+MggD3X1ADo94dGbc+w4EwXmd7SwZBwbP9Z5
 yJJQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc;
 bh=iMbxAMbCBJjFUPlefnM6TfVKO4oqnJ1qwriH1Hnzi5o=;
 b=e/xDHxSy/Vtr0PZRsS1bL/WwGqqs+ggvIV+LcPguaxSjnyf+GAVq7Nk1zztVH0Acz0
 V+CdqmmnVeIfk2eHwYHK/ZWq98iTxutPVk2Plh0YHjrKwUE72IcWC8u7wuJISLeGLjno
 WbySGpbDIWA+63hpuXxq5eoqLoBxmZgSytc/BD+wNzUwMKsyN0QU8Al29Vl6WbObwDVE
 W2U08sCP7bfNYgvv0/HKE81/7Ku/PH3pxy+LVXxyO3RrGYrz47Q4dJtCCRve1p5fmh7p
 a64J3CHlf+7eNv7WneuF6jKdDrn8EYG+pQbtniobjdeq3nUJqliEq0rWvi0Xx4ovGY0E
 S0Lw==
X-Gm-Message-State: AKGB3mKW++nDWSe45BniN88dB8recEEYUkzwqyzgB+94P6D3vKCSx6gW
 ezi/tLFWYqNv0A4jR54HfOOb4kdgWe+cS1uQq8s=
X-Google-Smtp-Source: ACJfBovbRzz8Wd7r1T9pC8xj+mJtgB//u67ipzF4d/As6trZaooV25ph315fEnezdO5e6m2u1ipL7oz89J9v2L4Lus0=
X-Received: by 10.200.51.107 with SMTP id u40mr43635007qta.152.1514471992682; 
 Thu, 28 Dec 2017 06:39:52 -0800 (PST)
MIME-Version: 1.0
Received: by 10.140.40.209 with HTTP; Thu, 28 Dec 2017 06:39:52 -0800 (PST)
In-Reply-To: <1C830DDE-E90F-4D04-8365-F89435029E39@internode.on.net>
References: <E64B00E3-3164-4227-8627-040360B0C274@internode.on.net>
 <CAOUGqWwpa1ucHXm6eii-+Y0H-J_MoXQf5RwEk9b8gC7AVdtyUg@mail.gmail.com>
 <1C830DDE-E90F-4D04-8365-F89435029E39@internode.on.net>
From: Serge Sivkov <ssp.mryau@gmail.com>
Date: Thu, 28 Dec 2017 19:39:52 +0500
Message-ID: <CAOUGqWzeziQJWaZyF5nS2AP6Mk5-umGL9wKaQPqVBWuDcPEWhw@mail.gmail.com>
To: john skaller <skaller@internode.on.net>
Content-Type: multipart/alternative; boundary="001a113941f42570160561677d05"
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Passing Caml function to C
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 28 Dec 2017 14:31:27 -0000

--001a113941f42570160561677d05
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

Yes, that's right.

WBR, ssp

2017-12-28 19:15 GMT+05:00 john skaller <skaller@internode.on.net>:

>
> > On 29 Dec. 2017, at 00:59, Serge Sivkov <ssp.mryau@gmail.com> wrote:
> >
> > An one of simplest methods will be to use
> > Callback.register name callback_func
> > on OCaml side and to use something like:
> > closure_f =3D caml_named_value(name);
> > ml_reply =3D caml_callback(*closure_f, ml_arg);
> > on C side.
>
> So the user supplied name is used to associate the code
> and data across the boundary?
>
>
> =E2=80=94
> john skaller
> skaller@users.sourceforge.net
> http://felix-lang.org
>
>

--001a113941f42570160561677d05
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>Yes, that&#39;s right.<br><br></div>WBR, ssp<br></div=
><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">2017-12-28 19:15=
 GMT+05:00 john skaller <span dir=3D"ltr">&lt;<a href=3D"mailto:skaller@int=
ernode.on.net" target=3D"_blank">skaller@internode.on.net</a>&gt;</span>:<b=
r><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:=
1px #ccc solid;padding-left:1ex"><span class=3D""><br>
&gt; On 29 Dec. 2017, at 00:59, Serge Sivkov &lt;<a href=3D"mailto:ssp.mrya=
u@gmail.com">ssp.mryau@gmail.com</a>&gt; wrote:<br>
&gt;<br>
&gt; An one of simplest methods will be to use<br>
&gt; Callback.register name callback_func<br>
&gt; on OCaml side and to use something like:<br>
&gt; closure_f =3D caml_named_value(name);<br>
&gt; ml_reply =3D caml_callback(*closure_f, ml_arg);<br>
&gt; on C side.<br>
<br>
</span>So the user supplied name is used to associate the code<br>
and data across the boundary?<br>
<div class=3D"HOEnZb"><div class=3D"h5"><br>
<br>
=E2=80=94<br>
john skaller<br>
<a href=3D"mailto:skaller@users.sourceforge.net">skaller@users.sourceforge.=
net</a><br>
<a href=3D"http://felix-lang.org" rel=3D"noreferrer" target=3D"_blank">http=
://felix-lang.org</a><br>
<br>
</div></div></blockquote></div><br></div>

--001a113941f42570160561677d05--

From yallop@gmail.com  Thu Dec 28 16:23:32 2017
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-43.csi.cam.ac.uk (ppsw-43.csi.cam.ac.uk [131.111.8.143])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 1D6EE3C10F
 for <ctypes@lists.ocaml.org>; Thu, 28 Dec 2017 16:23:32 +0000 (GMT)
X-Cam-SpamDetails: score -0.2 from SpamAssassin-3.4.1-1819401 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.223.174 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 * -0.0 RCVD_IN_MSPIKE_H2 RBL: Average reputation (+2)
 *      [209.85.223.174 listed in wl.mailspike.net]
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-io0-f174.google.com ([209.85.223.174]:35180)
 by ppsw-43.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1eUb66-0001Cq-oI (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Thu, 28 Dec 2017 16:32:00 +0000
Received: by mail-io0-f174.google.com with SMTP id 14so32306414iou.2
 for <ctypes@lists.ocaml.org>; Thu, 28 Dec 2017 08:31:58 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc:content-transfer-encoding;
 bh=qdJ2TJSZw+429ZOYpOfta3vepYY6pxUPZ1boaMsl9YA=;
 b=VPZuZqwzlqHl6/3eJPP5F6zjwE8qCvvjl5Qj0WwtStiMR1+Tw5KGRyFh/m2knzlEUk
 VmA2ggBH11Zaj8CWxxI6cp40+L8HtR8B0PeJHPkNfQrEKepHZFa3H44c3cc6Gkrh7lyc
 Lx/7gaWWah9i9tmyXsNZoG8//anydssb5DPtUMbm1tZP3LvOeGbNBhQ5fmvj4NxdY5ZF
 vQoWGY4lWcqGXR6f8CO6iYuBx78Ut5J/xBsHf0uzPAdgmoISwZ7kvcYE9Jn7hrzhOwKQ
 Mr3q/OpQwZYR/p6xx3D5bdkmC3WJCl1f+Bgbw4HngzPQ4gOrAd/LM/qPqhzK+7PLg+Ax
 jS0A==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc:content-transfer-encoding;
 bh=qdJ2TJSZw+429ZOYpOfta3vepYY6pxUPZ1boaMsl9YA=;
 b=VIXJyfHHF6hX+hB2/anXI0SljOkBaycsbB0uz7/1duG5XI2jmv+ui8JcxbKS2J09xe
 LCtikh/v/j7J5Wl4dGmSPtBSzfCafqYGglDky9FMdqAUKFs5MhL2JKpBWFN+EMo453Lj
 DAebcJH21lotBxwfLLl1t6ro9xLK6zEOcVYmz4+PFL9QZ42Je3hFGJKGQaQ5RsZQpKW6
 ig1M1bcTYtP8bCWJm8PRjOGDm7y/Jce2zwTpxF822iwZMJT/yy5xYDrFZ7k8HD4HWUd0
 UHOp0wM7IIPZOmTM7TaPV9nZoYkDcQoMEfGBwumgKFG46vpSgzS4SvPT0NbxUtcHsl6H
 2zYw==
X-Gm-Message-State: AKGB3mIu9bYy2dvYhNH9rl5P7g5IkTA6kz/TTEMAfyTmMwgU6OWE1i95
 BwqR8lm2jM/+OzbuVo0I5kf7tWdsCHaSx2f8HcE=
X-Google-Smtp-Source: ACJfBovwQ7UIuhMoaQZyjC1dWRBQecapEThf+A8uGhRSX05WwH+pg5YK32587DQlAHqMM6l360A0ak6LsSWbxgASS0U=
X-Received: by 10.107.129.200 with SMTP id l69mr41255267ioi.158.1514478717367; 
 Thu, 28 Dec 2017 08:31:57 -0800 (PST)
MIME-Version: 1.0
Received: by 10.79.202.4 with HTTP; Thu, 28 Dec 2017 08:31:56 -0800 (PST)
In-Reply-To: <0EF0083A-B8F8-4481-96DD-2C0F3A9F527D@internode.on.net>
References: <1A47B410-EF50-455C-B549-3CF320C33469@internode.on.net>
 <CAAxsn=FikaVsQhv9P63za6WNXXPT-6JoCJogtKH1fmduOXTh+Q@mail.gmail.com>
 <57BB673D-C1F1-42EA-8B65-6DF54E290E88@internode.on.net>
 <CAAxsn=FgUw2tzm-vxToCJGYUX9FOxHSZ585VNMqTsHLBmUd4hw@mail.gmail.com>
 <0EF0083A-B8F8-4481-96DD-2C0F3A9F527D@internode.on.net>
From: Jeremy Yallop <yallop@gmail.com>
Date: Thu, 28 Dec 2017 16:31:56 +0000
Message-ID: <CAAxsn=FVf91EnWcarWmhsWtu1EZp8_RvCCLqg8uNVFZP8Rp60Q@mail.gmail.com>
To: john skaller <skaller@internode.on.net>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Help with strings
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 28 Dec 2017 16:23:32 -0000

On 27 December 2017 at 23:37, john skaller <skaller@internode.on.net> wrote=
:
> BTW: Just though I=E2=80=99d say, Ctypes is a pretty nice library.
> Well done! There=E2=80=99s no such thing as a perfect foreign interface
> to C, but Ctypes handles much of it reasonably well.

Thank you!  I appreciate the kind words.

>>   'enum' builds a 'typ' value from a mapping between constants and OCaml=
 values
>>   http://ocamllabs.io/ocaml-ctypes/Cstubs.Types.TYPE.html#VALenum
>
> Hmm. What does it mean when it says =E2=80=9Cthe size and alignment are r=
etrieved=E2=80=9D??
> The only way to do that would be to generate C code and measure it.

Indeed, that's exactly what happens.  The C standard doesn't place
many constraints on the layout of enums, so there isn't really another
way of building enum types that's guaranteed to work.

> Looking at the yaml example, jbuilder is used with a ppx to do this at
> during Ocaml compilation, is that correct?

I don't think there's a ppx involved, but there is a code generation
step (or, rather, a couple of code generation steps).

> Hmm. How can I contribute easily. Its too early for me to actually
> write docs. However I could create an issue with copies of your
> email comments for someone to integrate.

Issues suggesting improvements to the documentation are always welcome!

Kind regards,

Jeremy

From yallop@gmail.com  Thu Dec 28 16:25:57 2017
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 30DAE3C10F
 for <ctypes@lists.ocaml.org>; Thu, 28 Dec 2017 16:25:57 +0000 (GMT)
X-Cam-SpamDetails: score -0.2 from SpamAssassin-3.4.1-1819401 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.223.170 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H2 RBL: Average reputation (+2)
 *      [209.85.223.170 listed in wl.mailspike.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-io0-f170.google.com ([209.85.223.170]:44184)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1eUb8S-000NBY-7R (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Thu, 28 Dec 2017 16:34:25 +0000
Received: by mail-io0-f170.google.com with SMTP id w127so38823689iow.11
 for <ctypes@lists.ocaml.org>; Thu, 28 Dec 2017 08:34:24 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc; bh=Ag6W0HIhFj05nKEARS03SshmyAuU9MF0obhufOWhDs0=;
 b=c5XzyTn3SHuVbFFaW13+r9beMqrVESW/zv8eNetyefry5qH2wHbmak5XIMqxF9nKlR
 gh3Qo4jF3Rc01mFCKIEcFbuOcXlhi4YNXkmADnrDDffKSbkPm/oR7YwWox6qkXrhewkh
 7d4MM41vx+q5n742ZBHlrAsTUOclRXpan3EaDV+H8d8GqeyBe699uFBpFvC005l/SYoR
 3NEhgulXq2DRAnv115Ejy6X/cDic9+xbclN4zV7Owa+f7QDlDZnKVp6XWW75aLKAAE05
 Kuhy0jPDrJ/P6gDWSFBYrj2zaGxu7xz6G4E2xSqBVYgVnh8Rj1B4RfWfqPzL1ipioBXi
 Bh3A==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc;
 bh=Ag6W0HIhFj05nKEARS03SshmyAuU9MF0obhufOWhDs0=;
 b=pqGd4WvsM3DUjoftAFVCzd+nQGexNCRyDx9hemBkIqWExOg6vN5Z7ifqEccxlIE9a3
 rQNOXkihpyZLtwHUZiNgzD6WE0VRwNy9sS7DY/QubTZwBio85wnR7MmJxMTLN3XXwcIj
 j6GDqqHC1qo0EHiJuDSOga299JytC/s6YGYWrU4+DX8RPReasn1E/Iygwy7MjuaA04zA
 0/dDl4fvXIhBt6H+WOAiWYzbnwRxxVpXpsWtyrKFqnoFXSSPajdluJg+L0hBV7Vrt0Ye
 TzICMjVfXVVekJ2Ie9Tm0AyULXSYsiVCCIx3AL/cDB8Cpd2Ll5KN25Zo4y4w5ALKIQqO
 syGQ==
X-Gm-Message-State: AKGB3mKezz0+rALooU2SXKXnaoT+Rzy8FDlztx/tXiq78TIz8/IQqQ8C
 AVERPTt/dpjEzt/1da8Gf5JF7CInk2F7sJHF74GQwA==
X-Google-Smtp-Source: ACJfBosL5ukzoDpdWNL3vSaD1YiBvtx/wCbyPuiwlyfzHn6R91KcGpW8agqDTOgOQfpSeKZRs8tFPgAbzuPhcv3Xfpw=
X-Received: by 10.107.174.147 with SMTP id n19mr42572187ioo.131.1514478863098; 
 Thu, 28 Dec 2017 08:34:23 -0800 (PST)
MIME-Version: 1.0
Received: by 10.79.202.4 with HTTP; Thu, 28 Dec 2017 08:34:22 -0800 (PST)
In-Reply-To: <CAHYOizG3yv1aTgM0FQMtSKpg4u5M5dRZE2JMS787vf_vn6LLWQ@mail.gmail.com>
References: <1A47B410-EF50-455C-B549-3CF320C33469@internode.on.net>
 <CAAxsn=FikaVsQhv9P63za6WNXXPT-6JoCJogtKH1fmduOXTh+Q@mail.gmail.com>
 <CAHYOizG3yv1aTgM0FQMtSKpg4u5M5dRZE2JMS787vf_vn6LLWQ@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
Date: Thu, 28 Dec 2017 16:34:22 +0000
Message-ID: <CAAxsn=ESCXnRkb=n+jGVz92oBkQCZBpsMJtRkycaTs+yUr5kSg@mail.gmail.com>
To: Andy Ray <evilkidder@gmail.com>
Content-Type: text/plain; charset="UTF-8"
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Help with strings
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 28 Dec 2017 16:25:57 -0000

On 28 December 2017 at 00:09, Andy Ray <evilkidder@gmail.com> wrote:
> More generally do the arguments to a function call live long enough to create [view]s of a
> returned value?

Hmm.  This certainly ought to be the behaviour, but I think that not
enough is done to guarantee it at the moment.  I've made a note to
take a closer look
(https://github.com/ocamllabs/ocaml-ctypes/issues/556#issuecomment-354314966).

From yallop@gmail.com  Thu Dec 28 16:36:18 2017
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 328413C10F
 for <ctypes@lists.ocaml.org>; Thu, 28 Dec 2017 16:36:18 +0000 (GMT)
X-Cam-SpamDetails: score -0.2 from SpamAssassin-3.4.1-1819401 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.214.48 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [209.85.214.48 listed in wl.mailspike.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-it0-f48.google.com ([209.85.214.48]:43985)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1eUbIG-00047q-hx (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Thu, 28 Dec 2017 16:44:46 +0000
Received: by mail-it0-f48.google.com with SMTP id u62so28682345ita.2
 for <ctypes@lists.ocaml.org>; Thu, 28 Dec 2017 08:44:32 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc:content-transfer-encoding;
 bh=52yqJLLc9+m1IpmCIcsycN7MWfZeL3oSU582HfBwzZI=;
 b=f2kKUKWzjf75ZKvN+xte5aC3uXhpbcEk5Yf18erZoAj8sgfALcMIJnnBbR5dBxym7g
 lrtoAxLcFb8iDH9QIeZHa5QjuV9/hOdB5W1aENs/Cl4pFMa3tgl/7LpKV1ZHL22bwnVo
 ARtsSzwGT94A/ay1fhNHfUvyKtxLvKwnyWjTEp3gV1GmRy3fbG7NWqzAGZReoayvBgwh
 HzWd26xhmL7y4InO1C+RGIeQCz5tlz5Um6wfulOStTrBxuAhUD9iz7WDjXi0CQnabgNG
 iNl+ZK3cLso0VB25YprgH/xXGqkEiWnZhlgPDH36FhMdXUhZmuCANU/Rx7H9jRsIUf0F
 4vEA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc:content-transfer-encoding;
 bh=52yqJLLc9+m1IpmCIcsycN7MWfZeL3oSU582HfBwzZI=;
 b=N12W8hqBN4YkPP445BgvpF35j1NPsViI4fmmvOFUCAReBjTYbZAUynB4atr8jOMi8Y
 nl9uW2yTrKA8ayaUEj3QZAOERExsUHUgxnsyy10zR1qUWjRt6S9/xsocQqMXLENeeH1t
 1nglr/TDGCbxe8dE78VX5nvJWpIsWhF7yI6b2oMTRthNeGeBwbXn8XAgE+h6Y3oTawxf
 sxrLmsfB2B0YmUzoHHk46b4txymoob3NQvcXdNtwJcOKJRD2nQrpH657niu5siNbMlqA
 1SZiR9tv3aNtKANFM/2IMKI9c0tEIyEvWIBj/MOHPEq5PquNKOfdGHW34mrly/TWBJeB
 bI8A==
X-Gm-Message-State: AKGB3mIcUis0TU6v+DSCynIrHcvTgSbRi69fvpp3hppojdyPcPRbyfmN
 hBxneW7gpmbhqdIUEWPElEvhfTB4EjpiLpwrfaU=
X-Google-Smtp-Source: ACJfBottZVy3xeCN9trqoFZkUiJTiemQkhgUmowa+QKRR2J6SBKkvY2ju6baBpHkbqTcA18jaluj3/68dQSfMbhPWbI=
X-Received: by 10.36.181.80 with SMTP id j16mr44880568iti.118.1514479471501;
 Thu, 28 Dec 2017 08:44:31 -0800 (PST)
MIME-Version: 1.0
Received: by 10.79.202.4 with HTTP; Thu, 28 Dec 2017 08:44:30 -0800 (PST)
In-Reply-To: <E64B00E3-3164-4227-8627-040360B0C274@internode.on.net>
References: <E64B00E3-3164-4227-8627-040360B0C274@internode.on.net>
From: Jeremy Yallop <yallop@gmail.com>
Date: Thu, 28 Dec 2017 16:44:30 +0000
Message-ID: <CAAxsn=GiPAS-goitbn42yJj9Mhwo+SGUD-q7iyPMgLORN+NA0w@mail.gmail.com>
To: john skaller <skaller@internode.on.net>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Passing Caml function to C
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 28 Dec 2017 16:36:18 -0000

On 28 December 2017 at 13:05, john skaller <skaller@internode.on.net> wrote=
:
> There=E2=80=99s some machinery for this but .. well I am suspicious :)
>
> How can this possibly work?
>
> Caml functions are closures,  the only way you could pass
> a closure would be to generate a thunk. I=E2=80=99m suspicious that
> this doesn=E2=80=99t work in general. And you would need to find
> a place to put the thunk which the OS allows you to execute.

Serge Sivkov has explained how things work using OCaml's standard
Callback module.  Ctypes provides a slightly different mechanism.

The interface is the 'funptr' function that builds a typed description
of a C function pointer:

   http://ocamllabs.io/ocaml-ctypes/Foreign.html#VALfunptr

The implementation of funptr uses the closure functions in the libffi
library to dynamically generate function pointers

   http://www.chiark.greenend.org.uk/doc/libffi-dev/html/The-Closure-API.ht=
ml

There's also a second implementation of funptr in progress that
provides a simpler mechanism for the case where the OCaml function to
be passed to C is known at code-generation time.

Kind regards,

Jeremy

From skaller@internode.on.net  Thu Dec 28 16:55:49 2017
Return-Path: <skaller@internode.on.net>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 567B33C10F
 for <ctypes@lists.ocaml.org>; Thu, 28 Dec 2017 16:55:49 +0000 (GMT)
X-Cam-SpamDetails: score 0.4 from SpamAssassin-3.4.1-1819401 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [150.101.137.148 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 T_RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 *  1.0 RDNS_DYNAMIC Delivered to internal network by host with
 *      dynamic-looking rDNS
 *  0.2 HELO_DYNAMIC_DHCP Relay HELO'd using suspicious hostname (DHCP)
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from ipmailnode02.adl6.internode.on.net ([150.101.137.148]:21506)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtp id 1eUbbM-000Edo-g0 (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <skaller@internode.on.net>); Thu, 28 Dec 2017 17:04:17 +0000
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A2C4AAD8IkVaAACNtDENThoBAQEBAQIBA?=
 =?us-ascii?q?QEBCAEBAQGEJIEbhAabEyeJB5A3JYUgAoUQFAEBAQEBAQEBAQ8BNIVzAQEBAgE?=
 =?us-ascii?q?jVgULCxoCGQ0CAiE2BhOKFgMNpjBugieHMg2DDgEBAQEBAQEDAQEBAQEBAQEBH?=
 =?us-ascii?q?4EPgn2FegyCeYJrRYFugxcxgjQFow89iAOINJh7jWKFXIUBNoFxegpnAYF+CTa?=
 =?us-ascii?q?ELGSKGAEBAQ?=
Received: from pa49-180-141-0.pa.nsw.optusnet.com.au (HELO [192.168.8.100])
 ([49.180.141.0])
 by ipmail02.adl6.internode.on.net with ESMTP; 29 Dec 2017 03:34:10 +1030
Content-Type: text/plain; charset=utf-8
Mime-Version: 1.0 (Mac OS X Mail 10.1 \(3251\))
From: john skaller <skaller@internode.on.net>
In-Reply-To: <CAAxsn=FVf91EnWcarWmhsWtu1EZp8_RvCCLqg8uNVFZP8Rp60Q@mail.gmail.com>
Date: Fri, 29 Dec 2017 04:04:09 +1100
Content-Transfer-Encoding: quoted-printable
Message-Id: <229A9A72-8647-428C-8A26-688E5CF888C6@internode.on.net>
References: <1A47B410-EF50-455C-B549-3CF320C33469@internode.on.net>
 <CAAxsn=FikaVsQhv9P63za6WNXXPT-6JoCJogtKH1fmduOXTh+Q@mail.gmail.com>
 <57BB673D-C1F1-42EA-8B65-6DF54E290E88@internode.on.net>
 <CAAxsn=FgUw2tzm-vxToCJGYUX9FOxHSZ585VNMqTsHLBmUd4hw@mail.gmail.com>
 <0EF0083A-B8F8-4481-96DD-2C0F3A9F527D@internode.on.net>
 <CAAxsn=FVf91EnWcarWmhsWtu1EZp8_RvCCLqg8uNVFZP8Rp60Q@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
X-Mailer: Apple Mail (2.3251)
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Help with strings
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 28 Dec 2017 16:55:49 -0000


> On 29 Dec. 2017, at 03:31, Jeremy Yallop <yallop@gmail.com> wrote:

>> Hmm. What does it mean when it says =E2=80=9Cthe size and alignment =
are retrieved=E2=80=9D??
>> The only way to do that would be to generate C code and measure it.
>=20
> Indeed, that's exactly what happens.  The C standard doesn't place
> many constraints on the layout of enums, so there isn't really another
> way of building enum types that=E2=80=99s guaranteed to work.


Layout rules in general for C are fully fixed by the ABI.
That=E2=80=99s platform dependent BUT you only need to figure out
the ABI once per platform. Otherwise, there=E2=80=99d be no way
to bind to the C standard library which is usually the vendor
provided access to the OS kernel.

=E2=80=94
john skaller
skaller@users.sourceforge.net
http://felix-lang.org


From skaller@internode.on.NET  Thu Dec 28 17:26:09 2017
Return-Path: <skaller@internode.on.NET>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id C9F8F3C10F
 for <ctypes@lists.ocaml.org>; Thu, 28 Dec 2017 17:26:09 +0000 (GMT)
X-Cam-SpamDetails: score -0.8 from SpamAssassin-3.4.1-1819401 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [150.101.137.145 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [150.101.137.145 listed in wl.mailspike.net]
 * -0.0 T_RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from ipmail06.adl6.internode.on.net ([150.101.137.145]:18658)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1eUc4i-000q2F-1Y (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <skaller@internode.on.NET>); Thu, 28 Dec 2017 17:34:37 +0000
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A2CGAACh299ZAACNtDENURkBAQEBAQEBAQEBAQcBAQEBAYMvgRKBFYN6m0eIRY98L4UWAoUWAQIBAQEBAQIPATSFbAEBAQECASNWBQsLGAICGQ0CAiE2BhOKBgMNGKp2a4Inh0ANg28BAQEBAQEEAQEBAQEBAQEBAR6BDoIfhUIrgn+CXoIngxMvgjIFoQg8h16IE5gJjQCFMYRzgWWBAwpbAYJ0ghMcgXtiAQGLVQEBAQ
Received: from pa49-180-141-0.pa.nsw.optusnet.com.au (HELO [192.168.8.100])
 ([49.180.141.0])
 by ipmail06.adl6.internode.on.net with ESMTP; 29 Dec 2017 04:04:22 +1030
Content-Type: text/plain; charset=utf-8
Mime-Version: 1.0 (Mac OS X Mail 10.1 \(3251\))
From: john skaller <skaller@internode.on.net>
In-Reply-To: <CAAxsn=GiPAS-goitbn42yJj9Mhwo+SGUD-q7iyPMgLORN+NA0w@mail.gmail.com>
Date: Fri, 29 Dec 2017 04:34:15 +1100
Content-Transfer-Encoding: quoted-printable
Message-Id: <A34BF4AE-0CB1-4BDD-AF90-815F1CB14E37@internode.on.net>
References: <E64B00E3-3164-4227-8627-040360B0C274@internode.on.net>
 <CAAxsn=GiPAS-goitbn42yJj9Mhwo+SGUD-q7iyPMgLORN+NA0w@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
X-Mailer: Apple Mail (2.3251)
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Passing Caml function to C
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 28 Dec 2017 17:26:09 -0000


> On 29 Dec. 2017, at 03:44, Jeremy Yallop <yallop@gmail.com> wrote:
>=20
> Serge Sivkov has explained how things work using OCaml's standard
> Callback module.  Ctypes provides a slightly different mechanism.

> The implementation of funptr uses the closure functions in the libffi
> library to dynamically generate function pointers
>=20
>   =
http://www.chiark.greenend.org.uk/doc/libffi-dev/html/The-Closure-API.html=


The standard way to do that is

THUNK:
	JSR handler
	DATA data_address
	DATA code_address=E2=80=99

and you just pop the return address off the stack to get the
data and code addresses, leaving the return address of the call to =
THUNK.

But the thunk has to be in memory which is both writable and executable,
and usually that combination is disallowed for ordinary users for
security reasons. Hmmm.

In my system I use the=20

	void *client_data

pointer that callbacks, and the HOFs that accept them, almost always
have. However, the programmer has to TELL the compiler which
argument is the client data pointer.

This doesn=E2=80=99t require any thunks, but it doesn=E2=80=99t work =
without a client data pointer.

An amusing story .. except for those that had to deal with this massive
screw up ..  in older versions of Windows, the event callbacks were =
passed
the window handle. So you would store the client data in the window data
frame. There was only one problem: when you created a window,
your callback had to PUT the client data pointer into the window frame.
The problem was .. where did you GET that client data from, in a =
callback?

So what you did was put it into a global variable and hope and pray that
the very next callback was the create window callback so it picked
up the right data from the global variable.

MS fixed it with CreateWindowEx.

=E2=80=94
john skaller
skaller@users.sourceforge.net
http://felix-lang.org


From yallop@gmail.com  Thu Dec 28 18:45:43 2017
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 010C93C10F
 for <ctypes@lists.ocaml.org>; Thu, 28 Dec 2017 18:45:43 +0000 (GMT)
X-Cam-SpamDetails: score -0.2 from SpamAssassin-3.4.1-1819401 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.214.52 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [209.85.214.52 listed in wl.mailspike.net]
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-it0-f52.google.com ([209.85.214.52]:46932)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1eUdJi-000Se5-2D (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Thu, 28 Dec 2017 18:54:11 +0000
Received: by mail-it0-f52.google.com with SMTP id c16so4877620itc.5
 for <ctypes@lists.ocaml.org>; Thu, 28 Dec 2017 10:54:10 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc:content-transfer-encoding;
 bh=sRXkf88K7lubrCZMYZ84u22hcWxKaLe6P2zUGB9CAKg=;
 b=WghUfxTLZaqL73VHQyEnUAljoTmDdobjR/2tHS//W2YnZMcWf56iHtkql+w/NV3RAD
 CElXWBOiRI5TZQrD28mlLHj+JI7msuIa0LxLtGbgV8ArQqFZvrhFtwmPw7qFR2gNE1d7
 Jaag+5tgZjTfztCIxTR41uybjEAXARFpIAQdNyQT/mZMhMqXbU1cD+Ph+80Th3jcAgRA
 65T4BO1AhVJXxVFRvtk96MZ0HgDcLkt+8H045hLksvFgZ7ITdx8sbcnPgjlozYn8A00X
 eNz7G4XBAs/LkjGQfCMwu+zVipCLgCn+4Z5zbx1soyFwOHorMC/zyObd2O/P6Cx6uHVy
 ahhw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc:content-transfer-encoding;
 bh=sRXkf88K7lubrCZMYZ84u22hcWxKaLe6P2zUGB9CAKg=;
 b=TsQFZZHInVweVFyRvD6lFqIdHtg52TVzaoorshzeHu+wMyAoGT/NfhypzpYLAyrQ+M
 816ToTsnBsi6cgrAWpBr7HXe5+tPP0RlvujRKk6QOnmg/9kNWLJZCILfEFHQ9TAdJWcx
 ZelW37ojJUZ2D9whK+rCQmZaUhJkugjxqJKLBgJNHBCaULpMlug/7EArJ5e0KraeSojB
 qWzBRCrAuM3hsHBBRyl46r7bnPyAhKnck0Aj4VUJJHiQReHxCImaTWnai5T36Nwhu/2D
 UffFHXwgr7oSCdlB9d1Y5YTJ4cOgohQ1esI/WVrAT3NndfBhESa0HGT6ahAFa3qCCdIn
 Zs0g==
X-Gm-Message-State: AKGB3mJLW9Zi3ekZkGapom2APXDLiCIf2RIrv4hByoROitfnGxb0FZ91
 YshAhjeSdqxNJ98RZO8gXqg1Oa9ekG9FnZmvz74=
X-Google-Smtp-Source: ACJfBosjzOkqT/YQm8qCdx1mBBu/NHeUlt7PBAgejfD8wRKQ6gqWA+0EucsYHMV/aNWo482C2n9tr2oFyOOh0xXNS2g=
X-Received: by 10.36.9.146 with SMTP id 140mr42658497itm.54.1514487249331;
 Thu, 28 Dec 2017 10:54:09 -0800 (PST)
MIME-Version: 1.0
Received: by 10.79.202.4 with HTTP; Thu, 28 Dec 2017 10:54:08 -0800 (PST)
In-Reply-To: <229A9A72-8647-428C-8A26-688E5CF888C6@internode.on.net>
References: <1A47B410-EF50-455C-B549-3CF320C33469@internode.on.net>
 <CAAxsn=FikaVsQhv9P63za6WNXXPT-6JoCJogtKH1fmduOXTh+Q@mail.gmail.com>
 <57BB673D-C1F1-42EA-8B65-6DF54E290E88@internode.on.net>
 <CAAxsn=FgUw2tzm-vxToCJGYUX9FOxHSZ585VNMqTsHLBmUd4hw@mail.gmail.com>
 <0EF0083A-B8F8-4481-96DD-2C0F3A9F527D@internode.on.net>
 <CAAxsn=FVf91EnWcarWmhsWtu1EZp8_RvCCLqg8uNVFZP8Rp60Q@mail.gmail.com>
 <229A9A72-8647-428C-8A26-688E5CF888C6@internode.on.net>
From: Jeremy Yallop <yallop@gmail.com>
Date: Thu, 28 Dec 2017 18:54:08 +0000
Message-ID: <CAAxsn=FNUT36cnW+=xc750CfAXFVU_d9_seZYBN4tqOTniXX2Q@mail.gmail.com>
To: john skaller <skaller@internode.on.net>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Help with strings
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 28 Dec 2017 18:45:43 -0000

On 28 December 2017 at 17:04, john skaller <skaller@internode.on.net> wrote=
:
>> On 29 Dec. 2017, at 03:31, Jeremy Yallop <yallop@gmail.com> wrote:
>
>>> Hmm. What does it mean when it says =E2=80=9Cthe size and alignment are=
 retrieved=E2=80=9D??
>>> The only way to do that would be to generate C code and measure it.
>>
>> Indeed, that's exactly what happens.  The C standard doesn't place
>> many constraints on the layout of enums, so there isn't really another
>> way of building enum types that=E2=80=99s guaranteed to work.
>
> Layout rules in general for C are fully fixed by the ABI.
> That=E2=80=99s platform dependent BUT you only need to figure out
> the ABI once per platform.

Fair enough -- checking the ABI at configuration time could be made to
work, too.  But would there be much benefit?  Wouldn't it still be
necessary to generate C code (or do something similar, like parse
headers and evaluate constant expressions) to retrieve the values of
enumeration constants?

From skaller@internode.on.net  Thu Dec 28 19:23:24 2017
Return-Path: <skaller@internode.on.net>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 2E0E63C10F
 for <ctypes@lists.ocaml.org>; Thu, 28 Dec 2017 19:23:24 +0000 (GMT)
X-Cam-SpamDetails: score -0.8 from SpamAssassin-3.4.1-1819401 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [150.101.137.129 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [150.101.137.129 listed in wl.mailspike.net]
 * -0.0 T_RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from ipmail06.adl2.internode.on.net ([150.101.137.129]:45867)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtp id 1eUduB-000Slg-gc (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <skaller@internode.on.net>); Thu, 28 Dec 2017 19:31:52 +0000
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A2CxAADh299ZAACNtDENURoBAQEBAgEBAQEIAQEBAYRBgRWDeptHeZdIJYUgAoUWAQIBAQEBAQIPATSFbQEBAQIBI1YQCxoCJgICVwYTiharD2uCJ4s8AQEBAQEBAQMBAQEBAQEBAQEBHoEOgh+FQiuCSjWFBYMTL4IyBaFEh16gHJIxhHOBZYEDClsBgnSEKmKLVwEBAQ
Received: from pa49-180-141-0.pa.nsw.optusnet.com.au (HELO [192.168.8.100])
 ([49.180.141.0])
 by ipmail06.adl2.internode.on.net with ESMTP; 29 Dec 2017 06:01:47 +1030
Content-Type: text/plain; charset=utf-8
Mime-Version: 1.0 (Mac OS X Mail 10.1 \(3251\))
From: john skaller <skaller@internode.on.net>
In-Reply-To: <CAAxsn=FNUT36cnW+=xc750CfAXFVU_d9_seZYBN4tqOTniXX2Q@mail.gmail.com>
Date: Fri, 29 Dec 2017 06:31:45 +1100
Content-Transfer-Encoding: quoted-printable
Message-Id: <1526BC37-F412-4C9B-A185-C9387FEBD358@internode.on.net>
References: <1A47B410-EF50-455C-B549-3CF320C33469@internode.on.net>
 <CAAxsn=FikaVsQhv9P63za6WNXXPT-6JoCJogtKH1fmduOXTh+Q@mail.gmail.com>
 <57BB673D-C1F1-42EA-8B65-6DF54E290E88@internode.on.net>
 <CAAxsn=FgUw2tzm-vxToCJGYUX9FOxHSZ585VNMqTsHLBmUd4hw@mail.gmail.com>
 <0EF0083A-B8F8-4481-96DD-2C0F3A9F527D@internode.on.net>
 <CAAxsn=FVf91EnWcarWmhsWtu1EZp8_RvCCLqg8uNVFZP8Rp60Q@mail.gmail.com>
 <229A9A72-8647-428C-8A26-688E5CF888C6@internode.on.net>
 <CAAxsn=FNUT36cnW+=xc750CfAXFVU_d9_seZYBN4tqOTniXX2Q@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
X-Mailer: Apple Mail (2.3251)
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Help with strings
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 28 Dec 2017 19:23:24 -0000


>> Layout rules in general for C are fully fixed by the ABI.
>> That=E2=80=99s platform dependent BUT you only need to figure out
>> the ABI once per platform.
>=20
> Fair enough -- checking the ABI at configuration time could be made to
> work, too.  But would there be much benefit?  Wouldn't it still be
> necessary to generate C code (or do something similar, like parse
> headers and evaluate constant expressions) to retrieve the values of
> enumeration constants?

I don=E2=80=99t know. However at present Cstubs stuff is really =
worrying.
The process involves generating C just so you can get the
information to then generate some Ocaml. The resulting Ocaml
is fragile, because it only works on the platform you generated it on.

It doesn=E2=80=99t work for cross compilation, and it doesn=E2=80=99t =
have the usual
properties of pure Ocaml that it =E2=80=9Cjust works=E2=80=9D on all =
platforms
(which is really BIG plus IMHO .. write once, run anywhere).

On the other hand just generating C, compiling it, and using
that C code everywhere removes some steps. You still have
to compile the C on the target platform, but the Ocaml binding
to it is invariant (Ctypes uses the ABI data to interpret the terms).

I think the point is, why generate C just so you can generete
platform dependent Ocaml, when you can just generate the C
and bind to the C you generated? You have to compile the C
in both cases, but in the second case you just link to it,
and you have to link to the foreign library anyhow.

Of course I=E2=80=99m using a script which parses the C header files
to generate the bindings, so generating some extra C only
has an O(1) cost.

=E2=80=94
john skaller
skaller@users.sourceforge.net
http://felix-lang.org


From yallop@gmail.com  Thu Dec 28 20:29:41 2017
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-43.csi.cam.ac.uk (ppsw-43.csi.cam.ac.uk [131.111.8.143])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 482673C10F
 for <ctypes@lists.ocaml.org>; Thu, 28 Dec 2017 20:29:41 +0000 (GMT)
X-Cam-SpamDetails: score -0.2 from SpamAssassin-3.4.1-1819401 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.214.51 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [209.85.214.51 listed in wl.mailspike.net]
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-it0-f51.google.com ([209.85.214.51]:36743)
 by ppsw-43.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1eUewK-00008F-oL (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Thu, 28 Dec 2017 20:38:09 +0000
Received: by mail-it0-f51.google.com with SMTP id d16so29816062itj.1
 for <ctypes@lists.ocaml.org>; Thu, 28 Dec 2017 12:38:08 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc; bh=pOWZDAYNsnLH0iRrddzLsp4q/+yqDdKyPy/PKCwQtKE=;
 b=Q7FwmawqfJVaWB2FCZvrAE7lhti55//Tzl3pjj7dQ5LA+DOsJ98iXuq7AenicOz3Tz
 ivgRQTvbvAqc7zSqxyEZgFR3B6sFUVlGElRLzQx+ELgRafFi0nkciI/rI+jRnCvtrXo9
 r/wgxu3EveFLW+mppzYqs+Hd1T/ZB1BeeFjjL7/TZgYLzUF7CaROy2AYxa/T8wZOXCge
 SHf6QaAo+HpSIS9P8QbEaQOxVOfTvWPKClyRbe7qQUQqynhdTPS5VkHzJRowhoAU8zSA
 2imjEPQj+LbGLvElyJMLq+b8Tr7/dM3XpVFl/Coynke74I6LElZfBEV2rUeRU1Tlfja3
 ldHg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc;
 bh=pOWZDAYNsnLH0iRrddzLsp4q/+yqDdKyPy/PKCwQtKE=;
 b=uBr1wjLLZKEdcpAV9SDL46/yy3KxSYNf2Nnxnvo+dUD/IUrODsFVMQkDtKTqZqweOt
 gVjTsO5b272QCDlVbnNu+vLPctXIA4lrU3wPSPylbYeqXiuIpdJePUrEC8N3TD7E6StN
 FTVBzztczfKeZ7Vbi2ijHQjYwrlAs6KQcK3GITPR5luU7UeZ3K47S7bDXKCj6BVuISVF
 5Cfv/AwFMFcvgKFzDmV9VBRE1i3nR3hF3T4fgfd4PheS2bRLfkUwDiZp8gTrRln7DzGf
 TkPnVAILqBbfJp1iYQyl3TsLeNVR3aOJuxfclg3u2arDPT4FaD9Gje39vViXLRGDT/QI
 SR8Q==
X-Gm-Message-State: AKGB3mJpjpjdmZ7cf/S20jkx6NdSzddWzRY1vn1CqqYEOfkbIIwl2SSi
 bMBPYCOj6F112KoLAFXvkv9tHOACkELsoY/EL94=
X-Google-Smtp-Source: ACJfBovkabqcZTuWXrlA5LqVpHj+t47MFFjBJv7ae0Jkz5sGC7t58dH90gVwkrfG1Fduan/5aoMZvZGn4bvxPVMWVAo=
X-Received: by 10.36.181.80 with SMTP id j16mr45731854iti.118.1514493487501;
 Thu, 28 Dec 2017 12:38:07 -0800 (PST)
MIME-Version: 1.0
Received: by 10.79.202.4 with HTTP; Thu, 28 Dec 2017 12:38:06 -0800 (PST)
In-Reply-To: <1526BC37-F412-4C9B-A185-C9387FEBD358@internode.on.net>
References: <1A47B410-EF50-455C-B549-3CF320C33469@internode.on.net>
 <CAAxsn=FikaVsQhv9P63za6WNXXPT-6JoCJogtKH1fmduOXTh+Q@mail.gmail.com>
 <57BB673D-C1F1-42EA-8B65-6DF54E290E88@internode.on.net>
 <CAAxsn=FgUw2tzm-vxToCJGYUX9FOxHSZ585VNMqTsHLBmUd4hw@mail.gmail.com>
 <0EF0083A-B8F8-4481-96DD-2C0F3A9F527D@internode.on.net>
 <CAAxsn=FVf91EnWcarWmhsWtu1EZp8_RvCCLqg8uNVFZP8Rp60Q@mail.gmail.com>
 <229A9A72-8647-428C-8A26-688E5CF888C6@internode.on.net>
 <CAAxsn=FNUT36cnW+=xc750CfAXFVU_d9_seZYBN4tqOTniXX2Q@mail.gmail.com>
 <1526BC37-F412-4C9B-A185-C9387FEBD358@internode.on.net>
From: Jeremy Yallop <yallop@gmail.com>
Date: Thu, 28 Dec 2017 20:38:06 +0000
Message-ID: <CAAxsn=GQ9q3Fgq4+8xv=pXx1s7Q6-0S4A9-5jeGaqW30NnDbFQ@mail.gmail.com>
To: john skaller <skaller@internode.on.net>
Content-Type: text/plain; charset="UTF-8"
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Help with strings
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 28 Dec 2017 20:29:41 -0000

Dear John,

On 28 December 2017 at 19:31, john skaller <skaller@internode.on.net> wrote:
> I think the point is, why generate C just so you can generete
> platform dependent Ocaml, when you can just generate the C
> and bind to the C you generated?

I'm not sure it's exactly what you have in mind, but there is
something rather like this on the roadmap:

   https://github.com/ocamllabs/ocaml-ctypes/issues/266
   https://github.com/ocamllabs/ocaml-ctypes/pull/296

As you say, the new approach will provide better support for cross compilation.

> You have to compile the C
> in both cases, but in the second case you just link to it,
> and you have to link to the foreign library anyhow.

That's the usual situation, but it's occasionally useful to bind
static elements (struct & union definitions, compile-time constants,
etc.) only, in which case it's preferable to pull all the
layout/constant information into the generated OCaml code, and avoid
the need to link in C.  For example, the Profuse library, which
implements the FUSE protocol, does exactly that:

   https://github.com/effuse/profuse/tree/master/lib_gen

Kind regards,

Jeremy

From skaller@internode.on.net  Fri Dec 29 00:24:50 2017
Return-Path: <skaller@internode.on.net>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 6F7393C10F
 for <ctypes@lists.ocaml.org>; Fri, 29 Dec 2017 00:24:50 +0000 (GMT)
X-Cam-SpamDetails: score -0.8 from SpamAssassin-3.4.1-1819401 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [150.101.137.131 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [150.101.137.131 listed in wl.mailspike.net]
 * -0.0 T_RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from ipmail07.adl2.internode.on.net ([150.101.137.131]:50798)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1eUibt-0000d0-1C (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <skaller@internode.on.net>); Fri, 29 Dec 2017 00:33:19 +0000
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A2ClAwDh299ZAACNtDENURkBAQEBAQEBAQEBAQcBAQEBAYMvgRKBFYN6iniQLZFAhyMlhSAChRYBAgEBAQEBAg8BNIVtAgEDIwRSECUCJgICUQYGE7Ula4FtOos8AQEBAQEBAQMBAQEBAQEBAQEfgQ6CH4VCKwuLDC+CMgWhRIdeoBwekhOEc4FlgQMKWwGCdIITHIF7YotXAQEB
Received: from pa49-180-141-0.pa.nsw.optusnet.com.au (HELO [192.168.8.100])
 ([49.180.141.0])
 by ipmail07.adl2.internode.on.net with ESMTP; 29 Dec 2017 11:02:18 +1030
Content-Type: text/plain; charset=utf-8
Mime-Version: 1.0 (Mac OS X Mail 10.1 \(3251\))
From: john skaller <skaller@internode.on.net>
In-Reply-To: <CAAxsn=GQ9q3Fgq4+8xv=pXx1s7Q6-0S4A9-5jeGaqW30NnDbFQ@mail.gmail.com>
Date: Fri, 29 Dec 2017 11:32:20 +1100
Content-Transfer-Encoding: quoted-printable
Message-Id: <D583672D-CB51-4812-8D95-3DE3521701F7@internode.on.net>
References: <1A47B410-EF50-455C-B549-3CF320C33469@internode.on.net>
 <CAAxsn=FikaVsQhv9P63za6WNXXPT-6JoCJogtKH1fmduOXTh+Q@mail.gmail.com>
 <57BB673D-C1F1-42EA-8B65-6DF54E290E88@internode.on.net>
 <CAAxsn=FgUw2tzm-vxToCJGYUX9FOxHSZ585VNMqTsHLBmUd4hw@mail.gmail.com>
 <0EF0083A-B8F8-4481-96DD-2C0F3A9F527D@internode.on.net>
 <CAAxsn=FVf91EnWcarWmhsWtu1EZp8_RvCCLqg8uNVFZP8Rp60Q@mail.gmail.com>
 <229A9A72-8647-428C-8A26-688E5CF888C6@internode.on.net>
 <CAAxsn=FNUT36cnW+=xc750CfAXFVU_d9_seZYBN4tqOTniXX2Q@mail.gmail.com>
 <1526BC37-F412-4C9B-A185-C9387FEBD358@internode.on.net>
 <CAAxsn=GQ9q3Fgq4+8xv=pXx1s7Q6-0S4A9-5jeGaqW30NnDbFQ@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
X-Mailer: Apple Mail (2.3251)
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: [ocaml-ctypes] calbacks
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 29 Dec 2017 00:24:50 -0000

FWIW here=E2=80=99s what I do for callbacks.  Its a bit waffly!=20
The code that does it is actually written in Ocaml but it is
generating C++ text.=20

The situation is different because my system Felix is a C++ code =
generator=20
so the compiler can translate Felix code to C++ without worrying about =
any additional
compilation step(s). Indeed, Felix is designed as a C++ upgrade,
meaning to throw out the bad syntax, introduce a good type system,
but *preserve* ABI compatibility and make writing bindings=20
for C and C++ trivial.

First, normally a function binding is roughly like:

	fun myfun : A * B * C * D -> R =3D =E2=80=9CCfunction($1,$2,$3,$4)=
=E2=80=9D;

but this:

	callback fun myfun_t: A * B * myfun_t * D -> R;

is actually a *type* definition. The type defined is roughly

	typedef myfun_t =3D A * B * CLIENT * D =E2=80=94> R


Here, I wrote =E2=80=94> with two dashes, which means a C function type =
in
Felix whereas -> is a Felix function type. A Felix function is a C++
class with an apply() method that accepts an argument of the type
of the function argument.  The context is bound into the class
object by the C++ constructor. Where I wrote CLIENT above, it means
a C void*. When the compiler sees the above it generates a wrapper
function that looks roughly like this:

	R myfun_t W_myfun_t (A a, B b, myfun_t *CLOSURE, D d) {
		return CLOSURE->apply(a,b,d);
	}

I left out a lot of messy casts. But we=E2=80=99re not finished. When we =
call a
C HOF it will have a signature like this:

	typedef void (*hof) (X, Y, C_myfun_t func, void *client_data, =
Z);

where C_myfun_t is the C type of the callback, and the void pointer
client data is the associated data pointer. When the programmer
declares that the Felix type should be

	X * Y * myfun_t * Z ->  void

so we leave out the function type entirely, and use the Felix function
type in place of the client data pointer,
and we need a second wrapper now, one that picks up the myfun_t, which
in Felix is a pointer to the C++ class object of the function type,
and passes it for the callbacks specified CLIENT data pointer,
and passes W_myfun_t, an actual C function pointer, as the function.

The wrapper function is invariant, it is the same for ALL callbacks
of the same type, and the type of the closure is also invariant,
its the same for all Felix functions of the same type.

So: to make this work in Felix I have to translate a special kind of =
type
and I have to translate a HOF accepting a callback into some C
type definitions AND two wrapper function: actually one
wrapper for each callback type, and, one wrapper for each
HOF.

So what can Ctypes do? It can do exactly the same thing.

You need a value of a special type say=20

	=E2=80=98a callback

to use in the callback function type signature that indicates
where the client data pointer lives in the signature:

	A @-> B @-> clientdata @->D @-> returning R

in the foreign function. This is all you need to know to
generate a wrapper for the callback. You do not have to actually
generate C code to be compiled if you can manipulate the
Ocaml data type representation well enough from Ocaml
in your interpreter, as long as it =E2=80=9Cdoes=E2=80=9D the right =
thing somehow,
what you=E2=80=99re actually generating is an Ocaml function which
translates another Ocaml function. The mind boggles,
it was easier for me, because I could just print the
required C++ code into the Felix compiler output.
But you must be able to do it without doing that because,
Ctypes is *already* doing it.

Having done that, you have to organise that a HOF binding
in Ocaml accepting an Ocaml function of the correct type=20
actually calls the code for a binding that accepted a C function
and also a void *, passing the wrapper as above and the
actual closure pointer as the client data.

So I think you can do all this without generating any C at all,
since you can already translate Ctypes values representing
types and functions into C functions and C function calls.
That=E2=80=99s what you=E2=80=99d be doing here, except you have to do =
the
extra work in your Ocaml interpreter of the Ctypes to munge
things around a bit. I could be wrong you *might* need to
generate some C that requires compilation.

And it *might* be useful to generate that C as a first attempt,
to avoid getting caught in a mental meta-recursive knot.
I found it really hard to think about when I was doing it
for Felix, it took weeks to get right.


=E2=80=94
john skaller
skaller@users.sourceforge.net
http://felix-lang.org


From skaller@internode.on.NET  Wed Jan  3 07:34:02 2018
Return-Path: <skaller@internode.on.NET>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-43.csi.cam.ac.uk (ppsw-43.csi.cam.ac.uk [131.111.8.143])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 0B9D43C1AF
 for <ctypes@lists.ocaml.org>; Wed,  3 Jan 2018 07:34:02 +0000 (GMT)
X-Cam-SpamDetails: score -0.8 from SpamAssassin-3.4.1-1819797 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [150.101.137.129 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [150.101.137.129 listed in wl.mailspike.net]
 * -0.0 T_RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from ipmail06.adl2.internode.on.net ([150.101.137.129]:53534)
 by ppsw-43.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtp id 1eWdhH-0003uY-oq (Exim 4.89) for ctypes@lists.ocaml.org
 (return-path <skaller@internode.on.NET>); Wed, 03 Jan 2018 07:42:49 +0000
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A2BMBgDh299ZAACNtDENURsBAQEDAQEBCQEBAYRBgRWDeop4kC2RQIcjJYo4AQIBAQEBAQIPATSGFgSBBwImAlMMExu1CmuBbTqLPAsBAQEBI4EOgh+FbQuLDC+CMgWRRo9+h16gHB6SE4RzgWWBAwpbAYJ0ghMcgXtii1cBAQE
Received: from pa49-180-141-0.pa.nsw.optusnet.com.au (HELO [192.168.8.100])
 ([49.180.141.0])
 by ipmail06.adl2.internode.on.net with ESMTP; 03 Jan 2018 18:12:43 +1030
From: john skaller <skaller@internode.on.net>
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable
Mime-Version: 1.0 (Mac OS X Mail 10.1 \(3251\))
Message-Id: <CD71B8E2-306A-4CD5-9494-17E151D460C4@internode.on.net>
Date: Wed, 3 Jan 2018 18:42:41 +1100
To: ctypes <ctypes@lists.ocaml.org>
X-Mailer: Apple Mail (2.3251)
Subject: [ocaml-ctypes] structures
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 03 Jan 2018 07:34:02 -0000

Just thought, as a novice, I=E2=80=99d report on my latest attempt to =
use Ctypes
to bind some C structs. The bottom line: it took me hours, i found it =
confusing,
and wished there were  an example in the tutorial which included

(a) the C code
(b) Ocaml interface (mli file)
(c) Ocaml implementation (ml file)

The source of my confusion is the amount of =E2=80=9Ctypes=E2=80=9D =
involved!
Ocaml uses separate namespaces for types and values, and this
is used in Ctypes. Supposedly to make things simpler, for me it
made things much harder.

Its not just the types but the operators do this too, for example
=E2=80=9Cptr=E2=80=9D has two meanings, depending on context.

When you=E2=80=99re binding you have a C type to think about,
possibly with two names, a structure tag name as well as
a typedef name.

Then, you have an Ocaml type representing the C type.
Then, you have an Ocaml value encoding the binding information,
which is a =E2=80=9Ctype=E2=80=9D representation. And that =
representation itself
has an Ocaml type, the type of the encoding value, which is distinct
from the type of the Ocaml value used to represent the C value.

Throw in the use of the same name for these things and my solution
was to just try all the possible combinations until something compiled.

This finally seems to work:


(* C HEADER FILE ****)
struct __ccc_t;
typedef struct __ccc_t *ccc_t;
void ccc_destroy(ccc_t);

(* MLI FILE *********)
type __ccc_t_tag
type __ccc_t_struct =3D __ccc_t_tag structure
type __ccc_t_type =3D __ccc_t_struct typ



(* pointer alias *)
type ccc_t =3D __ccc_t_struct ptr
val ccc_t : ccc_t typ

val ccc_destroy: ccc_t  -> unit


(* ML FILE ********)
type __ccc_t_tag
type __ccc_t_struct =3D __ccc_t_tag structure
type __ccc_t_type =3D __ccc_t_struct typ
let __ccc_t_tag  : __ccc_t_type =3D structure "__ccc_t_tag"

(* pointer alias *)
type ccc_t =3D __ccc_t_struct ptr
let ccc_t: ccc_t typ =3D ptr (__ccc_t_tag)

let ccc_destroy =3D  foreign "ccc_destroy" (
  ccc_t @-> returning void
)


That=E2=80=99s a lot of code for 3 lines of C. This is real code (with =
the name
changed to protect the guilty).

The phrase =E2=80=9Cccc=E2=80=9D occurs 5 times in the C code and
27 times in the Ocaml code.

I have made a choice that the structure =E2=80=9Ctag=E2=80=9D name used =
in C is the
only way to define the Ocaml struct, and where C uses a typedef
to introduce a non-tag name, Ocaml will use an alias also.
Since Ctypes  doesn=E2=80=99t split struct tag name space from type =
namespace
I have added =E2=80=9C_tag=E2=80=9D to the tag name.

I=E2=80=99m currently testing with dynamic/libffi link but I can see =
this isn=E2=80=99t going
to cut it, either performance wise or interms of getting messy stuff =
like
bit fields working .. so Cstubs unfortunately looks like a requirement
(as well as some hand written extra C to cope with bitfields).


=E2=80=94
john skaller
skaller@users.sourceforge.net
http://felix-lang.org


From skaller@internode.on.net  Sat Jan 20 21:59:24 2018
Return-Path: <skaller@internode.on.net>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 515363C485
 for <ctypes@lists.ocaml.org>; Sat, 20 Jan 2018 21:59:24 +0000 (GMT)
X-Cam-SpamDetails: score -0.8 from SpamAssassin-3.4.1-1821732 
 * -0.0 T_RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [150.101.137.145 listed in wl.mailspike.net]
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [150.101.137.145 listed in list.dnswl.dnsbl.ja.net]
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from ipmail06.adl6.internode.on.net ([150.101.137.145]:16711)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtp id 1ed1K3-000d7u-lP (Exim 4.90) for ctypes@lists.ocaml.org
 (return-path <skaller@internode.on.net>); Sat, 20 Jan 2018 22:09:13 +0000
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A2CpAACh299ZAACNtDENURkBAQEBAQEBAQEBAQcBAQEBAYRBgRWDeq0PhnklhSAChRYBAgEBAQEBAg8BNIVtAgEDIwRiJQImAgJXBhO1JGuBbTqLPAEBAQEGAQEBASSBDoIfhW2LFy+CMgWhRIdejwcBkRRIkWmEc4FlgQMKWwGCdIQqYotXAQEB
Received: from pa49-180-141-0.pa.nsw.optusnet.com.au (HELO [192.168.8.100])
 ([49.180.141.0])
 by ipmail06.adl6.internode.on.net with ESMTP; 21 Jan 2018 08:38:19 +1030
From: john skaller <skaller@internode.on.net>
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable
Mime-Version: 1.0 (Mac OS X Mail 10.1 \(3251\))
Date: Sun, 21 Jan 2018 09:08:16 +1100
References: <CD71B8E2-306A-4CD5-9494-17E151D460C4@internode.on.net>
To: ctypes <ctypes@lists.ocaml.org>
In-Reply-To: <CD71B8E2-306A-4CD5-9494-17E151D460C4@internode.on.net>
Message-Id: <DBB3E461-F1BC-44F4-A4B7-A17F4B6F8D55@internode.on.net>
X-Mailer: Apple Mail (2.3251)
Subject: [ocaml-ctypes] string_of_char_ptr
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sat, 20 Jan 2018 21:59:24 -0000

According to Real World Ocaml string_of_char_ptr can be used to convert =
a=20
C char* to an Ocaml string. But I can=E2=80=99t find it anywhere in the =
API!

Any clues?

I found Ctypes.string_from_ptr but that is useless because it requires a =
length:

val string_from_ptr : char ptr -> length:int -> string

=E2=80=94
john skaller
skaller@users.sourceforge.net
http://felix-lang.org


From yallop@gmail.com  Sat Jan 20 23:07:22 2018
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-31.csi.cam.ac.uk (ppsw-31.csi.cam.ac.uk [131.111.8.131])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id EE5E13C485
 for <ctypes@lists.ocaml.org>; Sat, 20 Jan 2018 23:07:21 +0000 (GMT)
X-Cam-SpamDetails: score -0.2 from SpamAssassin-3.4.1-1821732 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.223.176 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.0 RCVD_IN_MSPIKE_H2 RBL: Average reputation (+2)
 *      [209.85.223.176 listed in wl.mailspike.net]
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-io0-f176.google.com ([209.85.223.176]:39686)
 by ppsw-31.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1ed2Nq-000RaW-Js (Exim 4.90) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Sat, 20 Jan 2018 23:17:10 +0000
Received: by mail-io0-f176.google.com with SMTP id b198so5824692iof.6
 for <ctypes@lists.ocaml.org>; Sat, 20 Jan 2018 15:17:10 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc:content-transfer-encoding;
 bh=74ViPLeiI/aPL16DnKr94IF+qaWlZw3nj8ypGPeAirY=;
 b=F7pm0SmKKE4044EVZWj/Zzgj/mmlOyup4we1jBZjxEsXaycctSy+on7iQdpShsWssE
 nQtHhzhIQIka9eHjn9bWNtYRyeBgi+mko3LuLxMrmqnpZDZgFFGyfqWPygEdMMmOV4qA
 OEzYOkH8RyM/4rLHNf2HGfKdTRFbekGWQWxNL5497PEnCBfhRFARy7ep4ztm/7AtnNV0
 1S55SQgPH445hH2H/nKbR18kNe4ni/4ec5Opg4WY/lgVsQLT/P51KZiJN4XaF9f4Yeam
 9ovZICa7eYgHyscJnzilf3B02W0yszP3/Jp+IRw3Ikxl21zp6xjcGyUDQBqeXHXdLbEw
 bHfw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc:content-transfer-encoding;
 bh=74ViPLeiI/aPL16DnKr94IF+qaWlZw3nj8ypGPeAirY=;
 b=lHEJFLqspH0fSFQO/UgE/fSPDp3wR1C7jXF3kvKGqsoMVBITHZsxaLTeF2RQB8KuFr
 cOOJ9akGqHbaFBtM/trtdwN1cJu0EOeN4HTXwKsh0pfRqWZxT+doBP7bOVdcQG1tScVq
 gAhESvHN5Q78ZVgWCNWuxPLIBgriS/nbxBhkGpH4Dwf2Ci8oX8ONWmNA1ZY/CwW4NG3a
 LNm5HIvDTiJft2fhBVsgMQGs+6PYKejD+hglxksnwn+kngQ20gWum2tLQmdNGNFTyd78
 1C/EM58zePSCIWel6M5N4rgir2PzsPyA5O+InhCFs9ZE71dbWt9m6JTEeVvhu7tAMOZI
 QmfQ==
X-Gm-Message-State: AKwxyteb5ny/xs22D7i/YV1+uOgZ7cKePD17ZCQpLBxyhfOzgzrYOLSI
 H6iD0keRYV9YKpCGgkceQy+icptt2w8ChAXLuXA=
X-Google-Smtp-Source: AH8x225FgEvVYn2fMtbw35qa08Nnh4yeDXMtT1pBOXObckjVNIA0T+Nh5iJOYxzuVoIRhvjdEsuciNBdqFioKPPk/Rg=
X-Received: by 10.107.166.76 with SMTP id p73mr3275703ioe.158.1516490228807;
 Sat, 20 Jan 2018 15:17:08 -0800 (PST)
MIME-Version: 1.0
Received: by 10.79.83.131 with HTTP; Sat, 20 Jan 2018 15:17:07 -0800 (PST)
In-Reply-To: <DBB3E461-F1BC-44F4-A4B7-A17F4B6F8D55@internode.on.net>
References: <CD71B8E2-306A-4CD5-9494-17E151D460C4@internode.on.net>
 <DBB3E461-F1BC-44F4-A4B7-A17F4B6F8D55@internode.on.net>
From: Jeremy Yallop <yallop@gmail.com>
Date: Sat, 20 Jan 2018 23:17:07 +0000
Message-ID: <CAAxsn=FZ2esab0-NWNY+1Ay4dk58vbROA5twpx0UBHs_OrjAxA@mail.gmail.com>
To: john skaller <skaller@internode.on.net>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] string_of_char_ptr
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sat, 20 Jan 2018 23:07:22 -0000

On 20 January 2018 at 22:08, john skaller <skaller@internode.on.net> wrote:
> According to Real World Ocaml string_of_char_ptr can be used to convert a
> C char* to an Ocaml string. But I can=E2=80=99t find it anywhere in the A=
PI!
>
> Any clues?

I don't think that function is exposed in the API, at least in recent
versions.  But if you have a 'char ptr' value 'p' then you can convert
it to a string using 'coerce':

     coerce (ptr char) string p

For example:

     # let getenv =3D foreign "getenv" (string @-> returning (ptr char));;
     val getenv : string -> char Ctypes_static.ptr =3D <fun>
     # let p =3D getenv "USER";;
     val p : char Ctypes_static.ptr =3D (char*) 0x7ffe712cd9f8
     # coerce (ptr char) string p;;
     - : string =3D "jeremy"

Kind regards,

Jeremy

From skaller@internode.on.net  Sat Jan 20 23:26:51 2018
Return-Path: <skaller@internode.on.net>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id E93973C485
 for <ctypes@lists.ocaml.org>; Sat, 20 Jan 2018 23:26:51 +0000 (GMT)
X-Cam-SpamDetails: score -0.8 from SpamAssassin-3.4.1-1821732 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [150.101.137.129 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 T_RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [150.101.137.129 listed in wl.mailspike.net]
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from ipmail06.adl2.internode.on.net ([150.101.137.129]:2699)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtp id 1ed2gh-000QMm-1X (Exim 4.90) for ctypes@lists.ocaml.org
 (return-path <skaller@internode.on.net>); Sat, 20 Jan 2018 23:36:40 +0000
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A2CqAADh299ZAACNtDENURkBAQEBAQEBAQEBAQcBAQEBAYRBgRWDeptHiEWJA4Z5JYUgAoUWAQIBAQEBAQIPATSFbAEBAQECASMEUgULCxgCAiYCAiE2BhOKBgMNqw9rgW06h0ANg28BAQEBAQEEAQEBAQEBAQEBAR6BDoIfhW2CSjWCXoITFIMTL4IyBaEIPIdeiBOHDYlyhwpIjDiFMYRzgWWBAwpbAYJ0hCpiiRSCQwEBAQ
Received: from pa49-180-141-0.pa.nsw.optusnet.com.au (HELO [192.168.8.100])
 ([49.180.141.0])
 by ipmail06.adl2.internode.on.net with ESMTP; 21 Jan 2018 10:06:34 +1030
Content-Type: text/plain; charset=utf-8
Mime-Version: 1.0 (Mac OS X Mail 10.1 \(3251\))
From: john skaller <skaller@internode.on.net>
In-Reply-To: <CAAxsn=FZ2esab0-NWNY+1Ay4dk58vbROA5twpx0UBHs_OrjAxA@mail.gmail.com>
Date: Sun, 21 Jan 2018 10:36:33 +1100
Content-Transfer-Encoding: quoted-printable
Message-Id: <FA348599-3FC4-4DE5-8AB7-BD6D305967D4@internode.on.net>
References: <CD71B8E2-306A-4CD5-9494-17E151D460C4@internode.on.net>
 <DBB3E461-F1BC-44F4-A4B7-A17F4B6F8D55@internode.on.net>
 <CAAxsn=FZ2esab0-NWNY+1Ay4dk58vbROA5twpx0UBHs_OrjAxA@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
X-Mailer: Apple Mail (2.3251)
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] string_of_char_ptr
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sat, 20 Jan 2018 23:26:52 -0000


> On 21 Jan. 2018, at 10:17, Jeremy Yallop <yallop@gmail.com> wrote:
>=20
> On 20 January 2018 at 22:08, john skaller <skaller@internode.on.net> =
wrote:
>> According to Real World Ocaml string_of_char_ptr can be used to =
convert a
>> C char* to an Ocaml string. But I can=E2=80=99t find it anywhere in =
the API!
>>=20
>> Any clues?
>=20
> I don't think that function is exposed in the API, at least in recent
> versions. =20

It=E2=80=99s not, its in the repository in an *.ml file which is not =
exposed,
its used to define a view. One supplies read and write functions
to views, but is there a way to get them back?

The API is too abstract. I=E2=80=99d have used a concrete record :)


> But if you have a 'char ptr' value 'p' then you can convert
> it to a string using 'coerce':
>=20
>     coerce (ptr char) string p
>=20
> For example:
>=20
>     # let getenv =3D foreign "getenv" (string @-> returning (ptr =
char));;
>     val getenv : string -> char Ctypes_static.ptr =3D <fun>
>     # let p =3D getenv "USER";;
>     val p : char Ctypes_static.ptr =3D (char*) 0x7ffe712cd9f8
>     # coerce (ptr char) string p;;
>     - : string =3D =E2=80=9Cjeremy"

Ouch. That doesn=E2=80=99t make sense. I mean I=E2=80=99m happy that it =
will do the=20
job, thanks for the info! But that=E2=80=99s not what a C programmer =
would
think of as a coercion. Pointers and what they point at are distinct.

Sigh .. of course now I am binding a function that returns a char* and
of course the docs don=E2=80=99t say who owns the storage. Is it in a =
static
buffer? Part of another data structure? Malloc()=E2=80=99d and therefore
I have to free it? The usual problem with C: the fuctional API
is weakly specified and the resource management isn=E2=80=99t specified =
at all ;)
Off to troll the *.c files to see how its implemented=E2=80=A6 =
argghhh=E2=80=A6



=E2=80=94
john skaller
skaller@users.sourceforge.net
http://felix-lang.org


From yallop@gmail.com  Mon Jan 22 07:09:50 2018
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 3446E3C31A
 for <ctypes@lists.ocaml.org>; Mon, 22 Jan 2018 07:09:50 +0000 (GMT)
X-Cam-SpamDetails: score -0.2 from SpamAssassin-3.4.1-1821772 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.223.179 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H2 RBL: Average reputation (+2)
 *      [209.85.223.179 listed in wl.mailspike.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-io0-f179.google.com ([209.85.223.179]:41104)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1edWOM-000ZqO-ko (Exim 4.90) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Mon, 22 Jan 2018 07:19:43 +0000
Received: by mail-io0-f179.google.com with SMTP id f4so6661482ioh.8
 for <ctypes@lists.ocaml.org>; Sun, 21 Jan 2018 23:19:42 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc:content-transfer-encoding;
 bh=0aKODE0AqK2PVy9/vBuMxgN0BI2h7fuxuAeKpEUbpdI=;
 b=hQzstXbAKOis5HzDYsULXlCY59oKyR4F0QFx80cL/bh52ORQBn3lD8Gd2yg4/cDdWq
 tTiikOYWPkDzbYDmgMAnNEJ0sUPDOwEqxrpwD/OGQ865rJLNKPd9pD78z3sGZqcQdZJM
 BNUudNa9fttCM4kXrqmdmGO1ViUUIBKiyjMxKLkbYs98vjrAQazS37VvFPjvKL/IfCZ7
 kckwoTunE68u0VkpUwvYUjU1uwDLJ60WzSmj5NZS8OUmWQavq3aXYvMUKPP35iOigU8h
 c5z+Xm9UqkjDN6BsZvo7BL67uPE/ZpkE0iwZJvAibLPCs8Gj1EG5Az7EeUnel+/ClY+L
 CPiQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc:content-transfer-encoding;
 bh=0aKODE0AqK2PVy9/vBuMxgN0BI2h7fuxuAeKpEUbpdI=;
 b=DD679mG3FyBNyGTvxv03cUP6sDbkgKM4HHPN7ChgUiC1ExMvXhxhoVFzvdHF24jF1D
 CFcwC7UmlpVphB48uWZi4L6ogqJ+YyRflB7g1f/x6sRUteaG2zhUbv++6muMXA5NAxMv
 HJWYPNzMwjLAcwRJIiQZPN70Mah3J0NRMUFtuRZMCzL0R1FgVOZsg16PX2dYEAmh94Ie
 2gPSpQsOzBbxezPHHT3KT+XoTdO36FmL2UZdA4ZFYPCv2bZKj7oyOzd4CBNQZspshHgV
 t2zGCeoAZImBsRCfV/c4mnHPb7fRL5JEQeVx8a1zwwgYETAHMksZU8Mduc5Szl0QMIUO
 hcdA==
X-Gm-Message-State: AKwxytf5LSYN3PFQ79GLyOP6HYU750mxtDKUfHvrgCtLLN7QsyEY4AhE
 aw2+9JOQT7FVqsPu0SGIoqUzymZE9UoTv7D+PMU=
X-Google-Smtp-Source: AH8x224mwHOS3ZbqO4Y0zIQHtEyb990APpT208IQREck8OUUvJ3AaBSUUTC5CJ87m4hxfms8PqZ1sSEVYNS4E1seBGY=
X-Received: by 10.107.36.195 with SMTP id k186mr7038604iok.131.1516605581338; 
 Sun, 21 Jan 2018 23:19:41 -0800 (PST)
MIME-Version: 1.0
Received: by 10.79.83.131 with HTTP; Sun, 21 Jan 2018 23:19:40 -0800 (PST)
In-Reply-To: <FA348599-3FC4-4DE5-8AB7-BD6D305967D4@internode.on.net>
References: <CD71B8E2-306A-4CD5-9494-17E151D460C4@internode.on.net>
 <DBB3E461-F1BC-44F4-A4B7-A17F4B6F8D55@internode.on.net>
 <CAAxsn=FZ2esab0-NWNY+1Ay4dk58vbROA5twpx0UBHs_OrjAxA@mail.gmail.com>
 <FA348599-3FC4-4DE5-8AB7-BD6D305967D4@internode.on.net>
From: Jeremy Yallop <yallop@gmail.com>
Date: Mon, 22 Jan 2018 07:19:40 +0000
Message-ID: <CAAxsn=Gq8-Ow19HZYtqie2vvLVsAziRFQu811632b2bc-g+OKQ@mail.gmail.com>
To: john skaller <skaller@internode.on.net>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] string_of_char_ptr
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 22 Jan 2018 07:09:50 -0000

On 20 January 2018 at 23:36, john skaller <skaller@internode.on.net> wrote:
> One supplies read and write functions to views, but is there a way to get=
 them back?

Yes, via coerce.  Given a view created as follows

   let v =3D view ~read:f ~write:g t

the read and write functions f and g are both available as coercions
between the view and the underlying type:

    f  =E2=89=A1  coerce t v
    g  =E2=89=A1  coerce v t

From prvs=616ea2581=marcello.seri@citrix.com  Mon Mar 26 17:18:55 2018
Return-Path: <prvs=616ea2581=marcello.seri@citrix.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id DBB9C3C076
 for <ctypes@lists.ocaml.org>; Mon, 26 Mar 2018 17:18:55 +0100 (BST)
X-Cam-SpamDetails: score -2.4 from SpamAssassin-3.4.1-1827746 
 * -2.3 RCVD_IN_DNSWL_MED RBL: Sender listed at http://www.dnswl.org/,
 *      medium trust
 *      [185.25.65.24 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H2 RBL: Average reputation (+2)
 *      [185.25.65.24 listed in wl.mailspike.net]
 * -0.0 T_RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 *  0.0 HTML_MESSAGE BODY: HTML included in message
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from smtp.ctxuk.citrix.com ([185.25.65.24]:43718
 helo=SMTP.EU.CITRIX.COM)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES256-GCM-SHA384:256)
 id 1f0V2r-000I8I-8y (Exim 4.89_2) for ctypes@lists.ocaml.org
 (return-path <prvs=616ea2581=marcello.seri@citrix.com>);
 Mon, 26 Mar 2018 17:32:30 +0100
X-IronPort-AV: E=Sophos;i="5.48,365,1517875200"; d="scan'208,217";a="70569669"
From: Marcello Seri <marcello.seri@citrix.com>
To: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Thread-Topic: Ctypes and structs containing strings
Thread-Index: AQHTxR+MtCPGSCxeukuxAG9vV5y3Rw==
Date: Mon, 26 Mar 2018 16:32:28 +0000
Message-ID: <1522081954821.1826@citrix.com>
Accept-Language: en-GB, en-US
Content-Language: en-GB
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-ms-exchange-transport-fromentityheader: Hosted
Content-Type: multipart/alternative;
 boundary="_000_15220819548211826citrixcom_"
MIME-Version: 1.0
Subject: [ocaml-ctypes] Ctypes and structs containing strings
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 26 Mar 2018 16:18:55 -0000

--_000_15220819548211826citrixcom_
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

Hi,

I am sorry if I am cross-posting from https://discuss.ocaml.org/t/ctypes-an=
d-structs-containing-strings/1752 but the post there got no attention and I=
 was told that it was a better idea to ask on the mailing-list.

In `ocaml-opasswd` (https://github.com/xapi-project/ocaml-opasswd)<https://=
github.com/xapi-project/ocaml-opasswd> we are using ctypes to bind some fun=
ctions from `passwd.h` and `shadow.h`. In rare cases, when using the librar=
y to update an entry in the shadow file, it seems that the two strings in t=
he passwd struct are read from uninitialised memory instead of being copies=
 of the ocaml strings that we passed to create the new shadow struct.

The code is here: https://github.com/xapi-project/ocaml-opasswd/blob/master=
/lib/shadow.ml#L20 and my fear is that declaring those as `string`:
```
let sp_name     =3D field shadow_t "sp_name" string
let sp_passwd =3D field shadow_t "sp_passwd" string
```
and then reading or writing them with
```
name     =3D getf !@sp sp_name;
passwd =3D getf !@sp sp_passwd;
```
and
```
setf sp_t sp_name sp.name;
setf sp_t sp_passwd sp.passwd;
```
could be wrong. Reading the documentation, it seems that strings view are d=
oing the right copies and allocation there but I don't see other major poin=
ts of failure. This code has been there for ages, and if it is wrong I am n=
ot sure how it should be fixed. To add some more context, the part of the c=
ode that sometimes seems to behave badly is https://github.com/xapi-project=
/ocaml-opasswd/blob/master/lib/common.ml#L19-L21

Is the declaration clearly wrong? How should I declare the strings and prop=
erly copy them between c and ocaml when using ctypes, should they be char p=
tr and handled manually?

Thanks in advance for the help.

Best,
Marcello


--_000_15220819548211826citrixcom_
Content-Type: text/html; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

<html>
<head>
<meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Diso-8859-=
1">
<style type=3D"text/css" style=3D"display:none"><!--P{margin-top:0;margin-b=
ottom:0;} --></style>
</head>
<body dir=3D"ltr" style=3D"font-size:12pt;color:#000000;background-color:#F=
FFFFF;font-family:Calibri,Arial,Helvetica,sans-serif;">
Hi,<br>
<br>
I am sorry if I am cross-posting from <a href=3D"https://discuss.ocaml.org/=
t/ctypes-and-structs-containing-strings/1752">
https://discuss.ocaml.org/t/ctypes-and-structs-containing-strings/1752</a>&=
nbsp;but the post there got no attention and I was told that it was a bette=
r idea to ask on the mailing-list.<br>
<br>
In `ocaml-opasswd` (<a href=3D"https://github.com/xapi-project/ocaml-opassw=
d">https://github.com/xapi-project/ocaml-opasswd)</a> we are using ctypes t=
o bind some functions from `passwd.h` and `shadow.h`. In rare cases, when u=
sing the library to update an entry
 in the shadow file, it seems that the two strings in the passwd struct are=
 read from uninitialised memory instead of being copies of the ocaml string=
s that we passed to create the new shadow struct.<br>
<br>
The code is here: <a href=3D"https://github.com/xapi-project/ocaml-opasswd/=
blob/master/lib/shadow.ml#L20">
https://github.com/xapi-project/ocaml-opasswd/blob/master/lib/shadow.ml#L20=
</a> and my fear is that declaring those as `string`:<br>
```<br>
let sp_name&nbsp;&nbsp;&nbsp;&nbsp; =3D field shadow_t &quot;sp_name&quot; =
string<br>
let sp_passwd =3D field shadow_t &quot;sp_passwd&quot; string<br>
```<br>
and then reading or writing them with<br>
```<br>
name&nbsp;&nbsp;&nbsp;&nbsp; =3D getf !@sp sp_name;<br>
passwd =3D getf !@sp sp_passwd;<br>
```<br>
and<br>
```<br>
setf sp_t sp_name sp.name;<br>
setf sp_t sp_passwd sp.passwd;<br>
```<br>
could be wrong. Reading the documentation, it seems that strings view are d=
oing the right copies and allocation there but I don't see other major poin=
ts of failure. This code has been there for ages, and if it is wrong I am n=
ot sure how it should be fixed.
 To add some more context, the part of the code that sometimes seems to beh=
ave badly is
<a href=3D"https://github.com/xapi-project/ocaml-opasswd/blob/master/lib/co=
mmon.ml#L19-L21">
https://github.com/xapi-project/ocaml-opasswd/blob/master/lib/common.ml#L19=
-L21</a>
<br>
<br>
Is the declaration clearly wrong? How should I declare the strings and prop=
erly copy them between c and ocaml when using ctypes, should they be char p=
tr and handled manually?<br>
<br>
Thanks in advance for the help.<br>
<br>
Best,<br>
Marcello<br>
<br>
</body>
</html>

--_000_15220819548211826citrixcom_--

From yallop@gmail.com  Sat Mar 31 22:37:55 2018
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-40.csi.cam.ac.uk (ppsw-40.csi.cam.ac.uk [131.111.8.140])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id EC3663C58E
 for <ctypes@lists.ocaml.org>; Sat, 31 Mar 2018 22:37:55 +0100 (BST)
X-Cam-SpamDetails: score -0.2 from SpamAssassin-3.4.1-1828089 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.218.44 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H2 RBL: Average reputation (+2)
 *      [209.85.218.44 listed in wl.mailspike.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-oi0-f44.google.com ([209.85.218.44]:38180)
 by ppsw-40.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1f2OPb-0007mm-ln (Exim 4.89_2) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Sat, 31 Mar 2018 22:51:49 +0100
Received: by mail-oi0-f44.google.com with SMTP id c3-v6so10260000oib.5
 for <ctypes@lists.ocaml.org>; Sat, 31 Mar 2018 14:51:47 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc; bh=QBeD0HV9LCpKdFiDgnqrP2mDmsewoD0tmFr68mObo14=;
 b=czDSG6hbl3jCb8WICll2q+8FIpFpsLzUbrMxeDeSNQVs2Fpb5a+AguuKRQGaQBtM97
 KER3HnyaRnWb6te99g5o/lcXG/JxpxzZVPykXtYDQl4zJHZwoe4jkIJeGin81ECewSVa
 71T6ty9dRPybfhsxplO7WLgz6trZ9+VOAisKV3nsoTqP04nxCBvqOKyGogpn5i//gTA5
 EDZnF5DMpZOyQqthPozeHxB1ZZ4XW793hf7s6LWNksiLE0LC6gD2/7/+A3b8bLMbLzBI
 sY7WY25K/72EJtckXoJMOY+lWex14nvvw6B4B5RIDjQ4IcruXGmEKnLLPrSJJwsJ4UT/
 VEgA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc;
 bh=QBeD0HV9LCpKdFiDgnqrP2mDmsewoD0tmFr68mObo14=;
 b=CRz16M/8jjNdsLf4JQCMpQ9EbJ14zlH+m7GvdNie7dMvKljqPxiIITMSMmxdY22i+h
 587QQ6e+2gaeMNsE5MpEX2m7tdGfljukIFa1cZNXm96n1a2FHpx1LZLj9bnL+FzL0UdA
 nRRbb7BkBcY1CWFiFrKWO2bAMvyRsB01m/7p8HfodIbCA305qjRcki8zvtkR3Tqm1Z8o
 weFsDJi5/q0Y2r3jCN3ReVpDK14fsma5QAjhNMXy0mySTjYR7ObH3v3yvl7vVZRnaWyf
 kZImPrY+I1YSD/2MYB5HcQTPEEIsMaBqey6rP7G54hGgxW38bkBzqBvN38/dhUVnuxAP
 MC5Q==
X-Gm-Message-State: ALQs6tB+jCiEsBofJ8bWot/6m8xfyQXK3j6ok9A7iN9Zw2OxOSSZ/Vca
 lWP/AWIvIf0Y3vRwPCrf67i2955MiJVsdI+kogo=
X-Google-Smtp-Source: AIpwx48AU4WELuThJv/vyv3WzJ2F0Uu7Fa2LJEhk4WiWLUEZYTY08PJw7ELPLLjMh7aTLboUzUFM7XKTNm8MOVUIx+g=
X-Received: by 2002:aca:b80a:: with SMTP id
 i10-v6mr1737788oif.72.1522533106237; 
 Sat, 31 Mar 2018 14:51:46 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.74.166.202 with HTTP; Sat, 31 Mar 2018 14:51:45 -0700 (PDT)
In-Reply-To: <1522081954821.1826@citrix.com>
References: <1522081954821.1826@citrix.com>
From: Jeremy Yallop <yallop@gmail.com>
Date: Sat, 31 Mar 2018 22:51:45 +0100
Message-ID: <CAAxsn=FRSz9AhQP_d47Hem3=iQm+-4GYrP+ihC-Hq4tmeUWvTA@mail.gmail.com>
To: Marcello Seri <marcello.seri@citrix.com>
Content-Type: text/plain; charset="UTF-8"
Cc: "ctypes@lists.ocaml.org" <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Ctypes and structs containing strings
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sat, 31 Mar 2018 21:37:56 -0000

Dear Marcello,

On 26 March 2018 at 17:32, Marcello Seri <marcello.seri@citrix.com> wrote:
> In `ocaml-opasswd` (https://github.com/xapi-project/ocaml-opasswd) we are
> using ctypes to bind some functions from `passwd.h` and `shadow.h`. In rare
> cases, when using the library to update an entry in the shadow file, it
> seems that the two strings in the passwd struct are read from uninitialised
> memory instead of being copies of the ocaml strings that we passed to create
> the new shadow struct.
>
> The code is here:
> https://github.com/xapi-project/ocaml-opasswd/blob/master/lib/shadow.ml#L20
> and my fear is that declaring those as `string`:
> ```
> let sp_name     = field shadow_t "sp_name" string
> let sp_passwd = field shadow_t "sp_passwd" string
> ```
> and then reading or writing them with
> ```
> name     = getf !@sp sp_name;
> passwd = getf !@sp sp_passwd;
> ```
> and
> ```
> setf sp_t sp_name sp.name;
> setf sp_t sp_passwd sp.passwd;
> ```
> could be wrong.

I think your analysis is correct.

When the memory is owned by C code -- for example, when a C function
passes a struct to OCaml with fields already initialized -- then using
the string view works well: reading a string field creates an OCaml
copy, which persists as long as needed.

However, when things are the other way round -- i.e. when you're
creating or initializing the struct in OCaml before passing it to C --
then the string view isn't a good choice, because there's no way to
manage the lifetime of the C copy of the OCaml string that's written
to the struct field.  I'm planning to change the interface in a future
release to make the lifetime of allocated objects clearer, and to make
these kinds of issues less likely.

> Is the declaration clearly wrong? How should I declare the strings and
> properly copy them between c and ocaml when using ctypes, should they be
> char ptr and handled manually?

A reasonable way to do this would be to allocate stable memory for the
string fields before the C call, and ensure that the memory stays
around until the call is complete.  Stable memory could mean any of: a
bigarray, a Ctypes.CArray.t value, memory returned by malloc, memory
returned by Ctypes.allocate, etc.  In most of these cases ensuring the
memory stays around is a matter of holding onto the handle (bigarray
value, Ctypes ptr, etc.) until after the call.

Kind regards,

Jeremy

From thomas.braibant@gmail.com  Thu May 31 09:24:06 2018
Return-Path: <thomas.braibant@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 7B99A3CE28
 for <ctypes@lists.ocaml.org>; Thu, 31 May 2018 09:24:06 +0100 (BST)
X-Cam-SpamDetails: score -1.9 from SpamAssassin-3.4.1-1832523 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [209.85.223.181 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (thomas.braibant[at]gmail.com)
 * -1.7 RCVD_IN_MSPIKE_H2 RBL: Average reputation (+2)
 *      [209.85.223.181 listed in wl.mailspike.net]
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-io0-f181.google.com ([209.85.223.181]:37311)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1fOJ9F-000jj3-1j (Exim 4.91) for ctypes@lists.ocaml.org
 (return-path <thomas.braibant@gmail.com>); Thu, 31 May 2018 09:41:30 +0100
Received: by mail-io0-f181.google.com with SMTP id e20-v6so24896029iof.4
 for <ctypes@lists.ocaml.org>; Thu, 31 May 2018 01:41:29 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:from:date:message-id:subject:to;
 bh=Ct9Dyweoxq8uc280sXEVt5rMmsm1zmgWstRTdGFrZSc=;
 b=R2DCAYsz17TGV0lyT13+4fTUxNUbNuIAVD0EeoBXPWnK28pZDRTnnS8EYYjDfCch6w
 SBWAkEKYmU+t6uAJcrfxq5VaPG8LQqdxwkRKf+nNzuULf0KaO2sS0QwaguMDZthyk54x
 aX+8XNxttDTPcDyqo8udWQPGIB2ZA8zEK3L8blkUlR9FV0Q+2WCnwlX1Mbu0C/tXvVV4
 EgUHtvjJeIypxQHd/Quoawoq+Z+8lxP50/uJo6YpeyICYaIYlEmLTn/gO9NURbAMNJRt
 7Ef7+vbf7qcPOIfQ5USNnmQNGQ7RrFDpIly/wrgth+gMBLvj42An1++uxYLns8KbsXF9
 MXvA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:from:date:message-id:subject:to;
 bh=Ct9Dyweoxq8uc280sXEVt5rMmsm1zmgWstRTdGFrZSc=;
 b=UD9xnJ4oZdhjAeKd9McGpU99uEybtY4hz6vf8KgfB+YKuNI7aygS16kDd8ycG7aWud
 nu+70DsXIUyxCjkaAbfVpitONOfeGGmlov/vYtg3DZ+MjsyiOeUwEU1vMAbMOE3FwL8R
 a2XO/xlkiDunMBrFvyfiANX/Ws2iP3ZkbHTXPZ3yrprb1D5BEwifrK1xzPl7+rz2Cagw
 dz/Ztft2sPf09nbv4+1leTj5UaKFSq+lyz17x/n+Y5/trWDSOxFY8ttbZ9vv2dYxEMhm
 ZFFjnSDrDO0iFQaLKsTCP+qvr9erMneKiFDMV23srxgC7l6pqelxLBm0ly6RW4gcz5Np
 koKw==
X-Gm-Message-State: ALKqPwfDEPpZ1uuDnOhD1w8IdFa3UEj2TL61RGRbMk+T6up5OkJsJglE
 nV4loJT680x4zSgLWw0pPwokBqt57ydxH/+xN284/tSd
X-Google-Smtp-Source: ADUXVKI2nOUa/WAs8gRiN6uL3QHm2JHnFF+Uz+F084MN/BzSmkRnVsrcctYYV0NRr6ga9u0jtSybqnCAl+Kj+EOGPlI=
X-Received: by 2002:a6b:2401:: with SMTP id
 k1-v6mr1996908iok.270.1527756087276; 
 Thu, 31 May 2018 01:41:27 -0700 (PDT)
MIME-Version: 1.0
Received: by 2002:a4f:d1f6:0:0:0:0:0 with HTTP; Thu, 31 May 2018 01:41:06
 -0700 (PDT)
From: Thomas Braibant <thomas.braibant@gmail.com>
Date: Thu, 31 May 2018 09:41:06 +0100
Message-ID: <CAHR=VkzUbUpU1MNFVM+5ORx9gaB65SezcOUiqfGvRwaCkZi-mw@mail.gmail.com>
To: ctypes <ctypes@lists.ocaml.org>
Content-Type: text/plain; charset="UTF-8"
Subject: [ocaml-ctypes] Passing ocaml strings to C functions
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 31 May 2018 08:24:06 -0000

Hi,

I am trying to pass an OCaml string to a C function, in some specific
scenario where I know that the C part will not keep a reference to the
 OCaml string after the function returns. Without loss of generality,
the binding would look like

```
module C (F : Cstubs.FOREIGN) = struct
  open F
  let foo = foreign "fooC" (ptr void @-> size_t @-> returning int);;
end
```

After applying the bindings to the generated stubs, I can write something like

```
module M = C (C_generated)
let foo_wrapped (s : Bigstring.t) =
  C.foo
    (Ctypes.to_voidp (Ctypes.bigarray_start Array1 s)
    (Unsigned.Size_t.of_int (Bigstring.length str))
;;
```

For some reason, I can't seem to find how to apply C.foo to an ocaml string.

```
let foo_wrapped' (s : String.t) =
  C.foo
    (Ctypes.to_voidp (Ctypes.ocaml_string_start s)
    (Unsigned.Size_t.of_int (String.length str))
;;
```

What's more surprising is the error message when trying to coerce the
ptr char and ocaml strings together:
```
Ctypes.(coerce ocaml_string (ptr char) (Ctypes.ocaml_string_start ""))
;;
Exception: Coercion failure: char* is not coercible to char*.
```

What I think is that I could rewrite the binding, to have something like:
```
let foo' = foreign "fooC" (ocaml_string @-> size_t @-> returning int);;
```
but it seems like unnecessary code duplication (and would make my
actual use case harder to write).

Am I missing something here?
Thanks in advance,
Thomas Braibant

From yallop@gmail.com  Thu May 31 21:09:06 2018
Return-Path: <yallop@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-30.csi.cam.ac.uk (ppsw-30.csi.cam.ac.uk [131.111.8.130])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id B39B43CE2A
 for <ctypes@lists.ocaml.org>; Thu, 31 May 2018 21:09:06 +0100 (BST)
X-Cam-SpamDetails: score -0.2 from SpamAssassin-3.4.1-1832523 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at http://www.dnswl.org/, no
 *      trust
 *      [74.125.82.181 listed in list.dnswl.dnsbl.ja.net]
 * -0.0 RCVD_IN_MSPIKE_H3 RBL: Good reputation (+3)
 *      [74.125.82.181 listed in wl.mailspike.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yallop[at]gmail.com)
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid * -0.0 RCVD_IN_MSPIKE_WL Mailspike good senders
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-ot0-f181.google.com ([74.125.82.181]:45444)
 by ppsw-30.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1fOU9X-000pxx-dX (Exim 4.91) for ctypes@lists.ocaml.org
 (return-path <yallop@gmail.com>); Thu, 31 May 2018 21:26:32 +0100
Received: by mail-ot0-f181.google.com with SMTP id 15-v6so26745889otn.12
 for <ctypes@lists.ocaml.org>; Thu, 31 May 2018 13:26:31 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc; bh=9USfx4bR6WqSJQj8mHnWEqNuPznvv5yOXhOekaI8ZiI=;
 b=dVemxQbm2yaTvVe8rGcJamQoYkqxP76oW09TfHBRI8ygtcwcqH852/WSETRI13wffR
 ttG55V0Wouf3ChFoA5qypNHfGeAwTRiCYUm4kpApGVz4jaiInbPS0x0s+QU30+ylGvBn
 AKEqtlgTIrqpbKlNotCp9Bi7TOwprErQz7OgHfsregRmPL/tAU9u/Rzpv19K6rexVuGk
 50qgDS7rWDSvlEDiyh3oSSJXaiRtqE+d3B0j0P8RBarQqzpRAImS4zVw0Z/zVz39mqUd
 PLyTPHUNpw4XVIukekvGqg9P4p6Mj7cv/2eUtCp2MQMtaSsZmktoWf1tyWGn1yurWOWd
 rfHw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc;
 bh=9USfx4bR6WqSJQj8mHnWEqNuPznvv5yOXhOekaI8ZiI=;
 b=mejO+aPf1BUXB+EJE3ytW0NnHs5VzmNgzlj3s3QOCBhUuk7mTAkDe06/4aieU7BJi4
 LaWJKMFgJ0QGbde2GLbHhNUEeF2ZlGUT0hOMeIJSMoZ+eIGYAAqQvqNq9UHYhWwwQuql
 6UwtAG96+p9y9Y+C3IZd2pEeWo+iwvjzAeeSB1rPtzzl8NQhBkd3Sx/Icc/AzYtPjmzO
 WJGswJ2U71ItCGPvpFo9I9zaKz+kVClLlV7AKqywF/TnmsbNj8VO8uij6i/VOT2bUytS
 UiRkMI5yBCTkHZffwTo2Bvfh/8BUcjCHZCnFmrOEscTCpphyb+84ara82f12pfLQUHuI
 VOuQ==
X-Gm-Message-State: APt69E1l2crofL0qtj3ho5EtDj2fxuhn4KFRmYGNFK/Cdc+hdg9ApLC7
 5IWi+iYLO4MQIIza5oUmAJcfjtVljw4SgkjnzJQ=
X-Google-Smtp-Source: ADUXVKKoF69OV8NnEQZO4IVSBmlbbuC5Ya6kuR3CIVm/9xfWZnkIfpyRZVhbycIrx4GiKYwNG2kZkr7Lmbjrin1KyaQ=
X-Received: by 2002:a9d:1d02:: with SMTP id
 m2-v6mr1719197otm.220.1527798389009; 
 Thu, 31 May 2018 13:26:29 -0700 (PDT)
MIME-Version: 1.0
Received: by 2002:a4a:a02d:0:0:0:0:0 with HTTP; Thu, 31 May 2018 13:26:28
 -0700 (PDT)
In-Reply-To: <CAHR=VkzUbUpU1MNFVM+5ORx9gaB65SezcOUiqfGvRwaCkZi-mw@mail.gmail.com>
References: <CAHR=VkzUbUpU1MNFVM+5ORx9gaB65SezcOUiqfGvRwaCkZi-mw@mail.gmail.com>
From: Jeremy Yallop <yallop@gmail.com>
Date: Thu, 31 May 2018 21:26:28 +0100
Message-ID: <CAAxsn=HtjTehjdzZRjiWx+e-375Ug0Tkjw-zZ_-4jP7vd6Se+Q@mail.gmail.com>
To: Thomas Braibant <thomas.braibant@gmail.com>
Content-Type: text/plain; charset="UTF-8"
Cc: ctypes <ctypes@lists.ocaml.org>
Subject: Re: [ocaml-ctypes] Passing ocaml strings to C functions
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 31 May 2018 20:09:06 -0000

Dear Thomas,

On 31 May 2018 at 09:41, Thomas Braibant <thomas.braibant@gmail.com> wrote:
> For some reason, I can't seem to find how to apply C.foo to an ocaml string.
>
> ```
> let foo_wrapped' (s : String.t) =
>   C.foo
>     (Ctypes.to_voidp (Ctypes.ocaml_string_start s)
>     (Unsigned.Size_t.of_int (String.length str))
> ;;
> ```

Right: the circumstances under which C parts of a program can read
directly from an OCaml string are deliberately very constrained.  Even
something like this is unsafe:

>     (Ctypes.to_voidp (Ctypes.ocaml_string_start s)

because allocating the pointer in 'to_voidp' could cause the GC to
run, changing the address of the string 's'.

> What's more surprising is the error message when trying to coerce the
> ptr char and ocaml strings together:
> ```
> Ctypes.(coerce ocaml_string (ptr char) (Ctypes.ocaml_string_start ""))
> ;;
> Exception: Coercion failure: char* is not coercible to char*.
> ```

This is indeed a surprising message, even to OCaml users, who might be
somewhat used to messages of the form "type t is not equal to type t".
Ctypes generally uses the underlying C type as the printed
representation of a 'typ' value, and in this case both 'ptr char' and
ocaml_string represent the same C type, albeit with different
constraints on the behaviour, and so they have the same printed
representation:

   # ptr char;;
   - : char ptr typ = char*
   # ocaml_string;;
   - : string ocaml typ = char*

> What I think is that I could rewrite the binding, to have something like:
> ```
> let foo' = foreign "fooC" (ocaml_string @-> size_t @-> returning int);;
> ```
> but it seems like unnecessary code duplication (and would make my
> actual use case harder to write).

One way to avoid the duplication is parameterizing the storage by the
'typ'.  David Sheets's ocaml-sodium library uses that approach in a
single set of bindings that work with both bigarrays and bytes:

    https://github.com/dsheets/ocaml-sodium/blob/c1ab5990/lib_gen/sodium_bindings.ml#L29-L32

Kind regards,

Jeremy

From monnier.florent@gmail.com  Tue Apr 30 13:47:27 2019
Return-Path: <monnier.florent@gmail.com>
X-Original-To: ctypes@lists.ocaml.org
Delivered-To: ctypes@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 1B2973C11D
 for <ctypes@lists.ocaml.org>; Tue, 30 Apr 2019 13:47:27 +0100 (BST)
X-Cam-SpamDetails: score -0.3 from SpamAssassin-3.4.2-1858346 
 * -0.0 RCVD_IN_DNSWL_NONE RBL: Sender listed at https://www.dnswl.org/, no
 *       trust
 *      [209.85.166.174 listed in list.dnswl.dnsbl.ja.net]
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (monnier.florent[at]gmail.com)
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID_EF Message has a valid DKIM or DK signature from
 *      envelope-from domain
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
X-Cam-ScannerInfo: http://help.uis.cam.ac.uk/email-scanner-virus
Received: from mail-it1-f174.google.com ([209.85.166.174]:36507)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 id 1hLT64-000LyK-11 (Exim 4.91) for ctypes@lists.ocaml.org
 (return-path <monnier.florent@gmail.com>); Tue, 30 Apr 2019 14:47:01 +0100
Received: by mail-it1-f174.google.com with SMTP id v143so4800095itc.1
 for <ctypes@lists.ocaml.org>; Tue, 30 Apr 2019 06:47:00 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:from:date:message-id:subject:to;
 bh=4XUgwvQhoI4Mh+05StXRGmt/w8EW7kNUwA8KPs2QcKg=;
 b=cNsMBzgc5SEOJWq6sJxjBRPs7oCKQggOS+zuUaGqDVGgZn92emJgvY4XJMZELUeQCY
 3Or9qMzSyJM32S3XCOCOZ+Nr2BpRqOx8r7jYjub5ghygjwnJMDx1nghRbW9Qia+I6wl3
 LnClmed33NgpJuSKFYbagzt45G3pKyRt9Yw/sp4Ezq6bFHk1pZfHIRg3XplT3pP0x8P1
 QYUkjjJudhcxpUXOUMcucsm7I330muDaRcqsdq6P6QAcZLSk0uOwnlA5Xpxco52JLFpG
 kTpslHYC7koKZYH9aeBIR44K/DqQ9EChRr/V43j863EEVPMSfH3pgu6M72NXSbTsHkhn
 4I4A==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:from:date:message-id:subject:to;
 bh=4XUgwvQhoI4Mh+05StXRGmt/w8EW7kNUwA8KPs2QcKg=;
 b=Fz53AOhqywAZk7BELOvztAvC7nwD6tdmzCJeFIOWgrSBRzzpKL8waVIPpgCI5/G3FX
 25TT24qfDnMFNeUgibPKMzHwKEXy0LzRxNXLpM9XeFLRKQd/tsuoIeUmx5pIMTKYOYvm
 0cfyIXMbDCwMABAuucO8MH1KsFHvYBpy6EjtCfgZH9J4o0j7ogWrl9RlPLRkyP7om1Zx
 bf16qagBpTFcgp9+GB/rV0v5hv9hmKe3VG+dV34zdWF9l1lFoMJBKXuN7MWZFE/paq+D
 9gnU8P3zrVA1ulDOO9E76flb/hknN602QpSERkeddxbAWBPxvFdTk4m7z+rU5YY3F7CF
 BgUg==
X-Gm-Message-State: APjAAAXhSy8gfgyFP0JEhj+p0jo5hfIAON65jJXXl7LRXvNNqzda4Vpp
 4Exs8Q/aUcsBq0vEG3aRakDhZZ575onwT/lyDAq0f5BB
X-Google-Smtp-Source: APXvYqxG3KAliiyUAvWwk0kgm0Xhjj653ZbfUxZ55YYU/0dHr86qK+80Ob9k7tlj1xB5LwpePiiPHgdVQux07fgDAPk=
X-Received: by 2002:a02:40c8:: with SMTP id n191mr45204810jaa.14.1556632018773; 
 Tue, 30 Apr 2019 06:46:58 -0700 (PDT)
MIME-Version: 1.0
Received: by 2002:a02:c6ad:0:0:0:0:0 with HTTP; Tue, 30 Apr 2019 06:46:58
 -0700 (PDT)
From: Florent Monnier <monnier.florent@gmail.com>
Date: Tue, 30 Apr 2019 06:46:58 -0700
Message-ID: <CAE1DttB1BHV-vgn-YevtfpzDi3m6WwLRx3XpgopzjDev5Vfp0w@mail.gmail.com>
To: ctypes@lists.ocaml.org
Content-Type: text/plain; charset="UTF-8"
X-Mailman-Approved-At: Fri, 03 May 2019 12:51:29 +0100
Subject: [ocaml-ctypes] magical values in Tsdl
X-BeenThere: ctypes@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Easy bindings to C libraries,
 from https://github.com/ocamllabs/ocaml-ctypes"
 <ctypes.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/ctypes/>
List-Post: <mailto:ctypes@lists.ocaml.org>
List-Help: <mailto:ctypes-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/ctypes>,
 <mailto:ctypes-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 30 Apr 2019 12:47:27 -0000

Hi,

As an exercise I'm trying to add the new SDL_DisplayEvent struct that
appeared in the last SDL2 2.0.9 to tsdl:

diff -u SDL2-2.0.6/include/SDL_events.h SDL2-2.0.9/include/SDL_events.h
https://gist.github.com/fccm/a7a2739137b99ad75e271f04cae95a60

Here you can see my attempt as the git diff to the last tsdl git:
https://gist.github.com/fccm/99469a7ab436ef6a47927e5d1e6dda59

I tryed to follow the other events as example, and to add the new
display event, but I'm having difficulty to figure out how to write at
line 50:
let display_event = 0x150  (* compiles fine *)
that should probably be:
let display_event = sdl_displayevent
if I follow the other events there, like for example:
let window_event = sdl_windowevent  (* at line 4227 *)
let clipboard_update = sdl_clipboardupdate  (* at line 4011 *)
from:
https://github.com/dbuenzli/tsdl/blob/master/src/tsdl.ml

What I don't catch is where "sdl_windowevent" comes from?
Because if I write the equivalent:
let display_event = sdl_displayevent
I get:
Error: Unbound value sdl_displayevent

-- 
Regards
Florent

