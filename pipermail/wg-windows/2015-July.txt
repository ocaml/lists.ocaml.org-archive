From Douglas_Makofka at cable.comcast.com  Tue Jul  7 20:54:44 2015
From: Douglas_Makofka at cable.comcast.com (Makofka, Douglas S)
Date: Tue, 7 Jul 2015 19:54:44 +0000
Subject: [wg-windows] dynlink.cmxa missing in cygwin builds
Message-ID: <375959ed1a754da8bf2e84f6dfbea88d@VAADCEX19.cable.comcast.com>

I have OPAM running in Cygwin. I'm trying some basic builds like camlp4. It's choking because dynlink.cmxa isn't in the library. I'm using 4.02.1 .  It is not in the 'system' installation either (4.01.0). I seem to remember some issue with Cygwin and native executables - but it was a few years ago, so maybe I'm imagining things. Anyway, is this an OPAM issue or did I mess up some other configuration?
Thanks,
Doug makofka

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/wg-windows/attachments/20150707/c1af9aaf/attachment.html>

From adrien at notk.org  Tue Jul  7 21:59:33 2015
From: adrien at notk.org (Adrien Nader)
Date: Tue, 7 Jul 2015 22:59:33 +0200
Subject: [wg-windows] dynlink.cmxa missing in cygwin builds
In-Reply-To: <375959ed1a754da8bf2e84f6dfbea88d@VAADCEX19.cable.comcast.com>
References: <375959ed1a754da8bf2e84f6dfbea88d@VAADCEX19.cable.comcast.com>
Message-ID: <20150707205933.GA27407@notk.org>

Hi,

On Tue, Jul 07, 2015, Makofka, Douglas S wrote:
> I have OPAM running in Cygwin. I'm trying some basic builds like camlp4. It's choking because dynlink.cmxa isn't in the library. I'm using 4.02.1 .  It is not in the 'system' installation either (4.01.0). I seem to remember some issue with Cygwin and native executables - but it was a few years ago, so maybe I'm imagining things. Anyway, is this an OPAM issue or did I mess up some other configuration?

On cygwin, 32 bits works while 64 bits is very uneven.

As far as I understand (not that you worded it poorly but that I'm
really tired), you should ensure you have the flexdll (or flexlink
maybe, just look for "flex") and dos2unix packages installed.

You should also check the output from configure and also whether you
have unix.cmxa too.

-- 
Adrien Nader

From Douglas_Makofka at cable.comcast.com  Thu Jul  9 18:51:12 2015
From: Douglas_Makofka at cable.comcast.com (Makofka, Douglas S)
Date: Thu, 9 Jul 2015 17:51:12 +0000
Subject: [wg-windows] dynlink.cmxa missing in cygwin builds
In-Reply-To: <20150707205933.GA27407@notk.org>
References: <375959ed1a754da8bf2e84f6dfbea88d@VAADCEX19.cable.comcast.com>
 <20150707205933.GA27407@notk.org>
Message-ID: <582e0834496640a1a4fde007a286a8d9@VAADCEX19.cable.comcast.com>

On http://alain.frisch.fr/flexdll.html , it only lists the 32-bit version of gcc supplied with Cygwin as a supported platform. So I guess I'm going back to Cygwin_x86 and trying again. I did trying installing flexlink in the 64-bit version and re-building ocaml-4.02.1 from scratch. ./configure found flexlink ok, but 'make world' failed pretty quickly.
Dsm


-----Original Message-----
From: Adrien Nader [mailto:adrien at notk.org] 
Sent: Tuesday, July 07, 2015 5:00 PM
To: Makofka, Douglas S
Cc: wg-windows at lists.ocaml.org
Subject: Re: [wg-windows] dynlink.cmxa missing in cygwin builds

Hi,

On Tue, Jul 07, 2015, Makofka, Douglas S wrote:
> I have OPAM running in Cygwin. I'm trying some basic builds like camlp4. It's choking because dynlink.cmxa isn't in the library. I'm using 4.02.1 .  It is not in the 'system' installation either (4.01.0). I seem to remember some issue with Cygwin and native executables - but it was a few years ago, so maybe I'm imagining things. Anyway, is this an OPAM issue or did I mess up some other configuration?

On cygwin, 32 bits works while 64 bits is very uneven.

As far as I understand (not that you worded it poorly but that I'm really tired), you should ensure you have the flexdll (or flexlink maybe, just look for "flex") and dos2unix packages installed.

You should also check the output from configure and also whether you have unix.cmxa too.

--
Adrien Nader

From daniel.buenzli at erratique.ch  Fri Jul 17 11:26:02 2015
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Fri, 17 Jul 2015 11:26:02 +0100
Subject: [wg-windows] Identifying windows ports for build systems &
 cross compiling distinctions
In-Reply-To: <76478AAD389641DE94728EC386AFFA87@erratique.ch>
References: <88589CEFF4F346BBB9C699A50E198142@erratique.ch>
 <E51C5B015DBD1348A1D85763337FB6D9E9C9F6C4@Remus.metastack.local>
 <76478AAD389641DE94728EC386AFFA87@erratique.ch>
Message-ID: <3D6425393B9549ED892DE814251B3530@erratique.ch>

Le mardi, 30 juin 2015 ? 18:52, Daniel B?nzli a ?crit :
> Le mardi, 30 juin 2015 ? 18:13, David Allsopp a ?crit :
> > $OCAMLLIB/Makefile.config defines TOOLCHAIN variable already which gives mingw or msvc.
>  

It seems that `ocamlc -config` doesn't output this variable. Could anyone confirm me that `ocamlc -config | grep ccomp_type` gives the information (and how).  

Besides regarding the initial discussion I think the only reasonable option would be:  

b) Distinguish an OS for the mingw ports

However I would like to get feedback from windows users if it makes sense to do this, in the sense that a lot of things have to be done differently build-wise with mingw compared to a plain win32 and that it's useful in build systems to be able to get that information without having to grep `ocamlc -config`. Because if it's only for the file extension business maybe it's not such a good idea to define an os value for it.

Best,

Daniel



From jun.furuse at gmail.com  Mon Jul 20 16:37:03 2015
From: jun.furuse at gmail.com (Jun Furuse)
Date: Mon, 20 Jul 2015 23:37:03 +0800
Subject: [wg-windows] OMake on Mingw64
Message-ID: <CAAoLEWth0Zr-h8-QFnNYjo8w0MUCres_nfr-OQEj2j8oN5AvyA@mail.gmail.com>

Hi,

Has anyone succeeded to compile OMake with Mingw64 OCaml?

I am trying to build it with a patch found in Wodi repo:

https://github.com/camlspotter/ocaml-mingw/blob/master/omake-0.9.8.6/patch-aa.github.com_fdopen_godi-repo

but sofar it is in vain: make boostrap succeeds, but segfaults at make all.

Thanks
Jun

From andreashauptmann at t-online.de  Mon Jul 20 17:24:10 2015
From: andreashauptmann at t-online.de (Andreas Hauptmann)
Date: Mon, 20 Jul 2015 16:24:10 +0000
Subject: [wg-windows] OMake on Mingw64
In-Reply-To: <CAAoLEWth0Zr-h8-QFnNYjo8w0MUCres_nfr-OQEj2j8oN5AvyA@mail.gmail.com>
References: <CAAoLEWth0Zr-h8-QFnNYjo8w0MUCres_nfr-OQEj2j8oN5AvyA@mail.gmail.com>
Message-ID: <moj7bb$hua$1@ger.gmane.org>

On Mon, 20 Jul 2015 23:37:03 +0800
Jun Furuse <jun.furuse at gmail.com> wrote:

> but sofar it is in vain: make boostrap succeeds, but segfaults at
> make all.

Try Gerd Stolpmanns recent fork:
https://github.com/gerdstolpmann/omake-fork/ 

If I remember right, he found the reason and his fork supports mingw
out of the box.

I didn't find the reason for it instantly and just shipped an
pre-compiled omake for bootstrapping.
(The bug wasn't triggered until some gcc update and only affected the
byte code version - which is used during bootstrapping but not
thereafter)



From dra-news at metastack.com  Thu Jul 23 19:55:50 2015
From: dra-news at metastack.com (David Allsopp)
Date: Thu, 23 Jul 2015 19:55:50 +0100
Subject: [wg-windows] Identifying windows ports for build systems &
	cross compiling distinctions
In-Reply-To: <3D6425393B9549ED892DE814251B3530@erratique.ch>
References: <88589CEFF4F346BBB9C699A50E198142@erratique.ch>
 <E51C5B015DBD1348A1D85763337FB6D9E9C9F6C4@Remus.metastack.local>
 <76478AAD389641DE94728EC386AFFA87@erratique.ch>
 <3D6425393B9549ED892DE814251B3530@erratique.ch>
Message-ID: <000001d0c579$332f0aa0$998d1fe0$@metastack.com>

Daniel B?nzli wrote:
> Le mardi, 30 juin 2015 ? 18:52, Daniel B?nzli a ?crit :
> > Le mardi, 30 juin 2015 ? 18:13, David Allsopp a ?crit :
> > > $OCAMLLIB/Makefile.config defines TOOLCHAIN variable already which
> gives mingw or msvc.
> >
> 
> It seems that `ocamlc -config` doesn't output this variable. Could anyone
> confirm me that `ocamlc -config | grep ccomp_type` gives the information
> (and how).

utils/config.mlp shows that the output will be the CCOMPTYPE variable OCaml was configured with; config/Makefile.{msvc,msvc64,mingw,mingw64} show that is "msvc" for the first two and "cc" for the second two.
 
> Besides regarding the initial discussion I think the only reasonable
> option would be:
> 
> b) Distinguish an OS for the mingw ports

That looks an abuse to me! The operating system for all four ports is Win32 (yes, it may sound strange that the OS for a 64-bit port is also Win32, but that's actually how the parlance works and isn't unique to OCaml...). The operating system for the Cygwin ports is *not* Windows, hence the different output.

Additionally, while new code out there may be taking advantage of Sys.win32, I expect there's a lot of code still reasonably expecting that Sys.os_type = "Win32" will work forever. Adding Sys.comp_type would be handy, of course... but then having the entire Config module as Sys.Config would be generally quite useful!

> However I would like to get feedback from windows users if it makes sense
> to do this, in the sense that a lot of things have to be done differently
> build-wise with mingw compared to a plain win32 and that it's useful in
> build systems to be able to get that information without having to grep
> `ocamlc -config`. Because if it's only for the file extension business
> maybe it's not such a good idea to define an os value for it.

I'm not sure what you're getting at here - what build system differences are you referring to? 


David


From daniel.buenzli at erratique.ch  Thu Jul 23 21:39:15 2015
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Thu, 23 Jul 2015 21:39:15 +0100
Subject: [wg-windows] Identifying windows ports for build systems &
 cross compiling distinctions
In-Reply-To: <000001d0c579$332f0aa0$998d1fe0$@metastack.com>
References: <88589CEFF4F346BBB9C699A50E198142@erratique.ch>
 <E51C5B015DBD1348A1D85763337FB6D9E9C9F6C4@Remus.metastack.local>
 <76478AAD389641DE94728EC386AFFA87@erratique.ch>
 <3D6425393B9549ED892DE814251B3530@erratique.ch>
 <000001d0c579$332f0aa0$998d1fe0$@metastack.com>
Message-ID: <5B65952A997C4A70B0923F43F26DF2BB@erratique.ch>

Le jeudi, 23 juillet 2015 ? 19:55, David Allsopp a ?crit :
> utils/config.mlp shows that the output will be the CCOMPTYPE variable OCaml was configured with; config/Makefile.{msvc,msvc64,mingw,mingw64} show that is "msvc" for the first two and "cc" for the second two.

Thanks very much, that's useful information on where to look at things.

> Additionally, while new code out there may be taking advantage of Sys.win32, I expect there's a lot of code still reasonably expecting that Sys.os_type = "Win32" will work forever.
I'm not suggesting to change that in OCaml I'm suggesting that for the *opam* os variable so that build systems can condition on it an behave accordingly. The opam os variable is already quite different from Sys.os_type which is not precise enough, see [1].
  
> Adding Sys.comp_type would be handy, of course... but then having the entire Config module as Sys.Config would be generally quite useful!

As already mentioned that doesn't help much in cross-compiling scenarios.
  
> I'm not sure what you're getting at here - what build system differences are you referring to?

Well the build system needs to adapt file extensions for one thing (which is quite annoying). Hence my question is it *only this* that differs in the mingw and msvc ports or are there also other differences at the build level (e.g. build rules) as if this is the case it would make sense to distinguish the ports using the os variable in order to have a good bulk variable to condition on, otherwise, if it's only the file extensions I don't think it's worth it.

Best,

Daniel

[1] https://github.com/ocaml/opam-depext/blob/d94f9f06e1d489dc4f946fb3aa37589eb9e9a2ec/depext.ml#L62-L74



From dra-news at metastack.com  Fri Jul 24 11:58:57 2015
From: dra-news at metastack.com (David Allsopp)
Date: Fri, 24 Jul 2015 10:58:57 +0000
Subject: [wg-windows] Identifying windows ports for build systems &
 cross compiling distinctions
In-Reply-To: <5B65952A997C4A70B0923F43F26DF2BB@erratique.ch>
References: <88589CEFF4F346BBB9C699A50E198142@erratique.ch>
 <E51C5B015DBD1348A1D85763337FB6D9E9C9F6C4@Remus.metastack.local>
 <76478AAD389641DE94728EC386AFFA87@erratique.ch>
 <3D6425393B9549ED892DE814251B3530@erratique.ch>
 <000001d0c579$332f0aa0$998d1fe0$@metastack.com>
 <5B65952A997C4A70B0923F43F26DF2BB@erratique.ch>
Message-ID: <E51C5B015DBD1348A1D85763337FB6D9E9D4915E@Remus.metastack.local>

Daniel B?nzli wrote:
> Le jeudi, 23 juillet 2015 ? 19:55, David Allsopp a ?crit :
> > utils/config.mlp shows that the output will be the CCOMPTYPE variable
> OCaml was configured with; config/Makefile.{msvc,msvc64,mingw,mingw64}
> show that is "msvc" for the first two and "cc" for the second two.
> 
> Thanks very much, that's useful information on where to look at things.
> 
> > Additionally, while new code out there may be taking advantage of
> > Sys.win32, I expect there's a lot of code still reasonably expecting that
> > Sys.os_type = "Win32" will work forever.
> I'm not suggesting to change that in OCaml I'm suggesting that for the
> *opam* os variable so that build systems can condition on it an behave
> accordingly. The opam os variable is already quite different from
> Sys.os_type which is not precise enough, see [1].

Sorry - poor context-switching on my part! However, my comment still stands - mingw and msvc are not operating (sub-)systems ? even the sub-splitting in that function still gives you operating systems. Having something akin to the comp_type seems better to me than (ab)using the notion of os.

This may play differently in an OPAM which fully supports cross-compilation, but would you expect that os variable to be the same across all switches? One thing that is certainly interesting (and which I'm doing in my Windows port of OPAM[*]) is being able to use all four native Windows ports in the same OPAM installation.

<snip>

> > I'm not sure what you're getting at here - what build system differences
> are you referring to?
> 
> Well the build system needs to adapt file extensions for one thing (which
> is quite annoying). Hence my question is it *only this* that differs in
> the mingw and msvc ports or are there also other differences at the build
> level (e.g. build rules) as if this is the case it would make sense to
> distinguish the ports using the os variable in order to have a good bulk
> variable to condition on, otherwise, if it's only the file extensions I
> don't think it's worth it.

Oh, I see - yes, the way the compilers and linkers are invoked is totally different (I for some reason thought you were meaning were different build systems themselves required). In GNU make, I use a function and $(call ...) to differentiate them - see, for example, https://github.com/dra27/opam/blob/0130db82f6bc49245b164d3136308531d96c786c/configure.ac#L85-L100 and https://github.com/dra27/opam/blob/0130db82f6bc49245b164d3136308531d96c786c/src/Makefile#L276.

If you have comparch = cc on virtually everything (Cygwin, Mingw, most/all Unices) and comparch = msvc for the Microsoft compilers and also os being Win32, Cygwin or a variety of Unices then you have:

comparch = msvc -> immediately .obj, .lib, .dll, .exe (and Microsoft invocation rules)
comparch = cc -> immediately gives you .o and .a and then os <> Win32 gives you .so or .dll+.exe (and CC/GCC invocation rules)

Best,


D


[*] which is, of course, a) not finished and b) not necessarily going to be merged!


From daniel.buenzli at erratique.ch  Fri Jul 24 13:59:43 2015
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Fri, 24 Jul 2015 13:59:43 +0100
Subject: [wg-windows] Identifying windows ports for build systems &
 cross compiling distinctions
In-Reply-To: <E51C5B015DBD1348A1D85763337FB6D9E9D4915E@Remus.metastack.local>
References: <88589CEFF4F346BBB9C699A50E198142@erratique.ch>
 <E51C5B015DBD1348A1D85763337FB6D9E9C9F6C4@Remus.metastack.local>
 <76478AAD389641DE94728EC386AFFA87@erratique.ch>
 <3D6425393B9549ED892DE814251B3530@erratique.ch>
 <000001d0c579$332f0aa0$998d1fe0$@metastack.com>
 <5B65952A997C4A70B0923F43F26DF2BB@erratique.ch>
 <E51C5B015DBD1348A1D85763337FB6D9E9D4915E@Remus.metastack.local>
Message-ID: <5FC0BE0F5534411B99B1D89D414AE590@erratique.ch>

Le vendredi, 24 juillet 2015 ? 11:58, David Allsopp a ?crit :
> Sorry - poor context-switching on my part! However, my comment still stands - mingw and msvc are not operating (sub-)systems ? even the sub-splitting in that function still gives you operating systems. Having something akin to the comp_type seems better to me than (ab)using the notion of os.

Ok.
   
> This may play differently in an OPAM which fully supports cross-compilation, but would you expect that os variable to be the same across all switches?

Since that os variable should formally be taken for host-os no.
  
> One thing that is certainly interesting (and which I'm doing in my Windows port of OPAM[*]) is being able to use all four native Windows ports in the same OPAM installation.

Yes, there should be no problem with this I think.

> comparch = msvc -> immediately .obj, .lib, .dll, .exe (and Microsoft invocation rules)
> comparch = cc -> immediately gives you .o and .a and then os <> Win32 gives you .so or .dll+.exe (and CC/GCC invocation rules)

You meant comp_type I guess. Ok thanks, that's clear. It seems effectively less contrived than introducing an os for mingw.  

> [*] which is, of course, a) not finished and b) not necessarily going to be merged!  
You should try to sync and plot with Louis, I'm sure he's interested.  

Best,

Daniel

