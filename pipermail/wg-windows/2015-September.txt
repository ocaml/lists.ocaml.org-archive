From thranur at gmail.com  Tue Sep  1 12:20:49 2015
From: thranur at gmail.com (Thranur Andul)
Date: Tue, 1 Sep 2015 13:20:49 +0200
Subject: [wg-windows] Minimal virtual machine for OCaml
Message-ID: <CABAtnw__zsyC10cSAR6QSVmj6ZgbuX3KWAfQzup8if8yAngL+g@mail.gmail.com>

While OPAM for Windows is not ready, I'm considering some teaching
experiments using Linux virtual machines running inside Windows.

I suppose it has already been tried by some people here, so maybe someone
could share their experiences with that approach.

In particular, one of my main issues is disk space: how much space would be
necessary for a minimal Linux install with a graphical interface (XFCE,
LXDE or even lighter) and the dependencies needed to install OCaml and the
most common OPAM packages (e.g. Core,
js_of_ocaml, Coq, etc.)? Is there already a Linux distribution made for
that?

Also, related details about virtual machine experiences (issues,
limitations, recommendations, etc.) are welcome.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/wg-windows/attachments/20150901/f82cdf95/attachment.html>

From daniel.buenzli at erratique.ch  Tue Sep  1 12:40:53 2015
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Tue, 1 Sep 2015 12:40:53 +0100
Subject: [wg-windows] Fw:  Minimal virtual machine for OCaml
In-Reply-To: <CABAtnw__zsyC10cSAR6QSVmj6ZgbuX3KWAfQzup8if8yAngL+g@mail.gmail.com>
References: <CABAtnw__zsyC10cSAR6QSVmj6ZgbuX3KWAfQzup8if8yAngL+g@mail.gmail.com>
Message-ID: <9A94AA51109B47E1AF5AC201CCED55AC@erratique.ch>

Forwarding this to the teaching mailing list. They may be more people in the position of responding to these questions.


Le mardi, 1 septembre 2015 ? 12:20, Thranur Andul a ?crit :

> While OPAM for Windows is not ready, I'm considering some teaching experiments using Linux virtual machines running inside Windows.
>  
> I suppose it has already been tried by some people here, so maybe someone could share their experiences with that approach.
>  
> In particular, one of my main issues is disk space: how much space would be necessary for a minimal Linux install with a graphical interface (XFCE, LXDE or even lighter) and the dependencies needed to install OCaml and the most common OPAM packages (e.g. Core,  
> js_of_ocaml, Coq, etc.)? Is there already a Linux distribution made for that?
>  
> Also, related details about virtual machine experiences (issues, limitations, recommendations, etc.) are welcome.
>  
> _______________________________________________
> wg-windows mailing list
> wg-windows at lists.ocaml.org (mailto:wg-windows at lists.ocaml.org)
> http://lists.ocaml.org/listinfo/wg-windows




From modlfo at gmail.com  Tue Sep  1 14:01:55 2015
From: modlfo at gmail.com (Leonardo Laguna)
Date: Tue, 1 Sep 2015 15:01:55 +0200
Subject: [wg-windows] Problem (and fix) with Unix.create_process in windows
Message-ID: <CAF=ojbVBciLiwREy3MrbA-b63C-dXnPAxC7LCQQt-fnyRimR9A@mail.gmail.com>

Hi,

I have spent some hours trying to find a problem when using
Unix.create_process in windows.

The problem shows when trying to create a process in which the path of the
executable and one of the arguments have spaces, for example:

let cmd = "C:/Program Files/Something/something.exe" ;;
let args = ["arg1"; "arg2"; "C:/Program Files/arg3"] ;;

let pid = Unix.create_process cmd (cmd::args |> Array.of_list) Unix.stdin
Unix.stdout Unix.stderr ;;

Unix.waitpid [] pid ;;

As soon as there's an argument with spaces, the process fails to run. I
tried many different combinations with quoting, backlashes, forwardslashes,
backslashed space, etc, but nothing seemed to work.

I saw that ocaml calls CreateProcess from the windows API, which has many
weird things in the documentation.

When calling CreateProcess you need to supply (optionally) the path to the
application and then the full command line call. For example:

CreateProcess("C:/some.exe","\"C:/some.exe\" arg1 arg2",.........);

Note that you need to pass in the full command line the name of the
application quoted.

The only way of fixing my problem was to pass NULL as first argument:

CreateProcess(NULL","\"C:/some.exe\" arg1 arg2",.........);

After making this change all calls work fine for me.

Has anyone had these kind of problems?

Is is possible to get this change in the ocaml code?

Leonardo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/wg-windows/attachments/20150901/bd4fd452/attachment.html>

From adrien at notk.org  Tue Sep  1 14:08:47 2015
From: adrien at notk.org (Adrien Nader)
Date: Tue, 1 Sep 2015 15:08:47 +0200
Subject: [wg-windows] Problem (and fix) with Unix.create_process in
 windows
In-Reply-To: <CAF=ojbVBciLiwREy3MrbA-b63C-dXnPAxC7LCQQt-fnyRimR9A@mail.gmail.com>
References: <CAF=ojbVBciLiwREy3MrbA-b63C-dXnPAxC7LCQQt-fnyRimR9A@mail.gmail.com>
Message-ID: <20150901130847.GA24741@notk.org>

Hi,

On Tue, Sep 01, 2015, Leonardo Laguna wrote:
> Hi,
> 
> I have spent some hours trying to find a problem when using
> Unix.create_process in windows.
> 
> The problem shows when trying to create a process in which the path of the
> executable and one of the arguments have spaces, for example:
> 
> let cmd = "C:/Program Files/Something/something.exe" ;;
> let args = ["arg1"; "arg2"; "C:/Program Files/arg3"] ;;
> 
> let pid = Unix.create_process cmd (cmd::args |> Array.of_list) Unix.stdin
> Unix.stdout Unix.stderr ;;
> 
> Unix.waitpid [] pid ;;
> 
> As soon as there's an argument with spaces, the process fails to run. I
> tried many different combinations with quoting, backlashes, forwardslashes,
> backslashed space, etc, but nothing seemed to work.
> 
> I saw that ocaml calls CreateProcess from the windows API, which has many
> weird things in the documentation.
> 
> When calling CreateProcess you need to supply (optionally) the path to the
> application and then the full command line call. For example:
> 
> CreateProcess("C:/some.exe","\"C:/some.exe\" arg1 arg2",.........);
> 
> Note that you need to pass in the full command line the name of the
> application quoted.
> 
> The only way of fixing my problem was to pass NULL as first argument:
> 
> CreateProcess(NULL","\"C:/some.exe\" arg1 arg2",.........);
> 
> After making this change all calls work fine for me.
> 
> Has anyone had these kind of problems?
> 
> Is is possible to get this change in the ocaml code?

Yes! I'm not saying it will happen, only that it's possible.

It's probably the kind of things for which you need to provide new
testsuite entries.
Have you checked the compatibility for this? I.e. is it supposed to also
work on Windows XP? (not that I care about XP)
You will also need to explain the possible drawbacks of passing NULL as
the first parameter.

Just a few quick ideas. If this solves the problem you mention, that
sounds like something good but at the same time the corresponding code
is quite sensitive and with Microsoft's weird APIs I'm a bit worried
about corner cases.

-- 
Adrien Nader

From daniel.buenzli at erratique.ch  Tue Sep  1 14:20:30 2015
From: daniel.buenzli at erratique.ch (=?utf-8?Q?Daniel_B=C3=BCnzli?=)
Date: Tue, 1 Sep 2015 14:20:30 +0100
Subject: [wg-windows] Problem (and fix) with Unix.create_process in
 windows
In-Reply-To: <CAF=ojbVBciLiwREy3MrbA-b63C-dXnPAxC7LCQQt-fnyRimR9A@mail.gmail.com>
References: <CAF=ojbVBciLiwREy3MrbA-b63C-dXnPAxC7LCQQt-fnyRimR9A@mail.gmail.com>
Message-ID: <63E0A8564BF34E0CB1216E1130BE1EA0@erratique.ch>

Le mardi, 1 septembre 2015 ? 14:01, Leonardo Laguna a ?crit :
> Has anyone had these kind of problems?

Not yet.  

> Is is possible to get this change in the ocaml code?
This surely qualifies as bug. No escaping should be needed on Unix.create_process and whathever you give as arguments should end up in the sub process' Sys.argv as given. A mantis http://caml.inria.fr/mantis/ issue and a patch (possibly on github) are likely most welcome.  

FWIW I have this link about the problem [1] I intended to study at a certain point. It might be worth giving it a read.  

Best,

Daniel

[1] http://blogs.msdn.com/b/twistylittlepassagesallalike/archive/2011/04/23/everyone-quotes-arguments-the-wrong-way.aspx



From thranur at gmail.com  Tue Sep  1 16:02:15 2015
From: thranur at gmail.com (Thranur Andul)
Date: Tue, 1 Sep 2015 17:02:15 +0200
Subject: [wg-windows] Fwd: [Teaching] Fw: Minimal virtual machine for OCaml
In-Reply-To: <CABAtnw_hrU71Qcq0c5rdLocCWUkVFrS0Mqq0cGW_6fR5JVJpTw@mail.gmail.com>
References: <CABAtnw__zsyC10cSAR6QSVmj6ZgbuX3KWAfQzup8if8yAngL+g@mail.gmail.com>
 <9A94AA51109B47E1AF5AC201CCED55AC@erratique.ch>
 <55E5A7C0.7000108@freenet.de>
 <CABAtnw_hrU71Qcq0c5rdLocCWUkVFrS0Mqq0cGW_6fR5JVJpTw@mail.gmail.com>
Message-ID: <CABAtnw_Gj=acvP0iROEP56MUPNbXa3T11GgmR69228hu2EyCbg@mail.gmail.com>

Thank you for the advice.

To clarify what I'm looking for: I'm trying to make Linux usage as
transparent as possible, exactly to avoid requiring much unix literacy,
hence why I mentioned disk space usage. It's not so much an issue in
itself, but if I wanted to distribute a static VM image with everything
already installed, its size might become an issue.

For instance, Eclipse, which used to be a quite large application, has a
download size of 270 MB. It does not include the JVM, but after
decompressing I'd estimate it (Eclipse + JVM) at about 1 GB.

I don't know the exact size of Xcode, but some websites estimate it at 2-4
GB.

Visual Studio is probably the largest one, at about 6 GB.

Certainly, installing a Linux via a VM includes much more than an IDE +
compiler + runtime, but if it requires 7GB, it's still a hard pill to
swallow.

This brings me to another point: disk usage anxiety. Even with dynamic disk
images, I'm afraid to give them a large size, so I end up worrying that it
will run out of space. And the kinds of errors that happen in such
situations are much less obvious to understand, especially for linux
newbies. Should I just lose my fear and allow my disk images to dynamically
grow to be as large as they want to be?

For those reasons, I asked about a minimalistic Linux with the lightest
possible UI, to save on disk space as much as possible. It's not so much
about CPU, which for the intended purposes should be mostly fine.

Finally, on the issue of transparency, another major difficulty I have when
using a Linux VM is that the file systems are separate, so even if I tell
the students to "just download that file and open it on your
<Linux/OCaml-based application>", they'll either:

a) Download it using Windows, then not be able to find the file using the
Linux application (or have to move it to a shared folder, which they often
forget);
b) Be forced to use a browser inside Linux, which requires more disk space,
setting up the browser, etc.

I never found it very easy to configure Samba shares on Linux or to set up
the filesystem in a way that maximum sharing could be achieved with minimal
user intervention, especially without knowing in advance some parameters
such as host/username, etc. Which would make it even more complicated to
set up in advance in a static VM image for that purpose.

Is there a better solution concerning transparency between Windows and
Linux for OCaml usage purposes? E.g. using a Merlin-configured Emacs from
Linux that could open a file downloaded via Windows and then compile an
OCaml application that could easily read the files in a Windows directory
to perform some action on them? It sounds almost like Cygwin, but that's
another can of worms...

Any partial solutions or tips you can give me about each of these issues is
already greatly useful to me. I usually end up finding some solutions
myself, but it takes a lot of time searching and trying, and if someone had
already done exactly the same thing before, well, I'd be glad to learn from
them!

Best regards,

On Tue, Sep 1, 2015 at 3:27 PM, Mr. Herr <misterherr at freenet.de> wrote:

> Caveat: this is a general answer, my point of view, and not done with OCaml
>
> It certainly is technically feasible, depending on your desktop hardware
> even easy to do.
>
> You need a VM software. I had good experiences with Virtualbox. With MS
> solutions you must find the right product for your Win version
> (Virtual PC or Hyperv ) - I don't think it will beat Virtualbox in your
> scenario.
>

> Disk space: starting from 3G for the OS and ~4G for the opam directory,
> this all depends directly on what you install.
> You need quite some compilers, make and tools, and devel packages. Do a
> pilot install, of course.
>

> Linux distro: any current distribution will do. Performance will not be
> much of an issue unless you have very weak desktops. I am using virtualbox
> on my old notebook. But some ocaml package compile times are quite long
> even on beefy machines (coq comes to mind).
>
> As for the desktop environment: lighter is better, but not an issue
> either, even on KDE you can turn off effects and background tasks to speed
> it up.
> Take what you and your students know.
>
> skipping "... usual software ... coq ..." - is it an ocaml introduction ?
> :-)
>
> But:
>
> There is a big risk of wasting time with subjects not in the centre of
> your course, especially Linux setup and use.
>
> This depends directly on the "unix/linux literacy" of your students.
>
>
> /Str.
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/wg-windows/attachments/20150901/87d97b20/attachment-0001.html>

From yotambarnoy at gmail.com  Tue Sep  1 16:26:18 2015
From: yotambarnoy at gmail.com (Yotam Barnoy)
Date: Tue, 1 Sep 2015 11:26:18 -0400
Subject: [wg-windows] Fwd: [Teaching] Fw: Minimal virtual machine for
	OCaml
In-Reply-To: <CABAtnw_Gj=acvP0iROEP56MUPNbXa3T11GgmR69228hu2EyCbg@mail.gmail.com>
References: <CABAtnw__zsyC10cSAR6QSVmj6ZgbuX3KWAfQzup8if8yAngL+g@mail.gmail.com>
 <9A94AA51109B47E1AF5AC201CCED55AC@erratique.ch> <55E5A7C0.7000108@freenet.de>
 <CABAtnw_hrU71Qcq0c5rdLocCWUkVFrS0Mqq0cGW_6fR5JVJpTw@mail.gmail.com>
 <CABAtnw_Gj=acvP0iROEP56MUPNbXa3T11GgmR69228hu2EyCbg@mail.gmail.com>
Message-ID: <CAN6ygOkH3uGPk+miqxcog2Gz_nKLbGLAj8zWDox2134gNi_q-g@mail.gmail.com>

I highly recommend that you look into vagrant https://www.vagrantup.com/
Last time I helped run a class that needed standardized components, vagrant
was the easiest choice. It's very uniform (everyone has the 'vagrant' user
by default), automatically sets up sharing of directories, and allows for
bring-up/tear-down/sshing in using very simple commands. You'll be able to
post simple instructions that everyone will be able to follow.

I recommend sticking with an Ubuntu distribution. Anything else will be
much harder to support.

Of course, a more ideal setting is to have everyone use the University's
standard unix accounts, as those will be even more standardized. But this
is a close second.

-Yotam

On Tue, Sep 1, 2015 at 11:02 AM, Thranur Andul <thranur at gmail.com> wrote:

> Thank you for the advice.
>
> To clarify what I'm looking for: I'm trying to make Linux usage as
> transparent as possible, exactly to avoid requiring much unix literacy,
> hence why I mentioned disk space usage. It's not so much an issue in
> itself, but if I wanted to distribute a static VM image with everything
> already installed, its size might become an issue.
>
> For instance, Eclipse, which used to be a quite large application, has a
> download size of 270 MB. It does not include the JVM, but after
> decompressing I'd estimate it (Eclipse + JVM) at about 1 GB.
>
> I don't know the exact size of Xcode, but some websites estimate it at 2-4
> GB.
>
> Visual Studio is probably the largest one, at about 6 GB.
>
> Certainly, installing a Linux via a VM includes much more than an IDE +
> compiler + runtime, but if it requires 7GB, it's still a hard pill to
> swallow.
>
> This brings me to another point: disk usage anxiety. Even with dynamic
> disk images, I'm afraid to give them a large size, so I end up worrying
> that it will run out of space. And the kinds of errors that happen in such
> situations are much less obvious to understand, especially for linux
> newbies. Should I just lose my fear and allow my disk images to dynamically
> grow to be as large as they want to be?
>
> For those reasons, I asked about a minimalistic Linux with the lightest
> possible UI, to save on disk space as much as possible. It's not so much
> about CPU, which for the intended purposes should be mostly fine.
>
> Finally, on the issue of transparency, another major difficulty I have
> when using a Linux VM is that the file systems are separate, so even if I
> tell the students to "just download that file and open it on your
> <Linux/OCaml-based application>", they'll either:
>
> a) Download it using Windows, then not be able to find the file using the
> Linux application (or have to move it to a shared folder, which they often
> forget);
> b) Be forced to use a browser inside Linux, which requires more disk
> space, setting up the browser, etc.
>
> I never found it very easy to configure Samba shares on Linux or to set up
> the filesystem in a way that maximum sharing could be achieved with minimal
> user intervention, especially without knowing in advance some parameters
> such as host/username, etc. Which would make it even more complicated to
> set up in advance in a static VM image for that purpose.
>
> Is there a better solution concerning transparency between Windows and
> Linux for OCaml usage purposes? E.g. using a Merlin-configured Emacs from
> Linux that could open a file downloaded via Windows and then compile an
> OCaml application that could easily read the files in a Windows directory
> to perform some action on them? It sounds almost like Cygwin, but that's
> another can of worms...
>
> Any partial solutions or tips you can give me about each of these issues
> is already greatly useful to me. I usually end up finding some solutions
> myself, but it takes a lot of time searching and trying, and if someone had
> already done exactly the same thing before, well, I'd be glad to learn from
> them!
>
> Best regards,
>
> On Tue, Sep 1, 2015 at 3:27 PM, Mr. Herr <misterherr at freenet.de> wrote:
>
>> Caveat: this is a general answer, my point of view, and not done with
>> OCaml
>>
>> It certainly is technically feasible, depending on your desktop hardware
>> even easy to do.
>>
>> You need a VM software. I had good experiences with Virtualbox. With MS
>> solutions you must find the right product for your Win version
>> (Virtual PC or Hyperv ) - I don't think it will beat Virtualbox in your
>> scenario.
>>
>
>> Disk space: starting from 3G for the OS and ~4G for the opam directory,
>> this all depends directly on what you install.
>> You need quite some compilers, make and tools, and devel packages. Do a
>> pilot install, of course.
>>
>
>> Linux distro: any current distribution will do. Performance will not be
>> much of an issue unless you have very weak desktops. I am using virtualbox
>> on my old notebook. But some ocaml package compile times are quite long
>> even on beefy machines (coq comes to mind).
>>
>> As for the desktop environment: lighter is better, but not an issue
>> either, even on KDE you can turn off effects and background tasks to speed
>> it up.
>> Take what you and your students know.
>>
>> skipping "... usual software ... coq ..." - is it an ocaml introduction ?
>> :-)
>>
>> But:
>>
>> There is a big risk of wasting time with subjects not in the centre of
>> your course, especially Linux setup and use.
>>
>> This depends directly on the "unix/linux literacy" of your students.
>>
>>
>> /Str.
>>
>>
>>
>
>
> _______________________________________________
> wg-windows mailing list
> wg-windows at lists.ocaml.org
> http://lists.ocaml.org/listinfo/wg-windows
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/wg-windows/attachments/20150901/c4556c9c/attachment.html>

From modlfo at gmail.com  Tue Sep  1 19:51:52 2015
From: modlfo at gmail.com (Leonardo Laguna Ruiz)
Date: Tue, 1 Sep 2015 20:51:52 +0200
Subject: [wg-windows] Problem (and fix) with Unix.create_process in
	windows
In-Reply-To: <63E0A8564BF34E0CB1216E1130BE1EA0@erratique.ch>
References: <CAF=ojbVBciLiwREy3MrbA-b63C-dXnPAxC7LCQQt-fnyRimR9A@mail.gmail.com>
 <63E0A8564BF34E0CB1216E1130BE1EA0@erratique.ch>
Message-ID: <97EB086F-259A-4EF7-BB51-9B7EB1CC3A4C@gmail.com>



I was curious about what Qt makes when calling a process, since we have used Qt in windows without problems when calling processes. Seems that they do exactly what my fix makes:

https://github.com/Vitallium/qt5/blob/master/qtbase/src/corelib/io/qprocess_win.cpp

I would assume that this change is safe and compatible since it has been in Qt for a while.

Leonardo

> On 01 Sep 2015, at 15:20, Daniel B?nzli <daniel.buenzli at erratique.ch> wrote:
> 
>> Le mardi, 1 septembre 2015 ? 14:01, Leonardo Laguna a ?crit :
>> Has anyone had these kind of problems?
> 
> Not yet.  
> 
>> Is is possible to get this change in the ocaml code?
> This surely qualifies as bug. No escaping should be needed on Unix.create_process and whathever you give as arguments should end up in the sub process' Sys.argv as given. A mantis http://caml.inria.fr/mantis/ issue and a patch (possibly on github) are likely most welcome.  
> 
> FWIW I have this link about the problem [1] I intended to study at a certain point. It might be worth giving it a read.  
> 
> Best,
> 
> Daniel
> 
> [1] http://blogs.msdn.com/b/twistylittlepassagesallalike/archive/2011/04/23/everyone-quotes-arguments-the-wrong-way.aspx
> 
> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/wg-windows/attachments/20150901/20d822fe/attachment.html>

From dra-news at metastack.com  Tue Sep  1 21:33:22 2015
From: dra-news at metastack.com (David Allsopp)
Date: Tue, 1 Sep 2015 20:33:22 +0000
Subject: [wg-windows] Problem (and fix) with Unix.create_process
	in	windows
In-Reply-To: <97EB086F-259A-4EF7-BB51-9B7EB1CC3A4C@gmail.com>
References: <CAF=ojbVBciLiwREy3MrbA-b63C-dXnPAxC7LCQQt-fnyRimR9A@mail.gmail.com>
 <63E0A8564BF34E0CB1216E1130BE1EA0@erratique.ch>
 <97EB086F-259A-4EF7-BB51-9B7EB1CC3A4C@gmail.com>
Message-ID: <E51C5B015DBD1348A1D85763337FB6D9E9E39BF7@Remus.metastack.local>

That?s all great information to include in code/commit comments with any patches (links to bug tracker reports can be useful as well). The key thing with changes like this is to have as much pertinent info included as possible as to why the change was made so that future issues/changes can avoid hopefully regressions.


David

From: wg-windows [mailto:wg-windows-bounces at lists.ocaml.org] On Behalf Of Leonardo Laguna Ruiz
Sent: 01 September 2015 20:52
To: Daniel B?nzli
Cc: wg-windows at lists.ocaml.org
Subject: Re: [wg-windows] Problem (and fix) with Unix.create_process in windows



I was curious about what Qt makes when calling a process, since we have used Qt in windows without problems when calling processes. Seems that they do exactly what my fix makes:

https://github.com/Vitallium/qt5/blob/master/qtbase/src/corelib/io/qprocess_win.cpp

I would assume that this change is safe and compatible since it has been in Qt for a while.

Leonardo

On 01 Sep 2015, at 15:20, Daniel B?nzli <daniel.buenzli at erratique.ch<mailto:daniel.buenzli at erratique.ch>> wrote:
Le mardi, 1 septembre 2015 ? 14:01, Leonardo Laguna a ?crit :

Has anyone had these kind of problems?

Not yet.


Is is possible to get this change in the ocaml code?
This surely qualifies as bug. No escaping should be needed on Unix.create_process and whathever you give as arguments should end up in the sub process' Sys.argv as given. A mantis http://caml.inria.fr/mantis/ issue and a patch (possibly on github) are likely most welcome.

FWIW I have this link about the problem [1] I intended to study at a certain point. It might be worth giving it a read.

Best,

Daniel

[1] http://blogs.msdn.com/b/twistylittlepassagesallalike/archive/2011/04/23/everyone-quotes-arguments-the-wrong-way.aspx

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/wg-windows/attachments/20150901/12d5a6c0/attachment-0001.html>

From misterherr at freenet.de  Tue Sep  1 22:06:49 2015
From: misterherr at freenet.de (Mr. Herr)
Date: Tue, 1 Sep 2015 23:06:49 +0200
Subject: [wg-windows] Problem (and fix) with Unix.create_process in
	windows
Message-ID: <55E61369.7080406@freenet.de>

Hi,

I found this original Windows documentation about CreateProcess, it might help you 
judge the change:

https://msdn.microsoft.com/en-us/library/windows/desktop/ms682425%28v=vs.85%29.aspx

too long to quote.

/Str.


On 01.09.2015 20:51, Leonardo Laguna Ruiz wrote:
>  > > I was curious about what Qt makes when calling a process, since we haveused Qt 
in windows without problems when calling processes. Seems that they do exactly what 
my fix makes: > > 
https://github.com/Vitallium/qt5/blob/master/qtbase/src/corelib/io/qprocess_win.cpp > 
 > I would assume that this change is safe and compatible since it has been in Qt for 
a while. > > Leonardo >
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/wg-windows/attachments/20150901/d9e9bdac/attachment.html>

From anil at recoil.org  Wed Sep  2 21:34:13 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Wed, 2 Sep 2015 13:34:13 -0700
Subject: [wg-windows] Minimal virtual machine for OCaml
In-Reply-To: <CABAtnw__zsyC10cSAR6QSVmj6ZgbuX3KWAfQzup8if8yAngL+g@mail.gmail.com>
References: <CABAtnw__zsyC10cSAR6QSVmj6ZgbuX3KWAfQzup8if8yAngL+g@mail.gmail.com>
Message-ID: <AFE940AA-DB91-4474-AF1B-DF54716104BE@recoil.org>

On 1 Sep 2015, at 04:20, Thranur Andul <thranur at gmail.com> wrote:
> 
> While OPAM for Windows is not ready, I'm considering some teaching experiments using Linux virtual machines running inside Windows.
> 
> I suppose it has already been tried by some people here, so maybe someone could share their experiences with that approach.
> 
> In particular, one of my main issues is disk space: how much space would be necessary for a minimal Linux install with a graphical interface (XFCE, LXDE or even lighter) and the dependencies needed to install OCaml and the most common OPAM packages (e.g. Core, 
> js_of_ocaml, Coq, etc.)? Is there already a Linux distribution made for that?
> 
> Also, related details about virtual machine experiences (issues, limitations, recommendations, etc.) are welcome.

One fairly easy way to get the VM images that is portable across operating systems is to use Vagrant.  One that has been recently updated (by the CS3110 folk at Cornell) is at:

https://github.com/cs3110/vagrant-opam <https://github.com/cs3110/vagrant-opam>

That sets up a common development environment and OPAM.

It's tricky to get things more lightweight than this when using VMs.  One option I'm investigating is the feasibility of using Docker containers (via Boot2Docker) in order to have a CLI-only interface to the environment.  The user experience with this is to install the recently released Docker Toolbox on either Windows or MacOS X, and then use a CLI to get a Linux container.  Some more work is needed to expose a graphical interface, so it's not quite ideal for student use yet.

cheers,
Anil
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/wg-windows/attachments/20150902/54487330/attachment.html>

From dra-news at metastack.com  Tue Sep 15 12:31:07 2015
From: dra-news at metastack.com (David Allsopp)
Date: Tue, 15 Sep 2015 12:31:07 +0100
Subject: [wg-windows] OPAM on Native Windows - Status update
Message-ID: <000f01d0efaa$03f94150$0bebc3f0$@metastack.com>

As previously mentioned, I've been devoting a little time to porting the
master branch of OPAM to work on native Windows (i.e. in a Command or
PowerShell Prompt rather than in Cygwin).

I had the chance to sync with a few people in Cambridge at the end of
August, and as a result a few of us had a presentation/discussion at
Microsoft Research Cambridge yesterday about the work I've done so far and
what still needs doing. The (PDF) slides from my talk are available at
http://1drv.ms/1QeD746

I refer in the slides to various things where Proof-of-Concept (PoC) work
has been done, and I've now shared these on GitHub at
https://github.com/dra27/opam-experiments

I mention at the end that the port is not particularly exciting at this
stage, as you can only get as far as a not terribly polished opam init. My
plan is by mid-October to have opam config env working so that we have a
very, very pre-alpha "release" which may be able to install some packages
into the system switch only.

Anyone is of course welcome to try building what's on the windows branch in
the meantime, and I'm very happy to provide assistance/receive bug reports
on the build process so far. There's documentation on the detailed
requirements for the build environment in README.md (see
https://github.com/dra27/opam/blob/windows/README.md#compiling-on-native-win
dows)

I have also shared my OneNote scribblings and notes on the port at
http://1drv.ms/1QeDkV0 (opens in OneNote Online). Please be aware that this
document contains paged-out portions of my brain, which is both a
highly-disorganised place and also sometimes expresses opinions more
strongly than are necessary!

Continuing towards the OCaml/OPAM Windows Dream...


David


From gabriel.scherer at gmail.com  Tue Sep 15 12:45:25 2015
From: gabriel.scherer at gmail.com (Gabriel Scherer)
Date: Tue, 15 Sep 2015 13:45:25 +0200
Subject: [wg-windows] [opam-devel] OPAM on Native Windows - Status update
In-Reply-To: <000f01d0efaa$03f94150$0bebc3f0$@metastack.com>
References: <000f01d0efaa$03f94150$0bebc3f0$@metastack.com>
Message-ID: <CAPFanBHoJj-k4_q_adqH+by9vgxxxogY3NOHhgBsR4pwYJrK8A@mail.gmail.com>

Could you provide more information on what changes/fixes you need from
upstream? By looking at the slides I see that you mention
  http://caml.inria.fr/mantis/view.php?id=4034
  http://caml.inria.fr/mantis/view.php?id=6120

Are both equally important? Is it easy to workaround not having them, or a
deal-breaker for your work? Which other upstream issues would you need
solved?


On Tue, Sep 15, 2015 at 1:31 PM, David Allsopp <dra-news at metastack.com>
wrote:

> As previously mentioned, I've been devoting a little time to porting the
> master branch of OPAM to work on native Windows (i.e. in a Command or
> PowerShell Prompt rather than in Cygwin).
>
> I had the chance to sync with a few people in Cambridge at the end of
> August, and as a result a few of us had a presentation/discussion at
> Microsoft Research Cambridge yesterday about the work I've done so far and
> what still needs doing. The (PDF) slides from my talk are available at
> http://1drv.ms/1QeD746
>
> I refer in the slides to various things where Proof-of-Concept (PoC) work
> has been done, and I've now shared these on GitHub at
> https://github.com/dra27/opam-experiments
>
> I mention at the end that the port is not particularly exciting at this
> stage, as you can only get as far as a not terribly polished opam init. My
> plan is by mid-October to have opam config env working so that we have a
> very, very pre-alpha "release" which may be able to install some packages
> into the system switch only.
>
> Anyone is of course welcome to try building what's on the windows branch in
> the meantime, and I'm very happy to provide assistance/receive bug reports
> on the build process so far. There's documentation on the detailed
> requirements for the build environment in README.md (see
>
> https://github.com/dra27/opam/blob/windows/README.md#compiling-on-native-win
> dows)
>
> I have also shared my OneNote scribblings and notes on the port at
> http://1drv.ms/1QeDkV0 (opens in OneNote Online). Please be aware that
> this
> document contains paged-out portions of my brain, which is both a
> highly-disorganised place and also sometimes expresses opinions more
> strongly than are necessary!
>
> Continuing towards the OCaml/OPAM Windows Dream...
>
>
> David
>
> _______________________________________________
> opam-devel mailing list
> opam-devel at lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/wg-windows/attachments/20150915/f884cfb2/attachment.html>

From dra-news at metastack.com  Tue Sep 15 13:04:44 2015
From: dra-news at metastack.com (David Allsopp)
Date: Tue, 15 Sep 2015 12:04:44 +0000
Subject: [wg-windows] [opam-devel] OPAM on Native Windows - Status update
In-Reply-To: <CAPFanBHoJj-k4_q_adqH+by9vgxxxogY3NOHhgBsR4pwYJrK8A@mail.gmail.com>
References: <000f01d0efaa$03f94150$0bebc3f0$@metastack.com>
 <CAPFanBHoJj-k4_q_adqH+by9vgxxxogY3NOHhgBsR4pwYJrK8A@mail.gmail.com>
Message-ID: <9752EA39-D1F3-4E67-BDDE-8FBB20BAE651@metastack.com>

On 15 Sep 2015, at 12:46, Gabriel Scherer <gabriel.scherer at gmail.com<mailto:gabriel.scherer at gmail.com>> wrote:
Could you provide more information on what changes/fixes you need from upstream? By looking at the slides I see that you mention
  http://caml.inria.fr/mantis/view.php?id=4034
  http://caml.inria.fr/mantis/view.php?id=6120

Are both equally important? Is it easy to workaround not having them, or a deal-breaker for your work? Which other upstream issues would you need solved?

4034 is complicated which is why it's sat unfixed - it doesn't need fixing for OPAM, I simply wrapped the Windows API call in OPAM directly to solve its use case.

6120 is critical for building dose3 directly (if you compile using lib-ext, it doesn't matter) but not critical, therefore. I was going to update its Mantis page with a note that I expect to finish the patch in October (and so hopefully get it into 4.03). The make compiler route of my Windows OPAM port already includes this patch.

I'm not aware of any other OCaml fixes needed - I don't expect any, either, as OCaml of course works well on Windows already!


David




On Tue, Sep 15, 2015 at 1:31 PM, David Allsopp <dra-news at metastack.com<mailto:dra-news at metastack.com>> wrote:
As previously mentioned, I've been devoting a little time to porting the
master branch of OPAM to work on native Windows (i.e. in a Command or
PowerShell Prompt rather than in Cygwin).

I had the chance to sync with a few people in Cambridge at the end of
August, and as a result a few of us had a presentation/discussion at
Microsoft Research Cambridge yesterday about the work I've done so far and
what still needs doing. The (PDF) slides from my talk are available at
http://1drv.ms/1QeD746

I refer in the slides to various things where Proof-of-Concept (PoC) work
has been done, and I've now shared these on GitHub at
https://github.com/dra27/opam-experiments

I mention at the end that the port is not particularly exciting at this
stage, as you can only get as far as a not terribly polished opam init. My
plan is by mid-October to have opam config env working so that we have a
very, very pre-alpha "release" which may be able to install some packages
into the system switch only.

Anyone is of course welcome to try building what's on the windows branch in
the meantime, and I'm very happy to provide assistance/receive bug reports
on the build process so far. There's documentation on the detailed
requirements for the build environment in README.md (see
https://github.com/dra27/opam/blob/windows/README.md#compiling-on-native-win
dows)

I have also shared my OneNote scribblings and notes on the port at
http://1drv.ms/1QeDkV0 (opens in OneNote Online). Please be aware that this
document contains paged-out portions of my brain, which is both a
highly-disorganised place and also sometimes expresses opinions more
strongly than are necessary!

Continuing towards the OCaml/OPAM Windows Dream...


David

_______________________________________________
opam-devel mailing list
opam-devel at lists.ocaml.org<mailto:opam-devel at lists.ocaml.org>
http://lists.ocaml.org/listinfo/opam-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/wg-windows/attachments/20150915/d16f10ed/attachment.html>

From jonathan.protzenko at gmail.com  Tue Sep 15 18:20:56 2015
From: jonathan.protzenko at gmail.com (Jonathan Protzenko)
Date: Tue, 15 Sep 2015 10:20:56 -0700
Subject: [wg-windows] Interim solution for OPAM on Windows
Message-ID: <55F85378.7000008@gmail.com>

Hi all,

David's email reminded me that I forgot to tell the world about this 
horrible hack that I did a while ago.

http://protz.github.io/ocaml-installer/ now offers an installer with 
OPAM. The toolchain is the usual one (native compilers / generating 
native windows programs / using mingw64 32-bit compilers). However, the 
installer now installs an "opam" program in c:\ocaml\bin. The opam 
program is a *cygwin 32-bit binary*, so it only works within a cygwin 
32-bit terminal. I got as far as doing "opam init" and "opam install 
a-whole-bunch-of-packages", including mezzo and all its dependencies, 
batteries, and a couple others.

All in all, I hope it'll provide a good enough interim solution until 
David finishes everything and I can, eventually, retire my installer :).

Caveats:
- there is a massive dependency on cygwin now as your build + opam 
environment;
- that won't help with "sophisticated" packages (e.g. openssl, lablgtk) 
because afaik, you still have to fight to install and compile the gtk / 
openssl libraries yourself on windows;
- I don't expect opam switch to work at all... it wouldn't make much 
sense anyhow.

Feedback is welcome.

Cheers,

Jonathan



From dra-news at metastack.com  Wed Sep 16 08:45:50 2015
From: dra-news at metastack.com (David Allsopp)
Date: Wed, 16 Sep 2015 07:45:50 +0000
Subject: [wg-windows] Interim solution for OPAM on Windows
In-Reply-To: <55F85378.7000008@gmail.com>
References: <55F85378.7000008@gmail.com>
Message-ID: <E51C5B015DBD1348A1D85763337FB6D9E9E97524@Remus.metastack.local>

Jonathan Protzenko wrote:
> David's email reminded me that I forgot to tell the world about this
> horrible hack that I did a while ago.
> 
> http://protz.github.io/ocaml-installer/ now offers an installer with OPAM.
> The toolchain is the usual one (native compilers / generating native
> windows programs / using mingw64 32-bit compilers). However, the installer
> now installs an "opam" program in c:\ocaml\bin. The opam program is a
> *cygwin 32-bit binary*, so it only works within a cygwin 32-bit terminal.
> I got as far as doing "opam init" and "opam install a-whole-bunch-of-
> packages", including mezzo and all its dependencies, batteries, and a
> couple others.
> 
> All in all, I hope it'll provide a good enough interim solution until
> David finishes everything and I can, eventually, retire my installer :).

It's not (necessarily) the case that the installer would want retiring (but it may well change shape, especially where installing Cygwin is concerned). OPAM expects the system already to have an OCaml compiler (usually installed by the operating system's package manager) - one of the minor changes I have yet to make is to relax this requirement for OPAM on Windows, as it is less reasonable.

However, the existence of the "system" switch means I was imagining that there would still want to be an installer which installs OCaml (and OPAM) "for all users". Apart from anything else, it would improve the first-time OCaml user's experience as installing OPAM on a system without OCaml must necessarily add a 10 minute or so delay while OPAM builds OCaml.


David

From misterherr at freenet.de  Wed Sep 16 09:49:20 2015
From: misterherr at freenet.de (Mr. Herr)
Date: Wed, 16 Sep 2015 10:49:20 +0200
Subject: [wg-windows] Interim solution for OPAM on Windows
In-Reply-To: <E51C5B015DBD1348A1D85763337FB6D9E9E97524@Remus.metastack.local>
References: <55F85378.7000008@gmail.com>
 <E51C5B015DBD1348A1D85763337FB6D9E9E97524@Remus.metastack.local>
Message-ID: <55F92D10.7090706@freenet.de>



On 16.09.2015 09:45, David Allsopp wrote:
> Jonathan Protzenko wrote:
>> David's email reminded me that I forgot to tell the world about this
>> horrible hack that I did a while ago.
>>
>> http://protz.github.io/ocaml-installer/ now offers an installer with OPAM.
>> The toolchain is the usual one (native compilers / generating native
>> windows programs / using mingw64 32-bit compilers). However, the installer
>> now installs an "opam" program in c:\ocaml\bin. The opam program is a
>> *cygwin 32-bit binary*, so it only works within a cygwin 32-bit terminal.
>> I got as far as doing "opam init" and "opam install a-whole-bunch-of-
>> packages", including mezzo and all its dependencies, batteries, and a
>> couple others.
>>
>> All in all, I hope it'll provide a good enough interim solution until
>> David finishes everything and I can, eventually, retire my installer :).
> It's not (necessarily) the case that the installer would want retiring (but it may well change shape, especially where installing Cygwin is concerned). OPAM expects the system already to have an OCaml compiler (usually installed by the operating system's package manager) - one of the minor changes I have yet to make is to relax this requirement for OPAM on Windows, as it is less reasonable.

Opam has an ocaml-less install procedure, see list "ocaml_beginners"::[] Conflicting 
installation advice" 16.08.2015 14:09 CEST,
and http://opam.ocaml.org/doc/Install.html "Binary Installer".

> However, the existence of the "system" switch means I was imagining that there would still want to be an installer which installs OCaml (and OPAM) "for all users". Apart from anything else, it would improve the first-time OCaml user's experience as installing OPAM on a system without OCaml must necessarily add a 10 minute or so delay while OPAM builds OCaml.
>

There is no system distribution in Windows, right? So opam must do it, and it does it 
well on *nix.

With all the progress opam has made and brought, a general scripting setup like perl 
/ tcl / python is still
lacking IMO, it would make ocaml more accessible for ad hoc scripting.

Yes, I know, the seasoned admin has his hand knitted solution...

/Str.



From dra-news at metastack.com  Wed Sep 16 10:08:34 2015
From: dra-news at metastack.com (David Allsopp)
Date: Wed, 16 Sep 2015 09:08:34 +0000
Subject: [wg-windows] Interim solution for OPAM on Windows
In-Reply-To: <55F92D10.7090706@freenet.de>
References: <55F85378.7000008@gmail.com>
 <E51C5B015DBD1348A1D85763337FB6D9E9E97524@Remus.metastack.local>
 <55F92D10.7090706@freenet.de>
Message-ID: <E51C5B015DBD1348A1D85763337FB6D9E9E98886@Remus.metastack.local>

Mr. Herr wrote:
> On 16.09.2015 09:45, David Allsopp wrote:
> > Jonathan Protzenko wrote:
> >> David's email reminded me that I forgot to tell the world about this
> >> horrible hack that I did a while ago.
> >>
> >> http://protz.github.io/ocaml-installer/ now offers an installer with
> OPAM.
> >> The toolchain is the usual one (native compilers / generating native
> >> windows programs / using mingw64 32-bit compilers). However, the
> >> installer now installs an "opam" program in c:\ocaml\bin. The opam
> >> program is a *cygwin 32-bit binary*, so it only works within a cygwin
> 32-bit terminal.
> >> I got as far as doing "opam init" and "opam install a-whole-bunch-of-
> >> packages", including mezzo and all its dependencies, batteries, and a
> >> couple others.
> >>
> >> All in all, I hope it'll provide a good enough interim solution until
> >> David finishes everything and I can, eventually, retire my installer
> :).
> > It's not (necessarily) the case that the installer would want retiring
> (but it may well change shape, especially where installing Cygwin is
> concerned). OPAM expects the system already to have an OCaml compiler
> (usually installed by the operating system's package manager) - one of the
> minor changes I have yet to make is to relax this requirement for OPAM on
> Windows, as it is less reasonable.
> 
> Opam has an ocaml-less install procedure, see list "ocaml_beginners"::[]
> Conflicting installation advice" 16.08.2015 14:09 CEST, and
> http://opam.ocaml.org/doc/Install.html "Binary Installer".

I'm aware of that - however, if you forget to specify --comp, I'm fairly certain you get an exception at the moment (it certainly did when I last looked)...

> > However, the existence of the "system" switch means I was imagining that
> there would still want to be an installer which installs OCaml (and OPAM)
> "for all users". Apart from anything else, it would improve the first-time
> OCaml user's experience as installing OPAM on a system without OCaml must
> necessarily add a 10 minute or so delay while OPAM builds OCaml.
> >
> 
> There is no system distribution in Windows, right? So opam must do it, and
> it does it well on *nix.

Yes there is - anything you install at a system level (i.e. for all users) is the "system distribution". That said, "system", as far as OPAM is concerned, simply means an OCaml compiler that it found in PATH.

> With all the progress opam has made and brought, a general scripting setup
> like perl / tcl / python is still lacking IMO, it would make ocaml more
> accessible for ad hoc scripting.

I'm not sure what you mean here?


David 

From anil at recoil.org  Wed Sep 30 16:01:57 2015
From: anil at recoil.org (Anil Madhavapeddy)
Date: Wed, 30 Sep 2015 16:01:57 +0100
Subject: [wg-windows] Fwd: [Caml-list] User Report: Cygwin32 OPAM for MinGW
	OCaml 64
References: <CAAoLEWsQK7=qER66Uixx5pq4wLExXovrQWM6b69_fyMmjYFiZA@mail.gmail.com>
Message-ID: <A2D3FCEF-C290-4371-BA08-791ABF7FC9BE@recoil.org>



> Begin forwarded message:
> 
> From: Jun Furuse <jun.furuse at gmail.com>
> Subject: [Caml-list] User Report: Cygwin32 OPAM for MinGW OCaml 64
> Date: 30 September 2015 16:00:04 BST
> To: caml-list <caml-list at inria.fr>
> Reply-To: Jun Furuse <jun.furuse at gmail.com>
> 
> Hi List,
> 
> I have played a bit with Cygwin OPAM to install packages for MinGW
> 64bit OCaml system, and finally got succeeded to install core_kernel
> by `opam install core_kernel`.  It required several fixes of
> OCaml+OPAM configurations and patching to packages but now I think I
> got enough know-how and share it with the community.
> 
> To use Cygwin32 OPAM smoothly for MinGW64 OCaml you need:
> 
> * /usr/bin/ar of Cygwin32 did not work for MinGW OCaml 64. I had to
> use a special ar command for MinGW64.
> * Many build scripts assume Unix commands.  You need to add Cygwin's
> /bin directory to Windows PATH
> * global-config.config and system.comp must be fixed so that directory
> and paths can be understandable by MinGW OCaml, a Windows app
> 
> Many packages can be installed without any modification to them.
> Therefore Cygwin OPAM is already very useful for MinGW OCaml package
> installation.  However, some packages required fixes and here are some
> tips:
> 
> * Use "mixed path" obtained by cygpath -m, so that the paths can be
> understandable both for Cygwin and for MinGW
> * Build systems like Oasis executes commands not using /bin/sh but
> cmd.exe in MinGW.  _oasis or setup.ml contains lots of Unix shell
> phrases like   mkdir $dir; build something  which are wrongly executed
> by cmd.exe.  You need to fix them so that they can be interpreted by
> sh, i.e.  sh -c "mkdir $dir; build something"
> * In Unix, files in xxx.install are ignored by OPAM when they are
> already installed by OPAM's install section.  However, in Cygwin, it
> sometimes fails.  It is due to Cygwin's special handling of files with
> .exe extension.  You need remove entries from xxx.install if they are
> installed by the install section.
> 
> I hope this information helps you.  More details or work log can be
> found here: https://bitbucket.org/camlspotter/opamingw
> 
> Enjoy OPAMinGW!
> Jun Furuse
> 
> -- 
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
> 


