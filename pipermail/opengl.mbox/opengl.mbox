From anil@recoil.org  Mon Mar 11 20:41:07 2013
Return-Path: <anil@recoil.org>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id C40CC3C437
 for <opengl@lists.ocaml.org>; Mon, 11 Mar 2013 20:41:07 +0000 (GMT)
X-Cam-AntiVirus: no malware found
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1454805
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from recoil.dh.bytemark.co.uk ([89.16.177.154]:12333
 helo=dark.recoil.org)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with smtp id 1UF9dI-0004Is-rp (Exim 4.72) for opengl@lists.ocaml.org
 (return-path <anil@recoil.org>); Mon, 11 Mar 2013 20:47:45 +0000
Received: (qmail 6754 invoked by uid 634); 11 Mar 2013 20:47:44 -0000
X-Spam-Level: *
X-Spam-Status: No, hits=-1.0 required=5.0
	tests=ALL_TRUSTED
X-Spam-Check-By: dark.recoil.org
Received: from cpc7-cmbg14-2-0-cust238.5-4.cable.virginmedia.com (HELO
 [192.168.1.38]) (86.30.244.239)
 (smtp-auth username remote@recoil.org, mechanism cram-md5)
 by dark.recoil.org (qpsmtpd/0.84) with ESMTPA; Mon, 11 Mar 2013 20:47:44 +0000
Content-Type: text/plain; charset=iso-8859-1
Mime-Version: 1.0 (Mac OS X Mail 6.2 \(1499\))
From: Anil Madhavapeddy <anil@recoil.org>
In-Reply-To: <CADKNfhKTZ82Jm-pGOg0tDwNLtanVks=hCqXcs1KP33yoiDLAOg@mail.gmail.com>
Date: Mon, 11 Mar 2013 20:47:44 +0000
Content-Transfer-Encoding: quoted-printable
Message-Id: <4F3221FD-A9C3-4173-91F2-E31BE2285DCB@recoil.org>
References: <CADKNfhKTZ82Jm-pGOg0tDwNLtanVks=hCqXcs1KP33yoiDLAOg@mail.gmail.com>
To: yminsky@gmail.com
X-Mailer: Apple Mail (2.1499)
X-Virus-Checked: Checked by ClamAV on dark.recoil.org
Cc: opengl@lists.ocaml.org, opam-devel@lists.ocaml.org
Subject: Re: [ocaml-opengl] [opam-devel] Problems with LablGL on the rpi
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 11 Mar 2013 20:41:07 -0000

[+opengl@lists.ocaml.org]

Does this commit help?  I noticed that Mike McClurg fixed the META file
recently:

=
https://github.com/OCamlPro/opam-repository/commit/811e6af6c4dbf5da4c4f293=
62ce927fd7f8b61c0

It should be part of OPAM now, so upgrading to the latest will give you
this change.

-anil

On 11 Mar 2013, at 18:38, Yaron Minsky <yminsky@gmail.com> wrote:

> I suspect this is a package-level issue, so I'm not sure this is the
> right list for it, but, nonetheless:
>=20
> I've been playing around with getting lablgl working on the Raspberry
> Pi, using the Raspian distribution.  I got pretty far, but there's
> some weird case-sensitivity issue I suspect when trying to actually
> load the packages.  Look at this:
>=20
> # #require "lablgl";;
> /home/pi/.opam/4.00.1+raspberrypi/lib/lablgl: added to search path
> /home/pi/.opam/4.00.1+raspberrypi/lib/lablgl/lablgl.cma: loaded
> # #require "lablgl.glut";;
> No such package: lablGL - required by `lablgl.glut'
>=20
> The same thing happens when I try to build using ocamlbuild.  On the
> mac I'm working on, however, everything works cleanly:
>=20
> # #require "lablgl.glut";;
> /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablGL: added to search path
> /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablGL/lablgl.cma: loaded
> /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablgl: added to search path
> /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablgl/lablglut.cma: loaded
>=20
> Any idea what could be causing this?  (I'm also running a slightly
> different version of the compiler, but I don't think that's the
> issue.)
>=20
> y
> _______________________________________________
> opam-devel mailing list
> opam-devel@lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
>=20


From daniel.buenzli@erratique.ch  Mon Mar 11 20:51:25 2013
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 3E9A63C437
 for <opengl@lists.ocaml.org>; Mon, 11 Mar 2013 20:51:25 +0000 (GMT)
X-Cam-AntiVirus: no malware found
X-Cam-SpamScore: ss
X-Cam-SpamDetails: score 2.0 from SpamAssassin-3.3.2-1454805 
 *  2.0 RCVD_IN_MAPS_RBL RBL: Relay in RBL,
 *      http://www.mail-abuse.com/enduserinfo_rbl.html
 *      [178.197.234.49 listed in rbl-plus.mail-abuse.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:54962
 helo=smtp.webfaction.com)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtp id 1UF9nF-0007b2-rR (Exim 4.72) for opengl@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Mon, 11 Mar 2013 20:58:02 +0000
Received: from [172.20.10.2] (49-234.197-178.cust.bluewin.ch [178.197.234.49])
 by smtp.webfaction.com (Postfix) with ESMTP id 2565420AB42B;
 Mon, 11 Mar 2013 20:57:59 +0000 (UTC)
Date: Mon, 11 Mar 2013 21:57:58 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: yminsky@gmail.com
Message-ID: <1F20014ABCC04A89B6521412C7A9F62D@erratique.ch>
In-Reply-To: <CADKNfhKTZ82Jm-pGOg0tDwNLtanVks=hCqXcs1KP33yoiDLAOg@mail.gmail.com>
References: <CADKNfhKTZ82Jm-pGOg0tDwNLtanVks=hCqXcs1KP33yoiDLAOg@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Cc: opengl@lists.ocaml.org
Subject: Re: [ocaml-opengl] [opam-devel] Problems with LablGL on the rpi
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 11 Mar 2013 20:51:25 -0000

Le lundi, 11 mars 2013 =C3=A0 19:38, Yaron Minsky a =C3=A9crit :
> I've been playing around with getting lablgl working on the Raspberry
> Pi, using the Raspian distribution. =20

Just being curious, are you playing with lablgles =5B1=5D or lablgl =3F T=
he latter won't give you to access the raspberry pi's gpu. But I don't kn=
ow if the former compiles on raspbian without a hitch.

Best,

Daniel

=5B1=5D http://psellos.com/ocaml/lablgles-build.html



From yminsky@gmail.com  Mon Mar 11 22:55:23 2013
Return-Path: <yminsky@gmail.com>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 6ED2B3C437;
 Mon, 11 Mar 2013 22:55:23 +0000 (GMT)
X-Cam-SpamDetails: score 0.2 from SpamAssassin-3.3.2-1454805 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.181 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (yminsky[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  0.9 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f181.google.com ([209.85.212.181]:37556)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtp id 1UFBjE-0003QB-7d (Exim 4.80_167-5a66dd3)
 (return-path <yminsky@gmail.com>); Mon, 11 Mar 2013 23:02:01 +0000
Received: by mail-wi0-f181.google.com with SMTP id hm6so1385396wib.14
 for <multiple recipients>; Mon, 11 Mar 2013 16:02:00 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:x-received:reply-to:in-reply-to:references:date
 :message-id:subject:from:to:cc:content-type;
 bh=i5yjn8WscQ6vqd21kODdZNhW/BH2ZhVIpAZwUfrmgwI=;
 b=FMQMoMEI/8bZYZ04I8tRtmJTRTN/icJHqJ0biaxT3zXnK1szQ/OKuTqwq0mz8aBqh1
 cNDFKIfRsYTY+tL44g8B9QGCadwi/qw2vZ0UAM7iI+XpY6WdH1w3fzGJnJypEhEC0UyK
 isqGBbTXGkRWE540TRDxhKKAn14JZLQH+PpupIX3UDgwlFXJ1TwmEszy03pkh+Fdp6wb
 1EpD/6KKdZ8b7tg3wu/MROsMS1CkgjxjZygT4YjQ2+SkdzWNz4oqWmvBcKuMOrOt5oaw
 WeLJkz+RHvgeHp7cflSZxixka44ooThZti9I7dGosyOuDYLMRXyUaHsBgX4ONBQNxHAS
 gpWg==
MIME-Version: 1.0
X-Received: by 10.180.189.169 with SMTP id gj9mr2037051wic.5.1363042920070;
 Mon, 11 Mar 2013 16:02:00 -0700 (PDT)
Received: by 10.194.122.168 with HTTP; Mon, 11 Mar 2013 16:01:59 -0700 (PDT)
Received: by 10.194.122.168 with HTTP; Mon, 11 Mar 2013 16:01:59 -0700 (PDT)
In-Reply-To: <CALru5wWr6RRhhJmCwLgOxe9y18Bwdn25JOSfvWnY9aHfAwOqUg@mail.gmail.com>
References: <CADKNfhKTZ82Jm-pGOg0tDwNLtanVks=hCqXcs1KP33yoiDLAOg@mail.gmail.com>
 <4F3221FD-A9C3-4173-91F2-E31BE2285DCB@recoil.org>
 <CALru5wWr6RRhhJmCwLgOxe9y18Bwdn25JOSfvWnY9aHfAwOqUg@mail.gmail.com>
Date: Mon, 11 Mar 2013 19:01:59 -0400
Message-ID: <CADKNfh+o42V+2xUFM4pipf1B8s70JK1QAxziOP87SsOkb7AUDA@mail.gmail.com>
From: Yaron Minsky <yminsky@gmail.com>
To: Mike McClurg <mike.mcclurg@gmail.com>
Content-Type: multipart/alternative; boundary=001a11c34a6210880904d7ae29bc
Cc: opengl@lists.ocaml.org, opam-devel@lists.ocaml.org
Subject: Re: [ocaml-opengl] [opam-devel] Problems with LablGL on the rpi
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
Reply-To: yminsky@gmail.com
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 11 Mar 2013 22:55:23 -0000

--001a11c34a6210880904d7ae29bc
Content-Type: text/plain; charset=ISO-8859-1

I'll give it a shot.
On Mar 11, 2013 5:59 PM, "Mike McClurg" <mike.mcclurg@gmail.com> wrote:

> That's the issue that I was having, Yaron. I think the update that Anil
> mentioned should resolve it.
>
> Mike
>
>
> On Mon, Mar 11, 2013 at 8:47 PM, Anil Madhavapeddy <anil@recoil.org>wrote:
>
>> [+opengl@lists.ocaml.org]
>>
>> Does this commit help?  I noticed that Mike McClurg fixed the META file
>> recently:
>>
>>
>> https://github.com/OCamlPro/opam-repository/commit/811e6af6c4dbf5da4c4f29362ce927fd7f8b61c0
>>
>> It should be part of OPAM now, so upgrading to the latest will give you
>> this change.
>>
>> -anil
>>
>> On 11 Mar 2013, at 18:38, Yaron Minsky <yminsky@gmail.com> wrote:
>>
>> > I suspect this is a package-level issue, so I'm not sure this is the
>> > right list for it, but, nonetheless:
>> >
>> > I've been playing around with getting lablgl working on the Raspberry
>> > Pi, using the Raspian distribution.  I got pretty far, but there's
>> > some weird case-sensitivity issue I suspect when trying to actually
>> > load the packages.  Look at this:
>> >
>> > # #require "lablgl";;
>> > /home/pi/.opam/4.00.1+raspberrypi/lib/lablgl: added to search path
>> > /home/pi/.opam/4.00.1+raspberrypi/lib/lablgl/lablgl.cma: loaded
>> > # #require "lablgl.glut";;
>> > No such package: lablGL - required by `lablgl.glut'
>> >
>> > The same thing happens when I try to build using ocamlbuild.  On the
>> > mac I'm working on, however, everything works cleanly:
>> >
>> > # #require "lablgl.glut";;
>> > /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablGL: added to search path
>> > /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablGL/lablgl.cma: loaded
>> > /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablgl: added to search path
>> > /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablgl/lablglut.cma: loaded
>> >
>> > Any idea what could be causing this?  (I'm also running a slightly
>> > different version of the compiler, but I don't think that's the
>> > issue.)
>> >
>> > y
>> > _______________________________________________
>> > opam-devel mailing list
>> > opam-devel@lists.ocaml.org
>> > http://lists.ocaml.org/listinfo/opam-devel
>> >
>>
>> _______________________________________________
>> opam-devel mailing list
>> opam-devel@lists.ocaml.org
>> http://lists.ocaml.org/listinfo/opam-devel
>>
>
>

--001a11c34a6210880904d7ae29bc
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<p dir=3D"ltr">I&#39;ll give it a shot.</p>
<div class=3D"gmail_quote">On Mar 11, 2013 5:59 PM, &quot;Mike McClurg&quot=
; &lt;<a href=3D"mailto:mike.mcclurg@gmail.com">mike.mcclurg@gmail.com</a>&=
gt; wrote:<br type=3D"attribution"><blockquote class=3D"gmail_quote" style=
=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
<div dir=3D"ltr">That&#39;s the issue that I was having, Yaron. I think the=
 update that Anil mentioned should resolve it.<br><br>Mike<br></div><div cl=
ass=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Mon, Mar 11, 2013=
 at 8:47 PM, Anil Madhavapeddy <span dir=3D"ltr">&lt;<a href=3D"mailto:anil=
@recoil.org" target=3D"_blank">anil@recoil.org</a>&gt;</span> wrote:<br>

<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">[+<a href=3D"mailto:opengl@lists.ocaml.org" =
target=3D"_blank">opengl@lists.ocaml.org</a>]<br>
<br>
Does this commit help? =A0I noticed that Mike McClurg fixed the META file<b=
r>
recently:<br>
<br>
<a href=3D"https://github.com/OCamlPro/opam-repository/commit/811e6af6c4dbf=
5da4c4f29362ce927fd7f8b61c0" target=3D"_blank">https://github.com/OCamlPro/=
opam-repository/commit/811e6af6c4dbf5da4c4f29362ce927fd7f8b61c0</a><br>
<br>
It should be part of OPAM now, so upgrading to the latest will give you<br>
this change.<br>
<span><font color=3D"#888888"><br>
-anil<br>
</font></span><div><div><br>
On 11 Mar 2013, at 18:38, Yaron Minsky &lt;<a href=3D"mailto:yminsky@gmail.=
com" target=3D"_blank">yminsky@gmail.com</a>&gt; wrote:<br>
<br>
&gt; I suspect this is a package-level issue, so I&#39;m not sure this is t=
he<br>
&gt; right list for it, but, nonetheless:<br>
&gt;<br>
&gt; I&#39;ve been playing around with getting lablgl working on the Raspbe=
rry<br>
&gt; Pi, using the Raspian distribution. =A0I got pretty far, but there&#39=
;s<br>
&gt; some weird case-sensitivity issue I suspect when trying to actually<br=
>
&gt; load the packages. =A0Look at this:<br>
&gt;<br>
&gt; # #require &quot;lablgl&quot;;;<br>
&gt; /home/pi/.opam/4.00.1+raspberrypi/lib/lablgl: added to search path<br>
&gt; /home/pi/.opam/4.00.1+raspberrypi/lib/lablgl/lablgl.cma: loaded<br>
&gt; # #require &quot;lablgl.glut&quot;;;<br>
&gt; No such package: lablGL - required by `lablgl.glut&#39;<br>
&gt;<br>
&gt; The same thing happens when I try to build using ocamlbuild. =A0On the=
<br>
&gt; mac I&#39;m working on, however, everything works cleanly:<br>
&gt;<br>
&gt; # #require &quot;lablgl.glut&quot;;;<br>
&gt; /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablGL: added to search path<=
br>
&gt; /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablGL/lablgl.cma: loaded<br>
&gt; /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablgl: added to search path<=
br>
&gt; /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablgl/lablglut.cma: loaded<b=
r>
&gt;<br>
&gt; Any idea what could be causing this? =A0(I&#39;m also running a slight=
ly<br>
&gt; different version of the compiler, but I don&#39;t think that&#39;s th=
e<br>
&gt; issue.)<br>
&gt;<br>
&gt; y<br>
&gt; _______________________________________________<br>
&gt; opam-devel mailing list<br>
&gt; <a href=3D"mailto:opam-devel@lists.ocaml.org" target=3D"_blank">opam-d=
evel@lists.ocaml.org</a><br>
&gt; <a href=3D"http://lists.ocaml.org/listinfo/opam-devel" target=3D"_blan=
k">http://lists.ocaml.org/listinfo/opam-devel</a><br>
&gt;<br>
<br>
_______________________________________________<br>
opam-devel mailing list<br>
<a href=3D"mailto:opam-devel@lists.ocaml.org" target=3D"_blank">opam-devel@=
lists.ocaml.org</a><br>
<a href=3D"http://lists.ocaml.org/listinfo/opam-devel" target=3D"_blank">ht=
tp://lists.ocaml.org/listinfo/opam-devel</a><br>
</div></div></blockquote></div><br></div>
</blockquote></div>

--001a11c34a6210880904d7ae29bc--

From monnier.florent@gmail.com  Mon Mar 11 23:48:54 2013
Return-Path: <monnier.florent@gmail.com>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 36F793C437
 for <opengl@lists.ocaml.org>; Mon, 11 Mar 2013 23:48:54 +0000 (GMT)
X-Cam-SpamDetails: score 0.2 from SpamAssassin-3.3.2-1454805 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.172 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (monnier.florent[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  0.9 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f172.google.com ([209.85.212.172]:45559)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtp id 1UFCZ1-0006oi-7l (Exim 4.80_167-5a66dd3) for
 opengl@lists.ocaml.org
 (return-path <monnier.florent@gmail.com>); Mon, 11 Mar 2013 23:55:32 +0000
Received: by mail-wi0-f172.google.com with SMTP id ez12so1405171wid.11
 for <opengl@lists.ocaml.org>; Mon, 11 Mar 2013 16:55:31 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:x-received:date:message-id:subject:from:to
 :content-type:content-transfer-encoding;
 bh=mKv84Zpz3jdKVlLJ4cel4lDaQdzqd8GbZGGMxfuckNw=;
 b=IBiuedLX2RGcUo8ln/5VzRJ+GRFyJ9fVhlE4jdxlfRT+NqCbSYVRdRe5RZYCYEZA4W
 EuTMuYlI2o+GJmyd8+PsL1r6JBswMZzLdkj6AphJ3F5XKH7aoTeWYk+rMZN/cznNsZky
 ReK3eqhEd5GQyOhJGaH8REdsoSp87Bxfxqrdlf+URXIKWM48h9qpHd2KnBqqSJVPEYh8
 X+vwfxA2YuCAtskMXpG3YYhFlOVLzPANuZcq8oGJzlJUJKtl9o/2Yi+p9th1LjE7Fkop
 sUmp7g9ZN87IuTOZ1f+l4J4MD/Mf/1QNtktVDOA1z6ZuOPeJrhGFRErjEtuqmCEL+6cG
 nP5w==
MIME-Version: 1.0
X-Received: by 10.194.119.200 with SMTP id kw8mr22698247wjb.31.1363046131159; 
 Mon, 11 Mar 2013 16:55:31 -0700 (PDT)
Received: by 10.194.7.195 with HTTP; Mon, 11 Mar 2013 16:55:31 -0700 (PDT)
Date: Tue, 12 Mar 2013 00:55:31 +0100
Message-ID: <CAE1DttDnyN=1FZiJbVO7v3C3vNJhQTZPg6k6ya+wWCvonR3v1Q@mail.gmail.com>
From: Florent Monnier <monnier.florent@gmail.com>
To: opengl@lists.ocaml.org
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Subject: [ocaml-opengl]  Problems with LablGL on the rpi
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 11 Mar 2013 23:48:54 -0000

2013/3/11, Daniel B=FCnzli <daniel.buenzli__erratique.ch> wrote:
> Le lundi, 11 mars 2013 =E0 19:38, Yaron Minsky a =E9crit :
> > I've been playing around with getting lablgl working on the Raspberry
> > Pi, using the Raspian distribution.
>
> Just being curious, are you playing with lablgles [1] or lablgl ? The lat=
ter won't give you to > access the raspberry pi's gpu.

Maybe I'll say something wrong, but I understood that Lablgles is
currently for OGL ES 1, and the Raspberry Pi has OGL ES 2.
I would suggest that we call LablGLES LablGLES1 for disambiguation.

If I understood correctly ES 1 is a subset of the deprecated features
(what LablGL currently provides), and ES 2 is a subset of foreward
compatible OGL.

I don't have any OGL ES 1 nor ES 2 hardware. If someone want to offer
me a RB Pi I would accept with pleasure. I recently bought a cheap OGL
3 card just for the purpose of testing OGL 3 in OCaml, and soon OGL 4
will arrive :)
Someone already gave me a Mac for porting purposes, but it was a while
ago and now this Mac is too old.

>                                But I don't know if the former compiles on=
 raspbian
> without a hitch.

If you're using these
typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC) (GLenum type);
and then get the address of the OGL function it will compile.
It has been made to make software and hardware a little bit independent.
So you can compile something where the hardware provides OGL 2 and
then execute on OGL 3, or the opposite, and we're using the same
header.

Any OGL code should use some wrangler to access the functions. Only
GLCaml does this correctly currently in OCaml with init_lib() and
get_proc_address() in glcaml_stub.c.

Here someone talks about the ES2 subset from GLCaml:
https://sympa.inria.fr/sympa/arc/caml-list/2013-03/msg00040.html

Maybe we could ask him to release his GLCamlES2 patch.

--=20
Hope it helps

From daniel.buenzli@erratique.ch  Tue Mar 12 07:35:21 2013
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id BB0663C548
 for <opengl@lists.ocaml.org>; Tue, 12 Mar 2013 07:35:21 +0000 (GMT)
X-Cam-AntiVirus: no malware found
X-Cam-SpamScore: ss
X-Cam-SpamDetails: score 2.0 from SpamAssassin-3.3.2-1455057 
 *  2.0 RCVD_IN_MAPS_RBL RBL: Relay in RBL,
 *      http://www.mail-abuse.com/enduserinfo_rbl.html
 *      [178.197.233.99 listed in rbl-plus.mail-abuse.ja.net]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:58788
 helo=smtp.webfaction.com)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtp id 1UFJqS-00018k-qI (Exim 4.72) for opengl@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Tue, 12 Mar 2013 07:42:00 +0000
Received: from [172.20.10.2] (99-233.197-178.cust.bluewin.ch [178.197.233.99])
 by smtp.webfaction.com (Postfix) with ESMTP id 663B520AF462;
 Tue, 12 Mar 2013 07:41:58 +0000 (UTC)
Date: Tue, 12 Mar 2013 08:41:54 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Florent Monnier <monnier.florent@gmail.com>
Message-ID: <652EC0BE20EB499FA331B554B80859B0@erratique.ch>
In-Reply-To: <CAE1DttDnyN=1FZiJbVO7v3C3vNJhQTZPg6k6ya+wWCvonR3v1Q@mail.gmail.com>
References: <CAE1DttDnyN=1FZiJbVO7v3C3vNJhQTZPg6k6ya+wWCvonR3v1Q@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Cc: opengl@lists.ocaml.org
Subject: Re: [ocaml-opengl] Problems with LablGL on the rpi
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 12 Mar 2013 07:35:21 -0000

Le mardi, 12 mars 2013 =C3=A0 00:55, =46lorent Monnier a =C3=A9crit :
> Maybe I'll say something wrong, but I understood that Lablgles is
> currently for OGL ES 1, and the Raspberry Pi has OGL ES 2.

The raspberry should be capable of both ES1.1 and ES2 (the libs are in /o=
pt/vc). I couldn't test it myself though because I don't have any graphic=
al output terminal to connect to at the moment. =20

Using regular OpenGL via glx over the network on another host works fine =
but in that case you are just using the host hardware not the raspberry p=
i gpu. =20

Best,

Daniel

From quentin.stievenart@gmail.com  Tue Mar 12 08:12:35 2013
Return-Path: <quentin.stievenart@gmail.com>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 02EAC3C548
 for <opengl@lists.ocaml.org>; Tue, 12 Mar 2013 08:12:35 +0000 (GMT)
X-Cam-AntiVirus: no malware found
X-Cam-SpamDetails: score -0.8 from SpamAssassin-3.3.2-1455057 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.128.171 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (quentin.stievenart[at]gmail.com)
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-ve0-f171.google.com ([209.85.128.171]:38857)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtp id 1UFKQO-00026F-sE (Exim 4.72) for opengl@lists.ocaml.org
 (return-path <quentin.stievenart@gmail.com>); Tue, 12 Mar 2013 08:19:14 +0000
Received: by mail-ve0-f171.google.com with SMTP id b10so3340815vea.30
 for <opengl@lists.ocaml.org>; Tue, 12 Mar 2013 01:19:08 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=x-received:mime-version:in-reply-to:references:from:date:message-id
 :subject:to:cc:content-type:content-transfer-encoding;
 bh=3CdRKI6pi4sGycCrJw2Z3vUnmeG79CvPSL7KPchQ/Ss=;
 b=HvJxSfkEvUB9XlyIiVMYTOPa5AWG2cdt1jxBFGKoTM73I0LiJPW5mrKK8uX6IHAanJ
 HMpOn2N+9z85E2fiCE/BZFrCPLb5+lkajgmY0XB+t2UVZXuBezt9Rk/PS7cMgpxnvEEv
 Souv1Qt6CyYfY4UjhHlPeap0aUlKWEd43UviT1SBhJddgcf87G3M+aTbr1PGRiYHaZjg
 kkjvZpE85mIynP6x+DUbbaNuj/hyGEJjh4cHTbcbf7TcHnfkVwnOIlTQ6XFoAUurbgDu
 8nXKEK7WDn0OkvEjHuP2LmWYzOy2IIgICxIP2+l0bt4gKRqc9omFQwMfNj42czbNI1TD
 la0g==
X-Received: by 10.52.32.230 with SMTP id m6mr5379194vdi.83.1363076348034; Tue,
 12 Mar 2013 01:19:08 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.220.149.205 with HTTP; Tue, 12 Mar 2013 01:18:47 -0700 (PDT)
In-Reply-To: <652EC0BE20EB499FA331B554B80859B0@erratique.ch>
References: <CAE1DttDnyN=1FZiJbVO7v3C3vNJhQTZPg6k6ya+wWCvonR3v1Q@mail.gmail.com>
 <652EC0BE20EB499FA331B554B80859B0@erratique.ch>
From: Quentin Stievenart <quentin.stievenart@gmail.com>
Date: Tue, 12 Mar 2013 09:18:47 +0100
Message-ID: <CACVumjD+Aahj1y=3zO0dmfCFTrH_nuiYGizLoVQOMJHun0jHfw@mail.gmail.com>
To: =?ISO-8859-1?Q?Daniel_B=FCnzli?= <daniel.buenzli@erratique.ch>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Cc: opengl@lists.ocaml.org
Subject: Re: [ocaml-opengl] Problems with LablGL on the rpi
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Tue, 12 Mar 2013 08:12:35 -0000

I don't know much about OpenGL ES, but glMLite[1] seems to support
more recent OpenGL features than Lablgl (I found it when needing VBO
support, which doesn't seem to be present in Lablgl).

[1]: http://www.linux-nantes.org/~fmonnier/ocaml/GL/

On 12 March 2013 08:41, Daniel B=FCnzli <daniel.buenzli@erratique.ch> wrote=
:
> Le mardi, 12 mars 2013 =E0 00:55, Florent Monnier a =E9crit :
>> Maybe I'll say something wrong, but I understood that Lablgles is
>> currently for OGL ES 1, and the Raspberry Pi has OGL ES 2.
>
> The raspberry should be capable of both ES1.1 and ES2 (the libs are in /o=
pt/vc). I couldn't test it myself though because I don't have any graphical=
 output terminal to connect to at the moment.
>
> Using regular OpenGL via glx over the network on another host works fine =
but in that case you are just using the host hardware not the raspberry pi =
gpu.
>
> Best,
>
> Daniel
> _______________________________________________
> OpenGL mailing list
> OpenGL@lists.ocaml.org
> http://lists.ocaml.org/listinfo/opengl

From mike.mcclurg@gmail.com  Mon Mar 11 21:52:43 2013
Return-Path: <mike.mcclurg@gmail.com>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-41.csi.cam.ac.uk (ppsw-41.csi.cam.ac.uk [131.111.8.141])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id F20893C437;
 Mon, 11 Mar 2013 21:52:42 +0000 (GMT)
X-Cam-AntiVirus: no malware found
X-Cam-SpamDetails: score -0.8 from SpamAssassin-3.3.2-1454805 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.171 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (mike.mcclurg[at]gmail.com)
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f171.google.com ([209.85.212.171]:55098)
 by ppsw-41.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1UFAkX-0003EI-QW (Exim 4.72)
 (return-path <mike.mcclurg@gmail.com>); Mon, 11 Mar 2013 21:59:20 +0000
Received: by mail-wi0-f171.google.com with SMTP id hn17so1360065wib.10
 for <multiple recipients>; Mon, 11 Mar 2013 14:59:16 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:x-received:in-reply-to:references:date:message-id
 :subject:from:to:cc:content-type;
 bh=8Pnw0kFE9WdCciINNGL0Yn9hIUU+E+7vUbPyVN25AA0=;
 b=ZKQnCUvitfY8OcxC67nU+QK02/4kBMbnPNomOXhGD3mBd7jcuPKMhxixbTrvHH45Cc
 LvQNgT/49nee2VesxsHDnbDd9t5qh7l0Vm40yPkjpSta8KutIh1bv8tMLq3/fX3/VEK2
 za1oK+MD6BABAcpQCudSJJ1yCaEubFeYEErkD6T8y5w8KjOf3hZc6a+k40xL48clO9+x
 cYiaCVFRV5aoVGtZNIMvMxlx7nosv72uniAQDj1bmoZa/At2yxNH+vqeuTO1QGSUkx+J
 a3sLKyimICbw/mJifYAF0Wv6r6JRtMOoWHXsINX9hBwrOtxN+2z2YAPxvLUGPFs3Rl6/
 TOfA==
MIME-Version: 1.0
X-Received: by 10.194.10.202 with SMTP id k10mr22264004wjb.53.1363039156855;
 Mon, 11 Mar 2013 14:59:16 -0700 (PDT)
Received: by 10.216.118.71 with HTTP; Mon, 11 Mar 2013 14:59:16 -0700 (PDT)
In-Reply-To: <4F3221FD-A9C3-4173-91F2-E31BE2285DCB@recoil.org>
References: <CADKNfhKTZ82Jm-pGOg0tDwNLtanVks=hCqXcs1KP33yoiDLAOg@mail.gmail.com>
 <4F3221FD-A9C3-4173-91F2-E31BE2285DCB@recoil.org>
Date: Mon, 11 Mar 2013 21:59:16 +0000
Message-ID: <CALru5wWr6RRhhJmCwLgOxe9y18Bwdn25JOSfvWnY9aHfAwOqUg@mail.gmail.com>
From: Mike McClurg <mike.mcclurg@gmail.com>
To: Anil Madhavapeddy <anil@recoil.org>
Content-Type: multipart/alternative; boundary=047d7b5d9b8dc270a504d7ad488b
X-Mailman-Approved-At: Tue, 12 Mar 2013 11:32:29 +0000
Cc: opengl@lists.ocaml.org, opam-devel@lists.ocaml.org
Subject: Re: [ocaml-opengl] [opam-devel] Problems with LablGL on the rpi
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Mon, 11 Mar 2013 21:52:43 -0000

--047d7b5d9b8dc270a504d7ad488b
Content-Type: text/plain; charset=ISO-8859-1

That's the issue that I was having, Yaron. I think the update that Anil
mentioned should resolve it.

Mike


On Mon, Mar 11, 2013 at 8:47 PM, Anil Madhavapeddy <anil@recoil.org> wrote:

> [+opengl@lists.ocaml.org]
>
> Does this commit help?  I noticed that Mike McClurg fixed the META file
> recently:
>
>
> https://github.com/OCamlPro/opam-repository/commit/811e6af6c4dbf5da4c4f29362ce927fd7f8b61c0
>
> It should be part of OPAM now, so upgrading to the latest will give you
> this change.
>
> -anil
>
> On 11 Mar 2013, at 18:38, Yaron Minsky <yminsky@gmail.com> wrote:
>
> > I suspect this is a package-level issue, so I'm not sure this is the
> > right list for it, but, nonetheless:
> >
> > I've been playing around with getting lablgl working on the Raspberry
> > Pi, using the Raspian distribution.  I got pretty far, but there's
> > some weird case-sensitivity issue I suspect when trying to actually
> > load the packages.  Look at this:
> >
> > # #require "lablgl";;
> > /home/pi/.opam/4.00.1+raspberrypi/lib/lablgl: added to search path
> > /home/pi/.opam/4.00.1+raspberrypi/lib/lablgl/lablgl.cma: loaded
> > # #require "lablgl.glut";;
> > No such package: lablGL - required by `lablgl.glut'
> >
> > The same thing happens when I try to build using ocamlbuild.  On the
> > mac I'm working on, however, everything works cleanly:
> >
> > # #require "lablgl.glut";;
> > /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablGL: added to search path
> > /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablGL/lablgl.cma: loaded
> > /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablgl: added to search path
> > /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablgl/lablglut.cma: loaded
> >
> > Any idea what could be causing this?  (I'm also running a slightly
> > different version of the compiler, but I don't think that's the
> > issue.)
> >
> > y
> > _______________________________________________
> > opam-devel mailing list
> > opam-devel@lists.ocaml.org
> > http://lists.ocaml.org/listinfo/opam-devel
> >
>
> _______________________________________________
> opam-devel mailing list
> opam-devel@lists.ocaml.org
> http://lists.ocaml.org/listinfo/opam-devel
>

--047d7b5d9b8dc270a504d7ad488b
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">That&#39;s the issue that I was having, Yaron. I think the=
 update that Anil mentioned should resolve it.<br><br>Mike<br></div><div cl=
ass=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Mon, Mar 11, 2013=
 at 8:47 PM, Anil Madhavapeddy <span dir=3D"ltr">&lt;<a href=3D"mailto:anil=
@recoil.org" target=3D"_blank">anil@recoil.org</a>&gt;</span> wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">[+<a href=3D"mailto:opengl@lists.ocaml.org">=
opengl@lists.ocaml.org</a>]<br>
<br>
Does this commit help? =A0I noticed that Mike McClurg fixed the META file<b=
r>
recently:<br>
<br>
<a href=3D"https://github.com/OCamlPro/opam-repository/commit/811e6af6c4dbf=
5da4c4f29362ce927fd7f8b61c0" target=3D"_blank">https://github.com/OCamlPro/=
opam-repository/commit/811e6af6c4dbf5da4c4f29362ce927fd7f8b61c0</a><br>
<br>
It should be part of OPAM now, so upgrading to the latest will give you<br>
this change.<br>
<span class=3D"HOEnZb"><font color=3D"#888888"><br>
-anil<br>
</font></span><div class=3D"HOEnZb"><div class=3D"h5"><br>
On 11 Mar 2013, at 18:38, Yaron Minsky &lt;<a href=3D"mailto:yminsky@gmail.=
com">yminsky@gmail.com</a>&gt; wrote:<br>
<br>
&gt; I suspect this is a package-level issue, so I&#39;m not sure this is t=
he<br>
&gt; right list for it, but, nonetheless:<br>
&gt;<br>
&gt; I&#39;ve been playing around with getting lablgl working on the Raspbe=
rry<br>
&gt; Pi, using the Raspian distribution. =A0I got pretty far, but there&#39=
;s<br>
&gt; some weird case-sensitivity issue I suspect when trying to actually<br=
>
&gt; load the packages. =A0Look at this:<br>
&gt;<br>
&gt; # #require &quot;lablgl&quot;;;<br>
&gt; /home/pi/.opam/4.00.1+raspberrypi/lib/lablgl: added to search path<br>
&gt; /home/pi/.opam/4.00.1+raspberrypi/lib/lablgl/lablgl.cma: loaded<br>
&gt; # #require &quot;lablgl.glut&quot;;;<br>
&gt; No such package: lablGL - required by `lablgl.glut&#39;<br>
&gt;<br>
&gt; The same thing happens when I try to build using ocamlbuild. =A0On the=
<br>
&gt; mac I&#39;m working on, however, everything works cleanly:<br>
&gt;<br>
&gt; # #require &quot;lablgl.glut&quot;;;<br>
&gt; /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablGL: added to search path<=
br>
&gt; /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablGL/lablgl.cma: loaded<br>
&gt; /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablgl: added to search path<=
br>
&gt; /Users/yminsky/.opam/4.01.0dev+trunk/lib/lablgl/lablglut.cma: loaded<b=
r>
&gt;<br>
&gt; Any idea what could be causing this? =A0(I&#39;m also running a slight=
ly<br>
&gt; different version of the compiler, but I don&#39;t think that&#39;s th=
e<br>
&gt; issue.)<br>
&gt;<br>
&gt; y<br>
&gt; _______________________________________________<br>
&gt; opam-devel mailing list<br>
&gt; <a href=3D"mailto:opam-devel@lists.ocaml.org">opam-devel@lists.ocaml.o=
rg</a><br>
&gt; <a href=3D"http://lists.ocaml.org/listinfo/opam-devel" target=3D"_blan=
k">http://lists.ocaml.org/listinfo/opam-devel</a><br>
&gt;<br>
<br>
_______________________________________________<br>
opam-devel mailing list<br>
<a href=3D"mailto:opam-devel@lists.ocaml.org">opam-devel@lists.ocaml.org</a=
><br>
<a href=3D"http://lists.ocaml.org/listinfo/opam-devel" target=3D"_blank">ht=
tp://lists.ocaml.org/listinfo/opam-devel</a><br>
</div></div></blockquote></div><br></div>

--047d7b5d9b8dc270a504d7ad488b--

From monnier.florent@gmail.com  Wed Mar 13 19:08:36 2013
Return-Path: <monnier.florent@gmail.com>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id AD8A93C170
 for <opengl@lists.ocaml.org>; Wed, 13 Mar 2013 19:08:36 +0000 (GMT)
X-Cam-SpamDetails: score 0.2 from SpamAssassin-3.3.2-1455441 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.180 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (monnier.florent[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  0.9 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f180.google.com ([209.85.212.180]:57017)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtp id 1UFr8y-0004nx-6c (Exim 4.80_167-5a66dd3) for
 opengl@lists.ocaml.org
 (return-path <monnier.florent@gmail.com>); Wed, 13 Mar 2013 19:15:20 +0000
Received: by mail-wi0-f180.google.com with SMTP id hi8so1114392wib.1
 for <opengl@lists.ocaml.org>; Wed, 13 Mar 2013 12:15:19 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:x-received:date:message-id:subject:from:to
 :content-type; bh=t8gz6DsQYhfrc2aiJyner7jpNbyT2JI8PZePPHbHfQA=;
 b=epltIom2eFJt2BJgHv+JP/PZaKZOZdWIOJlnkhq8/76DVL8KshuX7A2nw3fvdpq3rY
 ghf72rL/6hBBmt+b2nQ5sYsKjgiDZgb5h3qx8PdUFdWK6zAwKGf2pGv4lw7E2IajMorX
 WSL5pwXrBCNSq7dHsvNOC5od/AeudoaK8bXuaPkkM3ZuWLSstfODMqNfDXNZeuwuMqiH
 ol2W9Ur7S+CjQPshaZJdwghjjzWJi0rg+3/Yre5l03Yc2hNpBwrC1ou5wv3iztWs1o9U
 +kLGuohBiW7Me+3aYFROdSZIdLYFcv6seJvR7qeLAfaUILzSbkmGGDFlQMbSpGjiCNOl
 IhEg==
MIME-Version: 1.0
X-Received: by 10.180.100.10 with SMTP id eu10mr29338564wib.4.1363202119757;
 Wed, 13 Mar 2013 12:15:19 -0700 (PDT)
Received: by 10.194.7.195 with HTTP; Wed, 13 Mar 2013 12:15:19 -0700 (PDT)
Date: Wed, 13 Mar 2013 20:15:19 +0100
Message-ID: <CAE1DttCk4JV37cxVz0h_Q59GmG389jsf_+tBDTz=TGY5a1VWgw@mail.gmail.com>
From: Florent Monnier <monnier.florent@gmail.com>
To: ocaml-opengl <opengl@lists.ocaml.org>
Content-Type: text/plain; charset=ISO-8859-1
Subject: [ocaml-opengl] LablGL's Raw module
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 13 Mar 2013 19:08:36 -0000

Hi,

Does someone knows why the module Raw has been written for LablGL
instead of using Bigarray's?

Is it just that bigarrays didn't exist yet when LablGL was first
written? Or is it for a better integration with the module API?

What do you think about this module?

IMHO it makes interoperability with other components, other libs more
difficult (but maybe the solution would only to externilise Raw from
LablGL) both related to the type system dependency, and/or we have to
copy to and from this data structure instead of just using ba's
everywhere while ba's are available from the base standard library.

For what I have experienced with ba's, their lack of sign/unsign
versions of each type is not really an issue, usually I just care to
know if the size of atoms are 8, 16 or 32 bits. The only problems I
got with ba's are that they are slow to allocate, and the interaction
with RAM is good, but the interaction with GPU memory is difficult:

When I try to wrap what is returned by glMapBuffer inside a BA I get segfaults
http://www.opengl.org/sdk/docs/man/xhtml/glMapBuffer.xml
so this is why there is currently a workarround for VBO's in glMLite with the
type mapped_buffer
and the functions:
- val glMapBufferAbs
- val mapped_buffer_blit

Also I've tried to use VBO with GLCaml, from a working vbo/hello-world
from glmlite i've tried to rewrite it for glcaml, but I was unable to
make it work. Does someone know if it's possible to use VBO's with
GLCaml?

-- 
Best Regards

From anthony.tavener@gmail.com  Wed Mar 13 19:34:34 2013
Return-Path: <anthony.tavener@gmail.com>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id F16363C170
 for <opengl@lists.ocaml.org>; Wed, 13 Mar 2013 19:34:33 +0000 (GMT)
X-Cam-SpamDetails: score 0.2 from SpamAssassin-3.3.2-1455441 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.215.174 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (anthony.tavener[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  0.9 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-ea0-f174.google.com ([209.85.215.174]:47033)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtp id 1UFrY5-0003fB-6a (Exim 4.80_167-5a66dd3) for
 opengl@lists.ocaml.org
 (return-path <anthony.tavener@gmail.com>); Wed, 13 Mar 2013 19:41:17 +0000
Received: by mail-ea0-f174.google.com with SMTP id q10so612283eaj.5
 for <opengl@lists.ocaml.org>; Wed, 13 Mar 2013 12:41:16 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:x-received:in-reply-to:references:date:message-id
 :subject:from:to:cc:content-type;
 bh=mC6EXWrTCU3YodslWQSy+t17J+toIMqz9Bmag5+3O8Y=;
 b=Y6SH0IyiJ7c3bEM6B1etYikVlp/ZDk6hLiulnDRRGj6G714HHtWM5k/NL5iyGKiF+D
 qaisD2Obk+2vVyY2jiGoMYZwOZwdnnhmzhJ+BAOozIKJQiRMsOAPi8QC1Yisjcfs/LhT
 twExyTogeMjwHOLAco6nGvWLTsfRLezkVsCnrpsuHniFC8+mtZhqZCZN6IcPy1zP+eLO
 9VEPtIct1ABvV2+5BU/CDtl2QP6ZngE9PwoqfqbYaHdW7XOe5Dcd5k6E7TaQeQ1OA+EG
 hZB5wXO7EZhAIH3rwk28/3I9ohXD6YhT6o2MpCWwJ5OhPUYXUpwr8bAYZB6DrHVjMSwx
 zK3A==
MIME-Version: 1.0
X-Received: by 10.14.216.2 with SMTP id f2mr62743074eep.44.1363203676273; Wed,
 13 Mar 2013 12:41:16 -0700 (PDT)
Received: by 10.14.2.198 with HTTP; Wed, 13 Mar 2013 12:41:16 -0700 (PDT)
In-Reply-To: <CAE1DttCk4JV37cxVz0h_Q59GmG389jsf_+tBDTz=TGY5a1VWgw@mail.gmail.com>
References: <CAE1DttCk4JV37cxVz0h_Q59GmG389jsf_+tBDTz=TGY5a1VWgw@mail.gmail.com>
Date: Wed, 13 Mar 2013 13:41:16 -0600
Message-ID: <CAN=ouMSdv-4MndP1U7nos0T_zRoQ3LgskXcVLeAVseKvJnM=5g@mail.gmail.com>
From: Anthony Tavener <anthony.tavener@gmail.com>
To: Florent Monnier <monnier.florent@gmail.com>
Content-Type: multipart/alternative; boundary=e89a8f22c4dbe1acb804d7d39603
Cc: ocaml-opengl <opengl@lists.ocaml.org>
Subject: Re: [ocaml-opengl] LablGL's Raw module
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 13 Mar 2013 19:34:34 -0000

--e89a8f22c4dbe1acb804d7d39603
Content-Type: text/plain; charset=ISO-8859-1

On Wed, Mar 13, 2013 at 1:15 PM, Florent Monnier
<monnier.florent@gmail.com>wrote:

> Also I've tried to use VBO with GLCaml, from a working vbo/hello-world
> from glmlite i've tried to rewrite it for glcaml, but I was unable to
> make it work. Does someone know if it's possible to use VBO's with
> GLCaml?
>

Buffer objects don't work with the current (many years old) version of
glcaml. One small change is needed to several functions: supporting
an integer value as well as string/bigarray. For example, glVertexPointer
needs to be capable of accepting an integer "buffer object name".

In response to this mailing-list starting, and apparent interest in OpenGL
with OCaml, I looked into the current state of things yesterday. Not much
has changed... except you (Florent) have gotten a patch into LablGL for
shader support -- hooray! And I also found someone else has added
changes to glcaml/sdlcaml and posted them here:

 https://github.com/crackleware/glcaml

A quick check shows that version has similar changes to what I've done
locally, but it seems they changed the autogeneration program to make
those changes, which is better. They also use glew, which appears to
simplify the interface (removing the explicit function-memoization
throughout glcaml_stub.c, but I don't know if there is any speed/space
tradeoffs -- I'm not familiar with glew).

Anyway, it looks like that version of glcaml should let you use buffer
objects.

--e89a8f22c4dbe1acb804d7d39603
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><br><div class=3D"gmail_extra"><div class=3D"gmail_quote">=
On Wed, Mar 13, 2013 at 1:15 PM, Florent Monnier <span dir=3D"ltr">&lt;<a h=
ref=3D"mailto:monnier.florent@gmail.com" target=3D"_blank">monnier.florent@=
gmail.com</a>&gt;</span> wrote:</div>
<div class=3D"gmail_quote"><blockquote class=3D"gmail_quote" style=3D"margi=
n:0px 0px 0px 0.8ex;border-left-width:1px;border-left-color:rgb(204,204,204=
);border-left-style:solid;padding-left:1ex">
Also I&#39;ve tried to use VBO with GLCaml, from a working vbo/hello-world<=
br>
from glmlite i&#39;ve tried to rewrite it for glcaml, but I was unable to<b=
r>
make it work. Does someone know if it&#39;s possible to use VBO&#39;s with<=
br>
GLCaml?<br></blockquote><div><br></div><div style>Buffer objects don&#39;t =
work with the current (many years old) version of</div><div style>glcaml. O=
ne small change is needed to several functions: supporting</div><div style>
an integer value as well as string/bigarray. For example, glVertexPointer</=
div><div style>needs to be capable of accepting an integer &quot;buffer obj=
ect name&quot;.</div><div style><br></div><div style>In response to this ma=
iling-list starting, and apparent interest in OpenGL</div>
<div style>with OCaml, I looked into the current state of things yesterday.=
 Not much</div><div style>has changed... except you (Florent) have gotten a=
 patch into LablGL for</div><div style>shader support -- hooray! And I also=
 found someone else has added</div>
<div style>changes to glcaml/sdlcaml and posted them here:</div><div style>=
<br></div><div style>=A0<a href=3D"https://github.com/crackleware/glcaml">h=
ttps://github.com/crackleware/glcaml</a></div><div style><br></div><div sty=
le>
A quick check shows that version has similar changes to what I&#39;ve done<=
/div><div style>locally, but it seems they changed the autogeneration progr=
am to make</div><div style>those changes, which is better. They also use gl=
ew, which appears to</div>
<div style>simplify the interface (removing the explicit function-memoizati=
on</div><div style>throughout glcaml_stub.c, but I don&#39;t know if there =
is any speed/space</div><div style>tradeoffs -- I&#39;m not familiar with g=
lew).</div>
<div style><br></div><div style>Anyway, it looks like that version of glcam=
l should let you use buffer</div><div style>objects.</div><div style><br></=
div></div></div></div>

--e89a8f22c4dbe1acb804d7d39603--

From anil@recoil.org  Wed Mar 13 19:44:57 2013
Return-Path: <anil@recoil.org>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id A367F3C170
 for <opengl@lists.ocaml.org>; Wed, 13 Mar 2013 19:44:57 +0000 (GMT)
X-Cam-SpamDetails: score -0.1 from SpamAssassin-3.3.2-1455441 
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from recoil.dh.bytemark.co.uk ([89.16.177.154]:22866
 helo=dark.recoil.org)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with smtp id 1UFri8-0006ya-7Z (Exim 4.80_167-5a66dd3) for
 opengl@lists.ocaml.org
 (return-path <anil@recoil.org>); Wed, 13 Mar 2013 19:51:41 +0000
Received: (qmail 20905 invoked by uid 634); 13 Mar 2013 19:51:39 -0000
X-Spam-Level: *
X-Spam-Status: No, hits=-1.0 required=5.0
	tests=ALL_TRUSTED
X-Spam-Check-By: dark.recoil.org
Received: from cpc7-cmbg14-2-0-cust238.5-4.cable.virginmedia.com (HELO
 [192.168.1.84]) (86.30.244.239)
 (smtp-auth username remote@recoil.org, mechanism cram-md5)
 by dark.recoil.org (qpsmtpd/0.84) with ESMTPA; Wed, 13 Mar 2013 19:51:38 +0000
Content-Type: text/plain; charset=iso-8859-1
Mime-Version: 1.0 (Mac OS X Mail 6.2 \(1499\))
From: Anil Madhavapeddy <anil@recoil.org>
In-Reply-To: <CAN=ouMSdv-4MndP1U7nos0T_zRoQ3LgskXcVLeAVseKvJnM=5g@mail.gmail.com>
Date: Wed, 13 Mar 2013 19:51:41 +0000
Content-Transfer-Encoding: 7bit
Message-Id: <100B7F86-0442-469B-9E73-DE9B69492FC5@recoil.org>
References: <CAE1DttCk4JV37cxVz0h_Q59GmG389jsf_+tBDTz=TGY5a1VWgw@mail.gmail.com>
 <CAN=ouMSdv-4MndP1U7nos0T_zRoQ3LgskXcVLeAVseKvJnM=5g@mail.gmail.com>
To: Anthony Tavener <anthony.tavener@gmail.com>,
 David Sheets <kosmo.zb@gmail.com>
X-Mailer: Apple Mail (2.1499)
X-Virus-Checked: Checked by ClamAV on dark.recoil.org
Cc: ocaml-opengl <opengl@lists.ocaml.org>
Subject: Re: [ocaml-opengl] WebGL (was: LablGL's Raw module)
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 13 Mar 2013 19:44:57 -0000

On 13 Mar 2013, at 19:41, Anthony Tavener <anthony.tavener@gmail.com> wrote:
> 
> In response to this mailing-list starting, and apparent interest in OpenGL
> with OCaml, I looked into the current state of things yesterday. Not much
> has changed... except you (Florent) have gotten a patch into LablGL for
> shader support -- hooray! And I also found someone else has added
> changes to glcaml/sdlcaml and posted them here:

My interest in OpenGL has also been renewed by js_of_ocaml and WebGL...
David Sheets did a great presentation on his work on WebGL at the last
OCaml workshop: http://www.youtube.com/watch?v=ll9z1ULtgqo

...and there's lots of WebGL/OCaml code up at:
https://github.com/ashima/
(last I looked, it uses ocamljs and not js_of_ocaml yet, though).

I have in my head an awesome demo that involves the TryOCaml js toplevel,
and a WebGL window that responds in realtime :-)

I'm not really sure what the right buffer abstraction is that will work
with js_of_ocaml and OpenGL too. js_of_ocaml has some trickery to cast
strings as either immutable (i.e. native Javascript) and mutable (i.e.
native OCaml).  This doesn't work in native code, and Bigarrays are
much more explicit and flexible since they wrap system memory that is
outside the OCaml heap.

Anyway, lots to play with here...

-anil

From edwin+ml-ocaml@etorok.net  Wed Mar 13 19:59:59 2013
Return-Path: <edwin+ml-ocaml@etorok.net>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 245A13C170
 for <opengl@lists.ocaml.org>; Wed, 13 Mar 2013 19:59:59 +0000 (GMT)
X-Cam-AntiVirus: no malware found
X-Cam-SpamDetails: score -2.5 from SpamAssassin-3.3.2-1455441 
 * -2.4 RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail.etorok.net ([176.9.138.55]:48703)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtp id 1UFrwg-0004de-r7 (Exim 4.72) for opengl@lists.ocaml.org
 (return-path <edwin+ml-ocaml@etorok.net>); Wed, 13 Mar 2013 20:06:43 +0000
Received: from [IPv6:2a02:2f09:4170:ae:1e6f:65ff:fe23:db0d] (unknown
 [IPv6:2a02:2f09:4170:ae:1e6f:65ff:fe23:db0d])
 by mail.etorok.net (Postfix) with ESMTPSA id EF46046D5
 for <opengl@lists.ocaml.org>; Wed, 13 Mar 2013 21:06:41 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=etorok.net;
 s=MAILOUT; t=1363205202;
 bh=/076hzg07LW0WesteXmwruEaVCtPYLty76nA6BLo+YE=;
 h=Message-ID:Date:From:MIME-Version:To:Subject:References:
 In-Reply-To:Content-Type:Content-Transfer-Encoding;
 b=rgUr5LWbKPqMKHEhIlwlOjr/PI97bbHgPt1WC/8rJKFgKMFwykbXgLrLMZ5UVSaFJ
 l380QqEzL/sbqOv2RujFa6K1TdQsSKgQ837gCUq2j/rFKGGgttCuB6BuoD2Wll8Thk
 MsvH7FwGu1cF4QwxN4KdmghKuFTHA0aev3+Zjn4c=
Message-ID: <5140DC51.9040500@etorok.net>
Date: Wed, 13 Mar 2013 22:06:41 +0200
From: =?ISO-8859-1?Q?T=F6r=F6k_Edwin?= <edwin+ml-ocaml@etorok.net>
User-Agent: Mozilla/5.0 (X11; Linux x86_64;
 rv:10.0.12) Gecko/20130116 Icedove/10.0.12
MIME-Version: 1.0
To: opengl@lists.ocaml.org
References: <CAE1DttCk4JV37cxVz0h_Q59GmG389jsf_+tBDTz=TGY5a1VWgw@mail.gmail.com>
 <CAN=ouMSdv-4MndP1U7nos0T_zRoQ3LgskXcVLeAVseKvJnM=5g@mail.gmail.com>
In-Reply-To: <CAN=ouMSdv-4MndP1U7nos0T_zRoQ3LgskXcVLeAVseKvJnM=5g@mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
X-Virus-Scanned: clamav-milter 0.97.6 at mail
X-Virus-Status: Clean
Subject: Re: [ocaml-opengl] LablGL's Raw module
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 13 Mar 2013 19:59:59 -0000

On 03/13/2013 09:41 PM, Anthony Tavener wrote:
> 
> On Wed, Mar 13, 2013 at 1:15 PM, Florent Monnier <monnier.florent@gmail.com <mailto:monnier.florent@gmail.com>> wrote:
> 
>     Also I've tried to use VBO with GLCaml, from a working vbo/hello-world
>     from glmlite i've tried to rewrite it for glcaml, but I was unable to
>     make it work. Does someone know if it's possible to use VBO's with
>     GLCaml?
> 
> 
> Buffer objects don't work with the current (many years old) version of
> glcaml. One small change is needed to several functions: supporting
> an integer value as well as string/bigarray. For example, glVertexPointer
> needs to be capable of accepting an integer "buffer object name".
> 
> In response to this mailing-list starting, and apparent interest in OpenGL
> with OCaml, I looked into the current state of things yesterday. Not much
> has changed... except you (Florent) have gotten a patch into LablGL for
> shader support -- hooray! And I also found someone else has added
> changes to glcaml/sdlcaml and posted them here:
> 
>  https://github.com/crackleware/glcaml
> 
> A quick check shows that version has similar changes to what I've done
> locally, but it seems they changed the autogeneration program to make
> those changes, which is better. They also use glew, which appears to

I have briefly looked at OCaml last year, and had the crazy idea that the bindings should be auto-generated from these XML specs:
https://bitbucket.org/alfonse/gl-xml-specs/src

Those are quite up-to-date (OpenGL 4.3), and they are themselves generated by importing/parsing some files from opengl.org's registry
and fixing bugs in them.

The problem is that even if glcaml/glMLite was updated to use those XML specs as a source, it wouldn't be very useful without
a comprehensive unit test, or at the very least one test/function so that it was generated correctly (i.e. it doesn't crash).

And then there's the problem that it is quite easy to misuse these APIs, as they are after all C APIs. glMLite might be a bit safer here,
but I think you can still cause use-after-free bugs.

So my other crazy idea was that perhaps some higher-level bindings should be auto-generated that would call into the low-level bindings safely,
after all those XML specs do have *some* type information (and various objects could be wrapped in a record that tracks
whether they are freed or not and raises exception if they are).

This looked like quite a huge amount of work to do alone, so it all remained at the idea stage.
Maybe some day, when I have lots of time... :)

Best regards,
--Edwin

From anthony.tavener@gmail.com  Wed Mar 13 20:24:06 2013
Return-Path: <anthony.tavener@gmail.com>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-51.csi.cam.ac.uk (ppsw-51.csi.cam.ac.uk [131.111.8.151])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 5F3A03C170
 for <opengl@lists.ocaml.org>; Wed, 13 Mar 2013 20:24:06 +0000 (GMT)
X-Cam-AntiVirus: no malware found
X-Cam-SpamDetails: score -0.8 from SpamAssassin-3.3.2-1455441 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.215.176 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (anthony.tavener[at]gmail.com)
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-ea0-f176.google.com ([209.85.215.176]:45613)
 by ppsw-51.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtp id 1UFsK1-0000t7-WX (Exim 4.72) for opengl@lists.ocaml.org
 (return-path <anthony.tavener@gmail.com>); Wed, 13 Mar 2013 20:30:50 +0000
Received: by mail-ea0-f176.google.com with SMTP id h10so654914eaj.35
 for <opengl@lists.ocaml.org>; Wed, 13 Mar 2013 13:30:48 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:x-received:in-reply-to:references:date:message-id
 :subject:from:to:cc:content-type;
 bh=5lFW9dKUNYAT2C84RTjCZFn2bXClri481RePlDdmgdg=;
 b=Dpv28z4VHrq9kf0VMm1BcUeAxtVL7NQmLvsvGR0/Z2fAUzulCY+ekHaEfR8N9orV7B
 eCu8p2BXtYcXWQdrl0VxNpBds5H1Lhc7wwebvrHHymIpQ+pG1/cNQkrXGO/zdfQRZ3Ao
 IakpdlTWVpBBv82EAhKA41+epmafGcMk4n8LrKC5CBjSa4MQEkFwJjGBFPSG1mxiXvvT
 FNyBAfJ1lKqRt3lQKLwIKay29escHSqN71iXIAJU55KHfstTpIEOFTCNb1ab/q/bfmAg
 yDhHUz9C+VqX2YRik1TgOVLsLBVpbcrTtREiQnj5kgWjMY8tUtCz257q2Q8ODrrmFLA/
 bhoA==
MIME-Version: 1.0
X-Received: by 10.14.183.198 with SMTP id q46mr3968055eem.1.1363206648725;
 Wed, 13 Mar 2013 13:30:48 -0700 (PDT)
Received: by 10.14.2.198 with HTTP; Wed, 13 Mar 2013 13:30:48 -0700 (PDT)
In-Reply-To: <100B7F86-0442-469B-9E73-DE9B69492FC5@recoil.org>
References: <CAE1DttCk4JV37cxVz0h_Q59GmG389jsf_+tBDTz=TGY5a1VWgw@mail.gmail.com>
 <CAN=ouMSdv-4MndP1U7nos0T_zRoQ3LgskXcVLeAVseKvJnM=5g@mail.gmail.com>
 <100B7F86-0442-469B-9E73-DE9B69492FC5@recoil.org>
Date: Wed, 13 Mar 2013 14:30:48 -0600
Message-ID: <CAN=ouMQJXpVLfTJ7mtcEggnqVgDKJODS7rzid-DxrChNsBDt5w@mail.gmail.com>
From: Anthony Tavener <anthony.tavener@gmail.com>
To: Anil Madhavapeddy <anil@recoil.org>
Content-Type: multipart/alternative; boundary=047d7b3441420da68704d7d448b8
Cc: David Sheets <kosmo.zb@gmail.com>, ocaml-opengl <opengl@lists.ocaml.org>
Subject: Re: [ocaml-opengl] WebGL (was: LablGL's Raw module)
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 13 Mar 2013 20:24:06 -0000

--047d7b3441420da68704d7d448b8
Content-Type: text/plain; charset=ISO-8859-1

Ah, yes, I did run into mention of David Sheets' work and got stuck at the
Ashima site with a cute looking game, but I was looking for implementation
details at the time. ;) Thanks for those links Anil!

I never did get into browser-based applications, but that's the new way now
and that does seem pretty cool to be able to program OCaml through your
browser with no installation steps and even leverage WebGL! It sounds
easy enough that I might try jumping in. Although... one thing about GLES2
is that it takes a bit of groundwork to be able to use it (being a thinner
layer between the hardware). Does WebGL add a bunch of convenience
functions, or does Sheets? Or is there a lot of copy/paste into TryOCaml
to get something visible?

Buffer abstraction... I use Bigarray a lot. Strings-as-data only if I don't
care
about what the data is -- treating it like a binary blob. Because strings
are
quite limited, and I think I tend to use them immutably.



On Wed, Mar 13, 2013 at 1:51 PM, Anil Madhavapeddy <anil@recoil.org> wrote:

> On 13 Mar 2013, at 19:41, Anthony Tavener <anthony.tavener@gmail.com>
> wrote:
> >
> > In response to this mailing-list starting, and apparent interest in
> OpenGL
> > with OCaml, I looked into the current state of things yesterday. Not much
> > has changed... except you (Florent) have gotten a patch into LablGL for
> > shader support -- hooray! And I also found someone else has added
> > changes to glcaml/sdlcaml and posted them here:
>
> My interest in OpenGL has also been renewed by js_of_ocaml and WebGL...
> David Sheets did a great presentation on his work on WebGL at the last
> OCaml workshop: http://www.youtube.com/watch?v=ll9z1ULtgqo
>
> ...and there's lots of WebGL/OCaml code up at:
> https://github.com/ashima/
> (last I looked, it uses ocamljs and not js_of_ocaml yet, though).
>
> I have in my head an awesome demo that involves the TryOCaml js toplevel,
> and a WebGL window that responds in realtime :-)
>
> I'm not really sure what the right buffer abstraction is that will work
> with js_of_ocaml and OpenGL too. js_of_ocaml has some trickery to cast
> strings as either immutable (i.e. native Javascript) and mutable (i.e.
> native OCaml).  This doesn't work in native code, and Bigarrays are
> much more explicit and flexible since they wrap system memory that is
> outside the OCaml heap.
>
> Anyway, lots to play with here...
>
> -anil
>

--047d7b3441420da68704d7d448b8
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Ah, yes, I did run into mention of David Sheets&#39; work =
and got stuck at the<div style>Ashima site with a cute looking game, but I =
was looking for implementation</div><div style>details at the time. ;) Than=
ks for those links Anil!</div>
<div style><br></div><div style>I never did get into browser-based applicat=
ions, but that&#39;s the new way now</div><div style>and that does seem pre=
tty cool to be able to program OCaml through your</div><div style>browser w=
ith no installation steps and even leverage WebGL! It sounds</div>
<div style>easy enough that I might try jumping in. Although... one thing a=
bout GLES2</div><div style>is that it takes a bit of groundwork to be able =
to use it (being a thinner</div><div style>layer between the hardware). Doe=
s WebGL add a bunch of convenience</div>
<div style>functions, or does Sheets? Or is there a lot of copy/paste into =
TryOCaml</div><div style>to get something visible?</div><div style><br></di=
v><div style>Buffer abstraction... I use Bigarray a lot. Strings-as-data on=
ly if I don&#39;t care</div>
<div style>about what the data is -- treating it like a binary blob. Becaus=
e strings are</div><div style>quite limited, and I think I tend to use them=
 immutably.</div><div style><br></div></div><div class=3D"gmail_extra"><br>
<br><div class=3D"gmail_quote">On Wed, Mar 13, 2013 at 1:51 PM, Anil Madhav=
apeddy <span dir=3D"ltr">&lt;<a href=3D"mailto:anil@recoil.org" target=3D"_=
blank">anil@recoil.org</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_=
quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1=
ex">
On 13 Mar 2013, at 19:41, Anthony Tavener &lt;<a href=3D"mailto:anthony.tav=
ener@gmail.com">anthony.tavener@gmail.com</a>&gt; wrote:<br>
&gt;<br>
&gt; In response to this mailing-list starting, and apparent interest in Op=
enGL<br>
&gt; with OCaml, I looked into the current state of things yesterday. Not m=
uch<br>
&gt; has changed... except you (Florent) have gotten a patch into LablGL fo=
r<br>
&gt; shader support -- hooray! And I also found someone else has added<br>
&gt; changes to glcaml/sdlcaml and posted them here:<br>
<br>
My interest in OpenGL has also been renewed by js_of_ocaml and WebGL...<br>
David Sheets did a great presentation on his work on WebGL at the last<br>
OCaml workshop: <a href=3D"http://www.youtube.com/watch?v=3Dll9z1ULtgqo" ta=
rget=3D"_blank">http://www.youtube.com/watch?v=3Dll9z1ULtgqo</a><br>
<br>
...and there&#39;s lots of WebGL/OCaml code up at:<br>
<a href=3D"https://github.com/ashima/" target=3D"_blank">https://github.com=
/ashima/</a><br>
(last I looked, it uses ocamljs and not js_of_ocaml yet, though).<br>
<br>
I have in my head an awesome demo that involves the TryOCaml js toplevel,<b=
r>
and a WebGL window that responds in realtime :-)<br>
<br>
I&#39;m not really sure what the right buffer abstraction is that will work=
<br>
with js_of_ocaml and OpenGL too. js_of_ocaml has some trickery to cast<br>
strings as either immutable (i.e. native Javascript) and mutable (i.e.<br>
native OCaml). =A0This doesn&#39;t work in native code, and Bigarrays are<b=
r>
much more explicit and flexible since they wrap system memory that is<br>
outside the OCaml heap.<br>
<br>
Anyway, lots to play with here...<br>
<span class=3D"HOEnZb"><font color=3D"#888888"><br>
-anil<br>
</font></span></blockquote></div><br></div>

--047d7b3441420da68704d7d448b8--

From pierre.chambart@crans.org  Wed Mar 13 21:38:18 2013
Return-Path: <pierre.chambart@crans.org>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-51.csi.cam.ac.uk (ppsw-51.csi.cam.ac.uk [131.111.8.151])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 09C9E3C170
 for <opengl@lists.ocaml.org>; Wed, 13 Mar 2013 21:38:18 +0000 (GMT)
X-Cam-AntiVirus: no malware found
X-Cam-SpamDetails: score -2.4 from SpamAssassin-3.3.2-1455441 
 * -2.4 RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from redisdead.crans.org ([138.231.136.39]:48086)
 by ppsw-51.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtp id 1UFtTp-0008Av-Wp (Exim 4.72) for opengl@lists.ocaml.org
 (return-path <pierre.chambart@crans.org>); Wed, 13 Mar 2013 21:45:02 +0000
Received: from localhost (81-64-134-21.rev.numericable.fr [81.64.134.21])
 (using SSLv3 with cipher DHE-RSA-AES128-SHA (128/128 bits))
 (No client certificate requested)
 by redisdead.crans.org (Postfix) with ESMTPSA id C25DF1FB4
 for <opengl@lists.ocaml.org>; Wed, 13 Mar 2013 22:45:00 +0100 (CET)
Date: Wed, 13 Mar 2013 22:44:45 +0100
From: Pierre Chambart <pierre.chambart@crans.org>
To: ocaml-opengl <opengl@lists.ocaml.org>
Message-ID: <20130313224445.32ae41aa@crans.org>
X-Mailer: Claws Mail 3.8.1 (GTK+ 2.24.10; x86_64-pc-linux-gnu)
Mime-Version: 1.0
Content-Type: multipart/signed; micalg=PGP-SHA1;
 boundary="Sig_/_UJXuSuyL=m.gc6XmS/7_qz"; protocol="application/pgp-signature"
X-Mailman-Approved-At: Wed, 13 Mar 2013 21:39:32 +0000
Subject: [ocaml-opengl] I started some EGL bindings is someone interested ?
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 13 Mar 2013 21:38:18 -0000

--Sig_/_UJXuSuyL=m.gc6XmS/7_qz
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: quoted-printable

Hello,

I have a rpi and you know how you feel forced to play with opengles on
it. So I started an EGL binding and it is quite complete now.

If someone is interested enouth in that I can clean/document that to be
able to publish it. (I also have some minimal stubs for opengles 2
brutally copied/pasted from glMLite, but this is too far from complete).

I also play with the idea of having an interface usable both inside a
browser and on a classical context.

--=20
Pierre

--Sig_/_UJXuSuyL=m.gc6XmS/7_qz
Content-Type: application/pgp-signature; name=signature.asc
Content-Disposition: attachment; filename=signature.asc

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (GNU/Linux)

iEYEARECAAYFAlFA800ACgkQQ2gKRvJTD85VPgCfdA5/8dz+Kp6ep8s+F6CQzd9l
9uwAnRaNSXD55VCcGTsQunQHGd5Q9UGE
=zCNW
-----END PGP SIGNATURE-----

--Sig_/_UJXuSuyL=m.gc6XmS/7_qz--

From kosmo.zb@gmail.com  Wed Mar 13 21:49:48 2013
Return-Path: <kosmo.zb@gmail.com>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 8763E3C170
 for <opengl@lists.ocaml.org>; Wed, 13 Mar 2013 21:49:48 +0000 (GMT)
X-Cam-AntiVirus: no malware found
X-Cam-SpamDetails: score -0.8 from SpamAssassin-3.3.2-1455441 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.215.41 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (kosmo.zb[at]gmail.com)
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-la0-f41.google.com ([209.85.215.41]:64953)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtp id 1UFtex-0001oS-s4 (Exim 4.72) for opengl@lists.ocaml.org
 (return-path <kosmo.zb@gmail.com>); Wed, 13 Mar 2013 21:56:32 +0000
Received: by mail-la0-f41.google.com with SMTP id fo12so1743711lab.0
 for <opengl@lists.ocaml.org>; Wed, 13 Mar 2013 14:56:31 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:x-received:in-reply-to:references:date:message-id
 :subject:from:to:cc:content-type;
 bh=jLIE5IMdmQzEUaf0kSD1Xf95RQEtljRie5IB/tPVbdo=;
 b=FxoCFQs6oQfTZfQ4HmOUnFhzrGMZeizmQHGKbavMDKgM7YhdqjG5kEDiju5XjdSPJy
 krzhz+RAAZSofo6f3eFx/scWxqPF7KpLJ4IEfESOdR1OiVDV89GvLhMXb7tx2mU2ZusX
 kz1SKZaaocNmHdBcyc2w4zfDlsQnqckfI9DEDD2Fj1zUVaU+jdImHLXKPIfSabB3JiVy
 ewfRHl3uCzwXYahxul7+E++ssSkblrF3afTlRCfS+dSeUBicxpVsdqonfCBhMV7JDd0g
 TX2yWI24EzBd26pdOVfsHKgMjUMU5cKlhEMJS5I1p0NPol/aIR/FJz+Qq0P6OyHjj5Ct
 eNpA==
MIME-Version: 1.0
X-Received: by 10.112.28.4 with SMTP id x4mr204097lbg.33.1363211791066; Wed,
 13 Mar 2013 14:56:31 -0700 (PDT)
Received: by 10.112.138.74 with HTTP; Wed, 13 Mar 2013 14:56:30 -0700 (PDT)
In-Reply-To: <100B7F86-0442-469B-9E73-DE9B69492FC5@recoil.org>
References: <CAE1DttCk4JV37cxVz0h_Q59GmG389jsf_+tBDTz=TGY5a1VWgw@mail.gmail.com>
 <CAN=ouMSdv-4MndP1U7nos0T_zRoQ3LgskXcVLeAVseKvJnM=5g@mail.gmail.com>
 <100B7F86-0442-469B-9E73-DE9B69492FC5@recoil.org>
Date: Wed, 13 Mar 2013 14:56:30 -0700
Message-ID: <CAAWM5Ty_usUtBp6biC0cRWtLg7Mn3u87JJBXx7FAo+nmaASNhw@mail.gmail.com>
From: David Sheets <kosmo.zb@gmail.com>
To: Anil Madhavapeddy <anil@recoil.org>
Content-Type: text/plain; charset=ISO-8859-1
X-Mailman-Approved-At: Wed, 13 Mar 2013 21:51:25 +0000
Cc: ocaml-opengl <opengl@lists.ocaml.org>
Subject: Re: [ocaml-opengl] WebGL (was: LablGL's Raw module)
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 13 Mar 2013 21:49:48 -0000

On Wed, Mar 13, 2013 at 12:51 PM, Anil Madhavapeddy <anil@recoil.org> wrote:
> On 13 Mar 2013, at 19:41, Anthony Tavener <anthony.tavener@gmail.com> wrote:
>>
>> In response to this mailing-list starting, and apparent interest in OpenGL
>> with OCaml, I looked into the current state of things yesterday. Not much
>> has changed... except you (Florent) have gotten a patch into LablGL for
>> shader support -- hooray! And I also found someone else has added
>> changes to glcaml/sdlcaml and posted them here:
>
> My interest in OpenGL has also been renewed by js_of_ocaml and WebGL...
> David Sheets did a great presentation on his work on WebGL at the last
> OCaml workshop: http://www.youtube.com/watch?v=ll9z1ULtgqo
>
> ...and there's lots of WebGL/OCaml code up at:
> https://github.com/ashima/
> (last I looked, it uses ocamljs and not js_of_ocaml yet, though).

<https://github.com/ashima/gloc> compiles to JavaScript with
js_of_ocaml. You can play with the (basic) result
<http://ashimagroup.net/gloc/glocode/>. I have plans to build this
into a full WebGLSL toolchain in the coming months/years. I will
pursue this at Cambridge.

The game at <http://www.ashimagroup.net/demo/game/ooman/tutorial/> is
still running with ocamljs + Google's Closure Compiler. I began a port
to js_of_ocaml and preliminary results indicated that it produces
better/faster JavaScript with a smaller JS GC footprint.
Unfortunately, WebGL at the time was still rather rough around the
edges and I was distracted by more pressing concerns. I look forward
to porting the game in the future.

David

> I have in my head an awesome demo that involves the TryOCaml js toplevel,
> and a WebGL window that responds in realtime :-)
>
> I'm not really sure what the right buffer abstraction is that will work
> with js_of_ocaml and OpenGL too. js_of_ocaml has some trickery to cast
> strings as either immutable (i.e. native Javascript) and mutable (i.e.
> native OCaml).  This doesn't work in native code, and Bigarrays are
> much more explicit and flexible since they wrap system memory that is
> outside the OCaml heap.
>
> Anyway, lots to play with here...
>
> -anil

From kosmo.zb@gmail.com  Wed Mar 13 22:09:03 2013
Return-Path: <kosmo.zb@gmail.com>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 38E0C3C170
 for <opengl@lists.ocaml.org>; Wed, 13 Mar 2013 22:09:03 +0000 (GMT)
X-Cam-SpamDetails: score 0.2 from SpamAssassin-3.3.2-1455441 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.217.174 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (kosmo.zb[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  0.9 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-lb0-f174.google.com ([209.85.217.174]:42392)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtp id 1UFtxa-00070M-8u (Exim 4.80_167-5a66dd3) for
 opengl@lists.ocaml.org
 (return-path <kosmo.zb@gmail.com>); Wed, 13 Mar 2013 22:15:47 +0000
Received: by mail-lb0-f174.google.com with SMTP id l12so1374818lbo.19
 for <opengl@lists.ocaml.org>; Wed, 13 Mar 2013 15:15:46 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:x-received:in-reply-to:references:date:message-id
 :subject:from:to:cc:content-type:content-transfer-encoding;
 bh=JgShVDLwdYtA/kWINTApEYWUk0RzH0ovd2owHLNU2Qg=;
 b=npAjJ5bmaQxt1GjhbVxgn/Ef2Cf3N17IWLOgqTDaR/IERnNgzzwKZa8ExBFPjtDz1J
 AVbfw12BJVBGOu6grrT/M/CLfpfsGnLEQ7OqtE6wqweL6eHXY7cMk+4rlbkhQRh92Cq8
 d4SzECi1GdMkjvDbtSxngE27gjNiKIMAUWet9T6wOtVyH/n2+aOsNAJf6aKWpQxnw2a6
 T9iyfpb+PnEY0a/cOHotz9X2DK7mxObXP1wOUH7N6koi+qUz1QMo8ugnX9ZSGo/A+5DF
 OpZLz808YCqig7EiU+32cGNwhNZzYQM1I0YNFQmVwHk+xte5nBIOoFkrX4TwJxON2H91
 +yXw==
MIME-Version: 1.0
X-Received: by 10.112.100.41 with SMTP id ev9mr226449lbb.34.1363212946060;
 Wed, 13 Mar 2013 15:15:46 -0700 (PDT)
Received: by 10.112.138.74 with HTTP; Wed, 13 Mar 2013 15:15:45 -0700 (PDT)
In-Reply-To: <CAN=ouMQJXpVLfTJ7mtcEggnqVgDKJODS7rzid-DxrChNsBDt5w@mail.gmail.com>
References: <CAE1DttCk4JV37cxVz0h_Q59GmG389jsf_+tBDTz=TGY5a1VWgw@mail.gmail.com>
 <CAN=ouMSdv-4MndP1U7nos0T_zRoQ3LgskXcVLeAVseKvJnM=5g@mail.gmail.com>
 <100B7F86-0442-469B-9E73-DE9B69492FC5@recoil.org>
 <CAN=ouMQJXpVLfTJ7mtcEggnqVgDKJODS7rzid-DxrChNsBDt5w@mail.gmail.com>
Date: Wed, 13 Mar 2013 15:15:45 -0700
Message-ID: <CAAWM5TyoaGED57mk1Msv=MuLsRR3zp3eTeDyTedy=k+gOp3Cbg@mail.gmail.com>
From: David Sheets <kosmo.zb@gmail.com>
To: Anthony Tavener <anthony.tavener@gmail.com>
Content-Type: text/plain; charset=windows-1252
Content-Transfer-Encoding: quoted-printable
Cc: ocaml-opengl <opengl@lists.ocaml.org>
Subject: Re: [ocaml-opengl] WebGL (was: LablGL's Raw module)
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 13 Mar 2013 22:09:03 -0000

On Wed, Mar 13, 2013 at 1:30 PM, Anthony Tavener
<anthony.tavener@gmail.com> wrote:
> Ah, yes, I did run into mention of David Sheets' work and got stuck at th=
e
> Ashima site with a cute looking game, but I was looking for implementatio=
n
> details at the time. ;) Thanks for those links Anil!

Ooman <http://www.ashimagroup.net/demo/game/ooman/tutorial/> is
written in OCamljs 3.12 (Jake Donham's dlambda backend) and then run
through Google's Closure Compiler. There are no OCaml WebGL bindings
in use. Instead, a WebGL driver in JavaScript was written to provide
specifically and efficiently the graphics primitives the game
required.

I would really, really love to see a WebIDL
<http://www.w3.org/TR/WebIDL/> parser with an OCaml code generator.
Perhaps BER N100 MetaOCaml is suited to this task?

I began modeling the WebIDL type system last fall but put that work
aside for a number of technical and non-technical reasons. I think
that we should strive to construct libraries against WebIDL interfaces
in the future to allow for broadest portability. Specifically, as
WebGL is a C -> JS port of OpenGL ES 2.0, there is a subset of WebGL's
WebIDL <https://www.khronos.org/registry/webgl/specs/latest/webgl.idl>
that can be mapped back onto native OpenGL ES 2.0 implementations. In
this way, we may generate OCaml interfaces from the WebGL IDL which
can be instantiated by either browser or native API modules.

You may also be interested in WebGL and OpenGL ES 2.0 modules. In this
case, I invite you to examine
<https://www.khronos.org/registry/webgl/extensions/> at which the
WebIDL for each WebGL extension is available. I authored and now
maintain the specification processing toolchain that produces these
HTML specs from an ad hoc XML vocabulary. For the extensions that
expose GLSL modules (e.g.
<https://www.khronos.org/registry/webgl/extensions/OES_standard_derivatives=
/>),
the GLSL module signatures are declared in the XML specs.

> I never did get into browser-based applications, but that's the new way n=
ow
> and that does seem pretty cool to be able to program OCaml through your
> browser with no installation steps and even leverage WebGL! It sounds
> easy enough that I might try jumping in. Although... one thing about GLES=
2
> is that it takes a bit of groundwork to be able to use it (being a thinne=
r
> layer between the hardware). Does WebGL add a bunch of convenience
> functions, or does Sheets?

WebGL strives to be an almost direct port of OpenGL ES 2.0. For some
JavaScript convenience functions, you might try
<https://github.com/ashima/webgl-engine/> which is the lowest layer of
the driver upon which Ooman is constructed. Of course, many JS
frameworks exist if you'd like to get loads of convenience functions
but they always some difficult issues, it seems.

> Or is there a lot of copy/paste into TryOCaml
> to get something visible?

Right now, yes, setting up a graphical top-level in TryOCaml is a
pain. It would be a very interesting and worthwhile project, though,
imho.

I have been focusing most closely on the shading language semantics
and tooling as it has the broadest audience. Of course, I will
continue to work on related OCaml+WebGL work.

"Semanticists should be the obstetricians of programming languages,
not the coroners." =96 John Reynolds, 2 December 2004

I'm happy to chat about any of these topics or others that you're
interested in. I have a lot of project ideas and ideas for hyperlinked
graphics systems.

David

> Buffer abstraction... I use Bigarray a lot. Strings-as-data only if I don=
't
> care
> about what the data is -- treating it like a binary blob. Because strings
> are
> quite limited, and I think I tend to use them immutably.
>
>
>
> On Wed, Mar 13, 2013 at 1:51 PM, Anil Madhavapeddy <anil@recoil.org> wrot=
e:
>>
>> On 13 Mar 2013, at 19:41, Anthony Tavener <anthony.tavener@gmail.com>
>> wrote:
>> >
>> > In response to this mailing-list starting, and apparent interest in
>> > OpenGL
>> > with OCaml, I looked into the current state of things yesterday. Not
>> > much
>> > has changed... except you (Florent) have gotten a patch into LablGL fo=
r
>> > shader support -- hooray! And I also found someone else has added
>> > changes to glcaml/sdlcaml and posted them here:
>>
>> My interest in OpenGL has also been renewed by js_of_ocaml and WebGL...
>> David Sheets did a great presentation on his work on WebGL at the last
>> OCaml workshop: http://www.youtube.com/watch?v=3Dll9z1ULtgqo
>>
>> ...and there's lots of WebGL/OCaml code up at:
>> https://github.com/ashima/
>> (last I looked, it uses ocamljs and not js_of_ocaml yet, though).
>>
>> I have in my head an awesome demo that involves the TryOCaml js toplevel=
,
>> and a WebGL window that responds in realtime :-)
>>
>> I'm not really sure what the right buffer abstraction is that will work
>> with js_of_ocaml and OpenGL too. js_of_ocaml has some trickery to cast
>> strings as either immutable (i.e. native Javascript) and mutable (i.e.
>> native OCaml).  This doesn't work in native code, and Bigarrays are
>> much more explicit and flexible since they wrap system memory that is
>> outside the OCaml heap.
>>
>> Anyway, lots to play with here...
>>
>> -anil
>
>

From garrigue@math.nagoya-u.ac.jp  Wed Mar 13 22:48:20 2013
Return-Path: <garrigue@math.nagoya-u.ac.jp>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-41.csi.cam.ac.uk (ppsw-41.csi.cam.ac.uk [131.111.8.141])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 093683C170
 for <opengl@lists.ocaml.org>; Wed, 13 Mar 2013 22:48:20 +0000 (GMT)
X-Cam-AntiVirus: no malware found
X-Cam-SpamDetails: score -2.3 from SpamAssassin-3.3.2-1455441 
 * -2.4 RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from rabbit.math.nagoya-u.ac.jp ([133.6.130.5]:57143
 helo=mailhost.math.nagoya-u.ac.jp)
 by ppsw-41.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1UFuZb-0008Bb-QL (Exim 4.72) for opengl@lists.ocaml.org
 (return-path <garrigue@math.nagoya-u.ac.jp>); Wed, 13 Mar 2013 22:55:04 +0000
Received: from mailhost.math.nagoya-u.ac.jp (localhost [127.0.0.1])
 by mailhost.math.nagoya-u.ac.jp (Postfix) with ESMTP id 33A6B6380;
 Thu, 14 Mar 2013 07:55:00 +0900 (JST)
Received: from mailhost.math.nagoya-u.ac.jp (localhost [127.0.0.1])
 by mailhost.math.nagoya-u.ac.jp (Postfix) with ESMTP id AC66B394C;
 Thu, 14 Mar 2013 07:54:59 +0900 (JST)
DomainKey-Signature: h=Received:Subject:Mime-Version:Content-Type:From:In-Reply-To:Date:Cc:Content-Transfer-Encoding:Message-Id:References:To:X-Mailer;
 b=; c=nofws; d=math.nagoya-u.ac.jp; q=; s=alpha
Received: from [192.168.1.212] (bsdserver10-alias1.math.nagoya-u.ac.jp
 [172.16.62.1])
 by mailhost.math.nagoya-u.ac.jp (Postfix) with ESMTPSA id 72012251F;
 Thu, 14 Mar 2013 07:54:59 +0900 (JST)
Mime-Version: 1.0 (Mac OS X Mail 6.2 \(1499\))
Content-Type: text/plain; charset=iso-2022-jp
From: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
In-Reply-To: <CAE1DttCk4JV37cxVz0h_Q59GmG389jsf_+tBDTz=TGY5a1VWgw@mail.gmail.com>
Date: Thu, 14 Mar 2013 07:55:05 +0900
Content-Transfer-Encoding: 7bit
Message-Id: <655EB224-7E75-48AE-8E8D-93DBADD31F4B@math.nagoya-u.ac.jp>
References: <CAE1DttCk4JV37cxVz0h_Q59GmG389jsf_+tBDTz=TGY5a1VWgw@mail.gmail.com>
To: Florent Monnier <monnier.florent@gmail.com>
X-Mailer: Apple Mail (2.1499)
Cc: ocaml-opengl <opengl@lists.ocaml.org>
Subject: Re: [ocaml-opengl] LablGL's Raw module
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 13 Mar 2013 22:48:20 -0000

On 2013/03/14, at 4:15, Florent Monnier <monnier.florent@gmail.com> wrote:

> Hi,
> 
> Does someone knows why the module Raw has been written for LablGL
> instead of using Bigarray's?
> 
> Is it just that bigarrays didn't exist yet when LablGL was first
> written? Or is it for a better integration with the module API?

Originally, this is just that bigarrays didn't exist yet.
Then I thought of moving to bigarrays, but there wasn't a 1-to-1
correspondence, so it finally never got done$B!D(B
Maybe it's not too late to do the jump.

LablGL has been around for 15 years, and it really shows$B!D(B

> IMHO it makes interoperability with other components, other libs more
> difficult (but maybe the solution would only to externilise Raw from
> LablGL) both related to the type system dependency, and/or we have to
> copy to and from this data structure instead of just using ba's
> everywhere while ba's are available from the base standard library.

Concerning interoperability, Lablgtk somehow overcomes this with
the Gpointer.region abstraction, which just describes a memory
area, and can be created from any such structure.


Back to LablGL, I'm really sorry I cannot give more time to it.
If you look at the git repository, you will see that there is a new
multitex branch by Didier Cassirame, with a lot of useful
additions.
If you have some comments about it, let me know.

Jacques Garrigue

From monnier.florent@gmail.com  Thu Mar 14 18:00:14 2013
Return-Path: <monnier.florent@gmail.com>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-41.csi.cam.ac.uk (ppsw-41.csi.cam.ac.uk [131.111.8.141])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 1617A3C548
 for <opengl@lists.ocaml.org>; Thu, 14 Mar 2013 18:00:14 +0000 (GMT)
X-Cam-AntiVirus: no malware found
X-Cam-SpamDetails: score -0.8 from SpamAssassin-3.3.2-1455841 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.214.175 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (monnier.florent[at]gmail.com)
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-ob0-f175.google.com ([209.85.214.175]:34519)
 by ppsw-41.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1UGCYO-0005Y1-Rz (Exim 4.72) for opengl@lists.ocaml.org
 (return-path <monnier.florent@gmail.com>); Thu, 14 Mar 2013 18:07:01 +0000
Received: by mail-ob0-f175.google.com with SMTP id uz6so2413618obc.20
 for <opengl@lists.ocaml.org>; Thu, 14 Mar 2013 11:06:59 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:x-received:in-reply-to:references:date:message-id
 :subject:from:to:cc:content-type;
 bh=vY/eeN8hK1c62mKacb6cAmrZ6CHgx/YjvrKTzY2P6v8=;
 b=qh+0Y6qqHHSYzCnZHLz17yft/PmjCRsBjv9Is8SeC81Zi+pFLJJhbZNpUVsPlDewf4
 0KLC8sCkOCk6IV3lxV9hBzbKKDiH5qqKjB9Tbm2ZjcoRGWQkCFrUWS2j9dmecQv92XRb
 D8IdEtHq/octBQQGuGGKSLrTfHuhdLsfW1+coKK3YtQYIdGb0K8f4bPzVDMJXNk2Enzh
 YLKNusC95ZLo+/wcigODhxG7hu60+Jx2Stvk/gDFxOo6GWjotsu6EWdr2u9m0DNOv/S7
 bPbk49Uywp7VQWh5n5vv1Wh4KCZiQ87gV7Co/kHhKrw/ku8mLtUlOHbLxsFKaSZwTiAm
 rLrA==
MIME-Version: 1.0
X-Received: by 10.60.24.197 with SMTP id w5mr1719640oef.6.1363284419829; Thu,
 14 Mar 2013 11:06:59 -0700 (PDT)
Received: by 10.60.30.200 with HTTP; Thu, 14 Mar 2013 11:06:59 -0700 (PDT)
In-Reply-To: <20130313224445.32ae41aa@crans.org>
References: <20130313224445.32ae41aa@crans.org>
Date: Thu, 14 Mar 2013 19:06:59 +0100
Message-ID: <CAE1DttDwuf35JBUdc6vjrK9n3aTgVib-b9kpj4JyUDMX=Qky=Q@mail.gmail.com>
From: Florent Monnier <monnier.florent@gmail.com>
To: Pierre Chambart <pierre.chambart@crans.org>
Content-Type: text/plain; charset=ISO-8859-1
Cc: ocaml-opengl <opengl@lists.ocaml.org>
Subject: Re: [ocaml-opengl] I started some EGL bindings is someone
	interested ?
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 14 Mar 2013 18:00:14 -0000

2013/3/13, Pierre Chambart <pierre.chambart@crans.org>:
> Hello,
>
> I have a rpi and you know how you feel forced to play with opengles on
> it. So I started an EGL binding and it is quite complete now.
>
> If someone is interested enouth in that I can clean/document that to be
> able to publish it. (I also have some minimal stubs for opengles 2
> brutally copied/pasted from glMLite, but this is too far from complete).
>
> I also play with the idea of having an interface usable both inside a
> browser and on a classical context.

Maybe you could just provide bare snapshots without any polishing ("as
is") in order to minimise the time you'll spend on it.

-- 
Cheers

From rich.neswold@gmail.com  Fri Mar 15 00:48:14 2013
Return-Path: <rich.neswold@gmail.com>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-50.csi.cam.ac.uk (ppsw-50.csi.cam.ac.uk [131.111.8.150])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id C5BBA3C548
 for <opengl@lists.ocaml.org>; Fri, 15 Mar 2013 00:48:14 +0000 (GMT)
X-Cam-AntiVirus: no malware found
X-Cam-SpamDetails: score -0.8 from SpamAssassin-3.3.2-1455841 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.223.174 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (rich.neswold[at]gmail.com)
 * -0.1 DKIM_VALID_AU Message has a valid DKIM or DK signature from
 *      author's domain
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 * -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-ie0-f174.google.com ([209.85.223.174]:63870)
 by ppsw-50.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtp id 1UGIvG-0007rZ-qb (Exim 4.72) for opengl@lists.ocaml.org
 (return-path <rich.neswold@gmail.com>); Fri, 15 Mar 2013 00:55:02 +0000
Received: by mail-ie0-f174.google.com with SMTP id k10so3812780iea.33
 for <opengl@lists.ocaml.org>; Thu, 14 Mar 2013 17:55:01 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=x-received:subject:mime-version:content-type:from:in-reply-to:date
 :cc:content-transfer-encoding:message-id:references:to:x-mailer;
 bh=re5GjED2AbTIDRSMEyjMp7jGMWlXvUxjUK2R/B+dSMI=;
 b=JLCfxm2O5ItwZ6Ny5I8chojWExDr6j8AAhcAcx5w6YvlIrobNouUEjrVLMADe5k5O5
 cYpjIZl40ZYwUcEHbwR7BQK2dy5R1186agQlRNFmRrFnsND8FxYHH+heyK1SeKYjBZ7T
 1Nuhw2+GcnQZc42DLG0kV1RU7Vsvq1uCKrH12NLeqS6F8csTpRGrzv580S8LsMjmF2fC
 Ze6gFl7pvKg2y1MKg80EbIWRoRD8J7UOm7BiJRzbYSlz8KM+PAMHSGPoyheERLGaRLF3
 XF788HB2zWwfm4PIopw1tTghoQ1iRXsUUDYMXRVLKY60bx6DFGr8Q0gfS1gboG5hMWxI
 ywEg==
X-Received: by 10.50.88.233 with SMTP id bj9mr57581igb.55.1363308901569;
 Thu, 14 Mar 2013 17:55:01 -0700 (PDT)
Received: from [192.168.1.14] (c-67-173-89-183.hsd1.il.comcast.net.
 [67.173.89.183])
 by mx.google.com with ESMTPS id ur12sm73164igb.8.2013.03.14.17.54.59
 (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);
 Thu, 14 Mar 2013 17:55:00 -0700 (PDT)
Mime-Version: 1.0 (Apple Message framework v1283)
Content-Type: text/plain; charset=us-ascii
From: Rich Neswold <rich.neswold@gmail.com>
In-Reply-To: <20130313224445.32ae41aa@crans.org>
Date: Thu, 14 Mar 2013 19:54:57 -0500
Content-Transfer-Encoding: quoted-printable
Message-Id: <733BAD41-06DE-4A01-B1D7-DC47DD49F719@gmail.com>
References: <20130313224445.32ae41aa@crans.org>
To: Pierre Chambart <pierre.chambart@crans.org>
X-Mailer: Apple Mail (2.1283)
Cc: ocaml-opengl <opengl@lists.ocaml.org>
Subject: Re: [ocaml-opengl] I started some EGL bindings is someone
	interested ?
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 15 Mar 2013 00:48:14 -0000


On Mar 13, 2013, at 4:44 PM, Pierre Chambart wrote:

> I have a rpi and you know how you feel forced to play with opengles on
> it. So I started an EGL binding and it is quite complete now.
>=20
> If someone is interested enouth in that I can clean/document that to =
be
> able to publish it. (I also have some minimal stubs for opengles 2
> brutally copied/pasted from glMLite, but this is too far from =
complete).
>=20
> I also play with the idea of having an interface usable both inside a
> browser and on a classical context.

Sounds great! I'm not quite ready to explore OpenGLES on my RPI, but I =
hope to soon.

--
Rich


From monnier.florent@gmail.com  Sat Mar 30 15:39:33 2013
Return-Path: <monnier.florent@gmail.com>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-42.csi.cam.ac.uk [131.111.8.142])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 052253C57E;
 Sat, 30 Mar 2013 15:39:33 +0000 (GMT)
X-Cam-SpamDetails: score 0.2 from SpamAssassin-3.3.2-1462428 
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (monnier.florent[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.174 listed in list.dnswl.dnsbl.ja.net]
 * -0.1 BAYES_00 BODY: Bayes spam probability is 0 to 1%
 *      [score: 0.0000]
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  0.9 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f174.google.com ([209.85.212.174]:54870)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtp id 1ULxzr-00047y-6o (Exim 4.80_167-5a66dd3)
 (return-path <monnier.florent@gmail.com>); Sat, 30 Mar 2013 15:47:12 +0000
Received: by mail-wi0-f174.google.com with SMTP id hj8so583324wib.1
 for <multiple recipients>; Sat, 30 Mar 2013 08:47:09 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:x-received:date:message-id:subject:from:to:cc
 :content-type; bh=5oUz3UBDMZ0H8kjLIp9sqecRRny4qCnIY6vJW+q7EDE=;
 b=jePmsJKyGeJoJXRahcCeDkorgs8AuNOc6v9kh4szw6Ic6xJU1LtfJ+OCLRN2uOEZtM
 kjsSZ1+dte353kgKCfRAwN+nNwIT062wNy5cFGg43bOBLSWh0Re0hl17n8GzuvTnOVbn
 rsz8Jo90MgI6d2TQgoUEEMuF8s+VSwB32kMGgGsk+F+dTHtztfeGzg8kOf4MvWSl9yML
 2gd6wFbujqRGUEaFEh6567cJJbnSEpSvemzuf1tuwe6KSq19iyL9WyF70JCvCmV1nPVL
 h0vSgH78rLQsbbOcH5iosYuDYsEEv/N6z1IV03WaL8CDfwNCk3qWLSPPu47lMUd3GZya
 +Y4Q==
MIME-Version: 1.0
X-Received: by 10.194.119.200 with SMTP id kw8mr8339041wjb.31.1364658429569;
 Sat, 30 Mar 2013 08:47:09 -0700 (PDT)
Received: by 10.194.153.168 with HTTP; Sat, 30 Mar 2013 08:47:09 -0700 (PDT)
Date: Sat, 30 Mar 2013 16:47:09 +0100
Message-ID: <CAE1DttBpkZ16nEy8oCqTUi=XVfLxKtymEsNSLHrujyh1DrwJmg@mail.gmail.com>
From: Florent Monnier <monnier.florent@gmail.com>
To: opam-devel <opam-devel@lists.ocaml.org>
Content-Type: text/plain; charset=ISO-8859-1
Cc: ocaml-opengl <opengl@lists.ocaml.org>
Subject: [ocaml-opengl] [opam-devel] lablgl.1.04
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sat, 30 Mar 2013 15:39:33 -0000

Hi,

On my Windows test environment I can not use "lablgl-20120306" because
of the glShader module that I myself provided before I get a Windows
test environment.

But the vanilla "lablgl-1.04" works fine.

If I've understood correctly Opam is a source package manager, so
maybe opam could provide "lablgl.1.04" for Windows users that have a
similar environment than mine ?

My windows test environment is:
Windows 7 starter with protz's ocaml version 4.00.1

Well in this environment only lablgl itself compiles out of the box.
LablGlut does not.
Togl (Tk) does not either.
(I think that the devel libs for both glut and tkgl are there)

LablGlut and Togl are for windowing, so if we use OCamlSDL instead
this is just fine we don't need these. OCamlSDL1 compiles out of the
box in my win env.

In this environment I compile the Vanilla LablGL like this:

cp Makefile.config.mingw Makefile.config
# need to add -I/usr/include, the patch below does this:
patch < Makefile.config-cygwin-needs-I_usr_include.patch

# don't build anything else than lablgl itself or we get errors:
make lib
make libopt

LABLGL_INSTALLDIR="/tmp/mylblgl0"
make install INSTALLDIR="$LABLGL_INSTALLDIR"
# it seems that the file "dlllablgl.dll" is not installed, so:
cp src/dlllablgl.dll "$LABLGL_INSTALLDIR"/

Now a hello-world works fine.
(I'm providing this hello at the end after the config patch)

===============

$ cat Makefile.config-cygwin-needs-I_usr_include.patch
+++ Makefile.config~    2013-03-12 18:11:58.945140000 +0100
--- Makefile.config     2013-03-30 13:55:08.524315300 +0100
@@ -35,7 +35,7 @@
   -lws2_32 -luser32 -lgdi32

 # Where to find OpenGL/Mesa/Glut headers and libraries
-GLINCLUDES = -DHAS_GLEXT_H -DGL_GLEXT_PROTOTYPES -DGLU_VERSION_1_3
+GLINCLUDES = -I/usr/include -DHAS_GLEXT_H -DGL_GLEXT_PROTOTYPES
-DGLU_VERSION_1_3
 GLLIBS = -lglu32 -lopengl32
 GLLIBS0 = $(GLLIBS)
 GLUTLIBS = -lglut32


============

$ cat lblgl_hello.ml
let display () =
  GlClear.color (0.0, 0.0, 0.0);
  GlClear.clear [`color];
  GlDraw.color (1.0, 1.0, 0.0);
  GlMat.mode `projection;
  GlMat.load_identity ();
  GlMat.ortho ~x:(-1.0,1.0) ~y:(-1.0,1.0) ~z:(-1.0,1.0);
  GlDraw.begins `polygon;
  GlDraw.vertex ~x:(-0.5) ~y:(-0.5) ();
  GlDraw.vertex ~x:(-0.5) ~y:(0.5) ();
  GlDraw.vertex ~x:(0.5) ~y:(0.5) ();
  GlDraw.vertex ~x:(0.5) ~y:(-0.5) ();
  GlDraw.ends ();
  Gl.flush ()

let () =
  Sdl.init [`EVERYTHING];
  let _ =
    Sdlvideo.set_video_mode ~w:640 ~h:400
      [`HWSURFACE; `DOUBLEBUF; `OPENGL; `RESIZABLE]
  in
  for i = 1 to 6 do
    display ();
    Sdlgl.swap_buffers ();
    Sdltimer.delay 1000;
  done;
  Sdl.quit ()


# using full windows path, because protz's ocaml doesn't like cygwin ones:
$ ocaml bigarray.cma -I +site-lib/sdl sdl.cma -I
C:/cygwin/tmp/mylblgl0 lablgl.cma lblgl_hello.ml


===========

# completely untested, just copied and modified from "lablgl.20120306"

$ cat opam

opam-version: "1"
maintainer: "contact@ocamlpro.com"
homepage: "https://forge.ocamlcore.org/projects/lablgl/"
authors: [
  "Jacques Garrigue"
  "Isaac Trotts"
  "Erick Tryzelaar"
  "Christophe Raffali"
]
# "Jon Harrop" contributed the files "gluTess.ml" / "ml_glutess.c"
# should he be considered as one of the authors? or just a contributor?
build: [
  ["cp" "Makefile.config.ex" "Makefile.config"]
  ["cp" "Makefile.config.osx" "Makefile.config"] {"%{os}%" = "darwin"}
  ["cp" "Makefile.config.mingw" "Makefile.config"] {"%{os}%" =
"windows 7 starter with protz's ocaml 4"}

  ["mkdir" "-p" "%{bin}%"]

#  [make "glut"]  ### do not build this one, it doesn't compile out of
the box in my W env
#  [make "glutopt"]  ### do not build this one, it doesn't compile out
of the box in my W env

### in my W env, only build lablgl.{cma,cmxa}
  [make "lib"]
  [make "libopt"]

  [make "install" "-C" "src" "BINDIR=%{bin}%"
"INSTALLDIR=%{lib}%/lablgl" "DLLDIR=%{lib}%/stublibs"]
  # it seems that the makefile forgets to install this one:
  ["cp" "src/dlllablgl.dll" "DLLDIR=%{lib}%/stublibs"] {"%{os:env}%" =
"win7::protz"}

### do not install LablGlut, it doesn't compile out of the box in my W env
### [make "install" "-C" "LablGlut/src" "BINDIR=%{bin}%"
"INSTALLDIR=%{lib}%/lablgl" "DLLDIR=%{lib}%/stublibs"]
]

-- 
Cheers

From wojciech.meyer@gmail.com  Sat Mar 30 19:04:34 2013
Return-Path: <wojciech.meyer@gmail.com>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-51.csi.cam.ac.uk (ppsw-51.csi.cam.ac.uk [131.111.8.151])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 545643C57E;
 Sat, 30 Mar 2013 19:04:34 +0000 (GMT)
X-Cam-AntiVirus: no malware found
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1462428 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.176 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (wojciech.meyer[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-we0-f176.google.com ([74.125.82.176]:34330)
 by ppsw-51.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtp id 1UM1CG-0002zF-Y3 (Exim 4.72)
 (return-path <wojciech.meyer@gmail.com>); Sat, 30 Mar 2013 19:12:13 +0000
Received: by mail-we0-f176.google.com with SMTP id s43so958864wey.7
 for <multiple recipients>; Sat, 30 Mar 2013 12:12:12 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=x-received:from:to:cc:subject:references:date:in-reply-to
 :message-id:user-agent:mime-version:content-type;
 bh=UOU/0ENeLSOSg2T6OswMEhnuemWP72OnRYAfq+u5a98=;
 b=vyh21mYoJZsZnhhhggL+TOV8b79xGtFXrx6h5d45U9NmTHAhbK3/W0z3jpHgIOioli
 Zs+slu8eX8lErvyM0irFwKWaVunYvTaWgcYDjnBRF0wM99PYdV+X+Ke0rALE9U+mhI/L
 ET67gozLgRXVyMtM58b63oK+xotIQy3juc9AwxK26HPiIGln7/z9ZLGMrBQjBZQb0qW9
 z2UsinQ+vk4PwDFYO8BlNtC1+a0wJ1F+UeAjdNnsLY91V4tudXoMSpD1qx6/PdNKm2wq
 uT6eDNW35Bi/XQ4VJxGoiIu/f6GhtvUhRA7iagietwGTnqk+f8ClIjUBKC8IJOPKT8Vm
 0EOA==
X-Received: by 10.180.39.207 with SMTP id r15mr3510417wik.16.1364670732229;
 Sat, 30 Mar 2013 12:12:12 -0700 (PDT)
Received: from spec-desktop.danmey.org
 (cpc2-cmbg12-0-0-cust796.5-4.cable.virginmedia.com. [86.9.203.29])
 by mx.google.com with ESMTPS id j4sm4762810wiz.10.2013.03.30.12.12.09
 (version=TLSv1.1 cipher=RC4-SHA bits=128/128);
 Sat, 30 Mar 2013 12:12:10 -0700 (PDT)
From: Wojciech Meyer <wojciech.meyer@gmail.com>
To: Florent Monnier <monnier.florent@gmail.com>
References: <CAE1DttBpkZ16nEy8oCqTUi=XVfLxKtymEsNSLHrujyh1DrwJmg@mail.gmail.com>
Date: Sat, 30 Mar 2013 19:12:09 +0000
In-Reply-To: <CAE1DttBpkZ16nEy8oCqTUi=XVfLxKtymEsNSLHrujyh1DrwJmg@mail.gmail.com>
 (Florent Monnier's message of "Sat, 30 Mar 2013 16:47:09 +0100")
Message-ID: <wfsj3c1z3q.fsf@gmail.com>
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/24.2 (gnu/linux)
MIME-Version: 1.0
Content-Type: text/plain
Cc: ocaml-opengl <opengl@lists.ocaml.org>,
 opam-devel <opam-devel@lists.ocaml.org>, Adrien Nader <adrien@notk.org>
Subject: Re: [ocaml-opengl] [opam-devel] lablgl.1.04
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sat, 30 Mar 2013 19:04:34 -0000

Hi Florent,

For the Windows users: I'd talk to Adrien Nader and maybe provide a
binary package for LablGL for Windows through Yypkg. At the moment the
packages are crosscompiled on the linux box and there are about 50 of
them. I'm putting Adrien on the recipient list.

- Wojciech
Florent Monnier <monnier.florent@gmail.com> writes:

> Hi,
>
> On my Windows test environment I can not use "lablgl-20120306" because
> of the glShader module that I myself provided before I get a Windows
> test environment.
>
> But the vanilla "lablgl-1.04" works fine.
>
> If I've understood correctly Opam is a source package manager, so
> maybe opam could provide "lablgl.1.04" for Windows users that have a
> similar environment than mine ?
>
> My windows test environment is:
> Windows 7 starter with protz's ocaml version 4.00.1
>
> Well in this environment only lablgl itself compiles out of the box.
> LablGlut does not.
> Togl (Tk) does not either.
> (I think that the devel libs for both glut and tkgl are there)
>
> LablGlut and Togl are for windowing, so if we use OCamlSDL instead
> this is just fine we don't need these. OCamlSDL1 compiles out of the
> box in my win env.
>
> In this environment I compile the Vanilla LablGL like this:
>
> cp Makefile.config.mingw Makefile.config
> # need to add -I/usr/include, the patch below does this:
> patch < Makefile.config-cygwin-needs-I_usr_include.patch
>
> # don't build anything else than lablgl itself or we get errors:
> make lib
> make libopt
>
> LABLGL_INSTALLDIR="/tmp/mylblgl0"
> make install INSTALLDIR="$LABLGL_INSTALLDIR"
> # it seems that the file "dlllablgl.dll" is not installed, so:
> cp src/dlllablgl.dll "$LABLGL_INSTALLDIR"/
>
> Now a hello-world works fine.
> (I'm providing this hello at the end after the config patch)
>
> ===============
>
> $ cat Makefile.config-cygwin-needs-I_usr_include.patch
> +++ Makefile.config~    2013-03-12 18:11:58.945140000 +0100
> --- Makefile.config     2013-03-30 13:55:08.524315300 +0100
> @@ -35,7 +35,7 @@
>    -lws2_32 -luser32 -lgdi32
>
>  # Where to find OpenGL/Mesa/Glut headers and libraries
> -GLINCLUDES = -DHAS_GLEXT_H -DGL_GLEXT_PROTOTYPES -DGLU_VERSION_1_3
> +GLINCLUDES = -I/usr/include -DHAS_GLEXT_H -DGL_GLEXT_PROTOTYPES
> -DGLU_VERSION_1_3
>  GLLIBS = -lglu32 -lopengl32
>  GLLIBS0 = $(GLLIBS)
>  GLUTLIBS = -lglut32
>
>
> ============
>
> $ cat lblgl_hello.ml
> let display () =
>   GlClear.color (0.0, 0.0, 0.0);
>   GlClear.clear [`color];
>   GlDraw.color (1.0, 1.0, 0.0);
>   GlMat.mode `projection;
>   GlMat.load_identity ();
>   GlMat.ortho ~x:(-1.0,1.0) ~y:(-1.0,1.0) ~z:(-1.0,1.0);
>   GlDraw.begins `polygon;
>   GlDraw.vertex ~x:(-0.5) ~y:(-0.5) ();
>   GlDraw.vertex ~x:(-0.5) ~y:(0.5) ();
>   GlDraw.vertex ~x:(0.5) ~y:(0.5) ();
>   GlDraw.vertex ~x:(0.5) ~y:(-0.5) ();
>   GlDraw.ends ();
>   Gl.flush ()
>
> let () =
>   Sdl.init [`EVERYTHING];
>   let _ =
>     Sdlvideo.set_video_mode ~w:640 ~h:400
>       [`HWSURFACE; `DOUBLEBUF; `OPENGL; `RESIZABLE]
>   in
>   for i = 1 to 6 do
>     display ();
>     Sdlgl.swap_buffers ();
>     Sdltimer.delay 1000;
>   done;
>   Sdl.quit ()
>
>
> # using full windows path, because protz's ocaml doesn't like cygwin ones:
> $ ocaml bigarray.cma -I +site-lib/sdl sdl.cma -I
> C:/cygwin/tmp/mylblgl0 lablgl.cma lblgl_hello.ml
>
>
> ===========
>
> # completely untested, just copied and modified from "lablgl.20120306"
>
> $ cat opam
>
> opam-version: "1"
> maintainer: "contact@ocamlpro.com"
> homepage: "https://forge.ocamlcore.org/projects/lablgl/"
> authors: [
>   "Jacques Garrigue"
>   "Isaac Trotts"
>   "Erick Tryzelaar"
>   "Christophe Raffali"
> ]
> # "Jon Harrop" contributed the files "gluTess.ml" / "ml_glutess.c"
> # should he be considered as one of the authors? or just a contributor?
> build: [
>   ["cp" "Makefile.config.ex" "Makefile.config"]
>   ["cp" "Makefile.config.osx" "Makefile.config"] {"%{os}%" = "darwin"}
>   ["cp" "Makefile.config.mingw" "Makefile.config"] {"%{os}%" =
> "windows 7 starter with protz's ocaml 4"}
>
>   ["mkdir" "-p" "%{bin}%"]
>
> #  [make "glut"]  ### do not build this one, it doesn't compile out of
> the box in my W env
> #  [make "glutopt"]  ### do not build this one, it doesn't compile out
> of the box in my W env
>
> ### in my W env, only build lablgl.{cma,cmxa}
>   [make "lib"]
>   [make "libopt"]
>
>   [make "install" "-C" "src" "BINDIR=%{bin}%"
> "INSTALLDIR=%{lib}%/lablgl" "DLLDIR=%{lib}%/stublibs"]
>   # it seems that the makefile forgets to install this one:
>   ["cp" "src/dlllablgl.dll" "DLLDIR=%{lib}%/stublibs"] {"%{os:env}%" =
> "win7::protz"}
>
> ### do not install LablGlut, it doesn't compile out of the box in my W env
> ### [make "install" "-C" "LablGlut/src" "BINDIR=%{bin}%"
> "INSTALLDIR=%{lib}%/lablgl" "DLLDIR=%{lib}%/stublibs"]
> ]

--
Wojciech Meyer
http://danmey.org

From monnier.florent@gmail.com  Wed May  8 14:45:29 2013
Return-Path: <monnier.florent@gmail.com>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 303B23C042
 for <opengl@lists.ocaml.org>; Wed,  8 May 2013 14:45:29 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1479814 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.180 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (monnier.florent[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.0 T_FRT_BELOW2 BODY: ReplaceTags: Below (2)
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-we0-f180.google.com ([74.125.82.180]:44974)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtp id 1Ua4pt-00031A-Fy (Exim 4.80_167-5a66dd3) for
 opengl@lists.ocaml.org
 (return-path <monnier.florent@gmail.com>); Wed, 08 May 2013 14:55:15 +0100
Received: by mail-we0-f180.google.com with SMTP id n5so1801618wev.39
 for <opengl@lists.ocaml.org>; Wed, 08 May 2013 06:55:13 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:x-received:in-reply-to:references:date:message-id
 :subject:from:to:cc:content-type;
 bh=iTtwJTVikVV4mduhMDPS0mc5q34x6Zl2fcFzti+/QSw=;
 b=ppfFGTD1WBrzOkPQi4FxIv9EsROJGRVDr/9jnGeWuFGzUQiB81rkVIkzCLnsyZVIZs
 vLuG/jsdbSqbOiNaOL+hPCTvdrIHmEWZgk2xNcopJzAMOwusqQWt1lJdKYhAm/B/+aYr
 HoqeBIm6YCgzzJDZ9keBIrZa8oPoURc+Tt5ZeZfGSU/jn/QSh1SIn+QXSXLjaX6mm6T0
 1Zw5a8RrL5oXXtbEjgtgh5Bl6pqRU0rgNMH9sxLJ7M8kzmBzel59m5BAuFBLc68Z7oEK
 h6cLLsM+919qnb7gUnhizJWNSMjd1i5t5gI6s7zgZagftykILcN8Iizc2485bNM1nEf4
 WGrQ==
MIME-Version: 1.0
X-Received: by 10.181.12.1 with SMTP id em1mr10007207wid.4.1368021312227; Wed,
 08 May 2013 06:55:12 -0700 (PDT)
Received: by 10.194.133.133 with HTTP; Wed, 8 May 2013 06:55:11 -0700 (PDT)
In-Reply-To: <5189B929.2030808@riken.jp>
References: <5WRK1WTA-CFLT-K2D2-HI4C-UBS0MHNSFIAY@cs.ucy.ac.cy>
 <5189B929.2030808@riken.jp>
Date: Wed, 8 May 2013 15:55:11 +0200
Message-ID: <CAE1DttARsrCZTF4FPj5Hzu1tjFiMEqj94rgYzFqfTacmLo5B+w@mail.gmail.com>
From: Florent Monnier <monnier.florent@gmail.com>
To: Francois Berenger <berenger@riken.jp>
Content-Type: text/plain; charset=ISO-8859-1
Cc: ocaml-opengl <opengl@lists.ocaml.org>, caml-list@inria.fr
Subject: Re: [ocaml-opengl] [Caml-list] standard 3d vector library in OCaml
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Wed, 08 May 2013 13:45:29 -0000

2013/5/8, Francois Berenger:
> Hello,
>
> Is there a standard library for this purpose?
>
> Maybe I should relase mine, I have a small one.

I would enjoy to see your library.

Especially if some functions are usable for OpenGL.
Here is bellow what I'm using for OpenGL.
This is not a vector lib but a matrix lib tailored for use with
forward compatible OpenGL.
It only contains 2 or 3 (not-optimised) functions for vectors computations.

https://forge.ocamlcore.org/scm/viewvc.php/trunk/TEST3/ogl_matrix.mli?view=markup&revision=94&root=glmlite
https://forge.ocamlcore.org/scm/viewvc.php/trunk/TEST3/ogl_matrix.mli?view=markup&root=glmlite

https://forge.ocamlcore.org/scm/viewvc.php/trunk/TEST3/ogl_matrix.ml?view=markup&revision=94&root=glmlite
https://forge.ocamlcore.org/scm/viewvc.php/trunk/TEST3/ogl_matrix.ml?view=markup&root=glmlite

But this current revision 94 in the svn is not my more advanced version.
The more recent version is not in the svn because it's C code rewriten
in OCaml and the original code was provided under a more restrictive
license than the one of glMLite (MIT), and I don't want to downgrade
to (L)GPL.

Someone told me that I should not bother about this issue and that
this kind of code should be considered as only math.

http://www.linux-nantes.org/%7Efmonnier/ocaml/GL/fc/code/ogl_matrix.ml.xhtml
http://www.linux-nantes.org/%7Efmonnier/ocaml/GL/fc/code/

If your lib contains things useful for OpenGL I would be pleased to
integrate these parts in my module Ogl_matrix, or maybe even create a
new one Ogl_vector.
(But only if your license is MIT or similar)

-- 
Cheers

From daniel.buenzli@erratique.ch  Thu May  9 11:13:37 2013
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-mx-f.csi.cam.ac.uk [131.111.8.149])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 03E433C475
 for <opengl@lists.ocaml.org>; Thu,  9 May 2013 11:13:37 +0100 (BST)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1480184
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:50874
 helo=smtp.webfaction.com)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtp id 1UaO0T-0003DZ-8M (Exim 4.80_167-5a66dd3) for
 opengl@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Thu, 09 May 2013 11:23:26 +0100
Received: from [10.80.118.32] (firewall.ctxuk.citrix.com [46.33.159.2])
 by smtp.webfaction.com (Postfix) with ESMTP id BC74320D75F7;
 Thu,  9 May 2013 10:23:23 +0000 (UTC)
Date: Thu, 9 May 2013 11:23:22 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Francois Berenger <berenger@riken.jp>
Message-ID: <F510569F0D0C4C20909DBE5AB732DFD5@erratique.ch>
In-Reply-To: <CAE1DttARsrCZTF4FPj5Hzu1tjFiMEqj94rgYzFqfTacmLo5B+w@mail.gmail.com>
References: <5WRK1WTA-CFLT-K2D2-HI4C-UBS0MHNSFIAY@cs.ucy.ac.cy>
 <5189B929.2030808@riken.jp>
 <CAE1DttARsrCZTF4FPj5Hzu1tjFiMEqj94rgYzFqfTacmLo5B+w@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Cc: ocaml-opengl <opengl@lists.ocaml.org>,
 =?utf-8?Q?T=C3=B6r=C3=B6k_Edwin?= <edwin@etorok.net>, caml-list@inria.fr
Subject: Re: [ocaml-opengl] [Caml-list] standard 3d vector library in OCaml
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 09 May 2013 10:13:37 -0000

> 2013/5/8, Francois Berenger:
> > Hello,
> > 
> > Is there a standard library for this purpose?
It's not standard, unreleased and I hate to pre-announce but in the following months I plan to release Gg, a module that gives you basic types for 2D and 3D computer graphics; vectors, matrices, quaternions, axis-aligned boxes, colors and raster data.

Vectors and matrices are abstract but represented internally as records of floats. This allows to pass them directly to C functions that take double arrays and avoids bounds checking in OCaml code. The memory layout of matrices is also the one expected by OpenGL.

Except for the Raster module --- metadata for bigarrays to allow libraries to share raster data without depending on each other e.g. an OpenCV or image loading library and an OpenGL library --- the module is pretty stable now, it still needs a final code review though and one or two function names may change.

The current documentation of gg can be found here [1], the code can be browsed here [2]. It can also be installed via the erratique-unstable opam repo:

    opam repo add erratique-unstable http://erratique.ch/software/opam-unstable
    opam update 
    opam install gg

But I'd advise you not to that until the next release of opam because of this bug [3] which while harmless makes your `opam update` experience become unpleasant (you have to do a `opam remove gg`, before being able to `opam update`). 

Comments are welcome. 

Best,

Daniel


[1] http://erratique.ch/software/gg/doc/Gg.html
[2] https://github.com/dbuenzli/gg/
[3] https://github.com/OCamlPro/opam/issues/552




From monnier.florent@gmail.com  Thu May  9 21:17:45 2013
Return-Path: <monnier.florent@gmail.com>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id A3F2F3C059
 for <opengl@lists.ocaml.org>; Thu,  9 May 2013 21:17:45 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1480184 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.219.44 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (monnier.florent[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-oa0-f44.google.com ([209.85.219.44]:56703)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtp id 1UaXR9-0004U5-hn (Exim 4.80_167-5a66dd3) for
 opengl@lists.ocaml.org
 (return-path <monnier.florent@gmail.com>); Thu, 09 May 2013 21:27:36 +0100
Received: by mail-oa0-f44.google.com with SMTP id n12so4057342oag.3
 for <opengl@lists.ocaml.org>; Thu, 09 May 2013 13:27:34 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:x-received:in-reply-to:references:date:message-id
 :subject:from:to:cc:content-type:content-transfer-encoding;
 bh=s7aw0nWOB6vLp/XLbWWTgMTaDiQbXIG1eKcFnzBowF4=;
 b=UmDGb9M/QMKl+Jts1CTOMRs5E5Se4gkFi0slNAD7hVFU/m8AQapP6MDxfDnN5dECMu
 TgUaFqLeBO5kKSFkpgPm2OmqcDr8FSKI4WInmKnpWzdKWmOhJfz9RqqTjNEgGjWFKa9V
 NW/uKVDRA/x8PAtYzgzvkuvWXEPjjzK+FRCzfHcwIMdrNGTrk/q3VnQdMXeqrn0urXdO
 7epYX0l41Qc5rVuWt2cW2GJ8RKJ4U6b9mlS4xQANo1/dJ6S67Cc6yS6pRIlaTV7/mOjQ
 HGGnGISFK5n4d9mlozPxc/KuRBY3AHsfGKggNBcGvdwVD63U7d9axVvs7dfiUQ/fdO48
 JGiw==
MIME-Version: 1.0
X-Received: by 10.60.16.69 with SMTP id e5mr5207840oed.46.1368131254682; Thu,
 09 May 2013 13:27:34 -0700 (PDT)
Received: by 10.60.3.168 with HTTP; Thu, 9 May 2013 13:27:34 -0700 (PDT)
In-Reply-To: <F510569F0D0C4C20909DBE5AB732DFD5@erratique.ch>
References: <5WRK1WTA-CFLT-K2D2-HI4C-UBS0MHNSFIAY@cs.ucy.ac.cy>
 <5189B929.2030808@riken.jp>
 <CAE1DttARsrCZTF4FPj5Hzu1tjFiMEqj94rgYzFqfTacmLo5B+w@mail.gmail.com>
 <F510569F0D0C4C20909DBE5AB732DFD5@erratique.ch>
Date: Thu, 9 May 2013 22:27:34 +0200
Message-ID: <CAE1DttDjV7TPyJbHEi37_77su39-LkdtZiQ=utv9mFQBcmdRMw@mail.gmail.com>
From: Florent Monnier <monnier.florent@gmail.com>
To: =?ISO-8859-1?Q?Daniel_B=FCnzli?= <daniel.buenzli@erratique.ch>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Cc: ocaml-opengl <opengl@lists.ocaml.org>, Caml List <caml-list@inria.fr>
Subject: Re: [ocaml-opengl] [Caml-list] standard 3d vector library in OCaml
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 09 May 2013 20:17:45 -0000

Hello Daniel,

2013/5/9, Daniel B=FCnzli:
>> 2013/5/8, Francois Berenger:
>> > Hello,
>> >
>> > Is there a standard library for this purpose?
>
> It's not standard, unreleased and I hate to pre-announce but in the
> following months I plan to release Gg, a module that gives you basic type=
s
> for 2D and 3D computer graphics; vectors, matrices, quaternions,
> axis-aligned boxes, colors and raster data.

This is always christmas when you release something, thx :)

> Vectors and matrices are abstract but represented internally as records o=
f
> floats. This allows to pass them directly to C functions that take double
> arrays and avoids bounds checking in OCaml code.

I found this trick in the ode bindings by Richard Jones.
In my opinion it's a good trick for matrices.
But I don't like it for xy or xyz triples. I prefer tuples for this
because it makes it more easy to exchange data between different ocaml
components and modules. For these I usually prefer something easy to
exchanges between different ocaml modules than something easy to
exchange with C. Because xy / xyz values are used a lot in the
high-level parts. And usually, in most parts of the code I use it
without open the tuple content, so the representation is not very
important except to make it easy to exchange without dependencies. So
this is why I prefer (float * float) and (float * float * float).

But this is only my taste. I don't know how other people manage this,
because there is not much code to read around for this kind of things.

>                                                   The memory layout of
> matrices is also the one expected by OpenGL.

It's great to have convenience like this.

> Except for the Raster module --- metadata for bigarrays to allow librarie=
s
> to share raster data without depending on each other e.g. an OpenCV or im=
age
> loading library and an OpenGL library ---

I've also started to play with OpenCV.
If you have things to share in OCaml I would enjoy to see it, even if
it's alpha.

>                                            the module is pretty stable no=
w,
> it still needs a final code review though and one or two function names m=
ay
> change.

It looks quite close to a release.

> The current documentation of gg can be found here [1],

I appreciate the grey background.
With floaters in the eyes the darker is the better.
What is the license of your CSS, is it the same than your libs?
But if I build the docs from the sources it falls back to default
ocamldoc's css with plain white uncomfortable background.
Also how did you choosed this value of grey? Is it just your tastes,
or is it for a particular reason? I used very dark greys in the past
and some people sent me emails to ask me lighter background greys. Is
it compromise between people who like plain white and people who
prefer darker backgrounds?

>                                                        the code can be
> browsed here [2]. It can also be installed via the erratique-unstable opa=
m
> repo:
>
>     opam repo add erratique-unstable
> http://erratique.ch/software/opam-unstable
>     opam update
>     opam install gg

Opam rules! [4]

> But I'd advise you not to that until the next release of opam because of
> this bug [3] which while harmless makes your `opam update` experience bec=
ome
> unpleasant (you have to do a `opam remove gg`, before being able to `opam
> update`).
>
> Comments are welcome.

I noticed the mix functions for each types
mix x y t is the linear interpolation x +. t *. (y -. x)
It is not optimised for the case that we would apply it at each frame
and that (y -. x) will be the same all the time.
I have my own module for interpolation where it is not optimised too.
But I'm thinking to change it. Maybe some solution could be used to do
it in an elegant way that would not complicate the code too much.

Also you're providing only linear interpolation.
Is it that you're not using easing, or is it that you're using another
module for it?
If it's external I guess you're using the map functions to apply it.
I've started a small module for this, but I'm unsure what would be the
more convenient interface. Here are the interfaces of two different
snapshots:

http://www.linux-nantes.org/%7Efmonnier/ocaml/easing/doc-2013-04-05/Ease.ht=
ml
http://www.linux-nantes.org/%7Efmonnier/ocaml/easing/doc-2013-04-05/Timed.h=
tml

http://www.linux-nantes.org/%7Efmonnier/ocaml/easing/doc-2013-05-09/Ease.ht=
ml
http://www.linux-nantes.org/%7Efmonnier/ocaml/easing/doc-2013-05-09/Timed.h=
tml

Comments are wellcome.

Another thing that is only a question of taste, I would enjoy if there
would be aliases for the functions Size*.d w h with words entirely.
Sometimes the more readable is the shorter, some other times the
entire word will help understand what it is. So with aliases we can
choose what is the more pertinent for the situation.

Your new lib doesn't look promising, in fact it's already a must have!
(just like your other libs;)

> Best,
>
> Daniel
>
>
> [1] http://erratique.ch/software/gg/doc/Gg.html
> [2] https://github.com/dbuenzli/gg/
> [3] https://github.com/OCamlPro/opam/issues/552

[4] Well at least on Linux, in my Cygwin it doesn't work

--

From daniel.buenzli@erratique.ch  Thu May  9 22:52:07 2013
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id C53163C059
 for <opengl@lists.ocaml.org>; Thu,  9 May 2013 22:52:07 +0100 (BST)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1480184
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:35561
 helo=smtp.webfaction.com)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1UaYuT-0003IK-02 (Exim 4.80_167-5a66dd3) for
 opengl@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Thu, 09 May 2013 23:01:57 +0100
Received: from [192.168.1.126]
 (cpc3-cmbg9-0-0-cust324.5-4.cable.virginmedia.com [81.103.21.69])
 by smtp.webfaction.com (Postfix) with ESMTP id 85EC920F90DD;
 Thu,  9 May 2013 22:01:55 +0000 (UTC)
Date: Thu, 9 May 2013 23:01:53 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Florent Monnier <monnier.florent@gmail.com>
Message-ID: <B6E4B1B39BFF47FBB5BAFF66F0415A1A@erratique.ch>
In-Reply-To: <CAE1DttDjV7TPyJbHEi37_77su39-LkdtZiQ=utv9mFQBcmdRMw@mail.gmail.com>
References: <5WRK1WTA-CFLT-K2D2-HI4C-UBS0MHNSFIAY@cs.ucy.ac.cy>
 <5189B929.2030808@riken.jp>
 <CAE1DttARsrCZTF4FPj5Hzu1tjFiMEqj94rgYzFqfTacmLo5B+w@mail.gmail.com>
 <F510569F0D0C4C20909DBE5AB732DFD5@erratique.ch>
 <CAE1DttDjV7TPyJbHEi37_77su39-LkdtZiQ=utv9mFQBcmdRMw@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Cc: ocaml-opengl <opengl@lists.ocaml.org>, Caml List <caml-list@inria.fr>
Subject: Re: [ocaml-opengl] [Caml-list] standard 3d vector library in OCaml
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Thu, 09 May 2013 21:52:07 -0000

Thanks for your comments. A few answers. 

> But I don't like it for xy or xyz triples. I prefer tuples for this
> because it makes it more easy to exchange data between different ocaml
> components and modules. For these I usually prefer something easy to
> exchanges between different ocaml modules than something easy to
> exchange with C. 


It's not only about C, it's also about avoiding boxed representations to reduce memory usage and provide more memory locality. I agree deconstructing these values is more painful than tuples but I hope this encourages you to perform computations vector-wise rather than coordinate-wise -- the implementation of gg does the latter so that its users can work as much as possible vector-wise with reasonable performance, falling back to coordinate-wise computations only in bottlenecks.

> I've also started to play with OpenCV.
> If you have things to share in OCaml I would enjoy to see it, even if
> it's alpha.


Nothing on that front. 
 
> I appreciate the grey background.


In my browser the background is white. In fact I now see that the background of the body is transparent in the stylesheet so that gray must be a default value in your browser...

> What is the license of your CSS, is it the same than your libs?
 
Yes feel free to reuse the stylesheet. Maintaining it is a little bit annoying as ocamldoc's markup tend to change from one version to the other and it's still hard to style because of formatting instructions in the markup and generation patterns that disallow you to distinguish certain case you'd like to (even with the deranged power of css). 

Myself I hope I can eventually drop that in favour of what is happening around opam doc in the OCaml platform [1]; provided they provide a sensitive stylesheet, which for me means reasonably dense vertically, not too wide horizontally and good use of white space instead of box disease -- blame the css border property for that.  

> But if I build the docs from the sources it falls back to default
> ocamldoc's css with plain white uncomfortable background.


Use ./build doc in the distribution to build with the stylesheet.
 
> Also you're providing only linear interpolation.
> Is it that you're not using easing, or is it that you're using another
> module for it?


For now I decided to leave that out of the library. I think there are many ways you'd like to do that depending on the context (e.g. see the links to shaping functions at the bottom of this page [2]). Since I was doubting I left it out. 

The goal of gg is also the keep a certain minimalism -- in fact I was even tempted to split the 2D from the 3D using the module language but eventually thought it was more consistant and less bureaucratic to have everything together.

> Another thing that is only a question of taste, I would enjoy if there
> would be aliases for the functions Size*.d w h with words entirely.
> Sometimes the more readable is the shorter, some other times the
> entire word will help understand what it is. So with aliases we can
> choose what is the more pertinent for the situation.


I dislike libraries that give aliases for the same things. It puts a useless cognitive burden on code readers which have to remember that there are two ways of naming the same thing and it results in inconsistant library usage style. I usually go with shorter names (sometimes too short I agree) because I like code compactness and stick to 80 columns.

Best,

Daniel

[1] http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/platform.html#OPAM Doc (http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/platform.html#OPAM%20Doc)
[2] http://www.flong.com/texts/code/



From monnier.florent@gmail.com  Fri May 10 16:38:54 2013
Return-Path: <monnier.florent@gmail.com>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id D7F103C475
 for <opengl@lists.ocaml.org>; Fri, 10 May 2013 16:38:54 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1480571 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [74.125.82.172 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (monnier.florent[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-we0-f172.google.com ([74.125.82.172]:62435)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtp id 1UapYt-0007zs-hp (Exim 4.80_167-5a66dd3) for
 opengl@lists.ocaml.org
 (return-path <monnier.florent@gmail.com>); Fri, 10 May 2013 16:48:48 +0100
Received: by mail-we0-f172.google.com with SMTP id w60so4229621wes.17
 for <opengl@lists.ocaml.org>; Fri, 10 May 2013 08:48:47 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:x-received:in-reply-to:references:date:message-id
 :subject:from:to:cc:content-type:content-transfer-encoding;
 bh=JDUBcsZxGN8+75YlYIzD2a300PXktsZdNLeX7sR0tKo=;
 b=fVxv3gimBTBUAT8tPKMfzi5crYwOlsIC8f556vc/omRpKJ1FB2+4f5VwtwYt7DB/uG
 K6NjvjilburFEm7zj7BYR/APAZAmrmi54ErZ8QsMYBMxLbk1fb9iyzlncniSieVuWhNN
 +oKtsdalQ+JghdAb0rmiezSfSd/7QBu3n9bFrI4wIk58UOiNJ/FWi/9ZX94zU1InKsjg
 rS+FOx0xTzZJ942eYn0/DzWZN21Dqeu1mgo5XiVkXuFr9SHw3R1dFuLywlJnA6MlZRaS
 wRnB8lmKzU9YFTPgNSNavaQOZIF5YIelaFnJlewDSFl1h3LQ6+v0v+mf1qaNThy7arU1
 ygYg==
MIME-Version: 1.0
X-Received: by 10.181.12.1 with SMTP id em1mr4866232wid.4.1368200927308; Fri,
 10 May 2013 08:48:47 -0700 (PDT)
Received: by 10.194.133.133 with HTTP; Fri, 10 May 2013 08:48:47 -0700 (PDT)
In-Reply-To: <B6E4B1B39BFF47FBB5BAFF66F0415A1A@erratique.ch>
References: <5WRK1WTA-CFLT-K2D2-HI4C-UBS0MHNSFIAY@cs.ucy.ac.cy>
 <5189B929.2030808@riken.jp>
 <CAE1DttARsrCZTF4FPj5Hzu1tjFiMEqj94rgYzFqfTacmLo5B+w@mail.gmail.com>
 <F510569F0D0C4C20909DBE5AB732DFD5@erratique.ch>
 <CAE1DttDjV7TPyJbHEi37_77su39-LkdtZiQ=utv9mFQBcmdRMw@mail.gmail.com>
 <B6E4B1B39BFF47FBB5BAFF66F0415A1A@erratique.ch>
Date: Fri, 10 May 2013 17:48:47 +0200
Message-ID: <CAE1DttBuONKQQa7xcxPZ9Vnjj=HtUjgUf5bEnQk1bGLwcNmhkw@mail.gmail.com>
From: Florent Monnier <monnier.florent@gmail.com>
To: =?ISO-8859-1?Q?Daniel_B=FCnzli?= <daniel.buenzli@erratique.ch>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Cc: ocaml-opengl <opengl@lists.ocaml.org>, Caml List <caml-list@inria.fr>
Subject: Re: [ocaml-opengl] [Caml-list] standard 3d vector library in OCaml
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 10 May 2013 15:38:54 -0000

2013/5/10, Daniel B=FCnzli:
>> But I don't like it for xy or xyz triples. I prefer tuples for this
>> because it makes it more easy to exchange data between different ocaml
>> components and modules. For these I usually prefer something easy to
>> exchanges between different ocaml modules than something easy to
>> exchange with C.
>
> It's not only about C, it's also about avoiding boxed representations to
> reduce memory usage and provide more memory locality. I agree deconstruct=
ing
> these values is more painful than tuples but I hope this encourages you t=
o
> perform computations vector-wise rather than coordinate-wise -- the
> implementation of gg does the latter so that its users can work as much a=
s
> possible vector-wise with reasonable performance, falling back to
> coordinate-wise computations only in bottlenecks.

I do understand.
But what I was trying to explain is that I usually have 2 or 3 or even
more modules/components/libs each using 3D coordinates.
Then it is easy to exchange values that are (float * float * float).
Anything else makes things difficult for exchanges and needs to be converte=
d.

>> I appreciate the grey background.
>
> In my browser the background is white. In fact I now see that the backgro=
und
> of the body is transparent in the stylesheet so that gray must be a defau=
lt
> value in your browser...

Indeed, your page is the first one I see with transparent background.
It is not recommended to define text color without background color.
If the default browser background color is black one would see nothing.

>> What is the license of your CSS, is it the same than your libs?
>
> Yes feel free to reuse the stylesheet. Maintaining it is a little bit
> annoying as ocamldoc's markup tend to change from one version to the othe=
r
> and it's still hard to style because of formatting instructions in the
> markup and generation patterns that disallow you to distinguish certain c=
ase
> you'd like to (even with the deranged power of css).

I know, this is the same for me.

> Myself I hope I can eventually drop that in favour of what is happening
> around opam doc in the OCaml platform [1]; provided they provide a sensit=
ive
> stylesheet, which for me means reasonably dense vertically, not too wide
> horizontally and good use of white space instead of box disease -- blame =
the
> css border property for that.

I was thinking to group html api-docs of many libs together (and maybe
even keep all recent versions of the libs) with a css switcher
(probably hosted on the ocaml forge). I even thought about a name like
"ocamldoc-zen-garden" (inspired from "css-zen-garden"). What would you
think about such an idea?

>> Also you're providing only linear interpolation.
>> Is it that you're not using easing, or is it that you're using another
>> module for it?
>
> For now I decided to leave that out of the library. I think there are man=
y
> ways you'd like to do that depending on the context (e.g. see the links t=
o
> shaping functions at the bottom of this page [2]). Since I was doubting I
> left it out.

I would enjoy to know which of these you are considering.

[...]
> [2] http://www.flong.com/texts/code/

A very good link, thanks a lot!
There's a huge amount of content, could you share which you think
would be the more interesting for reuse in OCaml?

> The goal of gg is also the keep a certain minimalism -- in fact I was eve=
n
> tempted to split the 2D from the 3D using the module language but eventua=
lly
> thought it was more consistant and less bureaucratic to have everything
> together.

It seems logic to me to do it the way you've made it.
I would only comment that if you add Sizes, BBoxes, then why not also
bounding-cirlces / bounding-spheres, complete math for geometry with
points, lines, planes, etc. (distances, intersections, projections,
etc.)

The internal representations for vectors and points are not public,
which would imply to integrate these inside your module. Would you
accept pull requests for these, or you want to keep the current
minimalism?


> I dislike libraries that give aliases for the same things. It puts a usel=
ess
> cognitive burden on code readers which have to remember that there are tw=
o
> ways of naming the same thing and it results in inconsistant library usag=
e
> style. I usually go with shorter names (sometimes too short I agree) beca=
use
> I like code compactness and stick to 80 columns.

Maybe a compromise could be found,
between one letter function names:

Size3.w
Size3.h
Size3.d

and complete names:

Size3.width
Size3.height
Size3.depth

could be 3 letters abbreviations:

Size3.wid
Size3.hei
Size3.dep

I would recommend not to assume that everyone share the same cognition
and tastes than you.

--=20
Regards

From daniel.buenzli@erratique.ch  Fri May 10 17:53:21 2013
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id BD6753C475
 for <opengl@lists.ocaml.org>; Fri, 10 May 2013 17:53:21 +0100 (BST)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1480571
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:47336
 helo=smtp.webfaction.com)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1Uaqiw-0005Oe-0a (Exim 4.80_167-5a66dd3) for
 opengl@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Fri, 10 May 2013 18:03:15 +0100
Received: from [172.20.10.2] (92.40.253.91.threembb.co.uk [92.40.253.91])
 by smtp.webfaction.com (Postfix) with ESMTP id 610E720F2A82;
 Fri, 10 May 2013 17:01:45 +0000 (UTC)
Date: Fri, 10 May 2013 18:01:38 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Florent Monnier <monnier.florent@gmail.com>
Message-ID: <313A2353F5864A008B0EA050D52AC789@erratique.ch>
In-Reply-To: <CAE1DttBuONKQQa7xcxPZ9Vnjj=HtUjgUf5bEnQk1bGLwcNmhkw@mail.gmail.com>
References: <5WRK1WTA-CFLT-K2D2-HI4C-UBS0MHNSFIAY@cs.ucy.ac.cy>
 <5189B929.2030808@riken.jp>
 <CAE1DttARsrCZTF4FPj5Hzu1tjFiMEqj94rgYzFqfTacmLo5B+w@mail.gmail.com>
 <F510569F0D0C4C20909DBE5AB732DFD5@erratique.ch>
 <CAE1DttDjV7TPyJbHEi37_77su39-LkdtZiQ=utv9mFQBcmdRMw@mail.gmail.com>
 <B6E4B1B39BFF47FBB5BAFF66F0415A1A@erratique.ch>
 <CAE1DttBuONKQQa7xcxPZ9Vnjj=HtUjgUf5bEnQk1bGLwcNmhkw@mail.gmail.com>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Cc: ocaml-opengl <opengl@lists.ocaml.org>, Caml List <caml-list@inria.fr>
Subject: Re: [ocaml-opengl] [Caml-list] standard 3d vector library in OCaml
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 10 May 2013 16:53:21 -0000



Le vendredi, 10 mai 2013 =C3=A0 16:48, =46lorent Monnier a =C3=A9crit :

> A very good link, thanks a lot=21
> There's a huge amount of content, could you share which you think
> would be the more interesting for reuse in OCaml=3F

I think each of them serve different purpose (e.g. computational trade-of=
fs on embedded platforms) that's the reason why these things are best lef=
t outside gg for now. =20

> It seems logic to me to do it the way you've made it.
> I would only comment that if you add Sizes, BBoxes, then why not also
> bounding-cirlces / bounding-spheres, complete math for geometry with
> points, lines, planes, etc. (distances, intersections, projections,
> etc.)

I don't plan to integrate these things, no pull requests please. At a cer=
tain point I was planning to but it was becoming unwieldy -- remnant of t=
hese ideas can be seen in the tmp/ directory of the first commit. Gg prov=
ides you with the essentials to do 2D or 3D computer graphics. Sizes and =
rectangles are ubiquitous: viewports, image extents, etc. and that's the =
reason they are in. More general computational geometry tools are best le=
ft to another dedicated library.
 =20
> The internal representations for vectors and points are not public,
> which would imply to integrate these inside your module.

Regarding the internal representation I still have to think about what I =
will do. Gg is designed to interoperate with C so that means that the rep=
resentation will be cast in stone anyways.

> Maybe a compromise could be found,
> between one letter function names:
> =20
> Size3.w
> Size3.h
> Size3.d
> =20
> and complete names:
> =20
> Size3.width
> Size3.height
> Size3.depth
> =20
> could be 3 letters abbreviations:
> =20
> Size3.wid
> Size3.hei
> Size3.dep

Well, no=E2=80=A6 it's horrible to read, hard to remember and inconsisten=
t: if you look at all the other vector types in Gg their coordinate acces=
sors all have a single letter V2.=7Bx,y=7D, P2.=7Bx,y=7D, V3.=7Bx,y,z=7D,=
 P3.=7Bx,y,z=7D, V4.=7Bx,y,z,w=7D, Color.=7Br,g,b,a=7D, Quat.=7Bx,y,z,w=7D=
. Having Size2.=7Bw,h=7D and Size3.=7Bw,h,d=7D feels natural. =20

> I would recommend not to assume that everyone share the same cognition
> and tastes than you.

I certainly don't assume that. I do however program and design to my tast=
e, not by consensus or compromise.

Best,

Daniel



From anthony.tavener@gmail.com  Fri May 10 18:01:17 2013
Return-Path: <anthony.tavener@gmail.com>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 303AF3C475
 for <opengl@lists.ocaml.org>; Fri, 10 May 2013 18:01:17 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1480571 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.215.172 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (anthony.tavener[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.0 HTML_MESSAGE BODY: HTML included in message
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-ea0-f172.google.com ([209.85.215.172]:52499)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1Uaqqc-0007yp-0M (Exim 4.80_167-5a66dd3) for
 opengl@lists.ocaml.org
 (return-path <anthony.tavener@gmail.com>); Fri, 10 May 2013 18:11:10 +0100
Received: by mail-ea0-f172.google.com with SMTP id r16so2412912ead.31
 for <opengl@lists.ocaml.org>; Fri, 10 May 2013 10:11:09 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:x-received:in-reply-to:references:date:message-id
 :subject:from:to:cc:content-type;
 bh=iI1p+W/frLgCpJp5FKFUj8iA25IPLidipbeE89NC7/A=;
 b=YG0MEphxKuWcXSQB0mCxzGRaAojcMztXu/utKYUiZysahin0pp+h08fHHVNHqgv1Vt
 8yeSf7mKnm46mlDw1lCIYMCI/HGnSi328RzbH9X5DppGykIaZSMTo6yeiaCxWXDlKklb
 Ff/QbMxGM2tbiToERbO/aAuPfjp2xz0o+ZvL6i4c2xLQBVUkzDGjhkSDQL5UFxGdHetT
 PtyiQ7XnEI2bnxyLFc6mfTWlsoh687ArADEXGCkICwvq+d0bw4XBHonHSPR1jWKmVdKg
 F1zfkIN8CZm/ZhyCao/WDbIFBST8uWOy3n1cdXRv3a8GWuiAj15++w8CW6siCnf9yBnh
 k8Jw==
MIME-Version: 1.0
X-Received: by 10.14.1.7 with SMTP id 7mr492203eec.41.1368205869800; Fri, 10
 May 2013 10:11:09 -0700 (PDT)
Received: by 10.14.118.12 with HTTP; Fri, 10 May 2013 10:11:09 -0700 (PDT)
In-Reply-To: <313A2353F5864A008B0EA050D52AC789@erratique.ch>
References: <5WRK1WTA-CFLT-K2D2-HI4C-UBS0MHNSFIAY@cs.ucy.ac.cy>
 <5189B929.2030808@riken.jp>
 <CAE1DttARsrCZTF4FPj5Hzu1tjFiMEqj94rgYzFqfTacmLo5B+w@mail.gmail.com>
 <F510569F0D0C4C20909DBE5AB732DFD5@erratique.ch>
 <CAE1DttDjV7TPyJbHEi37_77su39-LkdtZiQ=utv9mFQBcmdRMw@mail.gmail.com>
 <B6E4B1B39BFF47FBB5BAFF66F0415A1A@erratique.ch>
 <CAE1DttBuONKQQa7xcxPZ9Vnjj=HtUjgUf5bEnQk1bGLwcNmhkw@mail.gmail.com>
 <313A2353F5864A008B0EA050D52AC789@erratique.ch>
Date: Fri, 10 May 2013 11:11:09 -0600
Message-ID: <CAN=ouMQCTiwzbWSW+3if6kyg3Q=e_c3mLMdcP2QBqPufgex-SA@mail.gmail.com>
From: Anthony Tavener <anthony.tavener@gmail.com>
To: =?ISO-8859-1?Q?Daniel_B=FCnzli?= <daniel.buenzli@erratique.ch>
Content-Type: multipart/alternative; boundary=047d7b66f717d9945104dc6040df
Cc: ocaml-opengl <opengl@lists.ocaml.org>, Caml List <caml-list@inria.fr>
Subject: Re: [ocaml-opengl] [Caml-list] standard 3d vector library in OCaml
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 10 May 2013 17:01:17 -0000

--047d7b66f717d9945104dc6040df
Content-Type: text/plain; charset=windows-1252
Content-Transfer-Encoding: quoted-printable

I've found that using a module prefix in combination with short (single
letter) labels in mathematical contexts works very well. It strikes a
balance of succinctness-in-use with enough verbosity to establish context.
So I like Daniel's field names. :) They also correspond to shading language
field designations. Before local module-opens I would avoid such names
because opening more than one module would almost guarantee a conflict. Now
I only open a few "prevasives"-like modules and use local-opens liberally.



On Fri, May 10, 2013 at 11:01 AM, Daniel B=FCnzli <daniel.buenzli@erratique=
.ch
> wrote:

>
>
> Le vendredi, 10 mai 2013 =E0 16:48, Florent Monnier a =E9crit :
>
> > A very good link, thanks a lot!
> > There's a huge amount of content, could you share which you think
> > would be the more interesting for reuse in OCaml?
>
> I think each of them serve different purpose (e.g. computational
> trade-offs on embedded platforms) that's the reason why these things are
> best left outside gg for now.
>
> > It seems logic to me to do it the way you've made it.
> > I would only comment that if you add Sizes, BBoxes, then why not also
> > bounding-cirlces / bounding-spheres, complete math for geometry with
> > points, lines, planes, etc. (distances, intersections, projections,
> > etc.)
>
> I don't plan to integrate these things, no pull requests please. At a
> certain point I was planning to but it was becoming unwieldy -- remnant o=
f
> these ideas can be seen in the tmp/ directory of the first commit. Gg
> provides you with the essentials to do 2D or 3D computer graphics. Sizes
> and rectangles are ubiquitous: viewports, image extents, etc. and that's
> the reason they are in. More general computational geometry tools are bes=
t
> left to another dedicated library.
>
> > The internal representations for vectors and points are not public,
> > which would imply to integrate these inside your module.
>
> Regarding the internal representation I still have to think about what I
> will do. Gg is designed to interoperate with C so that means that the
> representation will be cast in stone anyways.
>
> > Maybe a compromise could be found,
> > between one letter function names:
> >
> > Size3.w
> > Size3.h
> > Size3.d
> >
> > and complete names:
> >
> > Size3.width
> > Size3.height
> > Size3.depth
> >
> > could be 3 letters abbreviations:
> >
> > Size3.wid
> > Size3.hei
> > Size3.dep
>
> Well, no=85 it's horrible to read, hard to remember and inconsistent: if =
you
> look at all the other vector types in Gg their coordinate accessors all
> have a single letter V2.{x,y}, P2.{x,y}, V3.{x,y,z}, P3.{x,y,z},
> V4.{x,y,z,w}, Color.{r,g,b,a}, Quat.{x,y,z,w}. Having Size2.{w,h} and
> Size3.{w,h,d} feels natural.
>
> > I would recommend not to assume that everyone share the same cognition
> > and tastes than you.
>
> I certainly don't assume that. I do however program and design to my
> taste, not by consensus or compromise.
>
> Best,
>
> Daniel
>
>
> _______________________________________________
> OpenGL mailing list
> OpenGL@lists.ocaml.org
> http://lists.ocaml.org/listinfo/opengl
>

--047d7b66f717d9945104dc6040df
Content-Type: text/html; charset=windows-1252
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">I&#39;ve found that using a module prefix in combination w=
ith short (single letter) labels in mathematical contexts works very well. =
It strikes a balance of succinctness-in-use with enough verbosity to establ=
ish context. So I like Daniel&#39;s field names. :) They also correspond to=
 shading language field designations. Before local module-opens I would avo=
id such names because opening more than one module would almost guarantee a=
 conflict. Now I only open a few &quot;prevasives&quot;-like modules and us=
e local-opens liberally.<div>
<br></div></div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quot=
e">On Fri, May 10, 2013 at 11:01 AM, Daniel B=FCnzli <span dir=3D"ltr">&lt;=
<a href=3D"mailto:daniel.buenzli@erratique.ch" target=3D"_blank">daniel.bue=
nzli@erratique.ch</a>&gt;</span> wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><br>
<br>
Le vendredi, 10 mai 2013 =E0 16:48, Florent Monnier a =E9crit :<br>
<div class=3D"im"><br>
&gt; A very good link, thanks a lot!<br>
&gt; There&#39;s a huge amount of content, could you share which you think<=
br>
&gt; would be the more interesting for reuse in OCaml?<br>
<br>
</div>I think each of them serve different purpose (e.g. computational trad=
e-offs on embedded platforms) that&#39;s the reason why these things are be=
st left outside gg for now.<br>
<div class=3D"im"><br>
&gt; It seems logic to me to do it the way you&#39;ve made it.<br>
&gt; I would only comment that if you add Sizes, BBoxes, then why not also<=
br>
&gt; bounding-cirlces / bounding-spheres, complete math for geometry with<b=
r>
&gt; points, lines, planes, etc. (distances, intersections, projections,<br=
>
&gt; etc.)<br>
<br>
</div>I don&#39;t plan to integrate these things, no pull requests please. =
At a certain point I was planning to but it was becoming unwieldy -- remnan=
t of these ideas can be seen in the tmp/ directory of the first commit. Gg =
provides you with the essentials to do 2D or 3D computer graphics. Sizes an=
d rectangles are ubiquitous: viewports, image extents, etc. and that&#39;s =
the reason they are in. More general computational geometry tools are best =
left to another dedicated library.<br>

<div class=3D"im"><br>
&gt; The internal representations for vectors and points are not public,<br=
>
&gt; which would imply to integrate these inside your module.<br>
<br>
</div>Regarding the internal representation I still have to think about wha=
t I will do. Gg is designed to interoperate with C so that means that the r=
epresentation will be cast in stone anyways.<br>
<div class=3D"im"><br>
&gt; Maybe a compromise could be found,<br>
&gt; between one letter function names:<br>
&gt;<br>
&gt; Size3.w<br>
&gt; Size3.h<br>
&gt; Size3.d<br>
&gt;<br>
&gt; and complete names:<br>
&gt;<br>
&gt; Size3.width<br>
&gt; Size3.height<br>
&gt; Size3.depth<br>
&gt;<br>
&gt; could be 3 letters abbreviations:<br>
&gt;<br>
&gt; Size3.wid<br>
&gt; Size3.hei<br>
&gt; Size3.dep<br>
<br>
</div>Well, no=85 it&#39;s horrible to read, hard to remember and inconsist=
ent: if you look at all the other vector types in Gg their coordinate acces=
sors all have a single letter V2.{x,y}, P2.{x,y}, V3.{x,y,z}, P3.{x,y,z}, V=
4.{x,y,z,w}, Color.{r,g,b,a}, Quat.{x,y,z,w}. Having Size2.{w,h} and Size3.=
{w,h,d} feels natural.<br>

<div class=3D"im"><br>
&gt; I would recommend not to assume that everyone share the same cognition=
<br>
&gt; and tastes than you.<br>
<br>
</div>I certainly don&#39;t assume that. I do however program and design to=
 my taste, not by consensus or compromise.<br>
<br>
Best,<br>
<br>
Daniel<br>
<div class=3D"HOEnZb"><div class=3D"h5"><br>
<br>
_______________________________________________<br>
OpenGL mailing list<br>
<a href=3D"mailto:OpenGL@lists.ocaml.org">OpenGL@lists.ocaml.org</a><br>
<a href=3D"http://lists.ocaml.org/listinfo/opengl" target=3D"_blank">http:/=
/lists.ocaml.org/listinfo/opengl</a><br>
</div></div></blockquote></div><br></div>

--047d7b66f717d9945104dc6040df--

From monnier.florent@gmail.com  Fri Jul 19 22:11:18 2013
Return-Path: <monnier.florent@gmail.com>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-32.csi.cam.ac.uk (ppsw-32.csi.cam.ac.uk [131.111.8.132])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 7D2BF3C382
 for <opengl@lists.ocaml.org>; Fri, 19 Jul 2013 22:11:18 +0100 (BST)
X-Cam-SpamDetails: score 0.6 from SpamAssassin-3.3.2-1504391 
 * -0.7 RCVD_IN_DNSWL_LOW RBL: Sender listed at http://www.dnswl.org/, low
 *      trust
 *      [209.85.212.174 listed in list.dnswl.dnsbl.ja.net]
 *  0.0 FREEMAIL_FROM Sender email is commonly abused enduser mail provider
 *       (monnier.florent[at]gmail.com)
 *  0.0 DKIM_ADSP_CUSTOM_MED No valid author signature, adsp_override is
 *      CUSTOM_MED
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
 *  1.2 NML_ADSP_CUSTOM_MED ADSP custom_med hit, and not from a mailing
 *      list
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail-wi0-f174.google.com ([209.85.212.174]:34519)
 by ppsw-32.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.146]:25)
 with esmtp id 1V0IAf-0001T0-1w (Exim 4.80_167-5a66dd3) for
 opengl@lists.ocaml.org
 (return-path <monnier.florent@gmail.com>); Fri, 19 Jul 2013 22:25:02 +0100
Received: by mail-wi0-f174.google.com with SMTP id k10so245173wiv.1
 for <opengl@lists.ocaml.org>; Fri, 19 Jul 2013 14:25:01 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:date:message-id:subject:from:to:content-type;
 bh=D9lE2/Hz82oX+bGK1RzM7zD+sqDy2KazLVCEf148OlI=;
 b=dF8o8W5UPbkJNUVLR0K4FKq6yIwcr0e6I5TTFImZVqIS0SC2iLaTJS/3NJPU2B8rdc
 FgoP6tBsPM7Ouw+6AlUnYm6ufFx8+Mc8OrTLYFSbM1Jib3k479aqUEw1f3kdlC7/ubCr
 0FvEeaZdrPowgJajlCXdNPbBvET3dKgROfkdgJGfSf6C3/8dNr4K6Xkxo5g6P69IAUgL
 WAZjjOIOqXNNAO2LfiglSUdGeAZrlKqCWW8s+XUcrk+9sIHLMST9JWUDgpDe6IqqPYOF
 krXb5Aj13ARZHJmUeg+js37i3feUtMLmfVLlm4jI8iE3YOZiqEf0k84Wvr56zzG78H9+
 ewDw==
MIME-Version: 1.0
X-Received: by 10.194.242.134 with SMTP id wq6mr13133910wjc.94.1374269101221; 
 Fri, 19 Jul 2013 14:25:01 -0700 (PDT)
Received: by 10.194.153.73 with HTTP; Fri, 19 Jul 2013 14:25:01 -0700 (PDT)
Date: Fri, 19 Jul 2013 23:25:01 +0200
Message-ID: <CAE1DttA-rGbt_fJvAKMy64q-BWHM8S=kAO4dWPOKJU93CFgkHQ@mail.gmail.com>
From: Florent Monnier <monnier.florent@gmail.com>
To: ocaml-opengl <opengl@lists.ocaml.org>
Content-Type: text/plain; charset=ISO-8859-1
Subject: [ocaml-opengl] which structure for the ideal project ?
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Fri, 19 Jul 2013 21:11:18 -0000

Hi,

I've not made any OpenGL over the last year (only 2D), but I'm planing
to make some 3D again soon, so I'm wondering how to make things evolve
in the right direction, and I would like to get opinions about it.

So I've started a new experimentation almost from scratch, and before
to go further too much I would like to validate or invalidate my
choices, based on your opinions about it.

* the gl-enums use polymorphic variants
why?
- standard variant are more efficient but the difference is so small
that it can be considered negligeable.
- polymorphic variants makes it more easy for version handling (see below)
- possibility to remove dependencies from different modules.
- using standard variants require that some are module packed (cf
glMLite) and this is ugly and tedious

* the gl-enums are wrapped using a pattern matching on the ocaml side
and only an int is send to C stub
why?
- the C stub is then the same for every version (see below for version handling)
- the C stub is simpler, only Int_val() to convert every gl-enum
- more things managed on the ocaml side, means simpler code
- people comfotable with ocaml but not C can more easily modify the code
- see [REF-1] at the end of this email for an example of code

* each OpenGL C function stub is in its own C file
why?
- more easy to choose which set of functions we want to use (see
version handling below)
- split code in small files, easier to find a single function, or
evetually make alternative versions for testing purposes.

* each ocaml external function also in its own file
why?
- version sets also easy to generate from it (see version handling below)
- also easy to have alternative versions for testing purposes
- for example for glBegin we have func_glBegin.{ml,mli} and func_glBegin_stub.c

* two ocaml interfaces are provided,
 one with LablGL's functions style, and
 one with native OpenGL functions names (like in glMLite and GLcaml)
 (I call the first one the Labeled interface, because it's similar to LablGL)
 (I call the second one the Garrys's interface,
  I offer an orange from organic farming for the one who guess why)
why?
- some people prefer the LablGL style, some people prefer native
OpenGL functions style,
  so how to choose ? just don't choose, take them both to make everyone happy.
- this is not an issue, the C stub is the same for both, and the way
gl-enums are managed makes it easy to

* one module for each OpenGL version,
  GL11 provides all the function set and gl-enums from OpenGL version 1.1,
  GL21 for OGL 2.1, GL33 for 3.3, and ES1, ES2, and so on...
why?
- Then we know exactly where we are.
- what if I want my program to work with both OGL 2.1 and OGL 3.3 ?
see next point

* we may generate modules that are intersection sets between 2 or more
OpenGL versions
why?
- we also know exactly where we are, we're writing for target that may
use OGL 2.1 or 3.3
- what if I want a very large version target (even every OGL version)
? see next point

# If I want my program to work for large target, from OGL 1.1 up to 4.1
  then I just write several implementations, one with the fixed
pipeline for old computers,
  and one with modern style VBO+GLSL, in each implementation we are
sure of which
  functions we use because we only open the matching module :
open GL11
or
open GL33
  then at run-time we can test which version of opengl is running
  and select the right implementation

* to generate each module version, we use an over simple script,
  with over simple input data.
why?
- because we love KISS programming
- please no XML hell when not needed
- see [REF-2] at the end of this email for an example of input data
- we generate each version module with the set of functions that
matches this input
- generating each gl-enum is also quite straight foreward
- if very KISS everyone, even beginners, can modify it
- input data that can be shared with other projects (REF-2 is actually
taken from
  another project, but only contains functions, gl-enums still have to be added)

* we use a wrangler lib by default, even on Linux.
why?
- because for portability with MS/Windows we have to
- even on Linux it's better to. glMLite chooses an OpenGL version at
compile time,
  it's lame for packaging purpose where when the package is compiled
we don't know yet
  which OGL version will be on the target computer where the package
will finally
  be installed and run.
  It was quite OK to do so until recently, because most people were
using OGL 2.1 for a while,
  but now more and more people will use more modern versions.
  So we now need to go further.

* so which wrangler lib? glew?
http://www.opengl.org/wiki/OpenGL_Loading_Library
http://rastergrid.com/blog/2010/03/sad-facts-about-opengl-extension-libraries/
I'm not sure which to use, glew seems to be the most used and adviced,
but as long as I know there is no perfect one that has all the advantages.
Each has its pros and cons, advantages and drawbacks.
Last time I browsed about opengl wrangler libs comparisions was maybe
more than one year ago. I don't know if the situation has evolved nowaday.
/ Maybe the project should make it switchable at compile time,
so each user can decide which suits the best his/her needs.
The default recommanded for Linux packaging could be glew.
The default for people who don't know and who are compiling the
sources could be SDL2.
- currently my experimentation uses SDL2 wrangling mechanism
why?
- so that I'm using only one single lib, for windowing/user input, and
  for OGL wrangling (and even for pure 2D), and even sound
- SDL2 provides everything we need, even the OpenGL headers.
- SDL2 is very portable (should we even say a portability Heaven?)
even if still a devel version (oops no now RC), compiles out of the box on both
Linux and Cygwin (and probably the same for most used environments)
On cygwin compiles out of the box even with MingW's toolchain
(just do export CC="/bin/i686-w64-mingw32-gcc" before ./configure and make)

* should the OpenGL bindings provide highier level things?
(like memory management, or anykind of abstraction or simplification)
In my opinion no. Or at least not at the base modules.
why?
IMHO the functions should be useable at their low-level level, and so
the project should only relay the opengl functions calls IMO.
- But building other modules on top of the lowlevel ones or next to it
could be a good idea IMO.
  (like I tryed in glmlite with FunGL, and Ogl_draw / Ogl_matrix)

* How to manage buffers?
/ BAs?
/ Strings?
/ Arrays?
/ LablGL's Raw?
/ any other suggestions?
pros and cons :
- BA: nice for the absence of any dependency,
  but in glMLite I get segfault with buffers that comes from mapped memory
  BAs are very slow to alloc and finalise, which is an issue if
  we want to do it between two frames at runtime.
- Strings: I haven't tried yet, but I seriously envisage this option
  also nice for absence of dependency for interactions with other components
  storing 16bits/32bits ints / floats in it could still be easily
managed with a dedicated module
  Strings are faster to alloc and finalise than BAs.
- Arrays: not possible, we need 32 bits floats not doubles,
  also not possible for ints of various size and even mini-floats
- a dedicated module like LablGL's Raw,
  we could tailor it for what we need,
  but IMHO it should be a separated project for the dependency removing
  of other components that would have to interoperate with it.
  Other projects like pure 2D things could also use such a project.
- the opengl functions that would need buffer management could also be
  isolated in a separated modules and then different options could be
written and tried.
  (which is why in glmlite VertArray and VBO modules were separated
from the main module,
   thinking that I could try something else than BAs later (which i never did)
   but is it a good idea?)
so:
I really don't know what would be the best option(s), maybe Raw or strings,
but for strings would need to try and experiment with it to get a
better opinion,
and to see if we don't have segfaults like with BAs with video mapped memory.
Or if we provide several options, is it a good idea? How to integrate the
alternatives together with the other functions? Sub-modules? or different .cma?
or suffixes?

* Which type for matrices?
I personally prefer using float arrays like I do in glMLite.
why?
- this is highly comfortable to not have any dependency
@ but I do understand people willing other kind of types,
  as i would like to make something that other people would
  want to use, i would like to get the more opinions possible
  to see what most people think about it, and maybe try to
  please the majority

* which type for vectors, points, colors?
I personally prefer tuples like I now do in all my modules.
why?
- this is highly comfortable to not have any dependency
- but idem than for matrices (the @ point)

* Which license?
- If I continue this experimentation further to make it reach a usable
state it would be a liberal license.
- but MIT, BSD, zlib/png are even not simple enough for me,
  I still don't like their conditions and restrictions that I think are useless.
- I'm thinking to use this one below that is zlib with its restriction removed:
"""
This software is provided "AS-IS", without any express or implied
warranty.  In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely.
"""
I still don't like the use of the word "software" which excludes the
documentations, eventually not clear about the tests (strictly
speaking it's not part of the software), and also exclude images that
could be joined for testing purpose. An image is not software.
I talked about it with Richard Jones (about another piece of code) who
strongly discourages me to use a non standard license.
What are your opinions about it?
Would license options be an acceptable solution?
like in this project:
https://github.com/blue-prawn/ocaml-xlib/blob/master/README.txt
see the sections "LICENSE" and "ALTERNATIVE LICENSES" in the README file.

* which build tool?
/ make?
/ ocamlbuild?
/ ocp-build?
- none
why?
- not really none, I just mean I'm thinking it could be managed in
separated projects,
like a set of Makefile that would share the same directory hierarchy,
like the sources of Mesa do,
so that tarballs could be untared in the same place a produce a
consistent source directory ready to be build.
Would be easier to deprecate a build if it's outside of the main project,
but I'm not sure I want to use something else than make yet.

------

If you have any comments, opinions, advices, suggestions, critics,
trolls, crazy ideas about all this, please share!
Even if you have completely other ideas about what should be the ideal
ocaml-opengl bindings, I would appreciate to hear about it.

Also notice that if I don't take webgl into considarations, it's only
because I've not started to learn it yet, so I know nothing about it
yet.
If you have ideas about if and how it should be taken into account
into a bindings for desktop programs, please feel free to talk about
it.


=== REF SAMPLES ===

[REF-1] :

>From the .ml part :

type gl_enum = Gl_enum.t

(* each gl-enums will be (eventually) different in each module version,
   in module GL21 `GL_QUADS, `GL_QUAD_STRIP and `GL_POLYGON
   will be there but not in GL32.
   And GL33 and GL41 will have additional ones:
   `GL_LINES_ADJACENCY
   `GL_LINE_STRIP_ADJACENCY
   `GL_TRIANGLES_ADJACENCY
   `GL_TRIANGLE_STRIP_ADJACENCY
   So each gl-enum would be generated accordingly for each version module *)
type primitive = [
  | `GL_POINTS
  | `GL_LINES
  | `GL_LINE_LOOP
  | `GL_LINE_STRIP
  | `GL_TRIANGLES
  | `GL_TRIANGLE_STRIP
  | `GL_TRIANGLE_FAN
  | `GL_QUADS  (** deprecated in core profile *)
  | `GL_QUAD_STRIP  (** deprecated in core profile *)
  | `GL_POLYGON  (** deprecated in core profile *)
  | `GL_LINES_ADJACENCY  (** new in 3.3 and 4.1 *)
  | `GL_LINE_STRIP_ADJACENCY  (** new in 3.3 and 4.1 *)
  | `GL_TRIANGLES_ADJACENCY  (** new in 3.3 and 4.1 *)
  | `GL_TRIANGLE_STRIP_ADJACENCY  (** new in 3.3 and 4.1 *)
  ]

let int_of_primitive = function
  | `GL_POINTS          -> Gl_enum.gl_points
  | `GL_LINES           -> Gl_enum.gl_lines
  | `GL_LINE_LOOP       -> Gl_enum.gl_line_loop
  | `GL_LINE_STRIP      -> Gl_enum.gl_line_strip
  | `GL_TRIANGLES       -> Gl_enum.gl_triangles
  | `GL_TRIANGLE_STRIP  -> Gl_enum.gl_triangle_strip
  | `GL_TRIANGLE_FAN    -> Gl_enum.gl_triangle_fan
  | `GL_QUADS           -> Gl_enum.gl_quads
  | `GL_QUAD_STRIP      -> Gl_enum.gl_quad_strip
  | `GL_POLYGON         -> Gl_enum.gl_polygon

external glBegin : gl_enum -> unit = "caml_glBegin" "noalloc"
let glBegin prim =
  glBegin (int_of_primitive prim)

let bit_of_clear_buffer = function
  | `GL_COLOR_BUFFER      -> Gl_enum.gl_color_buffer_bit
  | `GL_DEPTH_BUFFER      -> Gl_enum.gl_depth_buffer_bit
  | `GL_ACCUM_BUFFER      -> Gl_enum.gl_accum_buffer_bit
  | `GL_STENCIL_BUFFER    -> Gl_enum.gl_stencil_buffer_bit

let enum_lor = Gl_enum.(lor)

let int_of_clear_buffer lst =
  List.fold_left (fun mask v ->
    enum_lor mask (bit_of_clear_buffer v)
  ) Gl_enum.zero lst

external glClear : gl_enum -> unit = "caml_glClear" "noalloc"
let glClear buffers =
  glClear (int_of_clear_buffer buffers)


>From .mli part :

val glBegin : primitive -> unit
val glClear : clear_buffer list -> unit

cat gl_funcs/stub_glBegin.c

CAMLprim value
caml_glBegin(value prim)
{
    glBegin(Long_val(prim));
    return Val_unit;
}

cat gl_funcs/stub_glClear.c

CAMLprim value
caml_glClear(value mask)
{
    glClear(Int_val(mask));
    return Val_unit;
}

>From the Labeled interface :
- module GlClear :

type shape = [
  | `points
  | `lines
  | `line_loop
  | `line_strip
  | `triangles
  | `triangle_strip
  | `triangle_fan
  | `quads
  | `quad_strip
  | `polygon
  ]

let int_of_shape = function
  | `points           -> Gl_enum.gl_points
  | `lines            -> Gl_enum.gl_lines
  | `line_loop        -> Gl_enum.gl_line_loop
  | `line_strip       -> Gl_enum.gl_line_strip
  | `triangles        -> Gl_enum.gl_triangles
  | `triangle_strip   -> Gl_enum.gl_triangle_strip
  | `triangle_fan     -> Gl_enum.gl_triangle_fan
  | `quads            -> Gl_enum.gl_quads
  | `quad_strip       -> Gl_enum.gl_quad_strip
  | `polygon          -> Gl_enum.gl_polygon

external begins : gl_enum -> unit = "caml_glBegin" "noalloc"
let begins shape =
  begins (int_of_shape shape)

- module GlDraw :

let bit_of_clear_buffer = function
  | `color      -> Gl_enum.gl_color_buffer_bit
  | `depth      -> Gl_enum.gl_depth_buffer_bit
  | `accum      -> Gl_enum.gl_accum_buffer_bit
  | `stencil    -> Gl_enum.gl_stencil_buffer_bit

let int_of_clear_buffer lst =
  List.fold_left (fun mask v ->
    enum_lor mask (bit_of_clear_buffer v)
  ) Gl_enum.zero lst

external clear : gl_enum -> unit = "caml_glClear" "noalloc"
let clear buffers =
  clear (int_of_clear_buffer buffers)


>From file gl_enum.ml :
(* this file not generated, because gl-enums values never change *)
(* this file just reformated from C to ocaml code from the GL.h header
   with some interactive regexps in vim *)

type t = int

let ( lor ) = ( lor )
let zero = 0

(* Primitives *)
let gl_points                         = 0x0000
let gl_lines                          = 0x0001
let gl_line_loop                      = 0x0002
let gl_line_strip                     = 0x0003
let gl_triangles                      = 0x0004
let gl_triangle_strip                 = 0x0005
let gl_triangle_fan                   = 0x0006
let gl_quads                          = 0x0007
let gl_quad_strip                     = 0x0008
let gl_polygon                        = 0x0009


>From file gl_enum.mli :

type t

val ( lor ) : t -> t -> t

val zero : t

val gl_points : t
val gl_lines : t
val gl_line_loop : t
val gl_line_strip : t
val gl_triangles : t
val gl_triangle_strip : t
val gl_triangle_fan : t
val gl_quads : t
val gl_quad_strip : t
val gl_polygon : t


[REF-2] :

glAccum                               1.1  1.3  .    2.1  .    .    .
glBegin                               1.1  1.3  .    2.1  .    .    .
glBindFramebuffer                     .    .    .    .    3.3  4.1  es2
glClipPlanef                          1.1  1.3  es1  2.1  .    .    .
GL_QUADS                              1.1  1.3  es1  2.1  3.3  4.1  es2
GL_TRIANGLE_STRIP_ADJACENCY           .    .    .    .    3.3  4.1  ?

-- 
Best Regards
Florent

From edwin+ml-ocaml@etorok.net  Sat Jul 20 10:57:19 2013
Return-Path: <edwin+ml-ocaml@etorok.net>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-42.csi.cam.ac.uk (ppsw-mx-f.csi.cam.ac.uk [131.111.8.149])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 375D73C2FE
 for <opengl@lists.ocaml.org>; Sat, 20 Jul 2013 10:57:19 +0100 (BST)
X-Cam-SpamDetails: score 0.8 from SpamAssassin-3.3.2-1504803 
 *  1.1 DKIM_ADSP_ALL No valid author signature, domain signs all mail
 * -0.4 RP_MATCHES_RCVD Envelope sender domain matches handover relay
 *      domain
 *  0.1 DKIM_SIGNED Message has a DKIM or DK signature, not necessarily
 *      valid
 *  0.0 T_DKIM_INVALID DKIM-Signature header exists but is not valid
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail.etorok.net ([176.9.138.55]:50504)
 by ppsw-42.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.149]:25)
 with esmtp id 1V0U7z-0002dw-7U (Exim 4.80_167-5a66dd3) for
 opengl@lists.ocaml.org
 (return-path <edwin+ml-ocaml@etorok.net>); Sat, 20 Jul 2013 11:11:05 +0100
Received: from [172.30.42.2] (unknown [79.114.62.166])
 (using TLSv1 with cipher ECDHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.etorok.net (Postfix) with ESMTPSA id 6E36646D8
 for <opengl@lists.ocaml.org>; Sat, 20 Jul 2013 12:11:02 +0200 (CEST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=etorok.net;
 s=mailout; t=1374315062;
 bh=kwre99wf6s+5dmBoxTr/nnVWfxyTfO7b0uHEYpZIRTk=; l=28332;
 h=Date:From:To:References:In-Reply-To:From;
 b=ezxYpFbYA6Be9CsgJCglX/JjfSipIG50TcZ/puyVr34+6BuMga6BNA/LptTL6yt0Z
 tajyV6iht+J+i016+gPcoLGdlaJ6ZxXQadqUfuepYTN34TF+KS22h7/LqjUd/YGnTv
 yA3iA6c13gqCJQv6uCUw7FNmNBuRB0TRxXMcaPRM=
Message-ID: <51EA6235.5000709@etorok.net>
Date: Sat, 20 Jul 2013 13:11:01 +0300
From: =?ISO-8859-1?Q?T=F6r=F6k_Edwin?= <edwin+ml-ocaml@etorok.net>
User-Agent: Mozilla/5.0 (X11; Linux x86_64;
 rv:17.0) Gecko/20130630 Icedove/17.0.7
MIME-Version: 1.0
To: opengl@lists.ocaml.org
References: <CAE1DttA-rGbt_fJvAKMy64q-BWHM8S=kAO4dWPOKJU93CFgkHQ@mail.gmail.com>
In-Reply-To: <CAE1DttA-rGbt_fJvAKMy64q-BWHM8S=kAO4dWPOKJU93CFgkHQ@mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
X-Virus-Scanned: clamav-milter 0.97.8 at mail
X-Virus-Status: Clean
Subject: Re: [ocaml-opengl] which structure for the ideal project ?
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sat, 20 Jul 2013 09:57:19 -0000

On 07/20/2013 12:25 AM, Florent Monnier wrote:
> Hi,
> 
> I've not made any OpenGL over the last year (only 2D), but I'm planing
> to make some 3D again soon, so I'm wondering how to make things evolve
> in the right direction, and I would like to get opinions about it.
> 
> So I've started a new experimentation almost from scratch, and before
> to go further too much I would like to validate or invalidate my
> choices, based on your opinions about it.

Thanks for the very detailed plan. See below for some comments, but note
that I haven't developed any real OpenGL application in OCaml, beyond some simple tests/toy applications, and the one that I've done in C was more than 10 years ago, so take it with a grain of salt :)

> 
> * the gl-enums use polymorphic variants
> why?
> - standard variant are more efficient but the difference is so small
> that it can be considered negligeable.
> - polymorphic variants makes it more easy for version handling (see below)
> - possibility to remove dependencies from different modules.
> - using standard variants require that some are module packed (cf
> glMLite) and this is ugly and tedious
> 
> * the gl-enums are wrapped using a pattern matching on the ocaml side
> and only an int is send to C stub
> why?
> - the C stub is then the same for every version (see below for version handling)
> - the C stub is simpler, only Int_val() to convert every gl-enum
> - more things managed on the ocaml side, means simpler code
> - people comfotable with ocaml but not C can more easily modify the code
> - see [REF-1] at the end of this email for an example of code

Keep in mind that extensions can add new enums for both parameters and returned values.
At least for the returned values it'd probably be good to have an `Unknown of int, just in case
the user has a newer OpenGL version, or an extension we don't know about.
Similarly for the return values we should include all enums allowed for that field by OpenGL versions/extensions that we know about, even if we haven't checked for their presence. I'm thinking mostly about texture format queries, etc.

> 
> * each OpenGL C function stub is in its own C file
> why?
> - more easy to choose which set of functions we want to use (see
> version handling below)
> - split code in small files, easier to find a single function, or
> evetually make alternative versions for testing purposes.

This also makes it easier to handle some OpenGL 3.x+ vs 2.x differences, like gl3.h.
But if you use some wrangler lib (or do it on your own), then perhaps we don't need that anyway.

> 
> * each ocaml external function also in its own file
> why?
> - version sets also easy to generate from it (see version handling below)
> - also easy to have alternative versions for testing purposes
> - for example for glBegin we have func_glBegin.{ml,mli} and func_glBegin_stub.c

These will all be automatically generated, right?

> 
> * two ocaml interfaces are provided,
>  one with LablGL's functions style, and
>  one with native OpenGL functions names (like in glMLite and GLcaml)
>  (I call the first one the Labeled interface, because it's similar to LablGL)
>  (I call the second one the Garrys's interface,
>   I offer an orange from organic farming for the one who guess why)
> why?
> - some people prefer the LablGL style, some people prefer native
> OpenGL functions style,
>   so how to choose ? just don't choose, take them both to make everyone happy.
> - this is not an issue, the C stub is the same for both, and the way
> gl-enums are managed makes it easy to

I like the idea of choice (same for the BA vs Raw discussion below), and that one shouldn't
duplicate all the work of creating a new OpenGL binding just to support a different style.

> 
> * one module for each OpenGL version,
>   GL11 provides all the function set and gl-enums from OpenGL version 1.1,
>   GL21 for OGL 2.1, GL33 for 3.3, and ES1, ES2, and so on...
> why?
> - Then we know exactly where we are.
> - what if I want my program to work with both OGL 2.1 and OGL 3.3 ?
> see next point
> 
> * we may generate modules that are intersection sets between 2 or more
> OpenGL versions
> why?
> - we also know exactly where we are, we're writing for target that may
> use OGL 2.1 or 3.3
> - what if I want a very large version target (even every OGL version)
> ? see next point

A useful intersection might be OGL 2.1 without all functions/enums deprecated/removed in OGL3+.

> 
> # If I want my program to work for large target, from OGL 1.1 up to 4.1
>   then I just write several implementations, one with the fixed
> pipeline for old computers,
>   and one with modern style VBO+GLSL, in each implementation we are
> sure of which
>   functions we use because we only open the matching module :
> open GL11
> or
> open GL33
>   then at run-time we can test which version of opengl is running
>   and select the right implementation
> 
> * to generate each module version, we use an over simple script,
>   with over simple input data.
> why?
> - because we love KISS programming
> - please no XML hell when not needed
> - see [REF-2] at the end of this email for an example of input data
> - we generate each version module with the set of functions that
> matches this input
> - generating each gl-enum is also quite straight foreward
> - if very KISS everyone, even beginners, can modify it
> - input data that can be shared with other projects (REF-2 is actually
> taken from
>   another project, but only contains functions, gl-enums still have to be added)

There is a text format .spec here (based on the ones from opengl.org) that might be easier to process than XML:
https://bitbucket.org/alfonse/gl-xml-specs/src/3c6936f1636fe3cb9cc0b4edea76dda6a22c5504/glspecs/enum.spec?at=default
https://bitbucket.org/alfonse/gl-xml-specs/src/3c6936f1636fe3cb9cc0b4edea76dda6a22c5504/glspecs?at=default

Although opengl.org has deprecated the text .spec files (so they won't get updated
for future versions/extensions) in favour of the XML registry:
https://cvs.khronos.org/svn/repos/ogl/trunk/doc/registry/public/api/

If we go with some other format, then you should probably use one that is shared with another C wrangler lib to: avoid duplication of effort, find bugs more easily.

> 
> * we use a wrangler lib by default, even on Linux.
> why?
> - because for portability with MS/Windows we have to
> - even on Linux it's better to. glMLite chooses an OpenGL version at
> compile time,
>   it's lame for packaging purpose where when the package is compiled
> we don't know yet
>   which OGL version will be on the target computer where the package
> will finally
>   be installed and run.
>   It was quite OK to do so until recently, because most people were
> using OGL 2.1 for a while,
>   but now more and more people will use more modern versions.
>   So we now need to go further.
> 
> * so which wrangler lib? glew?
> http://www.opengl.org/wiki/OpenGL_Loading_Library
> http://rastergrid.com/blog/2010/03/sad-facts-about-opengl-extension-libraries/
> I'm not sure which to use, glew seems to be the most used and adviced,
> but as long as I know there is no perfect one that has all the advantages.
> Each has its pros and cons, advantages and drawbacks.
> Last time I browsed about opengl wrangler libs comparisions was maybe
> more than one year ago. I don't know if the situation has evolved nowaday.
> / Maybe the project should make it switchable at compile time,
> so each user can decide which suits the best his/her needs.
> The default recommanded for Linux packaging could be glew.

I remember that it was quite easy for glew to crash with a null-pointer dereference on Nvidia if you enabled glewExperimental, which you needed to if you wanted some newer opengl version/extensions.
The situation might've improved lately, I don't use my Nvidia card anymore so I can't tell.
Also it is a quite widely used lib, so we might as well report bugs upstream when we encounter problems with it.

For a minimal, portable opengl platform interface: glfw.org.
It has glfwExtensionSupported, glfwGetProcAddress, glfwGetVersion only, and it is quite easy
to cross compile it (version 2 at least, haven't tried version 3 yet).
But your OCaml OpenGL library needs to know which extension has which functions/enums anyway,
so might as well do the "wrangling" itself.
Another argument in favor of doing wrangling in the OCaml lib is that you'll be more consistent,
and avoid problems when your wrangler lib supports a newer version that you don't support yet,
or doesn't support the version/extension that you want (perhaps because it is a system library
that wasn't updated).

If you'd use ocaml-ctypes then this would be a nice fit, although thats perhaps a bit too unsafe.

Another alternative is gl_load from glsdk, it has per-opengl-version includes:
http://glsdk.sourceforge.net/docs/html/group__module__glload.html

> The default for people who don't know and who are compiling the
> sources could be SDL2.
> - currently my experimentation uses SDL2 wrangling mechanism
> why?
> - so that I'm using only one single lib, for windowing/user input, and
>   for OGL wrangling (and even for pure 2D), and even sound
> - SDL2 provides everything we need, even the OpenGL headers.
> - SDL2 is very portable (should we even say a portability Heaven?)
> even if still a devel version (oops no now RC), compiles out of the box on both
> Linux and Cygwin (and probably the same for most used environments)
> On cygwin compiles out of the box even with MingW's toolchain
> (just do export CC="/bin/i686-w64-mingw32-gcc" before ./configure and make)

Sounds good.

> 
> * should the OpenGL bindings provide highier level things?
> (like memory management, or anykind of abstraction or simplification)
> In my opinion no. Or at least not at the base modules.
> why?
> IMHO the functions should be useable at their low-level level, and so
> the project should only relay the opengl functions calls IMO.
> - But building other modules on top of the lowlevel ones or next to it
> could be a good idea IMO.
>   (like I tryed in glmlite with FunGL, and Ogl_draw / Ogl_matrix)


I think there are four aspects to a higher level "thing":

1. Safe (or "debug" mode)

One thing I like about glMLite is that it has a separate type (like shader_object, texture_id)
for things that would just be an int on the C side.
This could allow to detect double-frees if some extra data would be associated with them
(perhaps only in a debug mode), and certainly prevents mixing different object types by accident.

Perhaps there could be such a higher-level "safe" module built on top of the low-level "unsafe" module.
With VBOs, etc. you no longer have to call glColor/glVertex a million times, so the performance overhead of a few additional checks per OpenGL call might be worth it.
I wouldn't mind if only the "safe" module was available though.

Initially I thought abut automatically calling glGetError, but with ARB_debug_output that is not really
necessary.

2. Convenience functions

Setting up a FBO is a PITA with the low-level calls as you need some 10+ calls, having a sane/simple interface for that would be nice.

And there are a few other things, for example SRGB surface support:
Some drivers support getting a visual with SRGB (ehrm, the closed-source ones), some only support it for a FBO (Mesa). And then you need like 3 or 4 variants:
 * use SRGB visual if available
 * use FBO with SRGB if available, render everything to that, and blit to main buffer
 * just use a shader with the necessary (perhaps simplified) SRGB calculation
 * use a (3D) texture to do some more advanced color correction and don't use the SRGB acceleration at all

And see above in my comments for automatic shader choice based on runtime OpenGL version / extensions.

3. Math functions (i.e. Ogl_matrix, vectors, matrixes, quaternions)

Not really OpenGL specific stuff, so perhaps all the necessary math stuff could go into an independent lib
(like Gg).

4. A functional interface

OpenGL is inherently imperative with a focus on setting, changing and keeping track of state.
It is necessary for a binding to provide that interface, to allow reusing knowledge from tutorials, other languages, etc.
A little improvement would be something like Batteries' with_file_in, i.e. with_shader_object, etc. to prevent resource leaks.
It would be hard to make the rest of the API more "functional" style, I think the only sane option would be something like a scenegraph, where you describe your world, how to render it, what shaders, extensions to use, etc. i.e. something similar to OpenSceneGraph but without binding to that lib.
But that could be a completely separate library from these bindings. (In fact it has to be separate
at least at the ocamlfind level).

> 
> * How to manage buffers?
> / BAs?
> / Strings?
> / Arrays?
> / LablGL's Raw?
> / any other suggestions?
> pros and cons :
> - BA: nice for the absence of any dependency,
>   but in glMLite I get segfault with buffers that comes from mapped memory

Bug in C binding, OpenGL driver, or something else? Would it be worth tracking down the root cause?

>   BAs are very slow to alloc and finalise, which is an issue if
>   we want to do it between two frames at runtime.
> - Strings: I haven't tried yet, but I seriously envisage this option
>   also nice for absence of dependency for interactions with other components
>   storing 16bits/32bits ints / floats in it could still be easily
> managed with a dedicated module
>   Strings are faster to alloc and finalise than BAs.

Strings are moved by the GC though, so the C lib would need to make a copy for functions
that would use the buffer beyond the call itself.

> - Arrays: not possible, we need 32 bits floats not doubles,
>   also not possible for ints of various size and even mini-floats
> - a dedicated module like LablGL's Raw,
>   we could tailor it for what we need,
>   but IMHO it should be a separated project for the dependency removing
>   of other components that would have to interoperate with it.
>   Other projects like pure 2D things could also use such a project.
> - the opengl functions that would need buffer management could also be
>   isolated in a separated modules and then different options could be
> written and tried.
>   (which is why in glmlite VertArray and VBO modules were separated
> from the main module,
>    thinking that I could try something else than BAs later (which i never did)
>    but is it a good idea?)
> so:
> I really don't know what would be the best option(s), maybe Raw or strings,
> but for strings would need to try and experiment with it to get a
> better opinion,
> and to see if we don't have segfaults like with BAs with video mapped memory.
> Or if we provide several options, is it a good idea? How to integrate the
> alternatives together with the other functions? Sub-modules? or different .cma?
> or suffixes?
> 
> * Which type for matrices?
> I personally prefer using float arrays like I do in glMLite.
> why?
> - this is highly comfortable to not have any dependency
> @ but I do understand people willing other kind of types,
>   as i would like to make something that other people would
>   want to use, i would like to get the more opinions possible
>   to see what most people think about it, and maybe try to
>   please the majority
> 
> * which type for vectors, points, colors?
> I personally prefer tuples like I now do in all my modules.
> why?
> - this is highly comfortable to not have any dependency
> - but idem than for matrices (the @ point)
> 
> * Which license?
> - If I continue this experimentation further to make it reach a usable
> state it would be a liberal license.
> - but MIT, BSD, zlib/png are even not simple enough for me,
>   I still don't like their conditions and restrictions that I think are useless.
> - I'm thinking to use this one below that is zlib with its restriction removed:
> """
> This software is provided "AS-IS", without any express or implied
> warranty.  In no event will the authors be held liable for any damages
> arising from the use of this software.
> 
> Permission is granted to anyone to use this software for any purpose,
> including commercial applications, and to alter it and redistribute it
> freely.
> """
> I still don't like the use of the word "software" which excludes the
> documentations, eventually not clear about the tests (strictly
> speaking it's not part of the software),

Each source file should have a copyright header, then it'll be clear that the tests
have the same license as the rest of the library. You can put a notice in the documentation's appendix
about its license, but see MIT license below which includes documentation explicitly.

> and also exclude images that
> could be joined for testing purpose. An image is not software.

I think you could have a README or LICENSE file in the directory of the images that explicitly states
that all images in that directory are under the <license-of-main-library>.
Then you could freely insert those images into the documentation, etc.

> I talked about it with Richard Jones (about another piece of code) who
> strongly discourages me to use a non standard license.
> What are your opinions about it?

Please use a standard license, it'll make it easier for future contributors and users of the library
(they don't need to worry about possible issues introduced by a non-standard license).
http://opensource.org/licenses/MIT
http://opensource.org/licenses/ISC
http://opensource.org/licenses/BSD-2-Clause

> Would license options be an acceptable solution?
> like in this project:
> https://github.com/blue-prawn/ocaml-xlib/blob/master/README.txt
> see the sections "LICENSE" and "ALTERNATIVE LICENSES" in the README file.

IMHO it would only complicate things and create confusion, since you want to use an already liberal license. I wouldn't go beyond dual-licensing anyway.
FWIW in the places that I worked we were allowed to link/embed BSD/MIT/Apache-licensed code in commercial software without any problems.

> 
> * which build tool?
> / make?
> / ocamlbuild?g
> / ocp-build?
> - none
> why?
> - not really none, I just mean I'm thinking it could be managed in
> separated projects,
> like a set of Makefile that would share the same directory hierarchy,
> like the sources of Mesa do,
> so that tarballs could be untared in the same place a produce a
> consistent source directory ready to be build.
> Would be easier to deprecate a build if itg's outside of the main project,
> but I'm not sure I want to use something else than make yet.

You could have an oasis-based build, and a Makefile.custom for your custom makefile.

> 
> ------
> 
> If you have any comments, opinions, advices, suggestions, critics,
> trolls, crazy ideas about all this, please share!
> Even if you have completely other ideas about what should be the ideal
> ocaml-opengl bindings, I would appreciate to hear about it.

See above for comments.
Some things that are missing and would be nice to have:
 * tests for at least the major OpenGL APIs, some of them could be automatically generated.
The idea is that you could run the tests to ensure it doesn't crash due to a bad prototype,
on various platforms with various drivers. 
Also on Linux I'd very much like to have a testsuite that I could run under valgrind to find subtle
bugs.

 * tests for extensions would be very much needed, to at least test that we don't crash due to a NULL dereference somewhere (if you automatically generate the bindings, then such checks could automatically be 
added to raise an exception instead).

 * version testing mode

Allow faking a lower OpenGL version, and removing extensions that are not core for a test mode.
Say I got an OpenGL 3.1 driver, and I want the lib to fake OpenGL 2.1 and not expose anything newer
(including functions, shader language, extensions, etc.).
This would allow to do some basic testing on the same machine to ensure that the application would
work with older OpenGL versions (perhaps by turning off effects that require newer extensions).
(Of course its not a replacement for testing with an older OpenGL implementation on another platform).

 * managing shader versions

You probably need different shaders for OpenGL 3.x/2.x, and since the shader source usually has a #version and #extension anyway we could manage that automatically, depending on what you have available.
This would also interact nicely with the version testing mode above!

Something like:
 val choose_shader_source: OGL.context -> string list -> shader_object

 * modules for extensions
I like the idea of modules per OpenGL versions. We should have something similar for extensions, although there are some restrictions. Some extensions are part of 3.0 core module, or are not compatible with 3.0 and shouldn't be used there. So perhaps the OGL_2_1 module could have submodules with all allowed extensions (that we know of). Same for the other versions.

And you should be allowed to call functions from an extension only *after* you've checked that it is available. I was thinking of a dummy type, but maybe it is too inconvenient
module type Foo = sig
type present = private unit
val check : OGL.context -> present option
val func1 : present -> ...parameters
...
end

So maybe we should use first-class modules:
module OGL_2_1
...
val ext_Foo : OGL.context -> (module FooSig) option
val ext_Bar : OGL.context -> (module BarSig) option

And internally it'd be like:

let ext_Foo context =
 if has_extension context "Foo" then
  Some (module Foo_impl : FooSig)
 
Of course if someone wants to shoot themselves in the foot they can use Foo_impl directly in an unsafe way.

> 
> Also notice that if I don't take webgl into considarations, it's only
> because I've not started to learn it yet, so I know nothing about it
> yet.
> If you have ideas about if and how it should be taken into account
> into a bindings for desktop programs, please feel free to talk about
> it.
> 
> 
> === REF SAMPLES ===
> 
> [REF-1] :
> 
> From the .ml part :
> 
> type gl_enum = Gl_enum.t
> 
> (* each gl-enums will be (eventually) different in each module version,
>    in module GL21 `GL_QUADS, `GL_QUAD_STRIP and `GL_POLYGON
>    will be there but not in GL32.
>    And GL33 and GL41 will have additional ones:
>    `GL_LINES_ADJACENCY
>    `GL_LINE_STRIP_ADJACENCY
>    `GL_TRIANGLES_ADJACENCY
>    `GL_TRIANGLE_STRIP_ADJACENCY
>    So each gl-enum would be generated accordingly for each version module *)
> type primitive = [
>   | `GL_POINTS
>   | `GL_LINES
>   | `GL_LINE_LOOP
>   | `GL_LINE_STRIP
>   | `GL_TRIANGLES
>   | `GL_TRIANGLE_STRIP
>   | `GL_TRIANGLE_FAN
>   | `GL_QUADS  (** deprecated in core profile *)
>   | `GL_QUAD_STRIP  (** deprecated in core profile *)
>   | `GL_POLYGON  (** deprecated in core profile *)
>   | `GL_LINES_ADJACENCY  (** new in 3.3 and 4.1 *)
>   | `GL_LINE_STRIP_ADJACENCY  (** new in 3.3 and 4.1 *)
>   | `GL_TRIANGLES_ADJACENCY  (** new in 3.3 and 4.1 *)
>   | `GL_TRIANGLE_STRIP_ADJACENCY  (** new in 3.3 and 4.1 *)
>   ]
> 
> let int_of_primitive = function
>   | `GL_POINTS          -> Gl_enum.gl_points
>   | `GL_LINES           -> Gl_enum.gl_lines
>   | `GL_LINE_LOOP       -> Gl_enum.gl_line_loop
>   | `GL_LINE_STRIP      -> Gl_enum.gl_line_strip
>   | `GL_TRIANGLES       -> Gl_enum.gl_triangles
>   | `GL_TRIANGLE_STRIP  -> Gl_enum.gl_triangle_strip
>   | `GL_TRIANGLE_FAN    -> Gl_enum.gl_triangle_fan
>   | `GL_QUADS           -> Gl_enum.gl_quads
>   | `GL_QUAD_STRIP      -> Gl_enum.gl_quad_strip
>   | `GL_POLYGON         -> Gl_enum.gl_polygon
> 
> external glBegin : gl_enum -> unit = "caml_glBegin" "noalloc"
> let glBegin prim =
>   glBegin (int_of_primitive prim)
> 
> let bit_of_clear_buffer = function
>   | `GL_COLOR_BUFFER      -> Gl_enum.gl_color_buffer_bit
>   | `GL_DEPTH_BUFFER      -> Gl_enum.gl_depth_buffer_bit
>   | `GL_ACCUM_BUFFER      -> Gl_enum.gl_accum_buffer_bit
>   | `GL_STENCIL_BUFFER    -> Gl_enum.gl_stencil_buffer_bit
> 
> let enum_lor = Gl_enum.(lor)
> 
> let int_of_clear_buffer lst =
>   List.fold_left (fun mask v ->
>     enum_lor mask (bit_of_clear_buffer v)
>   ) Gl_enum.zero lst
> 
> external glClear : gl_enum -> unit = "caml_glClear" "noalloc"
> let glClear buffers =
>   glClear (int_of_clear_buffer buffers)
> 
> 
> From .mli part :
> 
> val glBegin : primitive -> unit
> val glClear : clear_buffer list -> unit
> 
> cat gl_funcs/stub_glBegin.c
> 
> CAMLprim value
> caml_glBegin(value prim)
> {
>     glBegin(Long_val(prim));
>     return Val_unit;
> }
> 
> cat gl_funcs/stub_glClear.c
> 
> CAMLprim value
> caml_glClear(value mask)
> {
>     glClear(Int_val(mask));
>     return Val_unit;
> }
> 
> From the Labeled interface :
> - module GlClear :
> 
> type shape = [
>   | `points
>   | `lines
>   | `line_loop
>   | `line_strip
>   | `triangles
>   | `triangle_strip
>   | `triangle_fan
>   | `quads
>   | `quad_strip
>   | `polygon
>   ]
> 
> let int_of_shape = function
>   | `points           -> Gl_enum.gl_points
>   | `lines            -> Gl_enum.gl_lines
>   | `line_loop        -> Gl_enum.gl_line_loop
>   | `line_strip       -> Gl_enum.gl_line_strip
>   | `triangles        -> Gl_enum.gl_triangles
>   | `triangle_strip   -> Gl_enum.gl_triangle_strip
>   | `triangle_fan     -> Gl_enum.gl_triangle_fan
>   | `quads            -> Gl_enum.gl_quads
>   | `quad_strip       -> Gl_enum.gl_quad_strip
>   | `polygon          -> Gl_enum.gl_polygon
> 
> external begins : gl_enum -> unit = "caml_glBegin" "noalloc"
> let begins shape =
>   begins (int_of_shape shape)
> 
> - module GlDraw :
> 
> let bit_of_clear_buffer = function
>   | `color      -> Gl_enum.gl_color_buffer_bit
>   | `depth      -> Gl_enum.gl_depth_buffer_bit
>   | `accum      -> Gl_enum.gl_accum_buffer_bit
>   | `stencil    -> Gl_enum.gl_stencil_buffer_bit
> 
> let int_of_clear_buffer lst =
>   List.fold_left (fun mask v ->
>     enum_lor mask (bit_of_clear_buffer v)
>   ) Gl_enum.zero lst
> 
> external clear : gl_enum -> unit = "caml_glClear" "noalloc"
> let clear buffers =
>   clear (int_of_clear_buffer buffers)
> 
> 
> From file gl_enum.ml :
> (* this file not generated, because gl-enums values never change *)
> (* this file just reformated from C to ocaml code from the GL.h header
>    with some interactive regexps in vim *)
> 
> type t = int
> 
> let ( lor ) = ( lor )
> let zero = 0
> 
> (* Primitives *)
> let gl_points                         = 0x0000
> let gl_lines                          = 0x0001
> let gl_line_loop                      = 0x0002
> let gl_line_strip                     = 0x0003
> let gl_triangles                      = 0x0004
> let gl_triangle_strip                 = 0x0005
> let gl_triangle_fan                   = 0x0006
> let gl_quads                          = 0x0007
> let gl_quad_strip                     = 0x0008
> let gl_polygon                        = 0x0009
> 
> 
> From file gl_enum.mli :
> 
> type t
> 
> val ( lor ) : t -> t -> t
> 
> val zero : t
> 
> val gl_points : t
> val gl_lines : t
> val gl_line_loop : t
> val gl_line_strip : t
> val gl_triangles : t
> val gl_triangle_strip : t
> val gl_triangle_fan : t
> val gl_quads : t
> val gl_quad_strip : t
> val gl_polygon : t
> 
> 
> [REF-2] :
> 
> glAccum                               1.1  1.3  .    2.1  .    .    .
> glBegin                               1.1  1.3  .    2.1  .    .    .
> glBindFramebuffer                     .    .    .    .    3.3  4.1  es2
> glClipPlanef                          1.1  1.3  es1  2.1  .    .    .
> GL_QUADS                              1.1  1.3  es1  2.1  3.3  4.1  es2
> GL_TRIANGLE_STRIP_ADJACENCY           .    .    .    .    3.3  4.1  ?
> 


From anil@recoil.org  Sat Jul 20 11:07:58 2013
Return-Path: <anil@recoil.org>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-33.csi.cam.ac.uk (ppsw-33.csi.cam.ac.uk [131.111.8.133])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTP id 7C28F3C2FE
 for <opengl@lists.ocaml.org>; Sat, 20 Jul 2013 11:07:58 +0100 (BST)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1504803
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from recoil.dh.bytemark.co.uk ([89.16.177.154]:11234
 helo=dark.recoil.org)
 by ppsw-33.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with smtp id 1V0UIK-0005iu-g6 (Exim 4.80_167-5a66dd3) for
 opengl@lists.ocaml.org
 (return-path <anil@recoil.org>); Sat, 20 Jul 2013 11:21:44 +0100
Received: (qmail 12399 invoked by uid 634); 20 Jul 2013 10:21:43 -0000
X-Spam-Level: *
X-Spam-Status: No, hits=-1.0 required=5.0
	tests=ALL_TRUSTED
X-Spam-Check-By: dark.recoil.org
Received: from host81-149-212-230.in-addr.btopenworld.com (HELO [10.0.1.36])
 (81.149.212.230)
 (smtp-auth username remote@recoil.org, mechanism cram-md5)
 by dark.recoil.org (qpsmtpd/0.84) with ESMTPA; Sat, 20 Jul 2013 11:21:42 +0100
Content-Type: text/plain; charset=iso-8859-1
Mime-Version: 1.0 (Mac OS X Mail 6.3 \(1503\))
From: Anil Madhavapeddy <anil@recoil.org>
In-Reply-To: <51EA6235.5000709@etorok.net>
Date: Sat, 20 Jul 2013 11:21:41 +0100
Content-Transfer-Encoding: quoted-printable
Message-Id: <B7684006-9028-4570-9BAA-E4BE6808D994@recoil.org>
References: <CAE1DttA-rGbt_fJvAKMy64q-BWHM8S=kAO4dWPOKJU93CFgkHQ@mail.gmail.com>
 <51EA6235.5000709@etorok.net>
To: =?iso-8859-1?Q?T=F6r=F6k_Edwin?= <edwin+ml-ocaml@etorok.net>,
 Jeremy Yallop <yallop@gmail.com>
X-Mailer: Apple Mail (2.1503)
X-Virus-Checked: Checked by ClamAV on dark.recoil.org
Cc: opengl@lists.ocaml.org
Subject: Re: [ocaml-opengl] which structure for the ideal project ?
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sat, 20 Jul 2013 10:07:58 -0000

On 20 Jul 2013, at 11:11, T=F6r=F6k Edwin <edwin+ml-ocaml@etorok.net> =
wrote:

> If you'd use ocaml-ctypes then this would be a nice fit, although =
thats perhaps a bit too unsafe.

We're working on adding C stub generation support into ctypes soon, =
which should the bindings safe with respect to being checked against the =
C header files, but with the benefits of still having the type =
descriptions available as values too.

It's not quite ready yet, but should be "soon".

-anil=

From daniel.buenzli@erratique.ch  Sun Jan  5 23:54:43 2014
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-52.csi.cam.ac.uk (ppsw-52.csi.cam.ac.uk [131.111.8.152])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 9821D3C52C
 for <opengl@lists.ocaml.org>; Sun,  5 Jan 2014 23:54:43 +0000 (GMT)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1555333
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:38439
 helo=smtp.webfaction.com)
 by ppsw-52.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.148]:25)
 with esmtp id 1Vzxt6-000828-FC (Exim 4.82_3-c0e5623) for
 opengl@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Mon, 06 Jan 2014 00:17:49 +0000
Received: from [172.20.10.2] (222-224.197-178.cust.bluewin.ch
 [178.197.224.222])
 by smtp.webfaction.com (Postfix) with ESMTP id 62DB22246430;
 Mon,  6 Jan 2014 00:17:46 +0000 (UTC)
Date: Mon, 6 Jan 2014 01:17:42 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: caml list <caml-list@inria.fr>, ocaml-opengl
 <opengl@lists.ocaml.org>
Message-ID: <B8E850098F1C441F83C2DAD32EB81344@erratique.ch>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Subject: [ocaml-opengl] OpenGL {3, 4} and OpenGL ES {2, 3} bindings,
	testers welcome.
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sun, 05 Jan 2014 23:54:43 -0000

Hello,

I made thin, low-level, ocaml-ctypes bindings to OpenGL 3.{2,3},
4.{0,1,2,3,4} and OpenGL ES {2,3}. They are automatically generated
from the offical XML representation of the OpenGL Registry [1].

These bindings are neither tested nor used and interfaces are still
subject to change. Testers are welcome; report any problems you may
encounter on github's infrastructure. Have a look at the readme to
understand how these libraries are structured:

  https://github.com/dbuenzli/tgls/blob/master/README.md#supported-opengl-versions

The documentation of the bindings is here:

  http://erratique.ch/software/tgls/doc/

To install (only tested on osx with OpenGL 3.2 and linux or raspberry 
pi with OpenGL ES 2 so far) you'll need `curl` and `xmlm` installed on 
your system. This is only for this pre-release, actual distribution will
have the generated bindings. Then:

  opam repo add erratique-u http://erratique.ch/software/opam/unreleased
  opam update && opam install xmlm tgls

Sample code (needs tsdl, `opam install tsdl`), is in the directory 
`opam config var tgls:doc`.

If you want to hack the source first have a read at:

  https://github.com/dbuenzli/tgls/blob/master/DEVEL.md 

then:

  git clone http://github.com/dbuenzli/tgls 
  cd tgls && ./build support && ./build trigl3.native && ./trigl3.native

A few notes:

* This time the cryptic acronym is [T]hin bindings to Open[GL] librarie[S].
  No need to waste everybody's time with alternate name suggestions:
  it won't change. 

* ocaml-ctypes was used as this was the shortest path to get the
  work done, using it should also solve the problem of getting the
  OpenGL function pointers. However the support for reading and making
  sense of the OpenGL registry being done, regular OCaml stubs could
  also be generated in the future if ctypes turns out to be a
  bottleneck.

* There's one OCaml library per major OpenGL release (which correspond
  to GPU hardware generations). Such a library has all the entry
  points and enumerants for supporting all the core (and only core)
  profiles of each minor releases of the major release. If you are
  programming with let's say 4.3 context it's your duty not to use a
  4.4 entry point/enumerant.

* I tried to include the C OpenGL libraries link flags in the OCaml ones
  so that OCamler's can just use the package with ocamlfind to
  build. Please report anything that may be missing. The current logic
  is as follows. On Darwin for tgl{3,4} we link against the OpenGL
  framework and nothing is done for tgles{2,3}. On linux pkg-config is
  used when packages can be found: gl for tgl{3,4}, glesv2 for tgles2
  and glesv3 (does that exist ?) for tgles3. Raspberry pi is like
  linux but tgles2 links to the pi's GLESv2 library located in
  /opt/vc/lib (would be nice from them to use pkg-config). 


* A single type represents all GLenums. Types for subsets could 
  be devised to enhance the signature/documentation of functions. This
  was not done for now since it seems the data from the registry is
  not clean/up to date (according to the registry's manual). However,
  the documentation links to the entry point's documentation and
  indicates the name of argument variables which should help to invoke
  the functions correctly (could have automatically derived labelled
  arguments but I thought that doing so systematically would result in
  a cumbersome API).

* The binding is very raw and can be unsafe. It could
  be made safer by either:

  1) Making more manual work, checking some bounds, automatically
     deriving some arguments for sizes. Doing that automatically in
     general is non trivial: for OpenGL 4.4 there are ~300 out of ~550
     entry points with pointer arguments, the registry has an
     attribute that should describe how the length of the pointer is
     to be determined but according to the registry's manual its
     syntax is poorely defined.

  2) Devising higher-level APIs that ensure type safety. 

  I tend to lean in favour of 2) OpenGL being so low-level and
  tiresome (rendering a colored triangle in "modern" OpenGL is a few
  hunderds of loc) that you'll anyway build an abstraction
  (a.k.a. rendering engine) on top of it.

* Binding generation is almost entirely automatic and type directed. 
  At the moment for OpenGL 4.4 there are only 7 out of 543 entry
  points that are manually devised. One thing that did require manual
  work though, was to enrich the registry information to indicate
  whenever null pointers can be specified for pointer arguments to map
  them to option types as the registry does unfortunately not specify that.

* There's no direct for support compatibility profiles or extensions. 
  Nowadays it's easy enough to use directly ocaml-ctypes (extensions
  usually add only a few entry points and/or enumerants). Alternatively 
  tgls' generation infrastructure could be used as the extensions are also 
  described in the registry but that may be overkill (some steps have been 
  done in that direction but it's not a priority right now for me).

I hope tgls can be a good starting point to get up to date OCaml
OpenGL bindings as work for supporting new versions should be minimal
provided they update the XML registry (which they should do since they
use it to generate the C headers). A first release will be done in a
few months, after the bindings will have been used a little bit by
myself. Meanwhile your feedback is welcome. 

Best,

Daniel

[1] http://www.opengl.org/registry/#specfiles



From daniel.buenzli@erratique.ch  Sun May 18 18:04:52 2014
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-41.csi.cam.ac.uk (ppsw-41.csi.cam.ac.uk [131.111.8.141])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 938A13C1AF
 for <opengl@lists.ocaml.org>; Sun, 18 May 2014 18:04:52 +0100 (BST)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1588424
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:49392
 helo=smtp.webfaction.com)
 by ppsw-41.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtp id 1Wm4zY-0002Nj-QG (Exim 4.82_3-c0e5623) for
 opengl@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Sun, 18 May 2014 18:35:20 +0100
Received: from [172.20.10.2] (71-236.197-178.cust.bluewin.ch [178.197.236.71])
 by smtp.webfaction.com (Postfix) with ESMTP id BD98D66EED2E;
 Sun, 18 May 2014 17:35:18 +0000 (UTC)
Date: Sun, 18 May 2014 19:35:19 +0200
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Caml-list <caml-list@inria.fr>, opengl@lists.ocaml.org
Message-ID: <4A9FB678604E4F2A83757044FD0E7317@erratique.ch>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Subject: [ocaml-opengl] [ANN] Tgls 0.8.0
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sun, 18 May 2014 17:04:52 -0000

Hello,  =20

I=E2=80=99d like to announce the first release of Tgls:

  Tgls is a set of independent OCaml libraries providing thin bindings
  to OpenGL libraries. It has support for core OpenGL 3.=7B2,3=7D and
  4.=7B0,1,2,3,4=7D and OpenGL ES =7B2,3=7D.

  Tgls depends on ocaml-ctypes and the C OpenGL library of your
  platform. It is distributed under the BSD3 license.

Home page: http://erratique.ch/software/tgls  =20
API Documentation: http://erratique.ch/software/tgls/doc

Information about OpenGL version coverage: =20
https://github.com/dbuenzli/tgls=23supported-opengl-versions

It should soon be available in opam.

Best,

Daniel

P.S. Some background information about the library can be found in this m=
essage:
https://sympa.inria.fr/sympa/arc/caml-list/2014-01/msg00008.html



From daniel.buenzli@erratique.ch  Mon May 19 00:04:48 2014
Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: opengl@lists.ocaml.org
Delivered-To: opengl@lists.ocaml.org
Received: from ppsw-41.csi.cam.ac.uk (ppsw-41.csi.cam.ac.uk [131.111.8.141])
 by ocaml-mx.ocamllabs.cl.cam.ac.uk (Postfix) with ESMTPS id 28B683C1AF
 for <opengl@lists.ocaml.org>; Mon, 19 May 2014 00:04:48 +0100 (BST)
X-Cam-SpamDetails: score 0.0 from SpamAssassin-3.3.2-1588424
X-Cam-ScannerInfo: http://www.ucs.cam.ac.uk/email/scanner/
Received: from mail6.webfaction.com ([74.55.86.74]:42556
 helo=smtp.webfaction.com)
 by ppsw-41.csi.cam.ac.uk (mx.cam.ac.uk [131.111.8.147]:25)
 with esmtp id 1WmAbs-0001kK-Ro (Exim 4.82_3-c0e5623) for
 opengl@lists.ocaml.org
 (return-path <daniel.buenzli@erratique.ch>); Mon, 19 May 2014 00:35:17 +0100
Received: from [172.20.10.2] (198-236.197-178.cust.bluewin.ch
 [178.197.236.198])
 by smtp.webfaction.com (Postfix) with ESMTP id 3A546212A249;
 Sun, 18 May 2014 23:35:14 +0000 (UTC)
Date: Mon, 19 May 2014 01:35:17 +0200
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Caml-list <caml-list@inria.fr>, opengl@lists.ocaml.org
Message-ID: <3B3D852867D84685A6E6A0F5ED5E1040@erratique.ch>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Subject: [ocaml-opengl] [ANN] Tsdl 0.8.0
X-BeenThere: opengl@lists.ocaml.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discuss OpenGL/WebGL and related technology support in OCaml
 <opengl.lists.ocaml.org>
List-Unsubscribe: <http://lists.ocaml.org/options/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=unsubscribe>
List-Archive: <http://lists.ocaml.org/pipermail/opengl/>
List-Post: <mailto:opengl@lists.ocaml.org>
List-Help: <mailto:opengl-request@lists.ocaml.org?subject=help>
List-Subscribe: <http://lists.ocaml.org/listinfo/opengl>,
 <mailto:opengl-request@lists.ocaml.org?subject=subscribe>
X-List-Received-Date: Sun, 18 May 2014 23:04:48 -0000

Hello, =20

I=E2=80=99d like to announce the first release of Tsdl:

  Tsdl is an OCaml library providing thin bindings to the cross-platform
  SDL C library.

  Tsdl depends on the SDL 2.0.1 C library (or later) and ocaml-ctypes. Ts=
dl
  is distributed under the BSD3 license.



Home page: http://erratique.ch/software/tsdl
API documentation: http://erratique.ch/software/tsdl/doc/Tsdl

It should be available in opam shortly.

Part of this work was made undercover while I was visiting OCaml Labs las=
t
summer, many thanks to them for their support. =20

Best,

Daniel

P.S. On macosx we still have some kind of unresolved spinning bug =5B1=5D=
 that seem to be due to an interaction
with libffi. It can be circumvented by using a compiler switch with this =
patch =5B2=5D (basically remove the =20
-no=5Fcompact=5Funwind option and add -w to silence the huge pile of warn=
ings that ensue).

=5B1=5D http://lists.ocaml.org/pipermail/ctypes/2014-=46ebruary/000066.ht=
ml
=5B2=5D https://gist.github.com/dbuenzli/9050340


