From mmatalka at gmail.com  Thu Mar 17 18:09:21 2016
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Thu, 17 Mar 2016 18:09:21 +0000
Subject: [ocaml-ctypes] Next release
Message-ID: <86poutvuwe.fsf@gmail.com>

Hello!

Is there a plan for the next release of Ctypes?  There are some pleasant
things in master I'd like in an official release, like exposing ssize_t
and time_t!

Thanks,
/Malcolm

From yallop at gmail.com  Fri Mar 18 06:47:10 2016
From: yallop at gmail.com (Jeremy Yallop)
Date: Fri, 18 Mar 2016 07:47:10 +0100
Subject: [ocaml-ctypes] Next release
In-Reply-To: <86poutvuwe.fsf@gmail.com>
References: <86poutvuwe.fsf@gmail.com>
Message-ID: <CAAxsn=G=SHAGkp6+461dPMkYXCpxeCrjJNwut=oPPOv=TYiXkA@mail.gmail.com>

On 17 March 2016 at 19:09, Malcolm Matalka <mmatalka at gmail.com> wrote:
> Is there a plan for the next release of Ctypes?  There are some pleasant
> things in master I'd like in an official release, like exposing ssize_t
> and time_t!

Indeed: I think it's about time for a release.  I'll look at releasing
0.5.0 some time next week.

From mmatalka at gmail.com  Fri Mar 18 09:01:06 2016
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Fri, 18 Mar 2016 09:01:06 +0000
Subject: [ocaml-ctypes] Next release
In-Reply-To: <CAAxsn=G=SHAGkp6+461dPMkYXCpxeCrjJNwut=oPPOv=TYiXkA@mail.gmail.com>
 (Jeremy Yallop's message of "Fri, 18 Mar 2016 07:47:10 +0100")
References: <86poutvuwe.fsf@gmail.com>
 <CAAxsn=G=SHAGkp6+461dPMkYXCpxeCrjJNwut=oPPOv=TYiXkA@mail.gmail.com>
Message-ID: <86lh5gw46l.fsf@gmail.com>

Jeremy Yallop <yallop at gmail.com> writes:

> On 17 March 2016 at 19:09, Malcolm Matalka <mmatalka at gmail.com> wrote:
>> Is there a plan for the next release of Ctypes?  There are some pleasant
>> things in master I'd like in an official release, like exposing ssize_t
>> and time_t!
>
> Indeed: I think it's about time for a release.  I'll look at releasing
> 0.5.0 some time next week.

Fantastic, thank you.

From yallop at gmail.com  Mon Mar 21 19:42:05 2016
From: yallop at gmail.com (Jeremy Yallop)
Date: Mon, 21 Mar 2016 19:42:05 +0000
Subject: [ocaml-ctypes] ANN: ocaml-ctypes 0.5.0,
 a library for calling C functions directly from OCaml
Message-ID: <CAAxsn=GhYA9fF=SEvPBco4fPA8_mfw=WgUP6PxoeNKC7qQ-16g@mail.gmail.com>

I'm pleased to announce release 0.5.0 of ocaml-ctypes, which is now
available on OPAM.

== About ocaml-ctypes ==

The ocaml-ctypes library makes it possible to call C functions from
OCaml without writing any C code.  The core of the library is a set of
combinators for describing C types -- scalars, functions, structs,
unions, arrays, and pointers to values and functions.  Type
descriptions can then be used to bind native functions and values.
Here's a simple example:

    # let puts = foreign "puts" (string @-> returning int);;
    val puts : string -> int = <fun>
    # puts "Hello, world!";;
    Hello, world!

Ctypes includes many more features, including functions for retrieving
constants, values and details about object layout from C, a way of
building C libraries from OCaml modules, and a variety of binding
strategies such as dynamic linking and static stub generation. Further
information is available at the links below:

  Tutorial: https://github.com/ocamllabs/ocaml-ctypes/wiki/ctypes-tutorial
  Examples: https://github.com/ocamllabs/ocaml-ctypes/tree/master/examples
  Some packages using ctypes:
http://opam.ocaml.org/packages/ctypes/ctypes.0.5.0/
  API documentation: http://ocamllabs.github.io/ocaml-ctypes/
  Github repository: https://github.com/ocamllabs/ocaml-ctypes
  Direct download:
https://github.com/ocamllabs/ocaml-ctypes/archive/0.5.0.tar.gz

== Selected new features in 0.5.0 ==

* Improved support for various standard C and POSIX integer types
  (time_t, ssize_t, ptrdiff_t, intptr_t, uint8_t, and many more).

* Improved support for conversions between function pointers and other
pointer types

* Support for releasing the runtime lock in the Cstubs_inverted module.

* An experimental interface for managing OCaml roots.

See the release notes for the full list of changes:

    https://github.com/ocamllabs/ocaml-ctypes/blob/0.5.0/CHANGES.md

== Thanks ==

I'm grateful to Andreas Hauptmann, David Sheets, Etienne Millon,
Goswin von Brederlow, Leonid Rozenberg, @orbitz, Max Mouratov, and
Peter Zotov for contributions to this release.

From sp at orbitalfox.com  Tue Mar 22 10:12:57 2016
From: sp at orbitalfox.com (sp at orbitalfox.com)
Date: Tue, 22 Mar 2016 10:12:57 +0000
Subject: [ocaml-ctypes] [Caml-list] ANN: ocaml-ctypes 0.5.0,
 a library for calling C functions directly from OCaml
In-Reply-To: <CAAxsn=GhYA9fF=SEvPBco4fPA8_mfw=WgUP6PxoeNKC7qQ-16g@mail.gmail.com>
References: <CAAxsn=GhYA9fF=SEvPBco4fPA8_mfw=WgUP6PxoeNKC7qQ-16g@mail.gmail.com>
Message-ID: <20160322101257.GB29459@Razor>

On Mon, Mar 21, 2016 at 07:42:05PM +0000, Jeremy Yallop wrote:
> I'm pleased to announce release 0.5.0 of ocaml-ctypes, which is now
> available on OPAM.

Great work, thank you!

Are there areny plans to support C++ in a similar approach?

-- 
	SP

From yallop at gmail.com  Tue Mar 22 11:08:15 2016
From: yallop at gmail.com (Jeremy Yallop)
Date: Tue, 22 Mar 2016 11:08:15 +0000
Subject: [ocaml-ctypes] [Caml-list] ANN: ocaml-ctypes 0.5.0,
 a library for calling C functions directly from OCaml
In-Reply-To: <20160322101257.GB29459@Razor>
References: <CAAxsn=GhYA9fF=SEvPBco4fPA8_mfw=WgUP6PxoeNKC7qQ-16g@mail.gmail.com>
 <20160322101257.GB29459@Razor>
Message-ID: <CAAxsn=HJ5C7Kh82YnmG9Eh-j0e-Cy1wdcV98YwGBf+Xm_mU+Yg@mail.gmail.com>

On 22 March 2016 at 10:12,  <sp at orbitalfox.com> wrote:
> On Mon, Mar 21, 2016 at 07:42:05PM +0000, Jeremy Yallop wrote:
>> I'm pleased to announce release 0.5.0 of ocaml-ctypes, which is now
>> available on OPAM.
>
> Great work, thank you!
>
> Are there areny plans to support C++ in a similar approach?

It'd be possible to support some of C++ fairly straightforwardly.  For
example, binding overloaded functions should work with the current
ctypes release if you use stub generation (i.e. the Cstubs module),
and calling function templates will probably work too.  It'd be a bit
more work to support exceptions and member functions, but it could
probably be done.  C++ support is not currently high up on the
priority list, but I'd be happy to help out if someone wanted to start
looking at a design.

From yallop at gmail.com  Wed Mar 23 11:02:15 2016
From: yallop at gmail.com (Jeremy Yallop)
Date: Wed, 23 Mar 2016 11:02:15 +0000
Subject: [ocaml-ctypes] Dropping OCaml 4.00.* support
Message-ID: <CAAxsn=EYMDSW9APWujOMeAMqwUVcZbuhTEBXin=_DmnWmmJ5kA@mail.gmail.com>

At some point, possibly before the next release, I'd like to drop
support for OCaml 4.00.* from ctypes.  If this would cause you
significant inconvenience, please speak up, either in this thread, or
on the issue tracker:

    https://github.com/ocamllabs/ocaml-ctypes/issues/369

From mmatalka at gmail.com  Thu Mar 31 09:18:18 2016
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Thu, 31 Mar 2016 08:18:18 +0000
Subject: [ocaml-ctypes] noalloc optimization?
Message-ID: <86poubawmt.fsf@gmail.com>

I just read https://blogs.janestreet.com/faster-ocaml-to-c-calls/ and am
wondering if noalloc is supported in Ctypes.  I looked around the API
documentation a bit and didn't see it but probably missed it.

/Malcolm

From yallop at gmail.com  Thu Mar 31 09:55:32 2016
From: yallop at gmail.com (Jeremy Yallop)
Date: Thu, 31 Mar 2016 09:55:32 +0100
Subject: [ocaml-ctypes] noalloc optimization?
In-Reply-To: <86poubawmt.fsf@gmail.com>
References: <86poubawmt.fsf@gmail.com>
Message-ID: <CAAxsn=GArEzN1=0W7kMbimJO85yCsZQ85maZjmKifL9t1sdBxA@mail.gmail.com>

On 31 March 2016 at 09:18, Malcolm Matalka <mmatalka at gmail.com> wrote:
> I just read https://blogs.janestreet.com/faster-ocaml-to-c-calls/ and am
> wondering if noalloc is supported in Ctypes.  I looked around the API
> documentation a bit and didn't see it but probably missed it.

All the machinery necessary to support noalloc is in place, but it's
not currently switched on because of a difficulty involving callbacks
from C into OCaml.  See the comment here for details:

    https://github.com/ocamllabs/ocaml-ctypes/blob/935d5a11/src/cstubs/cstubs_generate_ml.ml#L107-L113

So the only piece remaining before we flip the switch to start
generating code with noalloc is a small piece of interface design.

There's also an issue open to track the feature:

    https://github.com/ocamllabs/ocaml-ctypes/issues/132

