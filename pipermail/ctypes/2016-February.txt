From yallop at gmail.com  Sat Feb 20 22:56:39 2016
From: yallop at gmail.com (Jeremy Yallop)
Date: Sat, 20 Feb 2016 22:56:39 +0000
Subject: [ocaml-ctypes] ocaml-ctypes 0.4.2 released
Message-ID: <CAAxsn=HeuvA7vCwh11sKuRMK_2brFkOCRC=VnBdV-BW36R4QAQ@mail.gmail.com>

ocaml-ctypes 0.4.2 is now available via OPAM.  It's a bug-fix release
which fixes a problem with callbacks into OCaml that re-acquire the
runtime lock while multiple threads are running.  If you're using
Foreign.funptr with the ~runtime_lock argument then I recommend
upgrading.

From yallop at gmail.com  Sun Feb 28 00:56:37 2016
From: yallop at gmail.com (Jeremy Yallop)
Date: Sun, 28 Feb 2016 00:56:37 +0000
Subject: [ocaml-ctypes] [Caml-list] ctypes - Advice for binding big
	structs?
In-Reply-To: <86ziulheva.fsf@gmail.com>
References: <86ziulheva.fsf@gmail.com>
Message-ID: <CAAxsn=GHFANVfrPsLVH8qD0+JswvykF4-Pfp2jseXE_NvhMj1Q@mail.gmail.com>

Dear Malcolm,

On 28/02/2016, Malcolm Matalka <mmatalka at gmail.com> wrote:
> I have a large/complex struct I am trying to create bindings for
> operations on it in Ocaml.  I have an API that tells me how many bytes
> the struct is so I can allocate it just fine and pass it around to C
> functions I've bound with ctypes.  But some data in it is accessed via
> members.  I started implementing a structure in ctypes for it, but it's
> getting large and awkward.  Are there any best practices around doing
> this?

The best approach is to use the Cstubs_structs module, which allows
you to declare just the parts of the structs that you need to access
in your program, and which generates code that uses the C struct
declarations to work out sizes, alignments, field offsets, etc.  The
basic API is the familiar set of functions "structure", "field" and
"seal" from the Ctypes module, but the build process is a little more
involved.  However, in return for the more complex build, all the
issues that you're concerned about are addressed.

The Cstubs_structs API is not yet very well documented, but there's a
brief guide with examples in the pull request that introduced it:

   https://github.com/ocamllabs/ocaml-ctypes/pull/62

> Some concerns I have:
>
> - It seems fragile - a different version of the library might have
>   different members in the struct so keeping my ocaml code in-synch
>   seems error prone.

The Cstubs_structs module addresses this by using generated C code to
determine the offsets of fields each time you build your library.

> - It's annoying because the struct has a lot of members I don't care
>   about in my case.  I only want access to a few members that have
>   important details.

Since Cstubs_structs retrieves layout rather than computing it you
only need to declare the members that you care about.

> - The struct is large with lots of types that I don't necessarily want
>   to create so creating the struct becomes somewhat awkward.  If I know
>   the size of the types I might be able to pretend it's an array of N
>   chars or something instead of trying to implement the type just to
>   fill out this struct, but I don't know if that is valid.

Again, since Cstubs_structs retrieves struct layout and alignment
information from C, you can use Ctypes.make to create struct values,
even if you haven't declared all the fields.

Kind regards,

Jeremy.

From mmatalka at gmail.com  Sun Feb 28 19:10:21 2016
From: mmatalka at gmail.com (Malcolm Matalka)
Date: Sun, 28 Feb 2016 19:10:21 +0000
Subject: [ocaml-ctypes] [Caml-list] ctypes - Advice for binding big
	structs?
In-Reply-To: <CAAxsn=GHFANVfrPsLVH8qD0+JswvykF4-Pfp2jseXE_NvhMj1Q@mail.gmail.com>
 (Jeremy Yallop's message of "Sun, 28 Feb 2016 00:56:37 +0000")
References: <86ziulheva.fsf@gmail.com>
 <CAAxsn=GHFANVfrPsLVH8qD0+JswvykF4-Pfp2jseXE_NvhMj1Q@mail.gmail.com>
Message-ID: <86si0chcrm.fsf@gmail.com>

Jeremy Yallop <yallop at gmail.com> writes:

> Dear Malcolm,
>
> On 28/02/2016, Malcolm Matalka <mmatalka at gmail.com> wrote:
>> I have a large/complex struct I am trying to create bindings for
>> operations on it in Ocaml.  I have an API that tells me how many bytes
>> the struct is so I can allocate it just fine and pass it around to C
>> functions I've bound with ctypes.  But some data in it is accessed via
>> members.  I started implementing a structure in ctypes for it, but it's
>> getting large and awkward.  Are there any best practices around doing
>> this?
>
> The best approach is to use the Cstubs_structs module, which allows
> you to declare just the parts of the structs that you need to access
> in your program, and which generates code that uses the C struct
> declarations to work out sizes, alignments, field offsets, etc.  The
> basic API is the familiar set of functions "structure", "field" and
> "seal" from the Ctypes module, but the build process is a little more
> involved.  However, in return for the more complex build, all the
> issues that you're concerned about are addressed.
>
> The Cstubs_structs API is not yet very well documented, but there's a
> brief guide with examples in the pull request that introduced it:
>
>    https://github.com/ocamllabs/ocaml-ctypes/pull/62
>

Great, with some small modifications this worked like a charm.


>> Some concerns I have:
>>
>> - It seems fragile - a different version of the library might have
>>   different members in the struct so keeping my ocaml code in-synch
>>   seems error prone.
>
> The Cstubs_structs module addresses this by using generated C code to
> determine the offsets of fields each time you build your library.
>
>> - It's annoying because the struct has a lot of members I don't care
>>   about in my case.  I only want access to a few members that have
>>   important details.
>
> Since Cstubs_structs retrieves layout rather than computing it you
> only need to declare the members that you care about.
>
>> - The struct is large with lots of types that I don't necessarily want
>>   to create so creating the struct becomes somewhat awkward.  If I know
>>   the size of the types I might be able to pretend it's an array of N
>>   chars or something instead of trying to implement the type just to
>>   fill out this struct, but I don't know if that is valid.
>
> Again, since Cstubs_structs retrieves struct layout and alignment
> information from C, you can use Ctypes.make to create struct values,
> even if you haven't declared all the fields.
>
> Kind regards,
>
> Jeremy.

From yallop at gmail.com  Mon Feb 29 08:41:33 2016
From: yallop at gmail.com (Jeremy Yallop)
Date: Mon, 29 Feb 2016 08:41:33 +0000
Subject: [ocaml-ctypes] [Caml-list] ctypes - to string or to bigarray?
In-Reply-To: <86oab0hcjq.fsf@gmail.com>
References: <86oab0hcjq.fsf@gmail.com>
Message-ID: <CAAxsn=HRWGpZvXThWwAn24nhj8DX9Tmb9yey6ua06Ca3iRNbVg@mail.gmail.com>

On 28 February 2016 at 19:15, Malcolm Matalka <mmatalka at gmail.com> wrote:
> I'm writing bindings for a library that is just doing I/O and wondering
> what the suggested best practice is around using string or bigarray.  It
> seems like using Bigarray is probably the most versatile interface.
> People can decide to do the copying themselves or just use Bigarray
> everywhere.

Yes, Bigarray is the more versatile choice, and probably the better default.

> Are there any other things to consider?  Suggestions?

Since ctypes bindings are just OCaml programs, one possibility is to
abstract over the choice of storage.  David Sheets's libsodium
bindings are a good example of this approach; for example, here's a
functor which builds bindings for half a dozen functions based on an
abstract "Sodium_storage.S" signature:

    https://github.com/dsheets/ocaml-sodium/blob/95d26a85/lib_gen/sodium_bindings.ml#L64-L76

Elsewhere in the library are implementations of Sodium_storage.S for
Bigarray and for Bytes:

    https://github.com/dsheets/ocaml-sodium/blob/95d26a85/lib/sodium_storage.ml

One pleasant aspect of this approach is that the abstraction over
storage type doesn't cause any loss of type safety.  You can use all
the typed abstraction facilities of OCaml to construct your binding
descriptions, and the generated C code is checked against the headers
for the bound library by the C compiler.

