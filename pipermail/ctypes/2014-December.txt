From trevorsummerssmith at gmail.com  Tue Dec  2 13:25:24 2014
From: trevorsummerssmith at gmail.com (Trevor Smith)
Date: Tue, 2 Dec 2014 08:25:24 -0500
Subject: [ocaml-ctypes] Runtime Lock
In-Reply-To: <CAG-KTt_iuHwhasWS4t-ZvqkBE=+8A1mSYjnBtOtLjHkdfxAH6g@mail.gmail.com>
References: <CAG-KTt_iuHwhasWS4t-ZvqkBE=+8A1mSYjnBtOtLjHkdfxAH6g@mail.gmail.com>
Message-ID: <CAG-KTt9eL63Rx8WMJ6_AnP1VXUnU554xdHunsJ=vtoMbqeQhRA@mail.gmail.com>

Hello,

I thought I'd try to clarify my question.

1) C-function in thread A will be called from OCaml, and places an OCaml
callback cb onto a queue.
2) C-function in thread B will asynchronously receive the callback on the
queue, do some computation, then run cb.

My understanding is that I need to re-acquire the runtime lock when cb is
ran in thread B. Is that correct? If that is correct, I was thinking one
could make an OCaml function to call `caml_release_runtime_system` and
`caml_acquire_runtime_system`, then wrap the user callback cb:

let cb' arg =
  let () = caml_acquire_runtime_system () in
  let () = cb arg in
  caml_release_runtime_system ()

This cb' would then be passed to the thread B, instead of the user's cb.

I think this would work iff the callback returns unit, and we don't want to
do anything with the return value. Also, my understanding is that the lock
calls are _not_ reentrant, so the acquire/release set are needed.

Does that make sense? Any thoughts? Thanks!

Trevor


On Fri, Nov 28, 2014 at 12:09 PM, Trevor Smith <trevorsummerssmith at gmail.com
> wrote:

> Hello,
>
> Following up from a thread "Lifecycle of a callback?" discussed on this
> list: I want to double check my thinking.
>
> The C functions I am calling in libuv mostly do one thing: put a struct
> representing the system call to call, and the callback to run once the
> system call is called, on a queue that another thread will work on. If my
> understanding is correct, the runtime lock would need to be re-acquired
> when the OCaml callback is ran. However, it's not clear to me how to do
> this.
>
> Thoughts? Thanks.
>
> Trevor
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/ctypes/attachments/20141202/2d70a772/attachment.html>

From yallop at gmail.com  Tue Dec  2 17:07:14 2014
From: yallop at gmail.com (Jeremy Yallop)
Date: Tue, 2 Dec 2014 17:07:14 +0000
Subject: [ocaml-ctypes] Runtime Lock
In-Reply-To: <CAG-KTt9eL63Rx8WMJ6_AnP1VXUnU554xdHunsJ=vtoMbqeQhRA@mail.gmail.com>
References: <CAG-KTt_iuHwhasWS4t-ZvqkBE=+8A1mSYjnBtOtLjHkdfxAH6g@mail.gmail.com>
 <CAG-KTt9eL63Rx8WMJ6_AnP1VXUnU554xdHunsJ=vtoMbqeQhRA@mail.gmail.com>
Message-ID: <CAAxsn=FmraD5QjcxJL5_-kHuEs+1Wmt-nEbibfh6xw4jc_cSew@mail.gmail.com>

On 2 December 2014 at 13:25, Trevor Smith <trevorsummerssmith at gmail.com> wrote:
> 1) C-function in thread A will be called from OCaml, and places an OCaml
> callback cb onto a queue.
> 2) C-function in thread B will asynchronously receive the callback on the
> queue, do some computation, then run cb.
>
> My understanding is that I need to re-acquire the runtime lock when cb is
> ran in thread B. Is that correct?

Yes.  You should be able to use the "runtime_lock" argument to funptr
to indicate that the lock should be (re)acquired when calling back
into OCaml from C:

  https://github.com/ocamllabs/ocaml-ctypes/blob/e190603a4/src/ctypes-foreign-threaded/foreign.mli#L53
  https://github.com/ocamllabs/ocaml-ctypes/blob/e190603a4/src/ctypes-foreign-threaded/foreign.mli#L72-L74

You probably also need to call caml_c_thread_register() from your C
code to register the thread that's going to be calling back into
OCaml:

   http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual033.html#toc151

(It's worth reading that whole "Advanced topic: multithreading"
section of the OCaml manual, if you haven't already.)

> Also, my understanding is that the lock
> calls are _not_ reentrant, so the acquire/release set are needed.

Right.

From trevorsummerssmith at gmail.com  Tue Dec  2 17:19:56 2014
From: trevorsummerssmith at gmail.com (Trevor Smith)
Date: Tue, 2 Dec 2014 12:19:56 -0500
Subject: [ocaml-ctypes] Runtime Lock
In-Reply-To: <CAAxsn=FmraD5QjcxJL5_-kHuEs+1Wmt-nEbibfh6xw4jc_cSew@mail.gmail.com>
References: <CAG-KTt_iuHwhasWS4t-ZvqkBE=+8A1mSYjnBtOtLjHkdfxAH6g@mail.gmail.com>
 <CAG-KTt9eL63Rx8WMJ6_AnP1VXUnU554xdHunsJ=vtoMbqeQhRA@mail.gmail.com>
 <CAAxsn=FmraD5QjcxJL5_-kHuEs+1Wmt-nEbibfh6xw4jc_cSew@mail.gmail.com>
Message-ID: <CAG-KTt8mAX4PfcwpquGatV7Yw4BEgQpEKGPJcHOP4EiW9Dmwaw@mail.gmail.com>

Jeremy,

Thanks. What you said makes sense. I think I misunderstood the funptr
argument but it is very clear now.

I saw that "Advanced topic: multithreading". Given that the library I'm
linking in -- libuv -- spawns the threads itself we will need to be
creative about getting them to call the caml register function. That's next
on my list.

Thanks!

Trevor

On Tue, Dec 2, 2014 at 12:07 PM, Jeremy Yallop <yallop at gmail.com> wrote:

> On 2 December 2014 at 13:25, Trevor Smith <trevorsummerssmith at gmail.com>
> wrote:
> > 1) C-function in thread A will be called from OCaml, and places an OCaml
> > callback cb onto a queue.
> > 2) C-function in thread B will asynchronously receive the callback on the
> > queue, do some computation, then run cb.
> >
> > My understanding is that I need to re-acquire the runtime lock when cb is
> > ran in thread B. Is that correct?
>
> Yes.  You should be able to use the "runtime_lock" argument to funptr
> to indicate that the lock should be (re)acquired when calling back
> into OCaml from C:
>
>
> https://github.com/ocamllabs/ocaml-ctypes/blob/e190603a4/src/ctypes-foreign-threaded/foreign.mli#L53
>
> https://github.com/ocamllabs/ocaml-ctypes/blob/e190603a4/src/ctypes-foreign-threaded/foreign.mli#L72-L74
>
> You probably also need to call caml_c_thread_register() from your C
> code to register the thread that's going to be calling back into
> OCaml:
>
>    http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual033.html#toc151
>
> (It's worth reading that whole "Advanced topic: multithreading"
> section of the OCaml manual, if you haven't already.)
>
> > Also, my understanding is that the lock
> > calls are _not_ reentrant, so the acquire/release set are needed.
>
> Right.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/ctypes/attachments/20141202/0e4fd0cd/attachment.html>

From dbenjamin at janestreet.com  Tue Dec  2 19:39:13 2014
From: dbenjamin at janestreet.com (Dan Benjamin)
Date: Tue, 2 Dec 2014 14:39:13 -0500
Subject: [ocaml-ctypes] Next release?
Message-ID: <CACKEwpbouJdGjQ31teym8vgr1pbE2s0mhRr4=NyH78wKg5-=TA@mail.gmail.com>

Hi,

We've got a piece of code that could really benefit from the new
[release_runtime_lock] argument to [Foreign.foreign], and we were wondering
if there might be a new release coming soon.

Thanks,
Dan Benjamin
Jane Street
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.ocaml.org/pipermail/ctypes/attachments/20141202/92ad4a21/attachment.html>

From yallop at gmail.com  Tue Dec  2 21:31:34 2014
From: yallop at gmail.com (Jeremy Yallop)
Date: Tue, 2 Dec 2014 21:31:34 +0000
Subject: [ocaml-ctypes] Next release?
In-Reply-To: <CACKEwpbouJdGjQ31teym8vgr1pbE2s0mhRr4=NyH78wKg5-=TA@mail.gmail.com>
References: <CACKEwpbouJdGjQ31teym8vgr1pbE2s0mhRr4=NyH78wKg5-=TA@mail.gmail.com>
Message-ID: <CAAxsn=GP5Bo_VBBKfmVBHLOk6PRKnE_fKZaCCgemxtRV_P6W_Q@mail.gmail.com>

On 2 December 2014 at 19:39, Dan Benjamin <dbenjamin at janestreet.com> wrote:
> We've got a piece of code that could really benefit from the new
> [release_runtime_lock] argument to [Foreign.foreign], and we were wondering
> if there might be a new release coming soon.

Yes: there's a release due soon, once a few outstanding packaging
issues have been resolved.  Here's the milestone:

   <https://github.com/ocamllabs/ocaml-ctypes/milestones/ctypes 0.4>

From yallop at gmail.com  Tue Dec  2 21:34:08 2014
From: yallop at gmail.com (Jeremy Yallop)
Date: Tue, 2 Dec 2014 21:34:08 +0000
Subject: [ocaml-ctypes] Next release?
In-Reply-To: <CAAxsn=GP5Bo_VBBKfmVBHLOk6PRKnE_fKZaCCgemxtRV_P6W_Q@mail.gmail.com>
References: <CACKEwpbouJdGjQ31teym8vgr1pbE2s0mhRr4=NyH78wKg5-=TA@mail.gmail.com>
 <CAAxsn=GP5Bo_VBBKfmVBHLOk6PRKnE_fKZaCCgemxtRV_P6W_Q@mail.gmail.com>
Message-ID: <CAAxsn=FYyi-hr8KTU8738QOSzMEstu6WHkvQAhTVm1j02zjM=Q@mail.gmail.com>

On 2 December 2014 at 21:31, Jeremy Yallop <yallop at gmail.com> wrote:
> On 2 December 2014 at 19:39, Dan Benjamin <dbenjamin at janestreet.com> wrote:
>> We've got a piece of code that could really benefit from the new
>> [release_runtime_lock] argument to [Foreign.foreign], and we were wondering
>> if there might be a new release coming soon.
>
> Yes: there's a release due soon, once a few outstanding packaging
> issues have been resolved.  Here's the milestone:
>
>    <https://github.com/ocamllabs/ocaml-ctypes/milestones/ctypes 0.4>

and here it is URL-encoded:

      <https://github.com/ocamllabs/ocaml-ctypes/milestones/ctypes%200.4>

